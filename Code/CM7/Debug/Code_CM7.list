
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a04  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008ca4  08008ca4  00009ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00009d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08008d40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  24000088  08008dc8  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000310  08008dc8  0000a310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b50  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  0001fc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00022570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c71  00000000  00000000  000235b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc02  00000000  00000000  00024229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155ce  00000000  00000000  00060e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019299a  00000000  00000000  000763f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00208d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  00208dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0020d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008c8c 	.word	0x08008c8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008c8c 	.word	0x08008c8c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b47      	ldr	r3, [pc, #284]	@ (80008c8 <main+0x12c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	60fa      	str	r2, [r7, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 fa3d 	bl	8000c44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fdd3 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f887 	bl	80008e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b3d      	ldr	r3, [pc, #244]	@ (80008c8 <main+0x12c>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a3b      	ldr	r2, [pc, #236]	@ (80008c8 <main+0x12c>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <main+0x12c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fd3f 	bl	8003274 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f002 fd55 	bl	80032a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <main+0x12c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	60fa      	str	r2, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 fa0f 	bl	8000c44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f951 	bl	8000acc <MX_GPIO_Init>
  MX_ADC1_Init();
 800082a:	f000 f8cb 	bl	80009c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fb9e 	bl	8000f70 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fb9b 	bl	8000f70 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fb98 	bl	8000f70 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000840:	2101      	movs	r1, #1
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fc34 	bl	80010b0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <main+0x130>)
 800084a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <main+0x130>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <main+0x130>)
 8000858:	2200      	movs	r2, #0
 800085a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <main+0x130>)
 800085e:	2200      	movs	r2, #0
 8000860:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <main+0x130>)
 8000864:	2200      	movs	r2, #0
 8000866:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000868:	4918      	ldr	r1, [pc, #96]	@ (80008cc <main+0x130>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fca4 	bl	80011b8 <BSP_COM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0xde>
  {
    Error_Handler();
 8000876:	f000 f9e5 	bl	8000c44 <Error_Handler>
  // Start the ADC conversion

  while (1)
  {

	  printf("Welcome to STM32 world !\n\r");
 800087a:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <main+0x134>)
 800087c:	f007 fb98 	bl	8007fb0 <iprintf>
//	  }


//		  // Start the ADC conversion
//		  HAL_ADC_Start(&hadc1);
	  	  HAL_ADC_Start(&hadc1);
 8000880:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <main+0x138>)
 8000882:	f001 f9bd 	bl	8001c00 <HAL_ADC_Start>
		  // Poll for conversion completion (blocking function)
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000886:	2164      	movs	r1, #100	@ 0x64
 8000888:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <main+0x138>)
 800088a:	f001 fa83 	bl	8001d94 <HAL_ADC_PollForConversion>

		  // Get the ADC value (raw digital value)
		  adcValue = HAL_ADC_GetValue(&hadc1);
 800088e:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <main+0x138>)
 8000890:	f001 fb74 	bl	8001f7c <HAL_ADC_GetValue>
 8000894:	60b8      	str	r0, [r7, #8]

		  // Convert the raw value to voltage (assuming a 12-bit ADC with 3.3V reference)
		  //voltage = ((float)adcValue * 2.0) / 65535.0;
		  HAL_Delay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089a:	f000 fdfd 	bl	8001498 <HAL_Delay>
		  printf("%" PRIu32 "\n", adcValue);
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <main+0x13c>)
 80008a2:	f007 fb85 	bl	8007fb0 <iprintf>
		  //HAL_ADC_Stop(&hadc1);



    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <main+0x140>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d1e5      	bne.n	800087a <main+0xde>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <main+0x140>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 fbd1 	bl	800105c <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fbce 	bl	800105c <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fbcb 	bl	800105c <BSP_LED_Toggle>
	  printf("Welcome to STM32 world !\n\r");
 80008c6:	e7d8      	b.n	800087a <main+0xde>
 80008c8:	58024400 	.word	0x58024400
 80008cc:	240000a4 	.word	0x240000a4
 80008d0:	08008ca4 	.word	0x08008ca4
 80008d4:	240000b8 	.word	0x240000b8
 80008d8:	08008cc0 	.word	0x08008cc0
 80008dc:	240000b4 	.word	0x240000b4

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	@ 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	224c      	movs	r2, #76	@ 0x4c
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 fbb3 	bl	800805a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2220      	movs	r2, #32
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f007 fbad 	bl	800805a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000900:	2004      	movs	r0, #4
 8000902:	f002 fce5 	bl	80032d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <SystemClock_Config+0xd8>)
 800090c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090e:	4a2a      	ldr	r2, [pc, #168]	@ (80009b8 <SystemClock_Config+0xd8>)
 8000910:	f023 0301 	bic.w	r3, r3, #1
 8000914:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <SystemClock_Config+0xd8>)
 8000918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <SystemClock_Config+0xdc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000928:	4a24      	ldr	r2, [pc, #144]	@ (80009bc <SystemClock_Config+0xdc>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <SystemClock_Config+0xdc>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	bf00      	nop
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <SystemClock_Config+0xdc>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800094a:	d1f8      	bne.n	800093e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <SystemClock_Config+0xe0>)
 800094e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <SystemClock_Config+0xe0>)
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800095c:	2301      	movs	r3, #1
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fd09 	bl	8003384 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000978:	f000 f964 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	233f      	movs	r3, #63	@ 0x3f
 800097e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 f949 	bl	8003c38 <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009ac:	f000 f94a 	bl	8000c44 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3770      	adds	r7, #112	@ 0x70
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58000400 	.word	0x58000400
 80009bc:	58024800 	.word	0x58024800
 80009c0:	58024400 	.word	0x58024400

080009c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009e8:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 80009ea:	4a36      	ldr	r2, [pc, #216]	@ (8000ac4 <MX_ADC1_Init+0x100>)
 80009ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ee:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a38:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	4820      	ldr	r0, [pc, #128]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a40:	f000 ff3c 	bl	80018bc <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a4a:	f000 f8fb 	bl	8000c44 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a5e:	f000 ff2d 	bl	80018bc <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a68:	f000 f8ec 	bl	8000c44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000a78:	f001 ffa6 	bl	80029c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000a82:	f000 f8df 	bl	8000c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_ADC1_Init+0x104>)
 8000a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a92:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_ADC1_Init+0xfc>)
 8000aaa:	f001 fa75 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000ab4:	f000 f8c6 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	240000b8 	.word	0x240000b8
 8000ac4:	40022000 	.word	0x40022000
 8000ac8:	4b840000 	.word	0x4b840000

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a47      	ldr	r2, [pc, #284]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b45      	ldr	r3, [pc, #276]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b41      	ldr	r3, [pc, #260]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a40      	ldr	r2, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b5a:	2332      	movs	r3, #50	@ 0x32
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4825      	ldr	r0, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0x140>)
 8000b76:	f002 f999 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b7a:	2386      	movs	r3, #134	@ 0x86
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	481e      	ldr	r0, [pc, #120]	@ (8000c10 <MX_GPIO_Init+0x144>)
 8000b96:	f002 f989 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <MX_GPIO_Init+0x148>)
 8000bb8:	f002 f978 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bbc:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_GPIO_Init+0x144>)
 8000bda:	f002 f967 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bde:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_GPIO_Init+0x14c>)
 8000bfc:	f002 f956 	bl	8002eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020800 	.word	0x58020800
 8000c10:	58020000 	.word	0x58020000
 8000c14:	58020400 	.word	0x58020400
 8000c18:	58021800 	.word	0x58021800

08000c1c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <BSP_PB_Callback+0x24>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	240000b4 	.word	0x240000b4

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_MspInit+0x30>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c5c:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x30>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x30>)
 8000c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	58024400 	.word	0x58024400

08000c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ba      	sub	sp, #232	@ 0xe8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	22c0      	movs	r2, #192	@ 0xc0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f007 f9d8 	bl	800805a <memset>
  if(hadc->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a2b      	ldr	r2, [pc, #172]	@ (8000d5c <HAL_ADC_MspInit+0xd8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d14f      	bne.n	8000d54 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cd4:	23c0      	movs	r3, #192	@ 0xc0
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fb30 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000cf6:	f7ff ffa5 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d00:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_ADC_MspInit+0xdc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d36:	2310      	movs	r3, #16
 8000d38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000d50:	f002 f8ac 	bl	8002eac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	37e8      	adds	r7, #232	@ 0xe8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40022000 	.word	0x40022000
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020000 	.word	0x58020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 fb4b 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f9e2 	bl	8001194 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de6:	f3af 8000 	nop.w
 8000dea:	4601      	mov	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
  }

  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fa27 	bl	800127c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
  }
  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f007 f90a 	bl	80080f8 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24080000 	.word	0x24080000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	2400011c 	.word	0x2400011c
 8000f18:	24000310 	.word	0x24000310

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff fba6 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f007 f8db 	bl	8008104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fc25 	bl	800079c <main>
  bx  lr
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f5c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000f60:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8000f64:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000f68:	24000310 	.word	0x24000310

08000f6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <BSP_LED_Init+0x28>
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d006      	beq.n	8000f98 <BSP_LED_Init+0x28>
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d003      	beq.n	8000f98 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f90:	f06f 0301 	mvn.w	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f96:	e055      	b.n	8001044 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fae:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	e021      	b.n	8001002 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10f      	bne.n	8000fe4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a21      	ldr	r2, [pc, #132]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	e00e      	b.n	8001002 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <BSP_LED_Init+0xe0>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <BSP_LED_Init+0xe4>)
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <BSP_LED_Init+0xe8>)
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	f107 0218 	add.w	r2, r7, #24
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 ff40 	bl	8002eac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <BSP_LED_Init+0xe8>)
 8001030:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <BSP_LED_Init+0xe4>)
 8001038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f002 f8e4 	bl	800320c <HAL_GPIO_WritePin>
  }

  return ret;
 8001044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001046:	4618      	mov	r0, r3
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	08008cd8 	.word	0x08008cd8
 8001058:	2400000c 	.word	0x2400000c

0800105c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d009      	beq.n	8001084 <BSP_LED_Toggle+0x28>
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d006      	beq.n	8001084 <BSP_LED_Toggle+0x28>
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d003      	beq.n	8001084 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800107c:	f06f 0301 	mvn.w	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e00b      	b.n	800109c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <BSP_LED_Toggle+0x4c>)
 8001088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4907      	ldr	r1, [pc, #28]	@ (80010ac <BSP_LED_Toggle+0x50>)
 8001090:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f002 f8d1 	bl	800323e <HAL_GPIO_TogglePin>
  }

  return ret;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400000c 	.word	0x2400000c
 80010ac:	08008cd8 	.word	0x08008cd8

080010b0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <BSP_PB_Init+0xcc>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <BSP_PB_Init+0xcc>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <BSP_PB_Init+0xcc>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80010de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <BSP_PB_Init+0xd0>)
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fed1 	bl	8002eac <HAL_GPIO_Init>
 800110a:	e031      	b.n	8001170 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800110c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001110:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <BSP_PB_Init+0xd0>)
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fec3 	bl	8002eac <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <BSP_PB_Init+0xd4>)
 800112c:	441a      	add	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4915      	ldr	r1, [pc, #84]	@ (8001188 <BSP_PB_Init+0xd8>)
 8001132:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f001 fe66 	bl	8002e0a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <BSP_PB_Init+0xd4>)
 8001144:	1898      	adds	r0, r3, r2
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a10      	ldr	r2, [pc, #64]	@ (800118c <BSP_PB_Init+0xdc>)
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	461a      	mov	r2, r3
 8001150:	2100      	movs	r1, #0
 8001152:	f001 fe3b 	bl	8002dcc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <BSP_PB_Init+0xe0>)
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f001 fde9 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001168:	2328      	movs	r3, #40	@ 0x28
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fdff 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	58024400 	.word	0x58024400
 8001180:	24000018 	.word	0x24000018
 8001184:	24000120 	.word	0x24000120
 8001188:	08008ce0 	.word	0x08008ce0
 800118c:	2400001c 	.word	0x2400001c
 8001190:	24000020 	.word	0x24000020

08001194 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <BSP_PB_IRQHandler+0x20>)
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fe44 	bl	8002e34 <HAL_EXTI_IRQHandler>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24000120 	.word	0x24000120

080011b8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011ce:	f06f 0301 	mvn.w	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e018      	b.n	8001208 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2294      	movs	r2, #148	@ 0x94
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <BSP_COM_Init+0x5c>)
 80011e0:	4413      	add	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f86e 	bl	80012c4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2294      	movs	r2, #148	@ 0x94
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <BSP_COM_Init+0x5c>)
 80011f2:	4413      	add	r3, r2
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f80e 	bl	8001218 <MX_USART3_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001202:	f06f 0303 	mvn.w	r3, #3
 8001206:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000128 	.word	0x24000128

08001218 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_USART3_Init+0x60>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	220c      	movs	r2, #12
 8001236:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	895b      	ldrh	r3, [r3, #10]
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	891b      	ldrh	r3, [r3, #8]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	899b      	ldrh	r3, [r3, #12]
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001264:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f005 fd70 	bl	8006d4c <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000008 	.word	0x24000008

0800127c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <__io_putchar+0x30>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	2394      	movs	r3, #148	@ 0x94
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <__io_putchar+0x34>)
 8001292:	1898      	adds	r0, r3, r2
 8001294:	1d39      	adds	r1, r7, #4
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	2201      	movs	r2, #1
 800129c:	f005 fdb0 	bl	8006e00 <HAL_UART_Transmit>
  return ch;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240001bc 	.word	0x240001bc
 80012b0:	24000128 	.word	0x24000128

080012b4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fcaf 	bl	8000c1c <BSP_PB_Callback>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <COM1_MspInit+0xa8>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	4a26      	ldr	r2, [pc, #152]	@ (800136c <COM1_MspInit+0xa8>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <COM1_MspInit+0xa8>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <COM1_MspInit+0xa8>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <COM1_MspInit+0xa8>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <COM1_MspInit+0xa8>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <COM1_MspInit+0xa8>)
 800130a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <COM1_MspInit+0xa8>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <COM1_MspInit+0xa8>)
 800131a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800131e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480b      	ldr	r0, [pc, #44]	@ (8001370 <COM1_MspInit+0xac>)
 8001344:	f001 fdb2 	bl	8002eac <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001352:	2307      	movs	r3, #7
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <COM1_MspInit+0xac>)
 800135e:	f001 fda5 	bl	8002eac <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	@ 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	58024400 	.word	0x58024400
 8001370:	58020c00 	.word	0x58020c00

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137a:	2003      	movs	r0, #3
 800137c:	f001 fcd2 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001380:	f002 fe10 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	4913      	ldr	r1, [pc, #76]	@ (80013e0 <HAL_Init+0x6c>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_Init+0x68>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_Init+0x6c>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_Init+0x70>)
 80013b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_Init+0x74>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f814 	bl	80013ec <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e002      	b.n	80013d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ce:	f7ff fc3f 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	08008cc8 	.word	0x08008cc8
 80013e4:	24000004 	.word	0x24000004
 80013e8:	24000000 	.word	0x24000000

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_InitTick+0x60>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e021      	b.n	8001444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_InitTick+0x64>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fcb7 	bl	8002d8a <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f001 fc81 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x68>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000028 	.word	0x24000028
 8001450:	24000000 	.word	0x24000000
 8001454:	24000024 	.word	0x24000024

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	24000028 	.word	0x24000028
 800147c:	240001c0 	.word	0x240001c0

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	240001c0 	.word	0x240001c0

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000028 	.word	0x24000028

080014e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetREVID+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0c1b      	lsrs	r3, r3, #16
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	5c001000 	.word	0x5c001000

080014f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3360      	adds	r3, #96	@ 0x60
 8001572:	461a      	mov	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	611a      	str	r2, [r3, #16]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3360      	adds	r3, #96	@ 0x60
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
  }
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3330      	adds	r3, #48	@ 0x30
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	211f      	movs	r1, #31
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0e9b      	lsrs	r3, r3, #26
 8001666:	f003 011f 	and.w	r1, r3, #31
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3314      	adds	r3, #20
 8001696:	461a      	mov	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0e5b      	lsrs	r3, r3, #25
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2107      	movs	r1, #7
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0d1b      	lsrs	r3, r3, #20
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0318 	and.w	r3, r3, #24
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001700:	40d9      	lsrs	r1, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	400b      	ands	r3, r1
 8001706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	000fffff 	.word	0x000fffff

08001724 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 031f 	and.w	r3, r3, #31
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <LL_ADC_DisableDeepPowerDown+0x20>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6093      	str	r3, [r2, #8]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	5fffffc0 	.word	0x5fffffc0

08001780 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001794:	d101      	bne.n	800179a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <LL_ADC_EnableInternalRegulator+0x24>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	6fffffc0 	.word	0x6fffffc0

080017d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017e4:	d101      	bne.n	80017ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <LL_ADC_Enable+0x24>)
 8001806:	4013      	ands	r3, r2
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	7fffffc0 	.word	0x7fffffc0

08001820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <LL_ADC_IsEnabled+0x18>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <LL_ADC_IsEnabled+0x1a>
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <LL_ADC_REG_StartConversion+0x24>)
 8001856:	4013      	ands	r3, r2
 8001858:	f043 0204 	orr.w	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	7fffffc0 	.word	0x7fffffc0

08001870 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b04      	cmp	r3, #4
 8001882:	d101      	bne.n	8001888 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d101      	bne.n	80018ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e18f      	b.n	8001bf6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff f9cd 	bl	8000c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff3f 	bl	8001780 <LL_ADC_IsDeepPowerDownEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff25 	bl	800175c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff5a 	bl	80017d0 <LL_ADC_IsInternalRegulatorEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d114      	bne.n	800194c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff3e 	bl	80017a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800192c:	4b87      	ldr	r3, [pc, #540]	@ (8001b4c <HAL_ADC_Init+0x290>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	4a87      	ldr	r2, [pc, #540]	@ (8001b50 <HAL_ADC_Init+0x294>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	3301      	adds	r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800193e:	e002      	b.n	8001946 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3b01      	subs	r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff3d 	bl	80017d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff77 	bl	8001870 <LL_ADC_REG_IsConversionOngoing>
 8001982:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	f040 8129 	bne.w	8001be4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 8125 	bne.w	8001be4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff36 	bl	8001820 <LL_ADC_IsEnabled>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d136      	bne.n	8001a28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_ADC_Init+0x298>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_Init+0x112>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a63      	ldr	r2, [pc, #396]	@ (8001b58 <HAL_ADC_Init+0x29c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10e      	bne.n	80019ec <HAL_ADC_Init+0x130>
 80019ce:	4861      	ldr	r0, [pc, #388]	@ (8001b54 <HAL_ADC_Init+0x298>)
 80019d0:	f7ff ff26 	bl	8001820 <LL_ADC_IsEnabled>
 80019d4:	4604      	mov	r4, r0
 80019d6:	4860      	ldr	r0, [pc, #384]	@ (8001b58 <HAL_ADC_Init+0x29c>)
 80019d8:	f7ff ff22 	bl	8001820 <LL_ADC_IsEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	4323      	orrs	r3, r4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e008      	b.n	80019fe <HAL_ADC_Init+0x142>
 80019ec:	485b      	ldr	r0, [pc, #364]	@ (8001b5c <HAL_ADC_Init+0x2a0>)
 80019ee:	f7ff ff17 	bl	8001820 <LL_ADC_IsEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d012      	beq.n	8001a28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a53      	ldr	r2, [pc, #332]	@ (8001b54 <HAL_ADC_Init+0x298>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0x15a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a51      	ldr	r2, [pc, #324]	@ (8001b58 <HAL_ADC_Init+0x29c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Init+0x15e>
 8001a16:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_ADC_Init+0x2a4>)
 8001a18:	e000      	b.n	8001a1c <HAL_ADC_Init+0x160>
 8001a1a:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_ADC_Init+0x2a8>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f7ff fd68 	bl	80014f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a28:	f7ff fd5a 	bl	80014e0 <HAL_GetREVID>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d914      	bls.n	8001a60 <HAL_ADC_Init+0x1a4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d110      	bne.n	8001a60 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7d5b      	ldrb	r3, [r3, #21]
 8001a42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7f1b      	ldrb	r3, [r3, #28]
 8001a54:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a56:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a58:	f043 030c 	orr.w	r3, r3, #12
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	e00d      	b.n	8001a7c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7d5b      	ldrb	r3, [r3, #21]
 8001a64:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a6a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a70:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f1b      	ldrb	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	045b      	lsls	r3, r3, #17
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_ADC_Init+0x2ac>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	69b9      	ldr	r1, [r7, #24]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fed2 	bl	8001870 <LL_ADC_REG_IsConversionOngoing>
 8001acc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fedf 	bl	8001896 <LL_ADC_INJ_IsConversionOngoing>
 8001ad8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d15f      	bne.n	8001ba0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d15c      	bne.n	8001ba0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7d1b      	ldrb	r3, [r3, #20]
 8001aea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <HAL_ADC_Init+0x2b0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d130      	bne.n	8001b74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_ADC_Init+0x2b4>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b26:	3a01      	subs	r2, #1
 8001b28:	0411      	lsls	r1, r2, #16
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	e01c      	b.n	8001b84 <HAL_ADC_Init+0x2c8>
 8001b4a:	bf00      	nop
 8001b4c:	24000000 	.word	0x24000000
 8001b50:	053e2d63 	.word	0x053e2d63
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40022100 	.word	0x40022100
 8001b5c:	58026000 	.word	0x58026000
 8001b60:	40022300 	.word	0x40022300
 8001b64:	58026300 	.word	0x58026300
 8001b68:	fff0c003 	.word	0xfff0c003
 8001b6c:	ffffbffc 	.word	0xffffbffc
 8001b70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fde2 	bl	8002764 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f023 010f 	bic.w	r1, r3, #15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc0:	e007      	b.n	8001bd2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 020f 	bic.w	r2, r2, #15
 8001bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001be2:	e007      	b.n	8001bf4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	f043 0210 	orr.w	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop

08001c00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d80 <HAL_ADC_Start+0x180>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_Start+0x1c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5b      	ldr	r2, [pc, #364]	@ (8001d84 <HAL_ADC_Start+0x184>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_Start+0x20>
 8001c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8001d88 <HAL_ADC_Start+0x188>)
 8001c1e:	e000      	b.n	8001c22 <HAL_ADC_Start+0x22>
 8001c20:	4b5a      	ldr	r3, [pc, #360]	@ (8001d8c <HAL_ADC_Start+0x18c>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fd7e 	bl	8001724 <LL_ADC_GetMultimode>
 8001c28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fe1e 	bl	8001870 <LL_ADC_REG_IsConversionOngoing>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 809a 	bne.w	8001d70 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Start+0x4a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e095      	b.n	8001d76 <HAL_ADC_Start+0x176>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fcfc 	bl	8002650 <ADC_Enable>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8081 	bne.w	8001d66 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c68:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <HAL_ADC_Start+0x190>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a42      	ldr	r2, [pc, #264]	@ (8001d84 <HAL_ADC_Start+0x184>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Start+0x84>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Start+0x86>
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_ADC_Start+0x180>)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d002      	beq.n	8001c94 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f023 0206 	bic.w	r2, r3, #6
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cba:	e002      	b.n	8001cc2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	221c      	movs	r2, #28
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d84 <HAL_ADC_Start+0x184>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_Start+0xe2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Start+0xe4>
 8001ce2:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_ADC_Start+0x180>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d008      	beq.n	8001cfe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	d114      	bne.n	8001d28 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fd91 	bl	8001848 <LL_ADC_REG_StartConversion>
 8001d26:	e025      	b.n	8001d74 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <HAL_ADC_Start+0x184>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d002      	beq.n	8001d44 <HAL_ADC_Start+0x144>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_Start+0x146>
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_ADC_Start+0x180>)
 8001d46:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00f      	beq.n	8001d74 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d64:	e006      	b.n	8001d74 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d6e:	e001      	b.n	8001d74 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
 8001d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022100 	.word	0x40022100
 8001d88:	40022300 	.word	0x40022300
 8001d8c:	58026300 	.word	0x58026300
 8001d90:	fffff0fe 	.word	0xfffff0fe

08001d94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a72      	ldr	r2, [pc, #456]	@ (8001f6c <HAL_ADC_PollForConversion+0x1d8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_ADC_PollForConversion+0x1e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a70      	ldr	r2, [pc, #448]	@ (8001f70 <HAL_ADC_PollForConversion+0x1dc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_PollForConversion+0x22>
 8001db2:	4b70      	ldr	r3, [pc, #448]	@ (8001f74 <HAL_ADC_PollForConversion+0x1e0>)
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_PollForConversion+0x24>
 8001db6:	4b70      	ldr	r3, [pc, #448]	@ (8001f78 <HAL_ADC_PollForConversion+0x1e4>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fcb3 	bl	8001724 <LL_ADC_GetMultimode>
 8001dbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	e037      	b.n	8001e3e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d002      	beq.n	8001de0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d111      	bne.n	8001e04 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0b1      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dfe:	2304      	movs	r3, #4
 8001e00:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e02:	e01c      	b.n	8001e3e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_ADC_PollForConversion+0x1d8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_PollForConversion+0x84>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a57      	ldr	r2, [pc, #348]	@ (8001f70 <HAL_ADC_PollForConversion+0x1dc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x88>
 8001e18:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <HAL_ADC_PollForConversion+0x1e0>)
 8001e1a:	e000      	b.n	8001e1e <HAL_ADC_PollForConversion+0x8a>
 8001e1c:	4b56      	ldr	r3, [pc, #344]	@ (8001f78 <HAL_ADC_PollForConversion+0x1e4>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fc8e 	bl	8001740 <LL_ADC_GetMultiDMATransfer>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e093      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fb1f 	bl	8001480 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e44:	e021      	b.n	8001e8a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d01d      	beq.n	8001e8a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e4e:	f7ff fb17 	bl	8001480 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <HAL_ADC_PollForConversion+0xd0>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e06b      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0d6      	beq.n	8001e46 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fbad 	bl	8001608 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01c      	beq.n	8001eee <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7d5b      	ldrb	r3, [r3, #21]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d118      	bne.n	8001eee <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d111      	bne.n	8001eee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_ADC_PollForConversion+0x1dc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_PollForConversion+0x16a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_PollForConversion+0x16c>
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_ADC_PollForConversion+0x1d8>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d008      	beq.n	8001f1a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d002      	beq.n	8001f1a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d104      	bne.n	8001f24 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	e00c      	b.n	8001f3e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a11      	ldr	r2, [pc, #68]	@ (8001f70 <HAL_ADC_PollForConversion+0x1dc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d002      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x1a0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_PollForConversion+0x1a2>
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <HAL_ADC_PollForConversion+0x1d8>)
 8001f36:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d104      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2208      	movs	r2, #8
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e008      	b.n	8001f60 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40022100 	.word	0x40022100
 8001f74:	40022300 	.word	0x40022300
 8001f78:	58026300 	.word	0x58026300

08001f7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b0a1      	sub	sp, #132	@ 0x84
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <HAL_ADC_ConfigChannel+0x1b0>)
 8001fb2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x2a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e32e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x688>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc4e 	bl	8001870 <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8313 	bne.w	8002602 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db2c      	blt.n	800203e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x6a>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	e016      	b.n	8002030 <HAL_ADC_ConfigChannel+0x98>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002012:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800201e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	69d1      	ldr	r1, [r2, #28]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	430b      	orrs	r3, r1
 800203c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f7ff faef 	bl	800162e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fc0b 	bl	8001870 <LL_ADC_REG_IsConversionOngoing>
 800205a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fc18 	bl	8001896 <LL_ADC_INJ_IsConversionOngoing>
 8002066:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80b8 	bne.w	80021e0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80b4 	bne.w	80021e0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fafe 	bl	8001686 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_ADC_ConfigChannel+0x1b4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x118>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	e01d      	b.n	80020ec <HAL_ADC_ConfigChannel+0x154>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x13e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	e00a      	b.n	80020ec <HAL_ADC_ConfigChannel+0x154>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d02c      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002104:	f7ff fa2c 	bl	8001560 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	7e5b      	ldrb	r3, [r3, #25]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_ADC_ConfigChannel+0x186>
 8002118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800211c:	e000      	b.n	8002120 <HAL_ADC_ConfigChannel+0x188>
 800211e:	2300      	movs	r3, #0
 8002120:	461a      	mov	r2, r3
 8002122:	f7ff fa56 	bl	80015d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7e1b      	ldrb	r3, [r3, #24]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1a4>
 8002136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800213a:	e000      	b.n	800213e <HAL_ADC_ConfigChannel+0x1a6>
 800213c:	2300      	movs	r3, #0
 800213e:	461a      	mov	r2, r3
 8002140:	f7ff fa2e 	bl	80015a0 <LL_ADC_SetDataRightShift>
 8002144:	e04c      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x248>
 8002146:	bf00      	nop
 8002148:	47ff0000 	.word	0x47ff0000
 800214c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	429a      	cmp	r2, r3
 8002162:	d107      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002172:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800217a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	429a      	cmp	r2, r3
 8002186:	d107      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002196:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800219e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	069b      	lsls	r3, r3, #26
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d107      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fb1b 	bl	8001820 <LL_ADC_IsEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 8211 	bne.w	8002614 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	461a      	mov	r2, r3
 8002200:	f7ff fa6c 	bl	80016dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4aa1      	ldr	r2, [pc, #644]	@ (8002490 <HAL_ADC_ConfigChannel+0x4f8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f040 812e 	bne.w	800246c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x2a0>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	3301      	adds	r3, #1
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2b09      	cmp	r3, #9
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e019      	b.n	800226c <HAL_ADC_ConfigChannel+0x2d4>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002248:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800224a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e003      	b.n	800225c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b09      	cmp	r3, #9
 8002264:	bf94      	ite	ls
 8002266:	2301      	movls	r3, #1
 8002268:	2300      	movhi	r3, #0
 800226a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226c:	2b00      	cmp	r3, #0
 800226e:	d079      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_ADC_ConfigChannel+0x2f4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	069b      	lsls	r3, r3, #26
 8002286:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800228a:	e015      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x320>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800229a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800229c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800229e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80022a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x340>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	e017      	b.n	8002308 <HAL_ADC_ConfigChannel+0x370>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80022f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	ea42 0103 	orr.w	r1, r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x396>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	3301      	adds	r3, #1
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	051b      	lsls	r3, r3, #20
 800232c:	e018      	b.n	8002360 <HAL_ADC_ConfigChannel+0x3c8>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e003      	b.n	8002352 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002360:	430b      	orrs	r3, r1
 8002362:	e07e      	b.n	8002462 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x3e8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	069b      	lsls	r3, r3, #26
 800237a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800237e:	e015      	b.n	80023ac <HAL_ADC_ConfigChannel+0x414>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e003      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x434>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	e017      	b.n	80023fc <HAL_ADC_ConfigChannel+0x464>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	61bb      	str	r3, [r7, #24]
  return result;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	ea42 0103 	orr.w	r1, r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x490>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	3301      	adds	r3, #1
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	3b1e      	subs	r3, #30
 8002420:	051b      	lsls	r3, r3, #20
 8002422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002426:	e01b      	b.n	8002460 <HAL_ADC_ConfigChannel+0x4c8>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	60fb      	str	r3, [r7, #12]
  return result;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e003      	b.n	800244c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	3b1e      	subs	r3, #30
 800245a:	051b      	lsls	r3, r3, #20
 800245c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002460:	430b      	orrs	r3, r1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	4619      	mov	r1, r3
 8002468:	f7ff f90d 	bl	8001686 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f280 80cf 	bge.w	8002614 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <HAL_ADC_ConfigChannel+0x4fc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_ADC_ConfigChannel+0x4f2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <HAL_ADC_ConfigChannel+0x500>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x508>
 800248a:	4b04      	ldr	r3, [pc, #16]	@ (800249c <HAL_ADC_ConfigChannel+0x504>)
 800248c:	e009      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x50a>
 800248e:	bf00      	nop
 8002490:	47ff0000 	.word	0x47ff0000
 8002494:	40022000 	.word	0x40022000
 8002498:	40022100 	.word	0x40022100
 800249c:	40022300 	.word	0x40022300
 80024a0:	4b61      	ldr	r3, [pc, #388]	@ (8002628 <HAL_ADC_ConfigChannel+0x690>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f84e 	bl	8001544 <LL_ADC_GetCommonPathInternalCh>
 80024a8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5f      	ldr	r2, [pc, #380]	@ (800262c <HAL_ADC_ConfigChannel+0x694>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_ADC_ConfigChannel+0x526>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002630 <HAL_ADC_ConfigChannel+0x698>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10e      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x544>
 80024be:	485b      	ldr	r0, [pc, #364]	@ (800262c <HAL_ADC_ConfigChannel+0x694>)
 80024c0:	f7ff f9ae 	bl	8001820 <LL_ADC_IsEnabled>
 80024c4:	4604      	mov	r4, r0
 80024c6:	485a      	ldr	r0, [pc, #360]	@ (8002630 <HAL_ADC_ConfigChannel+0x698>)
 80024c8:	f7ff f9aa 	bl	8001820 <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4323      	orrs	r3, r4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e008      	b.n	80024ee <HAL_ADC_ConfigChannel+0x556>
 80024dc:	4855      	ldr	r0, [pc, #340]	@ (8002634 <HAL_ADC_ConfigChannel+0x69c>)
 80024de:	f7ff f99f 	bl	8001820 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d07d      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a50      	ldr	r2, [pc, #320]	@ (8002638 <HAL_ADC_ConfigChannel+0x6a0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d130      	bne.n	800255e <HAL_ADC_ConfigChannel+0x5c6>
 80024fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d12b      	bne.n	800255e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_ADC_ConfigChannel+0x69c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	f040 8081 	bne.w	8002614 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a45      	ldr	r2, [pc, #276]	@ (800262c <HAL_ADC_ConfigChannel+0x694>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x58e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a43      	ldr	r2, [pc, #268]	@ (8002630 <HAL_ADC_ConfigChannel+0x698>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x592>
 8002526:	4a45      	ldr	r2, [pc, #276]	@ (800263c <HAL_ADC_ConfigChannel+0x6a4>)
 8002528:	e000      	b.n	800252c <HAL_ADC_ConfigChannel+0x594>
 800252a:	4a3f      	ldr	r2, [pc, #252]	@ (8002628 <HAL_ADC_ConfigChannel+0x690>)
 800252c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800252e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7fe fff2 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253a:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_ADC_ConfigChannel+0x6a8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	4a40      	ldr	r2, [pc, #256]	@ (8002644 <HAL_ADC_ConfigChannel+0x6ac>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	3301      	adds	r3, #1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800254e:	e002      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3b01      	subs	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800255c:	e05a      	b.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a39      	ldr	r2, [pc, #228]	@ (8002648 <HAL_ADC_ConfigChannel+0x6b0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d11e      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x60e>
 8002568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2f      	ldr	r2, [pc, #188]	@ (8002634 <HAL_ADC_ConfigChannel+0x69c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d14b      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2a      	ldr	r2, [pc, #168]	@ (800262c <HAL_ADC_ConfigChannel+0x694>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x5f8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a29      	ldr	r2, [pc, #164]	@ (8002630 <HAL_ADC_ConfigChannel+0x698>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x5fc>
 8002590:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <HAL_ADC_ConfigChannel+0x6a4>)
 8002592:	e000      	b.n	8002596 <HAL_ADC_ConfigChannel+0x5fe>
 8002594:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <HAL_ADC_ConfigChannel+0x690>)
 8002596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f7fe ffbd 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a4:	e036      	b.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a28      	ldr	r2, [pc, #160]	@ (800264c <HAL_ADC_ConfigChannel+0x6b4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d131      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
 80025b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12c      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_ADC_ConfigChannel+0x69c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d127      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a18      	ldr	r2, [pc, #96]	@ (800262c <HAL_ADC_ConfigChannel+0x694>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x640>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a17      	ldr	r2, [pc, #92]	@ (8002630 <HAL_ADC_ConfigChannel+0x698>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x644>
 80025d8:	4a18      	ldr	r2, [pc, #96]	@ (800263c <HAL_ADC_ConfigChannel+0x6a4>)
 80025da:	e000      	b.n	80025de <HAL_ADC_ConfigChannel+0x646>
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <HAL_ADC_ConfigChannel+0x690>)
 80025de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f7fe ff99 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
 80025ec:	e012      	b.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002600:	e008      	b.n	8002614 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800261c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002620:	4618      	mov	r0, r3
 8002622:	3784      	adds	r7, #132	@ 0x84
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	58026300 	.word	0x58026300
 800262c:	40022000 	.word	0x40022000
 8002630:	40022100 	.word	0x40022100
 8002634:	58026000 	.word	0x58026000
 8002638:	cb840000 	.word	0xcb840000
 800263c:	40022300 	.word	0x40022300
 8002640:	24000000 	.word	0x24000000
 8002644:	053e2d63 	.word	0x053e2d63
 8002648:	c7520000 	.word	0xc7520000
 800264c:	cfb80000 	.word	0xcfb80000

08002650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff f8df 	bl	8001820 <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d16e      	bne.n	8002746 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <ADC_Enable+0x100>)
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e05a      	b.n	8002748 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f8ae 	bl	80017f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800269c:	f7fe fef0 	bl	8001480 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <ADC_Enable+0x104>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <ADC_Enable+0x66>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a29      	ldr	r2, [pc, #164]	@ (8002758 <ADC_Enable+0x108>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <ADC_Enable+0x6a>
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <ADC_Enable+0x10c>)
 80026b8:	e000      	b.n	80026bc <ADC_Enable+0x6c>
 80026ba:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <ADC_Enable+0x110>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f831 	bl	8001724 <LL_ADC_GetMultimode>
 80026c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a23      	ldr	r2, [pc, #140]	@ (8002758 <ADC_Enable+0x108>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d002      	beq.n	80026d4 <ADC_Enable+0x84>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e000      	b.n	80026d6 <ADC_Enable+0x86>
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <ADC_Enable+0x104>)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02c      	beq.n	8002738 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d130      	bne.n	8002746 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e4:	e028      	b.n	8002738 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f898 	bl	8001820 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f87c 	bl	80017f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002700:	f7fe febe 	bl	8001480 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d914      	bls.n	8002738 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d00d      	beq.n	8002738 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d1cf      	bne.n	80026e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	8000003f 	.word	0x8000003f
 8002754:	40022000 	.word	0x40022000
 8002758:	40022100 	.word	0x40022100
 800275c:	40022300 	.word	0x40022300
 8002760:	58026300 	.word	0x58026300

08002764 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a7a      	ldr	r2, [pc, #488]	@ (800295c <ADC_ConfigureBoostMode+0x1f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <ADC_ConfigureBoostMode+0x1c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a79      	ldr	r2, [pc, #484]	@ (8002960 <ADC_ConfigureBoostMode+0x1fc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d109      	bne.n	8002794 <ADC_ConfigureBoostMode+0x30>
 8002780:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <ADC_ConfigureBoostMode+0x200>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e008      	b.n	80027a6 <ADC_ConfigureBoostMode+0x42>
 8002794:	4b74      	ldr	r3, [pc, #464]	@ (8002968 <ADC_ConfigureBoostMode+0x204>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01c      	beq.n	80027e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027aa:	f001 fd75 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80027ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027b8:	d010      	beq.n	80027dc <ADC_ConfigureBoostMode+0x78>
 80027ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027be:	d873      	bhi.n	80028a8 <ADC_ConfigureBoostMode+0x144>
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d002      	beq.n	80027cc <ADC_ConfigureBoostMode+0x68>
 80027c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027ca:	d16d      	bne.n	80028a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	60fb      	str	r3, [r7, #12]
        break;
 80027da:	e068      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	60fb      	str	r3, [r7, #12]
        break;
 80027e2:	e064      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	f002 ffba 	bl	8005764 <HAL_RCCEx_GetPeriphCLKFreq>
 80027f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80027fa:	d051      	beq.n	80028a0 <ADC_ConfigureBoostMode+0x13c>
 80027fc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002800:	d854      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 8002802:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002806:	d047      	beq.n	8002898 <ADC_ConfigureBoostMode+0x134>
 8002808:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800280c:	d84e      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 800280e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002812:	d03d      	beq.n	8002890 <ADC_ConfigureBoostMode+0x12c>
 8002814:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002818:	d848      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 800281a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800281e:	d033      	beq.n	8002888 <ADC_ConfigureBoostMode+0x124>
 8002820:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002824:	d842      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 8002826:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800282a:	d029      	beq.n	8002880 <ADC_ConfigureBoostMode+0x11c>
 800282c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002830:	d83c      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 8002832:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002836:	d01a      	beq.n	800286e <ADC_ConfigureBoostMode+0x10a>
 8002838:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800283c:	d836      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 800283e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002842:	d014      	beq.n	800286e <ADC_ConfigureBoostMode+0x10a>
 8002844:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002848:	d830      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 800284a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800284e:	d00e      	beq.n	800286e <ADC_ConfigureBoostMode+0x10a>
 8002850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002854:	d82a      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 8002856:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800285a:	d008      	beq.n	800286e <ADC_ConfigureBoostMode+0x10a>
 800285c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002860:	d824      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x148>
 8002862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002866:	d002      	beq.n	800286e <ADC_ConfigureBoostMode+0x10a>
 8002868:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800286c:	d11e      	bne.n	80028ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	60fb      	str	r3, [r7, #12]
        break;
 800287e:	e016      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
        break;
 8002886:	e012      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	60fb      	str	r3, [r7, #12]
        break;
 800288e:	e00e      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	60fb      	str	r3, [r7, #12]
        break;
 8002896:	e00a      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	09db      	lsrs	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
        break;
 800289e:	e006      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e002      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80028a8:	bf00      	nop
 80028aa:	e000      	b.n	80028ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028ae:	f7fe fe17 	bl	80014e0 <HAL_GetREVID>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d815      	bhi.n	80028e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <ADC_ConfigureBoostMode+0x208>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d908      	bls.n	80028d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028d4:	e03e      	b.n	8002954 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	e035      	b.n	8002954 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <ADC_ConfigureBoostMode+0x20c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d808      	bhi.n	8002908 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002904:	609a      	str	r2, [r3, #8]
}
 8002906:	e025      	b.n	8002954 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a1a      	ldr	r2, [pc, #104]	@ (8002974 <ADC_ConfigureBoostMode+0x210>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d80a      	bhi.n	8002926 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002922:	609a      	str	r2, [r3, #8]
}
 8002924:	e016      	b.n	8002954 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <ADC_ConfigureBoostMode+0x214>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d80a      	bhi.n	8002944 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	e007      	b.n	8002954 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40022000 	.word	0x40022000
 8002960:	40022100 	.word	0x40022100
 8002964:	40022300 	.word	0x40022300
 8002968:	58026300 	.word	0x58026300
 800296c:	01312d00 	.word	0x01312d00
 8002970:	005f5e10 	.word	0x005f5e10
 8002974:	00bebc20 	.word	0x00bebc20
 8002978:	017d7840 	.word	0x017d7840

0800297c <LL_ADC_IsEnabled>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <LL_ADC_IsEnabled+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_ADC_IsEnabled+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d101      	bne.n	80029ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b09f      	sub	sp, #124	@ 0x7c
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0be      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d102      	bne.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a00:	4b5b      	ldr	r3, [pc, #364]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	e001      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e09d      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ffb9 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002a30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ffb3 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d17f      	bne.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d17c      	bne.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a47      	ldr	r2, [pc, #284]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a46      	ldr	r2, [pc, #280]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002a5c:	4b45      	ldr	r3, [pc, #276]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a5e:	e000      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a60:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a62:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d039      	beq.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3a      	ldr	r2, [pc, #232]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a38      	ldr	r2, [pc, #224]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10e      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a92:	4836      	ldr	r0, [pc, #216]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a94:	f7ff ff72 	bl	800297c <LL_ADC_IsEnabled>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4835      	ldr	r0, [pc, #212]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a9c:	f7ff ff6e 	bl	800297c <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e008      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ab0:	4832      	ldr	r0, [pc, #200]	@ (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ab2:	f7ff ff63 	bl	800297c <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d047      	beq.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	6811      	ldr	r1, [r2, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	6892      	ldr	r2, [r2, #8]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002adc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ade:	e03a      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10e      	bne.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b00:	481a      	ldr	r0, [pc, #104]	@ (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b02:	f7ff ff3b 	bl	800297c <LL_ADC_IsEnabled>
 8002b06:	4604      	mov	r4, r0
 8002b08:	4819      	ldr	r0, [pc, #100]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b0a:	f7ff ff37 	bl	800297c <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4323      	orrs	r3, r4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	e008      	b.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b1e:	4817      	ldr	r0, [pc, #92]	@ (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b20:	f7ff ff2c 	bl	800297c <LL_ADC_IsEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b40:	e009      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b54:	e000      	b.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b60:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	377c      	adds	r7, #124	@ 0x7c
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40022100 	.word	0x40022100
 8002b74:	40022300 	.word	0x40022300
 8002b78:	58026300 	.word	0x58026300
 8002b7c:	58026000 	.word	0x58026000
 8002b80:	fffff0e0 	.word	0xfffff0e0

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00
 8002bc8:	05fa0000 	.word	0x05fa0000

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	@ (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	@ (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	@ (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f7ff ff8e 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	@ (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff29 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff40 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff33 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa4 	bl	8002ce0 <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002da8:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <HAL_GetCurrentCPUID+0x24>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	d101      	bne.n	8002dba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e000      	b.n	8002dbc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002dba:	2301      	movs	r3, #1
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e00a      	b.n	8002dfe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	605a      	str	r2, [r3, #4]
      break;
 8002df4:	e002      	b.n	8002dfc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfa:	bf00      	nop
  }

  return status;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e003      	b.n	8002e26 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2201      	movs	r2, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002e58:	f7ff ffa4 	bl	8002da4 <HAL_GetCurrentCPUID>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d105      	bne.n	8002e6e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	011a      	lsls	r2, r3, #4
 8002e66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <HAL_EXTI_IRQHandler+0x70>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e004      	b.n	8002e78 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_EXTI_IRQHandler+0x74>)
 8002e74:	4413      	add	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4798      	blx	r3
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58000088 	.word	0x58000088
 8002ea8:	580000c8 	.word	0x580000c8

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	@ 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eba:	4b89      	ldr	r3, [pc, #548]	@ (80030e0 <HAL_GPIO_Init+0x234>)
 8002ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ebe:	e194      	b.n	80031ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8186 	beq.w	80031e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d005      	beq.n	8002ef0 <HAL_GPIO_Init+0x44>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d130      	bne.n	8002f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f26:	2201      	movs	r2, #1
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0201 	and.w	r2, r3, #1
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d017      	beq.n	8002f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d123      	bne.n	8002fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	69b9      	ldr	r1, [r7, #24]
 8002fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0203 	and.w	r2, r3, #3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80e0 	beq.w	80031e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003024:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <HAL_GPIO_Init+0x238>)
 8003026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800302a:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <HAL_GPIO_Init+0x238>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003034:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_GPIO_Init+0x238>)
 8003036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003042:	4a29      	ldr	r2, [pc, #164]	@ (80030e8 <HAL_GPIO_Init+0x23c>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a20      	ldr	r2, [pc, #128]	@ (80030ec <HAL_GPIO_Init+0x240>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d052      	beq.n	8003114 <HAL_GPIO_Init+0x268>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_GPIO_Init+0x244>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d031      	beq.n	80030da <HAL_GPIO_Init+0x22e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1e      	ldr	r2, [pc, #120]	@ (80030f4 <HAL_GPIO_Init+0x248>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d02b      	beq.n	80030d6 <HAL_GPIO_Init+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_GPIO_Init+0x24c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d025      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_GPIO_Init+0x250>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01f      	beq.n	80030ce <HAL_GPIO_Init+0x222>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <HAL_GPIO_Init+0x254>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d019      	beq.n	80030ca <HAL_GPIO_Init+0x21e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x258>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_GPIO_Init+0x21a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_GPIO_Init+0x25c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00d      	beq.n	80030c2 <HAL_GPIO_Init+0x216>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a18      	ldr	r2, [pc, #96]	@ (800310c <HAL_GPIO_Init+0x260>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_GPIO_Init+0x212>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <HAL_GPIO_Init+0x264>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_GPIO_Init+0x20e>
 80030b6:	2309      	movs	r3, #9
 80030b8:	e02d      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030ba:	230a      	movs	r3, #10
 80030bc:	e02b      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030be:	2308      	movs	r3, #8
 80030c0:	e029      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030c2:	2307      	movs	r3, #7
 80030c4:	e027      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030c6:	2306      	movs	r3, #6
 80030c8:	e025      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030ca:	2305      	movs	r3, #5
 80030cc:	e023      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030ce:	2304      	movs	r3, #4
 80030d0:	e021      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030d2:	2303      	movs	r3, #3
 80030d4:	e01f      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e01d      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030da:	2301      	movs	r3, #1
 80030dc:	e01b      	b.n	8003116 <HAL_GPIO_Init+0x26a>
 80030de:	bf00      	nop
 80030e0:	58000080 	.word	0x58000080
 80030e4:	58024400 	.word	0x58024400
 80030e8:	58000400 	.word	0x58000400
 80030ec:	58020000 	.word	0x58020000
 80030f0:	58020400 	.word	0x58020400
 80030f4:	58020800 	.word	0x58020800
 80030f8:	58020c00 	.word	0x58020c00
 80030fc:	58021000 	.word	0x58021000
 8003100:	58021400 	.word	0x58021400
 8003104:	58021800 	.word	0x58021800
 8003108:	58021c00 	.word	0x58021c00
 800310c:	58022000 	.word	0x58022000
 8003110:	58022400 	.word	0x58022400
 8003114:	2300      	movs	r3, #0
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f002 0203 	and.w	r2, r2, #3
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	4093      	lsls	r3, r2
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003126:	4938      	ldr	r1, [pc, #224]	@ (8003208 <HAL_GPIO_Init+0x35c>)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800315a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f ae63 	bne.w	8002ec0 <HAL_GPIO_Init+0x14>
  }
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	3724      	adds	r7, #36	@ 0x24
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	58000400 	.word	0x58000400

0800320c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	041a      	lsls	r2, r3, #16
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43d9      	mvns	r1, r3
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	400b      	ands	r3, r1
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800327c:	4a08      	ldr	r2, [pc, #32]	@ (80032a0 <HAL_HSEM_FastTake+0x2c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3320      	adds	r3, #32
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <HAL_HSEM_FastTake+0x30>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	58026400 	.word	0x58026400
 80032a4:	80000300 	.word	0x80000300

080032a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032b2:	4906      	ldr	r1, [pc, #24]	@ (80032cc <HAL_HSEM_Release+0x24>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	58026400 	.word	0x58026400

080032d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d00a      	beq.n	80032fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032e4:	4b26      	ldr	r3, [pc, #152]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e040      	b.n	8003378 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e03e      	b.n	8003378 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032fa:	4b21      	ldr	r3, [pc, #132]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003302:	491f      	ldr	r1, [pc, #124]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4313      	orrs	r3, r2
 8003308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800330a:	f7fe f8b9 	bl	8001480 <HAL_GetTick>
 800330e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003310:	e009      	b.n	8003326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003312:	f7fe f8b5 	bl	8001480 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003320:	d901      	bls.n	8003326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e028      	b.n	8003378 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003326:	4b16      	ldr	r3, [pc, #88]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003332:	d1ee      	bne.n	8003312 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b1e      	cmp	r3, #30
 8003338:	d008      	beq.n	800334c <HAL_PWREx_ConfigSupply+0x7c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b2e      	cmp	r3, #46	@ 0x2e
 800333e:	d005      	beq.n	800334c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b1d      	cmp	r3, #29
 8003344:	d002      	beq.n	800334c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b2d      	cmp	r3, #45	@ 0x2d
 800334a:	d114      	bne.n	8003376 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800334c:	f7fe f898 	bl	8001480 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003352:	e009      	b.n	8003368 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003354:	f7fe f894 	bl	8001480 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003362:	d901      	bls.n	8003368 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_PWREx_ConfigSupply+0xb0>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003374:	d1ee      	bne.n	8003354 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024800 	.word	0x58024800

08003384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	@ 0x30
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f000 bc48 	b.w	8003c28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8088 	beq.w	80034b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b99      	ldr	r3, [pc, #612]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033b0:	4b96      	ldr	r3, [pc, #600]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d007      	beq.n	80033cc <HAL_RCC_OscConfig+0x48>
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	2b18      	cmp	r3, #24
 80033c0:	d111      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
 80033c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b8f      	ldr	r3, [pc, #572]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d06d      	beq.n	80034b4 <HAL_RCC_OscConfig+0x130>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d169      	bne.n	80034b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f000 bc21 	b.w	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x7a>
 80033f0:	4b86      	ldr	r3, [pc, #536]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a85      	ldr	r2, [pc, #532]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e02e      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x9c>
 8003406:	4b81      	ldr	r3, [pc, #516]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a80      	ldr	r2, [pc, #512]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b7e      	ldr	r3, [pc, #504]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7d      	ldr	r2, [pc, #500]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xc0>
 800342a:	4b78      	ldr	r3, [pc, #480]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b75      	ldr	r3, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a74      	ldr	r2, [pc, #464]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003444:	4b71      	ldr	r3, [pc, #452]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a70      	ldr	r2, [pc, #448]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6e      	ldr	r3, [pc, #440]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6d      	ldr	r2, [pc, #436]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe f80c 	bl	8001480 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe f808 	bl	8001480 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e3d4      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800347e:	4b63      	ldr	r3, [pc, #396]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fff8 	bl	8001480 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fd fff4 	bl	8001480 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e3c0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a6:	4b59      	ldr	r3, [pc, #356]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x110>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80ca 	beq.w	8003658 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c4:	4b51      	ldr	r3, [pc, #324]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ce:	4b4f      	ldr	r3, [pc, #316]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_OscConfig+0x166>
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b18      	cmp	r3, #24
 80034de:	d156      	bne.n	800358e <HAL_RCC_OscConfig+0x20a>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d151      	bne.n	800358e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ea:	4b48      	ldr	r3, [pc, #288]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x17e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e392      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003502:	4b42      	ldr	r3, [pc, #264]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0219 	bic.w	r2, r3, #25
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	493f      	ldr	r1, [pc, #252]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd ffb4 	bl	8001480 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fd ffb0 	bl	8001480 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e37c      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352e:	4b37      	ldr	r3, [pc, #220]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	f7fd ffd1 	bl	80014e0 <HAL_GetREVID>
 800353e:	4603      	mov	r3, r0
 8003540:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003544:	4293      	cmp	r3, r2
 8003546:	d817      	bhi.n	8003578 <HAL_RCC_OscConfig+0x1f4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d108      	bne.n	8003562 <HAL_RCC_OscConfig+0x1de>
 8003550:	4b2e      	ldr	r3, [pc, #184]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003558:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	e07a      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	4926      	ldr	r1, [pc, #152]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003576:	e06f      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b24      	ldr	r3, [pc, #144]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4921      	ldr	r1, [pc, #132]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	e064      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d047      	beq.n	8003626 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0219 	bic.w	r2, r3, #25
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	491a      	ldr	r1, [pc, #104]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd ff6a 	bl	8001480 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fd ff66 	bl	8001480 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e332      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c2:	4b12      	ldr	r3, [pc, #72]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	f7fd ff87 	bl	80014e0 <HAL_GetREVID>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035d8:	4293      	cmp	r3, r2
 80035da:	d819      	bhi.n	8003610 <HAL_RCC_OscConfig+0x28c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d108      	bne.n	80035f6 <HAL_RCC_OscConfig+0x272>
 80035e4:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80035ec:	4a07      	ldr	r2, [pc, #28]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f2:	6053      	str	r3, [r2, #4]
 80035f4:	e030      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
 80035f6:	4b05      	ldr	r3, [pc, #20]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	031b      	lsls	r3, r3, #12
 8003604:	4901      	ldr	r1, [pc, #4]	@ (800360c <HAL_RCC_OscConfig+0x288>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
 800360a:	e025      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
 800360c:	58024400 	.word	0x58024400
 8003610:	4b9a      	ldr	r3, [pc, #616]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4997      	ldr	r1, [pc, #604]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
 8003624:	e018      	b.n	8003658 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b95      	ldr	r3, [pc, #596]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a94      	ldr	r2, [pc, #592]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd ff25 	bl	8001480 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7fd ff21 	bl	8001480 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e2ed      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800364c:	4b8b      	ldr	r3, [pc, #556]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a9 	beq.w	80037b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b85      	ldr	r3, [pc, #532]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800366e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003670:	4b82      	ldr	r3, [pc, #520]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d007      	beq.n	800368c <HAL_RCC_OscConfig+0x308>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b18      	cmp	r3, #24
 8003680:	d13a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x374>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d135      	bne.n	80036f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800368c:	4b7b      	ldr	r3, [pc, #492]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x320>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b80      	cmp	r3, #128	@ 0x80
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e2c1      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a4:	f7fd ff1c 	bl	80014e0 <HAL_GetREVID>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d817      	bhi.n	80036e2 <HAL_RCC_OscConfig+0x35e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d108      	bne.n	80036cc <HAL_RCC_OscConfig+0x348>
 80036ba:	4b70      	ldr	r3, [pc, #448]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80036c2:	4a6e      	ldr	r2, [pc, #440]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ca:	e075      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036cc:	4b6b      	ldr	r3, [pc, #428]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	069b      	lsls	r3, r3, #26
 80036da:	4968      	ldr	r1, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036e0:	e06a      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036e2:	4b66      	ldr	r3, [pc, #408]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	4962      	ldr	r1, [pc, #392]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036f6:	e05f      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d042      	beq.n	8003786 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003700:	4b5e      	ldr	r3, [pc, #376]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5d      	ldr	r2, [pc, #372]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd feb8 	bl	8001480 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003714:	f7fd feb4 	bl	8001480 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e280      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003726:	4b55      	ldr	r3, [pc, #340]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003732:	f7fd fed5 	bl	80014e0 <HAL_GetREVID>
 8003736:	4603      	mov	r3, r0
 8003738:	f241 0203 	movw	r2, #4099	@ 0x1003
 800373c:	4293      	cmp	r3, r2
 800373e:	d817      	bhi.n	8003770 <HAL_RCC_OscConfig+0x3ec>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d108      	bne.n	800375a <HAL_RCC_OscConfig+0x3d6>
 8003748:	4b4c      	ldr	r3, [pc, #304]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003750:	4a4a      	ldr	r2, [pc, #296]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003752:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003756:	6053      	str	r3, [r2, #4]
 8003758:	e02e      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
 800375a:	4b48      	ldr	r3, [pc, #288]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	069b      	lsls	r3, r3, #26
 8003768:	4944      	ldr	r1, [pc, #272]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	e023      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
 8003770:	4b42      	ldr	r3, [pc, #264]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	493f      	ldr	r1, [pc, #252]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3c      	ldr	r2, [pc, #240]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800378c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fd fe75 	bl	8001480 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800379a:	f7fd fe71 	bl	8001480 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e23d      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037ac:	4b33      	ldr	r3, [pc, #204]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d036      	beq.n	8003832 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d019      	beq.n	8003800 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037cc:	4b2b      	ldr	r3, [pc, #172]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fe52 	bl	8001480 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fe4e 	bl	8001480 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e21a      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x45c>
 80037fe:	e018      	b.n	8003832 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003804:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd fe38 	bl	8001480 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fd fe34 	bl	8001480 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e200      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003826:	4b15      	ldr	r3, [pc, #84]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d039      	beq.n	80038b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01c      	beq.n	8003880 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800384c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003850:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003852:	f7fd fe15 	bl	8001480 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385a:	f7fd fe11 	bl	8001480 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1dd      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_RCC_OscConfig+0x4f8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x4d6>
 8003878:	e01b      	b.n	80038b2 <HAL_RCC_OscConfig+0x52e>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003880:	4b9b      	ldr	r3, [pc, #620]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a9a      	ldr	r2, [pc, #616]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800388a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800388c:	f7fd fdf8 	bl	8001480 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003894:	f7fd fdf4 	bl	8001480 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1c0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038a6:	4b92      	ldr	r3, [pc, #584]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8081 	beq.w	80039c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c0:	4b8c      	ldr	r3, [pc, #560]	@ (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a8b      	ldr	r2, [pc, #556]	@ (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038cc:	f7fd fdd8 	bl	8001480 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd fdd4 	bl	8001480 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1a0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e6:	4b83      	ldr	r3, [pc, #524]	@ (8003af4 <HAL_RCC_OscConfig+0x770>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x584>
 80038fa:	4b7d      	ldr	r3, [pc, #500]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a7c      	ldr	r2, [pc, #496]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
 8003906:	e02d      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x5a6>
 8003910:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a76      	ldr	r2, [pc, #472]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x5c8>
 8003932:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a6b      	ldr	r2, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x5e0>
 800394c:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a67      	ldr	r2, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
 8003958:	4b65      	ldr	r3, [pc, #404]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a64      	ldr	r2, [pc, #400]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fd88 	bl	8001480 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fd fd84 	bl	8001480 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e14e      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800398a:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCC_OscConfig+0x5f0>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fd72 	bl	8001480 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fd fd6e 	bl	8001480 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e138      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039b6:	4b4e      	ldr	r3, [pc, #312]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 812d 	beq.w	8003c26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039cc:	4b48      	ldr	r3, [pc, #288]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039d4:	2b18      	cmp	r3, #24
 80039d6:	f000 80bd 	beq.w	8003b54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	2b02      	cmp	r3, #2
 80039e0:	f040 809e 	bne.w	8003b20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a41      	ldr	r2, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fd46 	bl	8001480 <HAL_GetTick>
 80039f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd fd42 	bl	8001480 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e10e      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a16:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1a:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x774>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	4931      	ldr	r1, [pc, #196]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	3b01      	subs	r3, #1
 8003a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	025b      	lsls	r3, r3, #9
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a60:	4923      	ldr	r1, [pc, #140]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a66:	4b22      	ldr	r3, [pc, #136]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6a:	4a21      	ldr	r2, [pc, #132]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a72:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a76:	4b21      	ldr	r3, [pc, #132]	@ (8003afc <HAL_RCC_OscConfig+0x778>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a7e:	00d2      	lsls	r2, r2, #3
 8003a80:	491b      	ldr	r1, [pc, #108]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a86:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	f023 020c 	bic.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4917      	ldr	r1, [pc, #92]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a98:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	f023 0202 	bic.w	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	4912      	ldr	r1, [pc, #72]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	4a10      	ldr	r2, [pc, #64]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ace:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ada:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fccb 	bl	8001480 <HAL_GetTick>
 8003aea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aec:	e011      	b.n	8003b12 <HAL_RCC_OscConfig+0x78e>
 8003aee:	bf00      	nop
 8003af0:	58024400 	.word	0x58024400
 8003af4:	58024800 	.word	0x58024800
 8003af8:	fffffc0c 	.word	0xfffffc0c
 8003afc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fcbe 	bl	8001480 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e08a      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x77c>
 8003b1e:	e082      	b.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b43      	ldr	r3, [pc, #268]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fca8 	bl	8001480 <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fca4 	bl	8001480 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e070      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b46:	4b3a      	ldr	r3, [pc, #232]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x7b0>
 8003b52:	e068      	b.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d031      	beq.n	8003bcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d12a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d122      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0a5b      	lsrs	r3, r3, #9
 8003b9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d108      	bne.n	8003bcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02b      	b.n	8003c28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d01f      	beq.n	8003c26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003be6:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf2:	f7fd fc45 	bl	8001480 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003bf8:	bf00      	nop
 8003bfa:	f7fd fc41 	bl	8001480 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d0f9      	beq.n	8003bfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_OscConfig+0x8b0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4906      	ldr	r1, [pc, #24]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c1a:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_RCC_OscConfig+0x8ac>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	@ 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	58024400 	.word	0x58024400
 8003c34:	ffff0007 	.word	0xffff0007

08003c38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e19c      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b87      	ldr	r3, [pc, #540]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4985      	ldr	r1, [pc, #532]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b83      	ldr	r3, [pc, #524]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e184      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d908      	bls.n	8003caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c98:	4b78      	ldr	r3, [pc, #480]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	4975      	ldr	r1, [pc, #468]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	4b70      	ldr	r3, [pc, #448]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	496a      	ldr	r1, [pc, #424]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	4b64      	ldr	r3, [pc, #400]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d908      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cf4:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	495e      	ldr	r1, [pc, #376]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d908      	bls.n	8003d34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4953      	ldr	r1, [pc, #332]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b4d      	ldr	r3, [pc, #308]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d908      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b4a      	ldr	r3, [pc, #296]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f023 020f 	bic.w	r2, r3, #15
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4947      	ldr	r1, [pc, #284]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d055      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d6e:	4b43      	ldr	r3, [pc, #268]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4940      	ldr	r1, [pc, #256]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d88:	4b3c      	ldr	r3, [pc, #240]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d121      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0f6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da0:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d115      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0ea      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db8:	4b30      	ldr	r3, [pc, #192]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0de      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d6      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 0207 	bic.w	r2, r3, #7
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4925      	ldr	r1, [pc, #148]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fd fb49 	bl	8001480 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7fd fb45 	bl	8001480 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0be      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e08:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d1eb      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d208      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e36:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	490e      	ldr	r1, [pc, #56]	@ (8003e7c <HAL_RCC_ClockConfig+0x244>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d214      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 020f 	bic.w	r2, r3, #15
 8003e5e:	4906      	ldr	r1, [pc, #24]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e086      	b.n	8003f86 <HAL_RCC_ClockConfig+0x34e>
 8003e78:	52002000 	.word	0x52002000
 8003e7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b3f      	ldr	r3, [pc, #252]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d208      	bcs.n	8003eae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4939      	ldr	r1, [pc, #228]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	4b34      	ldr	r3, [pc, #208]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d208      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eca:	4b31      	ldr	r3, [pc, #196]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	492e      	ldr	r1, [pc, #184]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d208      	bcs.n	8003f0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4922      	ldr	r1, [pc, #136]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d208      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f26:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4917      	ldr	r1, [pc, #92]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f38:	f000 f834 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	4912      	ldr	r1, [pc, #72]	@ (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f70:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x364>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_ClockConfig+0x368>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fa36 	bl	80013ec <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
 8003f94:	08008cc8 	.word	0x08008cc8
 8003f98:	24000004 	.word	0x24000004
 8003f9c:	24000000 	.word	0x24000000
 8003fa0:	24000024 	.word	0x24000024

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003faa:	4bb3      	ldr	r3, [pc, #716]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fb2:	2b18      	cmp	r3, #24
 8003fb4:	f200 8155 	bhi.w	8004262 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004263 	.word	0x08004263
 8003fc8:	08004263 	.word	0x08004263
 8003fcc:	08004263 	.word	0x08004263
 8003fd0:	08004263 	.word	0x08004263
 8003fd4:	08004263 	.word	0x08004263
 8003fd8:	08004263 	.word	0x08004263
 8003fdc:	08004263 	.word	0x08004263
 8003fe0:	0800404b 	.word	0x0800404b
 8003fe4:	08004263 	.word	0x08004263
 8003fe8:	08004263 	.word	0x08004263
 8003fec:	08004263 	.word	0x08004263
 8003ff0:	08004263 	.word	0x08004263
 8003ff4:	08004263 	.word	0x08004263
 8003ff8:	08004263 	.word	0x08004263
 8003ffc:	08004263 	.word	0x08004263
 8004000:	08004051 	.word	0x08004051
 8004004:	08004263 	.word	0x08004263
 8004008:	08004263 	.word	0x08004263
 800400c:	08004263 	.word	0x08004263
 8004010:	08004263 	.word	0x08004263
 8004014:	08004263 	.word	0x08004263
 8004018:	08004263 	.word	0x08004263
 800401c:	08004263 	.word	0x08004263
 8004020:	08004057 	.word	0x08004057
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004024:	4b94      	ldr	r3, [pc, #592]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004030:	4b91      	ldr	r3, [pc, #580]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	4a90      	ldr	r2, [pc, #576]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004042:	e111      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004044:	4b8d      	ldr	r3, [pc, #564]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004046:	61bb      	str	r3, [r7, #24]
      break;
 8004048:	e10e      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800404a:	4b8d      	ldr	r3, [pc, #564]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800404c:	61bb      	str	r3, [r7, #24]
      break;
 800404e:	e10b      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004050:	4b8c      	ldr	r3, [pc, #560]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004052:	61bb      	str	r3, [r7, #24]
      break;
 8004054:	e108      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004056:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004060:	4b85      	ldr	r3, [pc, #532]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800406a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800406c:	4b82      	ldr	r3, [pc, #520]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004076:	4b80      	ldr	r3, [pc, #512]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80e1 	beq.w	800425c <HAL_RCC_GetSysClockFreq+0x2b8>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b02      	cmp	r3, #2
 800409e:	f000 8083 	beq.w	80041a8 <HAL_RCC_GetSysClockFreq+0x204>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f200 80a1 	bhi.w	80041ec <HAL_RCC_GetSysClockFreq+0x248>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x114>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d056      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040b6:	e099      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02d      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	4a6b      	ldr	r2, [pc, #428]	@ (800427c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b62      	ldr	r3, [pc, #392]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004102:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800411e:	e087      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800428c <HAL_RCC_GetSysClockFreq+0x2e8>
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b51      	ldr	r3, [pc, #324]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a02 	vldr	s12, [r7, #8]
 8004146:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004162:	e065      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a02 	vldr	s12, [r7, #8]
 800418a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041a6:	e043      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004294 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041ea:	e021      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004290 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004212:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800422e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	0a5b      	lsrs	r3, r3, #9
 8004236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423a:	3301      	adds	r3, #1
 800423c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004248:	edd7 6a07 	vldr	s13, [r7, #28]
 800424c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 3a90 	vmov	r3, s15
 8004258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004262:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004264:	61bb      	str	r3, [r7, #24]
      break;
 8004266:	bf00      	nop
  }

  return sysclockfreq;
 8004268:	69bb      	ldr	r3, [r7, #24]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	@ 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	03d09000 	.word	0x03d09000
 8004280:	003d0900 	.word	0x003d0900
 8004284:	017d7840 	.word	0x017d7840
 8004288:	46000000 	.word	0x46000000
 800428c:	4c742400 	.word	0x4c742400
 8004290:	4a742400 	.word	0x4a742400
 8004294:	4bbebc20 	.word	0x4bbebc20

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800429e:	f7ff fe81 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490f      	ldr	r1, [pc, #60]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	4a09      	ldr	r2, [pc, #36]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x54>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042d6:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042dc:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	58024400 	.word	0x58024400
 80042ec:	08008cc8 	.word	0x08008cc8
 80042f0:	24000004 	.word	0x24000004
 80042f4:	24000000 	.word	0x24000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042fc:	f7ff ffcc 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	58024400 	.word	0x58024400
 8004320:	08008cc8 	.word	0x08008cc8

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004328:	f7ff ffb6 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58024400 	.word	0x58024400
 800434c:	08008cc8 	.word	0x08008cc8

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b0ca      	sub	sp, #296	@ 0x128
 8004356:	af00      	add	r7, sp, #0
 8004358:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004374:	2500      	movs	r5, #0
 8004376:	ea54 0305 	orrs.w	r3, r4, r5
 800437a:	d049      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004386:	d02f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004388:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800438c:	d828      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800438e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004392:	d01a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004398:	d822      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a2:	d007      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043a4:	e01c      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a6:	4bb8      	ldr	r3, [pc, #736]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	4ab7      	ldr	r2, [pc, #732]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043b2:	e01a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	3308      	adds	r3, #8
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f002 fb61 	bl	8006a84 <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043c8:	e00f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	3328      	adds	r3, #40	@ 0x28
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f002 fc08 	bl	8006be8 <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043de:	e004      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004400:	4aa1      	ldr	r2, [pc, #644]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004402:	430b      	orrs	r3, r1
 8004404:	6513      	str	r3, [r2, #80]	@ 0x50
 8004406:	e003      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800441c:	f04f 0900 	mov.w	r9, #0
 8004420:	ea58 0309 	orrs.w	r3, r8, r9
 8004424:	d047      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	2b04      	cmp	r3, #4
 800442e:	d82a      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004430:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800444d 	.word	0x0800444d
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004471 	.word	0x08004471
 8004444:	0800448f 	.word	0x0800448f
 8004448:	0800448f 	.word	0x0800448f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b8e      	ldr	r3, [pc, #568]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	4a8d      	ldr	r2, [pc, #564]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004458:	e01a      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	3308      	adds	r3, #8
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f002 fb0e 	bl	8006a84 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800446e:	e00f      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f002 fbb5 	bl	8006be8 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004484:	e004      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004498:	4b7b      	ldr	r3, [pc, #492]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	f023 0107 	bic.w	r1, r3, #7
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a6:	4a78      	ldr	r2, [pc, #480]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80044c2:	f04f 0b00 	mov.w	fp, #0
 80044c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80044ca:	d04c      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d6:	d030      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044dc:	d829      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044de:	2bc0      	cmp	r3, #192	@ 0xc0
 80044e0:	d02d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044e4:	d825      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d018      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	d821      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044f2:	2b40      	cmp	r3, #64	@ 0x40
 80044f4:	d007      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80044f6:	e01c      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4b63      	ldr	r3, [pc, #396]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	4a62      	ldr	r2, [pc, #392]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004504:	e01c      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	3308      	adds	r3, #8
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f002 fab8 	bl	8006a84 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	3328      	adds	r3, #40	@ 0x28
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f002 fb5f 	bl	8006be8 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800453e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004548:	4b4f      	ldr	r3, [pc, #316]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004556:	4a4c      	ldr	r2, [pc, #304]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6513      	str	r3, [r2, #80]	@ 0x50
 800455c:	e003      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004572:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800457c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d053      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800458e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004592:	d035      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004594:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004598:	d82e      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800459a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800459e:	d031      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80045a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045a4:	d828      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045aa:	d01a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045b0:	d822      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80045b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ba:	d007      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80045bc:	e01c      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045be:	4b32      	ldr	r3, [pc, #200]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	4a31      	ldr	r2, [pc, #196]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ca:	e01c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	3308      	adds	r3, #8
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f002 fa55 	bl	8006a84 <RCCEx_PLL2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045e0:	e011      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	3328      	adds	r3, #40	@ 0x28
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f002 fafc 	bl	8006be8 <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045f6:	e006      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fe:	e002      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800461e:	4a1a      	ldr	r2, [pc, #104]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004620:	430b      	orrs	r3, r1
 8004622:	6593      	str	r3, [r2, #88]	@ 0x58
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800463a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004644:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d056      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800465a:	d038      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800465c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004660:	d831      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004662:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004666:	d034      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004668:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800466c:	d82b      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800466e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004672:	d01d      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004678:	d825      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800467e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004684:	e01f      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4ba2      	ldr	r3, [pc, #648]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4aa1      	ldr	r2, [pc, #644]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004698:	e01c      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 f9ee 	bl	8006a84 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046ae:	e011      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3328      	adds	r3, #40	@ 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 fa95 	bl	8006be8 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e006      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046cc:	e002      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046ec:	4a8a      	ldr	r2, [pc, #552]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004708:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004712:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d03a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	2b30      	cmp	r3, #48	@ 0x30
 8004724:	d01f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004726:	2b30      	cmp	r3, #48	@ 0x30
 8004728:	d819      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d00c      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800472e:	2b20      	cmp	r3, #32
 8004730:	d815      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d019      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d111      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4b77      	ldr	r3, [pc, #476]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a76      	ldr	r2, [pc, #472]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	3308      	adds	r3, #8
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f002 f997 	bl	8006a84 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004774:	4b68      	ldr	r3, [pc, #416]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	4a65      	ldr	r2, [pc, #404]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004784:	430b      	orrs	r3, r1
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800479e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80047a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d051      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047bc:	d035      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c2:	d82e      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047c8:	d031      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047ce:	d828      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d4:	d01a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d822      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e4:	d007      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047e6:	e01c      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047f4:	e01c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	3308      	adds	r3, #8
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 f940 	bl	8006a84 <RCCEx_PLL2_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800480a:	e011      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	3328      	adds	r3, #40	@ 0x28
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f002 f9e7 	bl	8006be8 <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004828:	e002      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800482e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004838:	4b37      	ldr	r3, [pc, #220]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004846:	4a34      	ldr	r2, [pc, #208]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004848:	430b      	orrs	r3, r1
 800484a:	6513      	str	r3, [r2, #80]	@ 0x50
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004862:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800486c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d056      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004880:	d033      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004882:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004886:	d82c      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800488c:	d02f      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800488e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004892:	d826      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004894:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004898:	d02b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800489a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800489e:	d820      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a4:	d012      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80048a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048aa:	d81a      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d022      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048b4:	d115      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	3308      	adds	r3, #8
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f002 f8e0 	bl	8006a84 <RCCEx_PLL2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048ca:	e015      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	3328      	adds	r3, #40	@ 0x28
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f002 f987 	bl	8006be8 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048e0:	e00a      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e8:	e006      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ea:	bf00      	nop
 80048ec:	e004      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004904:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800490e:	4a02      	ldr	r2, [pc, #8]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004910:	430b      	orrs	r3, r1
 8004912:	6513      	str	r3, [r2, #80]	@ 0x50
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800493a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d055      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004950:	d033      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004956:	d82c      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495c:	d02f      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d826      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004964:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004968:	d02b      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800496a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800496e:	d820      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004974:	d012      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800497a:	d81a      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d022      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004984:	d115      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	3308      	adds	r3, #8
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f002 f878 	bl	8006a84 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800499a:	e015      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	3328      	adds	r3, #40	@ 0x28
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f002 f91f 	bl	8006be8 <RCCEx_PLL3_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049b0:	e00a      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ba:	bf00      	nop
 80049bc:	e004      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049d0:	4ba3      	ldr	r3, [pc, #652]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049e0:	4a9f      	ldr	r2, [pc, #636]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e6:	e003      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d037      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a20:	d816      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a2a:	d111      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	4a8b      	ldr	r2, [pc, #556]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a38:	e00f      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	3308      	adds	r3, #8
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 f81e 	bl	8006a84 <RCCEx_PLL2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a62:	4b7f      	ldr	r3, [pc, #508]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a70:	4a7b      	ldr	r2, [pc, #492]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d039      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d81c      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004aed 	.word	0x08004aed
 8004ab4:	08004ac1 	.word	0x08004ac1
 8004ab8:	08004acf 	.word	0x08004acf
 8004abc:	08004aed 	.word	0x08004aed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac0:	4b67      	ldr	r3, [pc, #412]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	4a66      	ldr	r2, [pc, #408]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004acc:	e00f      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 ffd4 	bl	8006a84 <RCCEx_PLL2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004af6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	f023 0103 	bic.w	r1, r3, #3
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	4a56      	ldr	r2, [pc, #344]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f000 809f 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b36:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b42:	f7fc fc9d 	bl	8001480 <HAL_GetTick>
 8004b46:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4c:	f7fc fc98 	bl	8001480 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	@ 0x64
 8004b5a:	d903      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b62:	e005      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b64:	4b3f      	ldr	r3, [pc, #252]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ed      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d179      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b78:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b84:	4053      	eors	r3, r2
 8004b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d015      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b8e:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b9a:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a30      	ldr	r2, [pc, #192]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a2d      	ldr	r2, [pc, #180]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc6:	d118      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fc fc5a 	bl	8001480 <HAL_GetTick>
 8004bcc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bd0:	e00d      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fc fc55 	bl	8001480 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004bdc:	1ad2      	subs	r2, r2, r3
 8004bde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d903      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004bec:	e005      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bee:	4b1c      	ldr	r3, [pc, #112]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0eb      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d129      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c12:	d10e      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c14:	4b12      	ldr	r3, [pc, #72]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c24:	091a      	lsrs	r2, r3, #4
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6113      	str	r3, [r2, #16]
 8004c30:	e005      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c3c:	6113      	str	r3, [r2, #16]
 8004c3e:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4e:	4a04      	ldr	r2, [pc, #16]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c54:	e00e      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004c5e:	e009      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c60:	58024400 	.word	0x58024400
 8004c64:	58024800 	.word	0x58024800
 8004c68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f002 0301 	and.w	r3, r2, #1
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f000 8089 	beq.w	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c9c:	2b28      	cmp	r3, #40	@ 0x28
 8004c9e:	d86b      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004d81 	.word	0x08004d81
 8004cac:	08004d79 	.word	0x08004d79
 8004cb0:	08004d79 	.word	0x08004d79
 8004cb4:	08004d79 	.word	0x08004d79
 8004cb8:	08004d79 	.word	0x08004d79
 8004cbc:	08004d79 	.word	0x08004d79
 8004cc0:	08004d79 	.word	0x08004d79
 8004cc4:	08004d79 	.word	0x08004d79
 8004cc8:	08004d4d 	.word	0x08004d4d
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d79 	.word	0x08004d79
 8004cd4:	08004d79 	.word	0x08004d79
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004d79 	.word	0x08004d79
 8004ce0:	08004d79 	.word	0x08004d79
 8004ce4:	08004d79 	.word	0x08004d79
 8004ce8:	08004d63 	.word	0x08004d63
 8004cec:	08004d79 	.word	0x08004d79
 8004cf0:	08004d79 	.word	0x08004d79
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d79 	.word	0x08004d79
 8004cfc:	08004d79 	.word	0x08004d79
 8004d00:	08004d79 	.word	0x08004d79
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004d81 	.word	0x08004d81
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004d79 	.word	0x08004d79
 8004d1c:	08004d79 	.word	0x08004d79
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004d81 	.word	0x08004d81
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d81 	.word	0x08004d81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	3308      	adds	r3, #8
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fe95 	bl	8006a84 <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d60:	e00f      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	3328      	adds	r3, #40	@ 0x28
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 ff3c 	bl	8006be8 <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d8a:	4bbf      	ldr	r3, [pc, #764]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d98:	4abb      	ldr	r2, [pc, #748]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f002 0302 	and.w	r3, r2, #2
 8004db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004dbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d041      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d824      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e25 	.word	0x08004e25
 8004ddc:	08004df1 	.word	0x08004df1
 8004de0:	08004e07 	.word	0x08004e07
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e25 	.word	0x08004e25
 8004dec:	08004e25 	.word	0x08004e25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	3308      	adds	r3, #8
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fe43 	bl	8006a84 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e04:	e00f      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0a:	3328      	adds	r3, #40	@ 0x28
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 feea 	bl	8006be8 <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e2e:	4b96      	ldr	r3, [pc, #600]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	f023 0107 	bic.w	r1, r3, #7
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e3c:	4a92      	ldr	r2, [pc, #584]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 0304 	and.w	r3, r2, #4
 8004e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d044      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d825      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e78:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004e99 	.word	0x08004e99
 8004e88:	08004eaf 	.word	0x08004eaf
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ecd 	.word	0x08004ecd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fdef 	bl	8006a84 <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	3328      	adds	r3, #40	@ 0x28
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fe96 	bl	8006be8 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	f023 0107 	bic.w	r1, r3, #7
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee6:	4a68      	ldr	r2, [pc, #416]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eec:	e003      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f002 0320 	and.w	r3, r2, #32
 8004f02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d055      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f22:	d033      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f28:	d82c      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2e:	d02f      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f34:	d826      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f3a:	d02b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004f3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f40:	d820      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f46:	d012      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f4c:	d81a      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f56:	d115      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 fd8f 	bl	8006a84 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f6c:	e015      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	3328      	adds	r3, #40	@ 0x28
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 fe36 	bl	8006be8 <RCCEx_PLL3_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f82:	e00a      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f8a:	e006      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	4a35      	ldr	r2, [pc, #212]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	d058      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fee:	d033      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004ff0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ff4:	d82c      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffa:	d02f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005000:	d826      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005002:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005006:	d02b      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800500c:	d820      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005012:	d012      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d81a      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d022      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005022:	d115      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	3308      	adds	r3, #8
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fd29 	bl	8006a84 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005038:	e015      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	3328      	adds	r3, #40	@ 0x28
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fdd0 	bl	8006be8 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800504e:	e00a      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005056:	e006      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005058:	bf00      	nop
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10e      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800506e:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005072:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800507e:	4a02      	ldr	r2, [pc, #8]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005080:	430b      	orrs	r3, r1
 8005082:	6593      	str	r3, [r2, #88]	@ 0x58
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80050a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d055      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050c0:	d033      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80050c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050c6:	d82c      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d02f      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d2:	d826      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050d8:	d02b      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80050da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050de:	d820      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050e4:	d012      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80050e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ea:	d81a      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d022      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f4:	d115      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fa:	3308      	adds	r3, #8
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fcc0 	bl	8006a84 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800510a:	e015      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	3328      	adds	r3, #40	@ 0x28
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fd67 	bl	8006be8 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005140:	4ba1      	ldr	r3, [pc, #644]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005144:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005150:	4a9d      	ldr	r2, [pc, #628]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005152:	430b      	orrs	r3, r1
 8005154:	6593      	str	r3, [r2, #88]	@ 0x58
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800515c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f002 0308 	and.w	r3, r2, #8
 800516c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005176:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d01e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	3328      	adds	r3, #40	@ 0x28
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f001 fd26 	bl	8006be8 <RCCEx_PLL3_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051a8:	4b87      	ldr	r3, [pc, #540]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b8:	4a83      	ldr	r2, [pc, #524]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 0310 	and.w	r3, r2, #16
 80051ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051d8:	460b      	mov	r3, r1
 80051da:	4313      	orrs	r3, r2
 80051dc:	d01e      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ea:	d10c      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f0:	3328      	adds	r3, #40	@ 0x28
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fcf7 	bl	8006be8 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005206:	4b70      	ldr	r3, [pc, #448]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005216:	4a6c      	ldr	r2, [pc, #432]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005232:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d03e      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005248:	d022      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800524e:	d81b      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005258:	d00b      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800525a:	e015      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005260:	3308      	adds	r3, #8
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f001 fc0d 	bl	8006a84 <RCCEx_PLL2_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005270:	e00f      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	3328      	adds	r3, #40	@ 0x28
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f001 fcb4 	bl	8006be8 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800529a:	4b4b      	ldr	r3, [pc, #300]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052aa:	4a47      	ldr	r2, [pc, #284]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052c8:	2300      	movs	r3, #0
 80052ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052d0:	460b      	mov	r3, r1
 80052d2:	4313      	orrs	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052e2:	d01f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052e8:	d818      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80052ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052f4:	d007      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80052f6:	e011      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f8:	4b33      	ldr	r3, [pc, #204]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	4a32      	ldr	r2, [pc, #200]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005304:	e00f      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530a:	3328      	adds	r3, #40	@ 0x28
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fc6a 	bl	8006be8 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800531a:	e004      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532e:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	4a22      	ldr	r2, [pc, #136]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6553      	str	r3, [r2, #84]	@ 0x54
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800535a:	673b      	str	r3, [r7, #112]	@ 0x70
 800535c:	2300      	movs	r3, #0
 800535e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005360:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005364:	460b      	mov	r3, r1
 8005366:	4313      	orrs	r3, r2
 8005368:	d034      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d007      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005388:	e00e      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	3308      	adds	r3, #8
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fb76 	bl	8006a84 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800539e:	e003      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053be:	4a02      	ldr	r2, [pc, #8]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e2:	2300      	movs	r3, #0
 80053e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d00c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	3328      	adds	r3, #40	@ 0x28
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 fbf5 	bl	8006be8 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005416:	663b      	str	r3, [r7, #96]	@ 0x60
 8005418:	2300      	movs	r3, #0
 800541a:	667b      	str	r3, [r7, #100]	@ 0x64
 800541c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005420:	460b      	mov	r3, r1
 8005422:	4313      	orrs	r3, r2
 8005424:	d038      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005432:	d018      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005438:	d811      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800543a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543e:	d014      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005444:	d80b      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d011      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544e:	d106      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4bc3      	ldr	r3, [pc, #780]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	4ac2      	ldr	r2, [pc, #776]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800545c:	e008      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005464:	e004      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800546e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005478:	4bb9      	ldr	r3, [pc, #740]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005488:	4ab5      	ldr	r2, [pc, #724]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6553      	str	r3, [r2, #84]	@ 0x54
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80054a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054a6:	2300      	movs	r3, #0
 80054a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054b4:	4baa      	ldr	r3, [pc, #680]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c2:	4aa7      	ldr	r2, [pc, #668]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d6:	2300      	movs	r3, #0
 80054d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80054da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054f4:	4a9a      	ldr	r2, [pc, #616]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005508:	2300      	movs	r3, #0
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005516:	4b92      	ldr	r3, [pc, #584]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005524:	4a8e      	ldr	r2, [pc, #568]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005526:	430b      	orrs	r3, r1
 8005528:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005536:	643b      	str	r3, [r7, #64]	@ 0x40
 8005538:	2300      	movs	r3, #0
 800553a:	647b      	str	r3, [r7, #68]	@ 0x44
 800553c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005540:	460b      	mov	r3, r1
 8005542:	4313      	orrs	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005546:	4b86      	ldr	r3, [pc, #536]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4a85      	ldr	r2, [pc, #532]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800554c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005550:	6113      	str	r3, [r2, #16]
 8005552:	4b83      	ldr	r3, [pc, #524]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005554:	6919      	ldr	r1, [r3, #16]
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800555e:	4a80      	ldr	r2, [pc, #512]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005560:	430b      	orrs	r3, r1
 8005562:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005576:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800557a:	460b      	mov	r3, r1
 800557c:	4313      	orrs	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005580:	4b77      	ldr	r3, [pc, #476]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005584:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	4a74      	ldr	r2, [pc, #464]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005590:	430b      	orrs	r3, r1
 8005592:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055aa:	460b      	mov	r3, r1
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c0:	4a67      	ldr	r2, [pc, #412]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	2100      	movs	r1, #0
 80055d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d011      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	3308      	adds	r3, #8
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fa4a 	bl	8006a84 <RCCEx_PLL2_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	2100      	movs	r1, #0
 8005610:	6239      	str	r1, [r7, #32]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
 8005618:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d011      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	3308      	adds	r3, #8
 8005628:	2101      	movs	r1, #1
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fa2a 	bl	8006a84 <RCCEx_PLL2_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	2100      	movs	r1, #0
 8005650:	61b9      	str	r1, [r7, #24]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800565c:	460b      	mov	r3, r1
 800565e:	4313      	orrs	r3, r2
 8005660:	d011      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	3308      	adds	r3, #8
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f001 fa0a 	bl	8006a84 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	2100      	movs	r1, #0
 8005690:	6139      	str	r1, [r7, #16]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d011      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	3328      	adds	r3, #40	@ 0x28
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fa9c 	bl	8006be8 <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80056b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	2100      	movs	r1, #0
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d011      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	3328      	adds	r3, #40	@ 0x28
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 fa7c 	bl	8006be8 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	2100      	movs	r1, #0
 8005710:	6039      	str	r1, [r7, #0]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	e9d7 1200 	ldrd	r1, r2, [r7]
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d011      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	3328      	adds	r3, #40	@ 0x28
 8005728:	2102      	movs	r1, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fa5c 	bl	8006be8 <RCCEx_PLL3_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005746:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800575a:	46bd      	mov	sp, r7
 800575c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005760:	58024400 	.word	0x58024400

08005764 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b090      	sub	sp, #64	@ 0x40
 8005768:	af00      	add	r7, sp, #0
 800576a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800576e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005772:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005776:	430b      	orrs	r3, r1
 8005778:	f040 8094 	bne.w	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800577c:	4b9e      	ldr	r3, [pc, #632]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800577e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b04      	cmp	r3, #4
 800578a:	f200 8087 	bhi.w	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800578e:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057a9 	.word	0x080057a9
 8005798:	080057d1 	.word	0x080057d1
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	08005895 	.word	0x08005895
 80057a4:	08005821 	.word	0x08005821
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057a8:	4b93      	ldr	r3, [pc, #588]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057b4:	d108      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 f810 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057c4:	f000 bd45 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057cc:	f000 bd41 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057d0:	4b89      	ldr	r3, [pc, #548]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057dc:	d108      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fd54 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ec:	f000 bd31 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f4:	f000 bd2d 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057f8:	4b7f      	ldr	r3, [pc, #508]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005804:	d108      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fe94 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005814:	f000 bd1d 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	f000 bd19 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005820:	4b75      	ldr	r3, [pc, #468]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005824:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800582a:	4b73      	ldr	r3, [pc, #460]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d10c      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800583c:	4b6e      	ldr	r3, [pc, #440]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	4a6d      	ldr	r2, [pc, #436]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800584e:	e01f      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005850:	4b69      	ldr	r3, [pc, #420]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585c:	d106      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005864:	d102      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005866:	4b66      	ldr	r3, [pc, #408]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800586a:	e011      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800586c:	4b62      	ldr	r3, [pc, #392]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800587a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005880:	d102      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005882:	4b60      	ldr	r3, [pc, #384]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800588c:	f000 bce1 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005890:	f000 bcdf 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005894:	4b5c      	ldr	r3, [pc, #368]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005898:	f000 bcdb 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a0:	f000 bcd7 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80058ac:	430b      	orrs	r3, r1
 80058ae:	f040 80ad 	bne.w	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80058b2:	4b51      	ldr	r3, [pc, #324]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80058ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c2:	d056      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ca:	f200 8090 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d2:	f000 8088 	beq.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80058da:	f200 8088 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	2b80      	cmp	r3, #128	@ 0x80
 80058e2:	d032      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	2b80      	cmp	r3, #128	@ 0x80
 80058e8:	f200 8081 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	d014      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80058f8:	e079      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058fa:	4b3f      	ldr	r3, [pc, #252]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005906:	d108      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800590c:	4618      	mov	r0, r3
 800590e:	f000 ff67 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005916:	f000 bc9c 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800591e:	f000 bc98 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005922:	4b35      	ldr	r3, [pc, #212]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800592a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800592e:	d108      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005930:	f107 0318 	add.w	r3, r7, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fcab 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800593e:	f000 bc88 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005946:	f000 bc84 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800594a:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005956:	d108      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fdeb 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005966:	f000 bc74 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596e:	f000 bc70 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005972:	4b21      	ldr	r3, [pc, #132]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800597c:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d10c      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800598e:	4b1a      	ldr	r3, [pc, #104]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a0:	e01f      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059a2:	4b15      	ldr	r3, [pc, #84]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ae:	d106      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80059b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b6:	d102      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059bc:	e011      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059be:	4b0e      	ldr	r3, [pc, #56]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ca:	d106      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d2:	d102      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d8:	e003      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059de:	f000 bc38 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059e2:	f000 bc36 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ea:	f000 bc32 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f2:	f000 bc2e 	b.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
 80059fc:	03d09000 	.word	0x03d09000
 8005a00:	003d0900 	.word	0x003d0900
 8005a04:	017d7840 	.word	0x017d7840
 8005a08:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a10:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005a14:	430b      	orrs	r3, r1
 8005a16:	f040 809c 	bne.w	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005a1a:	4b9e      	ldr	r3, [pc, #632]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005a22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a2a:	d054      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a32:	f200 808b 	bhi.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a3c:	f000 8083 	beq.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a46:	f200 8081 	bhi.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a50:	d02f      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a58:	d878      	bhi.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a66:	d012      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005a68:	e070      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 feaf 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a86:	e3e4      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a8c:	e3e1      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a8e:	4b81      	ldr	r3, [pc, #516]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a9a:	d107      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fbf5 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aaa:	e3d2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab0:	e3cf      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ab2:	4b78      	ldr	r3, [pc, #480]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fd37 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ace:	e3c0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad4:	e3bd      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ada:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d10c      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af2:	4b68      	ldr	r3, [pc, #416]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a66      	ldr	r2, [pc, #408]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b04:	e01e      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b06:	4b63      	ldr	r3, [pc, #396]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b12:	d106      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1a:	d102      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b20:	e010      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b22:	4b5c      	ldr	r3, [pc, #368]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b2e:	d106      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b36:	d102      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b38:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3c:	e002      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b42:	e386      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b44:	e385      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b46:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b4a:	e382      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b50:	e37f      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b56:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	f040 80a7 	bne.w	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005b60:	4b4c      	ldr	r3, [pc, #304]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b64:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005b68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b70:	d055      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b78:	f200 8096 	bhi.w	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b82:	f000 8084 	beq.w	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b8c:	f200 808c 	bhi.w	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b96:	d030      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b9e:	f200 8083 	bhi.w	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bae:	d012      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005bb0:	e07a      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bb2:	4b38      	ldr	r3, [pc, #224]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fe0b 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bce:	e340      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd4:	e33d      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005be4:	f107 0318 	add.w	r3, r7, #24
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fb51 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf2:	e32e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf8:	e32b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bfa:	4b26      	ldr	r3, [pc, #152]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c06:	d107      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fc93 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c16:	e31c      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1c:	e319      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c28:	4b1a      	ldr	r3, [pc, #104]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d10c      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c3a:	4b16      	ldr	r3, [pc, #88]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	4a14      	ldr	r2, [pc, #80]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c4c:	e01e      	b.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c4e:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c62:	d102      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c64:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c68:	e010      	b.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c76:	d106      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c7e:	d102      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c80:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c84:	e002      	b.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c8a:	e2e2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c8c:	e2e1      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c92:	e2de      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c94:	58024400 	.word	0x58024400
 8005c98:	03d09000 	.word	0x03d09000
 8005c9c:	003d0900 	.word	0x003d0900
 8005ca0:	017d7840 	.word	0x017d7840
 8005ca4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cac:	e2d1      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	f040 809c 	bne.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005cbc:	4b93      	ldr	r3, [pc, #588]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005cc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ccc:	d054      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd4:	f200 808b 	bhi.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cde:	f000 8083 	beq.w	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ce8:	f200 8081 	bhi.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf2:	d02f      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfa:	d878      	bhi.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d08:	d012      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005d0a:	e070      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d18:	d107      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fd5e 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d28:	e293      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d2e:	e290      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d30:	4b76      	ldr	r3, [pc, #472]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3e:	f107 0318 	add.w	r3, r7, #24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 faa4 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d4c:	e281      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d52:	e27e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d54:	4b6d      	ldr	r3, [pc, #436]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d60:	d107      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d62:	f107 030c 	add.w	r3, r7, #12
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fbe6 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d70:	e26f      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d76:	e26c      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d78:	4b64      	ldr	r3, [pc, #400]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d82:	4b62      	ldr	r3, [pc, #392]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d94:	4b5d      	ldr	r3, [pc, #372]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da6:	e01e      	b.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005da8:	4b58      	ldr	r3, [pc, #352]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dbc:	d102      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dbe:	4b55      	ldr	r3, [pc, #340]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc2:	e010      	b.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dc4:	4b51      	ldr	r3, [pc, #324]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dd8:	d102      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dda:	4b4f      	ldr	r3, [pc, #316]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dde:	e002      	b.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005de4:	e235      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005de6:	e234      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005de8:	4b4c      	ldr	r3, [pc, #304]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dec:	e231      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df2:	e22e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	f040 808f 	bne.w	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005e02:	4b42      	ldr	r3, [pc, #264]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e06:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e12:	d06b      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1a:	d874      	bhi.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e22:	d056      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e2a:	d86c      	bhi.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e32:	d03b      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e3a:	d864      	bhi.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e42:	d021      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e4a:	d85c      	bhi.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d004      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d004      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005e5a:	e054      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fe fa4c 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8005e60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e62:	e1f6      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e64:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e72:	f107 0318 	add.w	r3, r7, #24
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa0a 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e80:	e1e7      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e86:	e1e4      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e88:	4b20      	ldr	r3, [pc, #128]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e96:	f107 030c 	add.w	r3, r7, #12
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb4c 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ea4:	e1d5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eaa:	e1d2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d109      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb8:	4b14      	ldr	r3, [pc, #80]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	4a13      	ldr	r2, [pc, #76]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eca:	e1c2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed0:	e1bf      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ede:	d102      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee4:	e1b5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eea:	e1b2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005eec:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ef8:	d102      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005efa:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005efe:	e1a8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f04:	e1a5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0a:	e1a2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	03d09000 	.word	0x03d09000
 8005f14:	003d0900 	.word	0x003d0900
 8005f18:	017d7840 	.word	0x017d7840
 8005f1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f24:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	d173      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f2c:	4b9c      	ldr	r3, [pc, #624]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f3c:	d02f      	beq.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f44:	d863      	bhi.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f52:	d012      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005f54:	e05b      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f56:	4b92      	ldr	r3, [pc, #584]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f62:	d107      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f64:	f107 0318 	add.w	r3, r7, #24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f991 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f72:	e16e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f78:	e16b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f7a:	4b89      	ldr	r3, [pc, #548]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f86:	d107      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f88:	f107 030c 	add.w	r3, r7, #12
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fad3 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f96:	e15c      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f9c:	e159      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f9e:	4b80      	ldr	r3, [pc, #512]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d10c      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fba:	4b79      	ldr	r3, [pc, #484]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	4a77      	ldr	r2, [pc, #476]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fcc:	e01e      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fce:	4b74      	ldr	r3, [pc, #464]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fda:	d106      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe2:	d102      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fe4:	4b70      	ldr	r3, [pc, #448]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe8:	e010      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fea:	4b6d      	ldr	r3, [pc, #436]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff6:	d106      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffe:	d102      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006000:	4b6a      	ldr	r3, [pc, #424]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006004:	e002      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800600a:	e122      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800600c:	e121      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006012:	e11e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800601c:	430b      	orrs	r3, r1
 800601e:	d133      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006020:	4b5f      	ldr	r3, [pc, #380]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006028:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006036:	d012      	beq.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006038:	e023      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800603a:	4b59      	ldr	r3, [pc, #356]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006046:	d107      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fbc7 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006056:	e0fc      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605c:	e0f9      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800605e:	4b50      	ldr	r3, [pc, #320]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800606a:	d107      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606c:	f107 0318 	add.w	r3, r7, #24
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f90d 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800607a:	e0ea      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006080:	e0e7      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006086:	e0e4      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006090:	430b      	orrs	r3, r1
 8006092:	f040 808d 	bne.w	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006096:	4b42      	ldr	r3, [pc, #264]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a6:	d06b      	beq.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80060a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ae:	d874      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b6:	d056      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060be:	d86c      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060c6:	d03b      	beq.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060ce:	d864      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d6:	d021      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060de:	d85c      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ec:	d004      	beq.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80060ee:	e054      	b.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80060f0:	f000 f8b8 	bl	8006264 <HAL_RCCEx_GetD3PCLK1Freq>
 80060f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060f6:	e0ac      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060f8:	4b29      	ldr	r3, [pc, #164]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006104:	d107      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006106:	f107 0318 	add.w	r3, r7, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f8c0 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006114:	e09d      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611a:	e09a      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800611c:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006128:	d107      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612a:	f107 030c 	add.w	r3, r7, #12
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fa02 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006138:	e08b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613e:	e088      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006140:	4b17      	ldr	r3, [pc, #92]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b04      	cmp	r3, #4
 800614a:	d109      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800614c:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	08db      	lsrs	r3, r3, #3
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	4a13      	ldr	r2, [pc, #76]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800615e:	e078      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e075      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006166:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006172:	d102      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006178:	e06b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617e:	e068      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800618c:	d102      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006192:	e05e      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e05b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619e:	e058      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061a0:	58024400 	.word	0x58024400
 80061a4:	03d09000 	.word	0x03d09000
 80061a8:	003d0900 	.word	0x003d0900
 80061ac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80061b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80061b8:	430b      	orrs	r3, r1
 80061ba:	d148      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80061bc:	4b27      	ldr	r3, [pc, #156]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061cc:	d02a      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061d4:	d838      	bhi.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061e2:	d00d      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80061e4:	e030      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061e6:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f2:	d102      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80061f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f8:	e02b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e028      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006200:	4b16      	ldr	r3, [pc, #88]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800620c:	d107      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800620e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fae4 	bl	80067e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800621c:	e019      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006222:	e016      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006224:	4b0d      	ldr	r3, [pc, #52]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800622c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006230:	d107      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006232:	f107 0318 	add.w	r3, r7, #24
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f82a 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006240:	e007      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006246:	e004      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e001      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006254:	4618      	mov	r0, r3
 8006256:	3740      	adds	r7, #64	@ 0x40
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	58024400 	.word	0x58024400
 8006260:	017d7840 	.word	0x017d7840

08006264 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006268:	f7fe f816 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 800626c:	4602      	mov	r2, r0
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4904      	ldr	r1, [pc, #16]	@ (800628c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800627a:	5ccb      	ldrb	r3, [r1, r3]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	58024400 	.word	0x58024400
 800628c:	08008cc8 	.word	0x08008cc8

08006290 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	@ 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006298:	4ba1      	ldr	r3, [pc, #644]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80062a2:	4b9f      	ldr	r3, [pc, #636]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	0b1b      	lsrs	r3, r3, #12
 80062a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062ae:	4b9c      	ldr	r3, [pc, #624]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062ba:	4b99      	ldr	r3, [pc, #612]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	08db      	lsrs	r3, r3, #3
 80062c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8111 	beq.w	8006500 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	f000 8083 	beq.w	80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f200 80a1 	bhi.w	8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d056      	beq.n	80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062fa:	e099      	b.n	8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fc:	4b88      	ldr	r3, [pc, #544]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02d      	beq.n	8006364 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006308:	4b85      	ldr	r3, [pc, #532]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	08db      	lsrs	r3, r3, #3
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	4a84      	ldr	r2, [pc, #528]	@ (8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006332:	4b7b      	ldr	r3, [pc, #492]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a03 	vldr	s12, [r7, #12]
 8006346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006362:	e087      	b.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800652c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b6a      	ldr	r3, [pc, #424]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a03 	vldr	s12, [r7, #12]
 800638a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a6:	e065      	b.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ba:	4b59      	ldr	r3, [pc, #356]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ea:	e043      	b.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fe:	4b48      	ldr	r3, [pc, #288]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642e:	e021      	b.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006442:	4b37      	ldr	r3, [pc, #220]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a03 	vldr	s12, [r7, #12]
 8006456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006472:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006474:	4b2a      	ldr	r3, [pc, #168]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	0a5b      	lsrs	r3, r3, #9
 800647a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80064a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c8:	ee17 2a90 	vmov	r2, s15
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064d0:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	0e1b      	lsrs	r3, r3, #24
 80064d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064f6:	ee17 2a90 	vmov	r2, s15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064fe:	e008      	b.n	8006512 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
}
 8006512:	bf00      	nop
 8006514:	3724      	adds	r7, #36	@ 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	46000000 	.word	0x46000000
 800652c:	4c742400 	.word	0x4c742400
 8006530:	4a742400 	.word	0x4a742400
 8006534:	4bbebc20 	.word	0x4bbebc20

08006538 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	@ 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006540:	4ba1      	ldr	r3, [pc, #644]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800654a:	4b9f      	ldr	r3, [pc, #636]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	0d1b      	lsrs	r3, r3, #20
 8006550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006554:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006556:	4b9c      	ldr	r3, [pc, #624]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006562:	4b99      	ldr	r3, [pc, #612]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	fb02 f303 	mul.w	r3, r2, r3
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8111 	beq.w	80067a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b02      	cmp	r3, #2
 800658a:	f000 8083 	beq.w	8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f200 80a1 	bhi.w	80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d056      	beq.n	8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065a2:	e099      	b.n	80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a4:	4b88      	ldr	r3, [pc, #544]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02d      	beq.n	800660c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065b0:	4b85      	ldr	r3, [pc, #532]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	08db      	lsrs	r3, r3, #3
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	4a84      	ldr	r2, [pc, #528]	@ (80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065bc:	fa22 f303 	lsr.w	r3, r2, r3
 80065c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065da:	4b7b      	ldr	r3, [pc, #492]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800660a:	e087      	b.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800661a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661e:	4b6a      	ldr	r3, [pc, #424]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006632:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664e:	e065      	b.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800665e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006662:	4b59      	ldr	r3, [pc, #356]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006672:	ed97 6a03 	vldr	s12, [r7, #12]
 8006676:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800667a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006692:	e043      	b.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a6:	4b48      	ldr	r3, [pc, #288]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066d6:	e021      	b.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ea:	4b37      	ldr	r3, [pc, #220]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800670e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800671c:	4b2a      	ldr	r3, [pc, #168]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006720:	0a5b      	lsrs	r3, r3, #9
 8006722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006736:	edd7 6a07 	vldr	s13, [r7, #28]
 800673a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800674a:	4b1f      	ldr	r3, [pc, #124]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006764:	edd7 6a07 	vldr	s13, [r7, #28]
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006770:	ee17 2a90 	vmov	r2, s15
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006778:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800678e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006792:	edd7 6a07 	vldr	s13, [r7, #28]
 8006796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800679e:	ee17 2a90 	vmov	r2, s15
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067a6:	e008      	b.n	80067ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
}
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	@ 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	58024400 	.word	0x58024400
 80067cc:	03d09000 	.word	0x03d09000
 80067d0:	46000000 	.word	0x46000000
 80067d4:	4c742400 	.word	0x4c742400
 80067d8:	4a742400 	.word	0x4a742400
 80067dc:	4bbebc20 	.word	0x4bbebc20

080067e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b089      	sub	sp, #36	@ 0x24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067e8:	4ba0      	ldr	r3, [pc, #640]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80067f2:	4b9e      	ldr	r3, [pc, #632]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80067fe:	4b9b      	ldr	r3, [pc, #620]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006808:	4b98      	ldr	r3, [pc, #608]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	08db      	lsrs	r3, r3, #3
 800680e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006820:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8111 	beq.w	8006a4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b02      	cmp	r3, #2
 8006830:	f000 8083 	beq.w	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b02      	cmp	r3, #2
 8006838:	f200 80a1 	bhi.w	800697e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d056      	beq.n	80068f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006848:	e099      	b.n	800697e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800684a:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02d      	beq.n	80068b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006856:	4b85      	ldr	r3, [pc, #532]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	4a83      	ldr	r2, [pc, #524]	@ (8006a70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006880:	4b7a      	ldr	r3, [pc, #488]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006890:	ed97 6a03 	vldr	s12, [r7, #12]
 8006894:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068b0:	e087      	b.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006a78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80068c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c4:	4b69      	ldr	r3, [pc, #420]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f4:	e065      	b.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006900:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006a7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006908:	4b58      	ldr	r3, [pc, #352]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006918:	ed97 6a03 	vldr	s12, [r7, #12]
 800691c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800692c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006938:	e043      	b.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006944:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694c:	4b47      	ldr	r3, [pc, #284]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006960:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800697c:	e021      	b.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006988:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006a78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800698c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006990:	4b36      	ldr	r3, [pc, #216]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80069c2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e8:	ee17 2a90 	vmov	r2, s15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80069f0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a16:	ee17 2a90 	vmov	r2, s15
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	0e1b      	lsrs	r3, r3, #24
 8006a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a44:	ee17 2a90 	vmov	r2, s15
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006a4c:	e008      	b.n	8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	bf00      	nop
 8006a62:	3724      	adds	r7, #36	@ 0x24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	03d09000 	.word	0x03d09000
 8006a74:	46000000 	.word	0x46000000
 8006a78:	4c742400 	.word	0x4c742400
 8006a7c:	4a742400 	.word	0x4a742400
 8006a80:	4bbebc20 	.word	0x4bbebc20

08006a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a92:	4b53      	ldr	r3, [pc, #332]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d101      	bne.n	8006aa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e099      	b.n	8006bd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006aa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aae:	f7fa fce7 	bl	8001480 <HAL_GetTick>
 8006ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ab4:	e008      	b.n	8006ac8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ab6:	f7fa fce3 	bl	8001480 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e086      	b.n	8006bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ac8:	4b45      	ldr	r3, [pc, #276]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ad4:	4b42      	ldr	r3, [pc, #264]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	031b      	lsls	r3, r3, #12
 8006ae2:	493f      	ldr	r1, [pc, #252]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	025b      	lsls	r3, r3, #9
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b18:	4931      	ldr	r1, [pc, #196]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b1e:	4b30      	ldr	r3, [pc, #192]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	492d      	ldr	r1, [pc, #180]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b30:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	f023 0220 	bic.w	r2, r3, #32
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	4928      	ldr	r1, [pc, #160]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b42:	4b27      	ldr	r3, [pc, #156]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	4a26      	ldr	r2, [pc, #152]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b48:	f023 0310 	bic.w	r3, r3, #16
 8006b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b4e:	4b24      	ldr	r3, [pc, #144]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b52:	4b24      	ldr	r3, [pc, #144]	@ (8006be4 <RCCEx_PLL2_Config+0x160>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	69d2      	ldr	r2, [r2, #28]
 8006b5a:	00d2      	lsls	r2, r2, #3
 8006b5c:	4920      	ldr	r1, [pc, #128]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b62:	4b1f      	ldr	r3, [pc, #124]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	4a1e      	ldr	r2, [pc, #120]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b68:	f043 0310 	orr.w	r3, r3, #16
 8006b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b74:	4b1a      	ldr	r3, [pc, #104]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b78:	4a19      	ldr	r2, [pc, #100]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b80:	e00f      	b.n	8006ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d106      	bne.n	8006b96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b88:	4b15      	ldr	r3, [pc, #84]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	4a14      	ldr	r2, [pc, #80]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b94:	e005      	b.n	8006ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b96:	4b12      	ldr	r3, [pc, #72]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	4a11      	ldr	r2, [pc, #68]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bae:	f7fa fc67 	bl	8001480 <HAL_GetTick>
 8006bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bb4:	e008      	b.n	8006bc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bb6:	f7fa fc63 	bl	8001480 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e006      	b.n	8006bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bc8:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <RCCEx_PLL2_Config+0x15c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400
 8006be4:	ffff0007 	.word	0xffff0007

08006be8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bf6:	4b53      	ldr	r3, [pc, #332]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d101      	bne.n	8006c06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e099      	b.n	8006d3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c06:	4b4f      	ldr	r3, [pc, #316]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c12:	f7fa fc35 	bl	8001480 <HAL_GetTick>
 8006c16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c18:	e008      	b.n	8006c2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c1a:	f7fa fc31 	bl	8001480 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e086      	b.n	8006d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c2c:	4b45      	ldr	r3, [pc, #276]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f0      	bne.n	8006c1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c38:	4b42      	ldr	r3, [pc, #264]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	051b      	lsls	r3, r3, #20
 8006c46:	493f      	ldr	r1, [pc, #252]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	025b      	lsls	r3, r3, #9
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	061b      	lsls	r3, r3, #24
 8006c78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c7c:	4931      	ldr	r1, [pc, #196]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c82:	4b30      	ldr	r3, [pc, #192]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	492d      	ldr	r1, [pc, #180]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c94:	4b2b      	ldr	r3, [pc, #172]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	4928      	ldr	r1, [pc, #160]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ca6:	4b27      	ldr	r3, [pc, #156]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	4a26      	ldr	r2, [pc, #152]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cb2:	4b24      	ldr	r3, [pc, #144]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cb6:	4b24      	ldr	r3, [pc, #144]	@ (8006d48 <RCCEx_PLL3_Config+0x160>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	69d2      	ldr	r2, [r2, #28]
 8006cbe:	00d2      	lsls	r2, r2, #3
 8006cc0:	4920      	ldr	r1, [pc, #128]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	4a1e      	ldr	r2, [pc, #120]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	4a19      	ldr	r2, [pc, #100]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ce4:	e00f      	b.n	8006d06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d106      	bne.n	8006cfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006cec:	4b15      	ldr	r3, [pc, #84]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a14      	ldr	r2, [pc, #80]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cf8:	e005      	b.n	8006d06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cfa:	4b12      	ldr	r3, [pc, #72]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	4a11      	ldr	r2, [pc, #68]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d06:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d12:	f7fa fbb5 	bl	8001480 <HAL_GetTick>
 8006d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d1a:	f7fa fbb1 	bl	8001480 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e006      	b.n	8006d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <RCCEx_PLL3_Config+0x15c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	58024400 	.word	0x58024400
 8006d48:	ffff0007 	.word	0xffff0007

08006d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e042      	b.n	8006de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f83b 	bl	8006dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2224      	movs	r2, #36	@ 0x24
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fe28 	bl	80079ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8bd 	bl	8006f1c <UART_SetConfig>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e01b      	b.n	8006de4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fea7 	bl	8007b30 <UART_CheckIdleState>
 8006de2:	4603      	mov	r3, r0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d17b      	bne.n	8006f12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_UART_Transmit+0x26>
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e074      	b.n	8006f14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2221      	movs	r2, #33	@ 0x21
 8006e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e3a:	f7fa fb21 	bl	8001480 <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e58:	d108      	bne.n	8006e6c <HAL_UART_Transmit+0x6c>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	e003      	b.n	8006e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e74:	e030      	b.n	8006ed8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2180      	movs	r1, #128	@ 0x80
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 feff 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e03d      	b.n	8006f14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	e007      	b.n	8006ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1c8      	bne.n	8006e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	2140      	movs	r1, #64	@ 0x40
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fec8 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e006      	b.n	8006f14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e000      	b.n	8006f14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b092      	sub	sp, #72	@ 0x48
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4bbe      	ldr	r3, [pc, #760]	@ (8007244 <UART_SetConfig+0x328>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4ab3      	ldr	r2, [pc, #716]	@ (8007248 <UART_SetConfig+0x32c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f84:	4313      	orrs	r3, r2
 8006f86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4baf      	ldr	r3, [pc, #700]	@ (800724c <UART_SetConfig+0x330>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	f023 010f 	bic.w	r1, r3, #15
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4aa6      	ldr	r2, [pc, #664]	@ (8007250 <UART_SetConfig+0x334>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d177      	bne.n	80070ac <UART_SetConfig+0x190>
 8006fbc:	4ba5      	ldr	r3, [pc, #660]	@ (8007254 <UART_SetConfig+0x338>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc4:	2b28      	cmp	r3, #40	@ 0x28
 8006fc6:	d86d      	bhi.n	80070a4 <UART_SetConfig+0x188>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0xb4>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08007075 	.word	0x08007075
 8006fd4:	080070a5 	.word	0x080070a5
 8006fd8:	080070a5 	.word	0x080070a5
 8006fdc:	080070a5 	.word	0x080070a5
 8006fe0:	080070a5 	.word	0x080070a5
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070a5 	.word	0x080070a5
 8006fec:	080070a5 	.word	0x080070a5
 8006ff0:	0800707d 	.word	0x0800707d
 8006ff4:	080070a5 	.word	0x080070a5
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	080070a5 	.word	0x080070a5
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070a5 	.word	0x080070a5
 8007008:	080070a5 	.word	0x080070a5
 800700c:	080070a5 	.word	0x080070a5
 8007010:	08007085 	.word	0x08007085
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070a5 	.word	0x080070a5
 800701c:	080070a5 	.word	0x080070a5
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080070a5 	.word	0x080070a5
 8007028:	080070a5 	.word	0x080070a5
 800702c:	080070a5 	.word	0x080070a5
 8007030:	0800708d 	.word	0x0800708d
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070a5 	.word	0x080070a5
 800703c:	080070a5 	.word	0x080070a5
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070a5 	.word	0x080070a5
 8007050:	08007095 	.word	0x08007095
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070a5 	.word	0x080070a5
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	0800709d 	.word	0x0800709d
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e222      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e21e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e21a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e216      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007094:	2320      	movs	r3, #32
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e212      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e20e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e20a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a69      	ldr	r2, [pc, #420]	@ (8007258 <UART_SetConfig+0x33c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d130      	bne.n	8007118 <UART_SetConfig+0x1fc>
 80070b6:	4b67      	ldr	r3, [pc, #412]	@ (8007254 <UART_SetConfig+0x338>)
 80070b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d826      	bhi.n	8007110 <UART_SetConfig+0x1f4>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x1ac>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e1ec      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80070e8:	2304      	movs	r3, #4
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e1e8      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e1e4      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80070f8:	2310      	movs	r3, #16
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e1e0      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007100:	2320      	movs	r3, #32
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e1dc      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007108:	2340      	movs	r3, #64	@ 0x40
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e1d8      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e1d4      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a4f      	ldr	r2, [pc, #316]	@ (800725c <UART_SetConfig+0x340>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d130      	bne.n	8007184 <UART_SetConfig+0x268>
 8007122:	4b4c      	ldr	r3, [pc, #304]	@ (8007254 <UART_SetConfig+0x338>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b05      	cmp	r3, #5
 800712c:	d826      	bhi.n	800717c <UART_SetConfig+0x260>
 800712e:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <UART_SetConfig+0x218>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	0800714d 	.word	0x0800714d
 8007138:	08007155 	.word	0x08007155
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007165 	.word	0x08007165
 8007144:	0800716d 	.word	0x0800716d
 8007148:	08007175 	.word	0x08007175
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e1b6      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e1b2      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e1ae      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e1aa      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800716c:	2320      	movs	r3, #32
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e1a6      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007174:	2340      	movs	r3, #64	@ 0x40
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e1a2      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800717c:	2380      	movs	r3, #128	@ 0x80
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e19e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a35      	ldr	r2, [pc, #212]	@ (8007260 <UART_SetConfig+0x344>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d130      	bne.n	80071f0 <UART_SetConfig+0x2d4>
 800718e:	4b31      	ldr	r3, [pc, #196]	@ (8007254 <UART_SetConfig+0x338>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b05      	cmp	r3, #5
 8007198:	d826      	bhi.n	80071e8 <UART_SetConfig+0x2cc>
 800719a:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x284>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071b9 	.word	0x080071b9
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071c9 	.word	0x080071c9
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e180      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e17c      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e178      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e174      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071d8:	2320      	movs	r3, #32
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e170      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071e0:	2340      	movs	r3, #64	@ 0x40
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e16c      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ee:	e168      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007264 <UART_SetConfig+0x348>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d142      	bne.n	8007280 <UART_SetConfig+0x364>
 80071fa:	4b16      	ldr	r3, [pc, #88]	@ (8007254 <UART_SetConfig+0x338>)
 80071fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b05      	cmp	r3, #5
 8007204:	d838      	bhi.n	8007278 <UART_SetConfig+0x35c>
 8007206:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <UART_SetConfig+0x2f0>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007225 	.word	0x08007225
 8007210:	0800722d 	.word	0x0800722d
 8007214:	08007235 	.word	0x08007235
 8007218:	0800723d 	.word	0x0800723d
 800721c:	08007269 	.word	0x08007269
 8007220:	08007271 	.word	0x08007271
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722a:	e14a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007232:	e146      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723a:	e142      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007242:	e13e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007244:	cfff69f3 	.word	0xcfff69f3
 8007248:	58000c00 	.word	0x58000c00
 800724c:	11fff4ff 	.word	0x11fff4ff
 8007250:	40011000 	.word	0x40011000
 8007254:	58024400 	.word	0x58024400
 8007258:	40004400 	.word	0x40004400
 800725c:	40004800 	.word	0x40004800
 8007260:	40004c00 	.word	0x40004c00
 8007264:	40005000 	.word	0x40005000
 8007268:	2320      	movs	r3, #32
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e128      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007270:	2340      	movs	r3, #64	@ 0x40
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e124      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007278:	2380      	movs	r3, #128	@ 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e120      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4acb      	ldr	r2, [pc, #812]	@ (80075b4 <UART_SetConfig+0x698>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d176      	bne.n	8007378 <UART_SetConfig+0x45c>
 800728a:	4bcb      	ldr	r3, [pc, #812]	@ (80075b8 <UART_SetConfig+0x69c>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007292:	2b28      	cmp	r3, #40	@ 0x28
 8007294:	d86c      	bhi.n	8007370 <UART_SetConfig+0x454>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x380>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	08007341 	.word	0x08007341
 80072a0:	08007371 	.word	0x08007371
 80072a4:	08007371 	.word	0x08007371
 80072a8:	08007371 	.word	0x08007371
 80072ac:	08007371 	.word	0x08007371
 80072b0:	08007371 	.word	0x08007371
 80072b4:	08007371 	.word	0x08007371
 80072b8:	08007371 	.word	0x08007371
 80072bc:	08007349 	.word	0x08007349
 80072c0:	08007371 	.word	0x08007371
 80072c4:	08007371 	.word	0x08007371
 80072c8:	08007371 	.word	0x08007371
 80072cc:	08007371 	.word	0x08007371
 80072d0:	08007371 	.word	0x08007371
 80072d4:	08007371 	.word	0x08007371
 80072d8:	08007371 	.word	0x08007371
 80072dc:	08007351 	.word	0x08007351
 80072e0:	08007371 	.word	0x08007371
 80072e4:	08007371 	.word	0x08007371
 80072e8:	08007371 	.word	0x08007371
 80072ec:	08007371 	.word	0x08007371
 80072f0:	08007371 	.word	0x08007371
 80072f4:	08007371 	.word	0x08007371
 80072f8:	08007371 	.word	0x08007371
 80072fc:	08007359 	.word	0x08007359
 8007300:	08007371 	.word	0x08007371
 8007304:	08007371 	.word	0x08007371
 8007308:	08007371 	.word	0x08007371
 800730c:	08007371 	.word	0x08007371
 8007310:	08007371 	.word	0x08007371
 8007314:	08007371 	.word	0x08007371
 8007318:	08007371 	.word	0x08007371
 800731c:	08007361 	.word	0x08007361
 8007320:	08007371 	.word	0x08007371
 8007324:	08007371 	.word	0x08007371
 8007328:	08007371 	.word	0x08007371
 800732c:	08007371 	.word	0x08007371
 8007330:	08007371 	.word	0x08007371
 8007334:	08007371 	.word	0x08007371
 8007338:	08007371 	.word	0x08007371
 800733c:	08007369 	.word	0x08007369
 8007340:	2301      	movs	r3, #1
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e0bc      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e0b8      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e0b4      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e0b0      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007360:	2320      	movs	r3, #32
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e0ac      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007368:	2340      	movs	r3, #64	@ 0x40
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e0a8      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e0a4      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a8f      	ldr	r2, [pc, #572]	@ (80075bc <UART_SetConfig+0x6a0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d130      	bne.n	80073e4 <UART_SetConfig+0x4c8>
 8007382:	4b8d      	ldr	r3, [pc, #564]	@ (80075b8 <UART_SetConfig+0x69c>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b05      	cmp	r3, #5
 800738c:	d826      	bhi.n	80073dc <UART_SetConfig+0x4c0>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <UART_SetConfig+0x478>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073bd 	.word	0x080073bd
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073cd 	.word	0x080073cd
 80073a8:	080073d5 	.word	0x080073d5
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e086      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073b4:	2304      	movs	r3, #4
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e082      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e07e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073c4:	2310      	movs	r3, #16
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e07a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073cc:	2320      	movs	r3, #32
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d2:	e076      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073d4:	2340      	movs	r3, #64	@ 0x40
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e072      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073dc:	2380      	movs	r3, #128	@ 0x80
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e06e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a75      	ldr	r2, [pc, #468]	@ (80075c0 <UART_SetConfig+0x6a4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d130      	bne.n	8007450 <UART_SetConfig+0x534>
 80073ee:	4b72      	ldr	r3, [pc, #456]	@ (80075b8 <UART_SetConfig+0x69c>)
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d826      	bhi.n	8007448 <UART_SetConfig+0x52c>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <UART_SetConfig+0x4e4>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007419 	.word	0x08007419
 8007404:	08007421 	.word	0x08007421
 8007408:	08007429 	.word	0x08007429
 800740c:	08007431 	.word	0x08007431
 8007410:	08007439 	.word	0x08007439
 8007414:	08007441 	.word	0x08007441
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741e:	e050      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007420:	2304      	movs	r3, #4
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007426:	e04c      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007428:	2308      	movs	r3, #8
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e048      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007430:	2310      	movs	r3, #16
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e044      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007438:	2320      	movs	r3, #32
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e040      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007440:	2340      	movs	r3, #64	@ 0x40
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e03c      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e038      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a5b      	ldr	r2, [pc, #364]	@ (80075c4 <UART_SetConfig+0x6a8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d130      	bne.n	80074bc <UART_SetConfig+0x5a0>
 800745a:	4b57      	ldr	r3, [pc, #348]	@ (80075b8 <UART_SetConfig+0x69c>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	2b05      	cmp	r3, #5
 8007464:	d826      	bhi.n	80074b4 <UART_SetConfig+0x598>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <UART_SetConfig+0x550>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	08007485 	.word	0x08007485
 8007470:	0800748d 	.word	0x0800748d
 8007474:	08007495 	.word	0x08007495
 8007478:	0800749d 	.word	0x0800749d
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074ad 	.word	0x080074ad
 8007484:	2302      	movs	r3, #2
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748a:	e01a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007492:	e016      	b.n	80074c2 <UART_SetConfig+0x5a6>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e012      	b.n	80074c2 <UART_SetConfig+0x5a6>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e00e      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80074a4:	2320      	movs	r3, #32
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e00a      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80074ac:	2340      	movs	r3, #64	@ 0x40
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e006      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80074b4:	2380      	movs	r3, #128	@ 0x80
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e002      	b.n	80074c2 <UART_SetConfig+0x5a6>
 80074bc:	2380      	movs	r3, #128	@ 0x80
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a3f      	ldr	r2, [pc, #252]	@ (80075c4 <UART_SetConfig+0x6a8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	f040 80f8 	bne.w	80076be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	dc46      	bgt.n	8007564 <UART_SetConfig+0x648>
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	f2c0 8082 	blt.w	80075e0 <UART_SetConfig+0x6c4>
 80074dc:	3b02      	subs	r3, #2
 80074de:	2b1e      	cmp	r3, #30
 80074e0:	d87e      	bhi.n	80075e0 <UART_SetConfig+0x6c4>
 80074e2:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <UART_SetConfig+0x5cc>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800756b 	.word	0x0800756b
 80074ec:	080075e1 	.word	0x080075e1
 80074f0:	08007573 	.word	0x08007573
 80074f4:	080075e1 	.word	0x080075e1
 80074f8:	080075e1 	.word	0x080075e1
 80074fc:	080075e1 	.word	0x080075e1
 8007500:	08007583 	.word	0x08007583
 8007504:	080075e1 	.word	0x080075e1
 8007508:	080075e1 	.word	0x080075e1
 800750c:	080075e1 	.word	0x080075e1
 8007510:	080075e1 	.word	0x080075e1
 8007514:	080075e1 	.word	0x080075e1
 8007518:	080075e1 	.word	0x080075e1
 800751c:	080075e1 	.word	0x080075e1
 8007520:	08007593 	.word	0x08007593
 8007524:	080075e1 	.word	0x080075e1
 8007528:	080075e1 	.word	0x080075e1
 800752c:	080075e1 	.word	0x080075e1
 8007530:	080075e1 	.word	0x080075e1
 8007534:	080075e1 	.word	0x080075e1
 8007538:	080075e1 	.word	0x080075e1
 800753c:	080075e1 	.word	0x080075e1
 8007540:	080075e1 	.word	0x080075e1
 8007544:	080075e1 	.word	0x080075e1
 8007548:	080075e1 	.word	0x080075e1
 800754c:	080075e1 	.word	0x080075e1
 8007550:	080075e1 	.word	0x080075e1
 8007554:	080075e1 	.word	0x080075e1
 8007558:	080075e1 	.word	0x080075e1
 800755c:	080075e1 	.word	0x080075e1
 8007560:	080075d3 	.word	0x080075d3
 8007564:	2b40      	cmp	r3, #64	@ 0x40
 8007566:	d037      	beq.n	80075d8 <UART_SetConfig+0x6bc>
 8007568:	e03a      	b.n	80075e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800756a:	f7fe fe7b 	bl	8006264 <HAL_RCCEx_GetD3PCLK1Freq>
 800756e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007570:	e03c      	b.n	80075ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fe8a 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	e034      	b.n	80075ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007582:	f107 0318 	add.w	r3, r7, #24
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe ffd6 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007590:	e02c      	b.n	80075ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007592:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <UART_SetConfig+0x69c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800759e:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <UART_SetConfig+0x69c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	08db      	lsrs	r3, r3, #3
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	4a07      	ldr	r2, [pc, #28]	@ (80075c8 <UART_SetConfig+0x6ac>)
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075b0:	e01c      	b.n	80075ec <UART_SetConfig+0x6d0>
 80075b2:	bf00      	nop
 80075b4:	40011400 	.word	0x40011400
 80075b8:	58024400 	.word	0x58024400
 80075bc:	40007800 	.word	0x40007800
 80075c0:	40007c00 	.word	0x40007c00
 80075c4:	58000c00 	.word	0x58000c00
 80075c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007844 <UART_SetConfig+0x928>)
 80075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d0:	e00c      	b.n	80075ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075d2:	4b9d      	ldr	r3, [pc, #628]	@ (8007848 <UART_SetConfig+0x92c>)
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d6:	e009      	b.n	80075ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075de:	e005      	b.n	80075ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 81de 	beq.w	80079b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	4a94      	ldr	r2, [pc, #592]	@ (800784c <UART_SetConfig+0x930>)
 80075fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fe:	461a      	mov	r2, r3
 8007600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007602:	fbb3 f3f2 	udiv	r3, r3, r2
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007614:	429a      	cmp	r2, r3
 8007616:	d305      	bcc.n	8007624 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800762a:	e1c1      	b.n	80079b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800762e:	2200      	movs	r2, #0
 8007630:	60bb      	str	r3, [r7, #8]
 8007632:	60fa      	str	r2, [r7, #12]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	4a84      	ldr	r2, [pc, #528]	@ (800784c <UART_SetConfig+0x930>)
 800763a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763e:	b29b      	uxth	r3, r3
 8007640:	2200      	movs	r2, #0
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800764a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800764e:	f7f8 fe97 	bl	8000380 <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	020b      	lsls	r3, r1, #8
 8007664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007668:	0202      	lsls	r2, r0, #8
 800766a:	6979      	ldr	r1, [r7, #20]
 800766c:	6849      	ldr	r1, [r1, #4]
 800766e:	0849      	lsrs	r1, r1, #1
 8007670:	2000      	movs	r0, #0
 8007672:	460c      	mov	r4, r1
 8007674:	4605      	mov	r5, r0
 8007676:	eb12 0804 	adds.w	r8, r2, r4
 800767a:	eb43 0905 	adc.w	r9, r3, r5
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	469a      	mov	sl, r3
 8007686:	4693      	mov	fp, r2
 8007688:	4652      	mov	r2, sl
 800768a:	465b      	mov	r3, fp
 800768c:	4640      	mov	r0, r8
 800768e:	4649      	mov	r1, r9
 8007690:	f7f8 fe76 	bl	8000380 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4613      	mov	r3, r2
 800769a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a2:	d308      	bcc.n	80076b6 <UART_SetConfig+0x79a>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076aa:	d204      	bcs.n	80076b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e17c      	b.n	80079b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80076bc:	e178      	b.n	80079b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076c6:	f040 80c5 	bne.w	8007854 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80076ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	dc48      	bgt.n	8007764 <UART_SetConfig+0x848>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db7b      	blt.n	80077ce <UART_SetConfig+0x8b2>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d879      	bhi.n	80077ce <UART_SetConfig+0x8b2>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <UART_SetConfig+0x7c4>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	0800776b 	.word	0x0800776b
 80076e4:	08007773 	.word	0x08007773
 80076e8:	080077cf 	.word	0x080077cf
 80076ec:	080077cf 	.word	0x080077cf
 80076f0:	0800777b 	.word	0x0800777b
 80076f4:	080077cf 	.word	0x080077cf
 80076f8:	080077cf 	.word	0x080077cf
 80076fc:	080077cf 	.word	0x080077cf
 8007700:	0800778b 	.word	0x0800778b
 8007704:	080077cf 	.word	0x080077cf
 8007708:	080077cf 	.word	0x080077cf
 800770c:	080077cf 	.word	0x080077cf
 8007710:	080077cf 	.word	0x080077cf
 8007714:	080077cf 	.word	0x080077cf
 8007718:	080077cf 	.word	0x080077cf
 800771c:	080077cf 	.word	0x080077cf
 8007720:	0800779b 	.word	0x0800779b
 8007724:	080077cf 	.word	0x080077cf
 8007728:	080077cf 	.word	0x080077cf
 800772c:	080077cf 	.word	0x080077cf
 8007730:	080077cf 	.word	0x080077cf
 8007734:	080077cf 	.word	0x080077cf
 8007738:	080077cf 	.word	0x080077cf
 800773c:	080077cf 	.word	0x080077cf
 8007740:	080077cf 	.word	0x080077cf
 8007744:	080077cf 	.word	0x080077cf
 8007748:	080077cf 	.word	0x080077cf
 800774c:	080077cf 	.word	0x080077cf
 8007750:	080077cf 	.word	0x080077cf
 8007754:	080077cf 	.word	0x080077cf
 8007758:	080077cf 	.word	0x080077cf
 800775c:	080077cf 	.word	0x080077cf
 8007760:	080077c1 	.word	0x080077c1
 8007764:	2b40      	cmp	r3, #64	@ 0x40
 8007766:	d02e      	beq.n	80077c6 <UART_SetConfig+0x8aa>
 8007768:	e031      	b.n	80077ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776a:	f7fc fdc5 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 800776e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007770:	e033      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007772:	f7fc fdd7 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8007776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007778:	e02f      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800777a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fd86 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007788:	e027      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778a:	f107 0318 	add.w	r3, r7, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fed2 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007798:	e01f      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800779a:	4b2d      	ldr	r3, [pc, #180]	@ (8007850 <UART_SetConfig+0x934>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007850 <UART_SetConfig+0x934>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	4a24      	ldr	r2, [pc, #144]	@ (8007844 <UART_SetConfig+0x928>)
 80077b2:	fa22 f303 	lsr.w	r3, r2, r3
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077b8:	e00f      	b.n	80077da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80077ba:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <UART_SetConfig+0x928>)
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	e00c      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077c0:	4b21      	ldr	r3, [pc, #132]	@ (8007848 <UART_SetConfig+0x92c>)
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c4:	e009      	b.n	80077da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077cc:	e005      	b.n	80077da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80077d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80e7 	beq.w	80079b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	4a19      	ldr	r2, [pc, #100]	@ (800784c <UART_SetConfig+0x930>)
 80077e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f4:	005a      	lsls	r2, r3, #1
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	441a      	add	r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	2b0f      	cmp	r3, #15
 800780c:	d916      	bls.n	800783c <UART_SetConfig+0x920>
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007814:	d212      	bcs.n	800783c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	b29b      	uxth	r3, r3
 800781a:	f023 030f 	bic.w	r3, r3, #15
 800781e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	085b      	lsrs	r3, r3, #1
 8007824:	b29b      	uxth	r3, r3
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	b29a      	uxth	r2, r3
 800782c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800782e:	4313      	orrs	r3, r2
 8007830:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e0b9      	b.n	80079b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007842:	e0b5      	b.n	80079b0 <UART_SetConfig+0xa94>
 8007844:	03d09000 	.word	0x03d09000
 8007848:	003d0900 	.word	0x003d0900
 800784c:	08008ce4 	.word	0x08008ce4
 8007850:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007854:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007858:	2b20      	cmp	r3, #32
 800785a:	dc49      	bgt.n	80078f0 <UART_SetConfig+0x9d4>
 800785c:	2b00      	cmp	r3, #0
 800785e:	db7c      	blt.n	800795a <UART_SetConfig+0xa3e>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d87a      	bhi.n	800795a <UART_SetConfig+0xa3e>
 8007864:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <UART_SetConfig+0x950>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	080078f7 	.word	0x080078f7
 8007870:	080078ff 	.word	0x080078ff
 8007874:	0800795b 	.word	0x0800795b
 8007878:	0800795b 	.word	0x0800795b
 800787c:	08007907 	.word	0x08007907
 8007880:	0800795b 	.word	0x0800795b
 8007884:	0800795b 	.word	0x0800795b
 8007888:	0800795b 	.word	0x0800795b
 800788c:	08007917 	.word	0x08007917
 8007890:	0800795b 	.word	0x0800795b
 8007894:	0800795b 	.word	0x0800795b
 8007898:	0800795b 	.word	0x0800795b
 800789c:	0800795b 	.word	0x0800795b
 80078a0:	0800795b 	.word	0x0800795b
 80078a4:	0800795b 	.word	0x0800795b
 80078a8:	0800795b 	.word	0x0800795b
 80078ac:	08007927 	.word	0x08007927
 80078b0:	0800795b 	.word	0x0800795b
 80078b4:	0800795b 	.word	0x0800795b
 80078b8:	0800795b 	.word	0x0800795b
 80078bc:	0800795b 	.word	0x0800795b
 80078c0:	0800795b 	.word	0x0800795b
 80078c4:	0800795b 	.word	0x0800795b
 80078c8:	0800795b 	.word	0x0800795b
 80078cc:	0800795b 	.word	0x0800795b
 80078d0:	0800795b 	.word	0x0800795b
 80078d4:	0800795b 	.word	0x0800795b
 80078d8:	0800795b 	.word	0x0800795b
 80078dc:	0800795b 	.word	0x0800795b
 80078e0:	0800795b 	.word	0x0800795b
 80078e4:	0800795b 	.word	0x0800795b
 80078e8:	0800795b 	.word	0x0800795b
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d02e      	beq.n	8007952 <UART_SetConfig+0xa36>
 80078f4:	e031      	b.n	800795a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f6:	f7fc fcff 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80078fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078fc:	e033      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078fe:	f7fc fd11 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8007902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007904:	e02f      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fcc0 	bl	8006290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007914:	e027      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007916:	f107 0318 	add.w	r3, r7, #24
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fe0c 	bl	8006538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007924:	e01f      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007926:	4b2d      	ldr	r3, [pc, #180]	@ (80079dc <UART_SetConfig+0xac0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007932:	4b2a      	ldr	r3, [pc, #168]	@ (80079dc <UART_SetConfig+0xac0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	08db      	lsrs	r3, r3, #3
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	4a28      	ldr	r2, [pc, #160]	@ (80079e0 <UART_SetConfig+0xac4>)
 800793e:	fa22 f303 	lsr.w	r3, r2, r3
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007944:	e00f      	b.n	8007966 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007946:	4b26      	ldr	r3, [pc, #152]	@ (80079e0 <UART_SetConfig+0xac4>)
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794a:	e00c      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800794c:	4b25      	ldr	r3, [pc, #148]	@ (80079e4 <UART_SetConfig+0xac8>)
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007950:	e009      	b.n	8007966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007958:	e005      	b.n	8007966 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007964:	bf00      	nop
    }

    if (pclk != 0U)
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d021      	beq.n	80079b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	4a1d      	ldr	r2, [pc, #116]	@ (80079e8 <UART_SetConfig+0xacc>)
 8007972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007976:	461a      	mov	r2, r3
 8007978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797a:	fbb3 f2f2 	udiv	r2, r3, r2
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	441a      	add	r2, r3
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d909      	bls.n	80079aa <UART_SetConfig+0xa8e>
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799c:	d205      	bcs.n	80079aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e002      	b.n	80079b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3748      	adds	r7, #72	@ 0x48
 80079d4:	46bd      	mov	sp, r7
 80079d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
 80079e0:	03d09000 	.word	0x03d09000
 80079e4:	003d0900 	.word	0x003d0900
 80079e8:	08008ce4 	.word	0x08008ce4

080079ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aea:	d10a      	bne.n	8007b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
  }
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b098      	sub	sp, #96	@ 0x60
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b40:	f7f9 fc9e 	bl	8001480 <HAL_GetTick>
 8007b44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d12f      	bne.n	8007bb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f88e 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d022      	beq.n	8007bb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e6      	bne.n	8007b6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e063      	b.n	8007c7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d149      	bne.n	8007c56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f857 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d03c      	beq.n	8007c56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c2e:	61fa      	str	r2, [r7, #28]
 8007c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69b9      	ldr	r1, [r7, #24]
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e012      	b.n	8007c7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3758      	adds	r7, #88	@ 0x58
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c94:	e04f      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d04b      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c9e:	f7f9 fbef 	bl	8001480 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d302      	bcc.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e04e      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d037      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b80      	cmp	r3, #128	@ 0x80
 8007cca:	d034      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	d031      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d110      	bne.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f839 	bl	8007d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e029      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d10:	d111      	bne.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f81f 	bl	8007d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e00f      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d0a0      	beq.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b095      	sub	sp, #84	@ 0x54
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e6      	bne.n	8007d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <UART_EndRxTransfer+0xc8>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d118      	bne.n	8007e08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6979      	ldr	r1, [r7, #20]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	613b      	str	r3, [r7, #16]
   return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e1c:	bf00      	nop
 8007e1e:	3754      	adds	r7, #84	@ 0x54
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	effffffe 	.word	0xeffffffe

08007e2c <std>:
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	e9c0 3300 	strd	r3, r3, [r0]
 8007e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e3a:	6083      	str	r3, [r0, #8]
 8007e3c:	8181      	strh	r1, [r0, #12]
 8007e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e40:	81c2      	strh	r2, [r0, #14]
 8007e42:	6183      	str	r3, [r0, #24]
 8007e44:	4619      	mov	r1, r3
 8007e46:	2208      	movs	r2, #8
 8007e48:	305c      	adds	r0, #92	@ 0x5c
 8007e4a:	f000 f906 	bl	800805a <memset>
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <std+0x58>)
 8007e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <std+0x5c>)
 8007e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e56:	4b0d      	ldr	r3, [pc, #52]	@ (8007e8c <std+0x60>)
 8007e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <std+0x64>)
 8007e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <std+0x68>)
 8007e60:	6224      	str	r4, [r4, #32]
 8007e62:	429c      	cmp	r4, r3
 8007e64:	d006      	beq.n	8007e74 <std+0x48>
 8007e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e6a:	4294      	cmp	r4, r2
 8007e6c:	d002      	beq.n	8007e74 <std+0x48>
 8007e6e:	33d0      	adds	r3, #208	@ 0xd0
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d105      	bne.n	8007e80 <std+0x54>
 8007e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f000 b966 	b.w	800814c <__retarget_lock_init_recursive>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop
 8007e84:	08007fd5 	.word	0x08007fd5
 8007e88:	08007ff7 	.word	0x08007ff7
 8007e8c:	0800802f 	.word	0x0800802f
 8007e90:	08008053 	.word	0x08008053
 8007e94:	240001c4 	.word	0x240001c4

08007e98 <stdio_exit_handler>:
 8007e98:	4a02      	ldr	r2, [pc, #8]	@ (8007ea4 <stdio_exit_handler+0xc>)
 8007e9a:	4903      	ldr	r1, [pc, #12]	@ (8007ea8 <stdio_exit_handler+0x10>)
 8007e9c:	4803      	ldr	r0, [pc, #12]	@ (8007eac <stdio_exit_handler+0x14>)
 8007e9e:	f000 b869 	b.w	8007f74 <_fwalk_sglue>
 8007ea2:	bf00      	nop
 8007ea4:	2400002c 	.word	0x2400002c
 8007ea8:	080089ed 	.word	0x080089ed
 8007eac:	2400003c 	.word	0x2400003c

08007eb0 <cleanup_stdio>:
 8007eb0:	6841      	ldr	r1, [r0, #4]
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee4 <cleanup_stdio+0x34>)
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	d001      	beq.n	8007ec0 <cleanup_stdio+0x10>
 8007ebc:	f000 fd96 	bl	80089ec <_fflush_r>
 8007ec0:	68a1      	ldr	r1, [r4, #8]
 8007ec2:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <cleanup_stdio+0x38>)
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d002      	beq.n	8007ece <cleanup_stdio+0x1e>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fd8f 	bl	80089ec <_fflush_r>
 8007ece:	68e1      	ldr	r1, [r4, #12]
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <cleanup_stdio+0x3c>)
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	d004      	beq.n	8007ee0 <cleanup_stdio+0x30>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f000 bd86 	b.w	80089ec <_fflush_r>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	240001c4 	.word	0x240001c4
 8007ee8:	2400022c 	.word	0x2400022c
 8007eec:	24000294 	.word	0x24000294

08007ef0 <global_stdio_init.part.0>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <global_stdio_init.part.0+0x30>)
 8007ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8007f24 <global_stdio_init.part.0+0x34>)
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f28 <global_stdio_init.part.0+0x38>)
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	4620      	mov	r0, r4
 8007efc:	2200      	movs	r2, #0
 8007efe:	2104      	movs	r1, #4
 8007f00:	f7ff ff94 	bl	8007e2c <std>
 8007f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f08:	2201      	movs	r2, #1
 8007f0a:	2109      	movs	r1, #9
 8007f0c:	f7ff ff8e 	bl	8007e2c <std>
 8007f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f14:	2202      	movs	r2, #2
 8007f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1a:	2112      	movs	r1, #18
 8007f1c:	f7ff bf86 	b.w	8007e2c <std>
 8007f20:	240002fc 	.word	0x240002fc
 8007f24:	240001c4 	.word	0x240001c4
 8007f28:	08007e99 	.word	0x08007e99

08007f2c <__sfp_lock_acquire>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	@ (8007f34 <__sfp_lock_acquire+0x8>)
 8007f2e:	f000 b90e 	b.w	800814e <__retarget_lock_acquire_recursive>
 8007f32:	bf00      	nop
 8007f34:	24000305 	.word	0x24000305

08007f38 <__sfp_lock_release>:
 8007f38:	4801      	ldr	r0, [pc, #4]	@ (8007f40 <__sfp_lock_release+0x8>)
 8007f3a:	f000 b909 	b.w	8008150 <__retarget_lock_release_recursive>
 8007f3e:	bf00      	nop
 8007f40:	24000305 	.word	0x24000305

08007f44 <__sinit>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	4604      	mov	r4, r0
 8007f48:	f7ff fff0 	bl	8007f2c <__sfp_lock_acquire>
 8007f4c:	6a23      	ldr	r3, [r4, #32]
 8007f4e:	b11b      	cbz	r3, 8007f58 <__sinit+0x14>
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f54:	f7ff bff0 	b.w	8007f38 <__sfp_lock_release>
 8007f58:	4b04      	ldr	r3, [pc, #16]	@ (8007f6c <__sinit+0x28>)
 8007f5a:	6223      	str	r3, [r4, #32]
 8007f5c:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <__sinit+0x2c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1f5      	bne.n	8007f50 <__sinit+0xc>
 8007f64:	f7ff ffc4 	bl	8007ef0 <global_stdio_init.part.0>
 8007f68:	e7f2      	b.n	8007f50 <__sinit+0xc>
 8007f6a:	bf00      	nop
 8007f6c:	08007eb1 	.word	0x08007eb1
 8007f70:	240002fc 	.word	0x240002fc

08007f74 <_fwalk_sglue>:
 8007f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f78:	4607      	mov	r7, r0
 8007f7a:	4688      	mov	r8, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	2600      	movs	r6, #0
 8007f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f84:	f1b9 0901 	subs.w	r9, r9, #1
 8007f88:	d505      	bpl.n	8007f96 <_fwalk_sglue+0x22>
 8007f8a:	6824      	ldr	r4, [r4, #0]
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	d1f7      	bne.n	8007f80 <_fwalk_sglue+0xc>
 8007f90:	4630      	mov	r0, r6
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d907      	bls.n	8007fac <_fwalk_sglue+0x38>
 8007f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	d003      	beq.n	8007fac <_fwalk_sglue+0x38>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c0      	blx	r8
 8007faa:	4306      	orrs	r6, r0
 8007fac:	3568      	adds	r5, #104	@ 0x68
 8007fae:	e7e9      	b.n	8007f84 <_fwalk_sglue+0x10>

08007fb0 <iprintf>:
 8007fb0:	b40f      	push	{r0, r1, r2, r3}
 8007fb2:	b507      	push	{r0, r1, r2, lr}
 8007fb4:	4906      	ldr	r1, [pc, #24]	@ (8007fd0 <iprintf+0x20>)
 8007fb6:	ab04      	add	r3, sp, #16
 8007fb8:	6808      	ldr	r0, [r1, #0]
 8007fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbe:	6881      	ldr	r1, [r0, #8]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	f000 f9e9 	bl	8008398 <_vfiprintf_r>
 8007fc6:	b003      	add	sp, #12
 8007fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fcc:	b004      	add	sp, #16
 8007fce:	4770      	bx	lr
 8007fd0:	24000038 	.word	0x24000038

08007fd4 <__sread>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	f000 f868 	bl	80080b0 <_read_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	bfab      	itete	ge
 8007fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fe8:	181b      	addge	r3, r3, r0
 8007fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fee:	bfac      	ite	ge
 8007ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ff2:	81a3      	strhlt	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__swrite>:
 8007ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	898b      	ldrh	r3, [r1, #12]
 8007ffe:	05db      	lsls	r3, r3, #23
 8008000:	4605      	mov	r5, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4616      	mov	r6, r2
 8008006:	d505      	bpl.n	8008014 <__swrite+0x1e>
 8008008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800c:	2302      	movs	r3, #2
 800800e:	2200      	movs	r2, #0
 8008010:	f000 f83c 	bl	800808c <_lseek_r>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4628      	mov	r0, r5
 8008026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	f000 b853 	b.w	80080d4 <_write_r>

0800802e <__sseek>:
 800802e:	b510      	push	{r4, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008036:	f000 f829 	bl	800808c <_lseek_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	bf15      	itete	ne
 8008040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800804a:	81a3      	strheq	r3, [r4, #12]
 800804c:	bf18      	it	ne
 800804e:	81a3      	strhne	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__sclose>:
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 b809 	b.w	800806c <_close_r>

0800805a <memset>:
 800805a:	4402      	add	r2, r0
 800805c:	4603      	mov	r3, r0
 800805e:	4293      	cmp	r3, r2
 8008060:	d100      	bne.n	8008064 <memset+0xa>
 8008062:	4770      	bx	lr
 8008064:	f803 1b01 	strb.w	r1, [r3], #1
 8008068:	e7f9      	b.n	800805e <memset+0x4>
	...

0800806c <_close_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d06      	ldr	r5, [pc, #24]	@ (8008088 <_close_r+0x1c>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f8 fee5 	bl	8000e46 <_close>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_close_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_close_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	24000300 	.word	0x24000300

0800808c <_lseek_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d07      	ldr	r5, [pc, #28]	@ (80080ac <_lseek_r+0x20>)
 8008090:	4604      	mov	r4, r0
 8008092:	4608      	mov	r0, r1
 8008094:	4611      	mov	r1, r2
 8008096:	2200      	movs	r2, #0
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	f7f8 fefa 	bl	8000e94 <_lseek>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_lseek_r+0x1e>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_lseek_r+0x1e>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	24000300 	.word	0x24000300

080080b0 <_read_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	@ (80080d0 <_read_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f8 fe88 	bl	8000dd4 <_read>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_read_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_read_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	24000300 	.word	0x24000300

080080d4 <_write_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	@ (80080f4 <_write_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7f8 fe93 	bl	8000e0e <_write>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_write_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_write_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	24000300 	.word	0x24000300

080080f8 <__errno>:
 80080f8:	4b01      	ldr	r3, [pc, #4]	@ (8008100 <__errno+0x8>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	24000038 	.word	0x24000038

08008104 <__libc_init_array>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4d0d      	ldr	r5, [pc, #52]	@ (800813c <__libc_init_array+0x38>)
 8008108:	4c0d      	ldr	r4, [pc, #52]	@ (8008140 <__libc_init_array+0x3c>)
 800810a:	1b64      	subs	r4, r4, r5
 800810c:	10a4      	asrs	r4, r4, #2
 800810e:	2600      	movs	r6, #0
 8008110:	42a6      	cmp	r6, r4
 8008112:	d109      	bne.n	8008128 <__libc_init_array+0x24>
 8008114:	4d0b      	ldr	r5, [pc, #44]	@ (8008144 <__libc_init_array+0x40>)
 8008116:	4c0c      	ldr	r4, [pc, #48]	@ (8008148 <__libc_init_array+0x44>)
 8008118:	f000 fdb8 	bl	8008c8c <_init>
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	2600      	movs	r6, #0
 8008122:	42a6      	cmp	r6, r4
 8008124:	d105      	bne.n	8008132 <__libc_init_array+0x2e>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	f855 3b04 	ldr.w	r3, [r5], #4
 800812c:	4798      	blx	r3
 800812e:	3601      	adds	r6, #1
 8008130:	e7ee      	b.n	8008110 <__libc_init_array+0xc>
 8008132:	f855 3b04 	ldr.w	r3, [r5], #4
 8008136:	4798      	blx	r3
 8008138:	3601      	adds	r6, #1
 800813a:	e7f2      	b.n	8008122 <__libc_init_array+0x1e>
 800813c:	08008d38 	.word	0x08008d38
 8008140:	08008d38 	.word	0x08008d38
 8008144:	08008d38 	.word	0x08008d38
 8008148:	08008d3c 	.word	0x08008d3c

0800814c <__retarget_lock_init_recursive>:
 800814c:	4770      	bx	lr

0800814e <__retarget_lock_acquire_recursive>:
 800814e:	4770      	bx	lr

08008150 <__retarget_lock_release_recursive>:
 8008150:	4770      	bx	lr
	...

08008154 <_free_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4605      	mov	r5, r0
 8008158:	2900      	cmp	r1, #0
 800815a:	d041      	beq.n	80081e0 <_free_r+0x8c>
 800815c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008160:	1f0c      	subs	r4, r1, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	bfb8      	it	lt
 8008166:	18e4      	addlt	r4, r4, r3
 8008168:	f000 f8e0 	bl	800832c <__malloc_lock>
 800816c:	4a1d      	ldr	r2, [pc, #116]	@ (80081e4 <_free_r+0x90>)
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	b933      	cbnz	r3, 8008180 <_free_r+0x2c>
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	6014      	str	r4, [r2, #0]
 8008176:	4628      	mov	r0, r5
 8008178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800817c:	f000 b8dc 	b.w	8008338 <__malloc_unlock>
 8008180:	42a3      	cmp	r3, r4
 8008182:	d908      	bls.n	8008196 <_free_r+0x42>
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	1821      	adds	r1, r4, r0
 8008188:	428b      	cmp	r3, r1
 800818a:	bf01      	itttt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	1809      	addeq	r1, r1, r0
 8008192:	6021      	streq	r1, [r4, #0]
 8008194:	e7ed      	b.n	8008172 <_free_r+0x1e>
 8008196:	461a      	mov	r2, r3
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b10b      	cbz	r3, 80081a0 <_free_r+0x4c>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d9fa      	bls.n	8008196 <_free_r+0x42>
 80081a0:	6811      	ldr	r1, [r2, #0]
 80081a2:	1850      	adds	r0, r2, r1
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d10b      	bne.n	80081c0 <_free_r+0x6c>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	4401      	add	r1, r0
 80081ac:	1850      	adds	r0, r2, r1
 80081ae:	4283      	cmp	r3, r0
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	d1e0      	bne.n	8008176 <_free_r+0x22>
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	6053      	str	r3, [r2, #4]
 80081ba:	4408      	add	r0, r1
 80081bc:	6010      	str	r0, [r2, #0]
 80081be:	e7da      	b.n	8008176 <_free_r+0x22>
 80081c0:	d902      	bls.n	80081c8 <_free_r+0x74>
 80081c2:	230c      	movs	r3, #12
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	e7d6      	b.n	8008176 <_free_r+0x22>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	1821      	adds	r1, r4, r0
 80081cc:	428b      	cmp	r3, r1
 80081ce:	bf04      	itt	eq
 80081d0:	6819      	ldreq	r1, [r3, #0]
 80081d2:	685b      	ldreq	r3, [r3, #4]
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	bf04      	itt	eq
 80081d8:	1809      	addeq	r1, r1, r0
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	6054      	str	r4, [r2, #4]
 80081de:	e7ca      	b.n	8008176 <_free_r+0x22>
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop
 80081e4:	2400030c 	.word	0x2400030c

080081e8 <sbrk_aligned>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008228 <sbrk_aligned+0x40>)
 80081ec:	460c      	mov	r4, r1
 80081ee:	6831      	ldr	r1, [r6, #0]
 80081f0:	4605      	mov	r5, r0
 80081f2:	b911      	cbnz	r1, 80081fa <sbrk_aligned+0x12>
 80081f4:	f000 fcb6 	bl	8008b64 <_sbrk_r>
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 fcb1 	bl	8008b64 <_sbrk_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d103      	bne.n	800820e <sbrk_aligned+0x26>
 8008206:	f04f 34ff 	mov.w	r4, #4294967295
 800820a:	4620      	mov	r0, r4
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	f024 0403 	bic.w	r4, r4, #3
 8008214:	42a0      	cmp	r0, r4
 8008216:	d0f8      	beq.n	800820a <sbrk_aligned+0x22>
 8008218:	1a21      	subs	r1, r4, r0
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fca2 	bl	8008b64 <_sbrk_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d1f2      	bne.n	800820a <sbrk_aligned+0x22>
 8008224:	e7ef      	b.n	8008206 <sbrk_aligned+0x1e>
 8008226:	bf00      	nop
 8008228:	24000308 	.word	0x24000308

0800822c <_malloc_r>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	1ccd      	adds	r5, r1, #3
 8008232:	f025 0503 	bic.w	r5, r5, #3
 8008236:	3508      	adds	r5, #8
 8008238:	2d0c      	cmp	r5, #12
 800823a:	bf38      	it	cc
 800823c:	250c      	movcc	r5, #12
 800823e:	2d00      	cmp	r5, #0
 8008240:	4606      	mov	r6, r0
 8008242:	db01      	blt.n	8008248 <_malloc_r+0x1c>
 8008244:	42a9      	cmp	r1, r5
 8008246:	d904      	bls.n	8008252 <_malloc_r+0x26>
 8008248:	230c      	movs	r3, #12
 800824a:	6033      	str	r3, [r6, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008252:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008328 <_malloc_r+0xfc>
 8008256:	f000 f869 	bl	800832c <__malloc_lock>
 800825a:	f8d8 3000 	ldr.w	r3, [r8]
 800825e:	461c      	mov	r4, r3
 8008260:	bb44      	cbnz	r4, 80082b4 <_malloc_r+0x88>
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff ffbf 	bl	80081e8 <sbrk_aligned>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	4604      	mov	r4, r0
 800826e:	d158      	bne.n	8008322 <_malloc_r+0xf6>
 8008270:	f8d8 4000 	ldr.w	r4, [r8]
 8008274:	4627      	mov	r7, r4
 8008276:	2f00      	cmp	r7, #0
 8008278:	d143      	bne.n	8008302 <_malloc_r+0xd6>
 800827a:	2c00      	cmp	r4, #0
 800827c:	d04b      	beq.n	8008316 <_malloc_r+0xea>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	4639      	mov	r1, r7
 8008282:	4630      	mov	r0, r6
 8008284:	eb04 0903 	add.w	r9, r4, r3
 8008288:	f000 fc6c 	bl	8008b64 <_sbrk_r>
 800828c:	4581      	cmp	r9, r0
 800828e:	d142      	bne.n	8008316 <_malloc_r+0xea>
 8008290:	6821      	ldr	r1, [r4, #0]
 8008292:	1a6d      	subs	r5, r5, r1
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f7ff ffa6 	bl	80081e8 <sbrk_aligned>
 800829c:	3001      	adds	r0, #1
 800829e:	d03a      	beq.n	8008316 <_malloc_r+0xea>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	442b      	add	r3, r5
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	f8d8 3000 	ldr.w	r3, [r8]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	bb62      	cbnz	r2, 8008308 <_malloc_r+0xdc>
 80082ae:	f8c8 7000 	str.w	r7, [r8]
 80082b2:	e00f      	b.n	80082d4 <_malloc_r+0xa8>
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	1b52      	subs	r2, r2, r5
 80082b8:	d420      	bmi.n	80082fc <_malloc_r+0xd0>
 80082ba:	2a0b      	cmp	r2, #11
 80082bc:	d917      	bls.n	80082ee <_malloc_r+0xc2>
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	6025      	str	r5, [r4, #0]
 80082c4:	bf18      	it	ne
 80082c6:	6059      	strne	r1, [r3, #4]
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	bf08      	it	eq
 80082cc:	f8c8 1000 	streq.w	r1, [r8]
 80082d0:	5162      	str	r2, [r4, r5]
 80082d2:	604b      	str	r3, [r1, #4]
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f82f 	bl	8008338 <__malloc_unlock>
 80082da:	f104 000b 	add.w	r0, r4, #11
 80082de:	1d23      	adds	r3, r4, #4
 80082e0:	f020 0007 	bic.w	r0, r0, #7
 80082e4:	1ac2      	subs	r2, r0, r3
 80082e6:	bf1c      	itt	ne
 80082e8:	1a1b      	subne	r3, r3, r0
 80082ea:	50a3      	strne	r3, [r4, r2]
 80082ec:	e7af      	b.n	800824e <_malloc_r+0x22>
 80082ee:	6862      	ldr	r2, [r4, #4]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	bf0c      	ite	eq
 80082f4:	f8c8 2000 	streq.w	r2, [r8]
 80082f8:	605a      	strne	r2, [r3, #4]
 80082fa:	e7eb      	b.n	80082d4 <_malloc_r+0xa8>
 80082fc:	4623      	mov	r3, r4
 80082fe:	6864      	ldr	r4, [r4, #4]
 8008300:	e7ae      	b.n	8008260 <_malloc_r+0x34>
 8008302:	463c      	mov	r4, r7
 8008304:	687f      	ldr	r7, [r7, #4]
 8008306:	e7b6      	b.n	8008276 <_malloc_r+0x4a>
 8008308:	461a      	mov	r2, r3
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	42a3      	cmp	r3, r4
 800830e:	d1fb      	bne.n	8008308 <_malloc_r+0xdc>
 8008310:	2300      	movs	r3, #0
 8008312:	6053      	str	r3, [r2, #4]
 8008314:	e7de      	b.n	80082d4 <_malloc_r+0xa8>
 8008316:	230c      	movs	r3, #12
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f80c 	bl	8008338 <__malloc_unlock>
 8008320:	e794      	b.n	800824c <_malloc_r+0x20>
 8008322:	6005      	str	r5, [r0, #0]
 8008324:	e7d6      	b.n	80082d4 <_malloc_r+0xa8>
 8008326:	bf00      	nop
 8008328:	2400030c 	.word	0x2400030c

0800832c <__malloc_lock>:
 800832c:	4801      	ldr	r0, [pc, #4]	@ (8008334 <__malloc_lock+0x8>)
 800832e:	f7ff bf0e 	b.w	800814e <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	24000304 	.word	0x24000304

08008338 <__malloc_unlock>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__malloc_unlock+0x8>)
 800833a:	f7ff bf09 	b.w	8008150 <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	24000304 	.word	0x24000304

08008344 <__sfputc_r>:
 8008344:	6893      	ldr	r3, [r2, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	b410      	push	{r4}
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	da08      	bge.n	8008362 <__sfputc_r+0x1e>
 8008350:	6994      	ldr	r4, [r2, #24]
 8008352:	42a3      	cmp	r3, r4
 8008354:	db01      	blt.n	800835a <__sfputc_r+0x16>
 8008356:	290a      	cmp	r1, #10
 8008358:	d103      	bne.n	8008362 <__sfputc_r+0x1e>
 800835a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835e:	f000 bb6d 	b.w	8008a3c <__swbuf_r>
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	1c58      	adds	r0, r3, #1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	7019      	strb	r1, [r3, #0]
 800836a:	4608      	mov	r0, r1
 800836c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008370:	4770      	bx	lr

08008372 <__sfputs_r>:
 8008372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	4614      	mov	r4, r2
 800837a:	18d5      	adds	r5, r2, r3
 800837c:	42ac      	cmp	r4, r5
 800837e:	d101      	bne.n	8008384 <__sfputs_r+0x12>
 8008380:	2000      	movs	r0, #0
 8008382:	e007      	b.n	8008394 <__sfputs_r+0x22>
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	463a      	mov	r2, r7
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffda 	bl	8008344 <__sfputc_r>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d1f3      	bne.n	800837c <__sfputs_r+0xa>
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008398 <_vfiprintf_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	460d      	mov	r5, r1
 800839e:	b09d      	sub	sp, #116	@ 0x74
 80083a0:	4614      	mov	r4, r2
 80083a2:	4698      	mov	r8, r3
 80083a4:	4606      	mov	r6, r0
 80083a6:	b118      	cbz	r0, 80083b0 <_vfiprintf_r+0x18>
 80083a8:	6a03      	ldr	r3, [r0, #32]
 80083aa:	b90b      	cbnz	r3, 80083b0 <_vfiprintf_r+0x18>
 80083ac:	f7ff fdca 	bl	8007f44 <__sinit>
 80083b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b2:	07d9      	lsls	r1, r3, #31
 80083b4:	d405      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	059a      	lsls	r2, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083be:	f7ff fec6 	bl	800814e <__retarget_lock_acquire_recursive>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	071b      	lsls	r3, r3, #28
 80083c6:	d501      	bpl.n	80083cc <_vfiprintf_r+0x34>
 80083c8:	692b      	ldr	r3, [r5, #16]
 80083ca:	b99b      	cbnz	r3, 80083f4 <_vfiprintf_r+0x5c>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 fb72 	bl	8008ab8 <__swsetup_r>
 80083d4:	b170      	cbz	r0, 80083f4 <_vfiprintf_r+0x5c>
 80083d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d8:	07dc      	lsls	r4, r3, #31
 80083da:	d504      	bpl.n	80083e6 <_vfiprintf_r+0x4e>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b01d      	add	sp, #116	@ 0x74
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	0598      	lsls	r0, r3, #22
 80083ea:	d4f7      	bmi.n	80083dc <_vfiprintf_r+0x44>
 80083ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ee:	f7ff feaf 	bl	8008150 <__retarget_lock_release_recursive>
 80083f2:	e7f3      	b.n	80083dc <_vfiprintf_r+0x44>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f8:	2320      	movs	r3, #32
 80083fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008402:	2330      	movs	r3, #48	@ 0x30
 8008404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085b4 <_vfiprintf_r+0x21c>
 8008408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800840c:	f04f 0901 	mov.w	r9, #1
 8008410:	4623      	mov	r3, r4
 8008412:	469a      	mov	sl, r3
 8008414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008418:	b10a      	cbz	r2, 800841e <_vfiprintf_r+0x86>
 800841a:	2a25      	cmp	r2, #37	@ 0x25
 800841c:	d1f9      	bne.n	8008412 <_vfiprintf_r+0x7a>
 800841e:	ebba 0b04 	subs.w	fp, sl, r4
 8008422:	d00b      	beq.n	800843c <_vfiprintf_r+0xa4>
 8008424:	465b      	mov	r3, fp
 8008426:	4622      	mov	r2, r4
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa1 	bl	8008372 <__sfputs_r>
 8008430:	3001      	adds	r0, #1
 8008432:	f000 80a7 	beq.w	8008584 <_vfiprintf_r+0x1ec>
 8008436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008438:	445a      	add	r2, fp
 800843a:	9209      	str	r2, [sp, #36]	@ 0x24
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 809f 	beq.w	8008584 <_vfiprintf_r+0x1ec>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800845c:	931a      	str	r3, [sp, #104]	@ 0x68
 800845e:	4654      	mov	r4, sl
 8008460:	2205      	movs	r2, #5
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4853      	ldr	r0, [pc, #332]	@ (80085b4 <_vfiprintf_r+0x21c>)
 8008468:	f7f7 ff3a 	bl	80002e0 <memchr>
 800846c:	9a04      	ldr	r2, [sp, #16]
 800846e:	b9d8      	cbnz	r0, 80084a8 <_vfiprintf_r+0x110>
 8008470:	06d1      	lsls	r1, r2, #27
 8008472:	bf44      	itt	mi
 8008474:	2320      	movmi	r3, #32
 8008476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847a:	0713      	lsls	r3, r2, #28
 800847c:	bf44      	itt	mi
 800847e:	232b      	movmi	r3, #43	@ 0x2b
 8008480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008484:	f89a 3000 	ldrb.w	r3, [sl]
 8008488:	2b2a      	cmp	r3, #42	@ 0x2a
 800848a:	d015      	beq.n	80084b8 <_vfiprintf_r+0x120>
 800848c:	9a07      	ldr	r2, [sp, #28]
 800848e:	4654      	mov	r4, sl
 8008490:	2000      	movs	r0, #0
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4621      	mov	r1, r4
 8008498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849c:	3b30      	subs	r3, #48	@ 0x30
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d94b      	bls.n	800853a <_vfiprintf_r+0x1a2>
 80084a2:	b1b0      	cbz	r0, 80084d2 <_vfiprintf_r+0x13a>
 80084a4:	9207      	str	r2, [sp, #28]
 80084a6:	e014      	b.n	80084d2 <_vfiprintf_r+0x13a>
 80084a8:	eba0 0308 	sub.w	r3, r0, r8
 80084ac:	fa09 f303 	lsl.w	r3, r9, r3
 80084b0:	4313      	orrs	r3, r2
 80084b2:	9304      	str	r3, [sp, #16]
 80084b4:	46a2      	mov	sl, r4
 80084b6:	e7d2      	b.n	800845e <_vfiprintf_r+0xc6>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d19      	adds	r1, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9103      	str	r1, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfbb      	ittet	lt
 80084c4:	425b      	neglt	r3, r3
 80084c6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ca:	9307      	strge	r3, [sp, #28]
 80084cc:	9307      	strlt	r3, [sp, #28]
 80084ce:	bfb8      	it	lt
 80084d0:	9204      	strlt	r2, [sp, #16]
 80084d2:	7823      	ldrb	r3, [r4, #0]
 80084d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d6:	d10a      	bne.n	80084ee <_vfiprintf_r+0x156>
 80084d8:	7863      	ldrb	r3, [r4, #1]
 80084da:	2b2a      	cmp	r3, #42	@ 0x2a
 80084dc:	d132      	bne.n	8008544 <_vfiprintf_r+0x1ac>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9203      	str	r2, [sp, #12]
 80084e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ea:	3402      	adds	r4, #2
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085c4 <_vfiprintf_r+0x22c>
 80084f2:	7821      	ldrb	r1, [r4, #0]
 80084f4:	2203      	movs	r2, #3
 80084f6:	4650      	mov	r0, sl
 80084f8:	f7f7 fef2 	bl	80002e0 <memchr>
 80084fc:	b138      	cbz	r0, 800850e <_vfiprintf_r+0x176>
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	eba0 000a 	sub.w	r0, r0, sl
 8008504:	2240      	movs	r2, #64	@ 0x40
 8008506:	4082      	lsls	r2, r0
 8008508:	4313      	orrs	r3, r2
 800850a:	3401      	adds	r4, #1
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008512:	4829      	ldr	r0, [pc, #164]	@ (80085b8 <_vfiprintf_r+0x220>)
 8008514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008518:	2206      	movs	r2, #6
 800851a:	f7f7 fee1 	bl	80002e0 <memchr>
 800851e:	2800      	cmp	r0, #0
 8008520:	d03f      	beq.n	80085a2 <_vfiprintf_r+0x20a>
 8008522:	4b26      	ldr	r3, [pc, #152]	@ (80085bc <_vfiprintf_r+0x224>)
 8008524:	bb1b      	cbnz	r3, 800856e <_vfiprintf_r+0x1d6>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	3307      	adds	r3, #7
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	3308      	adds	r3, #8
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008534:	443b      	add	r3, r7
 8008536:	9309      	str	r3, [sp, #36]	@ 0x24
 8008538:	e76a      	b.n	8008410 <_vfiprintf_r+0x78>
 800853a:	fb0c 3202 	mla	r2, ip, r2, r3
 800853e:	460c      	mov	r4, r1
 8008540:	2001      	movs	r0, #1
 8008542:	e7a8      	b.n	8008496 <_vfiprintf_r+0xfe>
 8008544:	2300      	movs	r3, #0
 8008546:	3401      	adds	r4, #1
 8008548:	9305      	str	r3, [sp, #20]
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 0c0a 	mov.w	ip, #10
 8008550:	4620      	mov	r0, r4
 8008552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008556:	3a30      	subs	r2, #48	@ 0x30
 8008558:	2a09      	cmp	r2, #9
 800855a:	d903      	bls.n	8008564 <_vfiprintf_r+0x1cc>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0c6      	beq.n	80084ee <_vfiprintf_r+0x156>
 8008560:	9105      	str	r1, [sp, #20]
 8008562:	e7c4      	b.n	80084ee <_vfiprintf_r+0x156>
 8008564:	fb0c 2101 	mla	r1, ip, r1, r2
 8008568:	4604      	mov	r4, r0
 800856a:	2301      	movs	r3, #1
 800856c:	e7f0      	b.n	8008550 <_vfiprintf_r+0x1b8>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <_vfiprintf_r+0x228>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4630      	mov	r0, r6
 800857a:	f3af 8000 	nop.w
 800857e:	4607      	mov	r7, r0
 8008580:	1c78      	adds	r0, r7, #1
 8008582:	d1d6      	bne.n	8008532 <_vfiprintf_r+0x19a>
 8008584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008586:	07d9      	lsls	r1, r3, #31
 8008588:	d405      	bmi.n	8008596 <_vfiprintf_r+0x1fe>
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	059a      	lsls	r2, r3, #22
 800858e:	d402      	bmi.n	8008596 <_vfiprintf_r+0x1fe>
 8008590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008592:	f7ff fddd 	bl	8008150 <__retarget_lock_release_recursive>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	065b      	lsls	r3, r3, #25
 800859a:	f53f af1f 	bmi.w	80083dc <_vfiprintf_r+0x44>
 800859e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085a0:	e71e      	b.n	80083e0 <_vfiprintf_r+0x48>
 80085a2:	ab03      	add	r3, sp, #12
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	462a      	mov	r2, r5
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <_vfiprintf_r+0x228>)
 80085aa:	a904      	add	r1, sp, #16
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 f879 	bl	80086a4 <_printf_i>
 80085b2:	e7e4      	b.n	800857e <_vfiprintf_r+0x1e6>
 80085b4:	08008cfc 	.word	0x08008cfc
 80085b8:	08008d06 	.word	0x08008d06
 80085bc:	00000000 	.word	0x00000000
 80085c0:	08008373 	.word	0x08008373
 80085c4:	08008d02 	.word	0x08008d02

080085c8 <_printf_common>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	4616      	mov	r6, r2
 80085ce:	4698      	mov	r8, r3
 80085d0:	688a      	ldr	r2, [r1, #8]
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085e4:	4607      	mov	r7, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b10a      	cbz	r2, 80085ee <_printf_common+0x26>
 80085ea:	3301      	adds	r3, #1
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	0699      	lsls	r1, r3, #26
 80085f2:	bf42      	ittt	mi
 80085f4:	6833      	ldrmi	r3, [r6, #0]
 80085f6:	3302      	addmi	r3, #2
 80085f8:	6033      	strmi	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	f015 0506 	ands.w	r5, r5, #6
 8008600:	d106      	bne.n	8008610 <_printf_common+0x48>
 8008602:	f104 0a19 	add.w	sl, r4, #25
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ab      	cmp	r3, r5
 800860e:	dc26      	bgt.n	800865e <_printf_common+0x96>
 8008610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	3b00      	subs	r3, #0
 8008618:	bf18      	it	ne
 800861a:	2301      	movne	r3, #1
 800861c:	0692      	lsls	r2, r2, #26
 800861e:	d42b      	bmi.n	8008678 <_printf_common+0xb0>
 8008620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008624:	4641      	mov	r1, r8
 8008626:	4638      	mov	r0, r7
 8008628:	47c8      	blx	r9
 800862a:	3001      	adds	r0, #1
 800862c:	d01e      	beq.n	800866c <_printf_common+0xa4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	f003 0306 	and.w	r3, r3, #6
 8008636:	2b04      	cmp	r3, #4
 8008638:	bf02      	ittt	eq
 800863a:	68e5      	ldreq	r5, [r4, #12]
 800863c:	6833      	ldreq	r3, [r6, #0]
 800863e:	1aed      	subeq	r5, r5, r3
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	bf0c      	ite	eq
 8008644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008648:	2500      	movne	r5, #0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfc4      	itt	gt
 800864e:	1a9b      	subgt	r3, r3, r2
 8008650:	18ed      	addgt	r5, r5, r3
 8008652:	2600      	movs	r6, #0
 8008654:	341a      	adds	r4, #26
 8008656:	42b5      	cmp	r5, r6
 8008658:	d11a      	bne.n	8008690 <_printf_common+0xc8>
 800865a:	2000      	movs	r0, #0
 800865c:	e008      	b.n	8008670 <_printf_common+0xa8>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4641      	mov	r1, r8
 8008664:	4638      	mov	r0, r7
 8008666:	47c8      	blx	r9
 8008668:	3001      	adds	r0, #1
 800866a:	d103      	bne.n	8008674 <_printf_common+0xac>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	3501      	adds	r5, #1
 8008676:	e7c6      	b.n	8008606 <_printf_common+0x3e>
 8008678:	18e1      	adds	r1, r4, r3
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	2030      	movs	r0, #48	@ 0x30
 800867e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008682:	4422      	add	r2, r4
 8008684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800868c:	3302      	adds	r3, #2
 800868e:	e7c7      	b.n	8008620 <_printf_common+0x58>
 8008690:	2301      	movs	r3, #1
 8008692:	4622      	mov	r2, r4
 8008694:	4641      	mov	r1, r8
 8008696:	4638      	mov	r0, r7
 8008698:	47c8      	blx	r9
 800869a:	3001      	adds	r0, #1
 800869c:	d0e6      	beq.n	800866c <_printf_common+0xa4>
 800869e:	3601      	adds	r6, #1
 80086a0:	e7d9      	b.n	8008656 <_printf_common+0x8e>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	7e0f      	ldrb	r7, [r1, #24]
 80086aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086ac:	2f78      	cmp	r7, #120	@ 0x78
 80086ae:	4691      	mov	r9, r2
 80086b0:	4680      	mov	r8, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	469a      	mov	sl, r3
 80086b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ba:	d807      	bhi.n	80086cc <_printf_i+0x28>
 80086bc:	2f62      	cmp	r7, #98	@ 0x62
 80086be:	d80a      	bhi.n	80086d6 <_printf_i+0x32>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f000 80d2 	beq.w	800886a <_printf_i+0x1c6>
 80086c6:	2f58      	cmp	r7, #88	@ 0x58
 80086c8:	f000 80b9 	beq.w	800883e <_printf_i+0x19a>
 80086cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086d4:	e03a      	b.n	800874c <_printf_i+0xa8>
 80086d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086da:	2b15      	cmp	r3, #21
 80086dc:	d8f6      	bhi.n	80086cc <_printf_i+0x28>
 80086de:	a101      	add	r1, pc, #4	@ (adr r1, 80086e4 <_printf_i+0x40>)
 80086e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080086cd 	.word	0x080086cd
 80086f0:	080086cd 	.word	0x080086cd
 80086f4:	080086cd 	.word	0x080086cd
 80086f8:	080086cd 	.word	0x080086cd
 80086fc:	08008751 	.word	0x08008751
 8008700:	080086cd 	.word	0x080086cd
 8008704:	080086cd 	.word	0x080086cd
 8008708:	080086cd 	.word	0x080086cd
 800870c:	080086cd 	.word	0x080086cd
 8008710:	08008851 	.word	0x08008851
 8008714:	0800877b 	.word	0x0800877b
 8008718:	0800880b 	.word	0x0800880b
 800871c:	080086cd 	.word	0x080086cd
 8008720:	080086cd 	.word	0x080086cd
 8008724:	08008873 	.word	0x08008873
 8008728:	080086cd 	.word	0x080086cd
 800872c:	0800877b 	.word	0x0800877b
 8008730:	080086cd 	.word	0x080086cd
 8008734:	080086cd 	.word	0x080086cd
 8008738:	08008813 	.word	0x08008813
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6032      	str	r2, [r6, #0]
 8008744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800874c:	2301      	movs	r3, #1
 800874e:	e09d      	b.n	800888c <_printf_i+0x1e8>
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6031      	str	r1, [r6, #0]
 8008758:	0606      	lsls	r6, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xbc>
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	e003      	b.n	8008768 <_printf_i+0xc4>
 8008760:	0645      	lsls	r5, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xb8>
 8008764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008768:	2d00      	cmp	r5, #0
 800876a:	da03      	bge.n	8008774 <_printf_i+0xd0>
 800876c:	232d      	movs	r3, #45	@ 0x2d
 800876e:	426d      	negs	r5, r5
 8008770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008774:	4859      	ldr	r0, [pc, #356]	@ (80088dc <_printf_i+0x238>)
 8008776:	230a      	movs	r3, #10
 8008778:	e011      	b.n	800879e <_printf_i+0xfa>
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	0608      	lsls	r0, r1, #24
 8008780:	f853 5b04 	ldr.w	r5, [r3], #4
 8008784:	d402      	bmi.n	800878c <_printf_i+0xe8>
 8008786:	0649      	lsls	r1, r1, #25
 8008788:	bf48      	it	mi
 800878a:	b2ad      	uxthmi	r5, r5
 800878c:	2f6f      	cmp	r7, #111	@ 0x6f
 800878e:	4853      	ldr	r0, [pc, #332]	@ (80088dc <_printf_i+0x238>)
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	bf14      	ite	ne
 8008794:	230a      	movne	r3, #10
 8008796:	2308      	moveq	r3, #8
 8008798:	2100      	movs	r1, #0
 800879a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800879e:	6866      	ldr	r6, [r4, #4]
 80087a0:	60a6      	str	r6, [r4, #8]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	bfa2      	ittt	ge
 80087a6:	6821      	ldrge	r1, [r4, #0]
 80087a8:	f021 0104 	bicge.w	r1, r1, #4
 80087ac:	6021      	strge	r1, [r4, #0]
 80087ae:	b90d      	cbnz	r5, 80087b4 <_printf_i+0x110>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d04b      	beq.n	800884c <_printf_i+0x1a8>
 80087b4:	4616      	mov	r6, r2
 80087b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ba:	fb03 5711 	mls	r7, r3, r1, r5
 80087be:	5dc7      	ldrb	r7, [r0, r7]
 80087c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087c4:	462f      	mov	r7, r5
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	460d      	mov	r5, r1
 80087ca:	d9f4      	bls.n	80087b6 <_printf_i+0x112>
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d10b      	bne.n	80087e8 <_printf_i+0x144>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07df      	lsls	r7, r3, #31
 80087d4:	d508      	bpl.n	80087e8 <_printf_i+0x144>
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6861      	ldr	r1, [r4, #4]
 80087da:	4299      	cmp	r1, r3
 80087dc:	bfde      	ittt	le
 80087de:	2330      	movle	r3, #48	@ 0x30
 80087e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087e8:	1b92      	subs	r2, r2, r6
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	f8cd a000 	str.w	sl, [sp]
 80087f0:	464b      	mov	r3, r9
 80087f2:	aa03      	add	r2, sp, #12
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fee6 	bl	80085c8 <_printf_common>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d14a      	bne.n	8008896 <_printf_i+0x1f2>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b004      	add	sp, #16
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	4833      	ldr	r0, [pc, #204]	@ (80088e0 <_printf_i+0x23c>)
 8008814:	2778      	movs	r7, #120	@ 0x78
 8008816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6831      	ldr	r1, [r6, #0]
 800881e:	061f      	lsls	r7, r3, #24
 8008820:	f851 5b04 	ldr.w	r5, [r1], #4
 8008824:	d402      	bmi.n	800882c <_printf_i+0x188>
 8008826:	065f      	lsls	r7, r3, #25
 8008828:	bf48      	it	mi
 800882a:	b2ad      	uxthmi	r5, r5
 800882c:	6031      	str	r1, [r6, #0]
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	bf44      	itt	mi
 8008832:	f043 0320 	orrmi.w	r3, r3, #32
 8008836:	6023      	strmi	r3, [r4, #0]
 8008838:	b11d      	cbz	r5, 8008842 <_printf_i+0x19e>
 800883a:	2310      	movs	r3, #16
 800883c:	e7ac      	b.n	8008798 <_printf_i+0xf4>
 800883e:	4827      	ldr	r0, [pc, #156]	@ (80088dc <_printf_i+0x238>)
 8008840:	e7e9      	b.n	8008816 <_printf_i+0x172>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f023 0320 	bic.w	r3, r3, #32
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	e7f6      	b.n	800883a <_printf_i+0x196>
 800884c:	4616      	mov	r6, r2
 800884e:	e7bd      	b.n	80087cc <_printf_i+0x128>
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6030      	str	r0, [r6, #0]
 800885a:	062e      	lsls	r6, r5, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1c0>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1c6>
 8008864:	0668      	lsls	r0, r5, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1bc>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4616      	mov	r6, r2
 8008870:	e7bc      	b.n	80087ec <_printf_i+0x148>
 8008872:	6833      	ldr	r3, [r6, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	6032      	str	r2, [r6, #0]
 8008878:	681e      	ldr	r6, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4630      	mov	r0, r6
 8008880:	f7f7 fd2e 	bl	80002e0 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1e6>
 8008886:	1b80      	subs	r0, r0, r6
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008894:	e7aa      	b.n	80087ec <_printf_i+0x148>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	4632      	mov	r2, r6
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ad      	beq.n	8008800 <_printf_i+0x15c>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x22e>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a6      	b.n	8008804 <_printf_i+0x160>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09d      	beq.n	8008800 <_printf_i+0x15c>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x212>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x206>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x222>
 80088da:	bf00      	nop
 80088dc:	08008d0d 	.word	0x08008d0d
 80088e0:	08008d1e 	.word	0x08008d1e

080088e4 <__sflush_r>:
 80088e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	0716      	lsls	r6, r2, #28
 80088ee:	4605      	mov	r5, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	d454      	bmi.n	800899e <__sflush_r+0xba>
 80088f4:	684b      	ldr	r3, [r1, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc02      	bgt.n	8008900 <__sflush_r+0x1c>
 80088fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd48      	ble.n	8008992 <__sflush_r+0xae>
 8008900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008902:	2e00      	cmp	r6, #0
 8008904:	d045      	beq.n	8008992 <__sflush_r+0xae>
 8008906:	2300      	movs	r3, #0
 8008908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800890c:	682f      	ldr	r7, [r5, #0]
 800890e:	6a21      	ldr	r1, [r4, #32]
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	d030      	beq.n	8008976 <__sflush_r+0x92>
 8008914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	0759      	lsls	r1, r3, #29
 800891a:	d505      	bpl.n	8008928 <__sflush_r+0x44>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008922:	b10b      	cbz	r3, 8008928 <__sflush_r+0x44>
 8008924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008926:	1ad2      	subs	r2, r2, r3
 8008928:	2300      	movs	r3, #0
 800892a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800892c:	6a21      	ldr	r1, [r4, #32]
 800892e:	4628      	mov	r0, r5
 8008930:	47b0      	blx	r6
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	d106      	bne.n	8008946 <__sflush_r+0x62>
 8008938:	6829      	ldr	r1, [r5, #0]
 800893a:	291d      	cmp	r1, #29
 800893c:	d82b      	bhi.n	8008996 <__sflush_r+0xb2>
 800893e:	4a2a      	ldr	r2, [pc, #168]	@ (80089e8 <__sflush_r+0x104>)
 8008940:	410a      	asrs	r2, r1
 8008942:	07d6      	lsls	r6, r2, #31
 8008944:	d427      	bmi.n	8008996 <__sflush_r+0xb2>
 8008946:	2200      	movs	r2, #0
 8008948:	6062      	str	r2, [r4, #4]
 800894a:	04d9      	lsls	r1, r3, #19
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	d504      	bpl.n	800895c <__sflush_r+0x78>
 8008952:	1c42      	adds	r2, r0, #1
 8008954:	d101      	bne.n	800895a <__sflush_r+0x76>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b903      	cbnz	r3, 800895c <__sflush_r+0x78>
 800895a:	6560      	str	r0, [r4, #84]	@ 0x54
 800895c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895e:	602f      	str	r7, [r5, #0]
 8008960:	b1b9      	cbz	r1, 8008992 <__sflush_r+0xae>
 8008962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008966:	4299      	cmp	r1, r3
 8008968:	d002      	beq.n	8008970 <__sflush_r+0x8c>
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fbf2 	bl	8008154 <_free_r>
 8008970:	2300      	movs	r3, #0
 8008972:	6363      	str	r3, [r4, #52]	@ 0x34
 8008974:	e00d      	b.n	8008992 <__sflush_r+0xae>
 8008976:	2301      	movs	r3, #1
 8008978:	4628      	mov	r0, r5
 800897a:	47b0      	blx	r6
 800897c:	4602      	mov	r2, r0
 800897e:	1c50      	adds	r0, r2, #1
 8008980:	d1c9      	bne.n	8008916 <__sflush_r+0x32>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0c6      	beq.n	8008916 <__sflush_r+0x32>
 8008988:	2b1d      	cmp	r3, #29
 800898a:	d001      	beq.n	8008990 <__sflush_r+0xac>
 800898c:	2b16      	cmp	r3, #22
 800898e:	d11e      	bne.n	80089ce <__sflush_r+0xea>
 8008990:	602f      	str	r7, [r5, #0]
 8008992:	2000      	movs	r0, #0
 8008994:	e022      	b.n	80089dc <__sflush_r+0xf8>
 8008996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899a:	b21b      	sxth	r3, r3
 800899c:	e01b      	b.n	80089d6 <__sflush_r+0xf2>
 800899e:	690f      	ldr	r7, [r1, #16]
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	d0f6      	beq.n	8008992 <__sflush_r+0xae>
 80089a4:	0793      	lsls	r3, r2, #30
 80089a6:	680e      	ldr	r6, [r1, #0]
 80089a8:	bf08      	it	eq
 80089aa:	694b      	ldreq	r3, [r1, #20]
 80089ac:	600f      	str	r7, [r1, #0]
 80089ae:	bf18      	it	ne
 80089b0:	2300      	movne	r3, #0
 80089b2:	eba6 0807 	sub.w	r8, r6, r7
 80089b6:	608b      	str	r3, [r1, #8]
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	dde9      	ble.n	8008992 <__sflush_r+0xae>
 80089be:	6a21      	ldr	r1, [r4, #32]
 80089c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089c2:	4643      	mov	r3, r8
 80089c4:	463a      	mov	r2, r7
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b0      	blx	r6
 80089ca:	2800      	cmp	r0, #0
 80089cc:	dc08      	bgt.n	80089e0 <__sflush_r+0xfc>
 80089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	4407      	add	r7, r0
 80089e2:	eba8 0800 	sub.w	r8, r8, r0
 80089e6:	e7e7      	b.n	80089b8 <__sflush_r+0xd4>
 80089e8:	dfbffffe 	.word	0xdfbffffe

080089ec <_fflush_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b913      	cbnz	r3, 80089fc <_fflush_r+0x10>
 80089f6:	2500      	movs	r5, #0
 80089f8:	4628      	mov	r0, r5
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	b118      	cbz	r0, 8008a06 <_fflush_r+0x1a>
 80089fe:	6a03      	ldr	r3, [r0, #32]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_fflush_r+0x1a>
 8008a02:	f7ff fa9f 	bl	8007f44 <__sinit>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0f3      	beq.n	80089f6 <_fflush_r+0xa>
 8008a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a10:	07d0      	lsls	r0, r2, #31
 8008a12:	d404      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a14:	0599      	lsls	r1, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1a:	f7ff fb98 	bl	800814e <__retarget_lock_acquire_recursive>
 8008a1e:	4628      	mov	r0, r5
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7ff ff5f 	bl	80088e4 <__sflush_r>
 8008a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a28:	07da      	lsls	r2, r3, #31
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	d4e4      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	059b      	lsls	r3, r3, #22
 8008a32:	d4e1      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a36:	f7ff fb8b 	bl	8008150 <__retarget_lock_release_recursive>
 8008a3a:	e7dd      	b.n	80089f8 <_fflush_r+0xc>

08008a3c <__swbuf_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	460e      	mov	r6, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	4605      	mov	r5, r0
 8008a44:	b118      	cbz	r0, 8008a4e <__swbuf_r+0x12>
 8008a46:	6a03      	ldr	r3, [r0, #32]
 8008a48:	b90b      	cbnz	r3, 8008a4e <__swbuf_r+0x12>
 8008a4a:	f7ff fa7b 	bl	8007f44 <__sinit>
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	071a      	lsls	r2, r3, #28
 8008a56:	d501      	bpl.n	8008a5c <__swbuf_r+0x20>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	b943      	cbnz	r3, 8008a6e <__swbuf_r+0x32>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f82a 	bl	8008ab8 <__swsetup_r>
 8008a64:	b118      	cbz	r0, 8008a6e <__swbuf_r+0x32>
 8008a66:	f04f 37ff 	mov.w	r7, #4294967295
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	1a98      	subs	r0, r3, r2
 8008a74:	6963      	ldr	r3, [r4, #20]
 8008a76:	b2f6      	uxtb	r6, r6
 8008a78:	4283      	cmp	r3, r0
 8008a7a:	4637      	mov	r7, r6
 8008a7c:	dc05      	bgt.n	8008a8a <__swbuf_r+0x4e>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff ffb3 	bl	80089ec <_fflush_r>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1ed      	bne.n	8008a66 <__swbuf_r+0x2a>
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	701e      	strb	r6, [r3, #0]
 8008a98:	6962      	ldr	r2, [r4, #20]
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d004      	beq.n	8008aaa <__swbuf_r+0x6e>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	07db      	lsls	r3, r3, #31
 8008aa4:	d5e1      	bpl.n	8008a6a <__swbuf_r+0x2e>
 8008aa6:	2e0a      	cmp	r6, #10
 8008aa8:	d1df      	bne.n	8008a6a <__swbuf_r+0x2e>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff ff9d 	bl	80089ec <_fflush_r>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0d9      	beq.n	8008a6a <__swbuf_r+0x2e>
 8008ab6:	e7d6      	b.n	8008a66 <__swbuf_r+0x2a>

08008ab8 <__swsetup_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4b29      	ldr	r3, [pc, #164]	@ (8008b60 <__swsetup_r+0xa8>)
 8008abc:	4605      	mov	r5, r0
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b118      	cbz	r0, 8008acc <__swsetup_r+0x14>
 8008ac4:	6a03      	ldr	r3, [r0, #32]
 8008ac6:	b90b      	cbnz	r3, 8008acc <__swsetup_r+0x14>
 8008ac8:	f7ff fa3c 	bl	8007f44 <__sinit>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	0719      	lsls	r1, r3, #28
 8008ad2:	d422      	bmi.n	8008b1a <__swsetup_r+0x62>
 8008ad4:	06da      	lsls	r2, r3, #27
 8008ad6:	d407      	bmi.n	8008ae8 <__swsetup_r+0x30>
 8008ad8:	2209      	movs	r2, #9
 8008ada:	602a      	str	r2, [r5, #0]
 8008adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae6:	e033      	b.n	8008b50 <__swsetup_r+0x98>
 8008ae8:	0758      	lsls	r0, r3, #29
 8008aea:	d512      	bpl.n	8008b12 <__swsetup_r+0x5a>
 8008aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aee:	b141      	cbz	r1, 8008b02 <__swsetup_r+0x4a>
 8008af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d002      	beq.n	8008afe <__swsetup_r+0x46>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff fb2b 	bl	8008154 <_free_r>
 8008afe:	2300      	movs	r3, #0
 8008b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f043 0308 	orr.w	r3, r3, #8
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	b94b      	cbnz	r3, 8008b32 <__swsetup_r+0x7a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b28:	d003      	beq.n	8008b32 <__swsetup_r+0x7a>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f84f 	bl	8008bd0 <__smakebuf_r>
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	f013 0201 	ands.w	r2, r3, #1
 8008b3a:	d00a      	beq.n	8008b52 <__swsetup_r+0x9a>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	60a2      	str	r2, [r4, #8]
 8008b40:	6962      	ldr	r2, [r4, #20]
 8008b42:	4252      	negs	r2, r2
 8008b44:	61a2      	str	r2, [r4, #24]
 8008b46:	6922      	ldr	r2, [r4, #16]
 8008b48:	b942      	cbnz	r2, 8008b5c <__swsetup_r+0xa4>
 8008b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b4e:	d1c5      	bne.n	8008adc <__swsetup_r+0x24>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	0799      	lsls	r1, r3, #30
 8008b54:	bf58      	it	pl
 8008b56:	6962      	ldrpl	r2, [r4, #20]
 8008b58:	60a2      	str	r2, [r4, #8]
 8008b5a:	e7f4      	b.n	8008b46 <__swsetup_r+0x8e>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7f7      	b.n	8008b50 <__swsetup_r+0x98>
 8008b60:	24000038 	.word	0x24000038

08008b64 <_sbrk_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d06      	ldr	r5, [pc, #24]	@ (8008b80 <_sbrk_r+0x1c>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	f7f8 f99e 	bl	8000eb0 <_sbrk>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_sbrk_r+0x1a>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_sbrk_r+0x1a>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	24000300 	.word	0x24000300

08008b84 <__swhatbuf_r>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	460c      	mov	r4, r1
 8008b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	b096      	sub	sp, #88	@ 0x58
 8008b90:	4615      	mov	r5, r2
 8008b92:	461e      	mov	r6, r3
 8008b94:	da0d      	bge.n	8008bb2 <__swhatbuf_r+0x2e>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b9c:	f04f 0100 	mov.w	r1, #0
 8008ba0:	bf14      	ite	ne
 8008ba2:	2340      	movne	r3, #64	@ 0x40
 8008ba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ba8:	2000      	movs	r0, #0
 8008baa:	6031      	str	r1, [r6, #0]
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	b016      	add	sp, #88	@ 0x58
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	466a      	mov	r2, sp
 8008bb4:	f000 f848 	bl	8008c48 <_fstat_r>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	dbec      	blt.n	8008b96 <__swhatbuf_r+0x12>
 8008bbc:	9901      	ldr	r1, [sp, #4]
 8008bbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bc6:	4259      	negs	r1, r3
 8008bc8:	4159      	adcs	r1, r3
 8008bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bce:	e7eb      	b.n	8008ba8 <__swhatbuf_r+0x24>

08008bd0 <__smakebuf_r>:
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd4:	079d      	lsls	r5, r3, #30
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d507      	bpl.n	8008bec <__smakebuf_r+0x1c>
 8008bdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	2301      	movs	r3, #1
 8008be6:	6163      	str	r3, [r4, #20]
 8008be8:	b003      	add	sp, #12
 8008bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bec:	ab01      	add	r3, sp, #4
 8008bee:	466a      	mov	r2, sp
 8008bf0:	f7ff ffc8 	bl	8008b84 <__swhatbuf_r>
 8008bf4:	9f00      	ldr	r7, [sp, #0]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff fb16 	bl	800822c <_malloc_r>
 8008c00:	b948      	cbnz	r0, 8008c16 <__smakebuf_r+0x46>
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	059a      	lsls	r2, r3, #22
 8008c08:	d4ee      	bmi.n	8008be8 <__smakebuf_r+0x18>
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	f043 0302 	orr.w	r3, r3, #2
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	e7e2      	b.n	8008bdc <__smakebuf_r+0xc>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	6020      	str	r0, [r4, #0]
 8008c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c26:	b15b      	cbz	r3, 8008c40 <__smakebuf_r+0x70>
 8008c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f81d 	bl	8008c6c <_isatty_r>
 8008c32:	b128      	cbz	r0, 8008c40 <__smakebuf_r+0x70>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	431d      	orrs	r5, r3
 8008c44:	81a5      	strh	r5, [r4, #12]
 8008c46:	e7cf      	b.n	8008be8 <__smakebuf_r+0x18>

08008c48 <_fstat_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	@ (8008c68 <_fstat_r+0x20>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7f8 f902 	bl	8000e5e <_fstat>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d102      	bne.n	8008c64 <_fstat_r+0x1c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	b103      	cbz	r3, 8008c64 <_fstat_r+0x1c>
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	24000300 	.word	0x24000300

08008c6c <_isatty_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d06      	ldr	r5, [pc, #24]	@ (8008c88 <_isatty_r+0x1c>)
 8008c70:	2300      	movs	r3, #0
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	f7f8 f901 	bl	8000e7e <_isatty>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_isatty_r+0x1a>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_isatty_r+0x1a>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	24000300 	.word	0x24000300

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
