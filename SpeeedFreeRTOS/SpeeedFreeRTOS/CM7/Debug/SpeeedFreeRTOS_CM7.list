
SpeeedFreeRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800ea58  0800ea58  0000fa58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1a4  0800f1a4  00011284  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1a4  0800f1a4  000101a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1ac  0800f1ac  00011284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1ac  0800f1ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1b0  0800f1b0  000101b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  24000000  0800f1b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c38  24000284  0800f438  00011284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004ebc  0800f438  00011ebc  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  0800f438  00012000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00011284  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024d4e  00000000  00000000  000112b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a5d  00000000  00000000  00036000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001686  00000000  00000000  0003d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f44f  00000000  00000000  0003ee9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026689  00000000  00000000  0007e2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00191740  00000000  00000000  000a4976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002360b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d48  00000000  00000000  002360fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0023ee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000284 	.word	0x24000284
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ea3c 	.word	0x0800ea3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000288 	.word	0x24000288
 80002dc:	0800ea3c 	.word	0x0800ea3c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <SystemInit+0xfc>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000894 <SystemInit+0xfc>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <SystemInit+0xfc>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <SystemInit+0xfc>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <SystemInit+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	2b06      	cmp	r3, #6
 80007c2:	d807      	bhi.n	80007d4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c4:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <SystemInit+0x100>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	4a32      	ldr	r2, [pc, #200]	@ (8000898 <SystemInit+0x100>)
 80007ce:	f043 0307 	orr.w	r3, r3, #7
 80007d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SystemInit+0x104>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a30      	ldr	r2, [pc, #192]	@ (800089c <SystemInit+0x104>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <SystemInit+0x104>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <SystemInit+0x104>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	492c      	ldr	r1, [pc, #176]	@ (800089c <SystemInit+0x104>)
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <SystemInit+0x108>)
 80007ee:	4013      	ands	r3, r2
 80007f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <SystemInit+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d007      	beq.n	800080e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemInit+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 030f 	bic.w	r3, r3, #15
 8000806:	4a24      	ldr	r2, [pc, #144]	@ (8000898 <SystemInit+0x100>)
 8000808:	f043 0307 	orr.w	r3, r3, #7
 800080c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemInit+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <SystemInit+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemInit+0x104>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <SystemInit+0x104>)
 8000822:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <SystemInit+0x10c>)
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemInit+0x104>)
 8000828:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <SystemInit+0x110>)
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemInit+0x104>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <SystemInit+0x114>)
 8000830:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <SystemInit+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <SystemInit+0x104>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <SystemInit+0x114>)
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <SystemInit+0x104>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <SystemInit+0x104>)
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <SystemInit+0x114>)
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <SystemInit+0x104>)
 800084c:	2200      	movs	r2, #0
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0x104>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <SystemInit+0x104>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <SystemInit+0x104>)
 800085e:	2200      	movs	r2, #0
 8000860:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <SystemInit+0x118>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <SystemInit+0x118>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <SystemInit+0x11c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <SystemInit+0x120>)
 8000874:	4013      	ands	r3, r2
 8000876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800087a:	d202      	bcs.n	8000882 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <SystemInit+0x124>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <SystemInit+0x128>)
 8000884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000888:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	52002000 	.word	0x52002000
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	02020200 	.word	0x02020200
 80008a8:	01ff0000 	.word	0x01ff0000
 80008ac:	01010280 	.word	0x01010280
 80008b0:	580000c0 	.word	0x580000c0
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d101      	bne.n	80008de <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <rpmsg_send+0x3c>)
 80008dc:	e00c      	b.n	80008f8 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f008 f939 	bl	8008b68 <rpmsg_send_offchannel_raw>
 80008f6:	4603      	mov	r3, r0
					 len, true);
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	fffff829 	.word	0xfffff829

08000904 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2220      	movs	r2, #32
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4618      	mov	r0, r3
 800091a:	f00a fe66 	bl	800b5ea <strncpy>
	ept->addr = src;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <getPercent>:
 * @param lowerBound lower border value
 * @param upperBound upper border value
 * @returns float4 value between 0 and 1
 */
float getPercent(float value, float lowerBound, float upperBound)
{
 800093e:	b480      	push	{r7}
 8000940:	b087      	sub	sp, #28
 8000942:	af00      	add	r7, sp, #0
 8000944:	ed87 0a03 	vstr	s0, [r7, #12]
 8000948:	edc7 0a02 	vstr	s1, [r7, #8]
 800094c:	ed87 1a01 	vstr	s2, [r7, #4]
	float percentage = (value - lowerBound) / (upperBound - lowerBound);
 8000950:	ed97 7a03 	vldr	s14, [r7, #12]
 8000954:	edd7 7a02 	vldr	s15, [r7, #8]
 8000958:	ee77 6a67 	vsub.f32	s13, s14, s15
 800095c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000960:	edd7 7a02 	vldr	s15, [r7, #8]
 8000964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800096c:	edc7 7a05 	vstr	s15, [r7, #20]
	if(percentage > 1) percentage = 1;
 8000970:	edd7 7a05 	vldr	s15, [r7, #20]
 8000974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000980:	dd02      	ble.n	8000988 <getPercent+0x4a>
 8000982:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000986:	617b      	str	r3, [r7, #20]
	if(percentage < 0) percentage = 0;
 8000988:	edd7 7a05 	vldr	s15, [r7, #20]
 800098c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000994:	d502      	bpl.n	800099c <getPercent+0x5e>
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

	return percentage;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	ee07 3a90 	vmov	s15, r3
}
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <rpmsg_recv_callback>:
static volatile int service_created;
volatile uint32_t received_data;	//received data (change to given struct)
volatile uint32_t received_data1;
static struct rpmsg_endpoint rp_endpoint;
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *prv)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	DataIdentifier *id = (DataIdentifier *)data;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	617b      	str	r3, [r7, #20]
	if(*id == TORQUE_SENSOR)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10c      	bne.n	80009e4 <rpmsg_recv_callback+0x34>
	{
		test = (TorqueEncoder *)data;
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	6013      	str	r3, [r2, #0]
		received_data = test->valueInt;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <rpmsg_recv_callback+0x4c>)
 80009d8:	6013      	str	r3, [r2, #0]
		received_data1 = test->sensor1;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <rpmsg_recv_callback+0x50>)
 80009e2:	6013      	str	r3, [r2, #0]
	}
	message_received = 1;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <rpmsg_recv_callback+0x54>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

	return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	240002c0 	.word	0x240002c0
 80009fc:	240002cc 	.word	0x240002cc
 8000a00:	240002d0 	.word	0x240002d0
 8000a04:	240002c4 	.word	0x240002c4

08000a08 <serice_destroy_cb>:
void serice_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	service_created = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <serice_destroy_cb+0x1c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	240002c8 	.word	0x240002c8

08000a28 <new_service_cb>:
void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	OPENAMP_create_endpoint(&rp_endpoint, name,
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <new_service_cb+0x2c>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <new_service_cb+0x30>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <new_service_cb+0x34>)
 8000a40:	f009 fcd8 	bl	800a3f4 <OPENAMP_create_endpoint>
	          dest, rpmsg_recv_callback,
			  serice_destroy_cb);
	service_created = 1;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <new_service_cb+0x38>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08000a09 	.word	0x08000a09
 8000a58:	080009b1 	.word	0x080009b1
 8000a5c:	240002d4 	.word	0x240002d4
 8000a60:	240002c8 	.word	0x240002c8

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a6a:	f000 fb25 	bl	80010b8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a6e:	4b63      	ldr	r3, [pc, #396]	@ (8000bfc <main+0x198>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11b      	bne.n	8000ab2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7a:	f3bf 8f4f 	dsb	sy
}
 8000a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
}
 8000a84:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a86:	4b5d      	ldr	r3, [pc, #372]	@ (8000bfc <main+0x198>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8e:	f3bf 8f4f 	dsb	sy
}
 8000a92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a94:	f3bf 8f6f 	isb	sy
}
 8000a98:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a9a:	4b58      	ldr	r3, [pc, #352]	@ (8000bfc <main+0x198>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a57      	ldr	r2, [pc, #348]	@ (8000bfc <main+0x198>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa6:	f3bf 8f4f 	dsb	sy
}
 8000aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aac:	f3bf 8f6f 	isb	sy
}
 8000ab0:	e000      	b.n	8000ab4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ab2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ab4:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <main+0x198>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d138      	bne.n	8000b32 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <main+0x198>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ace:	4b4b      	ldr	r3, [pc, #300]	@ (8000bfc <main+0x198>)
 8000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ad4:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	0b5b      	lsrs	r3, r3, #13
 8000ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ade:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000af2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	4940      	ldr	r1, [pc, #256]	@ (8000bfc <main+0x198>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ef      	bne.n	8000aea <main+0x86>
    } while(sets-- != 0U);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	60fa      	str	r2, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e5      	bne.n	8000ae0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
}
 8000b18:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b1a:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <main+0x198>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a37      	ldr	r2, [pc, #220]	@ (8000bfc <main+0x198>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b2c:	f3bf 8f6f 	isb	sy
}
 8000b30:	e000      	b.n	8000b34 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b32:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b38:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b3a:	bf00      	nop
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <main+0x19c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <main+0xee>
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	617a      	str	r2, [r7, #20]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dcf4      	bgt.n	8000b3c <main+0xd8>
  if ( timeout < 0 )
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da01      	bge.n	8000b5c <main+0xf8>
  {
  Error_Handler();
 8000b58:	f000 faee 	bl	8001138 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fc94 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f862 	bl	8000c28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f8e0 	bl	8000d28 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <main+0x19c>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <main+0x19c>)
 8000b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <main+0x19c>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f001 f822 	bl	8001bd0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f001 f838 	bl	8001c04 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b98:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b9a:	bf00      	nop
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <main+0x19c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d104      	bne.n	8000bb2 <main+0x14e>
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	617a      	str	r2, [r7, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dcf4      	bgt.n	8000b9c <main+0x138>
if ( timeout < 0 )
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <main+0x158>
{
Error_Handler();
 8000bb8:	f000 fabe 	bl	8001138 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f8e4 	bl	8000d88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc0:	f003 ff4c 	bl	8004a5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <main+0x1a0>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480f      	ldr	r0, [pc, #60]	@ (8000c08 <main+0x1a4>)
 8000bca:	f003 ff91 	bl	8004af0 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <main+0x1a8>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of txTask */
  txTaskHandle = osThreadNew(startTxTask, NULL, &txTask_attributes);
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <main+0x1ac>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <main+0x1b0>)
 8000bda:	f003 ff89 	bl	8004af0 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <main+0x1b4>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of calculateTask */
  calculateTaskHandle = osThreadNew(startCalculateTask, NULL, &calculateTask_attributes);
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <main+0x1b8>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <main+0x1bc>)
 8000bea:	f003 ff81 	bl	8004af0 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <main+0x1c0>)
 8000bf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf4:	f003 ff56 	bl	8004aa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <main+0x194>
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	58024400 	.word	0x58024400
 8000c04:	0800eca8 	.word	0x0800eca8
 8000c08:	08000e59 	.word	0x08000e59
 8000c0c:	240002a0 	.word	0x240002a0
 8000c10:	0800eccc 	.word	0x0800eccc
 8000c14:	08000f0d 	.word	0x08000f0d
 8000c18:	240002a4 	.word	0x240002a4
 8000c1c:	0800ecf0 	.word	0x0800ecf0
 8000c20:	08000fc1 	.word	0x08000fc1
 8000c24:	240002a8 	.word	0x240002a8

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	@ 0x70
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a fcbd 	bl	800b5b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00a fcb7 	bl	800b5b6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c48:	2004      	movs	r0, #4
 8000c4a:	f001 f81b 	bl	8001c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c5e:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c70:	4a2c      	ldr	r2, [pc, #176]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c84:	bf00      	nop
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c92:	d1f8      	bne.n	8000c86 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c94:	2303      	movs	r3, #3
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2340      	movs	r3, #64	@ 0x40
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f830 	bl	8001d38 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cde:	f000 fa2b 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	233f      	movs	r3, #63	@ 0x3f
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fc70 	bl	80025ec <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d12:	f000 fa11 	bl	8001138 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3770      	adds	r7, #112	@ 0x70
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58000400 	.word	0x58000400
 8000d24:	58024800 	.word	0x58024800

08000d28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0b0      	sub	sp, #192	@ 0xc0
 8000d2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	22c0      	movs	r2, #192	@ 0xc0
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00a fc3e 	bl	800b5b6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d5a:	23c0      	movs	r3, #192	@ 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fff4 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d7a:	f000 f9dd 	bl	8001138 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	37c0      	adds	r7, #192	@ 0xc0
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	4a29      	ldr	r2, [pc, #164]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a22      	ldr	r2, [pc, #136]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <MX_GPIO_Init+0xc8>)
 8000dfe:	f000 feb3 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_GPIO_Init+0xcc>)
 8000e08:	f000 feae 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <MX_GPIO_Init+0xc8>)
 8000e24:	f000 fcf0 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_GPIO_Init+0xcc>)
 8000e40:	f000 fce2 	bl	8001808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020000 	.word	0x58020000
 8000e54:	58021000 	.word	0x58021000

08000e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
 //initalize OPENAMP and MAILBOX
	MAILBOX_Init();
 8000e60:	f009 f90c 	bl	800a07c <MAILBOX_Init>
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 8000e64:	2300      	movs	r3, #0
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	491f      	ldr	r1, [pc, #124]	@ (8000ef4 <StartDefaultTask+0x9c>)
 8000e76:	4820      	ldr	r0, [pc, #128]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000e78:	f7ff fd44 	bl	8000904 <rpmsg_init_ept>
	if(MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK) Error_Handler();
 8000e7c:	491f      	ldr	r1, [pc, #124]	@ (8000efc <StartDefaultTask+0xa4>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f009 fa16 	bl	800a2b0 <MX_OPENAMP_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <StartDefaultTask+0x36>
 8000e8a:	f000 f955 	bl	8001138 <Error_Handler>

	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000e8e:	481a      	ldr	r0, [pc, #104]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000e90:	f009 fada 	bl	800a448 <OPENAMP_Wait_EndPointready>
	int *initalSend = (int*) pvPortMalloc(sizeof(int));
 8000e94:	2004      	movs	r0, #4
 8000e96:	f003 ff0d 	bl	8004cb4 <pvPortMalloc>
 8000e9a:	60f8      	str	r0, [r7, #12]
	*initalSend = 0;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	if(OPENAMP_send(&rp_endpoint, initalSend, sizeof(int)) < 0) Error_Handler(); //If this isn't here code breaks for some reason.
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000ea8:	f7ff fd0c 	bl	80008c4 <rpmsg_send>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da01      	bge.n	8000eb6 <StartDefaultTask+0x5e>
 8000eb2:	f000 f941 	bl	8001138 <Error_Handler>
	vPortFree(initalSend);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f003 ffca 	bl	8004e50 <vPortFree>
  /* Infinite loop */
  for(;;)
  {
	  if(service_created)
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <StartDefaultTask+0xa8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <StartDefaultTask+0x72>
	  {
		  OPENAMP_check_for_message(); //continously check for message from M4 core(slave).
 8000ec4:	f009 fab4 	bl	800a430 <OPENAMP_check_for_message>
 8000ec8:	e001      	b.n	8000ece <StartDefaultTask+0x76>
	  }
	  else //service destroyed
	  {
		  OPENAMP_DeInit();
 8000eca:	f009 fa87 	bl	800a3dc <OPENAMP_DeInit>
	  }
	  if(message_received)
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <StartDefaultTask+0xac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <StartDefaultTask+0x92>
	  {
		  //Message received, notify other tasks to start calculation
		  xTaskNotifyGive(calculateTaskHandle);
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <StartDefaultTask+0xb0>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	2202      	movs	r2, #2
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f005 ffd6 	bl	8006e90 <xTaskGenericNotify>
		  message_received = 0;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <StartDefaultTask+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f003 fe92 	bl	8004c14 <osDelay>
	  if(service_created)
 8000ef0:	e7e4      	b.n	8000ebc <StartDefaultTask+0x64>
 8000ef2:	bf00      	nop
 8000ef4:	0800ea7c 	.word	0x0800ea7c
 8000ef8:	240002d4 	.word	0x240002d4
 8000efc:	08000a29 	.word	0x08000a29
 8000f00:	240002c8 	.word	0x240002c8
 8000f04:	240002c4 	.word	0x240002c4
 8000f08:	240002a8 	.word	0x240002a8

08000f0c <startTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxTask */
void startTxTask(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxTask */
  /* Infinite loop */
  for(;;)
  {
	  //WAIT FOR ALL CALCULATION TAKS TO FINISH
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e007      	b.n	8000f2a <startTxTask+0x1e>
	  {
		  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task
 8000f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f005 ff6e 	bl	8006e00 <ulTaskNotifyTake>
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	ddf4      	ble.n	8000f1a <startTxTask+0xe>
	  }
	  //send data back to C4
	  TorqueEncoder *test = (TorqueEncoder*)pvPortMalloc(sizeof(struct TorqueEncoder));
 8000f30:	2020      	movs	r0, #32
 8000f32:	f003 febf 	bl	8004cb4 <pvPortMalloc>
 8000f36:	60b8      	str	r0, [r7, #8]
	  test -> id = TORQUE_SENSOR;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	  test -> valueFloat = calcFloatTest;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <startTxTask+0x94>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	619a      	str	r2, [r3, #24]
	  test -> valueInt = message;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <startTxTask+0x98>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	605a      	str	r2, [r3, #4]
	  test -> sensor1 = received_data1;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <startTxTask+0x9c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	609a      	str	r2, [r3, #8]
	  test -> sensorPercent0 = sensorData;
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <startTxTask+0xa0>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
	  test -> sensorPercent1 = sensorData1;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <startTxTask+0xa4>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	611a      	str	r2, [r3, #16]
	  test -> travelPercent = travelPercent;
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <startTxTask+0xa8>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	615a      	str	r2, [r3, #20]
	  test -> valueBool = false;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2200      	movs	r2, #0
 8000f72:	771a      	strb	r2, [r3, #28]

	  if(OPENAMP_send(&rp_endpoint, test, sizeof(struct TorqueEncoder)) < 0) Error_Handler(); //send given message to other core this is also status
 8000f74:	2220      	movs	r2, #32
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <startTxTask+0xac>)
 8000f7a:	f7ff fca3 	bl	80008c4 <rpmsg_send>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da01      	bge.n	8000f88 <startTxTask+0x7c>
 8000f84:	f000 f8d8 	bl	8001138 <Error_Handler>

	  vPortFree(test);
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f003 ff61 	bl	8004e50 <vPortFree>
	  HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <startTxTask+0xb0>)
 8000f92:	f000 fe02 	bl	8001b9a <HAL_GPIO_TogglePin>

	  osDelay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f003 fe3c 	bl	8004c14 <osDelay>
  {
 8000f9c:	e7ba      	b.n	8000f14 <startTxTask+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	240002bc 	.word	0x240002bc
 8000fa4:	240002ac 	.word	0x240002ac
 8000fa8:	240002d0 	.word	0x240002d0
 8000fac:	240002b0 	.word	0x240002b0
 8000fb0:	240002b4 	.word	0x240002b4
 8000fb4:	240002b8 	.word	0x240002b8
 8000fb8:	240002d4 	.word	0x240002d4
 8000fbc:	58021000 	.word	0x58021000

08000fc0 <startCalculateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCalculateTask */
void startCalculateTask(void *argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCalculateTask */
	//BEGIN CALCULATION (after done data will be stored at a certain variable/struct
	//Notify Sending task when done

	//ABSTRACT TO ANOTHER FILE
	const int MAX_VALUE = 4095;
 8000fc8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000fcc:	60fb      	str	r3, [r7, #12]
	const int MIN_VALUE = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 8000fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f005 ff12 	bl	8006e00 <ulTaskNotifyTake>

	  sensorData = getPercent(test->valueInt, MIN_VALUE, MAX_VALUE);
 8000fdc:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <startCalculateTask+0xe0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	ee07 3a10 	vmov	s14, r3
 8000ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	ee06 3a90 	vmov	s13, r3
 8000ffa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000ffe:	eeb0 1a66 	vmov.f32	s2, s13
 8001002:	eef0 0a47 	vmov.f32	s1, s14
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f7ff fc98 	bl	800093e <getPercent>
 800100e:	eef0 7a40 	vmov.f32	s15, s0
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <startCalculateTask+0xe4>)
 8001014:	edc3 7a00 	vstr	s15, [r3]
	  sensorData1 = getPercent(test->sensor1, MIN_VALUE, MAX_VALUE);
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <startCalculateTask+0xe0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	ee07 3a10 	vmov	s14, r3
 800102c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	ee06 3a90 	vmov	s13, r3
 8001036:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800103a:	eeb0 1a66 	vmov.f32	s2, s13
 800103e:	eef0 0a47 	vmov.f32	s1, s14
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	f7ff fc7a 	bl	800093e <getPercent>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <startCalculateTask+0xe8>)
 8001050:	edc3 7a00 	vstr	s15, [r3]

	  travelPercent = (sensorData + sensorData1) / 2; //average travel percentage
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <startCalculateTask+0xe4>)
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <startCalculateTask+0xe8>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001064:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <startCalculateTask+0xec>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
	  travelPercent = travelPercent * 2400;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <startCalculateTask+0xec>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80010b0 <startCalculateTask+0xf0>
 800107c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <startCalculateTask+0xec>)
 8001082:	edc3 7a00 	vstr	s15, [r3]

	  xTaskNotifyGive(txTaskHandle);
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <startCalculateTask+0xf4>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	2202      	movs	r2, #2
 800108e:	2100      	movs	r1, #0
 8001090:	f005 fefe 	bl	8006e90 <xTaskGenericNotify>
	  osDelay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f003 fdbd 	bl	8004c14 <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 800109a:	bf00      	nop
 800109c:	e799      	b.n	8000fd2 <startCalculateTask+0x12>
 800109e:	bf00      	nop
 80010a0:	240002c0 	.word	0x240002c0
 80010a4:	240002b0 	.word	0x240002b0
 80010a8:	240002b4 	.word	0x240002b4
 80010ac:	240002b8 	.word	0x240002b8
 80010b0:	45160000 	.word	0x45160000
 80010b4:	240002a4 	.word	0x240002a4

080010b8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010ca:	f000 fb25 	bl	8001718 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80010d6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80010da:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80010dc:	230f      	movs	r3, #15
 80010de:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010e8:	2303      	movs	r3, #3
 80010ea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fb42 	bl	8001788 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001104:	2004      	movs	r0, #4
 8001106:	f000 fb1f 	bl	8001748 <HAL_MPU_Enable>

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001126:	f000 f9eb 	bl	8001500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010000 	.word	0x40010000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_MspInit+0x48>)
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001150:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_MspInit+0x48>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x48>)
 800115c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	210f      	movs	r1, #15
 800116c:	f06f 0001 	mvn.w	r0, #1
 8001170:	f000 faaa 	bl	80016c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2105      	movs	r1, #5
 8001178:	207d      	movs	r0, #125	@ 0x7d
 800117a:	f000 faa5 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800117e:	207d      	movs	r0, #125	@ 0x7d
 8001180:	f000 fabc 	bl	80016fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	@ 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	d842      	bhi.n	8001224 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800119e:	2200      	movs	r2, #0
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	2019      	movs	r0, #25
 80011a4:	f000 fa90 	bl	80016c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011a8:	2019      	movs	r0, #25
 80011aa:	f000 faa7 	bl	80016fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_InitTick+0xac>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <HAL_InitTick+0xb0>)
 80011b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <HAL_InitTick+0xb0>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <HAL_InitTick+0xb0>)
 80011c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fd7b 	bl	8002cd8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011e2:	f001 fd63 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80011e6:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ea:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <HAL_InitTick+0xb4>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	0c9b      	lsrs	r3, r3, #18
 80011f2:	3b01      	subs	r3, #1
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_InitTick+0xb8>)
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <HAL_InitTick+0xbc>)
 80011fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0xb8>)
 80011fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001204:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_InitTick+0xb8>)
 8001206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001208:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_InitTick+0xb8>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_InitTick+0xb8>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001216:	480c      	ldr	r0, [pc, #48]	@ (8001248 <HAL_InitTick+0xb8>)
 8001218:	f003 f90e 	bl	8004438 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <HAL_InitTick+0xa2>
 8001222:	e001      	b.n	8001228 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e005      	b.n	8001234 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <HAL_InitTick+0xb8>)
 800122a:	f003 f967 	bl	80044fc <HAL_TIM_Base_Start_IT>
 800122e:	4603      	mov	r3, r0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3738      	adds	r7, #56	@ 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000008 	.word	0x24000008
 8001240:	58024400 	.word	0x58024400
 8001244:	431bde83 	.word	0x431bde83
 8001248:	24000314 	.word	0x24000314
 800124c:	40010000 	.word	0x40010000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM1_UP_IRQHandler+0x10>)
 800128e:	f003 f9ad 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000314 	.word	0x24000314

0800129c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80012a0:	f000 fcd6 	bl	8001c50 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_kill>:

int _kill(int pid, int sig)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c2:	f00a f9ff 	bl	800b6c4 <__errno>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2216      	movs	r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
  return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_exit>:

void _exit (int status)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffe7 	bl	80012b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <_exit+0x12>

080012ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001300:	f3af 8000 	nop.w
 8001304:	4601      	mov	r1, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf0      	blt.n	8001300 <_read+0x12>
  }

  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e009      	b.n	800134e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf1      	blt.n	800133a <_write+0x12>
  }
  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_close>:

int _close(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	605a      	str	r2, [r3, #4]
  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_isatty>:

int _isatty(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f00a f964 	bl	800b6c4 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24080000 	.word	0x24080000
 8001428:	00000400 	.word	0x00000400
 800142c:	24000360 	.word	0x24000360
 8001430:	24004ec0 	.word	0x24004ec0

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff f9ae 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f00a f935 	bl	800b6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fafd 	bl	8000a64 <main>
  bx  lr
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001474:	24000284 	.word	0x24000284
  ldr r2, =_sidata
 8001478:	0800f1b4 	.word	0x0800f1b4
  ldr r2, =_sbss
 800147c:	24000284 	.word	0x24000284
  ldr r4, =_ebss
 8001480:	24004ebc 	.word	0x24004ebc

08001484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC3_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f90f 	bl	80016b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f001 fa60 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4913      	ldr	r1, [pc, #76]	@ (80014f4 <HAL_Init+0x6c>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff fe5c 	bl	8001190 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fe2f 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	0800ec98 	.word	0x0800ec98
 80014f8:	24000004 	.word	0x24000004
 80014fc:	24000000 	.word	0x24000000

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2400000c 	.word	0x2400000c
 8001524:	24000364 	.word	0x24000364

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	24000364 	.word	0x24000364

08001540 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetREVID+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0c1b      	lsrs	r3, r3, #16
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	5c001000 	.word	0x5c001000

08001558 <__NVIC_SetPriorityGrouping>:
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	05fa0000 	.word	0x05fa0000

080015a0 <__NVIC_GetPriorityGrouping>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff4c 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d6:	f7ff ff63 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	6978      	ldr	r0, [r7, #20]
 80016e2:	f7ff ffb3 	bl	800164c <NVIC_EncodePriority>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff82 	bl	80015f8 <__NVIC_SetPriority>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff56 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800171c:	f3bf 8f5f 	dmb	sy
}
 8001720:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_MPU_Disable+0x28>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_MPU_Disable+0x28>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_MPU_Disable+0x2c>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	e000ed90 	.word	0xe000ed90

08001748 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_MPU_Enable+0x38>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_MPU_Enable+0x3c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_MPU_Enable+0x3c>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001764:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001766:	f3bf 8f4f 	dsb	sy
}
 800176a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176c:	f3bf 8f6f 	isb	sy
}
 8001770:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed90 	.word	0xe000ed90
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	785a      	ldrb	r2, [r3, #1]
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 8001796:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7b1b      	ldrb	r3, [r3, #12]
 80017b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7adb      	ldrb	r3, [r3, #11]
 80017b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a9b      	ldrb	r3, [r3, #10]
 80017be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b5b      	ldrb	r3, [r3, #13]
 80017c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7b9b      	ldrb	r3, [r3, #14]
 80017ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7bdb      	ldrb	r3, [r3, #15]
 80017d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7a5b      	ldrb	r3, [r3, #9]
 80017de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7a1b      	ldrb	r3, [r3, #8]
 80017e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f4:	6113      	str	r3, [r2, #16]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001816:	4b89      	ldr	r3, [pc, #548]	@ (8001a3c <HAL_GPIO_Init+0x234>)
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800181a:	e194      	b.n	8001b46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8186 	beq.w	8001b40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x44>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 0201 	and.w	r2, r3, #1
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d017      	beq.n	80018ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	69b9      	ldr	r1, [r7, #24]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80e0 	beq.w	8001b40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <HAL_GPIO_Init+0x238>)
 8001982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001986:	4a2e      	ldr	r2, [pc, #184]	@ (8001a40 <HAL_GPIO_Init+0x238>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001990:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <HAL_GPIO_Init+0x238>)
 8001992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_GPIO_Init+0x23c>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a20      	ldr	r2, [pc, #128]	@ (8001a48 <HAL_GPIO_Init+0x240>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d052      	beq.n	8001a70 <HAL_GPIO_Init+0x268>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <HAL_GPIO_Init+0x244>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d031      	beq.n	8001a36 <HAL_GPIO_Init+0x22e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <HAL_GPIO_Init+0x248>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d02b      	beq.n	8001a32 <HAL_GPIO_Init+0x22a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_GPIO_Init+0x24c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <HAL_GPIO_Init+0x250>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <HAL_GPIO_Init+0x254>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <HAL_GPIO_Init+0x258>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_GPIO_Init+0x25c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <HAL_GPIO_Init+0x260>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_GPIO_Init+0x264>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x20e>
 8001a12:	2309      	movs	r3, #9
 8001a14:	e02d      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a16:	230a      	movs	r3, #10
 8001a18:	e02b      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	e029      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a1e:	2307      	movs	r3, #7
 8001a20:	e027      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e025      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a26:	2305      	movs	r3, #5
 8001a28:	e023      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e021      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e01f      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e01d      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e01b      	b.n	8001a72 <HAL_GPIO_Init+0x26a>
 8001a3a:	bf00      	nop
 8001a3c:	58000080 	.word	0x58000080
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58000400 	.word	0x58000400
 8001a48:	58020000 	.word	0x58020000
 8001a4c:	58020400 	.word	0x58020400
 8001a50:	58020800 	.word	0x58020800
 8001a54:	58020c00 	.word	0x58020c00
 8001a58:	58021000 	.word	0x58021000
 8001a5c:	58021400 	.word	0x58021400
 8001a60:	58021800 	.word	0x58021800
 8001a64:	58021c00 	.word	0x58021c00
 8001a68:	58022000 	.word	0x58022000
 8001a6c:	58022400 	.word	0x58022400
 8001a70:	2300      	movs	r3, #0
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a82:	4938      	ldr	r1, [pc, #224]	@ (8001b64 <HAL_GPIO_Init+0x35c>)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ab6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	3301      	adds	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f ae63 	bne.w	800181c <HAL_GPIO_Init+0x14>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3724      	adds	r7, #36	@ 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	58000400 	.word	0x58000400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001bd8:	4a08      	ldr	r2, [pc, #32]	@ (8001bfc <HAL_HSEM_FastTake+0x2c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3320      	adds	r3, #32
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_HSEM_FastTake+0x30>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	58026400 	.word	0x58026400
 8001c00:	80000300 	.word	0x80000300

08001c04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001c0e:	4906      	ldr	r1, [pc, #24]	@ (8001c28 <HAL_HSEM_Release+0x24>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	58026400 	.word	0x58026400

08001c2c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_HSEM_ActivateNotification+0x20>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4904      	ldr	r1, [pc, #16]	@ (8001c4c <HAL_HSEM_ActivateNotification+0x20>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
#endif
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	58026500 	.word	0x58026500

08001c50 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_HSEM_IRQHandler+0x30>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_HSEM_IRQHandler+0x30>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4906      	ldr	r1, [pc, #24]	@ (8001c80 <HAL_HSEM_IRQHandler+0x30>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <HAL_HSEM_IRQHandler+0x30>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f008 f9f3 	bl	800a05c <HAL_HSEM_FreeCallback>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58026500 	.word	0x58026500

08001c84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c8c:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d00a      	beq.n	8001cae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e040      	b.n	8001d2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e03e      	b.n	8001d2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001cb6:	491f      	ldr	r1, [pc, #124]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cbe:	f7ff fc33 	bl	8001528 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cc4:	e009      	b.n	8001cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cc6:	f7ff fc2f 	bl	8001528 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cd4:	d901      	bls.n	8001cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e028      	b.n	8001d2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b1e      	cmp	r3, #30
 8001cec:	d008      	beq.n	8001d00 <HAL_PWREx_ConfigSupply+0x7c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cf2:	d005      	beq.n	8001d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b1d      	cmp	r3, #29
 8001cf8:	d002      	beq.n	8001d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b2d      	cmp	r3, #45	@ 0x2d
 8001cfe:	d114      	bne.n	8001d2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d00:	f7ff fc12 	bl	8001528 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d06:	e009      	b.n	8001d1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d08:	f7ff fc0e 	bl	8001528 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d16:	d901      	bls.n	8001d1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e007      	b.n	8001d2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d28:	d1ee      	bne.n	8001d08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	58024800 	.word	0x58024800

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f000 bc48 	b.w	80025dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8088 	beq.w	8001e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4b99      	ldr	r3, [pc, #612]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d64:	4b96      	ldr	r3, [pc, #600]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d007      	beq.n	8001d80 <HAL_RCC_OscConfig+0x48>
 8001d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	d111      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
 8001d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b8f      	ldr	r3, [pc, #572]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d06d      	beq.n	8001e68 <HAL_RCC_OscConfig+0x130>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d169      	bne.n	8001e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 bc21 	b.w	80025dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x7a>
 8001da4:	4b86      	ldr	r3, [pc, #536]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a85      	ldr	r2, [pc, #532]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x9c>
 8001dba:	4b81      	ldr	r3, [pc, #516]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a80      	ldr	r2, [pc, #512]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7d      	ldr	r2, [pc, #500]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001dde:	4b78      	ldr	r3, [pc, #480]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a77      	ldr	r2, [pc, #476]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a74      	ldr	r2, [pc, #464]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001df8:	4b71      	ldr	r3, [pc, #452]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a70      	ldr	r2, [pc, #448]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b6e      	ldr	r3, [pc, #440]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6d      	ldr	r2, [pc, #436]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fb86 	bl	8001528 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb82 	bl	8001528 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e3d4      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e32:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb72 	bl	8001528 <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fb6e 	bl	8001528 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e3c0      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e5a:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x110>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80ca 	beq.w	800200c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e78:	4b51      	ldr	r3, [pc, #324]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e82:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_RCC_OscConfig+0x166>
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2b18      	cmp	r3, #24
 8001e92:	d156      	bne.n	8001f42 <HAL_RCC_OscConfig+0x20a>
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d151      	bne.n	8001f42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9e:	4b48      	ldr	r3, [pc, #288]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e392      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0219 	bic.w	r2, r3, #25
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	493f      	ldr	r1, [pc, #252]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb2e 	bl	8001528 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fb2a 	bl	8001528 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e37c      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	f7ff fb27 	bl	8001540 <HAL_GetREVID>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d817      	bhi.n	8001f2c <HAL_RCC_OscConfig+0x1f4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b40      	cmp	r3, #64	@ 0x40
 8001f02:	d108      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1de>
 8001f04:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f14:	e07a      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	031b      	lsls	r3, r3, #12
 8001f24:	4926      	ldr	r1, [pc, #152]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2a:	e06f      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	4921      	ldr	r1, [pc, #132]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	e064      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d047      	beq.n	8001fda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0219 	bic.w	r2, r3, #25
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	491a      	ldr	r1, [pc, #104]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fae4 	bl	8001528 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff fae0 	bl	8001528 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e332      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	f7ff fadd 	bl	8001540 <HAL_GetREVID>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d819      	bhi.n	8001fc4 <HAL_RCC_OscConfig+0x28c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2b40      	cmp	r3, #64	@ 0x40
 8001f96:	d108      	bne.n	8001faa <HAL_RCC_OscConfig+0x272>
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa6:	6053      	str	r3, [r2, #4]
 8001fa8:	e030      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	031b      	lsls	r3, r3, #12
 8001fb8:	4901      	ldr	r1, [pc, #4]	@ (8001fc0 <HAL_RCC_OscConfig+0x288>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
 8001fbe:	e025      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4997      	ldr	r1, [pc, #604]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b95      	ldr	r3, [pc, #596]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a94      	ldr	r2, [pc, #592]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fa9f 	bl	8001528 <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff fa9b 	bl	8001528 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2ed      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002000:	4b8b      	ldr	r3, [pc, #556]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a9 	beq.w	800216c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b85      	ldr	r3, [pc, #532]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002022:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002024:	4b82      	ldr	r3, [pc, #520]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d007      	beq.n	8002040 <HAL_RCC_OscConfig+0x308>
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b18      	cmp	r3, #24
 8002034:	d13a      	bne.n	80020ac <HAL_RCC_OscConfig+0x374>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d135      	bne.n	80020ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002040:	4b7b      	ldr	r3, [pc, #492]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x320>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b80      	cmp	r3, #128	@ 0x80
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e2c1      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002058:	f7ff fa72 	bl	8001540 <HAL_GetREVID>
 800205c:	4603      	mov	r3, r0
 800205e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002062:	4293      	cmp	r3, r2
 8002064:	d817      	bhi.n	8002096 <HAL_RCC_OscConfig+0x35e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2b20      	cmp	r3, #32
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0x348>
 800206e:	4b70      	ldr	r3, [pc, #448]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002076:	4a6e      	ldr	r2, [pc, #440]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800207c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800207e:	e075      	b.n	800216c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002080:	4b6b      	ldr	r3, [pc, #428]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	4968      	ldr	r1, [pc, #416]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002094:	e06a      	b.n	800216c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002096:	4b66      	ldr	r3, [pc, #408]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	061b      	lsls	r3, r3, #24
 80020a4:	4962      	ldr	r1, [pc, #392]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020aa:	e05f      	b.n	800216c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d042      	beq.n	800213a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fa32 	bl	8001528 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020c8:	f7ff fa2e 	bl	8001528 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e280      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020da:	4b55      	ldr	r3, [pc, #340]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020e6:	f7ff fa2b 	bl	8001540 <HAL_GetREVID>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d817      	bhi.n	8002124 <HAL_RCC_OscConfig+0x3ec>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d108      	bne.n	800210e <HAL_RCC_OscConfig+0x3d6>
 80020fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002104:	4a4a      	ldr	r2, [pc, #296]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800210a:	6053      	str	r3, [r2, #4]
 800210c:	e02e      	b.n	800216c <HAL_RCC_OscConfig+0x434>
 800210e:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	069b      	lsls	r3, r3, #26
 800211c:	4944      	ldr	r1, [pc, #272]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
 8002122:	e023      	b.n	800216c <HAL_RCC_OscConfig+0x434>
 8002124:	4b42      	ldr	r3, [pc, #264]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	493f      	ldr	r1, [pc, #252]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3c      	ldr	r2, [pc, #240]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f9ef 	bl	8001528 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800214e:	f7ff f9eb 	bl	8001528 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e23d      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002160:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d036      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002184:	4a2a      	ldr	r2, [pc, #168]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f9cc 	bl	8001528 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f9c8 	bl	8001528 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e21a      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a6:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x45c>
 80021b2:	e018      	b.n	80021e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f9b2 	bl	8001528 <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff f9ae 	bl	8001528 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e200      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d039      	beq.n	8002266 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01c      	beq.n	8002234 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002206:	f7ff f98f 	bl	8001528 <HAL_GetTick>
 800220a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220e:	f7ff f98b 	bl	8001528 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1dd      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_RCC_OscConfig+0x4f8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x4d6>
 800222c:	e01b      	b.n	8002266 <HAL_RCC_OscConfig+0x52e>
 800222e:	bf00      	nop
 8002230:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002234:	4b9b      	ldr	r3, [pc, #620]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a9a      	ldr	r2, [pc, #616]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800223a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800223e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002240:	f7ff f972 	bl	8001528 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002248:	f7ff f96e 	bl	8001528 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1c0      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800225a:	4b92      	ldr	r3, [pc, #584]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8081 	beq.w	8002376 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002274:	4b8c      	ldr	r3, [pc, #560]	@ (80024a8 <HAL_RCC_OscConfig+0x770>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a8b      	ldr	r2, [pc, #556]	@ (80024a8 <HAL_RCC_OscConfig+0x770>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002280:	f7ff f952 	bl	8001528 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7ff f94e 	bl	8001528 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1a0      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229a:	4b83      	ldr	r3, [pc, #524]	@ (80024a8 <HAL_RCC_OscConfig+0x770>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x584>
 80022ae:	4b7d      	ldr	r3, [pc, #500]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a7c      	ldr	r2, [pc, #496]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ba:	e02d      	b.n	8002318 <HAL_RCC_OscConfig+0x5e0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x5a6>
 80022c4:	4b77      	ldr	r3, [pc, #476]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	4a76      	ldr	r2, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d0:	4b74      	ldr	r3, [pc, #464]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	4a73      	ldr	r2, [pc, #460]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	@ 0x70
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x5e0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c8>
 80022e6:	4b6f      	ldr	r3, [pc, #444]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a6e      	ldr	r2, [pc, #440]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f2:	4b6c      	ldr	r3, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a6b      	ldr	r2, [pc, #428]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x5e0>
 8002300:	4b68      	ldr	r3, [pc, #416]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a67      	ldr	r2, [pc, #412]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	4b65      	ldr	r3, [pc, #404]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a64      	ldr	r2, [pc, #400]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff f902 	bl	8001528 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7ff f8fe 	bl	8001528 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e14e      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800233e:	4b59      	ldr	r3, [pc, #356]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ee      	beq.n	8002328 <HAL_RCC_OscConfig+0x5f0>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f8ec 	bl	8001528 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff f8e8 	bl	8001528 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e138      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800236a:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ee      	bne.n	8002354 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 812d 	beq.w	80025da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002380:	4b48      	ldr	r3, [pc, #288]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002388:	2b18      	cmp	r3, #24
 800238a:	f000 80bd 	beq.w	8002508 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2b02      	cmp	r3, #2
 8002394:	f040 809e 	bne.w	80024d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b42      	ldr	r3, [pc, #264]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a41      	ldr	r2, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff f8c0 	bl	8001528 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7ff f8bc 	bl	8001528 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e10e      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023be:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ca:	4b36      	ldr	r3, [pc, #216]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ce:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <HAL_RCC_OscConfig+0x774>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	430a      	orrs	r2, r1
 80023de:	4931      	ldr	r1, [pc, #196]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	3b01      	subs	r3, #1
 80023ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	3b01      	subs	r3, #1
 80023f4:	025b      	lsls	r3, r3, #9
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	3b01      	subs	r3, #1
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002414:	4923      	ldr	r1, [pc, #140]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a21      	ldr	r2, [pc, #132]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242a:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800242c:	4013      	ands	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	491b      	ldr	r1, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002436:	4313      	orrs	r3, r2
 8002438:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	f023 020c 	bic.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4917      	ldr	r1, [pc, #92]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	f023 0202 	bic.w	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	4912      	ldr	r1, [pc, #72]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	4a10      	ldr	r2, [pc, #64]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_RCC_OscConfig+0x76c>)
 8002494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f845 	bl	8001528 <HAL_GetTick>
 800249e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x78e>
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58024800 	.word	0x58024800
 80024ac:	fffffc0c 	.word	0xfffffc0c
 80024b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f838 	bl	8001528 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e08a      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c6:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x77c>
 80024d2:	e082      	b.n	80025da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	4b43      	ldr	r3, [pc, #268]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a42      	ldr	r2, [pc, #264]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80024da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f822 	bl	8001528 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff f81e 	bl	8001528 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e070      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024fa:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x7b0>
 8002506:	e068      	b.n	80025da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800250e:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	2b01      	cmp	r3, #1
 800251a:	d031      	beq.n	8002580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0203 	and.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d12a      	bne.n	8002580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d122      	bne.n	8002580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d11a      	bne.n	8002580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0a5b      	lsrs	r3, r3, #9
 800254e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d111      	bne.n	8002580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0e1b      	lsrs	r3, r3, #24
 8002572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02b      	b.n	80025dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800258e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d01f      	beq.n	80025da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800259a:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a6:	f7fe ffbf 	bl	8001528 <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025ac:	bf00      	nop
 80025ae:	f7fe ffbb 	bl	8001528 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d0f9      	beq.n	80025ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80025bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_RCC_OscConfig+0x8b0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025c6:	00d2      	lsls	r2, r2, #3
 80025c8:	4906      	ldr	r1, [pc, #24]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <HAL_RCC_OscConfig+0x8ac>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3730      	adds	r7, #48	@ 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	58024400 	.word	0x58024400
 80025e8:	ffff0007 	.word	0xffff0007

080025ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e19c      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b8a      	ldr	r3, [pc, #552]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b87      	ldr	r3, [pc, #540]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	4985      	ldr	r1, [pc, #532]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b83      	ldr	r3, [pc, #524]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e184      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	4b7b      	ldr	r3, [pc, #492]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002648:	429a      	cmp	r2, r3
 800264a:	d908      	bls.n	800265e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800264c:	4b78      	ldr	r3, [pc, #480]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4975      	ldr	r1, [pc, #468]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800265a:	4313      	orrs	r3, r2
 800265c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002676:	429a      	cmp	r2, r3
 8002678:	d908      	bls.n	800268c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	496a      	ldr	r1, [pc, #424]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	4b64      	ldr	r3, [pc, #400]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d908      	bls.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	495e      	ldr	r1, [pc, #376]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d908      	bls.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026d6:	4b56      	ldr	r3, [pc, #344]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4953      	ldr	r1, [pc, #332]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	429a      	cmp	r2, r3
 8002702:	d908      	bls.n	8002716 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b4a      	ldr	r3, [pc, #296]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f023 020f 	bic.w	r2, r3, #15
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4947      	ldr	r1, [pc, #284]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002712:	4313      	orrs	r3, r2
 8002714:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d055      	beq.n	80027ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002722:	4b43      	ldr	r3, [pc, #268]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4940      	ldr	r1, [pc, #256]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002730:	4313      	orrs	r3, r2
 8002732:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d107      	bne.n	800274c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800273c:	4b3c      	ldr	r3, [pc, #240]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d121      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0f6      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002754:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d115      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0ea      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800276c:	4b30      	ldr	r3, [pc, #192]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0de      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277c:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d6      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800278c:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f023 0207 	bic.w	r2, r3, #7
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4925      	ldr	r1, [pc, #148]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 800279a:	4313      	orrs	r3, r2
 800279c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279e:	f7fe fec3 	bl	8001528 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe febf 	bl	8001528 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e0be      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d1eb      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d208      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ea:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f023 020f 	bic.w	r2, r3, #15
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	490e      	ldr	r1, [pc, #56]	@ (8002830 <HAL_RCC_ClockConfig+0x244>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d214      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4906      	ldr	r1, [pc, #24]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b04      	ldr	r3, [pc, #16]	@ (800282c <HAL_RCC_ClockConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e086      	b.n	800293a <HAL_RCC_ClockConfig+0x34e>
 800282c:	52002000 	.word	0x52002000
 8002830:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800284c:	429a      	cmp	r2, r3
 800284e:	d208      	bcs.n	8002862 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002850:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4939      	ldr	r1, [pc, #228]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 800285e:	4313      	orrs	r3, r2
 8002860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800287a:	429a      	cmp	r2, r3
 800287c:	d208      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800287e:	4b31      	ldr	r3, [pc, #196]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	492e      	ldr	r1, [pc, #184]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	4b28      	ldr	r3, [pc, #160]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d208      	bcs.n	80028be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028ac:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4922      	ldr	r1, [pc, #136]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d208      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4917      	ldr	r1, [pc, #92]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028ec:	f000 f834 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	4912      	ldr	r1, [pc, #72]	@ (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x358>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <HAL_RCC_ClockConfig+0x360>)
 8002922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002924:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <HAL_RCC_ClockConfig+0x364>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_RCC_ClockConfig+0x368>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fc2e 	bl	8001190 <HAL_InitTick>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	58024400 	.word	0x58024400
 8002948:	0800ec98 	.word	0x0800ec98
 800294c:	24000004 	.word	0x24000004
 8002950:	24000000 	.word	0x24000000
 8002954:	24000008 	.word	0x24000008

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	@ 0x24
 800295c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295e:	4bb3      	ldr	r3, [pc, #716]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002966:	2b18      	cmp	r3, #24
 8002968:	f200 8155 	bhi.w	8002c16 <HAL_RCC_GetSysClockFreq+0x2be>
 800296c:	a201      	add	r2, pc, #4	@ (adr r2, 8002974 <HAL_RCC_GetSysClockFreq+0x1c>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	080029d9 	.word	0x080029d9
 8002978:	08002c17 	.word	0x08002c17
 800297c:	08002c17 	.word	0x08002c17
 8002980:	08002c17 	.word	0x08002c17
 8002984:	08002c17 	.word	0x08002c17
 8002988:	08002c17 	.word	0x08002c17
 800298c:	08002c17 	.word	0x08002c17
 8002990:	08002c17 	.word	0x08002c17
 8002994:	080029ff 	.word	0x080029ff
 8002998:	08002c17 	.word	0x08002c17
 800299c:	08002c17 	.word	0x08002c17
 80029a0:	08002c17 	.word	0x08002c17
 80029a4:	08002c17 	.word	0x08002c17
 80029a8:	08002c17 	.word	0x08002c17
 80029ac:	08002c17 	.word	0x08002c17
 80029b0:	08002c17 	.word	0x08002c17
 80029b4:	08002a05 	.word	0x08002a05
 80029b8:	08002c17 	.word	0x08002c17
 80029bc:	08002c17 	.word	0x08002c17
 80029c0:	08002c17 	.word	0x08002c17
 80029c4:	08002c17 	.word	0x08002c17
 80029c8:	08002c17 	.word	0x08002c17
 80029cc:	08002c17 	.word	0x08002c17
 80029d0:	08002c17 	.word	0x08002c17
 80029d4:	08002a0b 	.word	0x08002a0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d8:	4b94      	ldr	r3, [pc, #592]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029e4:	4b91      	ldr	r3, [pc, #580]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	4a90      	ldr	r2, [pc, #576]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029f6:	e111      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029fa:	61bb      	str	r3, [r7, #24]
      break;
 80029fc:	e10e      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a00:	61bb      	str	r3, [r7, #24]
      break;
 8002a02:	e10b      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a04:	4b8c      	ldr	r3, [pc, #560]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a06:	61bb      	str	r3, [r7, #24]
      break;
 8002a08:	e108      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a0a:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a14:	4b85      	ldr	r3, [pc, #532]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a20:	4b82      	ldr	r3, [pc, #520]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a2a:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80e1 	beq.w	8002c10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	f000 8083 	beq.w	8002b5c <HAL_RCC_GetSysClockFreq+0x204>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	f200 80a1 	bhi.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x248>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x114>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d056      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a6a:	e099      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02d      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a78:	4b6c      	ldr	r3, [pc, #432]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	4a6b      	ldr	r2, [pc, #428]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa2:	4b62      	ldr	r3, [pc, #392]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ab6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ad2:	e087      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ade:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae6:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b16:	e065      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2a:	4b40      	ldr	r3, [pc, #256]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5a:	e043      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b9e:	e021      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002be2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	0a5b      	lsrs	r3, r3, #9
 8002bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bee:	3301      	adds	r3, #1
 8002bf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c08:	ee17 3a90 	vmov	r3, s15
 8002c0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
      break;
 8002c14:	e002      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c16:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c18:	61bb      	str	r3, [r7, #24]
      break;
 8002c1a:	bf00      	nop
  }

  return sysclockfreq;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	@ 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	03d09000 	.word	0x03d09000
 8002c34:	003d0900 	.word	0x003d0900
 8002c38:	017d7840 	.word	0x017d7840
 8002c3c:	46000000 	.word	0x46000000
 8002c40:	4c742400 	.word	0x4c742400
 8002c44:	4a742400 	.word	0x4a742400
 8002c48:	4bbebc20 	.word	0x4bbebc20

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c52:	f7ff fe81 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490f      	ldr	r1, [pc, #60]	@ (8002ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	4a09      	ldr	r2, [pc, #36]	@ (8002ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	0800ec98 	.word	0x0800ec98
 8002ca4:	24000004 	.word	0x24000004
 8002ca8:	24000000 	.word	0x24000000

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cb0:	f7ff ffcc 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4904      	ldr	r1, [pc, #16]	@ (8002cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	0800ec98 	.word	0x0800ec98

08002cd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	223f      	movs	r2, #63	@ 0x3f
 8002ce6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0207 	and.w	r2, r3, #7
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002d18:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_GetClockConfig+0x7c>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_GetClockConfig+0x80>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	58024400 	.word	0x58024400
 8002d58:	52002000 	.word	0x52002000

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b0ca      	sub	sp, #296	@ 0x128
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d80:	2500      	movs	r5, #0
 8002d82:	ea54 0305 	orrs.w	r3, r4, r5
 8002d86:	d049      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d92:	d02f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d98:	d828      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da4:	d822      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002db0:	e01c      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db2:	4bb8      	ldr	r3, [pc, #736]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	4ab7      	ldr	r2, [pc, #732]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dbe:	e01a      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 f9d1 	bl	8004170 <RCCEx_PLL2_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dd4:	e00f      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dda:	3328      	adds	r3, #40	@ 0x28
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fa78 	bl	80042d4 <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e12:	e003      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e28:	f04f 0900 	mov.w	r9, #0
 8002e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8002e30:	d047      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d82a      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e59 	.word	0x08002e59
 8002e48:	08002e67 	.word	0x08002e67
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e9b 	.word	0x08002e9b
 8002e54:	08002e9b 	.word	0x08002e9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b8e      	ldr	r3, [pc, #568]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	4a8d      	ldr	r2, [pc, #564]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e64:	e01a      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f97e 	bl	8004170 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e7a:	e00f      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e80:	3328      	adds	r3, #40	@ 0x28
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fa25 	bl	80042d4 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	f023 0107 	bic.w	r1, r3, #7
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a78      	ldr	r2, [pc, #480]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002ece:	f04f 0b00 	mov.w	fp, #0
 8002ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ed6:	d04c      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee2:	d030      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee8:	d829      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eec:	d02d      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef0:	d825      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d018      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ef6:	2b80      	cmp	r3, #128	@ 0x80
 8002ef8:	d821      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d007      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f02:	e01c      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f04:	4b63      	ldr	r3, [pc, #396]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4a62      	ldr	r2, [pc, #392]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f10:	e01c      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f16:	3308      	adds	r3, #8
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f928 	bl	8004170 <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f26:	e011      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2c:	3328      	adds	r3, #40	@ 0x28
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f9cf 	bl	80042d4 <RCCEx_PLL3_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f54:	4b4f      	ldr	r3, [pc, #316]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	4a4c      	ldr	r2, [pc, #304]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	d053      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f9e:	d035      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fa4:	d82e      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002faa:	d031      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002fac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002fb0:	d828      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb6:	d01a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbc:	d822      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fc6:	d007      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002fc8:	e01c      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fca:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e01c      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fdc:	3308      	adds	r3, #8
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f8c5 	bl	8004170 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fec:	e011      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	3328      	adds	r3, #40	@ 0x28
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f96c 	bl	80042d4 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003002:	e006      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800300a:	e002      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800300c:	bf00      	nop
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800302a:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003046:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003050:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003054:	460b      	mov	r3, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	d056      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800305a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003066:	d038      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003068:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800306c:	d831      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800306e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003072:	d034      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003078:	d82b      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800307a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800307e:	d01d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003084:	d825      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800308a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003090:	e01f      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003098:	4ba2      	ldr	r3, [pc, #648]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	4aa1      	ldr	r2, [pc, #644]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030a4:	e01c      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030aa:	3308      	adds	r3, #8
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f85e 	bl	8004170 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80030ba:	e011      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	3328      	adds	r3, #40	@ 0x28
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f905 	bl	80042d4 <RCCEx_PLL3_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030f8:	4a8a      	ldr	r2, [pc, #552]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fe:	e003      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800311e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003122:	460b      	mov	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	d03a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	2b30      	cmp	r3, #48	@ 0x30
 8003130:	d01f      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003132:	2b30      	cmp	r3, #48	@ 0x30
 8003134:	d819      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003136:	2b20      	cmp	r3, #32
 8003138:	d00c      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d815      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d019      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d111      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003146:	4b77      	ldr	r3, [pc, #476]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	4a76      	ldr	r2, [pc, #472]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003152:	e011      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	3308      	adds	r3, #8
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f807 	bl	8004170 <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003180:	4b68      	ldr	r3, [pc, #416]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003184:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003190:	430b      	orrs	r3, r1
 8003192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003194:	e003      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80031b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d051      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c8:	d035      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80031ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ce:	d82e      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031d4:	d031      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80031d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031da:	d828      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e0:	d01a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e6:	d822      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f0:	d007      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80031f2:	e01c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003200:	e01c      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	3308      	adds	r3, #8
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ffb0 	bl	8004170 <RCCEx_PLL2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003216:	e011      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321c:	3328      	adds	r3, #40	@ 0x28
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f001 f857 	bl	80042d4 <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003244:	4b37      	ldr	r3, [pc, #220]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003248:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003252:	4a34      	ldr	r2, [pc, #208]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003254:	430b      	orrs	r3, r1
 8003256:	6513      	str	r3, [r2, #80]	@ 0x50
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800325e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800326e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003278:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800327c:	460b      	mov	r3, r1
 800327e:	4313      	orrs	r3, r2
 8003280:	d056      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800328c:	d033      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800328e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003292:	d82c      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003298:	d02f      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800329a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800329e:	d826      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032a4:	d02b      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80032a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032aa:	d820      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b0:	d012      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80032b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b6:	d81a      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d022      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d115      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	3308      	adds	r3, #8
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 ff50 	bl	8004170 <RCCEx_PLL2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032d6:	e015      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	3328      	adds	r3, #40	@ 0x28
 80032de:	2101      	movs	r1, #1
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fff7 	bl	80042d4 <RCCEx_PLL3_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032ec:	e00a      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800331a:	4a02      	ldr	r2, [pc, #8]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800331c:	430b      	orrs	r3, r1
 800331e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003320:	e006      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800333c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003346:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800334a:	460b      	mov	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	d055      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335c:	d033      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800335e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003362:	d82c      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003368:	d02f      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336e:	d826      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003374:	d02b      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800337a:	d820      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003380:	d012      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003386:	d81a      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800338c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003390:	d115      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	3308      	adds	r3, #8
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fee8 	bl	8004170 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033a6:	e015      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	3328      	adds	r3, #40	@ 0x28
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff8f 	bl	80042d4 <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033bc:	e00a      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033c4:	e006      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033c6:	bf00      	nop
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033dc:	4ba3      	ldr	r3, [pc, #652]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033ec:	4a9f      	ldr	r2, [pc, #636]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d037      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003426:	d00e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342c:	d816      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003436:	d111      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003438:	4b8c      	ldr	r3, [pc, #560]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	4a8b      	ldr	r2, [pc, #556]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003444:	e00f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	3308      	adds	r3, #8
 800344c:	2101      	movs	r1, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fe8e 	bl	8004170 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800346e:	4b7f      	ldr	r3, [pc, #508]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a7b      	ldr	r2, [pc, #492]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800347e:	430b      	orrs	r3, r1
 8003480:	6513      	str	r3, [r2, #80]	@ 0x50
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d039      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d81c      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80034b6:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034f9 	.word	0x080034f9
 80034c0:	080034cd 	.word	0x080034cd
 80034c4:	080034db 	.word	0x080034db
 80034c8:	080034f9 	.word	0x080034f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b67      	ldr	r3, [pc, #412]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	4a66      	ldr	r2, [pc, #408]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034d8:	e00f      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	3308      	adds	r3, #8
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fe44 	bl	8004170 <RCCEx_PLL2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034f6:	e000      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80034f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003502:	4b5a      	ldr	r3, [pc, #360]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	f023 0103 	bic.w	r1, r3, #3
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003510:	4a56      	ldr	r2, [pc, #344]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003512:	430b      	orrs	r3, r1
 8003514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003516:	e003      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800352c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003536:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	f000 809f 	beq.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003542:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a4a      	ldr	r2, [pc, #296]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354e:	f7fd ffeb 	bl	8001528 <HAL_GetTick>
 8003552:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003556:	e00b      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003558:	f7fd ffe6 	bl	8001528 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	@ 0x64
 8003566:	d903      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800356e:	e005      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003570:	4b3f      	ldr	r3, [pc, #252]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ed      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800357c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003580:	2b00      	cmp	r3, #0
 8003582:	d179      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003584:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003590:	4053      	eors	r3, r2
 8003592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800359a:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a6:	4b31      	ldr	r3, [pc, #196]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a30      	ldr	r2, [pc, #192]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b2:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035be:	4a2b      	ldr	r2, [pc, #172]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d2:	d118      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd ffa8 	bl	8001528 <HAL_GetTick>
 80035d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035dc:	e00d      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fd ffa3 	bl	8001528 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035e8:	1ad2      	subs	r2, r2, r3
 80035ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d903      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80035f8:	e005      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0eb      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360a:	2b00      	cmp	r3, #0
 800360c:	d129      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361e:	d10e      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003620:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003630:	091a      	lsrs	r2, r3, #4
 8003632:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003634:	4013      	ands	r3, r2
 8003636:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6113      	str	r3, [r2, #16]
 800363c:	e005      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003644:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003648:	6113      	str	r3, [r2, #16]
 800364a:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	e00e      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800366a:	e009      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800366c:	58024400 	.word	0x58024400
 8003670:	58024800 	.word	0x58024800
 8003674:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 0301 	and.w	r3, r2, #1
 800368c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003696:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	f000 8089 	beq.w	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a8:	2b28      	cmp	r3, #40	@ 0x28
 80036aa:	d86b      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	0800378d 	.word	0x0800378d
 80036b8:	08003785 	.word	0x08003785
 80036bc:	08003785 	.word	0x08003785
 80036c0:	08003785 	.word	0x08003785
 80036c4:	08003785 	.word	0x08003785
 80036c8:	08003785 	.word	0x08003785
 80036cc:	08003785 	.word	0x08003785
 80036d0:	08003785 	.word	0x08003785
 80036d4:	08003759 	.word	0x08003759
 80036d8:	08003785 	.word	0x08003785
 80036dc:	08003785 	.word	0x08003785
 80036e0:	08003785 	.word	0x08003785
 80036e4:	08003785 	.word	0x08003785
 80036e8:	08003785 	.word	0x08003785
 80036ec:	08003785 	.word	0x08003785
 80036f0:	08003785 	.word	0x08003785
 80036f4:	0800376f 	.word	0x0800376f
 80036f8:	08003785 	.word	0x08003785
 80036fc:	08003785 	.word	0x08003785
 8003700:	08003785 	.word	0x08003785
 8003704:	08003785 	.word	0x08003785
 8003708:	08003785 	.word	0x08003785
 800370c:	08003785 	.word	0x08003785
 8003710:	08003785 	.word	0x08003785
 8003714:	0800378d 	.word	0x0800378d
 8003718:	08003785 	.word	0x08003785
 800371c:	08003785 	.word	0x08003785
 8003720:	08003785 	.word	0x08003785
 8003724:	08003785 	.word	0x08003785
 8003728:	08003785 	.word	0x08003785
 800372c:	08003785 	.word	0x08003785
 8003730:	08003785 	.word	0x08003785
 8003734:	0800378d 	.word	0x0800378d
 8003738:	08003785 	.word	0x08003785
 800373c:	08003785 	.word	0x08003785
 8003740:	08003785 	.word	0x08003785
 8003744:	08003785 	.word	0x08003785
 8003748:	08003785 	.word	0x08003785
 800374c:	08003785 	.word	0x08003785
 8003750:	08003785 	.word	0x08003785
 8003754:	0800378d 	.word	0x0800378d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	3308      	adds	r3, #8
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd05 	bl	8004170 <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800376c:	e00f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3328      	adds	r3, #40	@ 0x28
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fdac 	bl	80042d4 <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003796:	4bbf      	ldr	r3, [pc, #764]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a4:	4abb      	ldr	r2, [pc, #748]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 0302 	and.w	r3, r2, #2
 80037c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d041      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d824      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80037de:	a201      	add	r2, pc, #4	@ (adr r2, 80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	08003831 	.word	0x08003831
 80037e8:	080037fd 	.word	0x080037fd
 80037ec:	08003813 	.word	0x08003813
 80037f0:	08003831 	.word	0x08003831
 80037f4:	08003831 	.word	0x08003831
 80037f8:	08003831 	.word	0x08003831
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	3308      	adds	r3, #8
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fcb3 	bl	8004170 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003810:	e00f      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	3328      	adds	r3, #40	@ 0x28
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd5a 	bl	80042d4 <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800383a:	4b96      	ldr	r3, [pc, #600]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	f023 0107 	bic.w	r1, r3, #7
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003848:	4a92      	ldr	r2, [pc, #584]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6553      	str	r3, [r2, #84]	@ 0x54
 800384e:	e003      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f002 0304 	and.w	r3, r2, #4
 8003864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800386e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d044      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003880:	2b05      	cmp	r3, #5
 8003882:	d825      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038d9 	.word	0x080038d9
 8003890:	080038a5 	.word	0x080038a5
 8003894:	080038bb 	.word	0x080038bb
 8003898:	080038d9 	.word	0x080038d9
 800389c:	080038d9 	.word	0x080038d9
 80038a0:	080038d9 	.word	0x080038d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	3308      	adds	r3, #8
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fc5f 	bl	8004170 <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038b8:	e00f      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038be:	3328      	adds	r3, #40	@ 0x28
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fd06 	bl	80042d4 <RCCEx_PLL3_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038ce:	e004      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d6:	e000      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80038d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10b      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	f023 0107 	bic.w	r1, r3, #7
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f2:	4a68      	ldr	r2, [pc, #416]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f002 0320 	and.w	r3, r2, #32
 800390e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d055      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392e:	d033      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003934:	d82c      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393a:	d02f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003940:	d826      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003946:	d02b      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800394c:	d820      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800394e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003952:	d012      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003958:	d81a      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d022      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800395e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003962:	d115      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	3308      	adds	r3, #8
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fbff 	bl	8004170 <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003978:	e015      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	3328      	adds	r3, #40	@ 0x28
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fca6 	bl	80042d4 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800398e:	e00a      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003998:	bf00      	nop
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ae:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	4a35      	ldr	r2, [pc, #212]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80039c4:	e003      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d058      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039fa:	d033      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80039fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a00:	d82c      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a06:	d02f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0c:	d826      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a12:	d02b      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a18:	d820      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a24:	d81a      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d022      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2e:	d115      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	3308      	adds	r3, #8
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fb99 	bl	8004170 <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a44:	e015      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3328      	adds	r3, #40	@ 0x28
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fc40 	bl	80042d4 <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a62:	e006      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a64:	bf00      	nop
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a68:	bf00      	nop
 8003a6a:	e002      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10e      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a8a:	4a02      	ldr	r2, [pc, #8]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003aba:	460b      	mov	r3, r1
 8003abc:	4313      	orrs	r3, r2
 8003abe:	d055      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ac8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003acc:	d033      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003ace:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ad2:	d82c      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad8:	d02f      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ade:	d826      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ae0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ae4:	d02b      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003ae6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003aea:	d820      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af0:	d012      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af6:	d81a      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d022      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b00:	d115      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b06:	3308      	adds	r3, #8
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fb30 	bl	8004170 <RCCEx_PLL2_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b16:	e015      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fbd7 	bl	80042d4 <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b36:	bf00      	nop
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b5c:	4a9d      	ldr	r2, [pc, #628]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 0308 	and.w	r3, r2, #8
 8003b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d01e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	3328      	adds	r3, #40	@ 0x28
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fb96 	bl	80042d4 <RCCEx_PLL3_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bb4:	4b87      	ldr	r3, [pc, #540]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc4:	4a83      	ldr	r2, [pc, #524]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	f002 0310 	and.w	r3, r2, #16
 8003bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003be0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d01e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	3328      	adds	r3, #40	@ 0x28
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb67 	bl	80042d4 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c12:	4b70      	ldr	r3, [pc, #448]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c22:	4a6c      	ldr	r2, [pc, #432]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d03e      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c54:	d022      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c5a:	d81b      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003c66:	e015      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fa7d 	bl	8004170 <RCCEx_PLL2_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	3328      	adds	r3, #40	@ 0x28
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fb24 	bl	80042d4 <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cb6:	4a47      	ldr	r2, [pc, #284]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cee:	d01f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003cf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cf4:	d818      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d00:	d007      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d02:	e011      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d04:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4a32      	ldr	r2, [pc, #200]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3328      	adds	r3, #40	@ 0x28
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fada 	bl	80042d4 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d3a:	4b26      	ldr	r3, [pc, #152]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	4a22      	ldr	r2, [pc, #136]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d66:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d68:	2300      	movs	r3, #0
 8003d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d70:	460b      	mov	r3, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	d034      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d007      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d88:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d94:	e00e      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f9e6 	bl	8004170 <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dca:	4a02      	ldr	r2, [pc, #8]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dee:	2300      	movs	r3, #0
 8003df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d00c      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	3328      	adds	r3, #40	@ 0x28
 8003e02:	2102      	movs	r1, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fa65 	bl	80042d4 <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e24:	2300      	movs	r3, #0
 8003e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	d038      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e3e:	d018      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e44:	d811      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4a:	d014      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e50:	d80b      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5c:	4bc3      	ldr	r3, [pc, #780]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	4ac2      	ldr	r2, [pc, #776]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e68:	e008      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e84:	4bb9      	ldr	r3, [pc, #740]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e94:	4ab5      	ldr	r2, [pc, #724]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ec0:	4baa      	ldr	r3, [pc, #680]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	4aa7      	ldr	r2, [pc, #668]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ef0:	4b9e      	ldr	r3, [pc, #632]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f00:	4a9a      	ldr	r2, [pc, #616]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	2300      	movs	r3, #0
 8003f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f22:	4b92      	ldr	r3, [pc, #584]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f30:	4a8e      	ldr	r2, [pc, #568]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f44:	2300      	movs	r3, #0
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d00e      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f52:	4b86      	ldr	r3, [pc, #536]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4a85      	ldr	r2, [pc, #532]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f5c:	6113      	str	r3, [r2, #16]
 8003f5e:	4b83      	ldr	r3, [pc, #524]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f60:	6919      	ldr	r1, [r3, #16]
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f6a:	4a80      	ldr	r2, [pc, #512]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f7e:	2300      	movs	r3, #0
 8003f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f8c:	4b77      	ldr	r3, [pc, #476]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9a:	4a74      	ldr	r2, [pc, #464]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fae:	2300      	movs	r3, #0
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	4a67      	ldr	r2, [pc, #412]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d011      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f8ba 	bl	8004170 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	2100      	movs	r1, #0
 800401c:	6239      	str	r1, [r7, #32]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
 8004024:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004028:	460b      	mov	r3, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	d011      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	3308      	adds	r3, #8
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f89a 	bl	8004170 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	2100      	movs	r1, #0
 800405c:	61b9      	str	r1, [r7, #24]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d011      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3308      	adds	r3, #8
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f87a 	bl	8004170 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	2100      	movs	r1, #0
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	3328      	adds	r3, #40	@ 0x28
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f90c 	bl	80042d4 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	2100      	movs	r1, #0
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d011      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3328      	adds	r3, #40	@ 0x28
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f8ec 	bl	80042d4 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	2100      	movs	r1, #0
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d011      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8cc 	bl	80042d4 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004152:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
}
 8004160:	4618      	mov	r0, r3
 8004162:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	58024400 	.word	0x58024400

08004170 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b03      	cmp	r3, #3
 8004188:	d101      	bne.n	800418e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e099      	b.n	80042c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800418e:	4b4f      	ldr	r3, [pc, #316]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a4e      	ldr	r2, [pc, #312]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004194:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419a:	f7fd f9c5 	bl	8001528 <HAL_GetTick>
 800419e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041a2:	f7fd f9c1 	bl	8001528 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e086      	b.n	80042c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b4:	4b45      	ldr	r3, [pc, #276]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041c0:	4b42      	ldr	r3, [pc, #264]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	493f      	ldr	r1, [pc, #252]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	025b      	lsls	r3, r3, #9
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004204:	4931      	ldr	r1, [pc, #196]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	492d      	ldr	r1, [pc, #180]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	f023 0220 	bic.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4928      	ldr	r1, [pc, #160]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800422e:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004234:	f023 0310 	bic.w	r3, r3, #16
 8004238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800423a:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800423c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800423e:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <RCCEx_PLL2_Config+0x160>)
 8004240:	4013      	ands	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	69d2      	ldr	r2, [r2, #28]
 8004246:	00d2      	lsls	r2, r2, #3
 8004248:	4920      	ldr	r1, [pc, #128]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800424e:	4b1f      	ldr	r3, [pc, #124]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	4a1e      	ldr	r2, [pc, #120]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004254:	f043 0310 	orr.w	r3, r3, #16
 8004258:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004260:	4b1a      	ldr	r3, [pc, #104]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004266:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800426a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800426c:	e00f      	b.n	800428e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004274:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a14      	ldr	r2, [pc, #80]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004280:	e005      	b.n	800428e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	4a11      	ldr	r2, [pc, #68]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800428c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800428e:	4b0f      	ldr	r3, [pc, #60]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a0e      	ldr	r2, [pc, #56]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 8004294:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fd f945 	bl	8001528 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042a2:	f7fd f941 	bl	8001528 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e006      	b.n	80042c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <RCCEx_PLL2_Config+0x15c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	58024400 	.word	0x58024400
 80042d0:	ffff0007 	.word	0xffff0007

080042d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d101      	bne.n	80042f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e099      	b.n	8004426 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fd f913 	bl	8001528 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004304:	e008      	b.n	8004318 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004306:	f7fd f90f 	bl	8001528 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e086      	b.n	8004426 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004324:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	051b      	lsls	r3, r3, #20
 8004332:	493f      	ldr	r1, [pc, #252]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	628b      	str	r3, [r1, #40]	@ 0x28
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	3b01      	subs	r3, #1
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	b29b      	uxth	r3, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	3b01      	subs	r3, #1
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004368:	4931      	ldr	r1, [pc, #196]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800436e:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492d      	ldr	r1, [pc, #180]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4928      	ldr	r1, [pc, #160]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004392:	4b27      	ldr	r3, [pc, #156]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	4a26      	ldr	r2, [pc, #152]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 8004398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <RCCEx_PLL3_Config+0x160>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	69d2      	ldr	r2, [r2, #28]
 80043aa:	00d2      	lsls	r2, r2, #3
 80043ac:	4920      	ldr	r1, [pc, #128]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043d0:	e00f      	b.n	80043f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	4a14      	ldr	r2, [pc, #80]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fd f893 	bl	8001528 <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004404:	e008      	b.n	8004418 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004406:	f7fd f88f 	bl	8001528 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <RCCEx_PLL3_Config+0x15c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
 8004434:	ffff0007 	.word	0xffff0007

08004438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e049      	b.n	80044de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f841 	bl	80044e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 f9e8 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e054      	b.n	80045be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a26      	ldr	r2, [pc, #152]	@ (80045cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453e:	d01d      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d115      	bne.n	80045a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d015      	beq.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004594:	d011      	beq.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	e008      	b.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e000      	b.n	80045bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40001800 	.word	0x40001800
 80045e4:	40014000 	.word	0x40014000
 80045e8:	00010007 	.word	0x00010007

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0202 	mvn.w	r2, #2
 8004620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8e9 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8db 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8ec 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d020      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8c3 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8b5 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8c6 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0208 	mvn.w	r2, #8
 80046b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f89d 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f88f 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8a0 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f877 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f869 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f87a 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fcde 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800477e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f913 	bl	80049ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00c      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f90b 	bl	80049c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f834 	bl	8004836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0220 	mvn.w	r2, #32
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f8d3 	bl	8004998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a46      	ldr	r2, [pc, #280]	@ (8004978 <TIM_Base_SetConfig+0x12c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a43      	ldr	r2, [pc, #268]	@ (800497c <TIM_Base_SetConfig+0x130>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a42      	ldr	r2, [pc, #264]	@ (8004980 <TIM_Base_SetConfig+0x134>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a41      	ldr	r2, [pc, #260]	@ (8004984 <TIM_Base_SetConfig+0x138>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a40      	ldr	r2, [pc, #256]	@ (8004988 <TIM_Base_SetConfig+0x13c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a35      	ldr	r2, [pc, #212]	@ (8004978 <TIM_Base_SetConfig+0x12c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ac:	d01b      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a32      	ldr	r2, [pc, #200]	@ (800497c <TIM_Base_SetConfig+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d017      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a31      	ldr	r2, [pc, #196]	@ (8004980 <TIM_Base_SetConfig+0x134>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <TIM_Base_SetConfig+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004988 <TIM_Base_SetConfig+0x13c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2e      	ldr	r2, [pc, #184]	@ (800498c <TIM_Base_SetConfig+0x140>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004990 <TIM_Base_SetConfig+0x144>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0x9a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004994 <TIM_Base_SetConfig+0x148>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a16      	ldr	r2, [pc, #88]	@ (8004978 <TIM_Base_SetConfig+0x12c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00f      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <TIM_Base_SetConfig+0x13c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a17      	ldr	r2, [pc, #92]	@ (800498c <TIM_Base_SetConfig+0x140>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a16      	ldr	r2, [pc, #88]	@ (8004990 <TIM_Base_SetConfig+0x144>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <TIM_Base_SetConfig+0x148>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	611a      	str	r2, [r3, #16]
  }
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <__NVIC_SetPriority>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db0a      	blt.n	80049fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	490c      	ldr	r1, [pc, #48]	@ (8004a20 <__NVIC_SetPriority+0x4c>)
 80049ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	440b      	add	r3, r1
 80049f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049fc:	e00a      	b.n	8004a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4908      	ldr	r1, [pc, #32]	@ (8004a24 <__NVIC_SetPriority+0x50>)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	440b      	add	r3, r1
 8004a12:	761a      	strb	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000e100 	.word	0xe000e100
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <SysTick_Handler+0x1c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a30:	f002 f958 	bl	8006ce4 <xTaskGetSchedulerState>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a3a:	f000 fd9d 	bl	8005578 <xPortSysTickHandler>
  }
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e010 	.word	0xe000e010

08004a48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f06f 0004 	mvn.w	r0, #4
 8004a52:	f7ff ffbf 	bl	80049d4 <__NVIC_SetPriority>
#endif
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
 8004a66:	603b      	str	r3, [r7, #0]
  return(result);
 8004a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a6e:	f06f 0305 	mvn.w	r3, #5
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e00c      	b.n	8004a90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <osKernelInitialize+0x44>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a7e:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <osKernelInitialize+0x44>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	e002      	b.n	8004a90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a90:	687b      	ldr	r3, [r7, #4]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	24000368 	.word	0x24000368

08004aa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aaa:	f3ef 8305 	mrs	r3, IPSR
 8004aae:	603b      	str	r3, [r7, #0]
  return(result);
 8004ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ab6:	f06f 0305 	mvn.w	r3, #5
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e010      	b.n	8004ae0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <osKernelStart+0x48>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d109      	bne.n	8004ada <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ac6:	f7ff ffbf 	bl	8004a48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <osKernelStart+0x48>)
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ad0:	f001 fcba 	bl	8006448 <vTaskStartScheduler>
      stat = osOK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e002      	b.n	8004ae0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ae0:	687b      	ldr	r3, [r7, #4]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	24000368 	.word	0x24000368

08004af0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08e      	sub	sp, #56	@ 0x38
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b00:	f3ef 8305 	mrs	r3, IPSR
 8004b04:	617b      	str	r3, [r7, #20]
  return(result);
 8004b06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d17e      	bne.n	8004c0a <osThreadNew+0x11a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d07b      	beq.n	8004c0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b16:	2318      	movs	r3, #24
 8004b18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d045      	beq.n	8004bb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <osThreadNew+0x48>
        name = attr->name;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <osThreadNew+0x6e>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b38      	cmp	r3, #56	@ 0x38
 8004b50:	d805      	bhi.n	8004b5e <osThreadNew+0x6e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <osThreadNew+0x72>
        return (NULL);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e054      	b.n	8004c0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <osThreadNew+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004b80:	d90a      	bls.n	8004b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <osThreadNew+0xa8>
        mem = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e010      	b.n	8004bba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10c      	bne.n	8004bba <osThreadNew+0xca>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d108      	bne.n	8004bba <osThreadNew+0xca>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <osThreadNew+0xca>
          mem = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e001      	b.n	8004bba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d110      	bne.n	8004be2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bc8:	9202      	str	r2, [sp, #8]
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f001 fa5a 	bl	8006090 <xTaskCreateStatic>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	e013      	b.n	8004c0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d110      	bne.n	8004c0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f107 0310 	add.w	r3, r7, #16
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f001 faa8 	bl	8006150 <xTaskCreate>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d001      	beq.n	8004c0a <osThreadNew+0x11a>
            hTask = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c0a:	693b      	ldr	r3, [r7, #16]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	@ 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c1c:	f3ef 8305 	mrs	r3, IPSR
 8004c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <osDelay+0x1c>
    stat = osErrorISR;
 8004c28:	f06f 0305 	mvn.w	r3, #5
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e007      	b.n	8004c40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 fbce 	bl	80063dc <vTaskDelay>
    }
  }

  return (stat);
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	@ (8004c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <vApplicationGetIdleTaskMemory+0x30>)
 8004c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	2400036c 	.word	0x2400036c
 8004c7c:	240003c8 	.word	0x240003c8

08004c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <vApplicationGetTimerTaskMemory+0x2c>)
 8004c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a06      	ldr	r2, [pc, #24]	@ (8004cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	240005c8 	.word	0x240005c8
 8004cb0:	24000624 	.word	0x24000624

08004cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	@ 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cc0:	f001 fc2a 	bl	8006518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e38 <pvPortMalloc+0x184>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ccc:	f000 f924 	bl	8004f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e3c <pvPortMalloc+0x188>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 8095 	bne.w	8004e08 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01e      	beq.n	8004d22 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d015      	beq.n	8004d22 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d06f      	beq.n	8004e08 <pvPortMalloc+0x154>
 8004d28:	4b45      	ldr	r3, [pc, #276]	@ (8004e40 <pvPortMalloc+0x18c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d86a      	bhi.n	8004e08 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <pvPortMalloc+0x190>)
 8004d34:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d36:	4b43      	ldr	r3, [pc, #268]	@ (8004e44 <pvPortMalloc+0x190>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3c:	e004      	b.n	8004d48 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d903      	bls.n	8004d5a <pvPortMalloc+0xa6>
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f1      	bne.n	8004d3e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d5a:	4b37      	ldr	r3, [pc, #220]	@ (8004e38 <pvPortMalloc+0x184>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d051      	beq.n	8004e08 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	4413      	add	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	2308      	movs	r3, #8
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d920      	bls.n	8004dc8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <pvPortMalloc+0xfc>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	613b      	str	r3, [r7, #16]
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dc2:	69b8      	ldr	r0, [r7, #24]
 8004dc4:	f000 f90a 	bl	8004fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <pvPortMalloc+0x18c>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <pvPortMalloc+0x18c>)
 8004dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <pvPortMalloc+0x18c>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <pvPortMalloc+0x194>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d203      	bcs.n	8004dea <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004de2:	4b17      	ldr	r3, [pc, #92]	@ (8004e40 <pvPortMalloc+0x18c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <pvPortMalloc+0x194>)
 8004de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	4b13      	ldr	r3, [pc, #76]	@ (8004e3c <pvPortMalloc+0x188>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dfe:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <pvPortMalloc+0x198>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <pvPortMalloc+0x198>)
 8004e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e08:	f001 fb94 	bl	8006534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <pvPortMalloc+0x17a>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60fb      	str	r3, [r7, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <pvPortMalloc+0x176>
	return pvReturn;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3728      	adds	r7, #40	@ 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2400462c 	.word	0x2400462c
 8004e3c:	24004640 	.word	0x24004640
 8004e40:	24004630 	.word	0x24004630
 8004e44:	24004624 	.word	0x24004624
 8004e48:	24004634 	.word	0x24004634
 8004e4c:	24004638 	.word	0x24004638

08004e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04f      	beq.n	8004f02 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e62:	2308      	movs	r3, #8
 8004e64:	425b      	negs	r3, r3
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b25      	ldr	r3, [pc, #148]	@ (8004f0c <vPortFree+0xbc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <vPortFree+0x46>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	60fb      	str	r3, [r7, #12]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <vPortFree+0x66>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60bb      	str	r3, [r7, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4b14      	ldr	r3, [pc, #80]	@ (8004f0c <vPortFree+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01e      	beq.n	8004f02 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11a      	bne.n	8004f02 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <vPortFree+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004edc:	f001 fb1c 	bl	8006518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <vPortFree+0xc0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a09      	ldr	r2, [pc, #36]	@ (8004f10 <vPortFree+0xc0>)
 8004eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f000 f874 	bl	8004fdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ef4:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <vPortFree+0xc4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	4a06      	ldr	r2, [pc, #24]	@ (8004f14 <vPortFree+0xc4>)
 8004efc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004efe:	f001 fb19 	bl	8006534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	24004640 	.word	0x24004640
 8004f10:	24004630 	.word	0x24004630
 8004f14:	2400463c 	.word	0x2400463c

08004f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f1e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <prvHeapInit+0xac>)
 8004f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3307      	adds	r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <prvHeapInit+0xac>)
 8004f48:	4413      	add	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <prvHeapInit+0xb0>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f56:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <prvHeapInit+0xb0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f64:	2208      	movs	r2, #8
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a15      	ldr	r2, [pc, #84]	@ (8004fcc <prvHeapInit+0xb4>)
 8004f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f7a:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <prvHeapInit+0xb4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <prvHeapInit+0xb4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <prvHeapInit+0xb4>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <prvHeapInit+0xb8>)
 8004fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <prvHeapInit+0xbc>)
 8004fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <prvHeapInit+0xc0>)
 8004fb2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	24000a24 	.word	0x24000a24
 8004fc8:	24004624 	.word	0x24004624
 8004fcc:	2400462c 	.word	0x2400462c
 8004fd0:	24004634 	.word	0x24004634
 8004fd4:	24004630 	.word	0x24004630
 8004fd8:	24004640 	.word	0x24004640

08004fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fe4:	4b28      	ldr	r3, [pc, #160]	@ (8005088 <prvInsertBlockIntoFreeList+0xac>)
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e002      	b.n	8004ff0 <prvInsertBlockIntoFreeList+0x14>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d8f7      	bhi.n	8004fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d108      	bne.n	800501e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d118      	bne.n	8005064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b15      	ldr	r3, [pc, #84]	@ (800508c <prvInsertBlockIntoFreeList+0xb0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d00d      	beq.n	800505a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	441a      	add	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e008      	b.n	800506c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800505a:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <prvInsertBlockIntoFreeList+0xb0>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e003      	b.n	800506c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d002      	beq.n	800507a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	24004624 	.word	0x24004624
 800508c:	2400462c 	.word	0x2400462c

08005090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e00c      	b.n	800516c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3308      	adds	r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e002      	b.n	8005160 <vListInsert+0x2e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d2f6      	bcs.n	800515a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d103      	bne.n	80051d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b04      	subs	r3, #4
 8005208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b04      	subs	r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b04      	subs	r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005228:	4a0c      	ldr	r2, [pc, #48]	@ (800525c <pxPortInitialiseStack+0x64>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3b14      	subs	r3, #20
 8005232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b04      	subs	r3, #4
 800523e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f06f 0202 	mvn.w	r2, #2
 8005246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3b20      	subs	r3, #32
 800524c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	08005261 	.word	0x08005261

08005260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <prvTaskExitError+0x58>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d00b      	beq.n	800528c <prvTaskExitError+0x2c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <prvTaskExitError+0x28>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60bb      	str	r3, [r7, #8]
}
 800529e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052a0:	bf00      	nop
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0fc      	beq.n	80052a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	24000010 	.word	0x24000010
 80052bc:	00000000 	.word	0x00000000

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	2400468c 	.word	0x2400468c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	@ (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005316:	4b47      	ldr	r3, [pc, #284]	@ (8005434 <xPortStartScheduler+0x124>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10b      	bne.n	8005338 <xPortStartScheduler+0x28>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005338:	4b3e      	ldr	r3, [pc, #248]	@ (8005434 <xPortStartScheduler+0x124>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <xPortStartScheduler+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10b      	bne.n	800535a <xPortStartScheduler+0x4a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800535a:	4b39      	ldr	r3, [pc, #228]	@ (8005440 <xPortStartScheduler+0x130>)
 800535c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	22ff      	movs	r2, #255	@ 0xff
 800536a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <xPortStartScheduler+0x134>)
 8005380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <xPortStartScheduler+0x138>)
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005388:	e009      	b.n	800539e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <xPortStartScheduler+0x138>)
 8005392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d0ef      	beq.n	800538a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053aa:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <xPortStartScheduler+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1c3 0307 	rsb	r3, r3, #7
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00b      	beq.n	80053ce <xPortStartScheduler+0xbe>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60bb      	str	r3, [r7, #8]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <xPortStartScheduler+0x138>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <xPortStartScheduler+0x138>)
 80053e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <xPortStartScheduler+0x13c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <xPortStartScheduler+0x13c>)
 80053f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f8:	4b14      	ldr	r3, [pc, #80]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005404:	f000 f8da 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <xPortStartScheduler+0x140>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800540e:	f000 f8f9 	bl	8005604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <xPortStartScheduler+0x144>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0f      	ldr	r2, [pc, #60]	@ (8005454 <xPortStartScheduler+0x144>)
 8005418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800541c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800541e:	f7ff ff63 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005422:	f001 f9ef 	bl	8006804 <vTaskSwitchContext>
	prvTaskExitError();
 8005426:	f7ff ff1b 	bl	8005260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000ed00 	.word	0xe000ed00
 8005438:	410fc271 	.word	0x410fc271
 800543c:	410fc270 	.word	0x410fc270
 8005440:	e000e400 	.word	0xe000e400
 8005444:	24004644 	.word	0x24004644
 8005448:	24004648 	.word	0x24004648
 800544c:	e000ed20 	.word	0xe000ed20
 8005450:	24000010 	.word	0x24000010
 8005454:	e000ef34 	.word	0xe000ef34

08005458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <vPortEnterCritical+0x5c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a0e      	ldr	r2, [pc, #56]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800547c:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <vPortEnterCritical+0x60>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <vPortEnterCritical+0x4a>
	}
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	24000010 	.word	0x24000010
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <vPortExitCritical+0x26>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	607b      	str	r3, [r7, #4]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <vPortExitCritical+0x50>)
 80054ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <vPortExitCritical+0x50>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <vPortExitCritical+0x44>
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	24000010 	.word	0x24000010

08005510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f001 f960 	bl	8006804 <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	2400468c 	.word	0x2400468c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f001 f87d 	bl	8006690 <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <xPortSysTickHandler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	@ (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a09      	ldr	r2, [pc, #36]	@ (8005600 <vPortSetupTimerInterrupt+0x44>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	e000e018 	.word	0xe000e018
 80055f8:	24000000 	.word	0x24000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	e000e014 	.word	0xe000e014

08005604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005614 <vPortEnableVFP+0x10>
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800560e:	6001      	str	r1, [r0, #0]
 8005610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005612:	bf00      	nop
 8005614:	e000ed88 	.word	0xe000ed88

08005618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800561e:	f3ef 8305 	mrs	r3, IPSR
 8005622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d915      	bls.n	8005656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800562a:	4a18      	ldr	r2, [pc, #96]	@ (800568c <vPortValidateInterruptPriority+0x74>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005634:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <vPortValidateInterruptPriority+0x78>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	429a      	cmp	r2, r3
 800563c:	d20b      	bcs.n	8005656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <vPortValidateInterruptPriority+0x7c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <vPortValidateInterruptPriority+0x80>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d90b      	bls.n	800567e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	603b      	str	r3, [r7, #0]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <vPortValidateInterruptPriority+0x62>
	}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	e000e3f0 	.word	0xe000e3f0
 8005690:	24004644 	.word	0x24004644
 8005694:	e000ed0c 	.word	0xe000ed0c
 8005698:	24004648 	.word	0x24004648

0800569c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueGenericReset+0x2c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60bb      	str	r3, [r7, #8]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056c8:	f7ff fec6 	bl	8005458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	3b01      	subs	r3, #1
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	22ff      	movs	r2, #255	@ 0xff
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	22ff      	movs	r2, #255	@ 0xff
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d114      	bne.n	8005748 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01a      	beq.n	800575c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3310      	adds	r3, #16
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f91a 	bl	8006964 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d012      	beq.n	800575c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <xQueueGenericReset+0xd0>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	e009      	b.n	800575c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3310      	adds	r3, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fc9f 	bl	8005090 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3324      	adds	r3, #36	@ 0x24
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fc9a 	bl	8005090 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800575c:	f7ff feae 	bl	80054bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005760:	2301      	movs	r3, #1
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08e      	sub	sp, #56	@ 0x38
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <xQueueGenericCreateStatic+0x56>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <xQueueGenericCreateStatic+0x5a>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <xQueueGenericCreateStatic+0x5c>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	623b      	str	r3, [r7, #32]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <xQueueGenericCreateStatic+0x84>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <xQueueGenericCreateStatic+0x88>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <xQueueGenericCreateStatic+0x8a>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	61fb      	str	r3, [r7, #28]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005816:	2350      	movs	r3, #80	@ 0x50
 8005818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b50      	cmp	r3, #80	@ 0x50
 800581e:	d00b      	beq.n	8005838 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	61bb      	str	r3, [r7, #24]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005838:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800584c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f805 	bl	800586a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005862:	4618      	mov	r0, r3
 8005864:	3730      	adds	r7, #48	@ 0x30
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e002      	b.n	800588c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005898:	2101      	movs	r1, #1
 800589a:	69b8      	ldr	r0, [r7, #24]
 800589c:	f7ff fefe 	bl	800569c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	@ 0x38
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058be:	2300      	movs	r3, #0
 80058c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xQueueGenericSend+0x34>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	e7fd      	b.n	80058e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueGenericSend+0x42>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericSend+0x46>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGenericSend+0x48>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGenericSend+0x64>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d103      	bne.n	8005922 <xQueueGenericSend+0x72>
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <xQueueGenericSend+0x76>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueGenericSend+0x78>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueGenericSend+0x94>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	623b      	str	r3, [r7, #32]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005944:	f001 f9ce 	bl	8006ce4 <xTaskGetSchedulerState>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <xQueueGenericSend+0xa4>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <xQueueGenericSend+0xa8>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <xQueueGenericSend+0xaa>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <xQueueGenericSend+0xc6>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	61fb      	str	r3, [r7, #28]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005976:	f7ff fd6f 	bl	8005458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <xQueueGenericSend+0xdc>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d129      	bne.n	80059e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005992:	f000 fa0f 	bl	8005db4 <prvCopyDataToQueue>
 8005996:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	3324      	adds	r3, #36	@ 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 ffdd 	bl	8006964 <xTaskRemoveFromEventList>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059b0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab0 <xQueueGenericSend+0x200>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	e00a      	b.n	80059d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059c8:	4b39      	ldr	r3, [pc, #228]	@ (8005ab0 <xQueueGenericSend+0x200>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059d8:	f7ff fd70 	bl	80054bc <vPortExitCritical>
				return pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	e063      	b.n	8005aa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059e6:	f7ff fd69 	bl	80054bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e05c      	b.n	8005aa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f817 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059fe:	2301      	movs	r3, #1
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a02:	f7ff fd5b 	bl	80054bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a06:	f000 fd87 	bl	8006518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a0a:	f7ff fd25 	bl	8005458 <vPortEnterCritical>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d103      	bne.n	8005a24 <xQueueGenericSend+0x174>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <xQueueGenericSend+0x18a>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3a:	f7ff fd3f 	bl	80054bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a3e:	1d3a      	adds	r2, r7, #4
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 f806 	bl	8006a58 <xTaskCheckForTimeOut>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d124      	bne.n	8005a9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a54:	f000 faa6 	bl	8005fa4 <prvIsQueueFull>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	3310      	adds	r3, #16
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 ff2a 	bl	80068c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a6e:	f000 fa31 	bl	8005ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a72:	f000 fd5f 	bl	8006534 <xTaskResumeAll>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f47f af7c 	bne.w	8005976 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <xQueueGenericSend+0x200>)
 8005a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	e772      	b.n	8005976 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a92:	f000 fa1f 	bl	8005ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a96:	f000 fd4d 	bl	8006534 <xTaskResumeAll>
 8005a9a:	e76c      	b.n	8005976 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a9e:	f000 fa19 	bl	8005ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aa2:	f000 fd47 	bl	8006534 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3738      	adds	r7, #56	@ 0x38
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b090      	sub	sp, #64	@ 0x40
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	e7fd      	b.n	8005ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSendFromISR+0x3e>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <xQueueGenericSendFromISR+0x42>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueGenericSendFromISR+0x44>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10b      	bne.n	8005b14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d103      	bne.n	8005b22 <xQueueGenericSendFromISR+0x6e>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <xQueueGenericSendFromISR+0x72>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <xQueueGenericSendFromISR+0x74>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	623b      	str	r3, [r7, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b44:	f7ff fd68 	bl	8005618 <vPortValidateInterruptPriority>
	__asm volatile
 8005b48:	f3ef 8211 	mrs	r2, BASEPRI
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61fa      	str	r2, [r7, #28]
 8005b5e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005b60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d302      	bcc.n	8005b76 <xQueueGenericSendFromISR+0xc2>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d12f      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b8c:	f000 f912 	bl	8005db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d112      	bne.n	8005bc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	3324      	adds	r3, #36	@ 0x24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fedc 	bl	8006964 <xTaskRemoveFromEventList>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e007      	b.n	8005bd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	b25a      	sxtb	r2, r3
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bd4:	e001      	b.n	8005bda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bdc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f383 8811 	msr	BASEPRI, r3
}
 8005be4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3740      	adds	r7, #64	@ 0x40
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	@ 0x30
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <xQueueReceive+0x32>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	623b      	str	r3, [r7, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <xQueueReceive+0x40>
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <xQueueReceive+0x44>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <xQueueReceive+0x46>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <xQueueReceive+0x62>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61fb      	str	r3, [r7, #28]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c52:	f001 f847 	bl	8006ce4 <xTaskGetSchedulerState>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <xQueueReceive+0x72>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueReceive+0x76>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueReceive+0x78>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xQueueReceive+0x94>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61bb      	str	r3, [r7, #24]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c84:	f7ff fbe8 	bl	8005458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01f      	beq.n	8005cd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c98:	f000 f8f6 	bl	8005e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00f      	beq.n	8005ccc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	3310      	adds	r3, #16
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fe57 	bl	8006964 <xTaskRemoveFromEventList>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8005db0 <xQueueReceive+0x1c0>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ccc:	f7ff fbf6 	bl	80054bc <vPortExitCritical>
				return pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e069      	b.n	8005da8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cda:	f7ff fbef 	bl	80054bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e062      	b.n	8005da8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fe9d 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cf6:	f7ff fbe1 	bl	80054bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cfa:	f000 fc0d 	bl	8006518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cfe:	f7ff fbab 	bl	8005458 <vPortEnterCritical>
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d103      	bne.n	8005d18 <xQueueReceive+0x128>
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d103      	bne.n	8005d2e <xQueueReceive+0x13e>
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d2e:	f7ff fbc5 	bl	80054bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d32:	1d3a      	adds	r2, r7, #4
 8005d34:	f107 0310 	add.w	r3, r7, #16
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fe8c 	bl	8006a58 <xTaskCheckForTimeOut>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d123      	bne.n	8005d8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d48:	f000 f916 	bl	8005f78 <prvIsQueueEmpty>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d017      	beq.n	8005d82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	3324      	adds	r3, #36	@ 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fdb0 	bl	80068c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d62:	f000 f8b7 	bl	8005ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d66:	f000 fbe5 	bl	8006534 <xTaskResumeAll>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d189      	bne.n	8005c84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d70:	4b0f      	ldr	r3, [pc, #60]	@ (8005db0 <xQueueReceive+0x1c0>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	e780      	b.n	8005c84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d84:	f000 f8a6 	bl	8005ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d88:	f000 fbd4 	bl	8006534 <xTaskResumeAll>
 8005d8c:	e77a      	b.n	8005c84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d90:	f000 f8a0 	bl	8005ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d94:	f000 fbce 	bl	8006534 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d9a:	f000 f8ed 	bl	8005f78 <prvIsQueueEmpty>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f43f af6f 	beq.w	8005c84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3730      	adds	r7, #48	@ 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d14d      	bne.n	8005e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 ff9e 	bl	8006d20 <xTaskPriorityDisinherit>
 8005de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	e043      	b.n	8005e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d119      	bne.n	8005e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6858      	ldr	r0, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	f005 fc8d 	bl	800b71e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d32b      	bcc.n	8005e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	e026      	b.n	8005e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68d8      	ldr	r0, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	461a      	mov	r2, r3
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	f005 fc73 	bl	800b71e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	425b      	negs	r3, r3
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d207      	bcs.n	8005e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d105      	bne.n	8005e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d303      	bcc.n	8005ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68d9      	ldr	r1, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6838      	ldr	r0, [r7, #0]
 8005ec8:	f005 fc29 	bl	800b71e <memcpy>
	}
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005edc:	f7ff fabc 	bl	8005458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee8:	e011      	b.n	8005f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d012      	beq.n	8005f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fd34 	bl	8006964 <xTaskRemoveFromEventList>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f02:	f000 fe0d 	bl	8006b20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dce9      	bgt.n	8005eea <prvUnlockQueue+0x16>
 8005f16:	e000      	b.n	8005f1a <prvUnlockQueue+0x46>
					break;
 8005f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	22ff      	movs	r2, #255	@ 0xff
 8005f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f22:	f7ff facb 	bl	80054bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f26:	f7ff fa97 	bl	8005458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f32:	e011      	b.n	8005f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d012      	beq.n	8005f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3310      	adds	r3, #16
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd0f 	bl	8006964 <xTaskRemoveFromEventList>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f4c:	f000 fde8 	bl	8006b20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dce9      	bgt.n	8005f34 <prvUnlockQueue+0x60>
 8005f60:	e000      	b.n	8005f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	22ff      	movs	r2, #255	@ 0xff
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f6c:	f7ff faa6 	bl	80054bc <vPortExitCritical>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f80:	f7ff fa6a 	bl	8005458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e001      	b.n	8005f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f96:	f7ff fa91 	bl	80054bc <vPortExitCritical>

	return xReturn;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fac:	f7ff fa54 	bl	8005458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d102      	bne.n	8005fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e001      	b.n	8005fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fc6:	f7ff fa79 	bl	80054bc <vPortExitCritical>

	return xReturn;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e014      	b.n	800600e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8006024 <vQueueAddToRegistry+0x50>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ff0:	490c      	ldr	r1, [pc, #48]	@ (8006024 <vQueueAddToRegistry+0x50>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8006024 <vQueueAddToRegistry+0x50>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006006:	e006      	b.n	8006016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b07      	cmp	r3, #7
 8006012:	d9e7      	bls.n	8005fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	2400464c 	.word	0x2400464c

08006028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006038:	f7ff fa0e 	bl	8005458 <vPortEnterCritical>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <vQueueWaitForMessageRestricted+0x2a>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d103      	bne.n	8006068 <vQueueWaitForMessageRestricted+0x40>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006068:	f7ff fa28 	bl	80054bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	3324      	adds	r3, #36	@ 0x24
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fc45 	bl	800690c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006082:	6978      	ldr	r0, [r7, #20]
 8006084:	f7ff ff26 	bl	8005ed4 <prvUnlockQueue>
	}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08e      	sub	sp, #56	@ 0x38
 8006094:	af04      	add	r7, sp, #16
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	623b      	str	r3, [r7, #32]
}
 80060b6:	bf00      	nop
 80060b8:	bf00      	nop
 80060ba:	e7fd      	b.n	80060b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <xTaskCreateStatic+0x4a>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61fb      	str	r3, [r7, #28]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060da:	235c      	movs	r3, #92	@ 0x5c
 80060dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80060e2:	d00b      	beq.n	80060fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	61bb      	str	r3, [r7, #24]
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	e7fd      	b.n	80060f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01e      	beq.n	8006142 <xTaskCreateStatic+0xb2>
 8006104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01b      	beq.n	8006142 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800611c:	2300      	movs	r3, #0
 800611e:	9303      	str	r3, [sp, #12]
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f850 	bl	80061da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800613a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800613c:	f000 f8de 	bl	80062fc <prvAddNewTaskToReadyList>
 8006140:	e001      	b.n	8006146 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006146:	697b      	ldr	r3, [r7, #20]
	}
 8006148:	4618      	mov	r0, r3
 800614a:	3728      	adds	r7, #40	@ 0x28
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	@ 0x30
 8006154:	af04      	add	r7, sp, #16
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fda5 	bl	8004cb4 <pvPortMalloc>
 800616a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006172:	205c      	movs	r0, #92	@ 0x5c
 8006174:	f7fe fd9e 	bl	8004cb4 <pvPortMalloc>
 8006178:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	631a      	str	r2, [r3, #48]	@ 0x30
 8006186:	e005      	b.n	8006194 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006188:	6978      	ldr	r0, [r7, #20]
 800618a:	f7fe fe61 	bl	8004e50 <vPortFree>
 800618e:	e001      	b.n	8006194 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d017      	beq.n	80061ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	2300      	movs	r3, #0
 80061a6:	9303      	str	r3, [sp, #12]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	9302      	str	r3, [sp, #8]
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f80e 	bl	80061da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061be:	69f8      	ldr	r0, [r7, #28]
 80061c0:	f000 f89c 	bl	80062fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061c4:	2301      	movs	r3, #1
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e002      	b.n	80061d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061d0:	69bb      	ldr	r3, [r7, #24]
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b088      	sub	sp, #32
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	461a      	mov	r2, r3
 80061f2:	21a5      	movs	r1, #165	@ 0xa5
 80061f4:	f005 f9df 	bl	800b5b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006202:	440b      	add	r3, r1
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f023 0307 	bic.w	r3, r3, #7
 8006210:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	617b      	str	r3, [r7, #20]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01f      	beq.n	800627a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	e012      	b.n	8006266 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	7819      	ldrb	r1, [r3, #0]
 8006248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	3334      	adds	r3, #52	@ 0x34
 8006250:	460a      	mov	r2, r1
 8006252:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3301      	adds	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b0f      	cmp	r3, #15
 800626a:	d9e9      	bls.n	8006240 <prvInitialiseNewTask+0x66>
 800626c:	e000      	b.n	8006270 <prvInitialiseNewTask+0x96>
			{
				break;
 800626e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006278:	e003      	b.n	8006282 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	2b37      	cmp	r3, #55	@ 0x37
 8006286:	d901      	bls.n	800628c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006288:	2337      	movs	r3, #55	@ 0x37
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006290:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006296:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	2200      	movs	r2, #0
 800629c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe ff14 	bl	80050d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	3318      	adds	r3, #24
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe ff0f 	bl	80050d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	2200      	movs	r2, #0
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	68f9      	ldr	r1, [r7, #12]
 80062da:	69b8      	ldr	r0, [r7, #24]
 80062dc:	f7fe ff8c 	bl	80051f8 <pxPortInitialiseStack>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f2:	bf00      	nop
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006304:	f7ff f8a8 	bl	8005458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006308:	4b2d      	ldr	r3, [pc, #180]	@ (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	4a2c      	ldr	r2, [pc, #176]	@ (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 8006310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006312:	4b2c      	ldr	r3, [pc, #176]	@ (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800631a:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d110      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006328:	f000 fc1e 	bl	8006b68 <prvInitialiseTaskLists>
 800632c:	e00d      	b.n	800634a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800632e:	4b26      	ldr	r3, [pc, #152]	@ (80063c8 <prvAddNewTaskToReadyList+0xcc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006336:	4b23      	ldr	r3, [pc, #140]	@ (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d802      	bhi.n	800634a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006344:	4a1f      	ldr	r2, [pc, #124]	@ (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800634a:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <prvAddNewTaskToReadyList+0xd0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a1e      	ldr	r2, [pc, #120]	@ (80063cc <prvAddNewTaskToReadyList+0xd0>)
 8006352:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006354:	4b1d      	ldr	r3, [pc, #116]	@ (80063cc <prvAddNewTaskToReadyList+0xd0>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006360:	4b1b      	ldr	r3, [pc, #108]	@ (80063d0 <prvAddNewTaskToReadyList+0xd4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d903      	bls.n	8006370 <prvAddNewTaskToReadyList+0x74>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <prvAddNewTaskToReadyList+0xd4>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <prvAddNewTaskToReadyList+0xd8>)
 800637e:	441a      	add	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fe feaf 	bl	80050ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800638c:	f7ff f896 	bl	80054bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006390:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <prvAddNewTaskToReadyList+0xcc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d207      	bcs.n	80063b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063a6:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <prvAddNewTaskToReadyList+0xdc>)
 80063a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	24004b60 	.word	0x24004b60
 80063c4:	2400468c 	.word	0x2400468c
 80063c8:	24004b6c 	.word	0x24004b6c
 80063cc:	24004b7c 	.word	0x24004b7c
 80063d0:	24004b68 	.word	0x24004b68
 80063d4:	24004690 	.word	0x24004690
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ee:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <vTaskDelay+0x64>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <vTaskDelay+0x32>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800640e:	f000 f883 	bl	8006518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fdf5 	bl	8007004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800641a:	f000 f88b 	bl	8006534 <xTaskResumeAll>
 800641e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006426:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <vTaskDelay+0x68>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	24004b88 	.word	0x24004b88
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	@ 0x28
 800644c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006456:	463a      	mov	r2, r7
 8006458:	1d39      	adds	r1, r7, #4
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fbf4 	bl	8004c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	9202      	str	r2, [sp, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	460a      	mov	r2, r1
 8006476:	4922      	ldr	r1, [pc, #136]	@ (8006500 <vTaskStartScheduler+0xb8>)
 8006478:	4822      	ldr	r0, [pc, #136]	@ (8006504 <vTaskStartScheduler+0xbc>)
 800647a:	f7ff fe09 	bl	8006090 <xTaskCreateStatic>
 800647e:	4603      	mov	r3, r0
 8006480:	4a21      	ldr	r2, [pc, #132]	@ (8006508 <vTaskStartScheduler+0xc0>)
 8006482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006484:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <vTaskStartScheduler+0xc0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e001      	b.n	8006496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800649c:	f000 fe06 	bl	80070ac <xTimerCreateTimerTask>
 80064a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d116      	bne.n	80064d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	613b      	str	r3, [r7, #16]
}
 80064ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064bc:	4b13      	ldr	r3, [pc, #76]	@ (800650c <vTaskStartScheduler+0xc4>)
 80064be:	f04f 32ff 	mov.w	r2, #4294967295
 80064c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064c4:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <vTaskStartScheduler+0xc8>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064ca:	4b12      	ldr	r3, [pc, #72]	@ (8006514 <vTaskStartScheduler+0xcc>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064d0:	f7fe ff1e 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064d4:	e00f      	b.n	80064f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d10b      	bne.n	80064f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vTaskStartScheduler+0xaa>
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	0800ea8c 	.word	0x0800ea8c
 8006504:	08006b39 	.word	0x08006b39
 8006508:	24004b84 	.word	0x24004b84
 800650c:	24004b80 	.word	0x24004b80
 8006510:	24004b6c 	.word	0x24004b6c
 8006514:	24004b64 	.word	0x24004b64

08006518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <vTaskSuspendAll+0x18>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3301      	adds	r3, #1
 8006522:	4a03      	ldr	r2, [pc, #12]	@ (8006530 <vTaskSuspendAll+0x18>)
 8006524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006526:	bf00      	nop
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	24004b88 	.word	0x24004b88

08006534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006542:	4b42      	ldr	r3, [pc, #264]	@ (800664c <xTaskResumeAll+0x118>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xTaskResumeAll+0x2e>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	603b      	str	r3, [r7, #0]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006562:	f7fe ff79 	bl	8005458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006566:	4b39      	ldr	r3, [pc, #228]	@ (800664c <xTaskResumeAll+0x118>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	4a37      	ldr	r2, [pc, #220]	@ (800664c <xTaskResumeAll+0x118>)
 800656e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006570:	4b36      	ldr	r3, [pc, #216]	@ (800664c <xTaskResumeAll+0x118>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d162      	bne.n	800663e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006578:	4b35      	ldr	r3, [pc, #212]	@ (8006650 <xTaskResumeAll+0x11c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d05e      	beq.n	800663e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006580:	e02f      	b.n	80065e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006582:	4b34      	ldr	r3, [pc, #208]	@ (8006654 <xTaskResumeAll+0x120>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3318      	adds	r3, #24
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fe08 	bl	80051a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3304      	adds	r3, #4
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe fe03 	bl	80051a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006658 <xTaskResumeAll+0x124>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d903      	bls.n	80065b2 <xTaskResumeAll+0x7e>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006658 <xTaskResumeAll+0x124>)
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a27      	ldr	r2, [pc, #156]	@ (800665c <xTaskResumeAll+0x128>)
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe fd8e 	bl	80050ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d2:	4b23      	ldr	r3, [pc, #140]	@ (8006660 <xTaskResumeAll+0x12c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065dc:	4b21      	ldr	r3, [pc, #132]	@ (8006664 <xTaskResumeAll+0x130>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <xTaskResumeAll+0x120>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1cb      	bne.n	8006582 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065f0:	f000 fb58 	bl	8006ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006668 <xTaskResumeAll+0x134>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d010      	beq.n	8006622 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006600:	f000 f846 	bl	8006690 <xTaskIncrementTick>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800660a:	4b16      	ldr	r3, [pc, #88]	@ (8006664 <xTaskResumeAll+0x130>)
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3b01      	subs	r3, #1
 8006614:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f1      	bne.n	8006600 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800661c:	4b12      	ldr	r3, [pc, #72]	@ (8006668 <xTaskResumeAll+0x134>)
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006622:	4b10      	ldr	r3, [pc, #64]	@ (8006664 <xTaskResumeAll+0x130>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800662e:	4b0f      	ldr	r3, [pc, #60]	@ (800666c <xTaskResumeAll+0x138>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800663e:	f7fe ff3d 	bl	80054bc <vPortExitCritical>

	return xAlreadyYielded;
 8006642:	68bb      	ldr	r3, [r7, #8]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	24004b88 	.word	0x24004b88
 8006650:	24004b60 	.word	0x24004b60
 8006654:	24004b20 	.word	0x24004b20
 8006658:	24004b68 	.word	0x24004b68
 800665c:	24004690 	.word	0x24004690
 8006660:	2400468c 	.word	0x2400468c
 8006664:	24004b74 	.word	0x24004b74
 8006668:	24004b70 	.word	0x24004b70
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006676:	4b05      	ldr	r3, [pc, #20]	@ (800668c <xTaskGetTickCount+0x1c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800667c:	687b      	ldr	r3, [r7, #4]
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	24004b64 	.word	0x24004b64

08006690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669a:	4b4f      	ldr	r3, [pc, #316]	@ (80067d8 <xTaskIncrementTick+0x148>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 8090 	bne.w	80067c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066a4:	4b4d      	ldr	r3, [pc, #308]	@ (80067dc <xTaskIncrementTick+0x14c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066ac:	4a4b      	ldr	r2, [pc, #300]	@ (80067dc <xTaskIncrementTick+0x14c>)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d121      	bne.n	80066fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80066b8:	4b49      	ldr	r3, [pc, #292]	@ (80067e0 <xTaskIncrementTick+0x150>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <xTaskIncrementTick+0x4a>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	603b      	str	r3, [r7, #0]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <xTaskIncrementTick+0x46>
 80066da:	4b41      	ldr	r3, [pc, #260]	@ (80067e0 <xTaskIncrementTick+0x150>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	4b40      	ldr	r3, [pc, #256]	@ (80067e4 <xTaskIncrementTick+0x154>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a3e      	ldr	r2, [pc, #248]	@ (80067e0 <xTaskIncrementTick+0x150>)
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	4a3e      	ldr	r2, [pc, #248]	@ (80067e4 <xTaskIncrementTick+0x154>)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b3e      	ldr	r3, [pc, #248]	@ (80067e8 <xTaskIncrementTick+0x158>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a3c      	ldr	r2, [pc, #240]	@ (80067e8 <xTaskIncrementTick+0x158>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	f000 fad4 	bl	8006ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066fc:	4b3b      	ldr	r3, [pc, #236]	@ (80067ec <xTaskIncrementTick+0x15c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	429a      	cmp	r2, r3
 8006704:	d349      	bcc.n	800679a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006706:	4b36      	ldr	r3, [pc, #216]	@ (80067e0 <xTaskIncrementTick+0x150>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006710:	4b36      	ldr	r3, [pc, #216]	@ (80067ec <xTaskIncrementTick+0x15c>)
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	601a      	str	r2, [r3, #0]
					break;
 8006718:	e03f      	b.n	800679a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671a:	4b31      	ldr	r3, [pc, #196]	@ (80067e0 <xTaskIncrementTick+0x150>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d203      	bcs.n	800673a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006732:	4a2e      	ldr	r2, [pc, #184]	@ (80067ec <xTaskIncrementTick+0x15c>)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006738:	e02f      	b.n	800679a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fd30 	bl	80051a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	3318      	adds	r3, #24
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe fd27 	bl	80051a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675a:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <xTaskIncrementTick+0x160>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d903      	bls.n	800676a <xTaskIncrementTick+0xda>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	4a22      	ldr	r2, [pc, #136]	@ (80067f0 <xTaskIncrementTick+0x160>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <xTaskIncrementTick+0x164>)
 8006778:	441a      	add	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fe fcb2 	bl	80050ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678a:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <xTaskIncrementTick+0x168>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	429a      	cmp	r2, r3
 8006792:	d3b8      	bcc.n	8006706 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006798:	e7b5      	b.n	8006706 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800679a:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <xTaskIncrementTick+0x168>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a0:	4914      	ldr	r1, [pc, #80]	@ (80067f4 <xTaskIncrementTick+0x164>)
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d901      	bls.n	80067b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067b6:	4b11      	ldr	r3, [pc, #68]	@ (80067fc <xTaskIncrementTick+0x16c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e004      	b.n	80067ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006800 <xTaskIncrementTick+0x170>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006800 <xTaskIncrementTick+0x170>)
 80067cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	24004b88 	.word	0x24004b88
 80067dc:	24004b64 	.word	0x24004b64
 80067e0:	24004b18 	.word	0x24004b18
 80067e4:	24004b1c 	.word	0x24004b1c
 80067e8:	24004b78 	.word	0x24004b78
 80067ec:	24004b80 	.word	0x24004b80
 80067f0:	24004b68 	.word	0x24004b68
 80067f4:	24004690 	.word	0x24004690
 80067f8:	2400468c 	.word	0x2400468c
 80067fc:	24004b74 	.word	0x24004b74
 8006800:	24004b70 	.word	0x24004b70

08006804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800680a:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <vTaskSwitchContext+0xa8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006812:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <vTaskSwitchContext+0xac>)
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006818:	e042      	b.n	80068a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800681a:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <vTaskSwitchContext+0xac>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006820:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <vTaskSwitchContext+0xb0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e011      	b.n	800684c <vTaskSwitchContext+0x48>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <vTaskSwitchContext+0x42>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	607b      	str	r3, [r7, #4]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <vTaskSwitchContext+0x3e>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b01      	subs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	491a      	ldr	r1, [pc, #104]	@ (80068b8 <vTaskSwitchContext+0xb4>)
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0e3      	beq.n	8006828 <vTaskSwitchContext+0x24>
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a13      	ldr	r2, [pc, #76]	@ (80068b8 <vTaskSwitchContext+0xb4>)
 800686c:	4413      	add	r3, r2
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3308      	adds	r3, #8
 8006882:	429a      	cmp	r2, r3
 8006884:	d104      	bne.n	8006890 <vTaskSwitchContext+0x8c>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	4a09      	ldr	r2, [pc, #36]	@ (80068bc <vTaskSwitchContext+0xb8>)
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4a06      	ldr	r2, [pc, #24]	@ (80068b4 <vTaskSwitchContext+0xb0>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	24004b88 	.word	0x24004b88
 80068b0:	24004b74 	.word	0x24004b74
 80068b4:	24004b68 	.word	0x24004b68
 80068b8:	24004690 	.word	0x24004690
 80068bc:	2400468c 	.word	0x2400468c

080068c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068e8:	4b07      	ldr	r3, [pc, #28]	@ (8006908 <vTaskPlaceOnEventList+0x48>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3318      	adds	r3, #24
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fe fc1e 	bl	8005132 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f6:	2101      	movs	r1, #1
 80068f8:	6838      	ldr	r0, [r7, #0]
 80068fa:	f000 fb83 	bl	8007004 <prvAddCurrentTaskToDelayedList>
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	2400468c 	.word	0x2400468c

0800690c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	617b      	str	r3, [r7, #20]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006936:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <vTaskPlaceOnEventListRestricted+0x54>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3318      	adds	r3, #24
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7fe fbd3 	bl	80050ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800694a:	f04f 33ff 	mov.w	r3, #4294967295
 800694e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	68b8      	ldr	r0, [r7, #8]
 8006954:	f000 fb56 	bl	8007004 <prvAddCurrentTaskToDelayedList>
	}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	2400468c 	.word	0x2400468c

08006964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	60fb      	str	r3, [r7, #12]
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	e7fd      	b.n	800698e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	3318      	adds	r3, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fc04 	bl	80051a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800699c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <xTaskRemoveFromEventList+0xb0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11d      	bne.n	80069e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fbfb 	bl	80051a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b2:	4b19      	ldr	r3, [pc, #100]	@ (8006a18 <xTaskRemoveFromEventList+0xb4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d903      	bls.n	80069c2 <xTaskRemoveFromEventList+0x5e>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069be:	4a16      	ldr	r2, [pc, #88]	@ (8006a18 <xTaskRemoveFromEventList+0xb4>)
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4a13      	ldr	r2, [pc, #76]	@ (8006a1c <xTaskRemoveFromEventList+0xb8>)
 80069d0:	441a      	add	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7fe fb86 	bl	80050ea <vListInsertEnd>
 80069de:	e005      	b.n	80069ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3318      	adds	r3, #24
 80069e4:	4619      	mov	r1, r3
 80069e6:	480e      	ldr	r0, [pc, #56]	@ (8006a20 <xTaskRemoveFromEventList+0xbc>)
 80069e8:	f7fe fb7f 	bl	80050ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <xTaskRemoveFromEventList+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d905      	bls.n	8006a06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069fa:	2301      	movs	r3, #1
 80069fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <xTaskRemoveFromEventList+0xc4>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e001      	b.n	8006a0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a0a:	697b      	ldr	r3, [r7, #20]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	24004b88 	.word	0x24004b88
 8006a18:	24004b68 	.word	0x24004b68
 8006a1c:	24004690 	.word	0x24004690
 8006a20:	24004b20 	.word	0x24004b20
 8006a24:	2400468c 	.word	0x2400468c
 8006a28:	24004b74 	.word	0x24004b74

08006a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <vTaskInternalSetTimeOutState+0x24>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a3c:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <vTaskInternalSetTimeOutState+0x28>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	605a      	str	r2, [r3, #4]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	24004b78 	.word	0x24004b78
 8006a54:	24004b64 	.word	0x24004b64

08006a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60fb      	str	r3, [r7, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	e7fd      	b.n	8006a9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a9e:	f7fe fcdb 	bl	8005458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <xTaskCheckForTimeOut+0xc0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d102      	bne.n	8006ac2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
 8006ac0:	e023      	b.n	8006b0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4b15      	ldr	r3, [pc, #84]	@ (8006b1c <xTaskCheckForTimeOut+0xc4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d007      	beq.n	8006ade <xTaskCheckForTimeOut+0x86>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	e015      	b.n	8006b0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d20b      	bcs.n	8006b00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ff99 	bl	8006a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	e004      	b.n	8006b0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b0a:	f7fe fcd7 	bl	80054bc <vPortExitCritical>

	return xReturn;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	24004b64 	.word	0x24004b64
 8006b1c:	24004b78 	.word	0x24004b78

08006b20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b24:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <vTaskMissedYield+0x14>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	24004b74 	.word	0x24004b74

08006b38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b40:	f000 f852 	bl	8006be8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b44:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <prvIdleTask+0x28>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d9f9      	bls.n	8006b40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <prvIdleTask+0x2c>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b5c:	e7f0      	b.n	8006b40 <prvIdleTask+0x8>
 8006b5e:	bf00      	nop
 8006b60:	24004690 	.word	0x24004690
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	e00c      	b.n	8006b8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4a12      	ldr	r2, [pc, #72]	@ (8006bc8 <prvInitialiseTaskLists+0x60>)
 8006b80:	4413      	add	r3, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fa84 	bl	8005090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b37      	cmp	r3, #55	@ 0x37
 8006b92:	d9ef      	bls.n	8006b74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b94:	480d      	ldr	r0, [pc, #52]	@ (8006bcc <prvInitialiseTaskLists+0x64>)
 8006b96:	f7fe fa7b 	bl	8005090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b9a:	480d      	ldr	r0, [pc, #52]	@ (8006bd0 <prvInitialiseTaskLists+0x68>)
 8006b9c:	f7fe fa78 	bl	8005090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ba0:	480c      	ldr	r0, [pc, #48]	@ (8006bd4 <prvInitialiseTaskLists+0x6c>)
 8006ba2:	f7fe fa75 	bl	8005090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ba6:	480c      	ldr	r0, [pc, #48]	@ (8006bd8 <prvInitialiseTaskLists+0x70>)
 8006ba8:	f7fe fa72 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bac:	480b      	ldr	r0, [pc, #44]	@ (8006bdc <prvInitialiseTaskLists+0x74>)
 8006bae:	f7fe fa6f 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <prvInitialiseTaskLists+0x78>)
 8006bb4:	4a05      	ldr	r2, [pc, #20]	@ (8006bcc <prvInitialiseTaskLists+0x64>)
 8006bb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <prvInitialiseTaskLists+0x7c>)
 8006bba:	4a05      	ldr	r2, [pc, #20]	@ (8006bd0 <prvInitialiseTaskLists+0x68>)
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	24004690 	.word	0x24004690
 8006bcc:	24004af0 	.word	0x24004af0
 8006bd0:	24004b04 	.word	0x24004b04
 8006bd4:	24004b20 	.word	0x24004b20
 8006bd8:	24004b34 	.word	0x24004b34
 8006bdc:	24004b4c 	.word	0x24004b4c
 8006be0:	24004b18 	.word	0x24004b18
 8006be4:	24004b1c 	.word	0x24004b1c

08006be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bee:	e019      	b.n	8006c24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bf0:	f7fe fc32 	bl	8005458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf4:	4b10      	ldr	r3, [pc, #64]	@ (8006c38 <prvCheckTasksWaitingTermination+0x50>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe facf 	bl	80051a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <prvCheckTasksWaitingTermination+0x54>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c3c <prvCheckTasksWaitingTermination+0x54>)
 8006c0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	4a0a      	ldr	r2, [pc, #40]	@ (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c1a:	f7fe fc4f 	bl	80054bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f810 	bl	8006c44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	24004b34 	.word	0x24004b34
 8006c3c:	24004b60 	.word	0x24004b60
 8006c40:	24004b48 	.word	0x24004b48

08006c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d108      	bne.n	8006c68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe f8f8 	bl	8004e50 <vPortFree>
				vPortFree( pxTCB );
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fe f8f5 	bl	8004e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c66:	e019      	b.n	8006c9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d103      	bne.n	8006c7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe f8ec 	bl	8004e50 <vPortFree>
	}
 8006c78:	e010      	b.n	8006c9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d00b      	beq.n	8006c9c <prvDeleteTCB+0x58>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <prvDeleteTCB+0x54>
	}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006caa:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <prvResetNextTaskUnblockTime+0x38>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cbc:	e008      	b.n	8006cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbe:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <prvResetNextTaskUnblockTime+0x38>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cce:	6013      	str	r3, [r2, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	24004b18 	.word	0x24004b18
 8006ce0:	24004b80 	.word	0x24004b80

08006ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cea:	4b0b      	ldr	r3, [pc, #44]	@ (8006d18 <xTaskGetSchedulerState+0x34>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	607b      	str	r3, [r7, #4]
 8006cf6:	e008      	b.n	8006d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf8:	4b08      	ldr	r3, [pc, #32]	@ (8006d1c <xTaskGetSchedulerState+0x38>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d00:	2302      	movs	r3, #2
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	e001      	b.n	8006d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d06:	2300      	movs	r3, #0
 8006d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d0a:	687b      	ldr	r3, [r7, #4]
	}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	24004b6c 	.word	0x24004b6c
 8006d1c:	24004b88 	.word	0x24004b88

08006d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d058      	beq.n	8006de8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d36:	4b2f      	ldr	r3, [pc, #188]	@ (8006df4 <xTaskPriorityDisinherit+0xd4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d00b      	beq.n	8006d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d02c      	beq.n	8006de8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d128      	bne.n	8006de8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fa02 	bl	80051a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <xTaskPriorityDisinherit+0xd8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d903      	bls.n	8006dc8 <xTaskPriorityDisinherit+0xa8>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006df8 <xTaskPriorityDisinherit+0xd8>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <xTaskPriorityDisinherit+0xdc>)
 8006dd6:	441a      	add	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fe f983 	bl	80050ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de8:	697b      	ldr	r3, [r7, #20]
	}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	2400468c 	.word	0x2400468c
 8006df8:	24004b68 	.word	0x24004b68
 8006dfc:	24004690 	.word	0x24004690

08006e00 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e0a:	f7fe fb25 	bl	8005458 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e28:	2101      	movs	r1, #1
 8006e2a:	6838      	ldr	r0, [r7, #0]
 8006e2c:	f000 f8ea 	bl	8007004 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e30:	4b16      	ldr	r3, [pc, #88]	@ (8006e8c <ulTaskNotifyTake+0x8c>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e40:	f7fe fb3c 	bl	80054bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e44:	f7fe fb08 	bl	8005458 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e48:	4b0f      	ldr	r3, [pc, #60]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e64:	e004      	b.n	8006e70 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e66:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <ulTaskNotifyTake+0x88>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006e7a:	f7fe fb1f 	bl	80054bc <vPortExitCritical>

		return ulReturn;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	2400468c 	.word	0x2400468c
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	@ 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <xTaskGenericNotify+0x32>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61bb      	str	r3, [r7, #24]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006ec6:	f7fe fac7 	bl	8005458 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006ede:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d827      	bhi.n	8006f3e <xTaskGenericNotify+0xae>
 8006eee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <xTaskGenericNotify+0x64>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f61 	.word	0x08006f61
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f17 	.word	0x08006f17
 8006f00:	08006f23 	.word	0x08006f23
 8006f04:	08006f2b 	.word	0x08006f2b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f14:	e027      	b.n	8006f66 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f20:	e021      	b.n	8006f66 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f28:	e01d      	b.n	8006f66 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f2a:	7ffb      	ldrb	r3, [r7, #31]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d003      	beq.n	8006f38 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f36:	e016      	b.n	8006f66 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006f3c:	e013      	b.n	8006f66 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d00d      	beq.n	8006f64 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	617b      	str	r3, [r7, #20]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <xTaskGenericNotify+0xcc>
					break;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <xTaskGenericNotify+0xd6>

					break;
 8006f64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f66:	7ffb      	ldrb	r3, [r7, #31]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d13b      	bne.n	8006fe4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe f917 	bl	80051a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff4 <xTaskGenericNotify+0x164>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d903      	bls.n	8006f8a <xTaskGenericNotify+0xfa>
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff4 <xTaskGenericNotify+0x164>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <xTaskGenericNotify+0x168>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe f8a2 	bl	80050ea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <xTaskGenericNotify+0x136>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	613b      	str	r3, [r7, #16]
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fca:	4b0c      	ldr	r3, [pc, #48]	@ (8006ffc <xTaskGenericNotify+0x16c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d907      	bls.n	8006fe4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007000 <xTaskGenericNotify+0x170>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006fe4:	f7fe fa6a 	bl	80054bc <vPortExitCritical>

		return xReturn;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3728      	adds	r7, #40	@ 0x28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	24004b68 	.word	0x24004b68
 8006ff8:	24004690 	.word	0x24004690
 8006ffc:	2400468c 	.word	0x2400468c
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800700e:	4b21      	ldr	r3, [pc, #132]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x90>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007014:	4b20      	ldr	r3, [pc, #128]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x94>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3304      	adds	r3, #4
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe f8c2 	bl	80051a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d10a      	bne.n	800703e <prvAddCurrentTaskToDelayedList+0x3a>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702e:	4b1a      	ldr	r3, [pc, #104]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x94>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4819      	ldr	r0, [pc, #100]	@ (800709c <prvAddCurrentTaskToDelayedList+0x98>)
 8007038:	f7fe f857 	bl	80050ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800703c:	e026      	b.n	800708c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4413      	add	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007046:	4b14      	ldr	r3, [pc, #80]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x94>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	429a      	cmp	r2, r3
 8007054:	d209      	bcs.n	800706a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007056:	4b12      	ldr	r3, [pc, #72]	@ (80070a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x94>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3304      	adds	r3, #4
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe f865 	bl	8005132 <vListInsert>
}
 8007068:	e010      	b.n	800708c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706a:	4b0e      	ldr	r3, [pc, #56]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f7fe f85b 	bl	8005132 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d202      	bcs.n	800708c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007086:	4a08      	ldr	r2, [pc, #32]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6013      	str	r3, [r2, #0]
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	24004b64 	.word	0x24004b64
 8007098:	2400468c 	.word	0x2400468c
 800709c:	24004b4c 	.word	0x24004b4c
 80070a0:	24004b1c 	.word	0x24004b1c
 80070a4:	24004b18 	.word	0x24004b18
 80070a8:	24004b80 	.word	0x24004b80

080070ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070b6:	f000 fb13 	bl	80076e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007130 <xTimerCreateTimerTask+0x84>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d021      	beq.n	8007106 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070ca:	1d3a      	adds	r2, r7, #4
 80070cc:	f107 0108 	add.w	r1, r7, #8
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fd fdd3 	bl	8004c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	9202      	str	r2, [sp, #8]
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	2302      	movs	r3, #2
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2300      	movs	r3, #0
 80070ea:	460a      	mov	r2, r1
 80070ec:	4911      	ldr	r1, [pc, #68]	@ (8007134 <xTimerCreateTimerTask+0x88>)
 80070ee:	4812      	ldr	r0, [pc, #72]	@ (8007138 <xTimerCreateTimerTask+0x8c>)
 80070f0:	f7fe ffce 	bl	8006090 <xTaskCreateStatic>
 80070f4:	4603      	mov	r3, r0
 80070f6:	4a11      	ldr	r2, [pc, #68]	@ (800713c <xTimerCreateTimerTask+0x90>)
 80070f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070fa:	4b10      	ldr	r3, [pc, #64]	@ (800713c <xTimerCreateTimerTask+0x90>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10b      	bne.n	8007124 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	613b      	str	r3, [r7, #16]
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	e7fd      	b.n	8007120 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007124:	697b      	ldr	r3, [r7, #20]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	24004bbc 	.word	0x24004bbc
 8007134:	0800ea94 	.word	0x0800ea94
 8007138:	08007279 	.word	0x08007279
 800713c:	24004bc0 	.word	0x24004bc0

08007140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	@ 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <xTimerGenericCommand+0x30>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	623b      	str	r3, [r7, #32]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007170:	4b19      	ldr	r3, [pc, #100]	@ (80071d8 <xTimerGenericCommand+0x98>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02a      	beq.n	80071ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b05      	cmp	r3, #5
 8007188:	dc18      	bgt.n	80071bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800718a:	f7ff fdab 	bl	8006ce4 <xTaskGetSchedulerState>
 800718e:	4603      	mov	r3, r0
 8007190:	2b02      	cmp	r3, #2
 8007192:	d109      	bne.n	80071a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007194:	4b10      	ldr	r3, [pc, #64]	@ (80071d8 <xTimerGenericCommand+0x98>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	f107 0110 	add.w	r1, r7, #16
 800719c:	2300      	movs	r3, #0
 800719e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a0:	f7fe fb86 	bl	80058b0 <xQueueGenericSend>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80071a6:	e012      	b.n	80071ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071a8:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <xTimerGenericCommand+0x98>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	f107 0110 	add.w	r1, r7, #16
 80071b0:	2300      	movs	r3, #0
 80071b2:	2200      	movs	r2, #0
 80071b4:	f7fe fb7c 	bl	80058b0 <xQueueGenericSend>
 80071b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071ba:	e008      	b.n	80071ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <xTimerGenericCommand+0x98>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	f107 0110 	add.w	r1, r7, #16
 80071c4:	2300      	movs	r3, #0
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f7fe fc74 	bl	8005ab4 <xQueueGenericSendFromISR>
 80071cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3728      	adds	r7, #40	@ 0x28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	24004bbc 	.word	0x24004bbc

080071dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e6:	4b23      	ldr	r3, [pc, #140]	@ (8007274 <prvProcessExpiredTimer+0x98>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fd ffd5 	bl	80051a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d023      	beq.n	8007250 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	18d1      	adds	r1, r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f000 f8d5 	bl	80073c4 <prvInsertTimerInActiveList>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	2100      	movs	r1, #0
 800722a:	6978      	ldr	r0, [r7, #20]
 800722c:	f7ff ff88 	bl	8007140 <xTimerGenericCommand>
 8007230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d114      	bne.n	8007262 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	4798      	blx	r3
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	24004bb4 	.word	0x24004bb4

08007278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007280:	f107 0308 	add.w	r3, r7, #8
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f859 	bl	800733c <prvGetNextExpireTime>
 800728a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f805 	bl	80072a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007296:	f000 f8d7 	bl	8007448 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800729a:	bf00      	nop
 800729c:	e7f0      	b.n	8007280 <prvTimerTask+0x8>
	...

080072a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072aa:	f7ff f935 	bl	8006518 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ae:	f107 0308 	add.w	r3, r7, #8
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f866 	bl	8007384 <prvSampleTimeNow>
 80072b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d130      	bne.n	8007322 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <prvProcessTimerOrBlockTask+0x3c>
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d806      	bhi.n	80072dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ce:	f7ff f931 	bl	8006534 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ff81 	bl	80071dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072da:	e024      	b.n	8007326 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d008      	beq.n	80072f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072e2:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <prvProcessTimerOrBlockTask+0x90>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <prvProcessTimerOrBlockTask+0x50>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <prvProcessTimerOrBlockTask+0x52>
 80072f0:	2300      	movs	r3, #0
 80072f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007334 <prvProcessTimerOrBlockTask+0x94>)
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	f7fe fe91 	bl	8006028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007306:	f7ff f915 	bl	8006534 <xTaskResumeAll>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007310:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <prvProcessTimerOrBlockTask+0x98>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
}
 8007320:	e001      	b.n	8007326 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007322:	f7ff f907 	bl	8006534 <xTaskResumeAll>
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	24004bb8 	.word	0x24004bb8
 8007334:	24004bbc 	.word	0x24004bbc
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007344:	4b0e      	ldr	r3, [pc, #56]	@ (8007380 <prvGetNextExpireTime+0x44>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <prvGetNextExpireTime+0x16>
 800734e:	2201      	movs	r2, #1
 8007350:	e000      	b.n	8007354 <prvGetNextExpireTime+0x18>
 8007352:	2200      	movs	r2, #0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <prvGetNextExpireTime+0x44>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	e001      	b.n	8007370 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	24004bb4 	.word	0x24004bb4

08007384 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800738c:	f7ff f970 	bl	8006670 <xTaskGetTickCount>
 8007390:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <prvSampleTimeNow+0x3c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d205      	bcs.n	80073a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800739c:	f000 f93a 	bl	8007614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	e002      	b.n	80073ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ae:	4a04      	ldr	r2, [pc, #16]	@ (80073c0 <prvSampleTimeNow+0x3c>)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	24004bc4 	.word	0x24004bc4

080073c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d812      	bhi.n	8007410 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e01b      	b.n	8007436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073fe:	4b10      	ldr	r3, [pc, #64]	@ (8007440 <prvInsertTimerInActiveList+0x7c>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7fd fe92 	bl	8005132 <vListInsert>
 800740e:	e012      	b.n	8007436 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d206      	bcs.n	8007426 <prvInsertTimerInActiveList+0x62>
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d302      	bcc.n	8007426 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e007      	b.n	8007436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007426:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <prvInsertTimerInActiveList+0x80>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fd fe7e 	bl	8005132 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	24004bb8 	.word	0x24004bb8
 8007444:	24004bb4 	.word	0x24004bb4

08007448 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	@ 0x38
 800744c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800744e:	e0ce      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	da19      	bge.n	800748a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	3304      	adds	r3, #4
 800745a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	61fb      	str	r3, [r7, #28]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007480:	6850      	ldr	r0, [r2, #4]
 8007482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	4611      	mov	r1, r2
 8007488:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f2c0 80ae 	blt.w	80075ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	3304      	adds	r3, #4
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd fe7e 	bl	80051a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074a8:	463b      	mov	r3, r7
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff ff6a 	bl	8007384 <prvSampleTimeNow>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	f200 8097 	bhi.w	80075e8 <prvProcessReceivedCommands+0x1a0>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <prvProcessReceivedCommands+0x78>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	080074e9 	.word	0x080074e9
 80074cc:	0800755f 	.word	0x0800755f
 80074d0:	08007573 	.word	0x08007573
 80074d4:	080075bf 	.word	0x080075bf
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074e9 	.word	0x080074e9
 80074e0:	0800755f 	.word	0x0800755f
 80074e4:	08007573 	.word	0x08007573
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	18d1      	adds	r1, r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007508:	f7ff ff5c 	bl	80073c4 <prvInsertTimerInActiveList>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d06c      	beq.n	80075ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007518:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d061      	beq.n	80075ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	441a      	add	r2, r3
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753a:	f7ff fe01 	bl	8007140 <xTimerGenericCommand>
 800753e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d152      	bne.n	80075ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61bb      	str	r3, [r7, #24]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007570:	e03d      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	617b      	str	r3, [r7, #20]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	18d1      	adds	r1, r2, r3
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b8:	f7ff ff04 	bl	80073c4 <prvInsertTimerInActiveList>
					break;
 80075bc:	e017      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ce:	f7fd fc3f 	bl	8004e50 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075d2:	e00c      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075e6:	e002      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <prvProcessReceivedCommands+0x1a6>
					break;
 80075ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ee:	4b08      	ldr	r3, [pc, #32]	@ (8007610 <prvProcessReceivedCommands+0x1c8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	1d39      	adds	r1, r7, #4
 80075f4:	2200      	movs	r2, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fafa 	bl	8005bf0 <xQueueReceive>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f af26 	bne.w	8007450 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	3730      	adds	r7, #48	@ 0x30
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	24004bbc 	.word	0x24004bbc

08007614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761a:	e049      	b.n	80076b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800761c:	4b2e      	ldr	r3, [pc, #184]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	4b2c      	ldr	r3, [pc, #176]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fd fdb5 	bl	80051a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02f      	beq.n	80076b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d90e      	bls.n	8007680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800766e:	4b1a      	ldr	r3, [pc, #104]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fd fd5a 	bl	8005132 <vListInsert>
 800767e:	e017      	b.n	80076b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007680:	2300      	movs	r3, #0
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fd58 	bl	8007140 <xTimerGenericCommand>
 8007690:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	603b      	str	r3, [r7, #0]
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076b0:	4b09      	ldr	r3, [pc, #36]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1b0      	bne.n	800761c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076ba:	4b07      	ldr	r3, [pc, #28]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076c0:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a04      	ldr	r2, [pc, #16]	@ (80076d8 <prvSwitchTimerLists+0xc4>)
 80076c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076c8:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	24004bb4 	.word	0x24004bb4
 80076dc:	24004bb8 	.word	0x24004bb8

080076e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076e6:	f7fd feb7 	bl	8005458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ea:	4b15      	ldr	r3, [pc, #84]	@ (8007740 <prvCheckForValidListAndQueue+0x60>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d120      	bne.n	8007734 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076f2:	4814      	ldr	r0, [pc, #80]	@ (8007744 <prvCheckForValidListAndQueue+0x64>)
 80076f4:	f7fd fccc 	bl	8005090 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076f8:	4813      	ldr	r0, [pc, #76]	@ (8007748 <prvCheckForValidListAndQueue+0x68>)
 80076fa:	f7fd fcc9 	bl	8005090 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076fe:	4b13      	ldr	r3, [pc, #76]	@ (800774c <prvCheckForValidListAndQueue+0x6c>)
 8007700:	4a10      	ldr	r2, [pc, #64]	@ (8007744 <prvCheckForValidListAndQueue+0x64>)
 8007702:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <prvCheckForValidListAndQueue+0x70>)
 8007706:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <prvCheckForValidListAndQueue+0x68>)
 8007708:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770a:	2300      	movs	r3, #0
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <prvCheckForValidListAndQueue+0x74>)
 8007710:	4a11      	ldr	r2, [pc, #68]	@ (8007758 <prvCheckForValidListAndQueue+0x78>)
 8007712:	2110      	movs	r1, #16
 8007714:	200a      	movs	r0, #10
 8007716:	f7fe f82b 	bl	8005770 <xQueueGenericCreateStatic>
 800771a:	4603      	mov	r3, r0
 800771c:	4a08      	ldr	r2, [pc, #32]	@ (8007740 <prvCheckForValidListAndQueue+0x60>)
 800771e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <prvCheckForValidListAndQueue+0x60>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <prvCheckForValidListAndQueue+0x60>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	490b      	ldr	r1, [pc, #44]	@ (800775c <prvCheckForValidListAndQueue+0x7c>)
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fc50 	bl	8005fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007734:	f7fd fec2 	bl	80054bc <vPortExitCritical>
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	24004bbc 	.word	0x24004bbc
 8007744:	24004b8c 	.word	0x24004b8c
 8007748:	24004ba0 	.word	0x24004ba0
 800774c:	24004bb4 	.word	0x24004bb4
 8007750:	24004bb8 	.word	0x24004bb8
 8007754:	24004c68 	.word	0x24004c68
 8007758:	24004bc8 	.word	0x24004bc8
 800775c:	0800ea9c 	.word	0x0800ea9c

08007760 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ffdd 	bl	8007782 <metal_list_add_before>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6852      	ldr	r2, [r2, #4]
 80077e0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 f848 	bl	80098a8 <metal_machine_cache_flush>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f002 f846 	bl	80098be <metal_machine_cache_invalidate>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ffdd 	bl	8007806 <__metal_cache_flush>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ffdd 	bl	8007820 <__metal_cache_invalidate>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d008      	beq.n	8007890 <metal_bus_register+0x20>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <metal_bus_register+0x20>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <metal_bus_register+0x26>
		return -EINVAL;
 8007890:	f06f 0315 	mvn.w	r3, #21
 8007894:	e026      	b.n	80078e4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f855 	bl	800794c <metal_bus_find>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d102      	bne.n	80078ae <metal_bus_register+0x3e>
		return -EEXIST;
 80078a8:	f06f 0310 	mvn.w	r3, #16
 80078ac:	e01a      	b.n	80078e4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	331c      	adds	r3, #28
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff ff54 	bl	8007760 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3324      	adds	r3, #36	@ 0x24
 80078bc:	4619      	mov	r1, r3
 80078be:	480b      	ldr	r0, [pc, #44]	@ (80078ec <metal_bus_register+0x7c>)
 80078c0:	f7ff ff79 	bl	80077b6 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80078c4:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <metal_bus_register+0x80>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	d90a      	bls.n	80078e2 <metal_bus_register+0x72>
 80078cc:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <metal_bus_register+0x80>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <metal_bus_register+0x72>
 80078d4:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <metal_bus_register+0x80>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	4905      	ldr	r1, [pc, #20]	@ (80078f4 <metal_bus_register+0x84>)
 80078de:	2007      	movs	r0, #7
 80078e0:	4798      	blx	r3
	return 0;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	24004cc0 	.word	0x24004cc0
 80078f0:	24004cb8 	.word	0x24004cb8
 80078f4:	0800eaa4 	.word	0x0800eaa4

080078f8 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	@ 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff ff63 	bl	80077d0 <metal_list_del>
	if (bus->ops.bus_close)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 800791a:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <metal_bus_unregister+0x4c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b06      	cmp	r3, #6
 8007920:	d90a      	bls.n	8007938 <metal_bus_unregister+0x40>
 8007922:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <metal_bus_unregister+0x4c>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <metal_bus_unregister+0x40>
 800792a:	4b06      	ldr	r3, [pc, #24]	@ (8007944 <metal_bus_unregister+0x4c>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	4905      	ldr	r1, [pc, #20]	@ (8007948 <metal_bus_unregister+0x50>)
 8007934:	2007      	movs	r0, #7
 8007936:	4798      	blx	r3
	return 0;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	24004cb8 	.word	0x24004cb8
 8007948:	0800eab8 	.word	0x0800eab8

0800794c <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8007956:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <metal_bus_find+0x58>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e017      	b.n	800798e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b24      	subs	r3, #36	@ 0x24
 8007962:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f7f8 fcb8 	bl	80002e0 <strcmp>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d107      	bne.n	8007986 <metal_bus_find+0x3a>
			continue;
		if (result)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <metal_bus_find+0x36>
			*result = bus;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	601a      	str	r2, [r3, #0]
		return 0;
 8007982:	2300      	movs	r3, #0
 8007984:	e009      	b.n	800799a <metal_bus_find+0x4e>
			continue;
 8007986:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a05      	ldr	r2, [pc, #20]	@ (80079a8 <metal_bus_find+0x5c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d1e3      	bne.n	800795e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8007996:	f06f 0301 	mvn.w	r3, #1
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	24004cb8 	.word	0x24004cb8
 80079a8:	24004cc0 	.word	0x24004cc0

080079ac <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <metal_device_open+0x2e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <metal_device_open+0x2e>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d006      	beq.n	80079da <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <metal_device_open+0x2e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80079da:	f06f 0315 	mvn.w	r3, #21
 80079de:	e01f      	b.n	8007a20 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	4619      	mov	r1, r3
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ffb0 	bl	800794c <metal_bus_find>
 80079ec:	6178      	str	r0, [r7, #20]
	if (error)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <metal_device_open+0x4c>
		return error;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	e013      	b.n	8007a20 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <metal_device_open+0x5a>
		return -ENODEV;
 8007a00:	f06f 0312 	mvn.w	r3, #18
 8007a04:	e00c      	b.n	8007a20 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	4798      	blx	r3
 8007a12:	6178      	str	r0, [r7, #20]
	if (error)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <metal_device_open+0x72>
		return error;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	e000      	b.n	8007a20 <metal_device_open+0x74>

	return 0;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <metal_register_generic_device+0x22>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d902      	bls.n	8007a50 <metal_register_generic_device+0x28>
		return -EINVAL;
 8007a4a:	f06f 0315 	mvn.w	r3, #21
 8007a4e:	e009      	b.n	8007a64 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a06      	ldr	r2, [pc, #24]	@ (8007a6c <metal_register_generic_device+0x44>)
 8007a54:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	336c      	adds	r3, #108	@ 0x6c
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4804      	ldr	r0, [pc, #16]	@ (8007a70 <metal_register_generic_device+0x48>)
 8007a5e:	f7ff feaa 	bl	80077b6 <metal_list_add_tail>
			    &device->node);
	return 0;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	24000014 	.word	0x24000014
 8007a70:	24004cd0 	.word	0x24004cd0

08007a74 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007a80:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <metal_generic_dev_open+0x58>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e017      	b.n	8007ab8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	3b6c      	subs	r3, #108	@ 0x6c
 8007a8c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fc23 	bl	80002e0 <strcmp>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d107      	bne.n	8007ab0 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8007aa6:	6938      	ldr	r0, [r7, #16]
 8007aa8:	f000 f890 	bl	8007bcc <metal_generic_dev_sys_open>
 8007aac:	4603      	mov	r3, r0
 8007aae:	e009      	b.n	8007ac4 <metal_generic_dev_open+0x50>
			continue;
 8007ab0:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4a05      	ldr	r2, [pc, #20]	@ (8007ad0 <metal_generic_dev_open+0x5c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d1e3      	bne.n	8007a88 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8007ac0:	f06f 0312 	mvn.w	r3, #18
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	24004cb8 	.word	0x24004cb8
 8007ad0:	24004cd0 	.word	0x24004cd0

08007ad4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8007ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d009      	beq.n	8007afe <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	4613      	mov	r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	461a      	mov	r2, r3
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007afa:	f003 fe10 	bl	800b71e <memcpy>
	for (i = 0; i < nents_in; i++) {
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	e02f      	b.n	8007b64 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d114      	bne.n	8007b34 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	461a      	mov	r2, r3
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	4413      	add	r3, r2
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	461a      	mov	r2, r3
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	4413      	add	r3, r2
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	f7ff fe83 	bl	800783a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4613      	mov	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	4413      	add	r3, r2
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	461a      	mov	r2, r3
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	4413      	add	r3, r2
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7ff fe7b 	bl	8007854 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3301      	adds	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	dbcb      	blt.n	8007b04 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b086      	sub	sp, #24
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
 8007b88:	e017      	b.n	8007bba <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	461a      	mov	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	4413      	add	r3, r2
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	4413      	add	r3, r2
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f7ff fe50 	bl	8007854 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	dbe3      	blt.n	8007b8a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e013      	b.n	8007c02 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	3308      	adds	r3, #8
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8007bf6:	68b8      	ldr	r0, [r7, #8]
 8007bf8:	f000 f828 	bl	8007c4c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3e6      	bcc.n	8007bda <metal_generic_dev_sys_open+0xe>
 8007c0c:	e000      	b.n	8007c10 <metal_generic_dev_sys_open+0x44>
			break;
 8007c0e:	bf00      	nop
	}

	return 0;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8007c24:	4803      	ldr	r0, [pc, #12]	@ (8007c34 <metal_sys_init+0x18>)
 8007c26:	f7ff fe23 	bl	8007870 <metal_bus_register>
	return 0;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	24000014 	.word	0x24000014

08007c38 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8007c3c:	4802      	ldr	r0, [pc, #8]	@ (8007c48 <metal_sys_finish+0x10>)
 8007c3e:	f7ff fe5b 	bl	80078f8 <metal_bus_unregister>
}
 8007c42:	bf00      	nop
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	24000014 	.word	0x24000014

08007c4c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02c      	beq.n	8007cc0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e013      	b.n	8007cae <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f001 fe1b 	bl	80098d4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	3301      	adds	r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d9e2      	bls.n	8007c86 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <metal_list_init>:
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	int error = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4810      	ldr	r0, [pc, #64]	@ (8007d40 <metal_init+0x54>)
 8007cfe:	f003 fc5a 	bl	800b5b6 <memset>

	_metal.common.log_handler   = params->log_handler;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a0e      	ldr	r2, [pc, #56]	@ (8007d40 <metal_init+0x54>)
 8007d08:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791a      	ldrb	r2, [r3, #4]
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d40 <metal_init+0x54>)
 8007d10:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8007d12:	480c      	ldr	r0, [pc, #48]	@ (8007d44 <metal_init+0x58>)
 8007d14:	f7ff ffd8 	bl	8007cc8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8007d18:	480b      	ldr	r0, [pc, #44]	@ (8007d48 <metal_init+0x5c>)
 8007d1a:	f7ff ffd5 	bl	8007cc8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8007d1e:	480b      	ldr	r0, [pc, #44]	@ (8007d4c <metal_init+0x60>)
 8007d20:	f7ff ffd2 	bl	8007cc8 <metal_list_init>

	error = metal_sys_init(params);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff ff79 	bl	8007c1c <metal_sys_init>
 8007d2a:	60f8      	str	r0, [r7, #12]
	if (error)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <metal_init+0x4a>
		return error;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	e000      	b.n	8007d38 <metal_init+0x4c>

	return error;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	24004cb8 	.word	0x24004cb8
 8007d44:	24004cc0 	.word	0x24004cc0
 8007d48:	24004cc8 	.word	0x24004cc8
 8007d4c:	24004cd0 	.word	0x24004cd0

08007d50 <metal_finish>:

void metal_finish(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8007d54:	f7ff ff70 	bl	8007c38 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8007d58:	2220      	movs	r2, #32
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4802      	ldr	r0, [pc, #8]	@ (8007d68 <metal_finish+0x18>)
 8007d5e:	f003 fc2a 	bl	800b5b6 <memset>
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	24004cb8 	.word	0x24004cb8

08007d6c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d009      	beq.n	8007d94 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d804      	bhi.n	8007d94 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	4413      	add	r3, r2
 8007d92:	e000      	b.n	8007d96 <metal_io_virt+0x2a>
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8007da2:	b5b0      	push	{r4, r5, r7, lr}
 8007da4:	b08a      	sub	sp, #40	@ 0x28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8007db0:	f107 0310 	add.w	r3, r7, #16
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	605a      	str	r2, [r3, #4]
 8007dba:	609a      	str	r2, [r3, #8]
 8007dbc:	60da      	str	r2, [r3, #12]
 8007dbe:	611a      	str	r2, [r3, #16]
 8007dc0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	605a      	str	r2, [r3, #4]
	io->size = size;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dd8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ddc:	2b1f      	cmp	r3, #31
 8007dde:	d904      	bls.n	8007dea <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f04f 32ff 	mov.w	r2, #4294967295
 8007de6:	611a      	str	r2, [r3, #16]
 8007de8:	e006      	b.n	8007df8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8007dea:	2201      	movs	r2, #1
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007dfc:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <metal_io_init+0x7a>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e08:	f103 0418 	add.w	r4, r3, #24
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e16:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e1a:	e00a      	b.n	8007e32 <metal_io_init+0x90>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f103 0418 	add.w	r4, r3, #24
 8007e22:	f107 0510 	add.w	r5, r7, #16
 8007e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e2e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff ff0a 	bl	8007c4c <metal_sys_io_mem_map>
}
 8007e38:	bf00      	nop
 8007e3a:	3728      	adds	r7, #40	@ 0x28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}

08007e40 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b08b      	sub	sp, #44	@ 0x2c
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff8b 	bl	8007d6c <metal_io_virt>
 8007e56:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d902      	bls.n	8007e6c <metal_io_block_read+0x2c>
		return -ERANGE;
 8007e66:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8007e6a:	e05c      	b.n	8007f26 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d904      	bls.n	8007e84 <metal_io_block_read+0x44>
		len = io->size - offset;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a1c      	ldr	r4, [r3, #32]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2305      	movs	r3, #5
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	47a0      	blx	r4
 8007ea2:	6178      	str	r0, [r7, #20]
 8007ea4:	e03e      	b.n	8007f24 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8007ea6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8007eaa:	e00c      	b.n	8007ec6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	701a      	strb	r2, [r3, #0]
			dest++;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
			ptr++;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	61fb      	str	r3, [r7, #28]
			len--;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d017      	beq.n	8007efc <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1ea      	bne.n	8007eac <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007ee0:	e00c      	b.n	8007efc <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	3304      	adds	r3, #4
 8007eee:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	dcef      	bgt.n	8007ee2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8007f02:	e00c      	b.n	8007f1e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3301      	adds	r3, #1
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ef      	bne.n	8007f04 <metal_io_block_read+0xc4>
	}
	return retlen;
 8007f24:	697b      	ldr	r3, [r7, #20]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3724      	adds	r7, #36	@ 0x24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}

08007f2e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8007f2e:	b590      	push	{r4, r7, lr}
 8007f30:	b08b      	sub	sp, #44	@ 0x2c
 8007f32:	af02      	add	r7, sp, #8
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff ff14 	bl	8007d6c <metal_io_virt>
 8007f44:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d902      	bls.n	8007f5a <metal_io_block_write+0x2c>
		return -ERANGE;
 8007f54:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8007f58:	e05b      	b.n	8008012 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	441a      	add	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d904      	bls.n	8007f72 <metal_io_block_write+0x44>
		len = io->size - offset;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	2305      	movs	r3, #5
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	47a0      	blx	r4
 8007f90:	6178      	str	r0, [r7, #20]
 8007f92:	e03d      	b.n	8008010 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	701a      	strb	r2, [r3, #0]
			ptr++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
			source++;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	61bb      	str	r3, [r7, #24]
			len--;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d017      	beq.n	8007fe4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1ea      	bne.n	8007f94 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007fc8:	e00c      	b.n	8007fe4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	dcef      	bgt.n	8007fca <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8007fea:	e00c      	b.n	8008006 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ef      	bne.n	8007fec <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800800c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3724      	adds	r7, #36	@ 0x24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd90      	pop	{r4, r7, pc}

0800801a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800801a:	b590      	push	{r4, r7, lr}
 800801c:	b08b      	sub	sp, #44	@ 0x2c
 800801e:	af02      	add	r7, sp, #8
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fe9d 	bl	8007d6c <metal_io_virt>
 8008032:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	d902      	bls.n	8008048 <metal_io_block_set+0x2e>
		return -ERANGE;
 8008042:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008046:	e05d      	b.n	8008104 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	441a      	add	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	429a      	cmp	r2, r3
 8008054:	d904      	bls.n	8008060 <metal_io_block_set+0x46>
		len = io->size - offset;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008070:	79fa      	ldrb	r2, [r7, #7]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2305      	movs	r3, #5
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	47a0      	blx	r4
 800807e:	e040      	b.n	8008102 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e00a      	b.n	80080a0 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800808a:	79fa      	ldrb	r2, [r7, #7]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	4313      	orrs	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	3301      	adds	r3, #1
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d9f1      	bls.n	800808a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80080a6:	e008      	b.n	80080ba <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	79fa      	ldrb	r2, [r7, #7]
 80080ac:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	3301      	adds	r3, #1
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <metal_io_block_set+0xc4>
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1ee      	bne.n	80080a8 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080ca:	e008      	b.n	80080de <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3304      	adds	r3, #4
 80080d6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	3b04      	subs	r3, #4
 80080dc:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	dcf3      	bgt.n	80080cc <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80080e4:	e008      	b.n	80080f8 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	79fa      	ldrb	r2, [r7, #7]
 80080ea:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f3      	bne.n	80080e6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 80080fe:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008102:	693b      	ldr	r3, [r7, #16]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3724      	adds	r7, #36	@ 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd90      	pop	{r4, r7, pc}

0800810c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800810c:	b40e      	push	{r1, r2, r3}
 800810e:	b480      	push	{r7}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	4603      	mov	r3, r0
 8008116:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	b003      	add	sp, #12
 8008124:	4770      	bx	lr

08008126 <metal_io_virt>:
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d009      	beq.n	800814e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d804      	bhi.n	800814e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	4413      	add	r3, r2
 800814c:	e000      	b.n	8008150 <metal_io_virt+0x2a>
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	429a      	cmp	r2, r3
 8008178:	d201      	bcs.n	800817e <metal_io_virt_to_offset+0x22>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	e001      	b.n	8008182 <metal_io_virt_to_offset+0x26>
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b08c      	sub	sp, #48	@ 0x30
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff ffbf 	bl	8008126 <metal_io_virt>
 80081a8:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	699c      	ldr	r4, [r3, #24]
 80081b6:	79fa      	ldrb	r2, [r7, #7]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	47a0      	blx	r4
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	e059      	b.n	800827a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d012      	beq.n	80081f2 <metal_io_read+0x62>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10f      	bne.n	80081f2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	f3bf 8f5b 	dmb	ish
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f3bf 8f5b 	dmb	ish
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	76fb      	strb	r3, [r7, #27]
 80081e6:	7efb      	ldrb	r3, [r7, #27]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2200      	movs	r2, #0
 80081ec:	461c      	mov	r4, r3
 80081ee:	4615      	mov	r5, r2
 80081f0:	e043      	b.n	800827a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d012      	beq.n	800821e <metal_io_read+0x8e>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d10f      	bne.n	800821e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	627b      	str	r3, [r7, #36]	@ 0x24
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	f3bf 8f5b 	dmb	ish
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	f3bf 8f5b 	dmb	ish
 800820e:	b29b      	uxth	r3, r3
 8008210:	833b      	strh	r3, [r7, #24]
 8008212:	8b3b      	ldrh	r3, [r7, #24]
 8008214:	b29b      	uxth	r3, r3
 8008216:	2200      	movs	r2, #0
 8008218:	461c      	mov	r4, r3
 800821a:	4615      	mov	r5, r2
 800821c:	e02d      	b.n	800827a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d010      	beq.n	8008246 <metal_io_read+0xb6>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b04      	cmp	r3, #4
 8008228:	d10d      	bne.n	8008246 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	623b      	str	r3, [r7, #32]
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f3bf 8f5b 	dmb	ish
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f3bf 8f5b 	dmb	ish
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	461c      	mov	r4, r3
 8008242:	4615      	mov	r5, r2
 8008244:	e019      	b.n	800827a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d010      	beq.n	800826e <metal_io_read+0xde>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b04      	cmp	r3, #4
 8008250:	d10d      	bne.n	800826e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f3bf 8f5b 	dmb	ish
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f3bf 8f5b 	dmb	ish
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2200      	movs	r2, #0
 8008268:	461c      	mov	r4, r3
 800826a:	4615      	mov	r5, r2
 800826c:	e005      	b.n	800827a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800826e:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <metal_io_read+0xf8>)
 8008270:	4a06      	ldr	r2, [pc, #24]	@ (800828c <metal_io_read+0xfc>)
 8008272:	21f0      	movs	r1, #240	@ 0xf0
 8008274:	4806      	ldr	r0, [pc, #24]	@ (8008290 <metal_io_read+0x100>)
 8008276:	f002 f949 	bl	800a50c <__assert_func>
	return 0; /* quiet compiler */
}
 800827a:	4622      	mov	r2, r4
 800827c:	462b      	mov	r3, r5
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	3730      	adds	r7, #48	@ 0x30
 8008284:	46bd      	mov	sp, r7
 8008286:	bdb0      	pop	{r4, r5, r7, pc}
 8008288:	0800eb6c 	.word	0x0800eb6c
 800828c:	0800ed58 	.word	0x0800ed58
 8008290:	0800eb70 	.word	0x0800eb70

08008294 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b08f      	sub	sp, #60	@ 0x3c
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ff3e 	bl	8008126 <metal_io_virt>
 80082aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00c      	beq.n	80082ce <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	69dc      	ldr	r4, [r3, #28]
 80082b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80082cc:	e04e      	b.n	800836c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80082ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00e      	beq.n	80082f2 <metal_io_write+0x5e>
 80082d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10b      	bne.n	80082f2 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 80082da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082de:	783b      	ldrb	r3, [r7, #0]
 80082e0:	76fb      	strb	r3, [r7, #27]
 80082e2:	7efa      	ldrb	r2, [r7, #27]
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	f3bf 8f5b 	dmb	ish
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	f3bf 8f5b 	dmb	ish
 80082f0:	e03c      	b.n	800836c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 80082f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00e      	beq.n	8008316 <metal_io_write+0x82>
 80082f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d10b      	bne.n	8008316 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
 8008302:	883b      	ldrh	r3, [r7, #0]
 8008304:	833b      	strh	r3, [r7, #24]
 8008306:	8b3a      	ldrh	r2, [r7, #24]
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	f3bf 8f5b 	dmb	ish
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	f3bf 8f5b 	dmb	ish
 8008314:	e02a      	b.n	800836c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00e      	beq.n	800833a <metal_io_write+0xa6>
 800831c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800831e:	2b04      	cmp	r3, #4
 8008320:	d10b      	bne.n	800833a <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8008322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	f3bf 8f5b 	dmb	ish
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f5b 	dmb	ish
 8008338:	e018      	b.n	800836c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00e      	beq.n	800835e <metal_io_write+0xca>
 8008340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008342:	2b04      	cmp	r3, #4
 8008344:	d10b      	bne.n	800835e <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f3bf 8f5b 	dmb	ish
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f3bf 8f5b 	dmb	ish
 800835c:	e006      	b.n	800836c <metal_io_write+0xd8>
		metal_assert (0);
 800835e:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <metal_io_write+0xe0>)
 8008360:	4a05      	ldr	r2, [pc, #20]	@ (8008378 <metal_io_write+0xe4>)
 8008362:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8008366:	4805      	ldr	r0, [pc, #20]	@ (800837c <metal_io_write+0xe8>)
 8008368:	f002 f8d0 	bl	800a50c <__assert_func>
}
 800836c:	bf00      	nop
 800836e:	3734      	adds	r7, #52	@ 0x34
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}
 8008374:	0800eb6c 	.word	0x0800eb6c
 8008378:	0800ed68 	.word	0x0800ed68
 800837c:	0800eb70 	.word	0x0800eb70

08008380 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f002 f8dd 	bl	800a548 <malloc>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	free(ptr);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f002 f8d9 	bl	800a558 <free>
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3307      	adds	r3, #7
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff ffde 	bl	8008380 <metal_allocate_memory>
 80083c4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	2100      	movs	r1, #0
 80083d0:	68b8      	ldr	r0, [r7, #8]
 80083d2:	f003 f8f0 	bl	800b5b6 <memset>
	}

	return vqs;
 80083d6:	68bb      	ldr	r3, [r7, #8]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	3b18      	subs	r3, #24
 80083f8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	429a      	cmp	r2, r3
 8008402:	d905      	bls.n	8008410 <rproc_virtio_virtqueue_notify+0x30>
 8008404:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <rproc_virtio_virtqueue_notify+0x5c>)
 8008406:	4a0e      	ldr	r2, [pc, #56]	@ (8008440 <rproc_virtio_virtqueue_notify+0x60>)
 8008408:	2133      	movs	r1, #51	@ 0x33
 800840a:	480e      	ldr	r0, [pc, #56]	@ (8008444 <rproc_virtio_virtqueue_notify+0x64>)
 800840c:	f002 f87e 	bl	800a50c <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4613      	mov	r3, r2
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	4413      	add	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	440b      	add	r3, r1
 8008420:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	6810      	ldr	r0, [r2, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	6912      	ldr	r2, [r2, #16]
 800842e:	4611      	mov	r1, r2
 8008430:	4798      	blx	r3
}
 8008432:	bf00      	nop
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	0800ebb8 	.word	0x0800ebb8
 8008440:	0800ed38 	.word	0x0800ed38
 8008444:	0800ebd4 	.word	0x0800ebd4

08008448 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3b18      	subs	r3, #24
 8008454:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	3318      	adds	r3, #24
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff fe77 	bl	800815c <metal_io_virt_to_offset>
 800846e:	4601      	mov	r1, r0
 8008470:	2301      	movs	r3, #1
 8008472:	2205      	movs	r2, #5
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fe8b 	bl	8008190 <metal_io_read>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4613      	mov	r3, r2
 8008480:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8008482:	7afb      	ldrb	r3, [r7, #11]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800848c:	b5b0      	push	{r4, r5, r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af02      	add	r7, sp, #8
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3b18      	subs	r3, #24
 800849c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3318      	adds	r3, #24
 80084ae:	4619      	mov	r1, r3
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7ff fe53 	bl	800815c <metal_io_virt_to_offset>
 80084b6:	4601      	mov	r1, r0
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	2200      	movs	r2, #0
 80084bc:	461c      	mov	r4, r3
 80084be:	4615      	mov	r5, r2
 80084c0:	2301      	movs	r3, #1
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	2305      	movs	r3, #5
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	4622      	mov	r2, r4
 80084ca:	462b      	mov	r3, r5
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff fee1 	bl	8008294 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	6810      	ldr	r0, [r2, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	4611      	mov	r1, r2
 80084e0:	4798      	blx	r3
}
 80084e2:	bf00      	nop
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bdb0      	pop	{r4, r5, r7, pc}

080084ea <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3b18      	subs	r3, #24
 80084f6:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	330c      	adds	r3, #12
 8008508:	4619      	mov	r1, r3
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff fe26 	bl	800815c <metal_io_virt_to_offset>
 8008510:	4601      	mov	r1, r0
 8008512:	2304      	movs	r3, #4
 8008514:	2205      	movs	r2, #5
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff fe3a 	bl	8008190 <metal_io_read>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4613      	mov	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8008524:	68bb      	ldr	r3, [r7, #8]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800852e:	b5b0      	push	{r4, r5, r7, lr}
 8008530:	b088      	sub	sp, #32
 8008532:	af02      	add	r7, sp, #8
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3b18      	subs	r3, #24
 800853c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	330c      	adds	r3, #12
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff fe03 	bl	800815c <metal_io_virt_to_offset>
 8008556:	4601      	mov	r1, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	461c      	mov	r4, r3
 800855e:	4615      	mov	r5, r2
 8008560:	2304      	movs	r3, #4
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	2305      	movs	r3, #5
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff fe91 	bl	8008294 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	6810      	ldr	r0, [r2, #0]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	4611      	mov	r1, r2
 8008580:	4798      	blx	r3
}
 8008582:	bf00      	nop
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bdb0      	pop	{r4, r5, r7, pc}

0800858a <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80085e6:	2140      	movs	r1, #64	@ 0x40
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff ff4f 	bl	800848c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08e      	sub	sp, #56	@ 0x38
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	7e5b      	ldrb	r3, [r3, #25]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8008610:	2050      	movs	r0, #80	@ 0x50
 8008612:	f7ff feb5 	bl	8008380 <metal_allocate_memory>
 8008616:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	e092      	b.n	8008748 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8008622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008624:	4613      	mov	r3, r2
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	4413      	add	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fea7 	bl	8008380 <metal_allocate_memory>
 8008632:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8081 	beq.w	800873e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800863c:	2250      	movs	r2, #80	@ 0x50
 800863e:	2100      	movs	r1, #0
 8008640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008642:	f002 ffb8 	bl	800b5b6 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8008646:	2218      	movs	r2, #24
 8008648:	2100      	movs	r1, #0
 800864a:	6a38      	ldr	r0, [r7, #32]
 800864c:	f002 ffb3 	bl	800b5b6 <memset>
	vdev = &rpvdev->vdev;
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	3318      	adds	r3, #24
 8008654:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8008656:	2300      	movs	r3, #0
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
 800865a:	e025      	b.n	80086a8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8008660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	3318      	adds	r3, #24
 800866c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800866e:	4413      	add	r3, r2
 8008670:	3304      	adds	r3, #4
 8008672:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8008680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008682:	f7ff fe94 	bl	80083ae <virtqueue_allocate>
 8008686:	6178      	str	r0, [r7, #20]
		if (!vq)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d031      	beq.n	80086f2 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800868e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008690:	4613      	mov	r3, r2
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	4413      	add	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	461a      	mov	r2, r3
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	4413      	add	r3, r2
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a4:	3301      	adds	r3, #1
 80086a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3d5      	bcc.n	800865c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b4:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ba:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c6:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086de:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086e4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4a19      	ldr	r2, [pc, #100]	@ (8008750 <rproc_virtio_create_vdev+0x158>)
 80086ea:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	3318      	adds	r3, #24
 80086f0:	e02a      	b.n	8008748 <rproc_virtio_create_vdev+0x150>
			goto err1;
 80086f2:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 80086f4:	2300      	movs	r3, #0
 80086f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f8:	e019      	b.n	800872e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 80086fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086fc:	4613      	mov	r3, r2
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4413      	add	r3, r2
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	461a      	mov	r2, r3
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	4413      	add	r3, r2
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8008710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	461a      	mov	r2, r3
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	4413      	add	r3, r2
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fe38 	bl	8008398 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8008728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872a:	3301      	adds	r3, #1
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
 800872e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	429a      	cmp	r2, r3
 8008734:	d3e1      	bcc.n	80086fa <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8008736:	6a38      	ldr	r0, [r7, #32]
 8008738:	f7ff fe2e 	bl	8008398 <metal_free_memory>
 800873c:	e000      	b.n	8008740 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800873e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8008740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008742:	f7ff fe29 	bl	8008398 <metal_free_memory>
	return NULL;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3738      	adds	r7, #56	@ 0x38
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	0800ed14 	.word	0x0800ed14

08008754 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	429a      	cmp	r2, r3
 800876e:	d302      	bcc.n	8008776 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8008770:	f06f 0301 	mvn.w	r3, #1
 8008774:	e019      	b.n	80087aa <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4613      	mov	r3, r2
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4413      	add	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	440b      	add	r3, r1
 8008786:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	6a3a      	ldr	r2, [r7, #32]
 800878c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	b29a      	uxth	r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087a6:	609a      	str	r2, [r3, #8]

	return 0;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <rproc_virtio_notified+0x16>
		return -EINVAL;
 80087c6:	f06f 0315 	mvn.w	r3, #21
 80087ca:	e02c      	b.n	8008826 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d101      	bne.n	80087da <rproc_virtio_notified+0x24>
		return 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	e025      	b.n	8008826 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087de:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	e01a      	b.n	800881c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	440b      	add	r3, r1
 80087f6:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d003      	beq.n	800880a <rproc_virtio_notified+0x54>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d105      	bne.n	8008816 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8008810:	68b8      	ldr	r0, [r7, #8]
 8008812:	f001 fbca 	bl	8009faa <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	3301      	adds	r3, #1
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d3e0      	bcc.n	80087e6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fe02 	bl	8008448 <rproc_virtio_get_status>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8008852:	e7f4      	b.n	800883e <rproc_virtio_wait_remote_ready+0x10>
		return;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8008858:	bf00      	nop
	}
}
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8008868:	bf00      	nop
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	4611      	mov	r1, r2
 8008870:	f3bf 8f5b 	dmb	ish
 8008874:	e8d3 2f4f 	ldrexb	r2, [r3]
 8008878:	e8c3 1f40 	strexb	r0, r1, [r3]
 800887c:	2800      	cmp	r0, #0
 800887e:	d1f9      	bne.n	8008874 <__metal_mutex_acquire+0x14>
 8008880:	f3bf 8f5b 	dmb	ish
 8008884:	b2d3      	uxtb	r3, r2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1ef      	bne.n	800886a <__metal_mutex_acquire+0xa>
		;
	}
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f3bf 8f5b 	dmb	ish
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	f3bf 8f5b 	dmb	ish
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ffcc 	bl	8008860 <__metal_mutex_acquire>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ffdd 	bl	8008898 <__metal_mutex_release>
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <metal_list_add_before>:
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <metal_list_add_tail>:
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff ffdd 	bl	80088e6 <metal_list_add_before>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <metal_list_del>:
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6852      	ldr	r2, [r2, #4]
 8008944:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	009a      	lsls	r2, r3, #2
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	440a      	add	r2, r1
 800897e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	f002 021f 	and.w	r2, r2, #31
 8008986:	2001      	movs	r0, #1
 8008988:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4403      	add	r3, r0
 8008992:	430a      	orrs	r2, r1
 8008994:	601a      	str	r2, [r3, #0]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	2101      	movs	r1, #1
 80089c0:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80089c4:	4013      	ands	r3, r2
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	095b      	lsrs	r3, r3, #5
 80089e0:	009a      	lsls	r2, r3, #2
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	440a      	add	r2, r1
 80089e6:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	f002 021f 	and.w	r2, r2, #31
 80089ee:	2001      	movs	r0, #1
 80089f0:	fa00 f202 	lsl.w	r2, r0, r2
 80089f4:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4403      	add	r3, r0
 80089fc:	400a      	ands	r2, r1
 80089fe:	601a      	str	r2, [r3, #0]
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff ffc2 	bl	80089a2 <metal_bitmap_is_bit_set>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e002      	b.n	8008a4a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	3301      	adds	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d207      	bcs.n	8008a62 <metal_bitmap_next_clear_bit+0x30>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	4619      	mov	r1, r3
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff ffd8 	bl	8008a0c <metal_bitmap_is_bit_clear>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8008a62:	697b      	ldr	r3, [r7, #20]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <rpmsg_init_ept>:
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f002 fdb2 	bl	800b5ea <strncpy>
	ept->addr = src;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	2100      	movs	r1, #0
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ffb8 	bl	8008a32 <metal_bitmap_next_clear_bit>
 8008ac2:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d206      	bcs.n	8008ada <rpmsg_get_address+0x34>
		addr = nextbit;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff48 	bl	800896a <metal_bitmap_set_bit>
	}

	return addr;
 8008ada:	68fb      	ldr	r3, [r7, #12]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	da03      	bge.n	8008b00 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7ff ff69 	bl	80089d2 <metal_bitmap_clear_bit>
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	da05      	bge.n	8008b28 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff ff3f 	bl	80089a2 <metal_bitmap_is_bit_set>
 8008b24:	4603      	mov	r3, r0
 8008b26:	e000      	b.n	8008b2a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8008b28:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <rpmsg_is_address_set+0x2c>)
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	fffff82d 	.word	0xfffff82d

08008b38 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	da05      	bge.n	8008b58 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff ff0b 	bl	800896a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8008b54:	2300      	movs	r3, #0
 8008b56:	e000      	b.n	8008b5a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8008b58:	4b02      	ldr	r3, [pc, #8]	@ (8008b64 <rpmsg_set_address+0x2c>)
	}
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	fffff82d 	.word	0xfffff82d

08008b68 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8008b68:	b590      	push	{r4, r7, lr}
 8008b6a:	b089      	sub	sp, #36	@ 0x24
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <rpmsg_send_offchannel_raw+0x2a>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d006      	beq.n	8008b92 <rpmsg_send_offchannel_raw+0x2a>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <rpmsg_send_offchannel_raw+0x2a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d101      	bne.n	8008b96 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8008b92:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc8 <rpmsg_send_offchannel_raw+0x60>)
 8008b94:	e014      	b.n	8008bc0 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00c      	beq.n	8008bbe <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	47a0      	blx	r4
 8008bba:	4603      	mov	r3, r0
 8008bbc:	e000      	b.n	8008bc0 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8008bbe:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <rpmsg_send_offchannel_raw+0x60>)
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd90      	pop	{r4, r7, pc}
 8008bc8:	fffff82d 	.word	0xfffff82d

08008bcc <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b090      	sub	sp, #64	@ 0x40
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	2220      	movs	r2, #32
 8008be8:	4618      	mov	r0, r3
 8008bea:	f002 fcfe 	bl	800b5ea <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008bf2:	f107 030c 	add.w	r3, r7, #12
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	2228      	movs	r2, #40	@ 0x28
 8008bfc:	9200      	str	r2, [sp, #0]
 8008bfe:	2235      	movs	r2, #53	@ 0x35
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ffb1 	bl	8008b68 <rpmsg_send_offchannel_raw>
 8008c06:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8008c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da01      	bge.n	8008c12 <rpmsg_send_ns_message+0x46>
		return ret;
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c10:	e000      	b.n	8008c14 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3738      	adds	r7, #56	@ 0x38
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	e04b      	b.n	8008cca <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3b34      	subs	r3, #52	@ 0x34
 8008c3a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d006      	beq.n	8008c52 <rpmsg_get_endpoint+0x36>
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d101      	bne.n	8008c52 <rpmsg_get_endpoint+0x36>
			return ept;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	e040      	b.n	8008cd4 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d106      	bne.n	8008c6a <rpmsg_get_endpoint+0x4e>
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d101      	bne.n	8008c6a <rpmsg_get_endpoint+0x4e>
			return ept;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	e034      	b.n	8008cd4 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2220      	movs	r2, #32
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 fca5 	bl	800b5c6 <strncmp>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bf0c      	ite	eq
 8008c82:	2301      	moveq	r3, #1
 8008c84:	2300      	movne	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d018      	beq.n	8008cc2 <rpmsg_get_endpoint+0xa6>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d015      	beq.n	8008cc2 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d006      	beq.n	8008cac <rpmsg_get_endpoint+0x90>
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d101      	bne.n	8008cac <rpmsg_get_endpoint+0x90>
			return ept;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	e013      	b.n	8008cd4 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d107      	bne.n	8008cc4 <rpmsg_get_endpoint+0xa8>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d102      	bne.n	8008cc4 <rpmsg_get_endpoint+0xa8>
			return ept;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	e008      	b.n	8008cd4 <rpmsg_get_endpoint+0xb8>
			continue;
 8008cc2:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d1af      	bne.n	8008c32 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d016      	beq.n	8008d18 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d008      	beq.n	8008d0c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d04:	461a      	mov	r2, r3
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	f7ff feec 	bl	8008ae4 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3334      	adds	r3, #52	@ 0x34
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fe0f 	bl	8008934 <metal_list_del>
 8008d16:	e000      	b.n	8008d1a <rpmsg_unregister_endpoint+0x3e>
		return;
 8008d18:	bf00      	nop
}
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	3334      	adds	r3, #52	@ 0x34
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7ff fdee 	bl	800891a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	613b      	str	r3, [r7, #16]

	if (!ept)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8008d60:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <rpmsg_create_ept+0xf8>)
 8008d62:	e068      	b.n	8008e36 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3358      	adds	r3, #88	@ 0x58
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fda6 	bl	80088ba <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d018      	beq.n	8008da8 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	3348      	adds	r3, #72	@ 0x48
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	2180      	movs	r1, #128	@ 0x80
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fec2 	bl	8008b08 <rpmsg_is_address_set>
 8008d84:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3348      	adds	r3, #72	@ 0x48
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	2180      	movs	r1, #128	@ 0x80
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fecf 	bl	8008b38 <rpmsg_set_address>
 8008d9a:	e00c      	b.n	8008db6 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dd40      	ble.n	8008e24 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8008da6:	e040      	b.n	8008e2a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3348      	adds	r3, #72	@ 0x48
 8008dac:	2180      	movs	r1, #128	@ 0x80
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fe79 	bl	8008aa6 <rpmsg_get_address>
 8008db4:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8008db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff fe51 	bl	8008a6c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	68b8      	ldr	r0, [r7, #8]
 8008dce:	f7ff ffa7 	bl	8008d20 <rpmsg_register_endpoint>
 8008dd2:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	da06      	bge.n	8008de8 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	3348      	adds	r3, #72	@ 0x48
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fe7e 	bl	8008ae4 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11c      	bne.n	8008e28 <rpmsg_create_ept+0xe0>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d117      	bne.n	8008e28 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3358      	adds	r3, #88	@ 0x58
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fd67 	bl	80088d0 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8008e02:	2100      	movs	r1, #0
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff fee1 	bl	8008bcc <rpmsg_send_ns_message>
 8008e0a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3358      	adds	r3, #88	@ 0x58
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fd52 	bl	80088ba <metal_mutex_acquire>
		if (status)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d005      	beq.n	8008e28 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ff5d 	bl	8008cdc <rpmsg_unregister_endpoint>
 8008e22:	e002      	b.n	8008e2a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8008e28:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3358      	adds	r3, #88	@ 0x58
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fd4e 	bl	80088d0 <metal_mutex_release>
	return status;
 8008e34:	697b      	ldr	r3, [r7, #20]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	fffff82d 	.word	0xfffff82d

08008e44 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d018      	beq.n	8008e84 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	2b35      	cmp	r3, #53	@ 0x35
 8008e5e:	d003      	beq.n	8008e68 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8008e60:	2101      	movs	r1, #1
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff feb2 	bl	8008bcc <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3358      	adds	r3, #88	@ 0x58
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fd24 	bl	80088ba <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff ff32 	bl	8008cdc <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3358      	adds	r3, #88	@ 0x58
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fd27 	bl	80088d0 <metal_mutex_release>
 8008e82:	e000      	b.n	8008e86 <rpmsg_destroy_ept+0x42>
		return;
 8008e84:	bf00      	nop
}
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <__metal_cache_invalidate>:
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fd10 	bl	80098be <metal_machine_cache_invalidate>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <metal_cache_invalidate>:
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff ffea 	bl	8008e8c <__metal_cache_invalidate>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ffee 	bl	8008ec0 <__metal_sleep_usec>
 8008ee4:	4603      	mov	r3, r0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <metal_list_init>:
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	601a      	str	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <metal_list_is_empty>:
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <metal_io_virt_to_offset>:
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d201      	bcs.n	8008f56 <metal_io_virt_to_offset+0x22>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	e001      	b.n	8008f5a <metal_io_virt_to_offset+0x26>
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <__metal_mutex_init>:
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f3bf 8f5b 	dmb	ish
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	f3bf 8f5b 	dmb	ish
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <__metal_mutex_deinit>:
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <__metal_mutex_acquire>:
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8008fae:	bf00      	nop
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	f3bf 8f5b 	dmb	ish
 8008fba:	e8d3 2f4f 	ldrexb	r2, [r3]
 8008fbe:	e8c3 1f40 	strexb	r0, r1, [r3]
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1f9      	bne.n	8008fba <__metal_mutex_acquire+0x14>
 8008fc6:	f3bf 8f5b 	dmb	ish
 8008fca:	b2d3      	uxtb	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1ef      	bne.n	8008fb0 <__metal_mutex_acquire+0xa>
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <__metal_mutex_release>:
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f3bf 8f5b 	dmb	ish
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	f3bf 8f5b 	dmb	ish
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <metal_mutex_init>:
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff ffac 	bl	8008f66 <__metal_mutex_init>
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <metal_mutex_deinit>:
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff ffb7 	bl	8008f92 <__metal_mutex_deinit>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <metal_mutex_acquire>:
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ffb6 	bl	8008fa6 <__metal_mutex_acquire>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <metal_mutex_release>:
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ffc7 	bl	8008fde <__metal_mutex_release>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <rpmsg_init_ept>:
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2220      	movs	r2, #32
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	4618      	mov	r0, r3
 800906e:	f002 fabc 	bl	800b5ea <strncpy>
	ept->addr = src;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800909e:	699b      	ldr	r3, [r3, #24]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80090c4:	78f9      	ldrb	r1, [r7, #3]
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80090e6:	4610      	mov	r0, r2
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af02      	add	r7, sp, #8
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f000 fc19 	bl	8009968 <virtio_create_virtqueues>
 8009136:	4603      	mov	r3, r0
					callbacks);
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	2100      	movs	r1, #0
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fd62 	bl	8008c1c <rpmsg_get_endpoint>
 8009158:	4603      	mov	r3, r0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d901      	bls.n	800917a <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	e00f      	b.n	800919a <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6899      	ldr	r1, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	1acb      	subs	r3, r1, r3
 8009188:	4413      	add	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	605a      	str	r2, [r3, #4]

	return buffer;
 8009198:	68fb      	ldr	r3, [r7, #12]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
	if (!shpool)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d01d      	beq.n	80091f4 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <rpmsg_virtio_init_shm_pool+0x2c>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	3304      	adds	r3, #4
 80091d0:	e000      	b.n	80091d4 <rpmsg_virtio_init_shm_pool+0x2e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <rpmsg_virtio_init_shm_pool+0x46>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	3304      	adds	r3, #4
 80091ea:	e000      	b.n	80091ee <rpmsg_virtio_init_shm_pool+0x48>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	6053      	str	r3, [r2, #4]
 80091f2:	e000      	b.n	80091f6 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 80091f4:	bf00      	nop
}
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	@ 0x28
 8009204:	af02      	add	r7, sp, #8
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff ff3f 	bl	8009092 <rpmsg_virtio_get_role>
 8009214:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10d      	bne.n	8009238 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009228:	f107 0114 	add.w	r1, r7, #20
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2301      	movs	r3, #1
 8009232:	2200      	movs	r2, #0
 8009234:	f000 fce7 	bl	8009c06 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8009238:	bf00      	nop
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	@ 0x28
 8009244:	af02      	add	r7, sp, #8
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7ff ff1f 	bl	8009092 <rpmsg_virtio_get_role>
 8009254:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10f      	bne.n	800927c <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009268:	f107 0114 	add.w	r1, r7, #20
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2301      	movs	r3, #1
 8009272:	2200      	movs	r2, #0
 8009274:	f000 fcc7 	bl	8009c06 <virtqueue_add_buffer>
 8009278:	4603      	mov	r3, r0
 800927a:	e000      	b.n	800927e <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3720      	adds	r7, #32
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fefd 	bl	8009092 <rpmsg_virtio_get_role>
 8009298:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d116      	bne.n	80092d2 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fcee 	bl	8009c8e <virtqueue_get_buffer>
 80092b2:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff4d 	bl	8009162 <rpmsg_virtio_shm_pool_get_buffer>
 80092c8:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092d0:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 80092d2:	697b      	ldr	r3, [r7, #20]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fed2 	bl	8009092 <rpmsg_virtio_get_role>
 80092ee:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fcc3 	bl	8009c8e <virtqueue_get_buffer>
 8009308:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4619      	mov	r1, r3
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f7ff fdc5 	bl	8008ea6 <metal_cache_invalidate>
	}

	return data;
 800931c:	697b      	ldr	r3, [r7, #20]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff feaf 	bl	8009092 <rpmsg_virtio_get_role>
 8009334:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8009340:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8009344:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8009346:	68fb      	ldr	r3, [r7, #12]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b090      	sub	sp, #64	@ 0x40
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800936a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800936c:	f7ff feb1 	bl	80090d2 <rpmsg_virtio_get_status>
 8009370:	4603      	mov	r3, r0
 8009372:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800937e:	4b46      	ldr	r3, [pc, #280]	@ (8009498 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8009380:	e086      	b.n	8009490 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8009382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8009388:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800938e:	e001      	b.n	8009394 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3358      	adds	r3, #88	@ 0x58
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fe47 	bl	800902c <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800939e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80093a0:	f7ff ffc1 	bl	8009326 <_rpmsg_virtio_get_buffer_size>
 80093a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 80093a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093aa:	429a      	cmp	r2, r3
 80093ac:	dc08      	bgt.n	80093c0 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 80093ae:	f107 0216 	add.w	r2, r7, #22
 80093b2:	f107 0310 	add.w	r3, r7, #16
 80093b6:	4619      	mov	r1, r3
 80093b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80093ba:	f7ff ff64 	bl	8009286 <rpmsg_virtio_get_tx_buffer>
 80093be:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3358      	adds	r3, #88	@ 0x58
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff fe3c 	bl	8009042 <metal_mutex_release>
		if (buffer || !tick_count)
 80093ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10e      	bne.n	80093ee <rpmsg_virtio_send_offchannel_raw+0x9e>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00b      	beq.n	80093ee <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 80093dc:	4b2f      	ldr	r3, [pc, #188]	@ (800949c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 80093de:	e057      	b.n	8009490 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 80093e0:	200a      	movs	r0, #10
 80093e2:	f7ff fd78 	bl	8008ed6 <metal_sleep_usec>
		tick_count--;
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	3b01      	subs	r3, #1
 80093ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 80093ec:	e7d2      	b.n	8009394 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 80093f4:	4b2a      	ldr	r3, [pc, #168]	@ (80094a0 <rpmsg_virtio_send_offchannel_raw+0x150>)
 80093f6:	e04b      	b.n	8009490 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8009400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009402:	b29b      	uxth	r3, r3
 8009404:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800940a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800940e:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8009410:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009414:	f7ff fd8e 	bl	8008f34 <metal_io_virt_to_offset>
 8009418:	4601      	mov	r1, r0
 800941a:	f107 0218 	add.w	r2, r7, #24
 800941e:	2310      	movs	r3, #16
 8009420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009422:	f7fe fd84 	bl	8007f2e <metal_io_block_write>
 8009426:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	2b10      	cmp	r3, #16
 800942c:	d001      	beq.n	8009432 <rpmsg_virtio_send_offchannel_raw+0xe2>
 800942e:	bf00      	nop
 8009430:	e7fd      	b.n	800942e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8009432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009434:	3310      	adds	r3, #16
 8009436:	4619      	mov	r1, r3
 8009438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800943a:	f7ff fd7b 	bl	8008f34 <metal_io_virt_to_offset>
 800943e:	4601      	mov	r1, r0
 8009440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009446:	f7fe fd72 	bl	8007f2e <metal_io_block_write>
 800944a:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800944c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800944e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009450:	429a      	cmp	r2, r3
 8009452:	d001      	beq.n	8009458 <rpmsg_virtio_send_offchannel_raw+0x108>
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3358      	adds	r3, #88	@ 0x58
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fde5 	bl	800902c <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	8afb      	ldrh	r3, [r7, #22]
 8009466:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009468:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800946a:	f7ff fee9 	bl	8009240 <rpmsg_virtio_enqueue_buffer>
 800946e:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <rpmsg_virtio_send_offchannel_raw+0x12a>
 8009476:	bf00      	nop
 8009478:	e7fd      	b.n	8009476 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fc7f 	bl	8009d82 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3358      	adds	r3, #88	@ 0x58
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fdda 	bl	8009042 <metal_mutex_release>

	return size;
 800948e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009490:	4618      	mov	r0, r3
 8009492:	3740      	adds	r7, #64	@ 0x40
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	fffff82c 	.word	0xfffff82c
 800949c:	fffff82b 	.word	0xfffff82b
 80094a0:	fffff82e 	.word	0xfffff82e

080094a4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b08d      	sub	sp, #52	@ 0x34
 80094bc:	af02      	add	r7, sp, #8
 80094be:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ca:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	3358      	adds	r3, #88	@ 0x58
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fda9 	bl	800902c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 80094da:	f107 020a 	add.w	r2, r7, #10
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	4619      	mov	r1, r3
 80094e4:	69f8      	ldr	r0, [r7, #28]
 80094e6:	f7ff fef9 	bl	80092dc <rpmsg_virtio_get_rx_buffer>
 80094ea:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	3358      	adds	r3, #88	@ 0x58
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff fda6 	bl	8009042 <metal_mutex_release>

	while (rp_hdr) {
 80094f6:	e04d      	b.n	8009594 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	3358      	adds	r3, #88	@ 0x58
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fd95 	bl	800902c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	69b8      	ldr	r0, [r7, #24]
 800950a:	f7ff fe19 	bl	8009140 <rpmsg_get_ept_from_addr>
 800950e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	3358      	adds	r3, #88	@ 0x58
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fd94 	bl	8009042 <metal_mutex_release>

		if (!ept)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d03d      	beq.n	800959c <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009528:	d103      	bne.n	8009532 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8009536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009538:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800953c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953e:	899b      	ldrh	r3, [r3, #12]
 8009540:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009542:	4618      	mov	r0, r3
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	4602      	mov	r2, r0
 8009552:	6978      	ldr	r0, [r7, #20]
 8009554:	47a0      	blx	r4
 8009556:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <rpmsg_virtio_rx_callback+0xaa>
 800955e:	bf00      	nop
 8009560:	e7fd      	b.n	800955e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	3358      	adds	r3, #88	@ 0x58
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fd60 	bl	800902c <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	897b      	ldrh	r3, [r7, #10]
 8009570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009572:	69f8      	ldr	r0, [r7, #28]
 8009574:	f7ff fe44 	bl	8009200 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8009578:	f107 020a 	add.w	r2, r7, #10
 800957c:	f107 030c 	add.w	r3, r7, #12
 8009580:	4619      	mov	r1, r3
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	f7ff feaa 	bl	80092dc <rpmsg_virtio_get_rx_buffer>
 8009588:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	3358      	adds	r3, #88	@ 0x58
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fd57 	bl	8009042 <metal_mutex_release>
	while (rp_hdr) {
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1ae      	bne.n	80094f8 <rpmsg_virtio_rx_callback+0x40>
 800959a:	e000      	b.n	800959e <rpmsg_virtio_rx_callback+0xe6>
			return;
 800959c:	bf00      	nop
	}
}
 800959e:	372c      	adds	r7, #44	@ 0x2c
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd90      	pop	{r4, r7, pc}

080095a4 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b092      	sub	sp, #72	@ 0x48
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 80095b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ba:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 80095bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b28      	cmp	r3, #40	@ 0x28
 80095ca:	d001      	beq.n	80095d0 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e057      	b.n	8009680 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 80095d2:	4619      	mov	r1, r3
 80095d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80095d6:	f7ff fcad 	bl	8008f34 <metal_io_virt_to_offset>
 80095da:	4601      	mov	r1, r0
 80095dc:	f107 0210 	add.w	r2, r7, #16
 80095e0:	2320      	movs	r3, #32
 80095e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80095e4:	f7fe fc2c 	bl	8007e40 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80095ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095f0:	3358      	adds	r3, #88	@ 0x58
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fd1a 	bl	800902c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80095f8:	f107 0110 	add.w	r1, r7, #16
 80095fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009604:	f7ff fb0a 	bl	8008c1c <rpmsg_get_endpoint>
 8009608:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d017      	beq.n	8009646 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	f04f 32ff 	mov.w	r2, #4294967295
 8009622:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8009624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009626:	3358      	adds	r3, #88	@ 0x58
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fd0a 	bl	8009042 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	d024      	beq.n	800967e <rpmsg_virtio_ns_callback+0xda>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009638:	2b00      	cmp	r3, #0
 800963a:	d020      	beq.n	800967e <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	4798      	blx	r3
 8009644:	e01b      	b.n	800967e <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2b00      	cmp	r3, #0
 800964a:	d110      	bne.n	800966e <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800964c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800964e:	3358      	adds	r3, #88	@ 0x58
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff fcf6 	bl	8009042 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8009656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00f      	beq.n	800967e <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800965e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009662:	f107 0110 	add.w	r1, r7, #16
 8009666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009668:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800966a:	4798      	blx	r3
 800966c:	e007      	b.n	800967e <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009672:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8009674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009676:	3358      	adds	r3, #88	@ 0x58
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff fce2 	bl	8009042 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3748      	adds	r7, #72	@ 0x48
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b094      	sub	sp, #80	@ 0x50
 800968c:	af02      	add	r7, sp, #8
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 800969a:	2264      	movs	r2, #100	@ 0x64
 800969c:	2100      	movs	r1, #0
 800969e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096a0:	f001 ff89 	bl	800b5b6 <memset>
	metal_mutex_init(&rdev->lock);
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	3358      	adds	r3, #88	@ 0x58
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fca9 	bl	8009000 <metal_mutex_init>
	rvdev->vdev = vdev;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	4a5d      	ldr	r2, [pc, #372]	@ (8009838 <rpmsg_init_vdev+0x1b0>)
 80096c4:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff fce3 	bl	8009092 <rpmsg_virtio_get_role>
 80096cc:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80096ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d120      	bne.n	8009716 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 80096d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 80096da:	4b58      	ldr	r3, [pc, #352]	@ (800983c <rpmsg_init_vdev+0x1b4>)
 80096dc:	e0a7      	b.n	800982e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 80096de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 80096e6:	4b56      	ldr	r3, [pc, #344]	@ (8009840 <rpmsg_init_vdev+0x1b8>)
 80096e8:	e0a1      	b.n	800982e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096ee:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 80096f0:	4b54      	ldr	r3, [pc, #336]	@ (8009844 <rpmsg_init_vdev+0x1bc>)
 80096f2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 80096f4:	4b54      	ldr	r3, [pc, #336]	@ (8009848 <rpmsg_init_vdev+0x1c0>)
 80096f6:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 80096f8:	4b54      	ldr	r3, [pc, #336]	@ (800984c <rpmsg_init_vdev+0x1c4>)
 80096fa:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 80096fc:	4b54      	ldr	r3, [pc, #336]	@ (8009850 <rpmsg_init_vdev+0x1c8>)
 80096fe:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	3318      	adds	r3, #24
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800971c:	f107 0220 	add.w	r2, r7, #32
 8009720:	f107 0318 	add.w	r3, r7, #24
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	4613      	mov	r3, r2
 8009728:	2202      	movs	r2, #2
 800972a:	2100      	movs	r1, #0
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7ff fcf2 	bl	8009116 <rpmsg_virtio_create_virtqueues>
 8009732:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8009734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <rpmsg_init_vdev+0xb6>
		return status;
 800973a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973c:	e077      	b.n	800982e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800973e:	2300      	movs	r3, #0
 8009740:	643b      	str	r3, [r7, #64]	@ 0x40
 8009742:	e00f      	b.n	8009764 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800974a:	4613      	mov	r3, r2
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	4413      	add	r3, r2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	440b      	add	r3, r1
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800975e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009760:	3301      	adds	r3, #1
 8009762:	643b      	str	r3, [r7, #64]	@ 0x40
 8009764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009766:	2b01      	cmp	r3, #1
 8009768:	d9ec      	bls.n	8009744 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800976a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976c:	2b00      	cmp	r3, #0
 800976e:	d137      	bne.n	80097e0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8009770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009774:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800977a:	e02a      	b.n	80097d2 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800977c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009780:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009782:	f7ff fcee 	bl	8009162 <rpmsg_virtio_shm_pool_get_buffer>
 8009786:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800978e:	4b2c      	ldr	r3, [pc, #176]	@ (8009840 <rpmsg_init_vdev+0x1b8>)
 8009790:	e04d      	b.n	800982e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8009796:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009798:	6838      	ldr	r0, [r7, #0]
 800979a:	f7ff fbcb 	bl	8008f34 <metal_io_virt_to_offset>
 800979e:	4601      	mov	r1, r0
 80097a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097a4:	2200      	movs	r2, #0
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	f7fe fc37 	bl	800801a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80097b0:	f107 0110 	add.w	r1, r7, #16
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2301      	movs	r3, #1
 80097ba:	2200      	movs	r2, #0
 80097bc:	f000 fa23 	bl	8009c06 <virtqueue_add_buffer>
 80097c0:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80097c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <rpmsg_init_vdev+0x144>
				return status;
 80097c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ca:	e030      	b.n	800982e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80097cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ce:	3301      	adds	r3, #1
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097d6:	895b      	ldrh	r3, [r3, #10]
 80097d8:	461a      	mov	r2, r3
 80097da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097dc:	4293      	cmp	r3, r2
 80097de:	d3cd      	bcc.n	800977c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80097e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fb83 	bl	8008eee <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff fc83 	bl	80090f4 <rpmsg_virtio_get_features>
 80097ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	f103 0008 	add.w	r0, r3, #8
 8009800:	2300      	movs	r3, #0
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <rpmsg_init_vdev+0x1cc>)
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2335      	movs	r3, #53	@ 0x35
 800980a:	2235      	movs	r2, #53	@ 0x35
 800980c:	4912      	ldr	r1, [pc, #72]	@ (8009858 <rpmsg_init_vdev+0x1d0>)
 800980e:	f7ff fc23 	bl	8009058 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	3308      	adds	r3, #8
 8009816:	4619      	mov	r1, r3
 8009818:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800981a:	f7ff fa81 	bl	8008d20 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800981e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8009824:	2104      	movs	r1, #4
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7ff fc40 	bl	80090ac <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800982c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800982e:	4618      	mov	r0, r3
 8009830:	3748      	adds	r7, #72	@ 0x48
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	08009351 	.word	0x08009351
 800983c:	fffff82d 	.word	0xfffff82d
 8009840:	fffff82e 	.word	0xfffff82e
 8009844:	0800ec64 	.word	0x0800ec64
 8009848:	0800ec6c 	.word	0x0800ec6c
 800984c:	080094b9 	.word	0x080094b9
 8009850:	080094a5 	.word	0x080094a5
 8009854:	080095a5 	.word	0x080095a5
 8009858:	0800ec74 	.word	0x0800ec74

0800985c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8009868:	e008      	b.n	800987c <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3b34      	subs	r3, #52	@ 0x34
 8009874:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fae4 	bl	8008e44 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fb46 	bl	8008f10 <metal_list_is_empty>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0ef      	beq.n	800986a <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	3358      	adds	r3, #88	@ 0x58
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fbbb 	bl	8009016 <metal_mutex_deinit>
}
 80098a0:	bf00      	nop
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3303      	adds	r3, #3
 8009904:	005a      	lsls	r2, r3, #1
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	4413      	add	r3, r2
 8009912:	1e5a      	subs	r2, r3, #1
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	425b      	negs	r3, r3
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	3306      	adds	r3, #6
 8009926:	60fb      	str	r3, [r7, #12]

	return size;
 8009928:	68fb      	ldr	r3, [r7, #12]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <metal_io_virt_to_offset>:
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d201      	bcs.n	8009958 <metal_io_virt_to_offset+0x22>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	e001      	b.n	800995c <metal_io_virt_to_offset+0x26>
 8009958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b091      	sub	sp, #68	@ 0x44
 800996c:	af04      	add	r7, sp, #16
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	429a      	cmp	r2, r3
 8009982:	d902      	bls.n	800998a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8009984:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8009988:	e053      	b.n	8009a32 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800998a:	2300      	movs	r3, #0
 800998c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800998e:	e04b      	b.n	8009a28 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009996:	4613      	mov	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	440b      	add	r3, r1
 80099a0:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	3304      	adds	r3, #4
 80099a6:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d118      	bne.n	80099e2 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4619      	mov	r1, r3
 80099bc:	69f8      	ldr	r0, [r7, #28]
 80099be:	f7ff ffba 	bl	8009936 <metal_io_virt_to_offset>
 80099c2:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 80099c8:	461a      	mov	r2, r3
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7ff ff8d 	bl	80098f0 <vring_size>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2200      	movs	r2, #0
 80099da:	69b9      	ldr	r1, [r7, #24]
 80099dc:	69f8      	ldr	r0, [r7, #28]
 80099de:	f7fe fb1c 	bl	800801a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	b298      	uxth	r0, r3
 80099e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4413      	add	r3, r2
 80099ee:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80099f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099f6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80099f8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	6a12      	ldr	r2, [r2, #32]
 80099fe:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a02:	6809      	ldr	r1, [r1, #0]
 8009a04:	9102      	str	r1, [sp, #8]
 8009a06:	9201      	str	r2, [sp, #4]
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4601      	mov	r1, r0
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f8c4 	bl	8009b9e <virtqueue_create>
 8009a16:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <virtio_create_virtqueues+0xba>
			return ret;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	e007      	b.n	8009a32 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8009a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a24:	3301      	adds	r3, #1
 8009a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3af      	bcc.n	8009990 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3734      	adds	r7, #52	@ 0x34
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd90      	pop	{r4, r7, pc}

08009a3a <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	4413      	add	r3, r2
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	425b      	negs	r3, r3
 8009a78:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	60da      	str	r2, [r3, #12]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	80fb      	strh	r3, [r7, #6]
 8009a96:	460b      	mov	r3, r1
 8009a98:	80bb      	strh	r3, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8009a9e:	88ba      	ldrh	r2, [r7, #4]
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8009aaa:	88b9      	ldrh	r1, [r7, #4]
 8009aac:	887b      	ldrh	r3, [r7, #2]
 8009aae:	1acb      	subs	r3, r1, r3
 8009ab0:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	bf34      	ite	cc
 8009ab6:	2301      	movcc	r3, #1
 8009ab8:	2300      	movcs	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <metal_io_virt_to_offset>:
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d201      	bcs.n	8009aea <metal_io_virt_to_offset+0x22>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	e001      	b.n	8009aee <metal_io_virt_to_offset+0x26>
 8009aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <metal_io_phys>:
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8009b08:	2b1f      	cmp	r3, #31
 8009b0a:	d805      	bhi.n	8009b18 <metal_io_phys+0x1e>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	e000      	b.n	8009b1a <metal_io_phys+0x20>
 8009b18:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8009b1a:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d010      	beq.n	8009b46 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d80b      	bhi.n	8009b46 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6919      	ldr	r1, [r3, #16]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8009b42:	4413      	add	r3, r2
 8009b44:	e001      	b.n	8009b4a <metal_io_phys+0x50>
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <metal_io_virt_to_phys>:
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ffb0 	bl	8009ac8 <metal_io_virt_to_offset>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff ffc4 	bl	8009afa <metal_io_phys>
 8009b72:	4603      	mov	r3, r0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff ffe1 	bl	8009b56 <metal_io_virt_to_phys>
 8009b94:	4603      	mov	r3, r0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b086      	sub	sp, #24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	460b      	mov	r3, r1
 8009bac:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d121      	bne.n	8009bfc <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8009bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8009bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc6:	897a      	ldrh	r2, [r7, #10]
 8009bc8:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	891a      	ldrh	r2, [r3, #8]
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	895a      	ldrh	r2, [r3, #10]
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	6a3a      	ldr	r2, [r7, #32]
 8009bde:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009be4:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	6819      	ldr	r1, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf2:	f000 f97a 	bl	8009eea <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8009bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf8:	f000 f899 	bl	8009d2e <virtqueue_disable_cb>
	}

	return (status);
 8009bfc:	697b      	ldr	r3, [r7, #20]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b08a      	sub	sp, #40	@ 0x28
 8009c0a:	af02      	add	r7, sp, #8
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d12c      	bne.n	8009c84 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009c2e:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8009c30:	8a7b      	ldrh	r3, [r7, #18]
 8009c32:	3307      	adds	r3, #7
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c40:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	69d9      	ldr	r1, [r3, #28]
 8009c4e:	8a7a      	ldrh	r2, [r7, #18]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f8a7 	bl	8009dae <vq_ring_add_buffer>
 8009c60:	4603      	mov	r3, r0
 8009c62:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8a3a      	ldrh	r2, [r7, #16]
 8009c68:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8009c7a:	8a7b      	ldrh	r3, [r7, #18]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f966 	bl	8009f50 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8009c84:	69bb      	ldr	r3, [r7, #24]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3720      	adds	r7, #32
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b088      	sub	sp, #32
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <virtqueue_get_buffer+0x20>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d101      	bne.n	8009cb2 <virtqueue_get_buffer+0x24>
		return (NULL);
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e039      	b.n	8009d26 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	b291      	uxth	r1, r2
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	8651      	strh	r1, [r2, #50]	@ 0x32
 8009cbe:	b21a      	sxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	895b      	ldrh	r3, [r3, #10]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	b21b      	sxth	r3, r3
 8009cca:	4013      	ands	r3, r2
 8009ccc:	b21b      	sxth	r3, r3
 8009cce:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cd4:	8bfb      	ldrh	r3, [r7, #30]
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8009cde:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	82fb      	strh	r3, [r7, #22]
	if (len)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8009cf6:	8afb      	ldrh	r3, [r7, #22]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f8ae 	bl	8009e5c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8009d00:	8afa      	ldrh	r2, [r7, #22]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3207      	adds	r2, #7
 8009d06:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009d0a:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8009d0c:	8afa      	ldrh	r2, [r7, #22]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3207      	adds	r2, #7
 8009d12:	2100      	movs	r1, #0
 8009d14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8bfa      	ldrh	r2, [r7, #30]
 8009d22:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8009d24:	693b      	ldr	r3, [r7, #16]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3720      	adds	r7, #32
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d010      	beq.n	8009d64 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	895b      	ldrh	r3, [r3, #10]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1a      	ldr	r2, [r3, #32]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009d56:	3901      	subs	r1, #1
 8009d58:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	460a      	mov	r2, r1
 8009d60:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8009d62:	e008      	b.n	8009d76 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	881a      	ldrh	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	b292      	uxth	r2, r2
 8009d74:	801a      	strh	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8009d8a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f91d 	bl	8009fce <vq_ring_must_notify_host>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f94d 	bl	800a03a <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8009dae:	b5b0      	push	{r4, r5, r7, lr}
 8009db0:	b088      	sub	sp, #32
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	603b      	str	r3, [r7, #0]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8009dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc2:	4413      	add	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	837b      	strh	r3, [r7, #26]
 8009dce:	e03c      	b.n	8009e4a <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8009dd0:	8b7b      	ldrh	r3, [r7, #26]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4413      	add	r3, r2
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7ff fec8 	bl	8009b7c <virtqueue_virt_to_phys>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2200      	movs	r2, #0
 8009df0:	461c      	mov	r4, r3
 8009df2:	4615      	mov	r5, r2
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4413      	add	r3, r2
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	461a      	mov	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	da06      	bge.n	8009e28 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	899b      	ldrh	r3, [r3, #12]
 8009e1e:	f043 0301 	orr.w	r3, r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	db06      	blt.n	8009e3e <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	f043 0302 	orr.w	r3, r3, #2
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	3301      	adds	r3, #1
 8009e42:	61fb      	str	r3, [r7, #28]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	89db      	ldrh	r3, [r3, #14]
 8009e48:	837b      	strh	r3, [r7, #26]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	dbbe      	blt.n	8009dd0 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8009e52:	8b7b      	ldrh	r3, [r7, #26]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bdb0      	pop	{r4, r5, r7, pc}

08009e5c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	69da      	ldr	r2, [r3, #28]
 8009e6c:	887b      	ldrh	r3, [r7, #2]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	4413      	add	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8009e74:	887b      	ldrh	r3, [r7, #2]
 8009e76:	3307      	adds	r3, #7
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	889b      	ldrh	r3, [r3, #4]
 8009e88:	4413      	add	r3, r2
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	889b      	ldrh	r3, [r3, #4]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	899b      	ldrh	r3, [r3, #12]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d113      	bne.n	8009ed0 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009ea8:	e00c      	b.n	8009ec4 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	89db      	ldrh	r3, [r3, #14]
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	889b      	ldrh	r3, [r3, #4]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	899b      	ldrh	r3, [r3, #12]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ec      	bne.n	8009eaa <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	887a      	ldrh	r2, [r7, #2]
 8009edc:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8009ede:	bf00      	nop
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b088      	sub	sp, #32
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	895b      	ldrh	r3, [r3, #10]
 8009efa:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3318      	adds	r3, #24
 8009f00:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8009f02:	69b9      	ldr	r1, [r7, #24]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	6978      	ldr	r0, [r7, #20]
 8009f0a:	f7ff fd96 	bl	8009a3a <vring_init>

	for (i = 0; i < size - 1; i++)
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	e00c      	b.n	8009f2e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	6859      	ldr	r1, [r3, #4]
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	440b      	add	r3, r1
 8009f22:	3201      	adds	r2, #1
 8009f24:	b292      	uxth	r2, r2
 8009f26:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	61fb      	str	r3, [r7, #28]
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	dbed      	blt.n	8009f14 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	4413      	add	r3, r2
 8009f42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009f46:	81da      	strh	r2, [r3, #14]
}
 8009f48:	bf00      	nop
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	b21a      	sxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	895b      	ldrh	r3, [r3, #10]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	b21b      	sxth	r3, r3
 8009f6e:	4013      	ands	r3, r2
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a1a      	ldr	r2, [r3, #32]
 8009f78:	89fb      	ldrh	r3, [r7, #14]
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	887a      	ldrh	r2, [r7, #2]
 8009f80:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8009f82:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	885a      	ldrh	r2, [r3, #2]
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	b292      	uxth	r2, r2
 8009f90:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f96:	3301      	adds	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8009fb2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	4798      	blx	r3
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01d      	beq.n	800a01e <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	885b      	ldrh	r3, [r3, #2]
 8009fe8:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fee:	89fa      	ldrh	r2, [r7, #14]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800a004:	89ba      	ldrh	r2, [r7, #12]
 800a006:	89f9      	ldrh	r1, [r7, #14]
 800a008:	897b      	ldrh	r3, [r7, #10]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fd3e 	bl	8009a8c <vring_need_event>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	bf14      	ite	ne
 800a016:	2301      	movne	r3, #1
 800a018:	2300      	moveq	r3, #0
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	e009      	b.n	800a032 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bf0c      	ite	eq
 800a02c:	2301      	moveq	r3, #1
 800a02e:	2300      	movne	r3, #0
 800a030:	b2db      	uxtb	r3, r3
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	4798      	blx	r3
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800a064:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <HAL_HSEM_FreeCallback+0x1c>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800a06a:	2002      	movs	r0, #2
 800a06c:	f7f7 fdde 	bl	8001c2c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	24004cd8 	.word	0x24004cd8

0800a07c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800a082:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b0 <MAILBOX_Init+0x34>)
 800a084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a088:	4a09      	ldr	r2, [pc, #36]	@ (800a0b0 <MAILBOX_Init+0x34>)
 800a08a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a08e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a092:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <MAILBOX_Init+0x34>)
 800a094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800a0a0:	2002      	movs	r0, #2
 800a0a2:	f7f7 fdc3 	bl	8001c2c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	58024400 	.word	0x58024400

0800a0b4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800a0bc:	4b09      	ldr	r3, [pc, #36]	@ (800a0e4 <MAILBOX_Poll+0x30>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d108      	bne.n	800a0d6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7fe fb75 	bl	80087b6 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800a0cc:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <MAILBOX_Poll+0x30>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
    return 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e001      	b.n	800a0da <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800a0d6:	f06f 030a 	mvn.w	r3, #10
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	24004cd8 	.word	0x24004cd8

0800a0e8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	f7f7 fd6c 	bl	8001bd0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f7f7 fd82 	bl	8001c04 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11a:	d006      	beq.n	800a12a <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a124:	d001      	beq.n	800a12a <is_rpmsg_ept_ready+0x20>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <is_rpmsg_ept_ready+0x22>
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d209      	bcs.n	800a160 <metal_device_io_region+0x28>
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	4613      	mov	r3, r2
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4413      	add	r3, r2
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	3308      	adds	r3, #8
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	3304      	adds	r3, #4
 800a15e:	e000      	b.n	800a162 <metal_device_io_region+0x2a>
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b08d      	sub	sp, #52	@ 0x34
 800a174:	af04      	add	r7, sp, #16
 800a176:	6078      	str	r0, [r7, #4]
  int status = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800a180:	4a41      	ldr	r2, [pc, #260]	@ (800a288 <OPENAMP_shmem_init+0x118>)
 800a182:	f107 0310 	add.w	r3, r7, #16
 800a186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a18a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800a196:	f107 0310 	add.w	r3, r7, #16
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fd fda6 	bl	8007cec <metal_init>

  status = metal_register_generic_device(&shm_device);
 800a1a0:	483a      	ldr	r0, [pc, #232]	@ (800a28c <OPENAMP_shmem_init+0x11c>)
 800a1a2:	f7fd fc41 	bl	8007a28 <metal_register_generic_device>
 800a1a6:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <OPENAMP_shmem_init+0x42>
    return status;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	e066      	b.n	800a280 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800a1b2:	f107 0318 	add.w	r3, r7, #24
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4935      	ldr	r1, [pc, #212]	@ (800a290 <OPENAMP_shmem_init+0x120>)
 800a1ba:	4836      	ldr	r0, [pc, #216]	@ (800a294 <OPENAMP_shmem_init+0x124>)
 800a1bc:	f7fd fbf6 	bl	80079ac <metal_device_open>
 800a1c0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <OPENAMP_shmem_init+0x5c>
    return status;
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	e059      	b.n	800a280 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800a1cc:	4a32      	ldr	r2, [pc, #200]	@ (800a298 <OPENAMP_shmem_init+0x128>)
 800a1ce:	4b33      	ldr	r3, [pc, #204]	@ (800a29c <OPENAMP_shmem_init+0x12c>)
 800a1d0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800a1d8:	4a31      	ldr	r2, [pc, #196]	@ (800a2a0 <OPENAMP_shmem_init+0x130>)
 800a1da:	4b2f      	ldr	r3, [pc, #188]	@ (800a298 <OPENAMP_shmem_init+0x128>)
 800a1dc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	9302      	str	r3, [sp, #8]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a29c <OPENAMP_shmem_init+0x12c>)
 800a1f2:	4929      	ldr	r1, [pc, #164]	@ (800a298 <OPENAMP_shmem_init+0x128>)
 800a1f4:	f7fd fdd5 	bl	8007da2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ff9b 	bl	800a138 <metal_device_io_region>
 800a202:	4603      	mov	r3, r0
 800a204:	4a27      	ldr	r2, [pc, #156]	@ (800a2a4 <OPENAMP_shmem_init+0x134>)
 800a206:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800a208:	4b26      	ldr	r3, [pc, #152]	@ (800a2a4 <OPENAMP_shmem_init+0x134>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <OPENAMP_shmem_init+0xa6>
    return -1;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e034      	b.n	800a280 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	f107 030c 	add.w	r3, r7, #12
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f929 	bl	800a478 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a1f      	ldr	r2, [pc, #124]	@ (800a2a8 <OPENAMP_shmem_init+0x138>)
 800a22a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800a22c:	4b1e      	ldr	r3, [pc, #120]	@ (800a2a8 <OPENAMP_shmem_init+0x138>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d102      	bne.n	800a23a <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800a234:	f04f 33ff 	mov.w	r3, #4294967295
 800a238:	e022      	b.n	800a280 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800a240:	4b19      	ldr	r3, [pc, #100]	@ (800a2a8 <OPENAMP_shmem_init+0x138>)
 800a242:	6819      	ldr	r1, [r3, #0]
 800a244:	4b18      	ldr	r3, [pc, #96]	@ (800a2a8 <OPENAMP_shmem_init+0x138>)
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	461c      	mov	r4, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	2300      	movs	r3, #0
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f04f 33ff 	mov.w	r3, #4294967295
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	4623      	mov	r3, r4
 800a25c:	f7fd fda1 	bl	8007da2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2101      	movs	r1, #1
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff ff67 	bl	800a138 <metal_device_io_region>
 800a26a:	4603      	mov	r3, r0
 800a26c:	4a0f      	ldr	r2, [pc, #60]	@ (800a2ac <OPENAMP_shmem_init+0x13c>)
 800a26e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800a270:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ac <OPENAMP_shmem_init+0x13c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <OPENAMP_shmem_init+0x10e>
    return -1;
 800a278:	f04f 33ff 	mov.w	r3, #4294967295
 800a27c:	e000      	b.n	800a280 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3724      	adds	r7, #36	@ 0x24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd90      	pop	{r4, r7, pc}
 800a288:	0800ec8c 	.word	0x0800ec8c
 800a28c:	24000040 	.word	0x24000040
 800a290:	0800ec78 	.word	0x0800ec78
 800a294:	0800ec84 	.word	0x0800ec84
 800a298:	38000400 	.word	0x38000400
 800a29c:	24004d6c 	.word	0x24004d6c
 800a2a0:	38010000 	.word	0x38010000
 800a2a4:	24004cdc 	.word	0x24004cdc
 800a2a8:	24004ce4 	.word	0x24004ce4
 800a2ac:	24004ce0 	.word	0x24004ce0

0800a2b0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b08b      	sub	sp, #44	@ 0x2c
 800a2b4:	af04      	add	r7, sp, #16
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
  int status = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800a2c6:	f7ff fed9 	bl	800a07c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff ff50 	bl	800a170 <OPENAMP_shmem_init>
 800a2d0:	60f8      	str	r0, [r7, #12]
  if(status)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	e06a      	b.n	800a3b2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4b37      	ldr	r3, [pc, #220]	@ (800a3bc <MX_OPENAMP_Init+0x10c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f103 0218 	add.w	r2, r3, #24
 800a2e6:	4b36      	ldr	r3, [pc, #216]	@ (800a3c0 <MX_OPENAMP_Init+0x110>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	9102      	str	r1, [sp, #8]
 800a2ee:	4935      	ldr	r1, [pc, #212]	@ (800a3c4 <MX_OPENAMP_Init+0x114>)
 800a2f0:	9101      	str	r1, [sp, #4]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	9100      	str	r1, [sp, #0]
 800a2f6:	21ff      	movs	r1, #255	@ 0xff
 800a2f8:	f7fe f97e 	bl	80085f8 <rproc_virtio_create_vdev>
 800a2fc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d102      	bne.n	800a30a <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800a304:	f04f 33ff 	mov.w	r3, #4294967295
 800a308:	e053      	b.n	800a3b2 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f7fe fa8f 	bl	800882e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800a310:	4b2a      	ldr	r3, [pc, #168]	@ (800a3bc <MX_OPENAMP_Init+0x10c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3334      	adds	r3, #52	@ 0x34
 800a316:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a320:	461c      	mov	r4, r3
 800a322:	4b29      	ldr	r3, [pc, #164]	@ (800a3c8 <MX_OPENAMP_Init+0x118>)
 800a324:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	6892      	ldr	r2, [r2, #8]
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a32e:	9102      	str	r1, [sp, #8]
 800a330:	9201      	str	r2, [sp, #4]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4623      	mov	r3, r4
 800a336:	4602      	mov	r2, r0
 800a338:	2100      	movs	r1, #0
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f7fe fa0a 	bl	8008754 <rproc_virtio_init_vring>
 800a340:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	e032      	b.n	800a3b2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800a34c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3bc <MX_OPENAMP_Init+0x10c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3348      	adds	r3, #72	@ 0x48
 800a352:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a35c:	461c      	mov	r4, r3
 800a35e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c8 <MX_OPENAMP_Init+0x118>)
 800a360:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	6892      	ldr	r2, [r2, #8]
 800a366:	6979      	ldr	r1, [r7, #20]
 800a368:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a36a:	9102      	str	r1, [sp, #8]
 800a36c:	9201      	str	r2, [sp, #4]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	4623      	mov	r3, r4
 800a372:	4602      	mov	r2, r0
 800a374:	2101      	movs	r1, #1
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f7fe f9ec 	bl	8008754 <rproc_virtio_init_vring>
 800a37c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	e014      	b.n	800a3b2 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a388:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <MX_OPENAMP_Init+0x11c>)
 800a38a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a38e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800a390:	4a0f      	ldr	r2, [pc, #60]	@ (800a3d0 <MX_OPENAMP_Init+0x120>)
 800a392:	4b0e      	ldr	r3, [pc, #56]	@ (800a3cc <MX_OPENAMP_Init+0x11c>)
 800a394:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a396:	461a      	mov	r2, r3
 800a398:	480e      	ldr	r0, [pc, #56]	@ (800a3d4 <MX_OPENAMP_Init+0x124>)
 800a39a:	f7fe ff04 	bl	80091a6 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800a39e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c8 <MX_OPENAMP_Init+0x118>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d4 <MX_OPENAMP_Init+0x124>)
 800a3a4:	9200      	str	r2, [sp, #0]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	6939      	ldr	r1, [r7, #16]
 800a3aa:	480b      	ldr	r0, [pc, #44]	@ (800a3d8 <MX_OPENAMP_Init+0x128>)
 800a3ac:	f7ff f96c 	bl	8009688 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd90      	pop	{r4, r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	24004ce4 	.word	0x24004ce4
 800a3c0:	24004ce0 	.word	0x24004ce0
 800a3c4:	0800a0e9 	.word	0x0800a0e9
 800a3c8:	24004cdc 	.word	0x24004cdc
 800a3cc:	38000400 	.word	0x38000400
 800a3d0:	38010000 	.word	0x38010000
 800a3d4:	24004ce8 	.word	0x24004ce8
 800a3d8:	24004cf4 	.word	0x24004cf4

0800a3dc <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 800a3e0:	4803      	ldr	r0, [pc, #12]	@ (800a3f0 <OPENAMP_DeInit+0x14>)
 800a3e2:	f7ff fa3b 	bl	800985c <rpmsg_deinit_vdev>

  metal_finish();
 800a3e6:	f7fd fcb3 	bl	8007d50 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	24004cf4 	.word	0x24004cf4

0800a3f4 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	@ 0x28
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	9302      	str	r3, [sp, #8]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4904      	ldr	r1, [pc, #16]	@ (800a42c <OPENAMP_create_endpoint+0x38>)
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7fe fc94 	bl	8008d48 <rpmsg_create_ept>
 800a420:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800a422:	697b      	ldr	r3, [r7, #20]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	24004cf4 	.word	0x24004cf4

0800a430 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800a434:	4b03      	ldr	r3, [pc, #12]	@ (800a444 <OPENAMP_check_for_message+0x14>)
 800a436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fe3b 	bl	800a0b4 <MAILBOX_Poll>
}
 800a43e:	bf00      	nop
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	24004cf4 	.word	0x24004cf4

0800a448 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800a450:	e004      	b.n	800a45c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800a452:	4b08      	ldr	r3, [pc, #32]	@ (800a474 <OPENAMP_Wait_EndPointready+0x2c>)
 800a454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fe2c 	bl	800a0b4 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fe54 	bl	800a10a <is_rpmsg_ept_ready>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d0f4      	beq.n	800a452 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	24004cf4 	.word	0x24004cf4

0800a478 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800a484:	228c      	movs	r2, #140	@ 0x8c
 800a486:	2100      	movs	r1, #0
 800a488:	481e      	ldr	r0, [pc, #120]	@ (800a504 <resource_table_init+0x8c>)
 800a48a:	f001 f894 	bl	800b5b6 <memset>
	resource_table.num = 1;
 800a48e:	4b1d      	ldr	r3, [pc, #116]	@ (800a504 <resource_table_init+0x8c>)
 800a490:	2201      	movs	r2, #1
 800a492:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800a494:	4b1b      	ldr	r3, [pc, #108]	@ (800a504 <resource_table_init+0x8c>)
 800a496:	2201      	movs	r2, #1
 800a498:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800a49a:	4b1a      	ldr	r3, [pc, #104]	@ (800a504 <resource_table_init+0x8c>)
 800a49c:	2218      	movs	r2, #24
 800a49e:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800a4a0:	4b19      	ldr	r3, [pc, #100]	@ (800a508 <resource_table_init+0x90>)
 800a4a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4a6:	4a17      	ldr	r2, [pc, #92]	@ (800a504 <resource_table_init+0x8c>)
 800a4a8:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800a4aa:	4b16      	ldr	r3, [pc, #88]	@ (800a504 <resource_table_init+0x8c>)
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800a4b0:	4b14      	ldr	r3, [pc, #80]	@ (800a504 <resource_table_init+0x8c>)
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800a4b6:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <resource_table_init+0x8c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800a4bc:	4a12      	ldr	r2, [pc, #72]	@ (800a508 <resource_table_init+0x90>)
 800a4be:	4b11      	ldr	r3, [pc, #68]	@ (800a504 <resource_table_init+0x8c>)
 800a4c0:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800a4c2:	4b10      	ldr	r3, [pc, #64]	@ (800a504 <resource_table_init+0x8c>)
 800a4c4:	2204      	movs	r2, #4
 800a4c6:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a504 <resource_table_init+0x8c>)
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <resource_table_init+0x8c>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 800a4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <resource_table_init+0x8c>)
 800a4d6:	2203      	movs	r2, #3
 800a4d8:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800a4da:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <resource_table_init+0x8c>)
 800a4dc:	2207      	movs	r2, #7
 800a4de:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800a4e0:	4b08      	ldr	r3, [pc, #32]	@ (800a504 <resource_table_init+0x8c>)
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	@ (800a504 <resource_table_init+0x8c>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	228c      	movs	r2, #140	@ 0x8c
 800a4f2:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4a03      	ldr	r2, [pc, #12]	@ (800a504 <resource_table_init+0x8c>)
 800a4f8:	601a      	str	r2, [r3, #0]
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	38000000 	.word	0x38000000
 800a508:	38000400 	.word	0x38000400

0800a50c <__assert_func>:
 800a50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50e:	4614      	mov	r4, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	@ (800a538 <__assert_func+0x2c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4605      	mov	r5, r0
 800a518:	68d8      	ldr	r0, [r3, #12]
 800a51a:	b954      	cbnz	r4, 800a532 <__assert_func+0x26>
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <__assert_func+0x30>)
 800a51e:	461c      	mov	r4, r3
 800a520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a524:	9100      	str	r1, [sp, #0]
 800a526:	462b      	mov	r3, r5
 800a528:	4905      	ldr	r1, [pc, #20]	@ (800a540 <__assert_func+0x34>)
 800a52a:	f000 ffb1 	bl	800b490 <fiprintf>
 800a52e:	f001 f90b 	bl	800b748 <abort>
 800a532:	4b04      	ldr	r3, [pc, #16]	@ (800a544 <__assert_func+0x38>)
 800a534:	e7f4      	b.n	800a520 <__assert_func+0x14>
 800a536:	bf00      	nop
 800a538:	240000c8 	.word	0x240000c8
 800a53c:	0800edb2 	.word	0x0800edb2
 800a540:	0800ed84 	.word	0x0800ed84
 800a544:	0800ed77 	.word	0x0800ed77

0800a548 <malloc>:
 800a548:	4b02      	ldr	r3, [pc, #8]	@ (800a554 <malloc+0xc>)
 800a54a:	4601      	mov	r1, r0
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	f000 b82d 	b.w	800a5ac <_malloc_r>
 800a552:	bf00      	nop
 800a554:	240000c8 	.word	0x240000c8

0800a558 <free>:
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <free+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f001 bed9 	b.w	800c314 <_free_r>
 800a562:	bf00      	nop
 800a564:	240000c8 	.word	0x240000c8

0800a568 <sbrk_aligned>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	4e0f      	ldr	r6, [pc, #60]	@ (800a5a8 <sbrk_aligned+0x40>)
 800a56c:	460c      	mov	r4, r1
 800a56e:	6831      	ldr	r1, [r6, #0]
 800a570:	4605      	mov	r5, r0
 800a572:	b911      	cbnz	r1, 800a57a <sbrk_aligned+0x12>
 800a574:	f001 f884 	bl	800b680 <_sbrk_r>
 800a578:	6030      	str	r0, [r6, #0]
 800a57a:	4621      	mov	r1, r4
 800a57c:	4628      	mov	r0, r5
 800a57e:	f001 f87f 	bl	800b680 <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d103      	bne.n	800a58e <sbrk_aligned+0x26>
 800a586:	f04f 34ff 	mov.w	r4, #4294967295
 800a58a:	4620      	mov	r0, r4
 800a58c:	bd70      	pop	{r4, r5, r6, pc}
 800a58e:	1cc4      	adds	r4, r0, #3
 800a590:	f024 0403 	bic.w	r4, r4, #3
 800a594:	42a0      	cmp	r0, r4
 800a596:	d0f8      	beq.n	800a58a <sbrk_aligned+0x22>
 800a598:	1a21      	subs	r1, r4, r0
 800a59a:	4628      	mov	r0, r5
 800a59c:	f001 f870 	bl	800b680 <_sbrk_r>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1f2      	bne.n	800a58a <sbrk_aligned+0x22>
 800a5a4:	e7ef      	b.n	800a586 <sbrk_aligned+0x1e>
 800a5a6:	bf00      	nop
 800a5a8:	24004d70 	.word	0x24004d70

0800a5ac <_malloc_r>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	1ccd      	adds	r5, r1, #3
 800a5b2:	f025 0503 	bic.w	r5, r5, #3
 800a5b6:	3508      	adds	r5, #8
 800a5b8:	2d0c      	cmp	r5, #12
 800a5ba:	bf38      	it	cc
 800a5bc:	250c      	movcc	r5, #12
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	db01      	blt.n	800a5c8 <_malloc_r+0x1c>
 800a5c4:	42a9      	cmp	r1, r5
 800a5c6:	d904      	bls.n	800a5d2 <_malloc_r+0x26>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	6033      	str	r3, [r6, #0]
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6a8 <_malloc_r+0xfc>
 800a5d6:	f000 f869 	bl	800a6ac <__malloc_lock>
 800a5da:	f8d8 3000 	ldr.w	r3, [r8]
 800a5de:	461c      	mov	r4, r3
 800a5e0:	bb44      	cbnz	r4, 800a634 <_malloc_r+0x88>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff ffbf 	bl	800a568 <sbrk_aligned>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	d158      	bne.n	800a6a2 <_malloc_r+0xf6>
 800a5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a5f4:	4627      	mov	r7, r4
 800a5f6:	2f00      	cmp	r7, #0
 800a5f8:	d143      	bne.n	800a682 <_malloc_r+0xd6>
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	d04b      	beq.n	800a696 <_malloc_r+0xea>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	4639      	mov	r1, r7
 800a602:	4630      	mov	r0, r6
 800a604:	eb04 0903 	add.w	r9, r4, r3
 800a608:	f001 f83a 	bl	800b680 <_sbrk_r>
 800a60c:	4581      	cmp	r9, r0
 800a60e:	d142      	bne.n	800a696 <_malloc_r+0xea>
 800a610:	6821      	ldr	r1, [r4, #0]
 800a612:	1a6d      	subs	r5, r5, r1
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f7ff ffa6 	bl	800a568 <sbrk_aligned>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d03a      	beq.n	800a696 <_malloc_r+0xea>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	442b      	add	r3, r5
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	f8d8 3000 	ldr.w	r3, [r8]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	bb62      	cbnz	r2, 800a688 <_malloc_r+0xdc>
 800a62e:	f8c8 7000 	str.w	r7, [r8]
 800a632:	e00f      	b.n	800a654 <_malloc_r+0xa8>
 800a634:	6822      	ldr	r2, [r4, #0]
 800a636:	1b52      	subs	r2, r2, r5
 800a638:	d420      	bmi.n	800a67c <_malloc_r+0xd0>
 800a63a:	2a0b      	cmp	r2, #11
 800a63c:	d917      	bls.n	800a66e <_malloc_r+0xc2>
 800a63e:	1961      	adds	r1, r4, r5
 800a640:	42a3      	cmp	r3, r4
 800a642:	6025      	str	r5, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	6059      	strne	r1, [r3, #4]
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	bf08      	it	eq
 800a64c:	f8c8 1000 	streq.w	r1, [r8]
 800a650:	5162      	str	r2, [r4, r5]
 800a652:	604b      	str	r3, [r1, #4]
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f82f 	bl	800a6b8 <__malloc_unlock>
 800a65a:	f104 000b 	add.w	r0, r4, #11
 800a65e:	1d23      	adds	r3, r4, #4
 800a660:	f020 0007 	bic.w	r0, r0, #7
 800a664:	1ac2      	subs	r2, r0, r3
 800a666:	bf1c      	itt	ne
 800a668:	1a1b      	subne	r3, r3, r0
 800a66a:	50a3      	strne	r3, [r4, r2]
 800a66c:	e7af      	b.n	800a5ce <_malloc_r+0x22>
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	42a3      	cmp	r3, r4
 800a672:	bf0c      	ite	eq
 800a674:	f8c8 2000 	streq.w	r2, [r8]
 800a678:	605a      	strne	r2, [r3, #4]
 800a67a:	e7eb      	b.n	800a654 <_malloc_r+0xa8>
 800a67c:	4623      	mov	r3, r4
 800a67e:	6864      	ldr	r4, [r4, #4]
 800a680:	e7ae      	b.n	800a5e0 <_malloc_r+0x34>
 800a682:	463c      	mov	r4, r7
 800a684:	687f      	ldr	r7, [r7, #4]
 800a686:	e7b6      	b.n	800a5f6 <_malloc_r+0x4a>
 800a688:	461a      	mov	r2, r3
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d1fb      	bne.n	800a688 <_malloc_r+0xdc>
 800a690:	2300      	movs	r3, #0
 800a692:	6053      	str	r3, [r2, #4]
 800a694:	e7de      	b.n	800a654 <_malloc_r+0xa8>
 800a696:	230c      	movs	r3, #12
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f80c 	bl	800a6b8 <__malloc_unlock>
 800a6a0:	e794      	b.n	800a5cc <_malloc_r+0x20>
 800a6a2:	6005      	str	r5, [r0, #0]
 800a6a4:	e7d6      	b.n	800a654 <_malloc_r+0xa8>
 800a6a6:	bf00      	nop
 800a6a8:	24004d74 	.word	0x24004d74

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	@ (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f001 b834 	b.w	800b71a <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	24004eb8 	.word	0x24004eb8

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	@ (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f001 b82f 	b.w	800b71c <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	24004eb8 	.word	0x24004eb8

0800a6c4 <__cvt>:
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	ed2d 8b02 	vpush	{d8}
 800a6ca:	eeb0 8b40 	vmov.f64	d8, d0
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	4617      	mov	r7, r2
 800a6d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a6d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6d6:	ee18 2a90 	vmov	r2, s17
 800a6da:	f025 0520 	bic.w	r5, r5, #32
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	bfb6      	itet	lt
 800a6e2:	222d      	movlt	r2, #45	@ 0x2d
 800a6e4:	2200      	movge	r2, #0
 800a6e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800a6ea:	2d46      	cmp	r5, #70	@ 0x46
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	d004      	beq.n	800a6fc <__cvt+0x38>
 800a6f2:	2d45      	cmp	r5, #69	@ 0x45
 800a6f4:	d100      	bne.n	800a6f8 <__cvt+0x34>
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	2102      	movs	r1, #2
 800a6fa:	e000      	b.n	800a6fe <__cvt+0x3a>
 800a6fc:	2103      	movs	r1, #3
 800a6fe:	ab03      	add	r3, sp, #12
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	ab02      	add	r3, sp, #8
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	4622      	mov	r2, r4
 800a708:	4633      	mov	r3, r6
 800a70a:	eeb0 0b48 	vmov.f64	d0, d8
 800a70e:	f001 f8ab 	bl	800b868 <_dtoa_r>
 800a712:	2d47      	cmp	r5, #71	@ 0x47
 800a714:	d114      	bne.n	800a740 <__cvt+0x7c>
 800a716:	07fb      	lsls	r3, r7, #31
 800a718:	d50a      	bpl.n	800a730 <__cvt+0x6c>
 800a71a:	1902      	adds	r2, r0, r4
 800a71c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	bf08      	it	eq
 800a726:	9203      	streq	r2, [sp, #12]
 800a728:	2130      	movs	r1, #48	@ 0x30
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d319      	bcc.n	800a764 <__cvt+0xa0>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a734:	1a1b      	subs	r3, r3, r0
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	b005      	add	sp, #20
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a740:	2d46      	cmp	r5, #70	@ 0x46
 800a742:	eb00 0204 	add.w	r2, r0, r4
 800a746:	d1e9      	bne.n	800a71c <__cvt+0x58>
 800a748:	7803      	ldrb	r3, [r0, #0]
 800a74a:	2b30      	cmp	r3, #48	@ 0x30
 800a74c:	d107      	bne.n	800a75e <__cvt+0x9a>
 800a74e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a756:	bf1c      	itt	ne
 800a758:	f1c4 0401 	rsbne	r4, r4, #1
 800a75c:	6034      	strne	r4, [r6, #0]
 800a75e:	6833      	ldr	r3, [r6, #0]
 800a760:	441a      	add	r2, r3
 800a762:	e7db      	b.n	800a71c <__cvt+0x58>
 800a764:	1c5c      	adds	r4, r3, #1
 800a766:	9403      	str	r4, [sp, #12]
 800a768:	7019      	strb	r1, [r3, #0]
 800a76a:	e7de      	b.n	800a72a <__cvt+0x66>

0800a76c <__exponent>:
 800a76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a76e:	2900      	cmp	r1, #0
 800a770:	bfba      	itte	lt
 800a772:	4249      	neglt	r1, r1
 800a774:	232d      	movlt	r3, #45	@ 0x2d
 800a776:	232b      	movge	r3, #43	@ 0x2b
 800a778:	2909      	cmp	r1, #9
 800a77a:	7002      	strb	r2, [r0, #0]
 800a77c:	7043      	strb	r3, [r0, #1]
 800a77e:	dd29      	ble.n	800a7d4 <__exponent+0x68>
 800a780:	f10d 0307 	add.w	r3, sp, #7
 800a784:	461d      	mov	r5, r3
 800a786:	270a      	movs	r7, #10
 800a788:	461a      	mov	r2, r3
 800a78a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a78e:	fb07 1416 	mls	r4, r7, r6, r1
 800a792:	3430      	adds	r4, #48	@ 0x30
 800a794:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a798:	460c      	mov	r4, r1
 800a79a:	2c63      	cmp	r4, #99	@ 0x63
 800a79c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	dcf1      	bgt.n	800a788 <__exponent+0x1c>
 800a7a4:	3130      	adds	r1, #48	@ 0x30
 800a7a6:	1e94      	subs	r4, r2, #2
 800a7a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7ac:	1c41      	adds	r1, r0, #1
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	d30a      	bcc.n	800a7ca <__exponent+0x5e>
 800a7b4:	f10d 0309 	add.w	r3, sp, #9
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	42ac      	cmp	r4, r5
 800a7bc:	bf88      	it	hi
 800a7be:	2300      	movhi	r3, #0
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	4403      	add	r3, r0
 800a7c4:	1a18      	subs	r0, r3, r0
 800a7c6:	b003      	add	sp, #12
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7d2:	e7ed      	b.n	800a7b0 <__exponent+0x44>
 800a7d4:	2330      	movs	r3, #48	@ 0x30
 800a7d6:	3130      	adds	r1, #48	@ 0x30
 800a7d8:	7083      	strb	r3, [r0, #2]
 800a7da:	70c1      	strb	r1, [r0, #3]
 800a7dc:	1d03      	adds	r3, r0, #4
 800a7de:	e7f1      	b.n	800a7c4 <__exponent+0x58>

0800a7e0 <_printf_float>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	b08d      	sub	sp, #52	@ 0x34
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	461f      	mov	r7, r3
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	f000 ff0d 	bl	800b610 <_localeconv_r>
 800a7f6:	f8d0 b000 	ldr.w	fp, [r0]
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f7f5 fdd0 	bl	80003a0 <strlen>
 800a800:	2300      	movs	r3, #0
 800a802:	930a      	str	r3, [sp, #40]	@ 0x28
 800a804:	f8d8 3000 	ldr.w	r3, [r8]
 800a808:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a80c:	6822      	ldr	r2, [r4, #0]
 800a80e:	9005      	str	r0, [sp, #20]
 800a810:	3307      	adds	r3, #7
 800a812:	f023 0307 	bic.w	r3, r3, #7
 800a816:	f103 0108 	add.w	r1, r3, #8
 800a81a:	f8c8 1000 	str.w	r1, [r8]
 800a81e:	ed93 0b00 	vldr	d0, [r3]
 800a822:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aa80 <_printf_float+0x2a0>
 800a826:	eeb0 7bc0 	vabs.f64	d7, d0
 800a82a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a832:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a836:	dd24      	ble.n	800a882 <_printf_float+0xa2>
 800a838:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a840:	d502      	bpl.n	800a848 <_printf_float+0x68>
 800a842:	232d      	movs	r3, #45	@ 0x2d
 800a844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a848:	498f      	ldr	r1, [pc, #572]	@ (800aa88 <_printf_float+0x2a8>)
 800a84a:	4b90      	ldr	r3, [pc, #576]	@ (800aa8c <_printf_float+0x2ac>)
 800a84c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a850:	bf94      	ite	ls
 800a852:	4688      	movls	r8, r1
 800a854:	4698      	movhi	r8, r3
 800a856:	f022 0204 	bic.w	r2, r2, #4
 800a85a:	2303      	movs	r3, #3
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	6022      	str	r2, [r4, #0]
 800a860:	f04f 0a00 	mov.w	sl, #0
 800a864:	9700      	str	r7, [sp, #0]
 800a866:	4633      	mov	r3, r6
 800a868:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a86a:	4621      	mov	r1, r4
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f9d1 	bl	800ac14 <_printf_common>
 800a872:	3001      	adds	r0, #1
 800a874:	f040 8089 	bne.w	800a98a <_printf_float+0x1aa>
 800a878:	f04f 30ff 	mov.w	r0, #4294967295
 800a87c:	b00d      	add	sp, #52	@ 0x34
 800a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a882:	eeb4 0b40 	vcmp.f64	d0, d0
 800a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88a:	d709      	bvc.n	800a8a0 <_printf_float+0xc0>
 800a88c:	ee10 3a90 	vmov	r3, s1
 800a890:	2b00      	cmp	r3, #0
 800a892:	bfbc      	itt	lt
 800a894:	232d      	movlt	r3, #45	@ 0x2d
 800a896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a89a:	497d      	ldr	r1, [pc, #500]	@ (800aa90 <_printf_float+0x2b0>)
 800a89c:	4b7d      	ldr	r3, [pc, #500]	@ (800aa94 <_printf_float+0x2b4>)
 800a89e:	e7d5      	b.n	800a84c <_printf_float+0x6c>
 800a8a0:	6863      	ldr	r3, [r4, #4]
 800a8a2:	1c59      	adds	r1, r3, #1
 800a8a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a8a8:	d139      	bne.n	800a91e <_printf_float+0x13e>
 800a8aa:	2306      	movs	r3, #6
 800a8ac:	6063      	str	r3, [r4, #4]
 800a8ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	6022      	str	r2, [r4, #0]
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a8be:	ab09      	add	r3, sp, #36	@ 0x24
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	6861      	ldr	r1, [r4, #4]
 800a8c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7ff fefb 	bl	800a6c4 <__cvt>
 800a8ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	d129      	bne.n	800a92c <_printf_float+0x14c>
 800a8d8:	1cc8      	adds	r0, r1, #3
 800a8da:	db02      	blt.n	800a8e2 <_printf_float+0x102>
 800a8dc:	6863      	ldr	r3, [r4, #4]
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	dd41      	ble.n	800a966 <_printf_float+0x186>
 800a8e2:	f1a9 0902 	sub.w	r9, r9, #2
 800a8e6:	fa5f f989 	uxtb.w	r9, r9
 800a8ea:	3901      	subs	r1, #1
 800a8ec:	464a      	mov	r2, r9
 800a8ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a8f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8f4:	f7ff ff3a 	bl	800a76c <__exponent>
 800a8f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8fa:	1813      	adds	r3, r2, r0
 800a8fc:	2a01      	cmp	r2, #1
 800a8fe:	4682      	mov	sl, r0
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	dc02      	bgt.n	800a90a <_printf_float+0x12a>
 800a904:	6822      	ldr	r2, [r4, #0]
 800a906:	07d2      	lsls	r2, r2, #31
 800a908:	d501      	bpl.n	800a90e <_printf_float+0x12e>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0a6      	beq.n	800a864 <_printf_float+0x84>
 800a916:	232d      	movs	r3, #45	@ 0x2d
 800a918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a91c:	e7a2      	b.n	800a864 <_printf_float+0x84>
 800a91e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a922:	d1c4      	bne.n	800a8ae <_printf_float+0xce>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1c2      	bne.n	800a8ae <_printf_float+0xce>
 800a928:	2301      	movs	r3, #1
 800a92a:	e7bf      	b.n	800a8ac <_printf_float+0xcc>
 800a92c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a930:	d9db      	bls.n	800a8ea <_printf_float+0x10a>
 800a932:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a936:	d118      	bne.n	800a96a <_printf_float+0x18a>
 800a938:	2900      	cmp	r1, #0
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	dd0b      	ble.n	800a956 <_printf_float+0x176>
 800a93e:	6121      	str	r1, [r4, #16]
 800a940:	b913      	cbnz	r3, 800a948 <_printf_float+0x168>
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	07d0      	lsls	r0, r2, #31
 800a946:	d502      	bpl.n	800a94e <_printf_float+0x16e>
 800a948:	3301      	adds	r3, #1
 800a94a:	440b      	add	r3, r1
 800a94c:	6123      	str	r3, [r4, #16]
 800a94e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a950:	f04f 0a00 	mov.w	sl, #0
 800a954:	e7db      	b.n	800a90e <_printf_float+0x12e>
 800a956:	b913      	cbnz	r3, 800a95e <_printf_float+0x17e>
 800a958:	6822      	ldr	r2, [r4, #0]
 800a95a:	07d2      	lsls	r2, r2, #31
 800a95c:	d501      	bpl.n	800a962 <_printf_float+0x182>
 800a95e:	3302      	adds	r3, #2
 800a960:	e7f4      	b.n	800a94c <_printf_float+0x16c>
 800a962:	2301      	movs	r3, #1
 800a964:	e7f2      	b.n	800a94c <_printf_float+0x16c>
 800a966:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a96a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a96c:	4299      	cmp	r1, r3
 800a96e:	db05      	blt.n	800a97c <_printf_float+0x19c>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	6121      	str	r1, [r4, #16]
 800a974:	07d8      	lsls	r0, r3, #31
 800a976:	d5ea      	bpl.n	800a94e <_printf_float+0x16e>
 800a978:	1c4b      	adds	r3, r1, #1
 800a97a:	e7e7      	b.n	800a94c <_printf_float+0x16c>
 800a97c:	2900      	cmp	r1, #0
 800a97e:	bfd4      	ite	le
 800a980:	f1c1 0202 	rsble	r2, r1, #2
 800a984:	2201      	movgt	r2, #1
 800a986:	4413      	add	r3, r2
 800a988:	e7e0      	b.n	800a94c <_printf_float+0x16c>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	055a      	lsls	r2, r3, #21
 800a98e:	d407      	bmi.n	800a9a0 <_printf_float+0x1c0>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	4642      	mov	r2, r8
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	d12a      	bne.n	800a9f4 <_printf_float+0x214>
 800a99e:	e76b      	b.n	800a878 <_printf_float+0x98>
 800a9a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a9a4:	f240 80e0 	bls.w	800ab68 <_printf_float+0x388>
 800a9a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a9ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b4:	d133      	bne.n	800aa1e <_printf_float+0x23e>
 800a9b6:	4a38      	ldr	r2, [pc, #224]	@ (800aa98 <_printf_float+0x2b8>)
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4628      	mov	r0, r5
 800a9be:	47b8      	blx	r7
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	f43f af59 	beq.w	800a878 <_printf_float+0x98>
 800a9c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9ca:	4543      	cmp	r3, r8
 800a9cc:	db02      	blt.n	800a9d4 <_printf_float+0x1f4>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	07d8      	lsls	r0, r3, #31
 800a9d2:	d50f      	bpl.n	800a9f4 <_printf_float+0x214>
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	465a      	mov	r2, fp
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af4a 	beq.w	800a878 <_printf_float+0x98>
 800a9e4:	f04f 0900 	mov.w	r9, #0
 800a9e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9ec:	f104 0a1a 	add.w	sl, r4, #26
 800a9f0:	45c8      	cmp	r8, r9
 800a9f2:	dc09      	bgt.n	800aa08 <_printf_float+0x228>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	079b      	lsls	r3, r3, #30
 800a9f8:	f100 8107 	bmi.w	800ac0a <_printf_float+0x42a>
 800a9fc:	68e0      	ldr	r0, [r4, #12]
 800a9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa00:	4298      	cmp	r0, r3
 800aa02:	bfb8      	it	lt
 800aa04:	4618      	movlt	r0, r3
 800aa06:	e739      	b.n	800a87c <_printf_float+0x9c>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4652      	mov	r2, sl
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	f43f af30 	beq.w	800a878 <_printf_float+0x98>
 800aa18:	f109 0901 	add.w	r9, r9, #1
 800aa1c:	e7e8      	b.n	800a9f0 <_printf_float+0x210>
 800aa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	dc3b      	bgt.n	800aa9c <_printf_float+0x2bc>
 800aa24:	4a1c      	ldr	r2, [pc, #112]	@ (800aa98 <_printf_float+0x2b8>)
 800aa26:	2301      	movs	r3, #1
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	f43f af22 	beq.w	800a878 <_printf_float+0x98>
 800aa34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa38:	ea59 0303 	orrs.w	r3, r9, r3
 800aa3c:	d102      	bne.n	800aa44 <_printf_float+0x264>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	07d9      	lsls	r1, r3, #31
 800aa42:	d5d7      	bpl.n	800a9f4 <_printf_float+0x214>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	465a      	mov	r2, fp
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f af12 	beq.w	800a878 <_printf_float+0x98>
 800aa54:	f04f 0a00 	mov.w	sl, #0
 800aa58:	f104 0b1a 	add.w	fp, r4, #26
 800aa5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5e:	425b      	negs	r3, r3
 800aa60:	4553      	cmp	r3, sl
 800aa62:	dc01      	bgt.n	800aa68 <_printf_float+0x288>
 800aa64:	464b      	mov	r3, r9
 800aa66:	e794      	b.n	800a992 <_printf_float+0x1b2>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	465a      	mov	r2, fp
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b8      	blx	r7
 800aa72:	3001      	adds	r0, #1
 800aa74:	f43f af00 	beq.w	800a878 <_printf_float+0x98>
 800aa78:	f10a 0a01 	add.w	sl, sl, #1
 800aa7c:	e7ee      	b.n	800aa5c <_printf_float+0x27c>
 800aa7e:	bf00      	nop
 800aa80:	ffffffff 	.word	0xffffffff
 800aa84:	7fefffff 	.word	0x7fefffff
 800aa88:	0800edb3 	.word	0x0800edb3
 800aa8c:	0800edb7 	.word	0x0800edb7
 800aa90:	0800edbb 	.word	0x0800edbb
 800aa94:	0800edbf 	.word	0x0800edbf
 800aa98:	0800edc3 	.word	0x0800edc3
 800aa9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaa2:	4553      	cmp	r3, sl
 800aaa4:	bfa8      	it	ge
 800aaa6:	4653      	movge	r3, sl
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	4699      	mov	r9, r3
 800aaac:	dc37      	bgt.n	800ab1e <_printf_float+0x33e>
 800aaae:	2300      	movs	r3, #0
 800aab0:	9307      	str	r3, [sp, #28]
 800aab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aab6:	f104 021a 	add.w	r2, r4, #26
 800aaba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aabc:	9907      	ldr	r1, [sp, #28]
 800aabe:	9306      	str	r3, [sp, #24]
 800aac0:	eba3 0309 	sub.w	r3, r3, r9
 800aac4:	428b      	cmp	r3, r1
 800aac6:	dc31      	bgt.n	800ab2c <_printf_float+0x34c>
 800aac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaca:	459a      	cmp	sl, r3
 800aacc:	dc3b      	bgt.n	800ab46 <_printf_float+0x366>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	07da      	lsls	r2, r3, #31
 800aad2:	d438      	bmi.n	800ab46 <_printf_float+0x366>
 800aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad6:	ebaa 0903 	sub.w	r9, sl, r3
 800aada:	9b06      	ldr	r3, [sp, #24]
 800aadc:	ebaa 0303 	sub.w	r3, sl, r3
 800aae0:	4599      	cmp	r9, r3
 800aae2:	bfa8      	it	ge
 800aae4:	4699      	movge	r9, r3
 800aae6:	f1b9 0f00 	cmp.w	r9, #0
 800aaea:	dc34      	bgt.n	800ab56 <_printf_float+0x376>
 800aaec:	f04f 0800 	mov.w	r8, #0
 800aaf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaf4:	f104 0b1a 	add.w	fp, r4, #26
 800aaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aafa:	ebaa 0303 	sub.w	r3, sl, r3
 800aafe:	eba3 0309 	sub.w	r3, r3, r9
 800ab02:	4543      	cmp	r3, r8
 800ab04:	f77f af76 	ble.w	800a9f4 <_printf_float+0x214>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	465a      	mov	r2, fp
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	47b8      	blx	r7
 800ab12:	3001      	adds	r0, #1
 800ab14:	f43f aeb0 	beq.w	800a878 <_printf_float+0x98>
 800ab18:	f108 0801 	add.w	r8, r8, #1
 800ab1c:	e7ec      	b.n	800aaf8 <_printf_float+0x318>
 800ab1e:	4642      	mov	r2, r8
 800ab20:	4631      	mov	r1, r6
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	d1c1      	bne.n	800aaae <_printf_float+0x2ce>
 800ab2a:	e6a5      	b.n	800a878 <_printf_float+0x98>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	9206      	str	r2, [sp, #24]
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f ae9e 	beq.w	800a878 <_printf_float+0x98>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	9a06      	ldr	r2, [sp, #24]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9307      	str	r3, [sp, #28]
 800ab44:	e7b9      	b.n	800aaba <_printf_float+0x2da>
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	465a      	mov	r2, fp
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	d1bf      	bne.n	800aad4 <_printf_float+0x2f4>
 800ab54:	e690      	b.n	800a878 <_printf_float+0x98>
 800ab56:	9a06      	ldr	r2, [sp, #24]
 800ab58:	464b      	mov	r3, r9
 800ab5a:	4442      	add	r2, r8
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b8      	blx	r7
 800ab62:	3001      	adds	r0, #1
 800ab64:	d1c2      	bne.n	800aaec <_printf_float+0x30c>
 800ab66:	e687      	b.n	800a878 <_printf_float+0x98>
 800ab68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ab6c:	f1b9 0f01 	cmp.w	r9, #1
 800ab70:	dc01      	bgt.n	800ab76 <_printf_float+0x396>
 800ab72:	07db      	lsls	r3, r3, #31
 800ab74:	d536      	bpl.n	800abe4 <_printf_float+0x404>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4642      	mov	r2, r8
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f ae79 	beq.w	800a878 <_printf_float+0x98>
 800ab86:	9b05      	ldr	r3, [sp, #20]
 800ab88:	465a      	mov	r2, fp
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	f43f ae71 	beq.w	800a878 <_printf_float+0x98>
 800ab96:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba2:	f109 39ff 	add.w	r9, r9, #4294967295
 800aba6:	d018      	beq.n	800abda <_printf_float+0x3fa>
 800aba8:	464b      	mov	r3, r9
 800abaa:	f108 0201 	add.w	r2, r8, #1
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	d10c      	bne.n	800abd2 <_printf_float+0x3f2>
 800abb8:	e65e      	b.n	800a878 <_printf_float+0x98>
 800abba:	2301      	movs	r3, #1
 800abbc:	465a      	mov	r2, fp
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	f43f ae57 	beq.w	800a878 <_printf_float+0x98>
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	45c8      	cmp	r8, r9
 800abd0:	dbf3      	blt.n	800abba <_printf_float+0x3da>
 800abd2:	4653      	mov	r3, sl
 800abd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800abd8:	e6dc      	b.n	800a994 <_printf_float+0x1b4>
 800abda:	f04f 0800 	mov.w	r8, #0
 800abde:	f104 0b1a 	add.w	fp, r4, #26
 800abe2:	e7f4      	b.n	800abce <_printf_float+0x3ee>
 800abe4:	2301      	movs	r3, #1
 800abe6:	4642      	mov	r2, r8
 800abe8:	e7e1      	b.n	800abae <_printf_float+0x3ce>
 800abea:	2301      	movs	r3, #1
 800abec:	464a      	mov	r2, r9
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	f43f ae3f 	beq.w	800a878 <_printf_float+0x98>
 800abfa:	f108 0801 	add.w	r8, r8, #1
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac02:	1a5b      	subs	r3, r3, r1
 800ac04:	4543      	cmp	r3, r8
 800ac06:	dcf0      	bgt.n	800abea <_printf_float+0x40a>
 800ac08:	e6f8      	b.n	800a9fc <_printf_float+0x21c>
 800ac0a:	f04f 0800 	mov.w	r8, #0
 800ac0e:	f104 0919 	add.w	r9, r4, #25
 800ac12:	e7f4      	b.n	800abfe <_printf_float+0x41e>

0800ac14 <_printf_common>:
 800ac14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	4616      	mov	r6, r2
 800ac1a:	4698      	mov	r8, r3
 800ac1c:	688a      	ldr	r2, [r1, #8]
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bfb8      	it	lt
 800ac28:	4613      	movlt	r3, r2
 800ac2a:	6033      	str	r3, [r6, #0]
 800ac2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac30:	4607      	mov	r7, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	b10a      	cbz	r2, 800ac3a <_printf_common+0x26>
 800ac36:	3301      	adds	r3, #1
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	0699      	lsls	r1, r3, #26
 800ac3e:	bf42      	ittt	mi
 800ac40:	6833      	ldrmi	r3, [r6, #0]
 800ac42:	3302      	addmi	r3, #2
 800ac44:	6033      	strmi	r3, [r6, #0]
 800ac46:	6825      	ldr	r5, [r4, #0]
 800ac48:	f015 0506 	ands.w	r5, r5, #6
 800ac4c:	d106      	bne.n	800ac5c <_printf_common+0x48>
 800ac4e:	f104 0a19 	add.w	sl, r4, #25
 800ac52:	68e3      	ldr	r3, [r4, #12]
 800ac54:	6832      	ldr	r2, [r6, #0]
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	42ab      	cmp	r3, r5
 800ac5a:	dc26      	bgt.n	800acaa <_printf_common+0x96>
 800ac5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac60:	6822      	ldr	r2, [r4, #0]
 800ac62:	3b00      	subs	r3, #0
 800ac64:	bf18      	it	ne
 800ac66:	2301      	movne	r3, #1
 800ac68:	0692      	lsls	r2, r2, #26
 800ac6a:	d42b      	bmi.n	800acc4 <_printf_common+0xb0>
 800ac6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac70:	4641      	mov	r1, r8
 800ac72:	4638      	mov	r0, r7
 800ac74:	47c8      	blx	r9
 800ac76:	3001      	adds	r0, #1
 800ac78:	d01e      	beq.n	800acb8 <_printf_common+0xa4>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	6922      	ldr	r2, [r4, #16]
 800ac7e:	f003 0306 	and.w	r3, r3, #6
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	bf02      	ittt	eq
 800ac86:	68e5      	ldreq	r5, [r4, #12]
 800ac88:	6833      	ldreq	r3, [r6, #0]
 800ac8a:	1aed      	subeq	r5, r5, r3
 800ac8c:	68a3      	ldr	r3, [r4, #8]
 800ac8e:	bf0c      	ite	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	2500      	movne	r5, #0
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bfc4      	itt	gt
 800ac9a:	1a9b      	subgt	r3, r3, r2
 800ac9c:	18ed      	addgt	r5, r5, r3
 800ac9e:	2600      	movs	r6, #0
 800aca0:	341a      	adds	r4, #26
 800aca2:	42b5      	cmp	r5, r6
 800aca4:	d11a      	bne.n	800acdc <_printf_common+0xc8>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e008      	b.n	800acbc <_printf_common+0xa8>
 800acaa:	2301      	movs	r3, #1
 800acac:	4652      	mov	r2, sl
 800acae:	4641      	mov	r1, r8
 800acb0:	4638      	mov	r0, r7
 800acb2:	47c8      	blx	r9
 800acb4:	3001      	adds	r0, #1
 800acb6:	d103      	bne.n	800acc0 <_printf_common+0xac>
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	3501      	adds	r5, #1
 800acc2:	e7c6      	b.n	800ac52 <_printf_common+0x3e>
 800acc4:	18e1      	adds	r1, r4, r3
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	2030      	movs	r0, #48	@ 0x30
 800acca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acce:	4422      	add	r2, r4
 800acd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acd8:	3302      	adds	r3, #2
 800acda:	e7c7      	b.n	800ac6c <_printf_common+0x58>
 800acdc:	2301      	movs	r3, #1
 800acde:	4622      	mov	r2, r4
 800ace0:	4641      	mov	r1, r8
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c8      	blx	r9
 800ace6:	3001      	adds	r0, #1
 800ace8:	d0e6      	beq.n	800acb8 <_printf_common+0xa4>
 800acea:	3601      	adds	r6, #1
 800acec:	e7d9      	b.n	800aca2 <_printf_common+0x8e>
	...

0800acf0 <_printf_i>:
 800acf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	7e0f      	ldrb	r7, [r1, #24]
 800acf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acf8:	2f78      	cmp	r7, #120	@ 0x78
 800acfa:	4691      	mov	r9, r2
 800acfc:	4680      	mov	r8, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	469a      	mov	sl, r3
 800ad02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad06:	d807      	bhi.n	800ad18 <_printf_i+0x28>
 800ad08:	2f62      	cmp	r7, #98	@ 0x62
 800ad0a:	d80a      	bhi.n	800ad22 <_printf_i+0x32>
 800ad0c:	2f00      	cmp	r7, #0
 800ad0e:	f000 80d2 	beq.w	800aeb6 <_printf_i+0x1c6>
 800ad12:	2f58      	cmp	r7, #88	@ 0x58
 800ad14:	f000 80b9 	beq.w	800ae8a <_printf_i+0x19a>
 800ad18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad20:	e03a      	b.n	800ad98 <_printf_i+0xa8>
 800ad22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad26:	2b15      	cmp	r3, #21
 800ad28:	d8f6      	bhi.n	800ad18 <_printf_i+0x28>
 800ad2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ad30 <_printf_i+0x40>)
 800ad2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	0800ad9d 	.word	0x0800ad9d
 800ad38:	0800ad19 	.word	0x0800ad19
 800ad3c:	0800ad19 	.word	0x0800ad19
 800ad40:	0800ad19 	.word	0x0800ad19
 800ad44:	0800ad19 	.word	0x0800ad19
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800ad19 	.word	0x0800ad19
 800ad50:	0800ad19 	.word	0x0800ad19
 800ad54:	0800ad19 	.word	0x0800ad19
 800ad58:	0800ad19 	.word	0x0800ad19
 800ad5c:	0800ae9d 	.word	0x0800ae9d
 800ad60:	0800adc7 	.word	0x0800adc7
 800ad64:	0800ae57 	.word	0x0800ae57
 800ad68:	0800ad19 	.word	0x0800ad19
 800ad6c:	0800ad19 	.word	0x0800ad19
 800ad70:	0800aebf 	.word	0x0800aebf
 800ad74:	0800ad19 	.word	0x0800ad19
 800ad78:	0800adc7 	.word	0x0800adc7
 800ad7c:	0800ad19 	.word	0x0800ad19
 800ad80:	0800ad19 	.word	0x0800ad19
 800ad84:	0800ae5f 	.word	0x0800ae5f
 800ad88:	6833      	ldr	r3, [r6, #0]
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6032      	str	r2, [r6, #0]
 800ad90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e09d      	b.n	800aed8 <_printf_i+0x1e8>
 800ad9c:	6833      	ldr	r3, [r6, #0]
 800ad9e:	6820      	ldr	r0, [r4, #0]
 800ada0:	1d19      	adds	r1, r3, #4
 800ada2:	6031      	str	r1, [r6, #0]
 800ada4:	0606      	lsls	r6, r0, #24
 800ada6:	d501      	bpl.n	800adac <_printf_i+0xbc>
 800ada8:	681d      	ldr	r5, [r3, #0]
 800adaa:	e003      	b.n	800adb4 <_printf_i+0xc4>
 800adac:	0645      	lsls	r5, r0, #25
 800adae:	d5fb      	bpl.n	800ada8 <_printf_i+0xb8>
 800adb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	da03      	bge.n	800adc0 <_printf_i+0xd0>
 800adb8:	232d      	movs	r3, #45	@ 0x2d
 800adba:	426d      	negs	r5, r5
 800adbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adc0:	4859      	ldr	r0, [pc, #356]	@ (800af28 <_printf_i+0x238>)
 800adc2:	230a      	movs	r3, #10
 800adc4:	e011      	b.n	800adea <_printf_i+0xfa>
 800adc6:	6821      	ldr	r1, [r4, #0]
 800adc8:	6833      	ldr	r3, [r6, #0]
 800adca:	0608      	lsls	r0, r1, #24
 800adcc:	f853 5b04 	ldr.w	r5, [r3], #4
 800add0:	d402      	bmi.n	800add8 <_printf_i+0xe8>
 800add2:	0649      	lsls	r1, r1, #25
 800add4:	bf48      	it	mi
 800add6:	b2ad      	uxthmi	r5, r5
 800add8:	2f6f      	cmp	r7, #111	@ 0x6f
 800adda:	4853      	ldr	r0, [pc, #332]	@ (800af28 <_printf_i+0x238>)
 800addc:	6033      	str	r3, [r6, #0]
 800adde:	bf14      	ite	ne
 800ade0:	230a      	movne	r3, #10
 800ade2:	2308      	moveq	r3, #8
 800ade4:	2100      	movs	r1, #0
 800ade6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adea:	6866      	ldr	r6, [r4, #4]
 800adec:	60a6      	str	r6, [r4, #8]
 800adee:	2e00      	cmp	r6, #0
 800adf0:	bfa2      	ittt	ge
 800adf2:	6821      	ldrge	r1, [r4, #0]
 800adf4:	f021 0104 	bicge.w	r1, r1, #4
 800adf8:	6021      	strge	r1, [r4, #0]
 800adfa:	b90d      	cbnz	r5, 800ae00 <_printf_i+0x110>
 800adfc:	2e00      	cmp	r6, #0
 800adfe:	d04b      	beq.n	800ae98 <_printf_i+0x1a8>
 800ae00:	4616      	mov	r6, r2
 800ae02:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae06:	fb03 5711 	mls	r7, r3, r1, r5
 800ae0a:	5dc7      	ldrb	r7, [r0, r7]
 800ae0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae10:	462f      	mov	r7, r5
 800ae12:	42bb      	cmp	r3, r7
 800ae14:	460d      	mov	r5, r1
 800ae16:	d9f4      	bls.n	800ae02 <_printf_i+0x112>
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d10b      	bne.n	800ae34 <_printf_i+0x144>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	07df      	lsls	r7, r3, #31
 800ae20:	d508      	bpl.n	800ae34 <_printf_i+0x144>
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	6861      	ldr	r1, [r4, #4]
 800ae26:	4299      	cmp	r1, r3
 800ae28:	bfde      	ittt	le
 800ae2a:	2330      	movle	r3, #48	@ 0x30
 800ae2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae34:	1b92      	subs	r2, r2, r6
 800ae36:	6122      	str	r2, [r4, #16]
 800ae38:	f8cd a000 	str.w	sl, [sp]
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	aa03      	add	r2, sp, #12
 800ae40:	4621      	mov	r1, r4
 800ae42:	4640      	mov	r0, r8
 800ae44:	f7ff fee6 	bl	800ac14 <_printf_common>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d14a      	bne.n	800aee2 <_printf_i+0x1f2>
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b004      	add	sp, #16
 800ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	f043 0320 	orr.w	r3, r3, #32
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	4833      	ldr	r0, [pc, #204]	@ (800af2c <_printf_i+0x23c>)
 800ae60:	2778      	movs	r7, #120	@ 0x78
 800ae62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	6831      	ldr	r1, [r6, #0]
 800ae6a:	061f      	lsls	r7, r3, #24
 800ae6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae70:	d402      	bmi.n	800ae78 <_printf_i+0x188>
 800ae72:	065f      	lsls	r7, r3, #25
 800ae74:	bf48      	it	mi
 800ae76:	b2ad      	uxthmi	r5, r5
 800ae78:	6031      	str	r1, [r6, #0]
 800ae7a:	07d9      	lsls	r1, r3, #31
 800ae7c:	bf44      	itt	mi
 800ae7e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae82:	6023      	strmi	r3, [r4, #0]
 800ae84:	b11d      	cbz	r5, 800ae8e <_printf_i+0x19e>
 800ae86:	2310      	movs	r3, #16
 800ae88:	e7ac      	b.n	800ade4 <_printf_i+0xf4>
 800ae8a:	4827      	ldr	r0, [pc, #156]	@ (800af28 <_printf_i+0x238>)
 800ae8c:	e7e9      	b.n	800ae62 <_printf_i+0x172>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	f023 0320 	bic.w	r3, r3, #32
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	e7f6      	b.n	800ae86 <_printf_i+0x196>
 800ae98:	4616      	mov	r6, r2
 800ae9a:	e7bd      	b.n	800ae18 <_printf_i+0x128>
 800ae9c:	6833      	ldr	r3, [r6, #0]
 800ae9e:	6825      	ldr	r5, [r4, #0]
 800aea0:	6961      	ldr	r1, [r4, #20]
 800aea2:	1d18      	adds	r0, r3, #4
 800aea4:	6030      	str	r0, [r6, #0]
 800aea6:	062e      	lsls	r6, r5, #24
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	d501      	bpl.n	800aeb0 <_printf_i+0x1c0>
 800aeac:	6019      	str	r1, [r3, #0]
 800aeae:	e002      	b.n	800aeb6 <_printf_i+0x1c6>
 800aeb0:	0668      	lsls	r0, r5, #25
 800aeb2:	d5fb      	bpl.n	800aeac <_printf_i+0x1bc>
 800aeb4:	8019      	strh	r1, [r3, #0]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	4616      	mov	r6, r2
 800aebc:	e7bc      	b.n	800ae38 <_printf_i+0x148>
 800aebe:	6833      	ldr	r3, [r6, #0]
 800aec0:	1d1a      	adds	r2, r3, #4
 800aec2:	6032      	str	r2, [r6, #0]
 800aec4:	681e      	ldr	r6, [r3, #0]
 800aec6:	6862      	ldr	r2, [r4, #4]
 800aec8:	2100      	movs	r1, #0
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7f5 fa18 	bl	8000300 <memchr>
 800aed0:	b108      	cbz	r0, 800aed6 <_printf_i+0x1e6>
 800aed2:	1b80      	subs	r0, r0, r6
 800aed4:	6060      	str	r0, [r4, #4]
 800aed6:	6863      	ldr	r3, [r4, #4]
 800aed8:	6123      	str	r3, [r4, #16]
 800aeda:	2300      	movs	r3, #0
 800aedc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aee0:	e7aa      	b.n	800ae38 <_printf_i+0x148>
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	4632      	mov	r2, r6
 800aee6:	4649      	mov	r1, r9
 800aee8:	4640      	mov	r0, r8
 800aeea:	47d0      	blx	sl
 800aeec:	3001      	adds	r0, #1
 800aeee:	d0ad      	beq.n	800ae4c <_printf_i+0x15c>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	079b      	lsls	r3, r3, #30
 800aef4:	d413      	bmi.n	800af1e <_printf_i+0x22e>
 800aef6:	68e0      	ldr	r0, [r4, #12]
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	4298      	cmp	r0, r3
 800aefc:	bfb8      	it	lt
 800aefe:	4618      	movlt	r0, r3
 800af00:	e7a6      	b.n	800ae50 <_printf_i+0x160>
 800af02:	2301      	movs	r3, #1
 800af04:	4632      	mov	r2, r6
 800af06:	4649      	mov	r1, r9
 800af08:	4640      	mov	r0, r8
 800af0a:	47d0      	blx	sl
 800af0c:	3001      	adds	r0, #1
 800af0e:	d09d      	beq.n	800ae4c <_printf_i+0x15c>
 800af10:	3501      	adds	r5, #1
 800af12:	68e3      	ldr	r3, [r4, #12]
 800af14:	9903      	ldr	r1, [sp, #12]
 800af16:	1a5b      	subs	r3, r3, r1
 800af18:	42ab      	cmp	r3, r5
 800af1a:	dcf2      	bgt.n	800af02 <_printf_i+0x212>
 800af1c:	e7eb      	b.n	800aef6 <_printf_i+0x206>
 800af1e:	2500      	movs	r5, #0
 800af20:	f104 0619 	add.w	r6, r4, #25
 800af24:	e7f5      	b.n	800af12 <_printf_i+0x222>
 800af26:	bf00      	nop
 800af28:	0800edc5 	.word	0x0800edc5
 800af2c:	0800edd6 	.word	0x0800edd6

0800af30 <_scanf_float>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	b087      	sub	sp, #28
 800af36:	4617      	mov	r7, r2
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	688b      	ldr	r3, [r1, #8]
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af42:	bf81      	itttt	hi
 800af44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af48:	eb03 0b05 	addhi.w	fp, r3, r5
 800af4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af50:	608b      	strhi	r3, [r1, #8]
 800af52:	680b      	ldr	r3, [r1, #0]
 800af54:	460a      	mov	r2, r1
 800af56:	f04f 0500 	mov.w	r5, #0
 800af5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af5e:	f842 3b1c 	str.w	r3, [r2], #28
 800af62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af66:	4680      	mov	r8, r0
 800af68:	460c      	mov	r4, r1
 800af6a:	bf98      	it	ls
 800af6c:	f04f 0b00 	movls.w	fp, #0
 800af70:	9201      	str	r2, [sp, #4]
 800af72:	4616      	mov	r6, r2
 800af74:	46aa      	mov	sl, r5
 800af76:	46a9      	mov	r9, r5
 800af78:	9502      	str	r5, [sp, #8]
 800af7a:	68a2      	ldr	r2, [r4, #8]
 800af7c:	b152      	cbz	r2, 800af94 <_scanf_float+0x64>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b4e      	cmp	r3, #78	@ 0x4e
 800af84:	d864      	bhi.n	800b050 <_scanf_float+0x120>
 800af86:	2b40      	cmp	r3, #64	@ 0x40
 800af88:	d83c      	bhi.n	800b004 <_scanf_float+0xd4>
 800af8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af8e:	b2c8      	uxtb	r0, r1
 800af90:	280e      	cmp	r0, #14
 800af92:	d93a      	bls.n	800b00a <_scanf_float+0xda>
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	d003      	beq.n	800afa2 <_scanf_float+0x72>
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afa6:	f1ba 0f01 	cmp.w	sl, #1
 800afaa:	f200 8117 	bhi.w	800b1dc <_scanf_float+0x2ac>
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	429e      	cmp	r6, r3
 800afb2:	f200 8108 	bhi.w	800b1c6 <_scanf_float+0x296>
 800afb6:	2001      	movs	r0, #1
 800afb8:	b007      	add	sp, #28
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afc2:	2a0d      	cmp	r2, #13
 800afc4:	d8e6      	bhi.n	800af94 <_scanf_float+0x64>
 800afc6:	a101      	add	r1, pc, #4	@ (adr r1, 800afcc <_scanf_float+0x9c>)
 800afc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afcc:	0800b113 	.word	0x0800b113
 800afd0:	0800af95 	.word	0x0800af95
 800afd4:	0800af95 	.word	0x0800af95
 800afd8:	0800af95 	.word	0x0800af95
 800afdc:	0800b173 	.word	0x0800b173
 800afe0:	0800b14b 	.word	0x0800b14b
 800afe4:	0800af95 	.word	0x0800af95
 800afe8:	0800af95 	.word	0x0800af95
 800afec:	0800b121 	.word	0x0800b121
 800aff0:	0800af95 	.word	0x0800af95
 800aff4:	0800af95 	.word	0x0800af95
 800aff8:	0800af95 	.word	0x0800af95
 800affc:	0800af95 	.word	0x0800af95
 800b000:	0800b0d9 	.word	0x0800b0d9
 800b004:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b008:	e7db      	b.n	800afc2 <_scanf_float+0x92>
 800b00a:	290e      	cmp	r1, #14
 800b00c:	d8c2      	bhi.n	800af94 <_scanf_float+0x64>
 800b00e:	a001      	add	r0, pc, #4	@ (adr r0, 800b014 <_scanf_float+0xe4>)
 800b010:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b014:	0800b0c9 	.word	0x0800b0c9
 800b018:	0800af95 	.word	0x0800af95
 800b01c:	0800b0c9 	.word	0x0800b0c9
 800b020:	0800b15f 	.word	0x0800b15f
 800b024:	0800af95 	.word	0x0800af95
 800b028:	0800b071 	.word	0x0800b071
 800b02c:	0800b0af 	.word	0x0800b0af
 800b030:	0800b0af 	.word	0x0800b0af
 800b034:	0800b0af 	.word	0x0800b0af
 800b038:	0800b0af 	.word	0x0800b0af
 800b03c:	0800b0af 	.word	0x0800b0af
 800b040:	0800b0af 	.word	0x0800b0af
 800b044:	0800b0af 	.word	0x0800b0af
 800b048:	0800b0af 	.word	0x0800b0af
 800b04c:	0800b0af 	.word	0x0800b0af
 800b050:	2b6e      	cmp	r3, #110	@ 0x6e
 800b052:	d809      	bhi.n	800b068 <_scanf_float+0x138>
 800b054:	2b60      	cmp	r3, #96	@ 0x60
 800b056:	d8b2      	bhi.n	800afbe <_scanf_float+0x8e>
 800b058:	2b54      	cmp	r3, #84	@ 0x54
 800b05a:	d07b      	beq.n	800b154 <_scanf_float+0x224>
 800b05c:	2b59      	cmp	r3, #89	@ 0x59
 800b05e:	d199      	bne.n	800af94 <_scanf_float+0x64>
 800b060:	2d07      	cmp	r5, #7
 800b062:	d197      	bne.n	800af94 <_scanf_float+0x64>
 800b064:	2508      	movs	r5, #8
 800b066:	e02c      	b.n	800b0c2 <_scanf_float+0x192>
 800b068:	2b74      	cmp	r3, #116	@ 0x74
 800b06a:	d073      	beq.n	800b154 <_scanf_float+0x224>
 800b06c:	2b79      	cmp	r3, #121	@ 0x79
 800b06e:	e7f6      	b.n	800b05e <_scanf_float+0x12e>
 800b070:	6821      	ldr	r1, [r4, #0]
 800b072:	05c8      	lsls	r0, r1, #23
 800b074:	d51b      	bpl.n	800b0ae <_scanf_float+0x17e>
 800b076:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b07a:	6021      	str	r1, [r4, #0]
 800b07c:	f109 0901 	add.w	r9, r9, #1
 800b080:	f1bb 0f00 	cmp.w	fp, #0
 800b084:	d003      	beq.n	800b08e <_scanf_float+0x15e>
 800b086:	3201      	adds	r2, #1
 800b088:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b08c:	60a2      	str	r2, [r4, #8]
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	3301      	adds	r3, #1
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	607b      	str	r3, [r7, #4]
 800b0a2:	f340 8087 	ble.w	800b1b4 <_scanf_float+0x284>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	e765      	b.n	800af7a <_scanf_float+0x4a>
 800b0ae:	eb1a 0105 	adds.w	r1, sl, r5
 800b0b2:	f47f af6f 	bne.w	800af94 <_scanf_float+0x64>
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0bc:	6022      	str	r2, [r4, #0]
 800b0be:	460d      	mov	r5, r1
 800b0c0:	468a      	mov	sl, r1
 800b0c2:	f806 3b01 	strb.w	r3, [r6], #1
 800b0c6:	e7e2      	b.n	800b08e <_scanf_float+0x15e>
 800b0c8:	6822      	ldr	r2, [r4, #0]
 800b0ca:	0610      	lsls	r0, r2, #24
 800b0cc:	f57f af62 	bpl.w	800af94 <_scanf_float+0x64>
 800b0d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0d4:	6022      	str	r2, [r4, #0]
 800b0d6:	e7f4      	b.n	800b0c2 <_scanf_float+0x192>
 800b0d8:	f1ba 0f00 	cmp.w	sl, #0
 800b0dc:	d10e      	bne.n	800b0fc <_scanf_float+0x1cc>
 800b0de:	f1b9 0f00 	cmp.w	r9, #0
 800b0e2:	d10e      	bne.n	800b102 <_scanf_float+0x1d2>
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0ee:	d108      	bne.n	800b102 <_scanf_float+0x1d2>
 800b0f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0f4:	6022      	str	r2, [r4, #0]
 800b0f6:	f04f 0a01 	mov.w	sl, #1
 800b0fa:	e7e2      	b.n	800b0c2 <_scanf_float+0x192>
 800b0fc:	f1ba 0f02 	cmp.w	sl, #2
 800b100:	d055      	beq.n	800b1ae <_scanf_float+0x27e>
 800b102:	2d01      	cmp	r5, #1
 800b104:	d002      	beq.n	800b10c <_scanf_float+0x1dc>
 800b106:	2d04      	cmp	r5, #4
 800b108:	f47f af44 	bne.w	800af94 <_scanf_float+0x64>
 800b10c:	3501      	adds	r5, #1
 800b10e:	b2ed      	uxtb	r5, r5
 800b110:	e7d7      	b.n	800b0c2 <_scanf_float+0x192>
 800b112:	f1ba 0f01 	cmp.w	sl, #1
 800b116:	f47f af3d 	bne.w	800af94 <_scanf_float+0x64>
 800b11a:	f04f 0a02 	mov.w	sl, #2
 800b11e:	e7d0      	b.n	800b0c2 <_scanf_float+0x192>
 800b120:	b97d      	cbnz	r5, 800b142 <_scanf_float+0x212>
 800b122:	f1b9 0f00 	cmp.w	r9, #0
 800b126:	f47f af38 	bne.w	800af9a <_scanf_float+0x6a>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b130:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b134:	f040 8101 	bne.w	800b33a <_scanf_float+0x40a>
 800b138:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b13c:	6022      	str	r2, [r4, #0]
 800b13e:	2501      	movs	r5, #1
 800b140:	e7bf      	b.n	800b0c2 <_scanf_float+0x192>
 800b142:	2d03      	cmp	r5, #3
 800b144:	d0e2      	beq.n	800b10c <_scanf_float+0x1dc>
 800b146:	2d05      	cmp	r5, #5
 800b148:	e7de      	b.n	800b108 <_scanf_float+0x1d8>
 800b14a:	2d02      	cmp	r5, #2
 800b14c:	f47f af22 	bne.w	800af94 <_scanf_float+0x64>
 800b150:	2503      	movs	r5, #3
 800b152:	e7b6      	b.n	800b0c2 <_scanf_float+0x192>
 800b154:	2d06      	cmp	r5, #6
 800b156:	f47f af1d 	bne.w	800af94 <_scanf_float+0x64>
 800b15a:	2507      	movs	r5, #7
 800b15c:	e7b1      	b.n	800b0c2 <_scanf_float+0x192>
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	0591      	lsls	r1, r2, #22
 800b162:	f57f af17 	bpl.w	800af94 <_scanf_float+0x64>
 800b166:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b16a:	6022      	str	r2, [r4, #0]
 800b16c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b170:	e7a7      	b.n	800b0c2 <_scanf_float+0x192>
 800b172:	6822      	ldr	r2, [r4, #0]
 800b174:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b178:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b17c:	d006      	beq.n	800b18c <_scanf_float+0x25c>
 800b17e:	0550      	lsls	r0, r2, #21
 800b180:	f57f af08 	bpl.w	800af94 <_scanf_float+0x64>
 800b184:	f1b9 0f00 	cmp.w	r9, #0
 800b188:	f000 80d7 	beq.w	800b33a <_scanf_float+0x40a>
 800b18c:	0591      	lsls	r1, r2, #22
 800b18e:	bf58      	it	pl
 800b190:	9902      	ldrpl	r1, [sp, #8]
 800b192:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b196:	bf58      	it	pl
 800b198:	eba9 0101 	subpl.w	r1, r9, r1
 800b19c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1a0:	bf58      	it	pl
 800b1a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1a6:	6022      	str	r2, [r4, #0]
 800b1a8:	f04f 0900 	mov.w	r9, #0
 800b1ac:	e789      	b.n	800b0c2 <_scanf_float+0x192>
 800b1ae:	f04f 0a03 	mov.w	sl, #3
 800b1b2:	e786      	b.n	800b0c2 <_scanf_float+0x192>
 800b1b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	4798      	blx	r3
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f aedb 	beq.w	800af7a <_scanf_float+0x4a>
 800b1c4:	e6e6      	b.n	800af94 <_scanf_float+0x64>
 800b1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1ce:	463a      	mov	r2, r7
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4798      	blx	r3
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	e6e8      	b.n	800afae <_scanf_float+0x7e>
 800b1dc:	1e6b      	subs	r3, r5, #1
 800b1de:	2b06      	cmp	r3, #6
 800b1e0:	d824      	bhi.n	800b22c <_scanf_float+0x2fc>
 800b1e2:	2d02      	cmp	r5, #2
 800b1e4:	d836      	bhi.n	800b254 <_scanf_float+0x324>
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	429e      	cmp	r6, r3
 800b1ea:	f67f aee4 	bls.w	800afb6 <_scanf_float+0x86>
 800b1ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1f6:	463a      	mov	r2, r7
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4798      	blx	r3
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	e7f0      	b.n	800b1e6 <_scanf_float+0x2b6>
 800b204:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b208:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b20c:	463a      	mov	r2, r7
 800b20e:	4640      	mov	r0, r8
 800b210:	4798      	blx	r3
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	3b01      	subs	r3, #1
 800b216:	6123      	str	r3, [r4, #16]
 800b218:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b21c:	fa5f fa8a 	uxtb.w	sl, sl
 800b220:	f1ba 0f02 	cmp.w	sl, #2
 800b224:	d1ee      	bne.n	800b204 <_scanf_float+0x2d4>
 800b226:	3d03      	subs	r5, #3
 800b228:	b2ed      	uxtb	r5, r5
 800b22a:	1b76      	subs	r6, r6, r5
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	05da      	lsls	r2, r3, #23
 800b230:	d530      	bpl.n	800b294 <_scanf_float+0x364>
 800b232:	055b      	lsls	r3, r3, #21
 800b234:	d511      	bpl.n	800b25a <_scanf_float+0x32a>
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	429e      	cmp	r6, r3
 800b23a:	f67f aebc 	bls.w	800afb6 <_scanf_float+0x86>
 800b23e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b246:	463a      	mov	r2, r7
 800b248:	4640      	mov	r0, r8
 800b24a:	4798      	blx	r3
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	3b01      	subs	r3, #1
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	e7f0      	b.n	800b236 <_scanf_float+0x306>
 800b254:	46aa      	mov	sl, r5
 800b256:	46b3      	mov	fp, r6
 800b258:	e7de      	b.n	800b218 <_scanf_float+0x2e8>
 800b25a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	2965      	cmp	r1, #101	@ 0x65
 800b262:	f103 33ff 	add.w	r3, r3, #4294967295
 800b266:	f106 35ff 	add.w	r5, r6, #4294967295
 800b26a:	6123      	str	r3, [r4, #16]
 800b26c:	d00c      	beq.n	800b288 <_scanf_float+0x358>
 800b26e:	2945      	cmp	r1, #69	@ 0x45
 800b270:	d00a      	beq.n	800b288 <_scanf_float+0x358>
 800b272:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b276:	463a      	mov	r2, r7
 800b278:	4640      	mov	r0, r8
 800b27a:	4798      	blx	r3
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b282:	3b01      	subs	r3, #1
 800b284:	1eb5      	subs	r5, r6, #2
 800b286:	6123      	str	r3, [r4, #16]
 800b288:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b28c:	463a      	mov	r2, r7
 800b28e:	4640      	mov	r0, r8
 800b290:	4798      	blx	r3
 800b292:	462e      	mov	r6, r5
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	f012 0210 	ands.w	r2, r2, #16
 800b29a:	d001      	beq.n	800b2a0 <_scanf_float+0x370>
 800b29c:	2000      	movs	r0, #0
 800b29e:	e68b      	b.n	800afb8 <_scanf_float+0x88>
 800b2a0:	7032      	strb	r2, [r6, #0]
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ac:	d11a      	bne.n	800b2e4 <_scanf_float+0x3b4>
 800b2ae:	9b02      	ldr	r3, [sp, #8]
 800b2b0:	454b      	cmp	r3, r9
 800b2b2:	eba3 0209 	sub.w	r2, r3, r9
 800b2b6:	d121      	bne.n	800b2fc <_scanf_float+0x3cc>
 800b2b8:	9901      	ldr	r1, [sp, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4640      	mov	r0, r8
 800b2be:	f002 fad5 	bl	800d86c <_strtod_r>
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	6821      	ldr	r1, [r4, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f011 0f02 	tst.w	r1, #2
 800b2cc:	f103 0204 	add.w	r2, r3, #4
 800b2d0:	d01f      	beq.n	800b312 <_scanf_float+0x3e2>
 800b2d2:	9903      	ldr	r1, [sp, #12]
 800b2d4:	600a      	str	r2, [r1, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	ed83 0b00 	vstr	d0, [r3]
 800b2dc:	68e3      	ldr	r3, [r4, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60e3      	str	r3, [r4, #12]
 800b2e2:	e7db      	b.n	800b29c <_scanf_float+0x36c>
 800b2e4:	9b04      	ldr	r3, [sp, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0e6      	beq.n	800b2b8 <_scanf_float+0x388>
 800b2ea:	9905      	ldr	r1, [sp, #20]
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	3101      	adds	r1, #1
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f002 fb3b 	bl	800d96c <_strtol_r>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	9e05      	ldr	r6, [sp, #20]
 800b2fa:	1ac2      	subs	r2, r0, r3
 800b2fc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b300:	429e      	cmp	r6, r3
 800b302:	bf28      	it	cs
 800b304:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b308:	490d      	ldr	r1, [pc, #52]	@ (800b340 <_scanf_float+0x410>)
 800b30a:	4630      	mov	r0, r6
 800b30c:	f000 f8f0 	bl	800b4f0 <siprintf>
 800b310:	e7d2      	b.n	800b2b8 <_scanf_float+0x388>
 800b312:	f011 0f04 	tst.w	r1, #4
 800b316:	9903      	ldr	r1, [sp, #12]
 800b318:	600a      	str	r2, [r1, #0]
 800b31a:	d1dc      	bne.n	800b2d6 <_scanf_float+0x3a6>
 800b31c:	eeb4 0b40 	vcmp.f64	d0, d0
 800b320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b324:	681d      	ldr	r5, [r3, #0]
 800b326:	d705      	bvc.n	800b334 <_scanf_float+0x404>
 800b328:	4806      	ldr	r0, [pc, #24]	@ (800b344 <_scanf_float+0x414>)
 800b32a:	f000 fa07 	bl	800b73c <nanf>
 800b32e:	ed85 0a00 	vstr	s0, [r5]
 800b332:	e7d3      	b.n	800b2dc <_scanf_float+0x3ac>
 800b334:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b338:	e7f9      	b.n	800b32e <_scanf_float+0x3fe>
 800b33a:	f04f 0900 	mov.w	r9, #0
 800b33e:	e630      	b.n	800afa2 <_scanf_float+0x72>
 800b340:	0800ede7 	.word	0x0800ede7
 800b344:	0800edb2 	.word	0x0800edb2

0800b348 <std>:
 800b348:	2300      	movs	r3, #0
 800b34a:	b510      	push	{r4, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	e9c0 3300 	strd	r3, r3, [r0]
 800b352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	8181      	strh	r1, [r0, #12]
 800b35a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b35c:	81c2      	strh	r2, [r0, #14]
 800b35e:	6183      	str	r3, [r0, #24]
 800b360:	4619      	mov	r1, r3
 800b362:	2208      	movs	r2, #8
 800b364:	305c      	adds	r0, #92	@ 0x5c
 800b366:	f000 f926 	bl	800b5b6 <memset>
 800b36a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <std+0x58>)
 800b36c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <std+0x5c>)
 800b370:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x60>)
 800b374:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b376:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ac <std+0x64>)
 800b378:	6323      	str	r3, [r4, #48]	@ 0x30
 800b37a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b0 <std+0x68>)
 800b37c:	6224      	str	r4, [r4, #32]
 800b37e:	429c      	cmp	r4, r3
 800b380:	d006      	beq.n	800b390 <std+0x48>
 800b382:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b386:	4294      	cmp	r4, r2
 800b388:	d002      	beq.n	800b390 <std+0x48>
 800b38a:	33d0      	adds	r3, #208	@ 0xd0
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d105      	bne.n	800b39c <std+0x54>
 800b390:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b398:	f000 b9be 	b.w	800b718 <__retarget_lock_init_recursive>
 800b39c:	bd10      	pop	{r4, pc}
 800b39e:	bf00      	nop
 800b3a0:	0800b531 	.word	0x0800b531
 800b3a4:	0800b553 	.word	0x0800b553
 800b3a8:	0800b58b 	.word	0x0800b58b
 800b3ac:	0800b5af 	.word	0x0800b5af
 800b3b0:	24004d78 	.word	0x24004d78

0800b3b4 <stdio_exit_handler>:
 800b3b4:	4a02      	ldr	r2, [pc, #8]	@ (800b3c0 <stdio_exit_handler+0xc>)
 800b3b6:	4903      	ldr	r1, [pc, #12]	@ (800b3c4 <stdio_exit_handler+0x10>)
 800b3b8:	4803      	ldr	r0, [pc, #12]	@ (800b3c8 <stdio_exit_handler+0x14>)
 800b3ba:	f000 b87b 	b.w	800b4b4 <_fwalk_sglue>
 800b3be:	bf00      	nop
 800b3c0:	240000bc 	.word	0x240000bc
 800b3c4:	0800dfad 	.word	0x0800dfad
 800b3c8:	240000cc 	.word	0x240000cc

0800b3cc <cleanup_stdio>:
 800b3cc:	6841      	ldr	r1, [r0, #4]
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b400 <cleanup_stdio+0x34>)
 800b3d0:	4299      	cmp	r1, r3
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	d001      	beq.n	800b3dc <cleanup_stdio+0x10>
 800b3d8:	f002 fde8 	bl	800dfac <_fflush_r>
 800b3dc:	68a1      	ldr	r1, [r4, #8]
 800b3de:	4b09      	ldr	r3, [pc, #36]	@ (800b404 <cleanup_stdio+0x38>)
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	d002      	beq.n	800b3ea <cleanup_stdio+0x1e>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f002 fde1 	bl	800dfac <_fflush_r>
 800b3ea:	68e1      	ldr	r1, [r4, #12]
 800b3ec:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <cleanup_stdio+0x3c>)
 800b3ee:	4299      	cmp	r1, r3
 800b3f0:	d004      	beq.n	800b3fc <cleanup_stdio+0x30>
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f002 bdd8 	b.w	800dfac <_fflush_r>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	24004d78 	.word	0x24004d78
 800b404:	24004de0 	.word	0x24004de0
 800b408:	24004e48 	.word	0x24004e48

0800b40c <global_stdio_init.part.0>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	4b0b      	ldr	r3, [pc, #44]	@ (800b43c <global_stdio_init.part.0+0x30>)
 800b410:	4c0b      	ldr	r4, [pc, #44]	@ (800b440 <global_stdio_init.part.0+0x34>)
 800b412:	4a0c      	ldr	r2, [pc, #48]	@ (800b444 <global_stdio_init.part.0+0x38>)
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	4620      	mov	r0, r4
 800b418:	2200      	movs	r2, #0
 800b41a:	2104      	movs	r1, #4
 800b41c:	f7ff ff94 	bl	800b348 <std>
 800b420:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b424:	2201      	movs	r2, #1
 800b426:	2109      	movs	r1, #9
 800b428:	f7ff ff8e 	bl	800b348 <std>
 800b42c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b430:	2202      	movs	r2, #2
 800b432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b436:	2112      	movs	r1, #18
 800b438:	f7ff bf86 	b.w	800b348 <std>
 800b43c:	24004eb0 	.word	0x24004eb0
 800b440:	24004d78 	.word	0x24004d78
 800b444:	0800b3b5 	.word	0x0800b3b5

0800b448 <__sfp_lock_acquire>:
 800b448:	4801      	ldr	r0, [pc, #4]	@ (800b450 <__sfp_lock_acquire+0x8>)
 800b44a:	f000 b966 	b.w	800b71a <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	24004eb9 	.word	0x24004eb9

0800b454 <__sfp_lock_release>:
 800b454:	4801      	ldr	r0, [pc, #4]	@ (800b45c <__sfp_lock_release+0x8>)
 800b456:	f000 b961 	b.w	800b71c <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	24004eb9 	.word	0x24004eb9

0800b460 <__sinit>:
 800b460:	b510      	push	{r4, lr}
 800b462:	4604      	mov	r4, r0
 800b464:	f7ff fff0 	bl	800b448 <__sfp_lock_acquire>
 800b468:	6a23      	ldr	r3, [r4, #32]
 800b46a:	b11b      	cbz	r3, 800b474 <__sinit+0x14>
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f7ff bff0 	b.w	800b454 <__sfp_lock_release>
 800b474:	4b04      	ldr	r3, [pc, #16]	@ (800b488 <__sinit+0x28>)
 800b476:	6223      	str	r3, [r4, #32]
 800b478:	4b04      	ldr	r3, [pc, #16]	@ (800b48c <__sinit+0x2c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f5      	bne.n	800b46c <__sinit+0xc>
 800b480:	f7ff ffc4 	bl	800b40c <global_stdio_init.part.0>
 800b484:	e7f2      	b.n	800b46c <__sinit+0xc>
 800b486:	bf00      	nop
 800b488:	0800b3cd 	.word	0x0800b3cd
 800b48c:	24004eb0 	.word	0x24004eb0

0800b490 <fiprintf>:
 800b490:	b40e      	push	{r1, r2, r3}
 800b492:	b503      	push	{r0, r1, lr}
 800b494:	4601      	mov	r1, r0
 800b496:	ab03      	add	r3, sp, #12
 800b498:	4805      	ldr	r0, [pc, #20]	@ (800b4b0 <fiprintf+0x20>)
 800b49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	f002 fbe7 	bl	800dc74 <_vfiprintf_r>
 800b4a6:	b002      	add	sp, #8
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	240000c8 	.word	0x240000c8

0800b4b4 <_fwalk_sglue>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	4688      	mov	r8, r1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	2600      	movs	r6, #0
 800b4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c8:	d505      	bpl.n	800b4d6 <_fwalk_sglue+0x22>
 800b4ca:	6824      	ldr	r4, [r4, #0]
 800b4cc:	2c00      	cmp	r4, #0
 800b4ce:	d1f7      	bne.n	800b4c0 <_fwalk_sglue+0xc>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d907      	bls.n	800b4ec <_fwalk_sglue+0x38>
 800b4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	d003      	beq.n	800b4ec <_fwalk_sglue+0x38>
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	47c0      	blx	r8
 800b4ea:	4306      	orrs	r6, r0
 800b4ec:	3568      	adds	r5, #104	@ 0x68
 800b4ee:	e7e9      	b.n	800b4c4 <_fwalk_sglue+0x10>

0800b4f0 <siprintf>:
 800b4f0:	b40e      	push	{r1, r2, r3}
 800b4f2:	b500      	push	{lr}
 800b4f4:	b09c      	sub	sp, #112	@ 0x70
 800b4f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4f8:	9002      	str	r0, [sp, #8]
 800b4fa:	9006      	str	r0, [sp, #24]
 800b4fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b500:	4809      	ldr	r0, [pc, #36]	@ (800b528 <siprintf+0x38>)
 800b502:	9107      	str	r1, [sp, #28]
 800b504:	9104      	str	r1, [sp, #16]
 800b506:	4909      	ldr	r1, [pc, #36]	@ (800b52c <siprintf+0x3c>)
 800b508:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50c:	9105      	str	r1, [sp, #20]
 800b50e:	6800      	ldr	r0, [r0, #0]
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	a902      	add	r1, sp, #8
 800b514:	f002 fa88 	bl	800da28 <_svfiprintf_r>
 800b518:	9b02      	ldr	r3, [sp, #8]
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	b01c      	add	sp, #112	@ 0x70
 800b520:	f85d eb04 	ldr.w	lr, [sp], #4
 800b524:	b003      	add	sp, #12
 800b526:	4770      	bx	lr
 800b528:	240000c8 	.word	0x240000c8
 800b52c:	ffff0208 	.word	0xffff0208

0800b530 <__sread>:
 800b530:	b510      	push	{r4, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b538:	f000 f890 	bl	800b65c <_read_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	bfab      	itete	ge
 800b540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b542:	89a3      	ldrhlt	r3, [r4, #12]
 800b544:	181b      	addge	r3, r3, r0
 800b546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b54a:	bfac      	ite	ge
 800b54c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b54e:	81a3      	strhlt	r3, [r4, #12]
 800b550:	bd10      	pop	{r4, pc}

0800b552 <__swrite>:
 800b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	461f      	mov	r7, r3
 800b558:	898b      	ldrh	r3, [r1, #12]
 800b55a:	05db      	lsls	r3, r3, #23
 800b55c:	4605      	mov	r5, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	4616      	mov	r6, r2
 800b562:	d505      	bpl.n	800b570 <__swrite+0x1e>
 800b564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b568:	2302      	movs	r3, #2
 800b56a:	2200      	movs	r2, #0
 800b56c:	f000 f864 	bl	800b638 <_lseek_r>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b57a:	81a3      	strh	r3, [r4, #12]
 800b57c:	4632      	mov	r2, r6
 800b57e:	463b      	mov	r3, r7
 800b580:	4628      	mov	r0, r5
 800b582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b586:	f000 b88b 	b.w	800b6a0 <_write_r>

0800b58a <__sseek>:
 800b58a:	b510      	push	{r4, lr}
 800b58c:	460c      	mov	r4, r1
 800b58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b592:	f000 f851 	bl	800b638 <_lseek_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	bf15      	itete	ne
 800b59c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5a6:	81a3      	strheq	r3, [r4, #12]
 800b5a8:	bf18      	it	ne
 800b5aa:	81a3      	strhne	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__sclose>:
 800b5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b2:	f000 b831 	b.w	800b618 <_close_r>

0800b5b6 <memset>:
 800b5b6:	4402      	add	r2, r0
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d100      	bne.n	800b5c0 <memset+0xa>
 800b5be:	4770      	bx	lr
 800b5c0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c4:	e7f9      	b.n	800b5ba <memset+0x4>

0800b5c6 <strncmp>:
 800b5c6:	b510      	push	{r4, lr}
 800b5c8:	b16a      	cbz	r2, 800b5e6 <strncmp+0x20>
 800b5ca:	3901      	subs	r1, #1
 800b5cc:	1884      	adds	r4, r0, r2
 800b5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d103      	bne.n	800b5e2 <strncmp+0x1c>
 800b5da:	42a0      	cmp	r0, r4
 800b5dc:	d001      	beq.n	800b5e2 <strncmp+0x1c>
 800b5de:	2a00      	cmp	r2, #0
 800b5e0:	d1f5      	bne.n	800b5ce <strncmp+0x8>
 800b5e2:	1ad0      	subs	r0, r2, r3
 800b5e4:	bd10      	pop	{r4, pc}
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	e7fc      	b.n	800b5e4 <strncmp+0x1e>

0800b5ea <strncpy>:
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	3901      	subs	r1, #1
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	b132      	cbz	r2, 800b600 <strncpy+0x16>
 800b5f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5f6:	f803 4b01 	strb.w	r4, [r3], #1
 800b5fa:	3a01      	subs	r2, #1
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	d1f7      	bne.n	800b5f0 <strncpy+0x6>
 800b600:	441a      	add	r2, r3
 800b602:	2100      	movs	r1, #0
 800b604:	4293      	cmp	r3, r2
 800b606:	d100      	bne.n	800b60a <strncpy+0x20>
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	f803 1b01 	strb.w	r1, [r3], #1
 800b60e:	e7f9      	b.n	800b604 <strncpy+0x1a>

0800b610 <_localeconv_r>:
 800b610:	4800      	ldr	r0, [pc, #0]	@ (800b614 <_localeconv_r+0x4>)
 800b612:	4770      	bx	lr
 800b614:	24000208 	.word	0x24000208

0800b618 <_close_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d06      	ldr	r5, [pc, #24]	@ (800b634 <_close_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f5 fe9c 	bl	8001360 <_close>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_close_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_close_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	24004eb4 	.word	0x24004eb4

0800b638 <_lseek_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d07      	ldr	r5, [pc, #28]	@ (800b658 <_lseek_r+0x20>)
 800b63c:	4604      	mov	r4, r0
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	2200      	movs	r2, #0
 800b644:	602a      	str	r2, [r5, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	f7f5 feb1 	bl	80013ae <_lseek>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_lseek_r+0x1e>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_lseek_r+0x1e>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	24004eb4 	.word	0x24004eb4

0800b65c <_read_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4d07      	ldr	r5, [pc, #28]	@ (800b67c <_read_r+0x20>)
 800b660:	4604      	mov	r4, r0
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	2200      	movs	r2, #0
 800b668:	602a      	str	r2, [r5, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	f7f5 fe3f 	bl	80012ee <_read>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_read_r+0x1e>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_read_r+0x1e>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	24004eb4 	.word	0x24004eb4

0800b680 <_sbrk_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d06      	ldr	r5, [pc, #24]	@ (800b69c <_sbrk_r+0x1c>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	f7f5 fe9c 	bl	80013c8 <_sbrk>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d102      	bne.n	800b69a <_sbrk_r+0x1a>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	b103      	cbz	r3, 800b69a <_sbrk_r+0x1a>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	24004eb4 	.word	0x24004eb4

0800b6a0 <_write_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d07      	ldr	r5, [pc, #28]	@ (800b6c0 <_write_r+0x20>)
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	602a      	str	r2, [r5, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	f7f5 fe3a 	bl	8001328 <_write>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_write_r+0x1e>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_write_r+0x1e>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	24004eb4 	.word	0x24004eb4

0800b6c4 <__errno>:
 800b6c4:	4b01      	ldr	r3, [pc, #4]	@ (800b6cc <__errno+0x8>)
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	240000c8 	.word	0x240000c8

0800b6d0 <__libc_init_array>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800b708 <__libc_init_array+0x38>)
 800b6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800b70c <__libc_init_array+0x3c>)
 800b6d6:	1b64      	subs	r4, r4, r5
 800b6d8:	10a4      	asrs	r4, r4, #2
 800b6da:	2600      	movs	r6, #0
 800b6dc:	42a6      	cmp	r6, r4
 800b6de:	d109      	bne.n	800b6f4 <__libc_init_array+0x24>
 800b6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800b710 <__libc_init_array+0x40>)
 800b6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800b714 <__libc_init_array+0x44>)
 800b6e4:	f003 f9aa 	bl	800ea3c <_init>
 800b6e8:	1b64      	subs	r4, r4, r5
 800b6ea:	10a4      	asrs	r4, r4, #2
 800b6ec:	2600      	movs	r6, #0
 800b6ee:	42a6      	cmp	r6, r4
 800b6f0:	d105      	bne.n	800b6fe <__libc_init_array+0x2e>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6f8:	4798      	blx	r3
 800b6fa:	3601      	adds	r6, #1
 800b6fc:	e7ee      	b.n	800b6dc <__libc_init_array+0xc>
 800b6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b702:	4798      	blx	r3
 800b704:	3601      	adds	r6, #1
 800b706:	e7f2      	b.n	800b6ee <__libc_init_array+0x1e>
 800b708:	0800f1ac 	.word	0x0800f1ac
 800b70c:	0800f1ac 	.word	0x0800f1ac
 800b710:	0800f1ac 	.word	0x0800f1ac
 800b714:	0800f1b0 	.word	0x0800f1b0

0800b718 <__retarget_lock_init_recursive>:
 800b718:	4770      	bx	lr

0800b71a <__retarget_lock_acquire_recursive>:
 800b71a:	4770      	bx	lr

0800b71c <__retarget_lock_release_recursive>:
 800b71c:	4770      	bx	lr

0800b71e <memcpy>:
 800b71e:	440a      	add	r2, r1
 800b720:	4291      	cmp	r1, r2
 800b722:	f100 33ff 	add.w	r3, r0, #4294967295
 800b726:	d100      	bne.n	800b72a <memcpy+0xc>
 800b728:	4770      	bx	lr
 800b72a:	b510      	push	{r4, lr}
 800b72c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b730:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b734:	4291      	cmp	r1, r2
 800b736:	d1f9      	bne.n	800b72c <memcpy+0xe>
 800b738:	bd10      	pop	{r4, pc}
	...

0800b73c <nanf>:
 800b73c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b744 <nanf+0x8>
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	7fc00000 	.word	0x7fc00000

0800b748 <abort>:
 800b748:	b508      	push	{r3, lr}
 800b74a:	2006      	movs	r0, #6
 800b74c:	f002 fd2c 	bl	800e1a8 <raise>
 800b750:	2001      	movs	r0, #1
 800b752:	f7f5 fdc1 	bl	80012d8 <_exit>

0800b756 <quorem>:
 800b756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	6903      	ldr	r3, [r0, #16]
 800b75c:	690c      	ldr	r4, [r1, #16]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	4607      	mov	r7, r0
 800b762:	db7e      	blt.n	800b862 <quorem+0x10c>
 800b764:	3c01      	subs	r4, #1
 800b766:	f101 0814 	add.w	r8, r1, #20
 800b76a:	00a3      	lsls	r3, r4, #2
 800b76c:	f100 0514 	add.w	r5, r0, #20
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b780:	3301      	adds	r3, #1
 800b782:	429a      	cmp	r2, r3
 800b784:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b788:	fbb2 f6f3 	udiv	r6, r2, r3
 800b78c:	d32e      	bcc.n	800b7ec <quorem+0x96>
 800b78e:	f04f 0a00 	mov.w	sl, #0
 800b792:	46c4      	mov	ip, r8
 800b794:	46ae      	mov	lr, r5
 800b796:	46d3      	mov	fp, sl
 800b798:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b79c:	b298      	uxth	r0, r3
 800b79e:	fb06 a000 	mla	r0, r6, r0, sl
 800b7a2:	0c02      	lsrs	r2, r0, #16
 800b7a4:	0c1b      	lsrs	r3, r3, #16
 800b7a6:	fb06 2303 	mla	r3, r6, r3, r2
 800b7aa:	f8de 2000 	ldr.w	r2, [lr]
 800b7ae:	b280      	uxth	r0, r0
 800b7b0:	b292      	uxth	r2, r2
 800b7b2:	1a12      	subs	r2, r2, r0
 800b7b4:	445a      	add	r2, fp
 800b7b6:	f8de 0000 	ldr.w	r0, [lr]
 800b7ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7ce:	45e1      	cmp	r9, ip
 800b7d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7d8:	d2de      	bcs.n	800b798 <quorem+0x42>
 800b7da:	9b00      	ldr	r3, [sp, #0]
 800b7dc:	58eb      	ldr	r3, [r5, r3]
 800b7de:	b92b      	cbnz	r3, 800b7ec <quorem+0x96>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	429d      	cmp	r5, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	d32f      	bcc.n	800b84a <quorem+0xf4>
 800b7ea:	613c      	str	r4, [r7, #16]
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f001 f89f 	bl	800c930 <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	db25      	blt.n	800b842 <quorem+0xec>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7fe:	f8d1 c000 	ldr.w	ip, [r1]
 800b802:	fa1f fe82 	uxth.w	lr, r2
 800b806:	fa1f f38c 	uxth.w	r3, ip
 800b80a:	eba3 030e 	sub.w	r3, r3, lr
 800b80e:	4403      	add	r3, r0
 800b810:	0c12      	lsrs	r2, r2, #16
 800b812:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b816:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b820:	45c1      	cmp	r9, r8
 800b822:	f841 3b04 	str.w	r3, [r1], #4
 800b826:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b82a:	d2e6      	bcs.n	800b7fa <quorem+0xa4>
 800b82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b834:	b922      	cbnz	r2, 800b840 <quorem+0xea>
 800b836:	3b04      	subs	r3, #4
 800b838:	429d      	cmp	r5, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	d30b      	bcc.n	800b856 <quorem+0x100>
 800b83e:	613c      	str	r4, [r7, #16]
 800b840:	3601      	adds	r6, #1
 800b842:	4630      	mov	r0, r6
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	3b04      	subs	r3, #4
 800b84e:	2a00      	cmp	r2, #0
 800b850:	d1cb      	bne.n	800b7ea <quorem+0x94>
 800b852:	3c01      	subs	r4, #1
 800b854:	e7c6      	b.n	800b7e4 <quorem+0x8e>
 800b856:	6812      	ldr	r2, [r2, #0]
 800b858:	3b04      	subs	r3, #4
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	d1ef      	bne.n	800b83e <quorem+0xe8>
 800b85e:	3c01      	subs	r4, #1
 800b860:	e7ea      	b.n	800b838 <quorem+0xe2>
 800b862:	2000      	movs	r0, #0
 800b864:	e7ee      	b.n	800b844 <quorem+0xee>
	...

0800b868 <_dtoa_r>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b02 	vpush	{d8}
 800b870:	69c7      	ldr	r7, [r0, #28]
 800b872:	b091      	sub	sp, #68	@ 0x44
 800b874:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b878:	ec55 4b10 	vmov	r4, r5, d0
 800b87c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b87e:	9107      	str	r1, [sp, #28]
 800b880:	4681      	mov	r9, r0
 800b882:	9209      	str	r2, [sp, #36]	@ 0x24
 800b884:	930d      	str	r3, [sp, #52]	@ 0x34
 800b886:	b97f      	cbnz	r7, 800b8a8 <_dtoa_r+0x40>
 800b888:	2010      	movs	r0, #16
 800b88a:	f7fe fe5d 	bl	800a548 <malloc>
 800b88e:	4602      	mov	r2, r0
 800b890:	f8c9 001c 	str.w	r0, [r9, #28]
 800b894:	b920      	cbnz	r0, 800b8a0 <_dtoa_r+0x38>
 800b896:	4ba0      	ldr	r3, [pc, #640]	@ (800bb18 <_dtoa_r+0x2b0>)
 800b898:	21ef      	movs	r1, #239	@ 0xef
 800b89a:	48a0      	ldr	r0, [pc, #640]	@ (800bb1c <_dtoa_r+0x2b4>)
 800b89c:	f7fe fe36 	bl	800a50c <__assert_func>
 800b8a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8a4:	6007      	str	r7, [r0, #0]
 800b8a6:	60c7      	str	r7, [r0, #12]
 800b8a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	b159      	cbz	r1, 800b8c8 <_dtoa_r+0x60>
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	604a      	str	r2, [r1, #4]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	4093      	lsls	r3, r2
 800b8b8:	608b      	str	r3, [r1, #8]
 800b8ba:	4648      	mov	r0, r9
 800b8bc:	f000 fdb4 	bl	800c428 <_Bfree>
 800b8c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	1e2b      	subs	r3, r5, #0
 800b8ca:	bfbb      	ittet	lt
 800b8cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8d0:	9303      	strlt	r3, [sp, #12]
 800b8d2:	2300      	movge	r3, #0
 800b8d4:	2201      	movlt	r2, #1
 800b8d6:	bfac      	ite	ge
 800b8d8:	6033      	strge	r3, [r6, #0]
 800b8da:	6032      	strlt	r2, [r6, #0]
 800b8dc:	4b90      	ldr	r3, [pc, #576]	@ (800bb20 <_dtoa_r+0x2b8>)
 800b8de:	9e03      	ldr	r6, [sp, #12]
 800b8e0:	43b3      	bics	r3, r6
 800b8e2:	d110      	bne.n	800b906 <_dtoa_r+0x9e>
 800b8e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b8f0:	4323      	orrs	r3, r4
 800b8f2:	f000 84de 	beq.w	800c2b2 <_dtoa_r+0xa4a>
 800b8f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8f8:	4f8a      	ldr	r7, [pc, #552]	@ (800bb24 <_dtoa_r+0x2bc>)
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 84e0 	beq.w	800c2c0 <_dtoa_r+0xa58>
 800b900:	1cfb      	adds	r3, r7, #3
 800b902:	f000 bcdb 	b.w	800c2bc <_dtoa_r+0xa54>
 800b906:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b90a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b912:	d10a      	bne.n	800b92a <_dtoa_r+0xc2>
 800b914:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b916:	2301      	movs	r3, #1
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b91c:	b113      	cbz	r3, 800b924 <_dtoa_r+0xbc>
 800b91e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b920:	4b81      	ldr	r3, [pc, #516]	@ (800bb28 <_dtoa_r+0x2c0>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	4f81      	ldr	r7, [pc, #516]	@ (800bb2c <_dtoa_r+0x2c4>)
 800b926:	f000 bccb 	b.w	800c2c0 <_dtoa_r+0xa58>
 800b92a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b92c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b92e:	4648      	mov	r0, r9
 800b930:	eeb0 0b48 	vmov.f64	d0, d8
 800b934:	f001 f91c 	bl	800cb70 <__d2b>
 800b938:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b93c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b93e:	9001      	str	r0, [sp, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d045      	beq.n	800b9d0 <_dtoa_r+0x168>
 800b944:	eeb0 7b48 	vmov.f64	d7, d8
 800b948:	ee18 1a90 	vmov	r1, s17
 800b94c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b950:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b954:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b958:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b95c:	2500      	movs	r5, #0
 800b95e:	ee07 1a90 	vmov	s15, r1
 800b962:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b966:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb00 <_dtoa_r+0x298>
 800b96a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b96e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bb08 <_dtoa_r+0x2a0>
 800b972:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b976:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb10 <_dtoa_r+0x2a8>
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b982:	eeb0 7b46 	vmov.f64	d7, d6
 800b986:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b98a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b98e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b996:	ee16 8a90 	vmov	r8, s13
 800b99a:	d508      	bpl.n	800b9ae <_dtoa_r+0x146>
 800b99c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b9a0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a8:	bf18      	it	ne
 800b9aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b9ae:	f1b8 0f16 	cmp.w	r8, #22
 800b9b2:	d82b      	bhi.n	800ba0c <_dtoa_r+0x1a4>
 800b9b4:	495e      	ldr	r1, [pc, #376]	@ (800bb30 <_dtoa_r+0x2c8>)
 800b9b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b9ba:	ed91 7b00 	vldr	d7, [r1]
 800b9be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	d501      	bpl.n	800b9cc <_dtoa_r+0x164>
 800b9c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	e01e      	b.n	800ba0e <_dtoa_r+0x1a6>
 800b9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b9d8:	2920      	cmp	r1, #32
 800b9da:	bfc1      	itttt	gt
 800b9dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b9e0:	408e      	lslgt	r6, r1
 800b9e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b9e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b9ea:	bfd6      	itet	le
 800b9ec:	f1c1 0120 	rsble	r1, r1, #32
 800b9f0:	4331      	orrgt	r1, r6
 800b9f2:	fa04 f101 	lslle.w	r1, r4, r1
 800b9f6:	ee07 1a90 	vmov	s15, r1
 800b9fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	ee17 1a90 	vmov	r1, s15
 800ba04:	2501      	movs	r5, #1
 800ba06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ba0a:	e7a8      	b.n	800b95e <_dtoa_r+0xf6>
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	1e53      	subs	r3, r2, #1
 800ba12:	9306      	str	r3, [sp, #24]
 800ba14:	bf45      	ittet	mi
 800ba16:	f1c2 0301 	rsbmi	r3, r2, #1
 800ba1a:	9305      	strmi	r3, [sp, #20]
 800ba1c:	2300      	movpl	r3, #0
 800ba1e:	2300      	movmi	r3, #0
 800ba20:	bf4c      	ite	mi
 800ba22:	9306      	strmi	r3, [sp, #24]
 800ba24:	9305      	strpl	r3, [sp, #20]
 800ba26:	f1b8 0f00 	cmp.w	r8, #0
 800ba2a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ba2c:	db18      	blt.n	800ba60 <_dtoa_r+0x1f8>
 800ba2e:	9b06      	ldr	r3, [sp, #24]
 800ba30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba34:	4443      	add	r3, r8
 800ba36:	9306      	str	r3, [sp, #24]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9a07      	ldr	r2, [sp, #28]
 800ba3c:	2a09      	cmp	r2, #9
 800ba3e:	d849      	bhi.n	800bad4 <_dtoa_r+0x26c>
 800ba40:	2a05      	cmp	r2, #5
 800ba42:	bfc4      	itt	gt
 800ba44:	3a04      	subgt	r2, #4
 800ba46:	9207      	strgt	r2, [sp, #28]
 800ba48:	9a07      	ldr	r2, [sp, #28]
 800ba4a:	f1a2 0202 	sub.w	r2, r2, #2
 800ba4e:	bfcc      	ite	gt
 800ba50:	2400      	movgt	r4, #0
 800ba52:	2401      	movle	r4, #1
 800ba54:	2a03      	cmp	r2, #3
 800ba56:	d848      	bhi.n	800baea <_dtoa_r+0x282>
 800ba58:	e8df f002 	tbb	[pc, r2]
 800ba5c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ba60:	9b05      	ldr	r3, [sp, #20]
 800ba62:	2200      	movs	r2, #0
 800ba64:	eba3 0308 	sub.w	r3, r3, r8
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba6c:	f1c8 0300 	rsb	r3, r8, #0
 800ba70:	e7e3      	b.n	800ba3a <_dtoa_r+0x1d2>
 800ba72:	2200      	movs	r2, #0
 800ba74:	9208      	str	r2, [sp, #32]
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	2a00      	cmp	r2, #0
 800ba7a:	dc39      	bgt.n	800baf0 <_dtoa_r+0x288>
 800ba7c:	f04f 0b01 	mov.w	fp, #1
 800ba80:	46da      	mov	sl, fp
 800ba82:	465a      	mov	r2, fp
 800ba84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ba88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	2004      	movs	r0, #4
 800ba90:	f100 0614 	add.w	r6, r0, #20
 800ba94:	4296      	cmp	r6, r2
 800ba96:	d930      	bls.n	800bafa <_dtoa_r+0x292>
 800ba98:	6079      	str	r1, [r7, #4]
 800ba9a:	4648      	mov	r0, r9
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	f000 fc83 	bl	800c3a8 <_Balloc>
 800baa2:	9b04      	ldr	r3, [sp, #16]
 800baa4:	4607      	mov	r7, r0
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d146      	bne.n	800bb38 <_dtoa_r+0x2d0>
 800baaa:	4b22      	ldr	r3, [pc, #136]	@ (800bb34 <_dtoa_r+0x2cc>)
 800baac:	4602      	mov	r2, r0
 800baae:	f240 11af 	movw	r1, #431	@ 0x1af
 800bab2:	e6f2      	b.n	800b89a <_dtoa_r+0x32>
 800bab4:	2201      	movs	r2, #1
 800bab6:	e7dd      	b.n	800ba74 <_dtoa_r+0x20c>
 800bab8:	2200      	movs	r2, #0
 800baba:	9208      	str	r2, [sp, #32]
 800babc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800babe:	eb08 0b02 	add.w	fp, r8, r2
 800bac2:	f10b 0a01 	add.w	sl, fp, #1
 800bac6:	4652      	mov	r2, sl
 800bac8:	2a01      	cmp	r2, #1
 800baca:	bfb8      	it	lt
 800bacc:	2201      	movlt	r2, #1
 800bace:	e7db      	b.n	800ba88 <_dtoa_r+0x220>
 800bad0:	2201      	movs	r2, #1
 800bad2:	e7f2      	b.n	800baba <_dtoa_r+0x252>
 800bad4:	2401      	movs	r4, #1
 800bad6:	2200      	movs	r2, #0
 800bad8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800badc:	f04f 3bff 	mov.w	fp, #4294967295
 800bae0:	2100      	movs	r1, #0
 800bae2:	46da      	mov	sl, fp
 800bae4:	2212      	movs	r2, #18
 800bae6:	9109      	str	r1, [sp, #36]	@ 0x24
 800bae8:	e7ce      	b.n	800ba88 <_dtoa_r+0x220>
 800baea:	2201      	movs	r2, #1
 800baec:	9208      	str	r2, [sp, #32]
 800baee:	e7f5      	b.n	800badc <_dtoa_r+0x274>
 800baf0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800baf4:	46da      	mov	sl, fp
 800baf6:	465a      	mov	r2, fp
 800baf8:	e7c6      	b.n	800ba88 <_dtoa_r+0x220>
 800bafa:	3101      	adds	r1, #1
 800bafc:	0040      	lsls	r0, r0, #1
 800bafe:	e7c7      	b.n	800ba90 <_dtoa_r+0x228>
 800bb00:	636f4361 	.word	0x636f4361
 800bb04:	3fd287a7 	.word	0x3fd287a7
 800bb08:	8b60c8b3 	.word	0x8b60c8b3
 800bb0c:	3fc68a28 	.word	0x3fc68a28
 800bb10:	509f79fb 	.word	0x509f79fb
 800bb14:	3fd34413 	.word	0x3fd34413
 800bb18:	0800edf9 	.word	0x0800edf9
 800bb1c:	0800ee10 	.word	0x0800ee10
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	0800edf5 	.word	0x0800edf5
 800bb28:	0800edc4 	.word	0x0800edc4
 800bb2c:	0800edc3 	.word	0x0800edc3
 800bb30:	0800ef08 	.word	0x0800ef08
 800bb34:	0800ee68 	.word	0x0800ee68
 800bb38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bb3c:	f1ba 0f0e 	cmp.w	sl, #14
 800bb40:	6010      	str	r0, [r2, #0]
 800bb42:	d86f      	bhi.n	800bc24 <_dtoa_r+0x3bc>
 800bb44:	2c00      	cmp	r4, #0
 800bb46:	d06d      	beq.n	800bc24 <_dtoa_r+0x3bc>
 800bb48:	f1b8 0f00 	cmp.w	r8, #0
 800bb4c:	f340 80c2 	ble.w	800bcd4 <_dtoa_r+0x46c>
 800bb50:	4aca      	ldr	r2, [pc, #808]	@ (800be7c <_dtoa_r+0x614>)
 800bb52:	f008 010f 	and.w	r1, r8, #15
 800bb56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bb5e:	ed92 7b00 	vldr	d7, [r2]
 800bb62:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bb66:	f000 80a9 	beq.w	800bcbc <_dtoa_r+0x454>
 800bb6a:	4ac5      	ldr	r2, [pc, #788]	@ (800be80 <_dtoa_r+0x618>)
 800bb6c:	ed92 6b08 	vldr	d6, [r2, #32]
 800bb70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bb74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bb78:	f001 010f 	and.w	r1, r1, #15
 800bb7c:	2203      	movs	r2, #3
 800bb7e:	48c0      	ldr	r0, [pc, #768]	@ (800be80 <_dtoa_r+0x618>)
 800bb80:	2900      	cmp	r1, #0
 800bb82:	f040 809d 	bne.w	800bcc0 <_dtoa_r+0x458>
 800bb86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	f000 80c1 	beq.w	800bd20 <_dtoa_r+0x4b8>
 800bb9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bba2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbaa:	f140 80b9 	bpl.w	800bd20 <_dtoa_r+0x4b8>
 800bbae:	f1ba 0f00 	cmp.w	sl, #0
 800bbb2:	f000 80b5 	beq.w	800bd20 <_dtoa_r+0x4b8>
 800bbb6:	f1bb 0f00 	cmp.w	fp, #0
 800bbba:	dd31      	ble.n	800bc20 <_dtoa_r+0x3b8>
 800bbbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bbc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbc8:	f108 31ff 	add.w	r1, r8, #4294967295
 800bbcc:	9104      	str	r1, [sp, #16]
 800bbce:	3201      	adds	r2, #1
 800bbd0:	465c      	mov	r4, fp
 800bbd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bbda:	ee07 2a90 	vmov	s15, r2
 800bbde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bbe2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bbe6:	ee15 2a90 	vmov	r2, s11
 800bbea:	ec51 0b15 	vmov	r0, r1, d5
 800bbee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bbf2:	2c00      	cmp	r4, #0
 800bbf4:	f040 8098 	bne.w	800bd28 <_dtoa_r+0x4c0>
 800bbf8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bbfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc00:	ec41 0b17 	vmov	d7, r0, r1
 800bc04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	f300 8261 	bgt.w	800c0d2 <_dtoa_r+0x86a>
 800bc10:	eeb1 7b47 	vneg.f64	d7, d7
 800bc14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1c:	f100 80f5 	bmi.w	800be0a <_dtoa_r+0x5a2>
 800bc20:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	f2c0 812c 	blt.w	800be84 <_dtoa_r+0x61c>
 800bc2c:	f1b8 0f0e 	cmp.w	r8, #14
 800bc30:	f300 8128 	bgt.w	800be84 <_dtoa_r+0x61c>
 800bc34:	4b91      	ldr	r3, [pc, #580]	@ (800be7c <_dtoa_r+0x614>)
 800bc36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc3a:	ed93 6b00 	vldr	d6, [r3]
 800bc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	da03      	bge.n	800bc4c <_dtoa_r+0x3e4>
 800bc44:	f1ba 0f00 	cmp.w	sl, #0
 800bc48:	f340 80d2 	ble.w	800bdf0 <_dtoa_r+0x588>
 800bc4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bc50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc54:	463e      	mov	r6, r7
 800bc56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc5e:	ee15 3a10 	vmov	r3, s10
 800bc62:	3330      	adds	r3, #48	@ 0x30
 800bc64:	f806 3b01 	strb.w	r3, [r6], #1
 800bc68:	1bf3      	subs	r3, r6, r7
 800bc6a:	459a      	cmp	sl, r3
 800bc6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc74:	f040 80f8 	bne.w	800be68 <_dtoa_r+0x600>
 800bc78:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc84:	f300 80dd 	bgt.w	800be42 <_dtoa_r+0x5da>
 800bc88:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc90:	d104      	bne.n	800bc9c <_dtoa_r+0x434>
 800bc92:	ee15 3a10 	vmov	r3, s10
 800bc96:	07db      	lsls	r3, r3, #31
 800bc98:	f100 80d3 	bmi.w	800be42 <_dtoa_r+0x5da>
 800bc9c:	9901      	ldr	r1, [sp, #4]
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f000 fbc2 	bl	800c428 <_Bfree>
 800bca4:	2300      	movs	r3, #0
 800bca6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bca8:	7033      	strb	r3, [r6, #0]
 800bcaa:	f108 0301 	add.w	r3, r8, #1
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 8304 	beq.w	800c2c0 <_dtoa_r+0xa58>
 800bcb8:	601e      	str	r6, [r3, #0]
 800bcba:	e301      	b.n	800c2c0 <_dtoa_r+0xa58>
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	e75e      	b.n	800bb7e <_dtoa_r+0x316>
 800bcc0:	07cc      	lsls	r4, r1, #31
 800bcc2:	d504      	bpl.n	800bcce <_dtoa_r+0x466>
 800bcc4:	ed90 6b00 	vldr	d6, [r0]
 800bcc8:	3201      	adds	r2, #1
 800bcca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcce:	1049      	asrs	r1, r1, #1
 800bcd0:	3008      	adds	r0, #8
 800bcd2:	e755      	b.n	800bb80 <_dtoa_r+0x318>
 800bcd4:	d022      	beq.n	800bd1c <_dtoa_r+0x4b4>
 800bcd6:	f1c8 0100 	rsb	r1, r8, #0
 800bcda:	4a68      	ldr	r2, [pc, #416]	@ (800be7c <_dtoa_r+0x614>)
 800bcdc:	f001 000f 	and.w	r0, r1, #15
 800bce0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bce4:	ed92 7b00 	vldr	d7, [r2]
 800bce8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bcec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcf0:	4863      	ldr	r0, [pc, #396]	@ (800be80 <_dtoa_r+0x618>)
 800bcf2:	1109      	asrs	r1, r1, #4
 800bcf4:	2400      	movs	r4, #0
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	b929      	cbnz	r1, 800bd06 <_dtoa_r+0x49e>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	f43f af49 	beq.w	800bb92 <_dtoa_r+0x32a>
 800bd00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd04:	e745      	b.n	800bb92 <_dtoa_r+0x32a>
 800bd06:	07ce      	lsls	r6, r1, #31
 800bd08:	d505      	bpl.n	800bd16 <_dtoa_r+0x4ae>
 800bd0a:	ed90 6b00 	vldr	d6, [r0]
 800bd0e:	3201      	adds	r2, #1
 800bd10:	2401      	movs	r4, #1
 800bd12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd16:	1049      	asrs	r1, r1, #1
 800bd18:	3008      	adds	r0, #8
 800bd1a:	e7ed      	b.n	800bcf8 <_dtoa_r+0x490>
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	e738      	b.n	800bb92 <_dtoa_r+0x32a>
 800bd20:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd24:	4654      	mov	r4, sl
 800bd26:	e754      	b.n	800bbd2 <_dtoa_r+0x36a>
 800bd28:	4a54      	ldr	r2, [pc, #336]	@ (800be7c <_dtoa_r+0x614>)
 800bd2a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bd2e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bd32:	9a08      	ldr	r2, [sp, #32]
 800bd34:	ec41 0b17 	vmov	d7, r0, r1
 800bd38:	443c      	add	r4, r7
 800bd3a:	b34a      	cbz	r2, 800bd90 <_dtoa_r+0x528>
 800bd3c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bd40:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bd44:	463e      	mov	r6, r7
 800bd46:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bd4a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bd4e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd52:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd56:	ee14 2a90 	vmov	r2, s9
 800bd5a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd5e:	3230      	adds	r2, #48	@ 0x30
 800bd60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6c:	f806 2b01 	strb.w	r2, [r6], #1
 800bd70:	d438      	bmi.n	800bde4 <_dtoa_r+0x57c>
 800bd72:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bd76:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	d462      	bmi.n	800be46 <_dtoa_r+0x5de>
 800bd80:	42a6      	cmp	r6, r4
 800bd82:	f43f af4d 	beq.w	800bc20 <_dtoa_r+0x3b8>
 800bd86:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bd8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd8e:	e7e0      	b.n	800bd52 <_dtoa_r+0x4ea>
 800bd90:	4621      	mov	r1, r4
 800bd92:	463e      	mov	r6, r7
 800bd94:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd98:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bd9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bda0:	ee14 2a90 	vmov	r2, s9
 800bda4:	3230      	adds	r2, #48	@ 0x30
 800bda6:	f806 2b01 	strb.w	r2, [r6], #1
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bdb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bdb4:	d119      	bne.n	800bdea <_dtoa_r+0x582>
 800bdb6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bdba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bdbe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc6:	dc3e      	bgt.n	800be46 <_dtoa_r+0x5de>
 800bdc8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bdcc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd4:	f57f af24 	bpl.w	800bc20 <_dtoa_r+0x3b8>
 800bdd8:	460e      	mov	r6, r1
 800bdda:	3901      	subs	r1, #1
 800bddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bde0:	2b30      	cmp	r3, #48	@ 0x30
 800bde2:	d0f9      	beq.n	800bdd8 <_dtoa_r+0x570>
 800bde4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bde8:	e758      	b.n	800bc9c <_dtoa_r+0x434>
 800bdea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bdee:	e7d5      	b.n	800bd9c <_dtoa_r+0x534>
 800bdf0:	d10b      	bne.n	800be0a <_dtoa_r+0x5a2>
 800bdf2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bdf6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bdfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be06:	f2c0 8161 	blt.w	800c0cc <_dtoa_r+0x864>
 800be0a:	2400      	movs	r4, #0
 800be0c:	4625      	mov	r5, r4
 800be0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be10:	43db      	mvns	r3, r3
 800be12:	9304      	str	r3, [sp, #16]
 800be14:	463e      	mov	r6, r7
 800be16:	f04f 0800 	mov.w	r8, #0
 800be1a:	4621      	mov	r1, r4
 800be1c:	4648      	mov	r0, r9
 800be1e:	f000 fb03 	bl	800c428 <_Bfree>
 800be22:	2d00      	cmp	r5, #0
 800be24:	d0de      	beq.n	800bde4 <_dtoa_r+0x57c>
 800be26:	f1b8 0f00 	cmp.w	r8, #0
 800be2a:	d005      	beq.n	800be38 <_dtoa_r+0x5d0>
 800be2c:	45a8      	cmp	r8, r5
 800be2e:	d003      	beq.n	800be38 <_dtoa_r+0x5d0>
 800be30:	4641      	mov	r1, r8
 800be32:	4648      	mov	r0, r9
 800be34:	f000 faf8 	bl	800c428 <_Bfree>
 800be38:	4629      	mov	r1, r5
 800be3a:	4648      	mov	r0, r9
 800be3c:	f000 faf4 	bl	800c428 <_Bfree>
 800be40:	e7d0      	b.n	800bde4 <_dtoa_r+0x57c>
 800be42:	f8cd 8010 	str.w	r8, [sp, #16]
 800be46:	4633      	mov	r3, r6
 800be48:	461e      	mov	r6, r3
 800be4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be4e:	2a39      	cmp	r2, #57	@ 0x39
 800be50:	d106      	bne.n	800be60 <_dtoa_r+0x5f8>
 800be52:	429f      	cmp	r7, r3
 800be54:	d1f8      	bne.n	800be48 <_dtoa_r+0x5e0>
 800be56:	9a04      	ldr	r2, [sp, #16]
 800be58:	3201      	adds	r2, #1
 800be5a:	9204      	str	r2, [sp, #16]
 800be5c:	2230      	movs	r2, #48	@ 0x30
 800be5e:	703a      	strb	r2, [r7, #0]
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	3201      	adds	r2, #1
 800be64:	701a      	strb	r2, [r3, #0]
 800be66:	e7bd      	b.n	800bde4 <_dtoa_r+0x57c>
 800be68:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	f47f aeef 	bne.w	800bc56 <_dtoa_r+0x3ee>
 800be78:	e710      	b.n	800bc9c <_dtoa_r+0x434>
 800be7a:	bf00      	nop
 800be7c:	0800ef08 	.word	0x0800ef08
 800be80:	0800eee0 	.word	0x0800eee0
 800be84:	9908      	ldr	r1, [sp, #32]
 800be86:	2900      	cmp	r1, #0
 800be88:	f000 80e3 	beq.w	800c052 <_dtoa_r+0x7ea>
 800be8c:	9907      	ldr	r1, [sp, #28]
 800be8e:	2901      	cmp	r1, #1
 800be90:	f300 80c8 	bgt.w	800c024 <_dtoa_r+0x7bc>
 800be94:	2d00      	cmp	r5, #0
 800be96:	f000 80c1 	beq.w	800c01c <_dtoa_r+0x7b4>
 800be9a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be9e:	9e05      	ldr	r6, [sp, #20]
 800bea0:	461c      	mov	r4, r3
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	9b05      	ldr	r3, [sp, #20]
 800bea6:	4413      	add	r3, r2
 800bea8:	9305      	str	r3, [sp, #20]
 800beaa:	9b06      	ldr	r3, [sp, #24]
 800beac:	2101      	movs	r1, #1
 800beae:	4413      	add	r3, r2
 800beb0:	4648      	mov	r0, r9
 800beb2:	9306      	str	r3, [sp, #24]
 800beb4:	f000 fbb6 	bl	800c624 <__i2b>
 800beb8:	9b04      	ldr	r3, [sp, #16]
 800beba:	4605      	mov	r5, r0
 800bebc:	b166      	cbz	r6, 800bed8 <_dtoa_r+0x670>
 800bebe:	9a06      	ldr	r2, [sp, #24]
 800bec0:	2a00      	cmp	r2, #0
 800bec2:	dd09      	ble.n	800bed8 <_dtoa_r+0x670>
 800bec4:	42b2      	cmp	r2, r6
 800bec6:	9905      	ldr	r1, [sp, #20]
 800bec8:	bfa8      	it	ge
 800beca:	4632      	movge	r2, r6
 800becc:	1a89      	subs	r1, r1, r2
 800bece:	9105      	str	r1, [sp, #20]
 800bed0:	9906      	ldr	r1, [sp, #24]
 800bed2:	1ab6      	subs	r6, r6, r2
 800bed4:	1a8a      	subs	r2, r1, r2
 800bed6:	9206      	str	r2, [sp, #24]
 800bed8:	b1fb      	cbz	r3, 800bf1a <_dtoa_r+0x6b2>
 800beda:	9a08      	ldr	r2, [sp, #32]
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f000 80bc 	beq.w	800c05a <_dtoa_r+0x7f2>
 800bee2:	b19c      	cbz	r4, 800bf0c <_dtoa_r+0x6a4>
 800bee4:	4629      	mov	r1, r5
 800bee6:	4622      	mov	r2, r4
 800bee8:	4648      	mov	r0, r9
 800beea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beec:	f000 fc5a 	bl	800c7a4 <__pow5mult>
 800bef0:	9a01      	ldr	r2, [sp, #4]
 800bef2:	4601      	mov	r1, r0
 800bef4:	4605      	mov	r5, r0
 800bef6:	4648      	mov	r0, r9
 800bef8:	f000 fbaa 	bl	800c650 <__multiply>
 800befc:	9901      	ldr	r1, [sp, #4]
 800befe:	9004      	str	r0, [sp, #16]
 800bf00:	4648      	mov	r0, r9
 800bf02:	f000 fa91 	bl	800c428 <_Bfree>
 800bf06:	9a04      	ldr	r2, [sp, #16]
 800bf08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf0a:	9201      	str	r2, [sp, #4]
 800bf0c:	1b1a      	subs	r2, r3, r4
 800bf0e:	d004      	beq.n	800bf1a <_dtoa_r+0x6b2>
 800bf10:	9901      	ldr	r1, [sp, #4]
 800bf12:	4648      	mov	r0, r9
 800bf14:	f000 fc46 	bl	800c7a4 <__pow5mult>
 800bf18:	9001      	str	r0, [sp, #4]
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	4648      	mov	r0, r9
 800bf1e:	f000 fb81 	bl	800c624 <__i2b>
 800bf22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf24:	4604      	mov	r4, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 81d0 	beq.w	800c2cc <_dtoa_r+0xa64>
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4601      	mov	r1, r0
 800bf30:	4648      	mov	r0, r9
 800bf32:	f000 fc37 	bl	800c7a4 <__pow5mult>
 800bf36:	9b07      	ldr	r3, [sp, #28]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	f300 8095 	bgt.w	800c06a <_dtoa_r+0x802>
 800bf40:	9b02      	ldr	r3, [sp, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 808b 	bne.w	800c05e <_dtoa_r+0x7f6>
 800bf48:	9b03      	ldr	r3, [sp, #12]
 800bf4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	f040 8087 	bne.w	800c062 <_dtoa_r+0x7fa>
 800bf54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf58:	0d12      	lsrs	r2, r2, #20
 800bf5a:	0512      	lsls	r2, r2, #20
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	f000 8082 	beq.w	800c066 <_dtoa_r+0x7fe>
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	3301      	adds	r3, #1
 800bf66:	9305      	str	r3, [sp, #20]
 800bf68:	9b06      	ldr	r3, [sp, #24]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	9306      	str	r3, [sp, #24]
 800bf6e:	2301      	movs	r3, #1
 800bf70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 81af 	beq.w	800c2d8 <_dtoa_r+0xa70>
 800bf7a:	6922      	ldr	r2, [r4, #16]
 800bf7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf80:	6910      	ldr	r0, [r2, #16]
 800bf82:	f000 fb03 	bl	800c58c <__hi0bits>
 800bf86:	f1c0 0020 	rsb	r0, r0, #32
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	4418      	add	r0, r3
 800bf8e:	f010 001f 	ands.w	r0, r0, #31
 800bf92:	d076      	beq.n	800c082 <_dtoa_r+0x81a>
 800bf94:	f1c0 0220 	rsb	r2, r0, #32
 800bf98:	2a04      	cmp	r2, #4
 800bf9a:	dd69      	ble.n	800c070 <_dtoa_r+0x808>
 800bf9c:	9b05      	ldr	r3, [sp, #20]
 800bf9e:	f1c0 001c 	rsb	r0, r0, #28
 800bfa2:	4403      	add	r3, r0
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	9b06      	ldr	r3, [sp, #24]
 800bfa8:	4406      	add	r6, r0
 800bfaa:	4403      	add	r3, r0
 800bfac:	9306      	str	r3, [sp, #24]
 800bfae:	9b05      	ldr	r3, [sp, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dd05      	ble.n	800bfc0 <_dtoa_r+0x758>
 800bfb4:	9901      	ldr	r1, [sp, #4]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4648      	mov	r0, r9
 800bfba:	f000 fc4d 	bl	800c858 <__lshift>
 800bfbe:	9001      	str	r0, [sp, #4]
 800bfc0:	9b06      	ldr	r3, [sp, #24]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd05      	ble.n	800bfd2 <_dtoa_r+0x76a>
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f000 fc44 	bl	800c858 <__lshift>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d056      	beq.n	800c086 <_dtoa_r+0x81e>
 800bfd8:	9801      	ldr	r0, [sp, #4]
 800bfda:	4621      	mov	r1, r4
 800bfdc:	f000 fca8 	bl	800c930 <__mcmp>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	da50      	bge.n	800c086 <_dtoa_r+0x81e>
 800bfe4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	9901      	ldr	r1, [sp, #4]
 800bfec:	2300      	movs	r3, #0
 800bfee:	220a      	movs	r2, #10
 800bff0:	4648      	mov	r0, r9
 800bff2:	f000 fa3b 	bl	800c46c <__multadd>
 800bff6:	9b08      	ldr	r3, [sp, #32]
 800bff8:	9001      	str	r0, [sp, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 816e 	beq.w	800c2dc <_dtoa_r+0xa74>
 800c000:	4629      	mov	r1, r5
 800c002:	2300      	movs	r3, #0
 800c004:	220a      	movs	r2, #10
 800c006:	4648      	mov	r0, r9
 800c008:	f000 fa30 	bl	800c46c <__multadd>
 800c00c:	f1bb 0f00 	cmp.w	fp, #0
 800c010:	4605      	mov	r5, r0
 800c012:	dc64      	bgt.n	800c0de <_dtoa_r+0x876>
 800c014:	9b07      	ldr	r3, [sp, #28]
 800c016:	2b02      	cmp	r3, #2
 800c018:	dc3e      	bgt.n	800c098 <_dtoa_r+0x830>
 800c01a:	e060      	b.n	800c0de <_dtoa_r+0x876>
 800c01c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c01e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c022:	e73c      	b.n	800be9e <_dtoa_r+0x636>
 800c024:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c028:	42a3      	cmp	r3, r4
 800c02a:	bfbf      	itttt	lt
 800c02c:	1ae2      	sublt	r2, r4, r3
 800c02e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c030:	189b      	addlt	r3, r3, r2
 800c032:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c034:	bfae      	itee	ge
 800c036:	1b1c      	subge	r4, r3, r4
 800c038:	4623      	movlt	r3, r4
 800c03a:	2400      	movlt	r4, #0
 800c03c:	f1ba 0f00 	cmp.w	sl, #0
 800c040:	bfb5      	itete	lt
 800c042:	9a05      	ldrlt	r2, [sp, #20]
 800c044:	9e05      	ldrge	r6, [sp, #20]
 800c046:	eba2 060a 	sublt.w	r6, r2, sl
 800c04a:	4652      	movge	r2, sl
 800c04c:	bfb8      	it	lt
 800c04e:	2200      	movlt	r2, #0
 800c050:	e727      	b.n	800bea2 <_dtoa_r+0x63a>
 800c052:	9e05      	ldr	r6, [sp, #20]
 800c054:	9d08      	ldr	r5, [sp, #32]
 800c056:	461c      	mov	r4, r3
 800c058:	e730      	b.n	800bebc <_dtoa_r+0x654>
 800c05a:	461a      	mov	r2, r3
 800c05c:	e758      	b.n	800bf10 <_dtoa_r+0x6a8>
 800c05e:	2300      	movs	r3, #0
 800c060:	e786      	b.n	800bf70 <_dtoa_r+0x708>
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	e784      	b.n	800bf70 <_dtoa_r+0x708>
 800c066:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c068:	e783      	b.n	800bf72 <_dtoa_r+0x70a>
 800c06a:	2300      	movs	r3, #0
 800c06c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c06e:	e784      	b.n	800bf7a <_dtoa_r+0x712>
 800c070:	d09d      	beq.n	800bfae <_dtoa_r+0x746>
 800c072:	9b05      	ldr	r3, [sp, #20]
 800c074:	321c      	adds	r2, #28
 800c076:	4413      	add	r3, r2
 800c078:	9305      	str	r3, [sp, #20]
 800c07a:	9b06      	ldr	r3, [sp, #24]
 800c07c:	4416      	add	r6, r2
 800c07e:	4413      	add	r3, r2
 800c080:	e794      	b.n	800bfac <_dtoa_r+0x744>
 800c082:	4602      	mov	r2, r0
 800c084:	e7f5      	b.n	800c072 <_dtoa_r+0x80a>
 800c086:	f1ba 0f00 	cmp.w	sl, #0
 800c08a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c08e:	46d3      	mov	fp, sl
 800c090:	dc21      	bgt.n	800c0d6 <_dtoa_r+0x86e>
 800c092:	9b07      	ldr	r3, [sp, #28]
 800c094:	2b02      	cmp	r3, #2
 800c096:	dd1e      	ble.n	800c0d6 <_dtoa_r+0x86e>
 800c098:	f1bb 0f00 	cmp.w	fp, #0
 800c09c:	f47f aeb7 	bne.w	800be0e <_dtoa_r+0x5a6>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	465b      	mov	r3, fp
 800c0a4:	2205      	movs	r2, #5
 800c0a6:	4648      	mov	r0, r9
 800c0a8:	f000 f9e0 	bl	800c46c <__multadd>
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	9801      	ldr	r0, [sp, #4]
 800c0b2:	f000 fc3d 	bl	800c930 <__mcmp>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f77f aea9 	ble.w	800be0e <_dtoa_r+0x5a6>
 800c0bc:	463e      	mov	r6, r7
 800c0be:	2331      	movs	r3, #49	@ 0x31
 800c0c0:	f806 3b01 	strb.w	r3, [r6], #1
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	9304      	str	r3, [sp, #16]
 800c0ca:	e6a4      	b.n	800be16 <_dtoa_r+0x5ae>
 800c0cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800c0d0:	4654      	mov	r4, sl
 800c0d2:	4625      	mov	r5, r4
 800c0d4:	e7f2      	b.n	800c0bc <_dtoa_r+0x854>
 800c0d6:	9b08      	ldr	r3, [sp, #32]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 8103 	beq.w	800c2e4 <_dtoa_r+0xa7c>
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	dd05      	ble.n	800c0ee <_dtoa_r+0x886>
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f000 fbb6 	bl	800c858 <__lshift>
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d058      	beq.n	800c1a6 <_dtoa_r+0x93e>
 800c0f4:	6869      	ldr	r1, [r5, #4]
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f000 f956 	bl	800c3a8 <_Balloc>
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	b928      	cbnz	r0, 800c10c <_dtoa_r+0x8a4>
 800c100:	4b82      	ldr	r3, [pc, #520]	@ (800c30c <_dtoa_r+0xaa4>)
 800c102:	4602      	mov	r2, r0
 800c104:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c108:	f7ff bbc7 	b.w	800b89a <_dtoa_r+0x32>
 800c10c:	692a      	ldr	r2, [r5, #16]
 800c10e:	3202      	adds	r2, #2
 800c110:	0092      	lsls	r2, r2, #2
 800c112:	f105 010c 	add.w	r1, r5, #12
 800c116:	300c      	adds	r0, #12
 800c118:	f7ff fb01 	bl	800b71e <memcpy>
 800c11c:	2201      	movs	r2, #1
 800c11e:	4631      	mov	r1, r6
 800c120:	4648      	mov	r0, r9
 800c122:	f000 fb99 	bl	800c858 <__lshift>
 800c126:	1c7b      	adds	r3, r7, #1
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	eb07 030b 	add.w	r3, r7, fp
 800c12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	f003 0301 	and.w	r3, r3, #1
 800c136:	46a8      	mov	r8, r5
 800c138:	9308      	str	r3, [sp, #32]
 800c13a:	4605      	mov	r5, r0
 800c13c:	9b05      	ldr	r3, [sp, #20]
 800c13e:	9801      	ldr	r0, [sp, #4]
 800c140:	4621      	mov	r1, r4
 800c142:	f103 3bff 	add.w	fp, r3, #4294967295
 800c146:	f7ff fb06 	bl	800b756 <quorem>
 800c14a:	4641      	mov	r1, r8
 800c14c:	9002      	str	r0, [sp, #8]
 800c14e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c152:	9801      	ldr	r0, [sp, #4]
 800c154:	f000 fbec 	bl	800c930 <__mcmp>
 800c158:	462a      	mov	r2, r5
 800c15a:	9006      	str	r0, [sp, #24]
 800c15c:	4621      	mov	r1, r4
 800c15e:	4648      	mov	r0, r9
 800c160:	f000 fc02 	bl	800c968 <__mdiff>
 800c164:	68c2      	ldr	r2, [r0, #12]
 800c166:	4606      	mov	r6, r0
 800c168:	b9fa      	cbnz	r2, 800c1aa <_dtoa_r+0x942>
 800c16a:	4601      	mov	r1, r0
 800c16c:	9801      	ldr	r0, [sp, #4]
 800c16e:	f000 fbdf 	bl	800c930 <__mcmp>
 800c172:	4602      	mov	r2, r0
 800c174:	4631      	mov	r1, r6
 800c176:	4648      	mov	r0, r9
 800c178:	920a      	str	r2, [sp, #40]	@ 0x28
 800c17a:	f000 f955 	bl	800c428 <_Bfree>
 800c17e:	9b07      	ldr	r3, [sp, #28]
 800c180:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c182:	9e05      	ldr	r6, [sp, #20]
 800c184:	ea43 0102 	orr.w	r1, r3, r2
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	4319      	orrs	r1, r3
 800c18c:	d10f      	bne.n	800c1ae <_dtoa_r+0x946>
 800c18e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c192:	d028      	beq.n	800c1e6 <_dtoa_r+0x97e>
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	dd02      	ble.n	800c1a0 <_dtoa_r+0x938>
 800c19a:	9b02      	ldr	r3, [sp, #8]
 800c19c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c1a0:	f88b a000 	strb.w	sl, [fp]
 800c1a4:	e639      	b.n	800be1a <_dtoa_r+0x5b2>
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	e7bd      	b.n	800c126 <_dtoa_r+0x8be>
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	e7e2      	b.n	800c174 <_dtoa_r+0x90c>
 800c1ae:	9b06      	ldr	r3, [sp, #24]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	db04      	blt.n	800c1be <_dtoa_r+0x956>
 800c1b4:	9907      	ldr	r1, [sp, #28]
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	9908      	ldr	r1, [sp, #32]
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	d120      	bne.n	800c200 <_dtoa_r+0x998>
 800c1be:	2a00      	cmp	r2, #0
 800c1c0:	ddee      	ble.n	800c1a0 <_dtoa_r+0x938>
 800c1c2:	9901      	ldr	r1, [sp, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	4648      	mov	r0, r9
 800c1c8:	f000 fb46 	bl	800c858 <__lshift>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	9001      	str	r0, [sp, #4]
 800c1d0:	f000 fbae 	bl	800c930 <__mcmp>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	dc03      	bgt.n	800c1e0 <_dtoa_r+0x978>
 800c1d8:	d1e2      	bne.n	800c1a0 <_dtoa_r+0x938>
 800c1da:	f01a 0f01 	tst.w	sl, #1
 800c1de:	d0df      	beq.n	800c1a0 <_dtoa_r+0x938>
 800c1e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c1e4:	d1d9      	bne.n	800c19a <_dtoa_r+0x932>
 800c1e6:	2339      	movs	r3, #57	@ 0x39
 800c1e8:	f88b 3000 	strb.w	r3, [fp]
 800c1ec:	4633      	mov	r3, r6
 800c1ee:	461e      	mov	r6, r3
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1f6:	2a39      	cmp	r2, #57	@ 0x39
 800c1f8:	d053      	beq.n	800c2a2 <_dtoa_r+0xa3a>
 800c1fa:	3201      	adds	r2, #1
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e60c      	b.n	800be1a <_dtoa_r+0x5b2>
 800c200:	2a00      	cmp	r2, #0
 800c202:	dd07      	ble.n	800c214 <_dtoa_r+0x9ac>
 800c204:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c208:	d0ed      	beq.n	800c1e6 <_dtoa_r+0x97e>
 800c20a:	f10a 0301 	add.w	r3, sl, #1
 800c20e:	f88b 3000 	strb.w	r3, [fp]
 800c212:	e602      	b.n	800be1a <_dtoa_r+0x5b2>
 800c214:	9b05      	ldr	r3, [sp, #20]
 800c216:	9a05      	ldr	r2, [sp, #20]
 800c218:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21e:	4293      	cmp	r3, r2
 800c220:	d029      	beq.n	800c276 <_dtoa_r+0xa0e>
 800c222:	9901      	ldr	r1, [sp, #4]
 800c224:	2300      	movs	r3, #0
 800c226:	220a      	movs	r2, #10
 800c228:	4648      	mov	r0, r9
 800c22a:	f000 f91f 	bl	800c46c <__multadd>
 800c22e:	45a8      	cmp	r8, r5
 800c230:	9001      	str	r0, [sp, #4]
 800c232:	f04f 0300 	mov.w	r3, #0
 800c236:	f04f 020a 	mov.w	r2, #10
 800c23a:	4641      	mov	r1, r8
 800c23c:	4648      	mov	r0, r9
 800c23e:	d107      	bne.n	800c250 <_dtoa_r+0x9e8>
 800c240:	f000 f914 	bl	800c46c <__multadd>
 800c244:	4680      	mov	r8, r0
 800c246:	4605      	mov	r5, r0
 800c248:	9b05      	ldr	r3, [sp, #20]
 800c24a:	3301      	adds	r3, #1
 800c24c:	9305      	str	r3, [sp, #20]
 800c24e:	e775      	b.n	800c13c <_dtoa_r+0x8d4>
 800c250:	f000 f90c 	bl	800c46c <__multadd>
 800c254:	4629      	mov	r1, r5
 800c256:	4680      	mov	r8, r0
 800c258:	2300      	movs	r3, #0
 800c25a:	220a      	movs	r2, #10
 800c25c:	4648      	mov	r0, r9
 800c25e:	f000 f905 	bl	800c46c <__multadd>
 800c262:	4605      	mov	r5, r0
 800c264:	e7f0      	b.n	800c248 <_dtoa_r+0x9e0>
 800c266:	f1bb 0f00 	cmp.w	fp, #0
 800c26a:	bfcc      	ite	gt
 800c26c:	465e      	movgt	r6, fp
 800c26e:	2601      	movle	r6, #1
 800c270:	443e      	add	r6, r7
 800c272:	f04f 0800 	mov.w	r8, #0
 800c276:	9901      	ldr	r1, [sp, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	4648      	mov	r0, r9
 800c27c:	f000 faec 	bl	800c858 <__lshift>
 800c280:	4621      	mov	r1, r4
 800c282:	9001      	str	r0, [sp, #4]
 800c284:	f000 fb54 	bl	800c930 <__mcmp>
 800c288:	2800      	cmp	r0, #0
 800c28a:	dcaf      	bgt.n	800c1ec <_dtoa_r+0x984>
 800c28c:	d102      	bne.n	800c294 <_dtoa_r+0xa2c>
 800c28e:	f01a 0f01 	tst.w	sl, #1
 800c292:	d1ab      	bne.n	800c1ec <_dtoa_r+0x984>
 800c294:	4633      	mov	r3, r6
 800c296:	461e      	mov	r6, r3
 800c298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c29c:	2a30      	cmp	r2, #48	@ 0x30
 800c29e:	d0fa      	beq.n	800c296 <_dtoa_r+0xa2e>
 800c2a0:	e5bb      	b.n	800be1a <_dtoa_r+0x5b2>
 800c2a2:	429f      	cmp	r7, r3
 800c2a4:	d1a3      	bne.n	800c1ee <_dtoa_r+0x986>
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	2331      	movs	r3, #49	@ 0x31
 800c2ae:	703b      	strb	r3, [r7, #0]
 800c2b0:	e5b3      	b.n	800be1a <_dtoa_r+0x5b2>
 800c2b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2b4:	4f16      	ldr	r7, [pc, #88]	@ (800c310 <_dtoa_r+0xaa8>)
 800c2b6:	b11b      	cbz	r3, 800c2c0 <_dtoa_r+0xa58>
 800c2b8:	f107 0308 	add.w	r3, r7, #8
 800c2bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	b011      	add	sp, #68	@ 0x44
 800c2c4:	ecbd 8b02 	vpop	{d8}
 800c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2cc:	9b07      	ldr	r3, [sp, #28]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	f77f ae36 	ble.w	800bf40 <_dtoa_r+0x6d8>
 800c2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2d8:	2001      	movs	r0, #1
 800c2da:	e656      	b.n	800bf8a <_dtoa_r+0x722>
 800c2dc:	f1bb 0f00 	cmp.w	fp, #0
 800c2e0:	f77f aed7 	ble.w	800c092 <_dtoa_r+0x82a>
 800c2e4:	463e      	mov	r6, r7
 800c2e6:	9801      	ldr	r0, [sp, #4]
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	f7ff fa34 	bl	800b756 <quorem>
 800c2ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c2f2:	f806 ab01 	strb.w	sl, [r6], #1
 800c2f6:	1bf2      	subs	r2, r6, r7
 800c2f8:	4593      	cmp	fp, r2
 800c2fa:	ddb4      	ble.n	800c266 <_dtoa_r+0x9fe>
 800c2fc:	9901      	ldr	r1, [sp, #4]
 800c2fe:	2300      	movs	r3, #0
 800c300:	220a      	movs	r2, #10
 800c302:	4648      	mov	r0, r9
 800c304:	f000 f8b2 	bl	800c46c <__multadd>
 800c308:	9001      	str	r0, [sp, #4]
 800c30a:	e7ec      	b.n	800c2e6 <_dtoa_r+0xa7e>
 800c30c:	0800ee68 	.word	0x0800ee68
 800c310:	0800edec 	.word	0x0800edec

0800c314 <_free_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	2900      	cmp	r1, #0
 800c31a:	d041      	beq.n	800c3a0 <_free_r+0x8c>
 800c31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c320:	1f0c      	subs	r4, r1, #4
 800c322:	2b00      	cmp	r3, #0
 800c324:	bfb8      	it	lt
 800c326:	18e4      	addlt	r4, r4, r3
 800c328:	f7fe f9c0 	bl	800a6ac <__malloc_lock>
 800c32c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a4 <_free_r+0x90>)
 800c32e:	6813      	ldr	r3, [r2, #0]
 800c330:	b933      	cbnz	r3, 800c340 <_free_r+0x2c>
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	6014      	str	r4, [r2, #0]
 800c336:	4628      	mov	r0, r5
 800c338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33c:	f7fe b9bc 	b.w	800a6b8 <__malloc_unlock>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d908      	bls.n	800c356 <_free_r+0x42>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	1821      	adds	r1, r4, r0
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf01      	itttt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	e7ed      	b.n	800c332 <_free_r+0x1e>
 800c356:	461a      	mov	r2, r3
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	b10b      	cbz	r3, 800c360 <_free_r+0x4c>
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d9fa      	bls.n	800c356 <_free_r+0x42>
 800c360:	6811      	ldr	r1, [r2, #0]
 800c362:	1850      	adds	r0, r2, r1
 800c364:	42a0      	cmp	r0, r4
 800c366:	d10b      	bne.n	800c380 <_free_r+0x6c>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	4401      	add	r1, r0
 800c36c:	1850      	adds	r0, r2, r1
 800c36e:	4283      	cmp	r3, r0
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	d1e0      	bne.n	800c336 <_free_r+0x22>
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	6053      	str	r3, [r2, #4]
 800c37a:	4408      	add	r0, r1
 800c37c:	6010      	str	r0, [r2, #0]
 800c37e:	e7da      	b.n	800c336 <_free_r+0x22>
 800c380:	d902      	bls.n	800c388 <_free_r+0x74>
 800c382:	230c      	movs	r3, #12
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	e7d6      	b.n	800c336 <_free_r+0x22>
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	1821      	adds	r1, r4, r0
 800c38c:	428b      	cmp	r3, r1
 800c38e:	bf04      	itt	eq
 800c390:	6819      	ldreq	r1, [r3, #0]
 800c392:	685b      	ldreq	r3, [r3, #4]
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	bf04      	itt	eq
 800c398:	1809      	addeq	r1, r1, r0
 800c39a:	6021      	streq	r1, [r4, #0]
 800c39c:	6054      	str	r4, [r2, #4]
 800c39e:	e7ca      	b.n	800c336 <_free_r+0x22>
 800c3a0:	bd38      	pop	{r3, r4, r5, pc}
 800c3a2:	bf00      	nop
 800c3a4:	24004d74 	.word	0x24004d74

0800c3a8 <_Balloc>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	69c6      	ldr	r6, [r0, #28]
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	b976      	cbnz	r6, 800c3d0 <_Balloc+0x28>
 800c3b2:	2010      	movs	r0, #16
 800c3b4:	f7fe f8c8 	bl	800a548 <malloc>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	61e0      	str	r0, [r4, #28]
 800c3bc:	b920      	cbnz	r0, 800c3c8 <_Balloc+0x20>
 800c3be:	4b18      	ldr	r3, [pc, #96]	@ (800c420 <_Balloc+0x78>)
 800c3c0:	4818      	ldr	r0, [pc, #96]	@ (800c424 <_Balloc+0x7c>)
 800c3c2:	216b      	movs	r1, #107	@ 0x6b
 800c3c4:	f7fe f8a2 	bl	800a50c <__assert_func>
 800c3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3cc:	6006      	str	r6, [r0, #0]
 800c3ce:	60c6      	str	r6, [r0, #12]
 800c3d0:	69e6      	ldr	r6, [r4, #28]
 800c3d2:	68f3      	ldr	r3, [r6, #12]
 800c3d4:	b183      	cbz	r3, 800c3f8 <_Balloc+0x50>
 800c3d6:	69e3      	ldr	r3, [r4, #28]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3de:	b9b8      	cbnz	r0, 800c410 <_Balloc+0x68>
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3e6:	1d72      	adds	r2, r6, #5
 800c3e8:	0092      	lsls	r2, r2, #2
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f001 ff00 	bl	800e1f0 <_calloc_r>
 800c3f0:	b160      	cbz	r0, 800c40c <_Balloc+0x64>
 800c3f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3f6:	e00e      	b.n	800c416 <_Balloc+0x6e>
 800c3f8:	2221      	movs	r2, #33	@ 0x21
 800c3fa:	2104      	movs	r1, #4
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f001 fef7 	bl	800e1f0 <_calloc_r>
 800c402:	69e3      	ldr	r3, [r4, #28]
 800c404:	60f0      	str	r0, [r6, #12]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e4      	bne.n	800c3d6 <_Balloc+0x2e>
 800c40c:	2000      	movs	r0, #0
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	6802      	ldr	r2, [r0, #0]
 800c412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c416:	2300      	movs	r3, #0
 800c418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c41c:	e7f7      	b.n	800c40e <_Balloc+0x66>
 800c41e:	bf00      	nop
 800c420:	0800edf9 	.word	0x0800edf9
 800c424:	0800ee79 	.word	0x0800ee79

0800c428 <_Bfree>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	69c6      	ldr	r6, [r0, #28]
 800c42c:	4605      	mov	r5, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	b976      	cbnz	r6, 800c450 <_Bfree+0x28>
 800c432:	2010      	movs	r0, #16
 800c434:	f7fe f888 	bl	800a548 <malloc>
 800c438:	4602      	mov	r2, r0
 800c43a:	61e8      	str	r0, [r5, #28]
 800c43c:	b920      	cbnz	r0, 800c448 <_Bfree+0x20>
 800c43e:	4b09      	ldr	r3, [pc, #36]	@ (800c464 <_Bfree+0x3c>)
 800c440:	4809      	ldr	r0, [pc, #36]	@ (800c468 <_Bfree+0x40>)
 800c442:	218f      	movs	r1, #143	@ 0x8f
 800c444:	f7fe f862 	bl	800a50c <__assert_func>
 800c448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c44c:	6006      	str	r6, [r0, #0]
 800c44e:	60c6      	str	r6, [r0, #12]
 800c450:	b13c      	cbz	r4, 800c462 <_Bfree+0x3a>
 800c452:	69eb      	ldr	r3, [r5, #28]
 800c454:	6862      	ldr	r2, [r4, #4]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c45c:	6021      	str	r1, [r4, #0]
 800c45e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c462:	bd70      	pop	{r4, r5, r6, pc}
 800c464:	0800edf9 	.word	0x0800edf9
 800c468:	0800ee79 	.word	0x0800ee79

0800c46c <__multadd>:
 800c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c470:	690d      	ldr	r5, [r1, #16]
 800c472:	4607      	mov	r7, r0
 800c474:	460c      	mov	r4, r1
 800c476:	461e      	mov	r6, r3
 800c478:	f101 0c14 	add.w	ip, r1, #20
 800c47c:	2000      	movs	r0, #0
 800c47e:	f8dc 3000 	ldr.w	r3, [ip]
 800c482:	b299      	uxth	r1, r3
 800c484:	fb02 6101 	mla	r1, r2, r1, r6
 800c488:	0c1e      	lsrs	r6, r3, #16
 800c48a:	0c0b      	lsrs	r3, r1, #16
 800c48c:	fb02 3306 	mla	r3, r2, r6, r3
 800c490:	b289      	uxth	r1, r1
 800c492:	3001      	adds	r0, #1
 800c494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c498:	4285      	cmp	r5, r0
 800c49a:	f84c 1b04 	str.w	r1, [ip], #4
 800c49e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4a2:	dcec      	bgt.n	800c47e <__multadd+0x12>
 800c4a4:	b30e      	cbz	r6, 800c4ea <__multadd+0x7e>
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	42ab      	cmp	r3, r5
 800c4aa:	dc19      	bgt.n	800c4e0 <__multadd+0x74>
 800c4ac:	6861      	ldr	r1, [r4, #4]
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	3101      	adds	r1, #1
 800c4b2:	f7ff ff79 	bl	800c3a8 <_Balloc>
 800c4b6:	4680      	mov	r8, r0
 800c4b8:	b928      	cbnz	r0, 800c4c6 <__multadd+0x5a>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f0 <__multadd+0x84>)
 800c4be:	480d      	ldr	r0, [pc, #52]	@ (800c4f4 <__multadd+0x88>)
 800c4c0:	21ba      	movs	r1, #186	@ 0xba
 800c4c2:	f7fe f823 	bl	800a50c <__assert_func>
 800c4c6:	6922      	ldr	r2, [r4, #16]
 800c4c8:	3202      	adds	r2, #2
 800c4ca:	f104 010c 	add.w	r1, r4, #12
 800c4ce:	0092      	lsls	r2, r2, #2
 800c4d0:	300c      	adds	r0, #12
 800c4d2:	f7ff f924 	bl	800b71e <memcpy>
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff ffa5 	bl	800c428 <_Bfree>
 800c4de:	4644      	mov	r4, r8
 800c4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4e4:	3501      	adds	r5, #1
 800c4e6:	615e      	str	r6, [r3, #20]
 800c4e8:	6125      	str	r5, [r4, #16]
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f0:	0800ee68 	.word	0x0800ee68
 800c4f4:	0800ee79 	.word	0x0800ee79

0800c4f8 <__s2b>:
 800c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	4615      	mov	r5, r2
 800c500:	461f      	mov	r7, r3
 800c502:	2209      	movs	r2, #9
 800c504:	3308      	adds	r3, #8
 800c506:	4606      	mov	r6, r0
 800c508:	fb93 f3f2 	sdiv	r3, r3, r2
 800c50c:	2100      	movs	r1, #0
 800c50e:	2201      	movs	r2, #1
 800c510:	429a      	cmp	r2, r3
 800c512:	db09      	blt.n	800c528 <__s2b+0x30>
 800c514:	4630      	mov	r0, r6
 800c516:	f7ff ff47 	bl	800c3a8 <_Balloc>
 800c51a:	b940      	cbnz	r0, 800c52e <__s2b+0x36>
 800c51c:	4602      	mov	r2, r0
 800c51e:	4b19      	ldr	r3, [pc, #100]	@ (800c584 <__s2b+0x8c>)
 800c520:	4819      	ldr	r0, [pc, #100]	@ (800c588 <__s2b+0x90>)
 800c522:	21d3      	movs	r1, #211	@ 0xd3
 800c524:	f7fd fff2 	bl	800a50c <__assert_func>
 800c528:	0052      	lsls	r2, r2, #1
 800c52a:	3101      	adds	r1, #1
 800c52c:	e7f0      	b.n	800c510 <__s2b+0x18>
 800c52e:	9b08      	ldr	r3, [sp, #32]
 800c530:	6143      	str	r3, [r0, #20]
 800c532:	2d09      	cmp	r5, #9
 800c534:	f04f 0301 	mov.w	r3, #1
 800c538:	6103      	str	r3, [r0, #16]
 800c53a:	dd16      	ble.n	800c56a <__s2b+0x72>
 800c53c:	f104 0909 	add.w	r9, r4, #9
 800c540:	46c8      	mov	r8, r9
 800c542:	442c      	add	r4, r5
 800c544:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c548:	4601      	mov	r1, r0
 800c54a:	3b30      	subs	r3, #48	@ 0x30
 800c54c:	220a      	movs	r2, #10
 800c54e:	4630      	mov	r0, r6
 800c550:	f7ff ff8c 	bl	800c46c <__multadd>
 800c554:	45a0      	cmp	r8, r4
 800c556:	d1f5      	bne.n	800c544 <__s2b+0x4c>
 800c558:	f1a5 0408 	sub.w	r4, r5, #8
 800c55c:	444c      	add	r4, r9
 800c55e:	1b2d      	subs	r5, r5, r4
 800c560:	1963      	adds	r3, r4, r5
 800c562:	42bb      	cmp	r3, r7
 800c564:	db04      	blt.n	800c570 <__s2b+0x78>
 800c566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c56a:	340a      	adds	r4, #10
 800c56c:	2509      	movs	r5, #9
 800c56e:	e7f6      	b.n	800c55e <__s2b+0x66>
 800c570:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c574:	4601      	mov	r1, r0
 800c576:	3b30      	subs	r3, #48	@ 0x30
 800c578:	220a      	movs	r2, #10
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff ff76 	bl	800c46c <__multadd>
 800c580:	e7ee      	b.n	800c560 <__s2b+0x68>
 800c582:	bf00      	nop
 800c584:	0800ee68 	.word	0x0800ee68
 800c588:	0800ee79 	.word	0x0800ee79

0800c58c <__hi0bits>:
 800c58c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c590:	4603      	mov	r3, r0
 800c592:	bf36      	itet	cc
 800c594:	0403      	lslcc	r3, r0, #16
 800c596:	2000      	movcs	r0, #0
 800c598:	2010      	movcc	r0, #16
 800c59a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c59e:	bf3c      	itt	cc
 800c5a0:	021b      	lslcc	r3, r3, #8
 800c5a2:	3008      	addcc	r0, #8
 800c5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5a8:	bf3c      	itt	cc
 800c5aa:	011b      	lslcc	r3, r3, #4
 800c5ac:	3004      	addcc	r0, #4
 800c5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5b2:	bf3c      	itt	cc
 800c5b4:	009b      	lslcc	r3, r3, #2
 800c5b6:	3002      	addcc	r0, #2
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	db05      	blt.n	800c5c8 <__hi0bits+0x3c>
 800c5bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5c0:	f100 0001 	add.w	r0, r0, #1
 800c5c4:	bf08      	it	eq
 800c5c6:	2020      	moveq	r0, #32
 800c5c8:	4770      	bx	lr

0800c5ca <__lo0bits>:
 800c5ca:	6803      	ldr	r3, [r0, #0]
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	f013 0007 	ands.w	r0, r3, #7
 800c5d2:	d00b      	beq.n	800c5ec <__lo0bits+0x22>
 800c5d4:	07d9      	lsls	r1, r3, #31
 800c5d6:	d421      	bmi.n	800c61c <__lo0bits+0x52>
 800c5d8:	0798      	lsls	r0, r3, #30
 800c5da:	bf49      	itett	mi
 800c5dc:	085b      	lsrmi	r3, r3, #1
 800c5de:	089b      	lsrpl	r3, r3, #2
 800c5e0:	2001      	movmi	r0, #1
 800c5e2:	6013      	strmi	r3, [r2, #0]
 800c5e4:	bf5c      	itt	pl
 800c5e6:	6013      	strpl	r3, [r2, #0]
 800c5e8:	2002      	movpl	r0, #2
 800c5ea:	4770      	bx	lr
 800c5ec:	b299      	uxth	r1, r3
 800c5ee:	b909      	cbnz	r1, 800c5f4 <__lo0bits+0x2a>
 800c5f0:	0c1b      	lsrs	r3, r3, #16
 800c5f2:	2010      	movs	r0, #16
 800c5f4:	b2d9      	uxtb	r1, r3
 800c5f6:	b909      	cbnz	r1, 800c5fc <__lo0bits+0x32>
 800c5f8:	3008      	adds	r0, #8
 800c5fa:	0a1b      	lsrs	r3, r3, #8
 800c5fc:	0719      	lsls	r1, r3, #28
 800c5fe:	bf04      	itt	eq
 800c600:	091b      	lsreq	r3, r3, #4
 800c602:	3004      	addeq	r0, #4
 800c604:	0799      	lsls	r1, r3, #30
 800c606:	bf04      	itt	eq
 800c608:	089b      	lsreq	r3, r3, #2
 800c60a:	3002      	addeq	r0, #2
 800c60c:	07d9      	lsls	r1, r3, #31
 800c60e:	d403      	bmi.n	800c618 <__lo0bits+0x4e>
 800c610:	085b      	lsrs	r3, r3, #1
 800c612:	f100 0001 	add.w	r0, r0, #1
 800c616:	d003      	beq.n	800c620 <__lo0bits+0x56>
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	4770      	bx	lr
 800c61c:	2000      	movs	r0, #0
 800c61e:	4770      	bx	lr
 800c620:	2020      	movs	r0, #32
 800c622:	4770      	bx	lr

0800c624 <__i2b>:
 800c624:	b510      	push	{r4, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	2101      	movs	r1, #1
 800c62a:	f7ff febd 	bl	800c3a8 <_Balloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	b928      	cbnz	r0, 800c63e <__i2b+0x1a>
 800c632:	4b05      	ldr	r3, [pc, #20]	@ (800c648 <__i2b+0x24>)
 800c634:	4805      	ldr	r0, [pc, #20]	@ (800c64c <__i2b+0x28>)
 800c636:	f240 1145 	movw	r1, #325	@ 0x145
 800c63a:	f7fd ff67 	bl	800a50c <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	6144      	str	r4, [r0, #20]
 800c642:	6103      	str	r3, [r0, #16]
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	0800ee68 	.word	0x0800ee68
 800c64c:	0800ee79 	.word	0x0800ee79

0800c650 <__multiply>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4614      	mov	r4, r2
 800c656:	690a      	ldr	r2, [r1, #16]
 800c658:	6923      	ldr	r3, [r4, #16]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	bfa8      	it	ge
 800c65e:	4623      	movge	r3, r4
 800c660:	460f      	mov	r7, r1
 800c662:	bfa4      	itt	ge
 800c664:	460c      	movge	r4, r1
 800c666:	461f      	movge	r7, r3
 800c668:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c66c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	6861      	ldr	r1, [r4, #4]
 800c674:	eb0a 0609 	add.w	r6, sl, r9
 800c678:	42b3      	cmp	r3, r6
 800c67a:	b085      	sub	sp, #20
 800c67c:	bfb8      	it	lt
 800c67e:	3101      	addlt	r1, #1
 800c680:	f7ff fe92 	bl	800c3a8 <_Balloc>
 800c684:	b930      	cbnz	r0, 800c694 <__multiply+0x44>
 800c686:	4602      	mov	r2, r0
 800c688:	4b44      	ldr	r3, [pc, #272]	@ (800c79c <__multiply+0x14c>)
 800c68a:	4845      	ldr	r0, [pc, #276]	@ (800c7a0 <__multiply+0x150>)
 800c68c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c690:	f7fd ff3c 	bl	800a50c <__assert_func>
 800c694:	f100 0514 	add.w	r5, r0, #20
 800c698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c69c:	462b      	mov	r3, r5
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4543      	cmp	r3, r8
 800c6a2:	d321      	bcc.n	800c6e8 <__multiply+0x98>
 800c6a4:	f107 0114 	add.w	r1, r7, #20
 800c6a8:	f104 0214 	add.w	r2, r4, #20
 800c6ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6b4:	9302      	str	r3, [sp, #8]
 800c6b6:	1b13      	subs	r3, r2, r4
 800c6b8:	3b15      	subs	r3, #21
 800c6ba:	f023 0303 	bic.w	r3, r3, #3
 800c6be:	3304      	adds	r3, #4
 800c6c0:	f104 0715 	add.w	r7, r4, #21
 800c6c4:	42ba      	cmp	r2, r7
 800c6c6:	bf38      	it	cc
 800c6c8:	2304      	movcc	r3, #4
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	9b02      	ldr	r3, [sp, #8]
 800c6ce:	9103      	str	r1, [sp, #12]
 800c6d0:	428b      	cmp	r3, r1
 800c6d2:	d80c      	bhi.n	800c6ee <__multiply+0x9e>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	dd03      	ble.n	800c6e0 <__multiply+0x90>
 800c6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05b      	beq.n	800c798 <__multiply+0x148>
 800c6e0:	6106      	str	r6, [r0, #16]
 800c6e2:	b005      	add	sp, #20
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ec:	e7d8      	b.n	800c6a0 <__multiply+0x50>
 800c6ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6f2:	f1ba 0f00 	cmp.w	sl, #0
 800c6f6:	d024      	beq.n	800c742 <__multiply+0xf2>
 800c6f8:	f104 0e14 	add.w	lr, r4, #20
 800c6fc:	46a9      	mov	r9, r5
 800c6fe:	f04f 0c00 	mov.w	ip, #0
 800c702:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c706:	f8d9 3000 	ldr.w	r3, [r9]
 800c70a:	fa1f fb87 	uxth.w	fp, r7
 800c70e:	b29b      	uxth	r3, r3
 800c710:	fb0a 330b 	mla	r3, sl, fp, r3
 800c714:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c718:	f8d9 7000 	ldr.w	r7, [r9]
 800c71c:	4463      	add	r3, ip
 800c71e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c722:	fb0a c70b 	mla	r7, sl, fp, ip
 800c726:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c730:	4572      	cmp	r2, lr
 800c732:	f849 3b04 	str.w	r3, [r9], #4
 800c736:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c73a:	d8e2      	bhi.n	800c702 <__multiply+0xb2>
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	f845 c003 	str.w	ip, [r5, r3]
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c748:	3104      	adds	r1, #4
 800c74a:	f1b9 0f00 	cmp.w	r9, #0
 800c74e:	d021      	beq.n	800c794 <__multiply+0x144>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	f104 0c14 	add.w	ip, r4, #20
 800c756:	46ae      	mov	lr, r5
 800c758:	f04f 0a00 	mov.w	sl, #0
 800c75c:	f8bc b000 	ldrh.w	fp, [ip]
 800c760:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c764:	fb09 770b 	mla	r7, r9, fp, r7
 800c768:	4457      	add	r7, sl
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c770:	f84e 3b04 	str.w	r3, [lr], #4
 800c774:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c77c:	f8be 3000 	ldrh.w	r3, [lr]
 800c780:	fb09 330a 	mla	r3, r9, sl, r3
 800c784:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c788:	4562      	cmp	r2, ip
 800c78a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c78e:	d8e5      	bhi.n	800c75c <__multiply+0x10c>
 800c790:	9f01      	ldr	r7, [sp, #4]
 800c792:	51eb      	str	r3, [r5, r7]
 800c794:	3504      	adds	r5, #4
 800c796:	e799      	b.n	800c6cc <__multiply+0x7c>
 800c798:	3e01      	subs	r6, #1
 800c79a:	e79b      	b.n	800c6d4 <__multiply+0x84>
 800c79c:	0800ee68 	.word	0x0800ee68
 800c7a0:	0800ee79 	.word	0x0800ee79

0800c7a4 <__pow5mult>:
 800c7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a8:	4615      	mov	r5, r2
 800c7aa:	f012 0203 	ands.w	r2, r2, #3
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	460e      	mov	r6, r1
 800c7b2:	d007      	beq.n	800c7c4 <__pow5mult+0x20>
 800c7b4:	4c25      	ldr	r4, [pc, #148]	@ (800c84c <__pow5mult+0xa8>)
 800c7b6:	3a01      	subs	r2, #1
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7be:	f7ff fe55 	bl	800c46c <__multadd>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	10ad      	asrs	r5, r5, #2
 800c7c6:	d03d      	beq.n	800c844 <__pow5mult+0xa0>
 800c7c8:	69fc      	ldr	r4, [r7, #28]
 800c7ca:	b97c      	cbnz	r4, 800c7ec <__pow5mult+0x48>
 800c7cc:	2010      	movs	r0, #16
 800c7ce:	f7fd febb 	bl	800a548 <malloc>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	61f8      	str	r0, [r7, #28]
 800c7d6:	b928      	cbnz	r0, 800c7e4 <__pow5mult+0x40>
 800c7d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c850 <__pow5mult+0xac>)
 800c7da:	481e      	ldr	r0, [pc, #120]	@ (800c854 <__pow5mult+0xb0>)
 800c7dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7e0:	f7fd fe94 	bl	800a50c <__assert_func>
 800c7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7e8:	6004      	str	r4, [r0, #0]
 800c7ea:	60c4      	str	r4, [r0, #12]
 800c7ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7f4:	b94c      	cbnz	r4, 800c80a <__pow5mult+0x66>
 800c7f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f7ff ff12 	bl	800c624 <__i2b>
 800c800:	2300      	movs	r3, #0
 800c802:	f8c8 0008 	str.w	r0, [r8, #8]
 800c806:	4604      	mov	r4, r0
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	f04f 0900 	mov.w	r9, #0
 800c80e:	07eb      	lsls	r3, r5, #31
 800c810:	d50a      	bpl.n	800c828 <__pow5mult+0x84>
 800c812:	4631      	mov	r1, r6
 800c814:	4622      	mov	r2, r4
 800c816:	4638      	mov	r0, r7
 800c818:	f7ff ff1a 	bl	800c650 <__multiply>
 800c81c:	4631      	mov	r1, r6
 800c81e:	4680      	mov	r8, r0
 800c820:	4638      	mov	r0, r7
 800c822:	f7ff fe01 	bl	800c428 <_Bfree>
 800c826:	4646      	mov	r6, r8
 800c828:	106d      	asrs	r5, r5, #1
 800c82a:	d00b      	beq.n	800c844 <__pow5mult+0xa0>
 800c82c:	6820      	ldr	r0, [r4, #0]
 800c82e:	b938      	cbnz	r0, 800c840 <__pow5mult+0x9c>
 800c830:	4622      	mov	r2, r4
 800c832:	4621      	mov	r1, r4
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff ff0b 	bl	800c650 <__multiply>
 800c83a:	6020      	str	r0, [r4, #0]
 800c83c:	f8c0 9000 	str.w	r9, [r0]
 800c840:	4604      	mov	r4, r0
 800c842:	e7e4      	b.n	800c80e <__pow5mult+0x6a>
 800c844:	4630      	mov	r0, r6
 800c846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84a:	bf00      	nop
 800c84c:	0800eed4 	.word	0x0800eed4
 800c850:	0800edf9 	.word	0x0800edf9
 800c854:	0800ee79 	.word	0x0800ee79

0800c858 <__lshift>:
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	460c      	mov	r4, r1
 800c85e:	6849      	ldr	r1, [r1, #4]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	4607      	mov	r7, r0
 800c86a:	4691      	mov	r9, r2
 800c86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c870:	f108 0601 	add.w	r6, r8, #1
 800c874:	42b3      	cmp	r3, r6
 800c876:	db0b      	blt.n	800c890 <__lshift+0x38>
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff fd95 	bl	800c3a8 <_Balloc>
 800c87e:	4605      	mov	r5, r0
 800c880:	b948      	cbnz	r0, 800c896 <__lshift+0x3e>
 800c882:	4602      	mov	r2, r0
 800c884:	4b28      	ldr	r3, [pc, #160]	@ (800c928 <__lshift+0xd0>)
 800c886:	4829      	ldr	r0, [pc, #164]	@ (800c92c <__lshift+0xd4>)
 800c888:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c88c:	f7fd fe3e 	bl	800a50c <__assert_func>
 800c890:	3101      	adds	r1, #1
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	e7ee      	b.n	800c874 <__lshift+0x1c>
 800c896:	2300      	movs	r3, #0
 800c898:	f100 0114 	add.w	r1, r0, #20
 800c89c:	f100 0210 	add.w	r2, r0, #16
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	4553      	cmp	r3, sl
 800c8a4:	db33      	blt.n	800c90e <__lshift+0xb6>
 800c8a6:	6920      	ldr	r0, [r4, #16]
 800c8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8ac:	f104 0314 	add.w	r3, r4, #20
 800c8b0:	f019 091f 	ands.w	r9, r9, #31
 800c8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8bc:	d02b      	beq.n	800c916 <__lshift+0xbe>
 800c8be:	f1c9 0e20 	rsb	lr, r9, #32
 800c8c2:	468a      	mov	sl, r1
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c8cc:	4310      	orrs	r0, r2
 800c8ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d6:	459c      	cmp	ip, r3
 800c8d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8dc:	d8f3      	bhi.n	800c8c6 <__lshift+0x6e>
 800c8de:	ebac 0304 	sub.w	r3, ip, r4
 800c8e2:	3b15      	subs	r3, #21
 800c8e4:	f023 0303 	bic.w	r3, r3, #3
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	f104 0015 	add.w	r0, r4, #21
 800c8ee:	4584      	cmp	ip, r0
 800c8f0:	bf38      	it	cc
 800c8f2:	2304      	movcc	r3, #4
 800c8f4:	50ca      	str	r2, [r1, r3]
 800c8f6:	b10a      	cbz	r2, 800c8fc <__lshift+0xa4>
 800c8f8:	f108 0602 	add.w	r6, r8, #2
 800c8fc:	3e01      	subs	r6, #1
 800c8fe:	4638      	mov	r0, r7
 800c900:	612e      	str	r6, [r5, #16]
 800c902:	4621      	mov	r1, r4
 800c904:	f7ff fd90 	bl	800c428 <_Bfree>
 800c908:	4628      	mov	r0, r5
 800c90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c912:	3301      	adds	r3, #1
 800c914:	e7c5      	b.n	800c8a2 <__lshift+0x4a>
 800c916:	3904      	subs	r1, #4
 800c918:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c920:	459c      	cmp	ip, r3
 800c922:	d8f9      	bhi.n	800c918 <__lshift+0xc0>
 800c924:	e7ea      	b.n	800c8fc <__lshift+0xa4>
 800c926:	bf00      	nop
 800c928:	0800ee68 	.word	0x0800ee68
 800c92c:	0800ee79 	.word	0x0800ee79

0800c930 <__mcmp>:
 800c930:	690a      	ldr	r2, [r1, #16]
 800c932:	4603      	mov	r3, r0
 800c934:	6900      	ldr	r0, [r0, #16]
 800c936:	1a80      	subs	r0, r0, r2
 800c938:	b530      	push	{r4, r5, lr}
 800c93a:	d10e      	bne.n	800c95a <__mcmp+0x2a>
 800c93c:	3314      	adds	r3, #20
 800c93e:	3114      	adds	r1, #20
 800c940:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c944:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c948:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c94c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c950:	4295      	cmp	r5, r2
 800c952:	d003      	beq.n	800c95c <__mcmp+0x2c>
 800c954:	d205      	bcs.n	800c962 <__mcmp+0x32>
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	bd30      	pop	{r4, r5, pc}
 800c95c:	42a3      	cmp	r3, r4
 800c95e:	d3f3      	bcc.n	800c948 <__mcmp+0x18>
 800c960:	e7fb      	b.n	800c95a <__mcmp+0x2a>
 800c962:	2001      	movs	r0, #1
 800c964:	e7f9      	b.n	800c95a <__mcmp+0x2a>
	...

0800c968 <__mdiff>:
 800c968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4689      	mov	r9, r1
 800c96e:	4606      	mov	r6, r0
 800c970:	4611      	mov	r1, r2
 800c972:	4648      	mov	r0, r9
 800c974:	4614      	mov	r4, r2
 800c976:	f7ff ffdb 	bl	800c930 <__mcmp>
 800c97a:	1e05      	subs	r5, r0, #0
 800c97c:	d112      	bne.n	800c9a4 <__mdiff+0x3c>
 800c97e:	4629      	mov	r1, r5
 800c980:	4630      	mov	r0, r6
 800c982:	f7ff fd11 	bl	800c3a8 <_Balloc>
 800c986:	4602      	mov	r2, r0
 800c988:	b928      	cbnz	r0, 800c996 <__mdiff+0x2e>
 800c98a:	4b3f      	ldr	r3, [pc, #252]	@ (800ca88 <__mdiff+0x120>)
 800c98c:	f240 2137 	movw	r1, #567	@ 0x237
 800c990:	483e      	ldr	r0, [pc, #248]	@ (800ca8c <__mdiff+0x124>)
 800c992:	f7fd fdbb 	bl	800a50c <__assert_func>
 800c996:	2301      	movs	r3, #1
 800c998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c99c:	4610      	mov	r0, r2
 800c99e:	b003      	add	sp, #12
 800c9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a4:	bfbc      	itt	lt
 800c9a6:	464b      	movlt	r3, r9
 800c9a8:	46a1      	movlt	r9, r4
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9b0:	bfba      	itte	lt
 800c9b2:	461c      	movlt	r4, r3
 800c9b4:	2501      	movlt	r5, #1
 800c9b6:	2500      	movge	r5, #0
 800c9b8:	f7ff fcf6 	bl	800c3a8 <_Balloc>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	b918      	cbnz	r0, 800c9c8 <__mdiff+0x60>
 800c9c0:	4b31      	ldr	r3, [pc, #196]	@ (800ca88 <__mdiff+0x120>)
 800c9c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c9c6:	e7e3      	b.n	800c990 <__mdiff+0x28>
 800c9c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9cc:	6926      	ldr	r6, [r4, #16]
 800c9ce:	60c5      	str	r5, [r0, #12]
 800c9d0:	f109 0310 	add.w	r3, r9, #16
 800c9d4:	f109 0514 	add.w	r5, r9, #20
 800c9d8:	f104 0e14 	add.w	lr, r4, #20
 800c9dc:	f100 0b14 	add.w	fp, r0, #20
 800c9e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	46d9      	mov	r9, fp
 800c9ec:	f04f 0c00 	mov.w	ip, #0
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	fa1f f38a 	uxth.w	r3, sl
 800ca00:	4619      	mov	r1, r3
 800ca02:	b283      	uxth	r3, r0
 800ca04:	1acb      	subs	r3, r1, r3
 800ca06:	0c00      	lsrs	r0, r0, #16
 800ca08:	4463      	add	r3, ip
 800ca0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca18:	4576      	cmp	r6, lr
 800ca1a:	f849 3b04 	str.w	r3, [r9], #4
 800ca1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca22:	d8e5      	bhi.n	800c9f0 <__mdiff+0x88>
 800ca24:	1b33      	subs	r3, r6, r4
 800ca26:	3b15      	subs	r3, #21
 800ca28:	f023 0303 	bic.w	r3, r3, #3
 800ca2c:	3415      	adds	r4, #21
 800ca2e:	3304      	adds	r3, #4
 800ca30:	42a6      	cmp	r6, r4
 800ca32:	bf38      	it	cc
 800ca34:	2304      	movcc	r3, #4
 800ca36:	441d      	add	r5, r3
 800ca38:	445b      	add	r3, fp
 800ca3a:	461e      	mov	r6, r3
 800ca3c:	462c      	mov	r4, r5
 800ca3e:	4544      	cmp	r4, r8
 800ca40:	d30e      	bcc.n	800ca60 <__mdiff+0xf8>
 800ca42:	f108 0103 	add.w	r1, r8, #3
 800ca46:	1b49      	subs	r1, r1, r5
 800ca48:	f021 0103 	bic.w	r1, r1, #3
 800ca4c:	3d03      	subs	r5, #3
 800ca4e:	45a8      	cmp	r8, r5
 800ca50:	bf38      	it	cc
 800ca52:	2100      	movcc	r1, #0
 800ca54:	440b      	add	r3, r1
 800ca56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca5a:	b191      	cbz	r1, 800ca82 <__mdiff+0x11a>
 800ca5c:	6117      	str	r7, [r2, #16]
 800ca5e:	e79d      	b.n	800c99c <__mdiff+0x34>
 800ca60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca64:	46e6      	mov	lr, ip
 800ca66:	0c08      	lsrs	r0, r1, #16
 800ca68:	fa1c fc81 	uxtah	ip, ip, r1
 800ca6c:	4471      	add	r1, lr
 800ca6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca72:	b289      	uxth	r1, r1
 800ca74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca78:	f846 1b04 	str.w	r1, [r6], #4
 800ca7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca80:	e7dd      	b.n	800ca3e <__mdiff+0xd6>
 800ca82:	3f01      	subs	r7, #1
 800ca84:	e7e7      	b.n	800ca56 <__mdiff+0xee>
 800ca86:	bf00      	nop
 800ca88:	0800ee68 	.word	0x0800ee68
 800ca8c:	0800ee79 	.word	0x0800ee79

0800ca90 <__ulp>:
 800ca90:	b082      	sub	sp, #8
 800ca92:	ed8d 0b00 	vstr	d0, [sp]
 800ca96:	9a01      	ldr	r2, [sp, #4]
 800ca98:	4b0f      	ldr	r3, [pc, #60]	@ (800cad8 <__ulp+0x48>)
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dc08      	bgt.n	800cab6 <__ulp+0x26>
 800caa4:	425b      	negs	r3, r3
 800caa6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800caaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800caae:	da04      	bge.n	800caba <__ulp+0x2a>
 800cab0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cab4:	4113      	asrs	r3, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	e008      	b.n	800cacc <__ulp+0x3c>
 800caba:	f1a2 0314 	sub.w	r3, r2, #20
 800cabe:	2b1e      	cmp	r3, #30
 800cac0:	bfda      	itte	le
 800cac2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cac6:	40da      	lsrle	r2, r3
 800cac8:	2201      	movgt	r2, #1
 800caca:	2300      	movs	r3, #0
 800cacc:	4619      	mov	r1, r3
 800cace:	4610      	mov	r0, r2
 800cad0:	ec41 0b10 	vmov	d0, r0, r1
 800cad4:	b002      	add	sp, #8
 800cad6:	4770      	bx	lr
 800cad8:	7ff00000 	.word	0x7ff00000

0800cadc <__b2d>:
 800cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	6906      	ldr	r6, [r0, #16]
 800cae2:	f100 0814 	add.w	r8, r0, #20
 800cae6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800caea:	1f37      	subs	r7, r6, #4
 800caec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800caf0:	4610      	mov	r0, r2
 800caf2:	f7ff fd4b 	bl	800c58c <__hi0bits>
 800caf6:	f1c0 0320 	rsb	r3, r0, #32
 800cafa:	280a      	cmp	r0, #10
 800cafc:	600b      	str	r3, [r1, #0]
 800cafe:	491b      	ldr	r1, [pc, #108]	@ (800cb6c <__b2d+0x90>)
 800cb00:	dc15      	bgt.n	800cb2e <__b2d+0x52>
 800cb02:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb06:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb0a:	45b8      	cmp	r8, r7
 800cb0c:	ea43 0501 	orr.w	r5, r3, r1
 800cb10:	bf34      	ite	cc
 800cb12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb16:	2300      	movcs	r3, #0
 800cb18:	3015      	adds	r0, #21
 800cb1a:	fa02 f000 	lsl.w	r0, r2, r0
 800cb1e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb22:	4303      	orrs	r3, r0
 800cb24:	461c      	mov	r4, r3
 800cb26:	ec45 4b10 	vmov	d0, r4, r5
 800cb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2e:	45b8      	cmp	r8, r7
 800cb30:	bf3a      	itte	cc
 800cb32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb36:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb3a:	2300      	movcs	r3, #0
 800cb3c:	380b      	subs	r0, #11
 800cb3e:	d012      	beq.n	800cb66 <__b2d+0x8a>
 800cb40:	f1c0 0120 	rsb	r1, r0, #32
 800cb44:	fa23 f401 	lsr.w	r4, r3, r1
 800cb48:	4082      	lsls	r2, r0
 800cb4a:	4322      	orrs	r2, r4
 800cb4c:	4547      	cmp	r7, r8
 800cb4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb52:	bf8c      	ite	hi
 800cb54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb58:	2200      	movls	r2, #0
 800cb5a:	4083      	lsls	r3, r0
 800cb5c:	40ca      	lsrs	r2, r1
 800cb5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb62:	4313      	orrs	r3, r2
 800cb64:	e7de      	b.n	800cb24 <__b2d+0x48>
 800cb66:	ea42 0501 	orr.w	r5, r2, r1
 800cb6a:	e7db      	b.n	800cb24 <__b2d+0x48>
 800cb6c:	3ff00000 	.word	0x3ff00000

0800cb70 <__d2b>:
 800cb70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb74:	460f      	mov	r7, r1
 800cb76:	2101      	movs	r1, #1
 800cb78:	ec59 8b10 	vmov	r8, r9, d0
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	f7ff fc13 	bl	800c3a8 <_Balloc>
 800cb82:	4604      	mov	r4, r0
 800cb84:	b930      	cbnz	r0, 800cb94 <__d2b+0x24>
 800cb86:	4602      	mov	r2, r0
 800cb88:	4b23      	ldr	r3, [pc, #140]	@ (800cc18 <__d2b+0xa8>)
 800cb8a:	4824      	ldr	r0, [pc, #144]	@ (800cc1c <__d2b+0xac>)
 800cb8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb90:	f7fd fcbc 	bl	800a50c <__assert_func>
 800cb94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb9c:	b10d      	cbz	r5, 800cba2 <__d2b+0x32>
 800cb9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	f1b8 0300 	subs.w	r3, r8, #0
 800cba8:	d023      	beq.n	800cbf2 <__d2b+0x82>
 800cbaa:	4668      	mov	r0, sp
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	f7ff fd0c 	bl	800c5ca <__lo0bits>
 800cbb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbb6:	b1d0      	cbz	r0, 800cbee <__d2b+0x7e>
 800cbb8:	f1c0 0320 	rsb	r3, r0, #32
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	430b      	orrs	r3, r1
 800cbc2:	40c2      	lsrs	r2, r0
 800cbc4:	6163      	str	r3, [r4, #20]
 800cbc6:	9201      	str	r2, [sp, #4]
 800cbc8:	9b01      	ldr	r3, [sp, #4]
 800cbca:	61a3      	str	r3, [r4, #24]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bf0c      	ite	eq
 800cbd0:	2201      	moveq	r2, #1
 800cbd2:	2202      	movne	r2, #2
 800cbd4:	6122      	str	r2, [r4, #16]
 800cbd6:	b1a5      	cbz	r5, 800cc02 <__d2b+0x92>
 800cbd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbdc:	4405      	add	r5, r0
 800cbde:	603d      	str	r5, [r7, #0]
 800cbe0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbe4:	6030      	str	r0, [r6, #0]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	b003      	add	sp, #12
 800cbea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbee:	6161      	str	r1, [r4, #20]
 800cbf0:	e7ea      	b.n	800cbc8 <__d2b+0x58>
 800cbf2:	a801      	add	r0, sp, #4
 800cbf4:	f7ff fce9 	bl	800c5ca <__lo0bits>
 800cbf8:	9b01      	ldr	r3, [sp, #4]
 800cbfa:	6163      	str	r3, [r4, #20]
 800cbfc:	3020      	adds	r0, #32
 800cbfe:	2201      	movs	r2, #1
 800cc00:	e7e8      	b.n	800cbd4 <__d2b+0x64>
 800cc02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc0a:	6038      	str	r0, [r7, #0]
 800cc0c:	6918      	ldr	r0, [r3, #16]
 800cc0e:	f7ff fcbd 	bl	800c58c <__hi0bits>
 800cc12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc16:	e7e5      	b.n	800cbe4 <__d2b+0x74>
 800cc18:	0800ee68 	.word	0x0800ee68
 800cc1c:	0800ee79 	.word	0x0800ee79

0800cc20 <__ratio>:
 800cc20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	4688      	mov	r8, r1
 800cc26:	4669      	mov	r1, sp
 800cc28:	4681      	mov	r9, r0
 800cc2a:	f7ff ff57 	bl	800cadc <__b2d>
 800cc2e:	a901      	add	r1, sp, #4
 800cc30:	4640      	mov	r0, r8
 800cc32:	ec55 4b10 	vmov	r4, r5, d0
 800cc36:	f7ff ff51 	bl	800cadc <__b2d>
 800cc3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cc3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cc42:	1ad2      	subs	r2, r2, r3
 800cc44:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cc48:	1a5b      	subs	r3, r3, r1
 800cc4a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800cc4e:	ec57 6b10 	vmov	r6, r7, d0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	bfd6      	itet	le
 800cc56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc5a:	462a      	movgt	r2, r5
 800cc5c:	463a      	movle	r2, r7
 800cc5e:	46ab      	mov	fp, r5
 800cc60:	46a2      	mov	sl, r4
 800cc62:	bfce      	itee	gt
 800cc64:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cc68:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800cc6c:	ee00 3a90 	vmovle	s1, r3
 800cc70:	ec4b ab17 	vmov	d7, sl, fp
 800cc74:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800cc78:	b003      	add	sp, #12
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc7e <__copybits>:
 800cc7e:	3901      	subs	r1, #1
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	1149      	asrs	r1, r1, #5
 800cc84:	6914      	ldr	r4, [r2, #16]
 800cc86:	3101      	adds	r1, #1
 800cc88:	f102 0314 	add.w	r3, r2, #20
 800cc8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc94:	1f05      	subs	r5, r0, #4
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	d30c      	bcc.n	800ccb4 <__copybits+0x36>
 800cc9a:	1aa3      	subs	r3, r4, r2
 800cc9c:	3b11      	subs	r3, #17
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	3211      	adds	r2, #17
 800cca4:	42a2      	cmp	r2, r4
 800cca6:	bf88      	it	hi
 800cca8:	2300      	movhi	r3, #0
 800ccaa:	4418      	add	r0, r3
 800ccac:	2300      	movs	r3, #0
 800ccae:	4288      	cmp	r0, r1
 800ccb0:	d305      	bcc.n	800ccbe <__copybits+0x40>
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccbc:	e7eb      	b.n	800cc96 <__copybits+0x18>
 800ccbe:	f840 3b04 	str.w	r3, [r0], #4
 800ccc2:	e7f4      	b.n	800ccae <__copybits+0x30>

0800ccc4 <__any_on>:
 800ccc4:	f100 0214 	add.w	r2, r0, #20
 800ccc8:	6900      	ldr	r0, [r0, #16]
 800ccca:	114b      	asrs	r3, r1, #5
 800cccc:	4298      	cmp	r0, r3
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	db11      	blt.n	800ccf6 <__any_on+0x32>
 800ccd2:	dd0a      	ble.n	800ccea <__any_on+0x26>
 800ccd4:	f011 011f 	ands.w	r1, r1, #31
 800ccd8:	d007      	beq.n	800ccea <__any_on+0x26>
 800ccda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccde:	fa24 f001 	lsr.w	r0, r4, r1
 800cce2:	fa00 f101 	lsl.w	r1, r0, r1
 800cce6:	428c      	cmp	r4, r1
 800cce8:	d10b      	bne.n	800cd02 <__any_on+0x3e>
 800ccea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d803      	bhi.n	800ccfa <__any_on+0x36>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	e7f7      	b.n	800ccea <__any_on+0x26>
 800ccfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d0f5      	beq.n	800ccee <__any_on+0x2a>
 800cd02:	2001      	movs	r0, #1
 800cd04:	e7f6      	b.n	800ccf4 <__any_on+0x30>

0800cd06 <sulp>:
 800cd06:	b570      	push	{r4, r5, r6, lr}
 800cd08:	4604      	mov	r4, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	ec45 4b10 	vmov	d0, r4, r5
 800cd12:	f7ff febd 	bl	800ca90 <__ulp>
 800cd16:	b17e      	cbz	r6, 800cd38 <sulp+0x32>
 800cd18:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd1c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	dd09      	ble.n	800cd38 <sulp+0x32>
 800cd24:	051b      	lsls	r3, r3, #20
 800cd26:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cd30:	ec41 0b17 	vmov	d7, r0, r1
 800cd34:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	0000      	movs	r0, r0
 800cd3c:	0000      	movs	r0, r0
	...

0800cd40 <_strtod_l>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	ed2d 8b0a 	vpush	{d8-d12}
 800cd48:	b097      	sub	sp, #92	@ 0x5c
 800cd4a:	4688      	mov	r8, r1
 800cd4c:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd4e:	2200      	movs	r2, #0
 800cd50:	9212      	str	r2, [sp, #72]	@ 0x48
 800cd52:	9005      	str	r0, [sp, #20]
 800cd54:	f04f 0a00 	mov.w	sl, #0
 800cd58:	f04f 0b00 	mov.w	fp, #0
 800cd5c:	460a      	mov	r2, r1
 800cd5e:	9211      	str	r2, [sp, #68]	@ 0x44
 800cd60:	7811      	ldrb	r1, [r2, #0]
 800cd62:	292b      	cmp	r1, #43	@ 0x2b
 800cd64:	d04c      	beq.n	800ce00 <_strtod_l+0xc0>
 800cd66:	d839      	bhi.n	800cddc <_strtod_l+0x9c>
 800cd68:	290d      	cmp	r1, #13
 800cd6a:	d833      	bhi.n	800cdd4 <_strtod_l+0x94>
 800cd6c:	2908      	cmp	r1, #8
 800cd6e:	d833      	bhi.n	800cdd8 <_strtod_l+0x98>
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d03c      	beq.n	800cdee <_strtod_l+0xae>
 800cd74:	2200      	movs	r2, #0
 800cd76:	9208      	str	r2, [sp, #32]
 800cd78:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800cd7a:	782a      	ldrb	r2, [r5, #0]
 800cd7c:	2a30      	cmp	r2, #48	@ 0x30
 800cd7e:	f040 80b5 	bne.w	800ceec <_strtod_l+0x1ac>
 800cd82:	786a      	ldrb	r2, [r5, #1]
 800cd84:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd88:	2a58      	cmp	r2, #88	@ 0x58
 800cd8a:	d170      	bne.n	800ce6e <_strtod_l+0x12e>
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	9b08      	ldr	r3, [sp, #32]
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	ab12      	add	r3, sp, #72	@ 0x48
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	4a8b      	ldr	r2, [pc, #556]	@ (800cfc4 <_strtod_l+0x284>)
 800cd98:	9805      	ldr	r0, [sp, #20]
 800cd9a:	ab13      	add	r3, sp, #76	@ 0x4c
 800cd9c:	a911      	add	r1, sp, #68	@ 0x44
 800cd9e:	f001 faa3 	bl	800e2e8 <__gethex>
 800cda2:	f010 060f 	ands.w	r6, r0, #15
 800cda6:	4604      	mov	r4, r0
 800cda8:	d005      	beq.n	800cdb6 <_strtod_l+0x76>
 800cdaa:	2e06      	cmp	r6, #6
 800cdac:	d12a      	bne.n	800ce04 <_strtod_l+0xc4>
 800cdae:	3501      	adds	r5, #1
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	9511      	str	r5, [sp, #68]	@ 0x44
 800cdb4:	9308      	str	r3, [sp, #32]
 800cdb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f040 852f 	bne.w	800d81c <_strtod_l+0xadc>
 800cdbe:	9b08      	ldr	r3, [sp, #32]
 800cdc0:	ec4b ab10 	vmov	d0, sl, fp
 800cdc4:	b1cb      	cbz	r3, 800cdfa <_strtod_l+0xba>
 800cdc6:	eeb1 0b40 	vneg.f64	d0, d0
 800cdca:	b017      	add	sp, #92	@ 0x5c
 800cdcc:	ecbd 8b0a 	vpop	{d8-d12}
 800cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd4:	2920      	cmp	r1, #32
 800cdd6:	d1cd      	bne.n	800cd74 <_strtod_l+0x34>
 800cdd8:	3201      	adds	r2, #1
 800cdda:	e7c0      	b.n	800cd5e <_strtod_l+0x1e>
 800cddc:	292d      	cmp	r1, #45	@ 0x2d
 800cdde:	d1c9      	bne.n	800cd74 <_strtod_l+0x34>
 800cde0:	2101      	movs	r1, #1
 800cde2:	9108      	str	r1, [sp, #32]
 800cde4:	1c51      	adds	r1, r2, #1
 800cde6:	9111      	str	r1, [sp, #68]	@ 0x44
 800cde8:	7852      	ldrb	r2, [r2, #1]
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	d1c4      	bne.n	800cd78 <_strtod_l+0x38>
 800cdee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdf0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 850f 	bne.w	800d818 <_strtod_l+0xad8>
 800cdfa:	ec4b ab10 	vmov	d0, sl, fp
 800cdfe:	e7e4      	b.n	800cdca <_strtod_l+0x8a>
 800ce00:	2100      	movs	r1, #0
 800ce02:	e7ee      	b.n	800cde2 <_strtod_l+0xa2>
 800ce04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ce06:	b13a      	cbz	r2, 800ce18 <_strtod_l+0xd8>
 800ce08:	2135      	movs	r1, #53	@ 0x35
 800ce0a:	a814      	add	r0, sp, #80	@ 0x50
 800ce0c:	f7ff ff37 	bl	800cc7e <__copybits>
 800ce10:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ce12:	9805      	ldr	r0, [sp, #20]
 800ce14:	f7ff fb08 	bl	800c428 <_Bfree>
 800ce18:	1e73      	subs	r3, r6, #1
 800ce1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d806      	bhi.n	800ce2e <_strtod_l+0xee>
 800ce20:	e8df f003 	tbb	[pc, r3]
 800ce24:	201d0314 	.word	0x201d0314
 800ce28:	14          	.byte	0x14
 800ce29:	00          	.byte	0x00
 800ce2a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ce2e:	05e3      	lsls	r3, r4, #23
 800ce30:	bf48      	it	mi
 800ce32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ce36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce3a:	0d1b      	lsrs	r3, r3, #20
 800ce3c:	051b      	lsls	r3, r3, #20
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1b9      	bne.n	800cdb6 <_strtod_l+0x76>
 800ce42:	f7fe fc3f 	bl	800b6c4 <__errno>
 800ce46:	2322      	movs	r3, #34	@ 0x22
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	e7b4      	b.n	800cdb6 <_strtod_l+0x76>
 800ce4c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ce50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ce54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ce58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce5c:	e7e7      	b.n	800ce2e <_strtod_l+0xee>
 800ce5e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800cfcc <_strtod_l+0x28c>
 800ce62:	e7e4      	b.n	800ce2e <_strtod_l+0xee>
 800ce64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ce68:	f04f 3aff 	mov.w	sl, #4294967295
 800ce6c:	e7df      	b.n	800ce2e <_strtod_l+0xee>
 800ce6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	9211      	str	r2, [sp, #68]	@ 0x44
 800ce74:	785b      	ldrb	r3, [r3, #1]
 800ce76:	2b30      	cmp	r3, #48	@ 0x30
 800ce78:	d0f9      	beq.n	800ce6e <_strtod_l+0x12e>
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d09b      	beq.n	800cdb6 <_strtod_l+0x76>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	2600      	movs	r6, #0
 800ce82:	9307      	str	r3, [sp, #28]
 800ce84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce88:	46b1      	mov	r9, r6
 800ce8a:	4635      	mov	r5, r6
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ce90:	7804      	ldrb	r4, [r0, #0]
 800ce92:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ce96:	b2d9      	uxtb	r1, r3
 800ce98:	2909      	cmp	r1, #9
 800ce9a:	d929      	bls.n	800cef0 <_strtod_l+0x1b0>
 800ce9c:	494a      	ldr	r1, [pc, #296]	@ (800cfc8 <_strtod_l+0x288>)
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f7fe fb91 	bl	800b5c6 <strncmp>
 800cea4:	b378      	cbz	r0, 800cf06 <_strtod_l+0x1c6>
 800cea6:	2000      	movs	r0, #0
 800cea8:	4622      	mov	r2, r4
 800ceaa:	462b      	mov	r3, r5
 800ceac:	4607      	mov	r7, r0
 800ceae:	9006      	str	r0, [sp, #24]
 800ceb0:	2a65      	cmp	r2, #101	@ 0x65
 800ceb2:	d001      	beq.n	800ceb8 <_strtod_l+0x178>
 800ceb4:	2a45      	cmp	r2, #69	@ 0x45
 800ceb6:	d117      	bne.n	800cee8 <_strtod_l+0x1a8>
 800ceb8:	b91b      	cbnz	r3, 800cec2 <_strtod_l+0x182>
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	4303      	orrs	r3, r0
 800cebe:	d096      	beq.n	800cdee <_strtod_l+0xae>
 800cec0:	2300      	movs	r3, #0
 800cec2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800cec6:	f108 0201 	add.w	r2, r8, #1
 800ceca:	9211      	str	r2, [sp, #68]	@ 0x44
 800cecc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ced0:	2a2b      	cmp	r2, #43	@ 0x2b
 800ced2:	d06b      	beq.n	800cfac <_strtod_l+0x26c>
 800ced4:	2a2d      	cmp	r2, #45	@ 0x2d
 800ced6:	d071      	beq.n	800cfbc <_strtod_l+0x27c>
 800ced8:	f04f 0e00 	mov.w	lr, #0
 800cedc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cee0:	2c09      	cmp	r4, #9
 800cee2:	d979      	bls.n	800cfd8 <_strtod_l+0x298>
 800cee4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cee8:	2400      	movs	r4, #0
 800ceea:	e094      	b.n	800d016 <_strtod_l+0x2d6>
 800ceec:	2300      	movs	r3, #0
 800ceee:	e7c7      	b.n	800ce80 <_strtod_l+0x140>
 800cef0:	2d08      	cmp	r5, #8
 800cef2:	f100 0001 	add.w	r0, r0, #1
 800cef6:	bfd4      	ite	le
 800cef8:	fb02 3909 	mlale	r9, r2, r9, r3
 800cefc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800cf00:	3501      	adds	r5, #1
 800cf02:	9011      	str	r0, [sp, #68]	@ 0x44
 800cf04:	e7c3      	b.n	800ce8e <_strtod_l+0x14e>
 800cf06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf0c:	785a      	ldrb	r2, [r3, #1]
 800cf0e:	b375      	cbz	r5, 800cf6e <_strtod_l+0x22e>
 800cf10:	4607      	mov	r7, r0
 800cf12:	462b      	mov	r3, r5
 800cf14:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cf18:	2909      	cmp	r1, #9
 800cf1a:	d913      	bls.n	800cf44 <_strtod_l+0x204>
 800cf1c:	2101      	movs	r1, #1
 800cf1e:	9106      	str	r1, [sp, #24]
 800cf20:	e7c6      	b.n	800ceb0 <_strtod_l+0x170>
 800cf22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf28:	785a      	ldrb	r2, [r3, #1]
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	2a30      	cmp	r2, #48	@ 0x30
 800cf2e:	d0f8      	beq.n	800cf22 <_strtod_l+0x1e2>
 800cf30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	f200 8476 	bhi.w	800d826 <_strtod_l+0xae6>
 800cf3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf3e:	4607      	mov	r7, r0
 800cf40:	2000      	movs	r0, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	3a30      	subs	r2, #48	@ 0x30
 800cf46:	f100 0101 	add.w	r1, r0, #1
 800cf4a:	d023      	beq.n	800cf94 <_strtod_l+0x254>
 800cf4c:	440f      	add	r7, r1
 800cf4e:	eb00 0c03 	add.w	ip, r0, r3
 800cf52:	4619      	mov	r1, r3
 800cf54:	240a      	movs	r4, #10
 800cf56:	4561      	cmp	r1, ip
 800cf58:	d10b      	bne.n	800cf72 <_strtod_l+0x232>
 800cf5a:	1c5c      	adds	r4, r3, #1
 800cf5c:	4403      	add	r3, r0
 800cf5e:	2b08      	cmp	r3, #8
 800cf60:	4404      	add	r4, r0
 800cf62:	dc11      	bgt.n	800cf88 <_strtod_l+0x248>
 800cf64:	230a      	movs	r3, #10
 800cf66:	fb03 2909 	mla	r9, r3, r9, r2
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	e013      	b.n	800cf96 <_strtod_l+0x256>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	e7dc      	b.n	800cf2c <_strtod_l+0x1ec>
 800cf72:	2908      	cmp	r1, #8
 800cf74:	f101 0101 	add.w	r1, r1, #1
 800cf78:	dc02      	bgt.n	800cf80 <_strtod_l+0x240>
 800cf7a:	fb04 f909 	mul.w	r9, r4, r9
 800cf7e:	e7ea      	b.n	800cf56 <_strtod_l+0x216>
 800cf80:	2910      	cmp	r1, #16
 800cf82:	bfd8      	it	le
 800cf84:	4366      	mulle	r6, r4
 800cf86:	e7e6      	b.n	800cf56 <_strtod_l+0x216>
 800cf88:	2b0f      	cmp	r3, #15
 800cf8a:	dcee      	bgt.n	800cf6a <_strtod_l+0x22a>
 800cf8c:	230a      	movs	r3, #10
 800cf8e:	fb03 2606 	mla	r6, r3, r6, r2
 800cf92:	e7ea      	b.n	800cf6a <_strtod_l+0x22a>
 800cf94:	461c      	mov	r4, r3
 800cf96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf98:	1c5a      	adds	r2, r3, #1
 800cf9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf9c:	785a      	ldrb	r2, [r3, #1]
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	e7b7      	b.n	800cf14 <_strtod_l+0x1d4>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	2700      	movs	r7, #0
 800cfa8:	9306      	str	r3, [sp, #24]
 800cfaa:	e786      	b.n	800ceba <_strtod_l+0x17a>
 800cfac:	f04f 0e00 	mov.w	lr, #0
 800cfb0:	f108 0202 	add.w	r2, r8, #2
 800cfb4:	9211      	str	r2, [sp, #68]	@ 0x44
 800cfb6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cfba:	e78f      	b.n	800cedc <_strtod_l+0x19c>
 800cfbc:	f04f 0e01 	mov.w	lr, #1
 800cfc0:	e7f6      	b.n	800cfb0 <_strtod_l+0x270>
 800cfc2:	bf00      	nop
 800cfc4:	0800efe8 	.word	0x0800efe8
 800cfc8:	0800efd0 	.word	0x0800efd0
 800cfcc:	7ff00000 	.word	0x7ff00000
 800cfd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfd2:	1c54      	adds	r4, r2, #1
 800cfd4:	9411      	str	r4, [sp, #68]	@ 0x44
 800cfd6:	7852      	ldrb	r2, [r2, #1]
 800cfd8:	2a30      	cmp	r2, #48	@ 0x30
 800cfda:	d0f9      	beq.n	800cfd0 <_strtod_l+0x290>
 800cfdc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800cfe0:	2c08      	cmp	r4, #8
 800cfe2:	d881      	bhi.n	800cee8 <_strtod_l+0x1a8>
 800cfe4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800cfe8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfea:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfee:	1c51      	adds	r1, r2, #1
 800cff0:	9111      	str	r1, [sp, #68]	@ 0x44
 800cff2:	7852      	ldrb	r2, [r2, #1]
 800cff4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cff8:	2c09      	cmp	r4, #9
 800cffa:	d938      	bls.n	800d06e <_strtod_l+0x32e>
 800cffc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cffe:	1b0c      	subs	r4, r1, r4
 800d000:	2c08      	cmp	r4, #8
 800d002:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d006:	dc02      	bgt.n	800d00e <_strtod_l+0x2ce>
 800d008:	4564      	cmp	r4, ip
 800d00a:	bfa8      	it	ge
 800d00c:	4664      	movge	r4, ip
 800d00e:	f1be 0f00 	cmp.w	lr, #0
 800d012:	d000      	beq.n	800d016 <_strtod_l+0x2d6>
 800d014:	4264      	negs	r4, r4
 800d016:	2b00      	cmp	r3, #0
 800d018:	d14e      	bne.n	800d0b8 <_strtod_l+0x378>
 800d01a:	9b07      	ldr	r3, [sp, #28]
 800d01c:	4318      	orrs	r0, r3
 800d01e:	f47f aeca 	bne.w	800cdb6 <_strtod_l+0x76>
 800d022:	9b06      	ldr	r3, [sp, #24]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f47f aee2 	bne.w	800cdee <_strtod_l+0xae>
 800d02a:	2a69      	cmp	r2, #105	@ 0x69
 800d02c:	d027      	beq.n	800d07e <_strtod_l+0x33e>
 800d02e:	dc24      	bgt.n	800d07a <_strtod_l+0x33a>
 800d030:	2a49      	cmp	r2, #73	@ 0x49
 800d032:	d024      	beq.n	800d07e <_strtod_l+0x33e>
 800d034:	2a4e      	cmp	r2, #78	@ 0x4e
 800d036:	f47f aeda 	bne.w	800cdee <_strtod_l+0xae>
 800d03a:	4997      	ldr	r1, [pc, #604]	@ (800d298 <_strtod_l+0x558>)
 800d03c:	a811      	add	r0, sp, #68	@ 0x44
 800d03e:	f001 fb75 	bl	800e72c <__match>
 800d042:	2800      	cmp	r0, #0
 800d044:	f43f aed3 	beq.w	800cdee <_strtod_l+0xae>
 800d048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b28      	cmp	r3, #40	@ 0x28
 800d04e:	d12d      	bne.n	800d0ac <_strtod_l+0x36c>
 800d050:	4992      	ldr	r1, [pc, #584]	@ (800d29c <_strtod_l+0x55c>)
 800d052:	aa14      	add	r2, sp, #80	@ 0x50
 800d054:	a811      	add	r0, sp, #68	@ 0x44
 800d056:	f001 fb7d 	bl	800e754 <__hexnan>
 800d05a:	2805      	cmp	r0, #5
 800d05c:	d126      	bne.n	800d0ac <_strtod_l+0x36c>
 800d05e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d060:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d064:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d068:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d06c:	e6a3      	b.n	800cdb6 <_strtod_l+0x76>
 800d06e:	240a      	movs	r4, #10
 800d070:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d074:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d078:	e7b8      	b.n	800cfec <_strtod_l+0x2ac>
 800d07a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d07c:	e7db      	b.n	800d036 <_strtod_l+0x2f6>
 800d07e:	4988      	ldr	r1, [pc, #544]	@ (800d2a0 <_strtod_l+0x560>)
 800d080:	a811      	add	r0, sp, #68	@ 0x44
 800d082:	f001 fb53 	bl	800e72c <__match>
 800d086:	2800      	cmp	r0, #0
 800d088:	f43f aeb1 	beq.w	800cdee <_strtod_l+0xae>
 800d08c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d08e:	4985      	ldr	r1, [pc, #532]	@ (800d2a4 <_strtod_l+0x564>)
 800d090:	3b01      	subs	r3, #1
 800d092:	a811      	add	r0, sp, #68	@ 0x44
 800d094:	9311      	str	r3, [sp, #68]	@ 0x44
 800d096:	f001 fb49 	bl	800e72c <__match>
 800d09a:	b910      	cbnz	r0, 800d0a2 <_strtod_l+0x362>
 800d09c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d09e:	3301      	adds	r3, #1
 800d0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d2b8 <_strtod_l+0x578>
 800d0a6:	f04f 0a00 	mov.w	sl, #0
 800d0aa:	e684      	b.n	800cdb6 <_strtod_l+0x76>
 800d0ac:	487e      	ldr	r0, [pc, #504]	@ (800d2a8 <_strtod_l+0x568>)
 800d0ae:	f001 f897 	bl	800e1e0 <nan>
 800d0b2:	ec5b ab10 	vmov	sl, fp, d0
 800d0b6:	e67e      	b.n	800cdb6 <_strtod_l+0x76>
 800d0b8:	ee07 9a90 	vmov	s15, r9
 800d0bc:	1be2      	subs	r2, r4, r7
 800d0be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	bf08      	it	eq
 800d0c6:	461d      	moveq	r5, r3
 800d0c8:	2b10      	cmp	r3, #16
 800d0ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	bfa8      	it	ge
 800d0d0:	2210      	movge	r2, #16
 800d0d2:	2b09      	cmp	r3, #9
 800d0d4:	ec5b ab17 	vmov	sl, fp, d7
 800d0d8:	dc15      	bgt.n	800d106 <_strtod_l+0x3c6>
 800d0da:	1be1      	subs	r1, r4, r7
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	f43f ae6a 	beq.w	800cdb6 <_strtod_l+0x76>
 800d0e2:	eba4 0107 	sub.w	r1, r4, r7
 800d0e6:	dd72      	ble.n	800d1ce <_strtod_l+0x48e>
 800d0e8:	2916      	cmp	r1, #22
 800d0ea:	dc59      	bgt.n	800d1a0 <_strtod_l+0x460>
 800d0ec:	4b6f      	ldr	r3, [pc, #444]	@ (800d2ac <_strtod_l+0x56c>)
 800d0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0f4:	ed93 7b00 	vldr	d7, [r3]
 800d0f8:	ec4b ab16 	vmov	d6, sl, fp
 800d0fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d100:	ec5b ab17 	vmov	sl, fp, d7
 800d104:	e657      	b.n	800cdb6 <_strtod_l+0x76>
 800d106:	4969      	ldr	r1, [pc, #420]	@ (800d2ac <_strtod_l+0x56c>)
 800d108:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d10c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d110:	ee06 6a90 	vmov	s13, r6
 800d114:	2b0f      	cmp	r3, #15
 800d116:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d11a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d11e:	ec5b ab16 	vmov	sl, fp, d6
 800d122:	ddda      	ble.n	800d0da <_strtod_l+0x39a>
 800d124:	1a9a      	subs	r2, r3, r2
 800d126:	1be1      	subs	r1, r4, r7
 800d128:	440a      	add	r2, r1
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	f340 8094 	ble.w	800d258 <_strtod_l+0x518>
 800d130:	f012 000f 	ands.w	r0, r2, #15
 800d134:	d00a      	beq.n	800d14c <_strtod_l+0x40c>
 800d136:	495d      	ldr	r1, [pc, #372]	@ (800d2ac <_strtod_l+0x56c>)
 800d138:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d13c:	ed91 7b00 	vldr	d7, [r1]
 800d140:	ec4b ab16 	vmov	d6, sl, fp
 800d144:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d148:	ec5b ab17 	vmov	sl, fp, d7
 800d14c:	f032 020f 	bics.w	r2, r2, #15
 800d150:	d073      	beq.n	800d23a <_strtod_l+0x4fa>
 800d152:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d156:	dd47      	ble.n	800d1e8 <_strtod_l+0x4a8>
 800d158:	2400      	movs	r4, #0
 800d15a:	4625      	mov	r5, r4
 800d15c:	9407      	str	r4, [sp, #28]
 800d15e:	4626      	mov	r6, r4
 800d160:	9a05      	ldr	r2, [sp, #20]
 800d162:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d2b8 <_strtod_l+0x578>
 800d166:	2322      	movs	r3, #34	@ 0x22
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	f04f 0a00 	mov.w	sl, #0
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f43f ae20 	beq.w	800cdb6 <_strtod_l+0x76>
 800d176:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d178:	9805      	ldr	r0, [sp, #20]
 800d17a:	f7ff f955 	bl	800c428 <_Bfree>
 800d17e:	9805      	ldr	r0, [sp, #20]
 800d180:	4631      	mov	r1, r6
 800d182:	f7ff f951 	bl	800c428 <_Bfree>
 800d186:	9805      	ldr	r0, [sp, #20]
 800d188:	4629      	mov	r1, r5
 800d18a:	f7ff f94d 	bl	800c428 <_Bfree>
 800d18e:	9907      	ldr	r1, [sp, #28]
 800d190:	9805      	ldr	r0, [sp, #20]
 800d192:	f7ff f949 	bl	800c428 <_Bfree>
 800d196:	9805      	ldr	r0, [sp, #20]
 800d198:	4621      	mov	r1, r4
 800d19a:	f7ff f945 	bl	800c428 <_Bfree>
 800d19e:	e60a      	b.n	800cdb6 <_strtod_l+0x76>
 800d1a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d1a4:	1be0      	subs	r0, r4, r7
 800d1a6:	4281      	cmp	r1, r0
 800d1a8:	dbbc      	blt.n	800d124 <_strtod_l+0x3e4>
 800d1aa:	4a40      	ldr	r2, [pc, #256]	@ (800d2ac <_strtod_l+0x56c>)
 800d1ac:	f1c3 030f 	rsb	r3, r3, #15
 800d1b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d1b4:	ed91 7b00 	vldr	d7, [r1]
 800d1b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1ba:	ec4b ab16 	vmov	d6, sl, fp
 800d1be:	1acb      	subs	r3, r1, r3
 800d1c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d1c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1c8:	ed92 6b00 	vldr	d6, [r2]
 800d1cc:	e796      	b.n	800d0fc <_strtod_l+0x3bc>
 800d1ce:	3116      	adds	r1, #22
 800d1d0:	dba8      	blt.n	800d124 <_strtod_l+0x3e4>
 800d1d2:	4b36      	ldr	r3, [pc, #216]	@ (800d2ac <_strtod_l+0x56c>)
 800d1d4:	1b3c      	subs	r4, r7, r4
 800d1d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d1da:	ed94 7b00 	vldr	d7, [r4]
 800d1de:	ec4b ab16 	vmov	d6, sl, fp
 800d1e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1e6:	e78b      	b.n	800d100 <_strtod_l+0x3c0>
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	ec4b ab17 	vmov	d7, sl, fp
 800d1ee:	4e30      	ldr	r6, [pc, #192]	@ (800d2b0 <_strtod_l+0x570>)
 800d1f0:	1112      	asrs	r2, r2, #4
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	2a01      	cmp	r2, #1
 800d1f6:	dc23      	bgt.n	800d240 <_strtod_l+0x500>
 800d1f8:	b108      	cbz	r0, 800d1fe <_strtod_l+0x4be>
 800d1fa:	ec5b ab17 	vmov	sl, fp, d7
 800d1fe:	4a2c      	ldr	r2, [pc, #176]	@ (800d2b0 <_strtod_l+0x570>)
 800d200:	482c      	ldr	r0, [pc, #176]	@ (800d2b4 <_strtod_l+0x574>)
 800d202:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d206:	ed92 7b00 	vldr	d7, [r2]
 800d20a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d20e:	ec4b ab16 	vmov	d6, sl, fp
 800d212:	4a29      	ldr	r2, [pc, #164]	@ (800d2b8 <_strtod_l+0x578>)
 800d214:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d218:	ee17 1a90 	vmov	r1, s15
 800d21c:	400a      	ands	r2, r1
 800d21e:	4282      	cmp	r2, r0
 800d220:	ec5b ab17 	vmov	sl, fp, d7
 800d224:	d898      	bhi.n	800d158 <_strtod_l+0x418>
 800d226:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d22a:	4282      	cmp	r2, r0
 800d22c:	bf86      	itte	hi
 800d22e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d2bc <_strtod_l+0x57c>
 800d232:	f04f 3aff 	movhi.w	sl, #4294967295
 800d236:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d23a:	2200      	movs	r2, #0
 800d23c:	9206      	str	r2, [sp, #24]
 800d23e:	e076      	b.n	800d32e <_strtod_l+0x5ee>
 800d240:	f012 0f01 	tst.w	r2, #1
 800d244:	d004      	beq.n	800d250 <_strtod_l+0x510>
 800d246:	ed96 6b00 	vldr	d6, [r6]
 800d24a:	2001      	movs	r0, #1
 800d24c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d250:	3101      	adds	r1, #1
 800d252:	1052      	asrs	r2, r2, #1
 800d254:	3608      	adds	r6, #8
 800d256:	e7cd      	b.n	800d1f4 <_strtod_l+0x4b4>
 800d258:	d0ef      	beq.n	800d23a <_strtod_l+0x4fa>
 800d25a:	4252      	negs	r2, r2
 800d25c:	f012 000f 	ands.w	r0, r2, #15
 800d260:	d00a      	beq.n	800d278 <_strtod_l+0x538>
 800d262:	4912      	ldr	r1, [pc, #72]	@ (800d2ac <_strtod_l+0x56c>)
 800d264:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d268:	ed91 7b00 	vldr	d7, [r1]
 800d26c:	ec4b ab16 	vmov	d6, sl, fp
 800d270:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d274:	ec5b ab17 	vmov	sl, fp, d7
 800d278:	1112      	asrs	r2, r2, #4
 800d27a:	d0de      	beq.n	800d23a <_strtod_l+0x4fa>
 800d27c:	2a1f      	cmp	r2, #31
 800d27e:	dd1f      	ble.n	800d2c0 <_strtod_l+0x580>
 800d280:	2400      	movs	r4, #0
 800d282:	4625      	mov	r5, r4
 800d284:	9407      	str	r4, [sp, #28]
 800d286:	4626      	mov	r6, r4
 800d288:	9a05      	ldr	r2, [sp, #20]
 800d28a:	2322      	movs	r3, #34	@ 0x22
 800d28c:	f04f 0a00 	mov.w	sl, #0
 800d290:	f04f 0b00 	mov.w	fp, #0
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	e76a      	b.n	800d16e <_strtod_l+0x42e>
 800d298:	0800edc0 	.word	0x0800edc0
 800d29c:	0800efd4 	.word	0x0800efd4
 800d2a0:	0800edb8 	.word	0x0800edb8
 800d2a4:	0800edef 	.word	0x0800edef
 800d2a8:	0800edb2 	.word	0x0800edb2
 800d2ac:	0800ef08 	.word	0x0800ef08
 800d2b0:	0800eee0 	.word	0x0800eee0
 800d2b4:	7ca00000 	.word	0x7ca00000
 800d2b8:	7ff00000 	.word	0x7ff00000
 800d2bc:	7fefffff 	.word	0x7fefffff
 800d2c0:	f012 0110 	ands.w	r1, r2, #16
 800d2c4:	bf18      	it	ne
 800d2c6:	216a      	movne	r1, #106	@ 0x6a
 800d2c8:	9106      	str	r1, [sp, #24]
 800d2ca:	ec4b ab17 	vmov	d7, sl, fp
 800d2ce:	49b0      	ldr	r1, [pc, #704]	@ (800d590 <_strtod_l+0x850>)
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	07d6      	lsls	r6, r2, #31
 800d2d4:	d504      	bpl.n	800d2e0 <_strtod_l+0x5a0>
 800d2d6:	ed91 6b00 	vldr	d6, [r1]
 800d2da:	2001      	movs	r0, #1
 800d2dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2e0:	1052      	asrs	r2, r2, #1
 800d2e2:	f101 0108 	add.w	r1, r1, #8
 800d2e6:	d1f4      	bne.n	800d2d2 <_strtod_l+0x592>
 800d2e8:	b108      	cbz	r0, 800d2ee <_strtod_l+0x5ae>
 800d2ea:	ec5b ab17 	vmov	sl, fp, d7
 800d2ee:	9a06      	ldr	r2, [sp, #24]
 800d2f0:	b1b2      	cbz	r2, 800d320 <_strtod_l+0x5e0>
 800d2f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d2f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	4658      	mov	r0, fp
 800d2fe:	dd0f      	ble.n	800d320 <_strtod_l+0x5e0>
 800d300:	2a1f      	cmp	r2, #31
 800d302:	dd55      	ble.n	800d3b0 <_strtod_l+0x670>
 800d304:	2a34      	cmp	r2, #52	@ 0x34
 800d306:	bfde      	ittt	le
 800d308:	f04f 32ff 	movle.w	r2, #4294967295
 800d30c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d310:	408a      	lslle	r2, r1
 800d312:	f04f 0a00 	mov.w	sl, #0
 800d316:	bfcc      	ite	gt
 800d318:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d31c:	ea02 0b00 	andle.w	fp, r2, r0
 800d320:	ec4b ab17 	vmov	d7, sl, fp
 800d324:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32c:	d0a8      	beq.n	800d280 <_strtod_l+0x540>
 800d32e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d330:	9805      	ldr	r0, [sp, #20]
 800d332:	f8cd 9000 	str.w	r9, [sp]
 800d336:	462a      	mov	r2, r5
 800d338:	f7ff f8de 	bl	800c4f8 <__s2b>
 800d33c:	9007      	str	r0, [sp, #28]
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f af0a 	beq.w	800d158 <_strtod_l+0x418>
 800d344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d346:	1b3f      	subs	r7, r7, r4
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfb4      	ite	lt
 800d34c:	463b      	movlt	r3, r7
 800d34e:	2300      	movge	r3, #0
 800d350:	930a      	str	r3, [sp, #40]	@ 0x28
 800d352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d354:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d580 <_strtod_l+0x840>
 800d358:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d35c:	2400      	movs	r4, #0
 800d35e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d360:	4625      	mov	r5, r4
 800d362:	9b07      	ldr	r3, [sp, #28]
 800d364:	9805      	ldr	r0, [sp, #20]
 800d366:	6859      	ldr	r1, [r3, #4]
 800d368:	f7ff f81e 	bl	800c3a8 <_Balloc>
 800d36c:	4606      	mov	r6, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	f43f aef6 	beq.w	800d160 <_strtod_l+0x420>
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	691a      	ldr	r2, [r3, #16]
 800d378:	ec4b ab19 	vmov	d9, sl, fp
 800d37c:	3202      	adds	r2, #2
 800d37e:	f103 010c 	add.w	r1, r3, #12
 800d382:	0092      	lsls	r2, r2, #2
 800d384:	300c      	adds	r0, #12
 800d386:	f7fe f9ca 	bl	800b71e <memcpy>
 800d38a:	eeb0 0b49 	vmov.f64	d0, d9
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	aa14      	add	r2, sp, #80	@ 0x50
 800d392:	a913      	add	r1, sp, #76	@ 0x4c
 800d394:	f7ff fbec 	bl	800cb70 <__d2b>
 800d398:	9012      	str	r0, [sp, #72]	@ 0x48
 800d39a:	2800      	cmp	r0, #0
 800d39c:	f43f aee0 	beq.w	800d160 <_strtod_l+0x420>
 800d3a0:	9805      	ldr	r0, [sp, #20]
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	f7ff f93e 	bl	800c624 <__i2b>
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	b940      	cbnz	r0, 800d3be <_strtod_l+0x67e>
 800d3ac:	2500      	movs	r5, #0
 800d3ae:	e6d7      	b.n	800d160 <_strtod_l+0x420>
 800d3b0:	f04f 31ff 	mov.w	r1, #4294967295
 800d3b4:	fa01 f202 	lsl.w	r2, r1, r2
 800d3b8:	ea02 0a0a 	and.w	sl, r2, sl
 800d3bc:	e7b0      	b.n	800d320 <_strtod_l+0x5e0>
 800d3be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d3c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d3c2:	2f00      	cmp	r7, #0
 800d3c4:	bfab      	itete	ge
 800d3c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d3c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d3ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d3ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d3d2:	bfac      	ite	ge
 800d3d4:	eb07 0903 	addge.w	r9, r7, r3
 800d3d8:	eba3 0807 	sublt.w	r8, r3, r7
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	1aff      	subs	r7, r7, r3
 800d3e0:	4417      	add	r7, r2
 800d3e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d3e6:	4a6b      	ldr	r2, [pc, #428]	@ (800d594 <_strtod_l+0x854>)
 800d3e8:	3f01      	subs	r7, #1
 800d3ea:	4297      	cmp	r7, r2
 800d3ec:	da51      	bge.n	800d492 <_strtod_l+0x752>
 800d3ee:	1bd1      	subs	r1, r2, r7
 800d3f0:	291f      	cmp	r1, #31
 800d3f2:	eba3 0301 	sub.w	r3, r3, r1
 800d3f6:	f04f 0201 	mov.w	r2, #1
 800d3fa:	dc3e      	bgt.n	800d47a <_strtod_l+0x73a>
 800d3fc:	408a      	lsls	r2, r1
 800d3fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800d400:	2200      	movs	r2, #0
 800d402:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d404:	eb09 0703 	add.w	r7, r9, r3
 800d408:	4498      	add	r8, r3
 800d40a:	9b06      	ldr	r3, [sp, #24]
 800d40c:	45b9      	cmp	r9, r7
 800d40e:	4498      	add	r8, r3
 800d410:	464b      	mov	r3, r9
 800d412:	bfa8      	it	ge
 800d414:	463b      	movge	r3, r7
 800d416:	4543      	cmp	r3, r8
 800d418:	bfa8      	it	ge
 800d41a:	4643      	movge	r3, r8
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	bfc2      	ittt	gt
 800d420:	1aff      	subgt	r7, r7, r3
 800d422:	eba8 0803 	subgt.w	r8, r8, r3
 800d426:	eba9 0903 	subgt.w	r9, r9, r3
 800d42a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dd16      	ble.n	800d45e <_strtod_l+0x71e>
 800d430:	4629      	mov	r1, r5
 800d432:	9805      	ldr	r0, [sp, #20]
 800d434:	461a      	mov	r2, r3
 800d436:	f7ff f9b5 	bl	800c7a4 <__pow5mult>
 800d43a:	4605      	mov	r5, r0
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d0b5      	beq.n	800d3ac <_strtod_l+0x66c>
 800d440:	4601      	mov	r1, r0
 800d442:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d444:	9805      	ldr	r0, [sp, #20]
 800d446:	f7ff f903 	bl	800c650 <__multiply>
 800d44a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d44c:	2800      	cmp	r0, #0
 800d44e:	f43f ae87 	beq.w	800d160 <_strtod_l+0x420>
 800d452:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d454:	9805      	ldr	r0, [sp, #20]
 800d456:	f7fe ffe7 	bl	800c428 <_Bfree>
 800d45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d45c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d45e:	2f00      	cmp	r7, #0
 800d460:	dc1b      	bgt.n	800d49a <_strtod_l+0x75a>
 800d462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd21      	ble.n	800d4ac <_strtod_l+0x76c>
 800d468:	4631      	mov	r1, r6
 800d46a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d46c:	9805      	ldr	r0, [sp, #20]
 800d46e:	f7ff f999 	bl	800c7a4 <__pow5mult>
 800d472:	4606      	mov	r6, r0
 800d474:	b9d0      	cbnz	r0, 800d4ac <_strtod_l+0x76c>
 800d476:	2600      	movs	r6, #0
 800d478:	e672      	b.n	800d160 <_strtod_l+0x420>
 800d47a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d47e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d482:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d486:	37e2      	adds	r7, #226	@ 0xe2
 800d488:	fa02 f107 	lsl.w	r1, r2, r7
 800d48c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d48e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d490:	e7b8      	b.n	800d404 <_strtod_l+0x6c4>
 800d492:	2200      	movs	r2, #0
 800d494:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d496:	2201      	movs	r2, #1
 800d498:	e7f9      	b.n	800d48e <_strtod_l+0x74e>
 800d49a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d49c:	9805      	ldr	r0, [sp, #20]
 800d49e:	463a      	mov	r2, r7
 800d4a0:	f7ff f9da 	bl	800c858 <__lshift>
 800d4a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d1db      	bne.n	800d462 <_strtod_l+0x722>
 800d4aa:	e659      	b.n	800d160 <_strtod_l+0x420>
 800d4ac:	f1b8 0f00 	cmp.w	r8, #0
 800d4b0:	dd07      	ble.n	800d4c2 <_strtod_l+0x782>
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	9805      	ldr	r0, [sp, #20]
 800d4b6:	4642      	mov	r2, r8
 800d4b8:	f7ff f9ce 	bl	800c858 <__lshift>
 800d4bc:	4606      	mov	r6, r0
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0d9      	beq.n	800d476 <_strtod_l+0x736>
 800d4c2:	f1b9 0f00 	cmp.w	r9, #0
 800d4c6:	dd08      	ble.n	800d4da <_strtod_l+0x79a>
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	9805      	ldr	r0, [sp, #20]
 800d4cc:	464a      	mov	r2, r9
 800d4ce:	f7ff f9c3 	bl	800c858 <__lshift>
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f43f ae43 	beq.w	800d160 <_strtod_l+0x420>
 800d4da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d4dc:	9805      	ldr	r0, [sp, #20]
 800d4de:	4632      	mov	r2, r6
 800d4e0:	f7ff fa42 	bl	800c968 <__mdiff>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f43f ae3a 	beq.w	800d160 <_strtod_l+0x420>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d4f2:	60c3      	str	r3, [r0, #12]
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7ff fa1b 	bl	800c930 <__mcmp>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	da4e      	bge.n	800d59c <_strtod_l+0x85c>
 800d4fe:	ea58 080a 	orrs.w	r8, r8, sl
 800d502:	d174      	bne.n	800d5ee <_strtod_l+0x8ae>
 800d504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d170      	bne.n	800d5ee <_strtod_l+0x8ae>
 800d50c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d510:	0d1b      	lsrs	r3, r3, #20
 800d512:	051b      	lsls	r3, r3, #20
 800d514:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d518:	d969      	bls.n	800d5ee <_strtod_l+0x8ae>
 800d51a:	6963      	ldr	r3, [r4, #20]
 800d51c:	b913      	cbnz	r3, 800d524 <_strtod_l+0x7e4>
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	2b01      	cmp	r3, #1
 800d522:	dd64      	ble.n	800d5ee <_strtod_l+0x8ae>
 800d524:	4621      	mov	r1, r4
 800d526:	2201      	movs	r2, #1
 800d528:	9805      	ldr	r0, [sp, #20]
 800d52a:	f7ff f995 	bl	800c858 <__lshift>
 800d52e:	4629      	mov	r1, r5
 800d530:	4604      	mov	r4, r0
 800d532:	f7ff f9fd 	bl	800c930 <__mcmp>
 800d536:	2800      	cmp	r0, #0
 800d538:	dd59      	ble.n	800d5ee <_strtod_l+0x8ae>
 800d53a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d53e:	9a06      	ldr	r2, [sp, #24]
 800d540:	0d1b      	lsrs	r3, r3, #20
 800d542:	051b      	lsls	r3, r3, #20
 800d544:	2a00      	cmp	r2, #0
 800d546:	d070      	beq.n	800d62a <_strtod_l+0x8ea>
 800d548:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d54c:	d86d      	bhi.n	800d62a <_strtod_l+0x8ea>
 800d54e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d552:	f67f ae99 	bls.w	800d288 <_strtod_l+0x548>
 800d556:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d588 <_strtod_l+0x848>
 800d55a:	ec4b ab16 	vmov	d6, sl, fp
 800d55e:	4b0e      	ldr	r3, [pc, #56]	@ (800d598 <_strtod_l+0x858>)
 800d560:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d564:	ee17 2a90 	vmov	r2, s15
 800d568:	4013      	ands	r3, r2
 800d56a:	ec5b ab17 	vmov	sl, fp, d7
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f47f ae01 	bne.w	800d176 <_strtod_l+0x436>
 800d574:	9a05      	ldr	r2, [sp, #20]
 800d576:	2322      	movs	r3, #34	@ 0x22
 800d578:	6013      	str	r3, [r2, #0]
 800d57a:	e5fc      	b.n	800d176 <_strtod_l+0x436>
 800d57c:	f3af 8000 	nop.w
 800d580:	ffc00000 	.word	0xffc00000
 800d584:	41dfffff 	.word	0x41dfffff
 800d588:	00000000 	.word	0x00000000
 800d58c:	39500000 	.word	0x39500000
 800d590:	0800f000 	.word	0x0800f000
 800d594:	fffffc02 	.word	0xfffffc02
 800d598:	7ff00000 	.word	0x7ff00000
 800d59c:	46d9      	mov	r9, fp
 800d59e:	d15d      	bne.n	800d65c <_strtod_l+0x91c>
 800d5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5a4:	f1b8 0f00 	cmp.w	r8, #0
 800d5a8:	d02a      	beq.n	800d600 <_strtod_l+0x8c0>
 800d5aa:	4aab      	ldr	r2, [pc, #684]	@ (800d858 <_strtod_l+0xb18>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d12a      	bne.n	800d606 <_strtod_l+0x8c6>
 800d5b0:	9b06      	ldr	r3, [sp, #24]
 800d5b2:	4652      	mov	r2, sl
 800d5b4:	b1fb      	cbz	r3, 800d5f6 <_strtod_l+0x8b6>
 800d5b6:	4ba9      	ldr	r3, [pc, #676]	@ (800d85c <_strtod_l+0xb1c>)
 800d5b8:	ea0b 0303 	and.w	r3, fp, r3
 800d5bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d5c0:	f04f 31ff 	mov.w	r1, #4294967295
 800d5c4:	d81a      	bhi.n	800d5fc <_strtod_l+0x8bc>
 800d5c6:	0d1b      	lsrs	r3, r3, #20
 800d5c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d118      	bne.n	800d606 <_strtod_l+0x8c6>
 800d5d4:	4ba2      	ldr	r3, [pc, #648]	@ (800d860 <_strtod_l+0xb20>)
 800d5d6:	4599      	cmp	r9, r3
 800d5d8:	d102      	bne.n	800d5e0 <_strtod_l+0x8a0>
 800d5da:	3201      	adds	r2, #1
 800d5dc:	f43f adc0 	beq.w	800d160 <_strtod_l+0x420>
 800d5e0:	4b9e      	ldr	r3, [pc, #632]	@ (800d85c <_strtod_l+0xb1c>)
 800d5e2:	ea09 0303 	and.w	r3, r9, r3
 800d5e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d5ea:	f04f 0a00 	mov.w	sl, #0
 800d5ee:	9b06      	ldr	r3, [sp, #24]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1b0      	bne.n	800d556 <_strtod_l+0x816>
 800d5f4:	e5bf      	b.n	800d176 <_strtod_l+0x436>
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	e7e9      	b.n	800d5d0 <_strtod_l+0x890>
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	e7e7      	b.n	800d5d0 <_strtod_l+0x890>
 800d600:	ea53 030a 	orrs.w	r3, r3, sl
 800d604:	d099      	beq.n	800d53a <_strtod_l+0x7fa>
 800d606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d608:	b1c3      	cbz	r3, 800d63c <_strtod_l+0x8fc>
 800d60a:	ea13 0f09 	tst.w	r3, r9
 800d60e:	d0ee      	beq.n	800d5ee <_strtod_l+0x8ae>
 800d610:	9a06      	ldr	r2, [sp, #24]
 800d612:	4650      	mov	r0, sl
 800d614:	4659      	mov	r1, fp
 800d616:	f1b8 0f00 	cmp.w	r8, #0
 800d61a:	d013      	beq.n	800d644 <_strtod_l+0x904>
 800d61c:	f7ff fb73 	bl	800cd06 <sulp>
 800d620:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d624:	ec5b ab17 	vmov	sl, fp, d7
 800d628:	e7e1      	b.n	800d5ee <_strtod_l+0x8ae>
 800d62a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d62e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d632:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d636:	f04f 3aff 	mov.w	sl, #4294967295
 800d63a:	e7d8      	b.n	800d5ee <_strtod_l+0x8ae>
 800d63c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d63e:	ea13 0f0a 	tst.w	r3, sl
 800d642:	e7e4      	b.n	800d60e <_strtod_l+0x8ce>
 800d644:	f7ff fb5f 	bl	800cd06 <sulp>
 800d648:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d64c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d654:	ec5b ab10 	vmov	sl, fp, d0
 800d658:	d1c9      	bne.n	800d5ee <_strtod_l+0x8ae>
 800d65a:	e615      	b.n	800d288 <_strtod_l+0x548>
 800d65c:	4629      	mov	r1, r5
 800d65e:	4620      	mov	r0, r4
 800d660:	f7ff fade 	bl	800cc20 <__ratio>
 800d664:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d668:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d670:	d85d      	bhi.n	800d72e <_strtod_l+0x9ee>
 800d672:	f1b8 0f00 	cmp.w	r8, #0
 800d676:	d164      	bne.n	800d742 <_strtod_l+0xa02>
 800d678:	f1ba 0f00 	cmp.w	sl, #0
 800d67c:	d14b      	bne.n	800d716 <_strtod_l+0x9d6>
 800d67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d682:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d160      	bne.n	800d74c <_strtod_l+0xa0c>
 800d68a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d68e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d696:	d401      	bmi.n	800d69c <_strtod_l+0x95c>
 800d698:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d69c:	eeb1 ab48 	vneg.f64	d10, d8
 800d6a0:	486e      	ldr	r0, [pc, #440]	@ (800d85c <_strtod_l+0xb1c>)
 800d6a2:	4970      	ldr	r1, [pc, #448]	@ (800d864 <_strtod_l+0xb24>)
 800d6a4:	ea09 0700 	and.w	r7, r9, r0
 800d6a8:	428f      	cmp	r7, r1
 800d6aa:	ec53 2b1a 	vmov	r2, r3, d10
 800d6ae:	d17d      	bne.n	800d7ac <_strtod_l+0xa6c>
 800d6b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d6b4:	ec4b ab1c 	vmov	d12, sl, fp
 800d6b8:	eeb0 0b4c 	vmov.f64	d0, d12
 800d6bc:	f7ff f9e8 	bl	800ca90 <__ulp>
 800d6c0:	4866      	ldr	r0, [pc, #408]	@ (800d85c <_strtod_l+0xb1c>)
 800d6c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d6c6:	ee1c 3a90 	vmov	r3, s25
 800d6ca:	4a67      	ldr	r2, [pc, #412]	@ (800d868 <_strtod_l+0xb28>)
 800d6cc:	ea03 0100 	and.w	r1, r3, r0
 800d6d0:	4291      	cmp	r1, r2
 800d6d2:	ec5b ab1c 	vmov	sl, fp, d12
 800d6d6:	d93c      	bls.n	800d752 <_strtod_l+0xa12>
 800d6d8:	ee19 2a90 	vmov	r2, s19
 800d6dc:	4b60      	ldr	r3, [pc, #384]	@ (800d860 <_strtod_l+0xb20>)
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d104      	bne.n	800d6ec <_strtod_l+0x9ac>
 800d6e2:	ee19 3a10 	vmov	r3, s18
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	f43f ad3a 	beq.w	800d160 <_strtod_l+0x420>
 800d6ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d860 <_strtod_l+0xb20>
 800d6f0:	f04f 3aff 	mov.w	sl, #4294967295
 800d6f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d6f6:	9805      	ldr	r0, [sp, #20]
 800d6f8:	f7fe fe96 	bl	800c428 <_Bfree>
 800d6fc:	9805      	ldr	r0, [sp, #20]
 800d6fe:	4631      	mov	r1, r6
 800d700:	f7fe fe92 	bl	800c428 <_Bfree>
 800d704:	9805      	ldr	r0, [sp, #20]
 800d706:	4629      	mov	r1, r5
 800d708:	f7fe fe8e 	bl	800c428 <_Bfree>
 800d70c:	9805      	ldr	r0, [sp, #20]
 800d70e:	4621      	mov	r1, r4
 800d710:	f7fe fe8a 	bl	800c428 <_Bfree>
 800d714:	e625      	b.n	800d362 <_strtod_l+0x622>
 800d716:	f1ba 0f01 	cmp.w	sl, #1
 800d71a:	d103      	bne.n	800d724 <_strtod_l+0x9e4>
 800d71c:	f1bb 0f00 	cmp.w	fp, #0
 800d720:	f43f adb2 	beq.w	800d288 <_strtod_l+0x548>
 800d724:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d728:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d72c:	e7b8      	b.n	800d6a0 <_strtod_l+0x960>
 800d72e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d732:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d736:	f1b8 0f00 	cmp.w	r8, #0
 800d73a:	d0af      	beq.n	800d69c <_strtod_l+0x95c>
 800d73c:	eeb0 ab48 	vmov.f64	d10, d8
 800d740:	e7ae      	b.n	800d6a0 <_strtod_l+0x960>
 800d742:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d746:	eeb0 8b4a 	vmov.f64	d8, d10
 800d74a:	e7a9      	b.n	800d6a0 <_strtod_l+0x960>
 800d74c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d750:	e7a6      	b.n	800d6a0 <_strtod_l+0x960>
 800d752:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d756:	9b06      	ldr	r3, [sp, #24]
 800d758:	46d9      	mov	r9, fp
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1ca      	bne.n	800d6f4 <_strtod_l+0x9b4>
 800d75e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d762:	0d1b      	lsrs	r3, r3, #20
 800d764:	051b      	lsls	r3, r3, #20
 800d766:	429f      	cmp	r7, r3
 800d768:	d1c4      	bne.n	800d6f4 <_strtod_l+0x9b4>
 800d76a:	ec51 0b18 	vmov	r0, r1, d8
 800d76e:	f7f2 ffdb 	bl	8000728 <__aeabi_d2lz>
 800d772:	f7f2 ffab 	bl	80006cc <__aeabi_l2d>
 800d776:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d77a:	ec41 0b17 	vmov	d7, r0, r1
 800d77e:	ea49 090a 	orr.w	r9, r9, sl
 800d782:	ea59 0908 	orrs.w	r9, r9, r8
 800d786:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d78a:	d03c      	beq.n	800d806 <_strtod_l+0xac6>
 800d78c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d840 <_strtod_l+0xb00>
 800d790:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d798:	f53f aced 	bmi.w	800d176 <_strtod_l+0x436>
 800d79c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d848 <_strtod_l+0xb08>
 800d7a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	dda4      	ble.n	800d6f4 <_strtod_l+0x9b4>
 800d7aa:	e4e4      	b.n	800d176 <_strtod_l+0x436>
 800d7ac:	9906      	ldr	r1, [sp, #24]
 800d7ae:	b1e1      	cbz	r1, 800d7ea <_strtod_l+0xaaa>
 800d7b0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d7b4:	d819      	bhi.n	800d7ea <_strtod_l+0xaaa>
 800d7b6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7be:	d811      	bhi.n	800d7e4 <_strtod_l+0xaa4>
 800d7c0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d7c4:	ee18 3a10 	vmov	r3, s16
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	bf38      	it	cc
 800d7cc:	2301      	movcc	r3, #1
 800d7ce:	ee08 3a10 	vmov	s16, r3
 800d7d2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d7d6:	f1b8 0f00 	cmp.w	r8, #0
 800d7da:	d111      	bne.n	800d800 <_strtod_l+0xac0>
 800d7dc:	eeb1 7b48 	vneg.f64	d7, d8
 800d7e0:	ec53 2b17 	vmov	r2, r3, d7
 800d7e4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d7e8:	1bcb      	subs	r3, r1, r7
 800d7ea:	eeb0 0b49 	vmov.f64	d0, d9
 800d7ee:	ec43 2b1a 	vmov	d10, r2, r3
 800d7f2:	f7ff f94d 	bl	800ca90 <__ulp>
 800d7f6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d7fa:	ec5b ab19 	vmov	sl, fp, d9
 800d7fe:	e7aa      	b.n	800d756 <_strtod_l+0xa16>
 800d800:	eeb0 7b48 	vmov.f64	d7, d8
 800d804:	e7ec      	b.n	800d7e0 <_strtod_l+0xaa0>
 800d806:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d850 <_strtod_l+0xb10>
 800d80a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d812:	f57f af6f 	bpl.w	800d6f4 <_strtod_l+0x9b4>
 800d816:	e4ae      	b.n	800d176 <_strtod_l+0x436>
 800d818:	2300      	movs	r3, #0
 800d81a:	9308      	str	r3, [sp, #32]
 800d81c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d81e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	f7ff bacc 	b.w	800cdbe <_strtod_l+0x7e>
 800d826:	2a65      	cmp	r2, #101	@ 0x65
 800d828:	f43f abbc 	beq.w	800cfa4 <_strtod_l+0x264>
 800d82c:	2a45      	cmp	r2, #69	@ 0x45
 800d82e:	f43f abb9 	beq.w	800cfa4 <_strtod_l+0x264>
 800d832:	2301      	movs	r3, #1
 800d834:	9306      	str	r3, [sp, #24]
 800d836:	f7ff bbf0 	b.w	800d01a <_strtod_l+0x2da>
 800d83a:	bf00      	nop
 800d83c:	f3af 8000 	nop.w
 800d840:	94a03595 	.word	0x94a03595
 800d844:	3fdfffff 	.word	0x3fdfffff
 800d848:	35afe535 	.word	0x35afe535
 800d84c:	3fe00000 	.word	0x3fe00000
 800d850:	94a03595 	.word	0x94a03595
 800d854:	3fcfffff 	.word	0x3fcfffff
 800d858:	000fffff 	.word	0x000fffff
 800d85c:	7ff00000 	.word	0x7ff00000
 800d860:	7fefffff 	.word	0x7fefffff
 800d864:	7fe00000 	.word	0x7fe00000
 800d868:	7c9fffff 	.word	0x7c9fffff

0800d86c <_strtod_r>:
 800d86c:	4b01      	ldr	r3, [pc, #4]	@ (800d874 <_strtod_r+0x8>)
 800d86e:	f7ff ba67 	b.w	800cd40 <_strtod_l>
 800d872:	bf00      	nop
 800d874:	24000118 	.word	0x24000118

0800d878 <_strtol_l.constprop.0>:
 800d878:	2b24      	cmp	r3, #36	@ 0x24
 800d87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d87e:	4686      	mov	lr, r0
 800d880:	4690      	mov	r8, r2
 800d882:	d801      	bhi.n	800d888 <_strtol_l.constprop.0+0x10>
 800d884:	2b01      	cmp	r3, #1
 800d886:	d106      	bne.n	800d896 <_strtol_l.constprop.0+0x1e>
 800d888:	f7fd ff1c 	bl	800b6c4 <__errno>
 800d88c:	2316      	movs	r3, #22
 800d88e:	6003      	str	r3, [r0, #0]
 800d890:	2000      	movs	r0, #0
 800d892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d896:	4834      	ldr	r0, [pc, #208]	@ (800d968 <_strtol_l.constprop.0+0xf0>)
 800d898:	460d      	mov	r5, r1
 800d89a:	462a      	mov	r2, r5
 800d89c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8a0:	5d06      	ldrb	r6, [r0, r4]
 800d8a2:	f016 0608 	ands.w	r6, r6, #8
 800d8a6:	d1f8      	bne.n	800d89a <_strtol_l.constprop.0+0x22>
 800d8a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8aa:	d12d      	bne.n	800d908 <_strtol_l.constprop.0+0x90>
 800d8ac:	782c      	ldrb	r4, [r5, #0]
 800d8ae:	2601      	movs	r6, #1
 800d8b0:	1c95      	adds	r5, r2, #2
 800d8b2:	f033 0210 	bics.w	r2, r3, #16
 800d8b6:	d109      	bne.n	800d8cc <_strtol_l.constprop.0+0x54>
 800d8b8:	2c30      	cmp	r4, #48	@ 0x30
 800d8ba:	d12a      	bne.n	800d912 <_strtol_l.constprop.0+0x9a>
 800d8bc:	782a      	ldrb	r2, [r5, #0]
 800d8be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8c2:	2a58      	cmp	r2, #88	@ 0x58
 800d8c4:	d125      	bne.n	800d912 <_strtol_l.constprop.0+0x9a>
 800d8c6:	786c      	ldrb	r4, [r5, #1]
 800d8c8:	2310      	movs	r3, #16
 800d8ca:	3502      	adds	r5, #2
 800d8cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	fbbc f9f3 	udiv	r9, ip, r3
 800d8da:	4610      	mov	r0, r2
 800d8dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8e4:	2f09      	cmp	r7, #9
 800d8e6:	d81b      	bhi.n	800d920 <_strtol_l.constprop.0+0xa8>
 800d8e8:	463c      	mov	r4, r7
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	dd27      	ble.n	800d93e <_strtol_l.constprop.0+0xc6>
 800d8ee:	1c57      	adds	r7, r2, #1
 800d8f0:	d007      	beq.n	800d902 <_strtol_l.constprop.0+0x8a>
 800d8f2:	4581      	cmp	r9, r0
 800d8f4:	d320      	bcc.n	800d938 <_strtol_l.constprop.0+0xc0>
 800d8f6:	d101      	bne.n	800d8fc <_strtol_l.constprop.0+0x84>
 800d8f8:	45a2      	cmp	sl, r4
 800d8fa:	db1d      	blt.n	800d938 <_strtol_l.constprop.0+0xc0>
 800d8fc:	fb00 4003 	mla	r0, r0, r3, r4
 800d900:	2201      	movs	r2, #1
 800d902:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d906:	e7eb      	b.n	800d8e0 <_strtol_l.constprop.0+0x68>
 800d908:	2c2b      	cmp	r4, #43	@ 0x2b
 800d90a:	bf04      	itt	eq
 800d90c:	782c      	ldrbeq	r4, [r5, #0]
 800d90e:	1c95      	addeq	r5, r2, #2
 800d910:	e7cf      	b.n	800d8b2 <_strtol_l.constprop.0+0x3a>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1da      	bne.n	800d8cc <_strtol_l.constprop.0+0x54>
 800d916:	2c30      	cmp	r4, #48	@ 0x30
 800d918:	bf0c      	ite	eq
 800d91a:	2308      	moveq	r3, #8
 800d91c:	230a      	movne	r3, #10
 800d91e:	e7d5      	b.n	800d8cc <_strtol_l.constprop.0+0x54>
 800d920:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d924:	2f19      	cmp	r7, #25
 800d926:	d801      	bhi.n	800d92c <_strtol_l.constprop.0+0xb4>
 800d928:	3c37      	subs	r4, #55	@ 0x37
 800d92a:	e7de      	b.n	800d8ea <_strtol_l.constprop.0+0x72>
 800d92c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d930:	2f19      	cmp	r7, #25
 800d932:	d804      	bhi.n	800d93e <_strtol_l.constprop.0+0xc6>
 800d934:	3c57      	subs	r4, #87	@ 0x57
 800d936:	e7d8      	b.n	800d8ea <_strtol_l.constprop.0+0x72>
 800d938:	f04f 32ff 	mov.w	r2, #4294967295
 800d93c:	e7e1      	b.n	800d902 <_strtol_l.constprop.0+0x8a>
 800d93e:	1c53      	adds	r3, r2, #1
 800d940:	d108      	bne.n	800d954 <_strtol_l.constprop.0+0xdc>
 800d942:	2322      	movs	r3, #34	@ 0x22
 800d944:	f8ce 3000 	str.w	r3, [lr]
 800d948:	4660      	mov	r0, ip
 800d94a:	f1b8 0f00 	cmp.w	r8, #0
 800d94e:	d0a0      	beq.n	800d892 <_strtol_l.constprop.0+0x1a>
 800d950:	1e69      	subs	r1, r5, #1
 800d952:	e006      	b.n	800d962 <_strtol_l.constprop.0+0xea>
 800d954:	b106      	cbz	r6, 800d958 <_strtol_l.constprop.0+0xe0>
 800d956:	4240      	negs	r0, r0
 800d958:	f1b8 0f00 	cmp.w	r8, #0
 800d95c:	d099      	beq.n	800d892 <_strtol_l.constprop.0+0x1a>
 800d95e:	2a00      	cmp	r2, #0
 800d960:	d1f6      	bne.n	800d950 <_strtol_l.constprop.0+0xd8>
 800d962:	f8c8 1000 	str.w	r1, [r8]
 800d966:	e794      	b.n	800d892 <_strtol_l.constprop.0+0x1a>
 800d968:	0800f029 	.word	0x0800f029

0800d96c <_strtol_r>:
 800d96c:	f7ff bf84 	b.w	800d878 <_strtol_l.constprop.0>

0800d970 <__ssputs_r>:
 800d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d974:	688e      	ldr	r6, [r1, #8]
 800d976:	461f      	mov	r7, r3
 800d978:	42be      	cmp	r6, r7
 800d97a:	680b      	ldr	r3, [r1, #0]
 800d97c:	4682      	mov	sl, r0
 800d97e:	460c      	mov	r4, r1
 800d980:	4690      	mov	r8, r2
 800d982:	d82d      	bhi.n	800d9e0 <__ssputs_r+0x70>
 800d984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d98c:	d026      	beq.n	800d9dc <__ssputs_r+0x6c>
 800d98e:	6965      	ldr	r5, [r4, #20]
 800d990:	6909      	ldr	r1, [r1, #16]
 800d992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d996:	eba3 0901 	sub.w	r9, r3, r1
 800d99a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d99e:	1c7b      	adds	r3, r7, #1
 800d9a0:	444b      	add	r3, r9
 800d9a2:	106d      	asrs	r5, r5, #1
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	bf38      	it	cc
 800d9a8:	461d      	movcc	r5, r3
 800d9aa:	0553      	lsls	r3, r2, #21
 800d9ac:	d527      	bpl.n	800d9fe <__ssputs_r+0x8e>
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7fc fdfc 	bl	800a5ac <_malloc_r>
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	b360      	cbz	r0, 800da12 <__ssputs_r+0xa2>
 800d9b8:	6921      	ldr	r1, [r4, #16]
 800d9ba:	464a      	mov	r2, r9
 800d9bc:	f7fd feaf 	bl	800b71e <memcpy>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	6126      	str	r6, [r4, #16]
 800d9ce:	6165      	str	r5, [r4, #20]
 800d9d0:	444e      	add	r6, r9
 800d9d2:	eba5 0509 	sub.w	r5, r5, r9
 800d9d6:	6026      	str	r6, [r4, #0]
 800d9d8:	60a5      	str	r5, [r4, #8]
 800d9da:	463e      	mov	r6, r7
 800d9dc:	42be      	cmp	r6, r7
 800d9de:	d900      	bls.n	800d9e2 <__ssputs_r+0x72>
 800d9e0:	463e      	mov	r6, r7
 800d9e2:	6820      	ldr	r0, [r4, #0]
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	4641      	mov	r1, r8
 800d9e8:	f000 fb9c 	bl	800e124 <memmove>
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	1b9b      	subs	r3, r3, r6
 800d9f0:	60a3      	str	r3, [r4, #8]
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	4433      	add	r3, r6
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fe:	462a      	mov	r2, r5
 800da00:	f000 ff55 	bl	800e8ae <_realloc_r>
 800da04:	4606      	mov	r6, r0
 800da06:	2800      	cmp	r0, #0
 800da08:	d1e0      	bne.n	800d9cc <__ssputs_r+0x5c>
 800da0a:	6921      	ldr	r1, [r4, #16]
 800da0c:	4650      	mov	r0, sl
 800da0e:	f7fe fc81 	bl	800c314 <_free_r>
 800da12:	230c      	movs	r3, #12
 800da14:	f8ca 3000 	str.w	r3, [sl]
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	f04f 30ff 	mov.w	r0, #4294967295
 800da24:	e7e9      	b.n	800d9fa <__ssputs_r+0x8a>
	...

0800da28 <_svfiprintf_r>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	4698      	mov	r8, r3
 800da2e:	898b      	ldrh	r3, [r1, #12]
 800da30:	061b      	lsls	r3, r3, #24
 800da32:	b09d      	sub	sp, #116	@ 0x74
 800da34:	4607      	mov	r7, r0
 800da36:	460d      	mov	r5, r1
 800da38:	4614      	mov	r4, r2
 800da3a:	d510      	bpl.n	800da5e <_svfiprintf_r+0x36>
 800da3c:	690b      	ldr	r3, [r1, #16]
 800da3e:	b973      	cbnz	r3, 800da5e <_svfiprintf_r+0x36>
 800da40:	2140      	movs	r1, #64	@ 0x40
 800da42:	f7fc fdb3 	bl	800a5ac <_malloc_r>
 800da46:	6028      	str	r0, [r5, #0]
 800da48:	6128      	str	r0, [r5, #16]
 800da4a:	b930      	cbnz	r0, 800da5a <_svfiprintf_r+0x32>
 800da4c:	230c      	movs	r3, #12
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	b01d      	add	sp, #116	@ 0x74
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	2340      	movs	r3, #64	@ 0x40
 800da5c:	616b      	str	r3, [r5, #20]
 800da5e:	2300      	movs	r3, #0
 800da60:	9309      	str	r3, [sp, #36]	@ 0x24
 800da62:	2320      	movs	r3, #32
 800da64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da68:	f8cd 800c 	str.w	r8, [sp, #12]
 800da6c:	2330      	movs	r3, #48	@ 0x30
 800da6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc0c <_svfiprintf_r+0x1e4>
 800da72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da76:	f04f 0901 	mov.w	r9, #1
 800da7a:	4623      	mov	r3, r4
 800da7c:	469a      	mov	sl, r3
 800da7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da82:	b10a      	cbz	r2, 800da88 <_svfiprintf_r+0x60>
 800da84:	2a25      	cmp	r2, #37	@ 0x25
 800da86:	d1f9      	bne.n	800da7c <_svfiprintf_r+0x54>
 800da88:	ebba 0b04 	subs.w	fp, sl, r4
 800da8c:	d00b      	beq.n	800daa6 <_svfiprintf_r+0x7e>
 800da8e:	465b      	mov	r3, fp
 800da90:	4622      	mov	r2, r4
 800da92:	4629      	mov	r1, r5
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff ff6b 	bl	800d970 <__ssputs_r>
 800da9a:	3001      	adds	r0, #1
 800da9c:	f000 80a7 	beq.w	800dbee <_svfiprintf_r+0x1c6>
 800daa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daa2:	445a      	add	r2, fp
 800daa4:	9209      	str	r2, [sp, #36]	@ 0x24
 800daa6:	f89a 3000 	ldrb.w	r3, [sl]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 809f 	beq.w	800dbee <_svfiprintf_r+0x1c6>
 800dab0:	2300      	movs	r3, #0
 800dab2:	f04f 32ff 	mov.w	r2, #4294967295
 800dab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daba:	f10a 0a01 	add.w	sl, sl, #1
 800dabe:	9304      	str	r3, [sp, #16]
 800dac0:	9307      	str	r3, [sp, #28]
 800dac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dac6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dac8:	4654      	mov	r4, sl
 800daca:	2205      	movs	r2, #5
 800dacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad0:	484e      	ldr	r0, [pc, #312]	@ (800dc0c <_svfiprintf_r+0x1e4>)
 800dad2:	f7f2 fc15 	bl	8000300 <memchr>
 800dad6:	9a04      	ldr	r2, [sp, #16]
 800dad8:	b9d8      	cbnz	r0, 800db12 <_svfiprintf_r+0xea>
 800dada:	06d0      	lsls	r0, r2, #27
 800dadc:	bf44      	itt	mi
 800dade:	2320      	movmi	r3, #32
 800dae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dae4:	0711      	lsls	r1, r2, #28
 800dae6:	bf44      	itt	mi
 800dae8:	232b      	movmi	r3, #43	@ 0x2b
 800daea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daee:	f89a 3000 	ldrb.w	r3, [sl]
 800daf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf4:	d015      	beq.n	800db22 <_svfiprintf_r+0xfa>
 800daf6:	9a07      	ldr	r2, [sp, #28]
 800daf8:	4654      	mov	r4, sl
 800dafa:	2000      	movs	r0, #0
 800dafc:	f04f 0c0a 	mov.w	ip, #10
 800db00:	4621      	mov	r1, r4
 800db02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db06:	3b30      	subs	r3, #48	@ 0x30
 800db08:	2b09      	cmp	r3, #9
 800db0a:	d94b      	bls.n	800dba4 <_svfiprintf_r+0x17c>
 800db0c:	b1b0      	cbz	r0, 800db3c <_svfiprintf_r+0x114>
 800db0e:	9207      	str	r2, [sp, #28]
 800db10:	e014      	b.n	800db3c <_svfiprintf_r+0x114>
 800db12:	eba0 0308 	sub.w	r3, r0, r8
 800db16:	fa09 f303 	lsl.w	r3, r9, r3
 800db1a:	4313      	orrs	r3, r2
 800db1c:	9304      	str	r3, [sp, #16]
 800db1e:	46a2      	mov	sl, r4
 800db20:	e7d2      	b.n	800dac8 <_svfiprintf_r+0xa0>
 800db22:	9b03      	ldr	r3, [sp, #12]
 800db24:	1d19      	adds	r1, r3, #4
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	9103      	str	r1, [sp, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bfbb      	ittet	lt
 800db2e:	425b      	neglt	r3, r3
 800db30:	f042 0202 	orrlt.w	r2, r2, #2
 800db34:	9307      	strge	r3, [sp, #28]
 800db36:	9307      	strlt	r3, [sp, #28]
 800db38:	bfb8      	it	lt
 800db3a:	9204      	strlt	r2, [sp, #16]
 800db3c:	7823      	ldrb	r3, [r4, #0]
 800db3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800db40:	d10a      	bne.n	800db58 <_svfiprintf_r+0x130>
 800db42:	7863      	ldrb	r3, [r4, #1]
 800db44:	2b2a      	cmp	r3, #42	@ 0x2a
 800db46:	d132      	bne.n	800dbae <_svfiprintf_r+0x186>
 800db48:	9b03      	ldr	r3, [sp, #12]
 800db4a:	1d1a      	adds	r2, r3, #4
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	9203      	str	r2, [sp, #12]
 800db50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db54:	3402      	adds	r4, #2
 800db56:	9305      	str	r3, [sp, #20]
 800db58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc1c <_svfiprintf_r+0x1f4>
 800db5c:	7821      	ldrb	r1, [r4, #0]
 800db5e:	2203      	movs	r2, #3
 800db60:	4650      	mov	r0, sl
 800db62:	f7f2 fbcd 	bl	8000300 <memchr>
 800db66:	b138      	cbz	r0, 800db78 <_svfiprintf_r+0x150>
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	eba0 000a 	sub.w	r0, r0, sl
 800db6e:	2240      	movs	r2, #64	@ 0x40
 800db70:	4082      	lsls	r2, r0
 800db72:	4313      	orrs	r3, r2
 800db74:	3401      	adds	r4, #1
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7c:	4824      	ldr	r0, [pc, #144]	@ (800dc10 <_svfiprintf_r+0x1e8>)
 800db7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db82:	2206      	movs	r2, #6
 800db84:	f7f2 fbbc 	bl	8000300 <memchr>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d036      	beq.n	800dbfa <_svfiprintf_r+0x1d2>
 800db8c:	4b21      	ldr	r3, [pc, #132]	@ (800dc14 <_svfiprintf_r+0x1ec>)
 800db8e:	bb1b      	cbnz	r3, 800dbd8 <_svfiprintf_r+0x1b0>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	3307      	adds	r3, #7
 800db94:	f023 0307 	bic.w	r3, r3, #7
 800db98:	3308      	adds	r3, #8
 800db9a:	9303      	str	r3, [sp, #12]
 800db9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db9e:	4433      	add	r3, r6
 800dba0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dba2:	e76a      	b.n	800da7a <_svfiprintf_r+0x52>
 800dba4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba8:	460c      	mov	r4, r1
 800dbaa:	2001      	movs	r0, #1
 800dbac:	e7a8      	b.n	800db00 <_svfiprintf_r+0xd8>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	3401      	adds	r4, #1
 800dbb2:	9305      	str	r3, [sp, #20]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f04f 0c0a 	mov.w	ip, #10
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc0:	3a30      	subs	r2, #48	@ 0x30
 800dbc2:	2a09      	cmp	r2, #9
 800dbc4:	d903      	bls.n	800dbce <_svfiprintf_r+0x1a6>
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0c6      	beq.n	800db58 <_svfiprintf_r+0x130>
 800dbca:	9105      	str	r1, [sp, #20]
 800dbcc:	e7c4      	b.n	800db58 <_svfiprintf_r+0x130>
 800dbce:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e7f0      	b.n	800dbba <_svfiprintf_r+0x192>
 800dbd8:	ab03      	add	r3, sp, #12
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	462a      	mov	r2, r5
 800dbde:	4b0e      	ldr	r3, [pc, #56]	@ (800dc18 <_svfiprintf_r+0x1f0>)
 800dbe0:	a904      	add	r1, sp, #16
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	f7fc fdfc 	bl	800a7e0 <_printf_float>
 800dbe8:	1c42      	adds	r2, r0, #1
 800dbea:	4606      	mov	r6, r0
 800dbec:	d1d6      	bne.n	800db9c <_svfiprintf_r+0x174>
 800dbee:	89ab      	ldrh	r3, [r5, #12]
 800dbf0:	065b      	lsls	r3, r3, #25
 800dbf2:	f53f af2d 	bmi.w	800da50 <_svfiprintf_r+0x28>
 800dbf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbf8:	e72c      	b.n	800da54 <_svfiprintf_r+0x2c>
 800dbfa:	ab03      	add	r3, sp, #12
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	462a      	mov	r2, r5
 800dc00:	4b05      	ldr	r3, [pc, #20]	@ (800dc18 <_svfiprintf_r+0x1f0>)
 800dc02:	a904      	add	r1, sp, #16
 800dc04:	4638      	mov	r0, r7
 800dc06:	f7fd f873 	bl	800acf0 <_printf_i>
 800dc0a:	e7ed      	b.n	800dbe8 <_svfiprintf_r+0x1c0>
 800dc0c:	0800f129 	.word	0x0800f129
 800dc10:	0800f133 	.word	0x0800f133
 800dc14:	0800a7e1 	.word	0x0800a7e1
 800dc18:	0800d971 	.word	0x0800d971
 800dc1c:	0800f12f 	.word	0x0800f12f

0800dc20 <__sfputc_r>:
 800dc20:	6893      	ldr	r3, [r2, #8]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	b410      	push	{r4}
 800dc28:	6093      	str	r3, [r2, #8]
 800dc2a:	da08      	bge.n	800dc3e <__sfputc_r+0x1e>
 800dc2c:	6994      	ldr	r4, [r2, #24]
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	db01      	blt.n	800dc36 <__sfputc_r+0x16>
 800dc32:	290a      	cmp	r1, #10
 800dc34:	d103      	bne.n	800dc3e <__sfputc_r+0x1e>
 800dc36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc3a:	f000 b9df 	b.w	800dffc <__swbuf_r>
 800dc3e:	6813      	ldr	r3, [r2, #0]
 800dc40:	1c58      	adds	r0, r3, #1
 800dc42:	6010      	str	r0, [r2, #0]
 800dc44:	7019      	strb	r1, [r3, #0]
 800dc46:	4608      	mov	r0, r1
 800dc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <__sfputs_r>:
 800dc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	4614      	mov	r4, r2
 800dc56:	18d5      	adds	r5, r2, r3
 800dc58:	42ac      	cmp	r4, r5
 800dc5a:	d101      	bne.n	800dc60 <__sfputs_r+0x12>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e007      	b.n	800dc70 <__sfputs_r+0x22>
 800dc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc64:	463a      	mov	r2, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	f7ff ffda 	bl	800dc20 <__sfputc_r>
 800dc6c:	1c43      	adds	r3, r0, #1
 800dc6e:	d1f3      	bne.n	800dc58 <__sfputs_r+0xa>
 800dc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc74 <_vfiprintf_r>:
 800dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc78:	460d      	mov	r5, r1
 800dc7a:	b09d      	sub	sp, #116	@ 0x74
 800dc7c:	4614      	mov	r4, r2
 800dc7e:	4698      	mov	r8, r3
 800dc80:	4606      	mov	r6, r0
 800dc82:	b118      	cbz	r0, 800dc8c <_vfiprintf_r+0x18>
 800dc84:	6a03      	ldr	r3, [r0, #32]
 800dc86:	b90b      	cbnz	r3, 800dc8c <_vfiprintf_r+0x18>
 800dc88:	f7fd fbea 	bl	800b460 <__sinit>
 800dc8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc8e:	07d9      	lsls	r1, r3, #31
 800dc90:	d405      	bmi.n	800dc9e <_vfiprintf_r+0x2a>
 800dc92:	89ab      	ldrh	r3, [r5, #12]
 800dc94:	059a      	lsls	r2, r3, #22
 800dc96:	d402      	bmi.n	800dc9e <_vfiprintf_r+0x2a>
 800dc98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc9a:	f7fd fd3e 	bl	800b71a <__retarget_lock_acquire_recursive>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	071b      	lsls	r3, r3, #28
 800dca2:	d501      	bpl.n	800dca8 <_vfiprintf_r+0x34>
 800dca4:	692b      	ldr	r3, [r5, #16]
 800dca6:	b99b      	cbnz	r3, 800dcd0 <_vfiprintf_r+0x5c>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f000 f9e4 	bl	800e078 <__swsetup_r>
 800dcb0:	b170      	cbz	r0, 800dcd0 <_vfiprintf_r+0x5c>
 800dcb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcb4:	07dc      	lsls	r4, r3, #31
 800dcb6:	d504      	bpl.n	800dcc2 <_vfiprintf_r+0x4e>
 800dcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbc:	b01d      	add	sp, #116	@ 0x74
 800dcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	0598      	lsls	r0, r3, #22
 800dcc6:	d4f7      	bmi.n	800dcb8 <_vfiprintf_r+0x44>
 800dcc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcca:	f7fd fd27 	bl	800b71c <__retarget_lock_release_recursive>
 800dcce:	e7f3      	b.n	800dcb8 <_vfiprintf_r+0x44>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcd4:	2320      	movs	r3, #32
 800dcd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcde:	2330      	movs	r3, #48	@ 0x30
 800dce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de90 <_vfiprintf_r+0x21c>
 800dce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dce8:	f04f 0901 	mov.w	r9, #1
 800dcec:	4623      	mov	r3, r4
 800dcee:	469a      	mov	sl, r3
 800dcf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf4:	b10a      	cbz	r2, 800dcfa <_vfiprintf_r+0x86>
 800dcf6:	2a25      	cmp	r2, #37	@ 0x25
 800dcf8:	d1f9      	bne.n	800dcee <_vfiprintf_r+0x7a>
 800dcfa:	ebba 0b04 	subs.w	fp, sl, r4
 800dcfe:	d00b      	beq.n	800dd18 <_vfiprintf_r+0xa4>
 800dd00:	465b      	mov	r3, fp
 800dd02:	4622      	mov	r2, r4
 800dd04:	4629      	mov	r1, r5
 800dd06:	4630      	mov	r0, r6
 800dd08:	f7ff ffa1 	bl	800dc4e <__sfputs_r>
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	f000 80a7 	beq.w	800de60 <_vfiprintf_r+0x1ec>
 800dd12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd14:	445a      	add	r2, fp
 800dd16:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd18:	f89a 3000 	ldrb.w	r3, [sl]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 809f 	beq.w	800de60 <_vfiprintf_r+0x1ec>
 800dd22:	2300      	movs	r3, #0
 800dd24:	f04f 32ff 	mov.w	r2, #4294967295
 800dd28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd2c:	f10a 0a01 	add.w	sl, sl, #1
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	9307      	str	r3, [sp, #28]
 800dd34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd38:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd3a:	4654      	mov	r4, sl
 800dd3c:	2205      	movs	r2, #5
 800dd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd42:	4853      	ldr	r0, [pc, #332]	@ (800de90 <_vfiprintf_r+0x21c>)
 800dd44:	f7f2 fadc 	bl	8000300 <memchr>
 800dd48:	9a04      	ldr	r2, [sp, #16]
 800dd4a:	b9d8      	cbnz	r0, 800dd84 <_vfiprintf_r+0x110>
 800dd4c:	06d1      	lsls	r1, r2, #27
 800dd4e:	bf44      	itt	mi
 800dd50:	2320      	movmi	r3, #32
 800dd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd56:	0713      	lsls	r3, r2, #28
 800dd58:	bf44      	itt	mi
 800dd5a:	232b      	movmi	r3, #43	@ 0x2b
 800dd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd60:	f89a 3000 	ldrb.w	r3, [sl]
 800dd64:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd66:	d015      	beq.n	800dd94 <_vfiprintf_r+0x120>
 800dd68:	9a07      	ldr	r2, [sp, #28]
 800dd6a:	4654      	mov	r4, sl
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f04f 0c0a 	mov.w	ip, #10
 800dd72:	4621      	mov	r1, r4
 800dd74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd78:	3b30      	subs	r3, #48	@ 0x30
 800dd7a:	2b09      	cmp	r3, #9
 800dd7c:	d94b      	bls.n	800de16 <_vfiprintf_r+0x1a2>
 800dd7e:	b1b0      	cbz	r0, 800ddae <_vfiprintf_r+0x13a>
 800dd80:	9207      	str	r2, [sp, #28]
 800dd82:	e014      	b.n	800ddae <_vfiprintf_r+0x13a>
 800dd84:	eba0 0308 	sub.w	r3, r0, r8
 800dd88:	fa09 f303 	lsl.w	r3, r9, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	46a2      	mov	sl, r4
 800dd92:	e7d2      	b.n	800dd3a <_vfiprintf_r+0xc6>
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1d19      	adds	r1, r3, #4
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	9103      	str	r1, [sp, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfbb      	ittet	lt
 800dda0:	425b      	neglt	r3, r3
 800dda2:	f042 0202 	orrlt.w	r2, r2, #2
 800dda6:	9307      	strge	r3, [sp, #28]
 800dda8:	9307      	strlt	r3, [sp, #28]
 800ddaa:	bfb8      	it	lt
 800ddac:	9204      	strlt	r2, [sp, #16]
 800ddae:	7823      	ldrb	r3, [r4, #0]
 800ddb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddb2:	d10a      	bne.n	800ddca <_vfiprintf_r+0x156>
 800ddb4:	7863      	ldrb	r3, [r4, #1]
 800ddb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddb8:	d132      	bne.n	800de20 <_vfiprintf_r+0x1ac>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	1d1a      	adds	r2, r3, #4
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	9203      	str	r2, [sp, #12]
 800ddc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddc6:	3402      	adds	r4, #2
 800ddc8:	9305      	str	r3, [sp, #20]
 800ddca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dea0 <_vfiprintf_r+0x22c>
 800ddce:	7821      	ldrb	r1, [r4, #0]
 800ddd0:	2203      	movs	r2, #3
 800ddd2:	4650      	mov	r0, sl
 800ddd4:	f7f2 fa94 	bl	8000300 <memchr>
 800ddd8:	b138      	cbz	r0, 800ddea <_vfiprintf_r+0x176>
 800ddda:	9b04      	ldr	r3, [sp, #16]
 800dddc:	eba0 000a 	sub.w	r0, r0, sl
 800dde0:	2240      	movs	r2, #64	@ 0x40
 800dde2:	4082      	lsls	r2, r0
 800dde4:	4313      	orrs	r3, r2
 800dde6:	3401      	adds	r4, #1
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddee:	4829      	ldr	r0, [pc, #164]	@ (800de94 <_vfiprintf_r+0x220>)
 800ddf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddf4:	2206      	movs	r2, #6
 800ddf6:	f7f2 fa83 	bl	8000300 <memchr>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d03f      	beq.n	800de7e <_vfiprintf_r+0x20a>
 800ddfe:	4b26      	ldr	r3, [pc, #152]	@ (800de98 <_vfiprintf_r+0x224>)
 800de00:	bb1b      	cbnz	r3, 800de4a <_vfiprintf_r+0x1d6>
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	3307      	adds	r3, #7
 800de06:	f023 0307 	bic.w	r3, r3, #7
 800de0a:	3308      	adds	r3, #8
 800de0c:	9303      	str	r3, [sp, #12]
 800de0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de10:	443b      	add	r3, r7
 800de12:	9309      	str	r3, [sp, #36]	@ 0x24
 800de14:	e76a      	b.n	800dcec <_vfiprintf_r+0x78>
 800de16:	fb0c 3202 	mla	r2, ip, r2, r3
 800de1a:	460c      	mov	r4, r1
 800de1c:	2001      	movs	r0, #1
 800de1e:	e7a8      	b.n	800dd72 <_vfiprintf_r+0xfe>
 800de20:	2300      	movs	r3, #0
 800de22:	3401      	adds	r4, #1
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	4619      	mov	r1, r3
 800de28:	f04f 0c0a 	mov.w	ip, #10
 800de2c:	4620      	mov	r0, r4
 800de2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de32:	3a30      	subs	r2, #48	@ 0x30
 800de34:	2a09      	cmp	r2, #9
 800de36:	d903      	bls.n	800de40 <_vfiprintf_r+0x1cc>
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0c6      	beq.n	800ddca <_vfiprintf_r+0x156>
 800de3c:	9105      	str	r1, [sp, #20]
 800de3e:	e7c4      	b.n	800ddca <_vfiprintf_r+0x156>
 800de40:	fb0c 2101 	mla	r1, ip, r1, r2
 800de44:	4604      	mov	r4, r0
 800de46:	2301      	movs	r3, #1
 800de48:	e7f0      	b.n	800de2c <_vfiprintf_r+0x1b8>
 800de4a:	ab03      	add	r3, sp, #12
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	462a      	mov	r2, r5
 800de50:	4b12      	ldr	r3, [pc, #72]	@ (800de9c <_vfiprintf_r+0x228>)
 800de52:	a904      	add	r1, sp, #16
 800de54:	4630      	mov	r0, r6
 800de56:	f7fc fcc3 	bl	800a7e0 <_printf_float>
 800de5a:	4607      	mov	r7, r0
 800de5c:	1c78      	adds	r0, r7, #1
 800de5e:	d1d6      	bne.n	800de0e <_vfiprintf_r+0x19a>
 800de60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de62:	07d9      	lsls	r1, r3, #31
 800de64:	d405      	bmi.n	800de72 <_vfiprintf_r+0x1fe>
 800de66:	89ab      	ldrh	r3, [r5, #12]
 800de68:	059a      	lsls	r2, r3, #22
 800de6a:	d402      	bmi.n	800de72 <_vfiprintf_r+0x1fe>
 800de6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de6e:	f7fd fc55 	bl	800b71c <__retarget_lock_release_recursive>
 800de72:	89ab      	ldrh	r3, [r5, #12]
 800de74:	065b      	lsls	r3, r3, #25
 800de76:	f53f af1f 	bmi.w	800dcb8 <_vfiprintf_r+0x44>
 800de7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de7c:	e71e      	b.n	800dcbc <_vfiprintf_r+0x48>
 800de7e:	ab03      	add	r3, sp, #12
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	462a      	mov	r2, r5
 800de84:	4b05      	ldr	r3, [pc, #20]	@ (800de9c <_vfiprintf_r+0x228>)
 800de86:	a904      	add	r1, sp, #16
 800de88:	4630      	mov	r0, r6
 800de8a:	f7fc ff31 	bl	800acf0 <_printf_i>
 800de8e:	e7e4      	b.n	800de5a <_vfiprintf_r+0x1e6>
 800de90:	0800f129 	.word	0x0800f129
 800de94:	0800f133 	.word	0x0800f133
 800de98:	0800a7e1 	.word	0x0800a7e1
 800de9c:	0800dc4f 	.word	0x0800dc4f
 800dea0:	0800f12f 	.word	0x0800f12f

0800dea4 <__sflush_r>:
 800dea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deac:	0716      	lsls	r6, r2, #28
 800deae:	4605      	mov	r5, r0
 800deb0:	460c      	mov	r4, r1
 800deb2:	d454      	bmi.n	800df5e <__sflush_r+0xba>
 800deb4:	684b      	ldr	r3, [r1, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	dc02      	bgt.n	800dec0 <__sflush_r+0x1c>
 800deba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800debc:	2b00      	cmp	r3, #0
 800debe:	dd48      	ble.n	800df52 <__sflush_r+0xae>
 800dec0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dec2:	2e00      	cmp	r6, #0
 800dec4:	d045      	beq.n	800df52 <__sflush_r+0xae>
 800dec6:	2300      	movs	r3, #0
 800dec8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800decc:	682f      	ldr	r7, [r5, #0]
 800dece:	6a21      	ldr	r1, [r4, #32]
 800ded0:	602b      	str	r3, [r5, #0]
 800ded2:	d030      	beq.n	800df36 <__sflush_r+0x92>
 800ded4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	0759      	lsls	r1, r3, #29
 800deda:	d505      	bpl.n	800dee8 <__sflush_r+0x44>
 800dedc:	6863      	ldr	r3, [r4, #4]
 800dede:	1ad2      	subs	r2, r2, r3
 800dee0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dee2:	b10b      	cbz	r3, 800dee8 <__sflush_r+0x44>
 800dee4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dee6:	1ad2      	subs	r2, r2, r3
 800dee8:	2300      	movs	r3, #0
 800deea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800deec:	6a21      	ldr	r1, [r4, #32]
 800deee:	4628      	mov	r0, r5
 800def0:	47b0      	blx	r6
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	d106      	bne.n	800df06 <__sflush_r+0x62>
 800def8:	6829      	ldr	r1, [r5, #0]
 800defa:	291d      	cmp	r1, #29
 800defc:	d82b      	bhi.n	800df56 <__sflush_r+0xb2>
 800defe:	4a2a      	ldr	r2, [pc, #168]	@ (800dfa8 <__sflush_r+0x104>)
 800df00:	410a      	asrs	r2, r1
 800df02:	07d6      	lsls	r6, r2, #31
 800df04:	d427      	bmi.n	800df56 <__sflush_r+0xb2>
 800df06:	2200      	movs	r2, #0
 800df08:	6062      	str	r2, [r4, #4]
 800df0a:	04d9      	lsls	r1, r3, #19
 800df0c:	6922      	ldr	r2, [r4, #16]
 800df0e:	6022      	str	r2, [r4, #0]
 800df10:	d504      	bpl.n	800df1c <__sflush_r+0x78>
 800df12:	1c42      	adds	r2, r0, #1
 800df14:	d101      	bne.n	800df1a <__sflush_r+0x76>
 800df16:	682b      	ldr	r3, [r5, #0]
 800df18:	b903      	cbnz	r3, 800df1c <__sflush_r+0x78>
 800df1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df1e:	602f      	str	r7, [r5, #0]
 800df20:	b1b9      	cbz	r1, 800df52 <__sflush_r+0xae>
 800df22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df26:	4299      	cmp	r1, r3
 800df28:	d002      	beq.n	800df30 <__sflush_r+0x8c>
 800df2a:	4628      	mov	r0, r5
 800df2c:	f7fe f9f2 	bl	800c314 <_free_r>
 800df30:	2300      	movs	r3, #0
 800df32:	6363      	str	r3, [r4, #52]	@ 0x34
 800df34:	e00d      	b.n	800df52 <__sflush_r+0xae>
 800df36:	2301      	movs	r3, #1
 800df38:	4628      	mov	r0, r5
 800df3a:	47b0      	blx	r6
 800df3c:	4602      	mov	r2, r0
 800df3e:	1c50      	adds	r0, r2, #1
 800df40:	d1c9      	bne.n	800ded6 <__sflush_r+0x32>
 800df42:	682b      	ldr	r3, [r5, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d0c6      	beq.n	800ded6 <__sflush_r+0x32>
 800df48:	2b1d      	cmp	r3, #29
 800df4a:	d001      	beq.n	800df50 <__sflush_r+0xac>
 800df4c:	2b16      	cmp	r3, #22
 800df4e:	d11e      	bne.n	800df8e <__sflush_r+0xea>
 800df50:	602f      	str	r7, [r5, #0]
 800df52:	2000      	movs	r0, #0
 800df54:	e022      	b.n	800df9c <__sflush_r+0xf8>
 800df56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df5a:	b21b      	sxth	r3, r3
 800df5c:	e01b      	b.n	800df96 <__sflush_r+0xf2>
 800df5e:	690f      	ldr	r7, [r1, #16]
 800df60:	2f00      	cmp	r7, #0
 800df62:	d0f6      	beq.n	800df52 <__sflush_r+0xae>
 800df64:	0793      	lsls	r3, r2, #30
 800df66:	680e      	ldr	r6, [r1, #0]
 800df68:	bf08      	it	eq
 800df6a:	694b      	ldreq	r3, [r1, #20]
 800df6c:	600f      	str	r7, [r1, #0]
 800df6e:	bf18      	it	ne
 800df70:	2300      	movne	r3, #0
 800df72:	eba6 0807 	sub.w	r8, r6, r7
 800df76:	608b      	str	r3, [r1, #8]
 800df78:	f1b8 0f00 	cmp.w	r8, #0
 800df7c:	dde9      	ble.n	800df52 <__sflush_r+0xae>
 800df7e:	6a21      	ldr	r1, [r4, #32]
 800df80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df82:	4643      	mov	r3, r8
 800df84:	463a      	mov	r2, r7
 800df86:	4628      	mov	r0, r5
 800df88:	47b0      	blx	r6
 800df8a:	2800      	cmp	r0, #0
 800df8c:	dc08      	bgt.n	800dfa0 <__sflush_r+0xfc>
 800df8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df96:	81a3      	strh	r3, [r4, #12]
 800df98:	f04f 30ff 	mov.w	r0, #4294967295
 800df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa0:	4407      	add	r7, r0
 800dfa2:	eba8 0800 	sub.w	r8, r8, r0
 800dfa6:	e7e7      	b.n	800df78 <__sflush_r+0xd4>
 800dfa8:	dfbffffe 	.word	0xdfbffffe

0800dfac <_fflush_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	690b      	ldr	r3, [r1, #16]
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	b913      	cbnz	r3, 800dfbc <_fflush_r+0x10>
 800dfb6:	2500      	movs	r5, #0
 800dfb8:	4628      	mov	r0, r5
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	b118      	cbz	r0, 800dfc6 <_fflush_r+0x1a>
 800dfbe:	6a03      	ldr	r3, [r0, #32]
 800dfc0:	b90b      	cbnz	r3, 800dfc6 <_fflush_r+0x1a>
 800dfc2:	f7fd fa4d 	bl	800b460 <__sinit>
 800dfc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0f3      	beq.n	800dfb6 <_fflush_r+0xa>
 800dfce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfd0:	07d0      	lsls	r0, r2, #31
 800dfd2:	d404      	bmi.n	800dfde <_fflush_r+0x32>
 800dfd4:	0599      	lsls	r1, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_fflush_r+0x32>
 800dfd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfda:	f7fd fb9e 	bl	800b71a <__retarget_lock_acquire_recursive>
 800dfde:	4628      	mov	r0, r5
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	f7ff ff5f 	bl	800dea4 <__sflush_r>
 800dfe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfe8:	07da      	lsls	r2, r3, #31
 800dfea:	4605      	mov	r5, r0
 800dfec:	d4e4      	bmi.n	800dfb8 <_fflush_r+0xc>
 800dfee:	89a3      	ldrh	r3, [r4, #12]
 800dff0:	059b      	lsls	r3, r3, #22
 800dff2:	d4e1      	bmi.n	800dfb8 <_fflush_r+0xc>
 800dff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dff6:	f7fd fb91 	bl	800b71c <__retarget_lock_release_recursive>
 800dffa:	e7dd      	b.n	800dfb8 <_fflush_r+0xc>

0800dffc <__swbuf_r>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	460e      	mov	r6, r1
 800e000:	4614      	mov	r4, r2
 800e002:	4605      	mov	r5, r0
 800e004:	b118      	cbz	r0, 800e00e <__swbuf_r+0x12>
 800e006:	6a03      	ldr	r3, [r0, #32]
 800e008:	b90b      	cbnz	r3, 800e00e <__swbuf_r+0x12>
 800e00a:	f7fd fa29 	bl	800b460 <__sinit>
 800e00e:	69a3      	ldr	r3, [r4, #24]
 800e010:	60a3      	str	r3, [r4, #8]
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	071a      	lsls	r2, r3, #28
 800e016:	d501      	bpl.n	800e01c <__swbuf_r+0x20>
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	b943      	cbnz	r3, 800e02e <__swbuf_r+0x32>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 f82a 	bl	800e078 <__swsetup_r>
 800e024:	b118      	cbz	r0, 800e02e <__swbuf_r+0x32>
 800e026:	f04f 37ff 	mov.w	r7, #4294967295
 800e02a:	4638      	mov	r0, r7
 800e02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	6922      	ldr	r2, [r4, #16]
 800e032:	1a98      	subs	r0, r3, r2
 800e034:	6963      	ldr	r3, [r4, #20]
 800e036:	b2f6      	uxtb	r6, r6
 800e038:	4283      	cmp	r3, r0
 800e03a:	4637      	mov	r7, r6
 800e03c:	dc05      	bgt.n	800e04a <__swbuf_r+0x4e>
 800e03e:	4621      	mov	r1, r4
 800e040:	4628      	mov	r0, r5
 800e042:	f7ff ffb3 	bl	800dfac <_fflush_r>
 800e046:	2800      	cmp	r0, #0
 800e048:	d1ed      	bne.n	800e026 <__swbuf_r+0x2a>
 800e04a:	68a3      	ldr	r3, [r4, #8]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	60a3      	str	r3, [r4, #8]
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	6022      	str	r2, [r4, #0]
 800e056:	701e      	strb	r6, [r3, #0]
 800e058:	6962      	ldr	r2, [r4, #20]
 800e05a:	1c43      	adds	r3, r0, #1
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d004      	beq.n	800e06a <__swbuf_r+0x6e>
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	07db      	lsls	r3, r3, #31
 800e064:	d5e1      	bpl.n	800e02a <__swbuf_r+0x2e>
 800e066:	2e0a      	cmp	r6, #10
 800e068:	d1df      	bne.n	800e02a <__swbuf_r+0x2e>
 800e06a:	4621      	mov	r1, r4
 800e06c:	4628      	mov	r0, r5
 800e06e:	f7ff ff9d 	bl	800dfac <_fflush_r>
 800e072:	2800      	cmp	r0, #0
 800e074:	d0d9      	beq.n	800e02a <__swbuf_r+0x2e>
 800e076:	e7d6      	b.n	800e026 <__swbuf_r+0x2a>

0800e078 <__swsetup_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <__swsetup_r+0xa8>)
 800e07c:	4605      	mov	r5, r0
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	460c      	mov	r4, r1
 800e082:	b118      	cbz	r0, 800e08c <__swsetup_r+0x14>
 800e084:	6a03      	ldr	r3, [r0, #32]
 800e086:	b90b      	cbnz	r3, 800e08c <__swsetup_r+0x14>
 800e088:	f7fd f9ea 	bl	800b460 <__sinit>
 800e08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e090:	0719      	lsls	r1, r3, #28
 800e092:	d422      	bmi.n	800e0da <__swsetup_r+0x62>
 800e094:	06da      	lsls	r2, r3, #27
 800e096:	d407      	bmi.n	800e0a8 <__swsetup_r+0x30>
 800e098:	2209      	movs	r2, #9
 800e09a:	602a      	str	r2, [r5, #0]
 800e09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	e033      	b.n	800e110 <__swsetup_r+0x98>
 800e0a8:	0758      	lsls	r0, r3, #29
 800e0aa:	d512      	bpl.n	800e0d2 <__swsetup_r+0x5a>
 800e0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0ae:	b141      	cbz	r1, 800e0c2 <__swsetup_r+0x4a>
 800e0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0b4:	4299      	cmp	r1, r3
 800e0b6:	d002      	beq.n	800e0be <__swsetup_r+0x46>
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7fe f92b 	bl	800c314 <_free_r>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e0c8:	81a3      	strh	r3, [r4, #12]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	6063      	str	r3, [r4, #4]
 800e0ce:	6923      	ldr	r3, [r4, #16]
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	f043 0308 	orr.w	r3, r3, #8
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	b94b      	cbnz	r3, 800e0f2 <__swsetup_r+0x7a>
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0e8:	d003      	beq.n	800e0f2 <__swsetup_r+0x7a>
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f000 fc3f 	bl	800e970 <__smakebuf_r>
 800e0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f6:	f013 0201 	ands.w	r2, r3, #1
 800e0fa:	d00a      	beq.n	800e112 <__swsetup_r+0x9a>
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	60a2      	str	r2, [r4, #8]
 800e100:	6962      	ldr	r2, [r4, #20]
 800e102:	4252      	negs	r2, r2
 800e104:	61a2      	str	r2, [r4, #24]
 800e106:	6922      	ldr	r2, [r4, #16]
 800e108:	b942      	cbnz	r2, 800e11c <__swsetup_r+0xa4>
 800e10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e10e:	d1c5      	bne.n	800e09c <__swsetup_r+0x24>
 800e110:	bd38      	pop	{r3, r4, r5, pc}
 800e112:	0799      	lsls	r1, r3, #30
 800e114:	bf58      	it	pl
 800e116:	6962      	ldrpl	r2, [r4, #20]
 800e118:	60a2      	str	r2, [r4, #8]
 800e11a:	e7f4      	b.n	800e106 <__swsetup_r+0x8e>
 800e11c:	2000      	movs	r0, #0
 800e11e:	e7f7      	b.n	800e110 <__swsetup_r+0x98>
 800e120:	240000c8 	.word	0x240000c8

0800e124 <memmove>:
 800e124:	4288      	cmp	r0, r1
 800e126:	b510      	push	{r4, lr}
 800e128:	eb01 0402 	add.w	r4, r1, r2
 800e12c:	d902      	bls.n	800e134 <memmove+0x10>
 800e12e:	4284      	cmp	r4, r0
 800e130:	4623      	mov	r3, r4
 800e132:	d807      	bhi.n	800e144 <memmove+0x20>
 800e134:	1e43      	subs	r3, r0, #1
 800e136:	42a1      	cmp	r1, r4
 800e138:	d008      	beq.n	800e14c <memmove+0x28>
 800e13a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e13e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e142:	e7f8      	b.n	800e136 <memmove+0x12>
 800e144:	4402      	add	r2, r0
 800e146:	4601      	mov	r1, r0
 800e148:	428a      	cmp	r2, r1
 800e14a:	d100      	bne.n	800e14e <memmove+0x2a>
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e156:	e7f7      	b.n	800e148 <memmove+0x24>

0800e158 <_raise_r>:
 800e158:	291f      	cmp	r1, #31
 800e15a:	b538      	push	{r3, r4, r5, lr}
 800e15c:	4605      	mov	r5, r0
 800e15e:	460c      	mov	r4, r1
 800e160:	d904      	bls.n	800e16c <_raise_r+0x14>
 800e162:	2316      	movs	r3, #22
 800e164:	6003      	str	r3, [r0, #0]
 800e166:	f04f 30ff 	mov.w	r0, #4294967295
 800e16a:	bd38      	pop	{r3, r4, r5, pc}
 800e16c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e16e:	b112      	cbz	r2, 800e176 <_raise_r+0x1e>
 800e170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e174:	b94b      	cbnz	r3, 800e18a <_raise_r+0x32>
 800e176:	4628      	mov	r0, r5
 800e178:	f000 f830 	bl	800e1dc <_getpid_r>
 800e17c:	4622      	mov	r2, r4
 800e17e:	4601      	mov	r1, r0
 800e180:	4628      	mov	r0, r5
 800e182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e186:	f000 b817 	b.w	800e1b8 <_kill_r>
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d00a      	beq.n	800e1a4 <_raise_r+0x4c>
 800e18e:	1c59      	adds	r1, r3, #1
 800e190:	d103      	bne.n	800e19a <_raise_r+0x42>
 800e192:	2316      	movs	r3, #22
 800e194:	6003      	str	r3, [r0, #0]
 800e196:	2001      	movs	r0, #1
 800e198:	e7e7      	b.n	800e16a <_raise_r+0x12>
 800e19a:	2100      	movs	r1, #0
 800e19c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	4798      	blx	r3
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e7e0      	b.n	800e16a <_raise_r+0x12>

0800e1a8 <raise>:
 800e1a8:	4b02      	ldr	r3, [pc, #8]	@ (800e1b4 <raise+0xc>)
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	f7ff bfd3 	b.w	800e158 <_raise_r>
 800e1b2:	bf00      	nop
 800e1b4:	240000c8 	.word	0x240000c8

0800e1b8 <_kill_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4d07      	ldr	r5, [pc, #28]	@ (800e1d8 <_kill_r+0x20>)
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	602b      	str	r3, [r5, #0]
 800e1c6:	f7f3 f877 	bl	80012b8 <_kill>
 800e1ca:	1c43      	adds	r3, r0, #1
 800e1cc:	d102      	bne.n	800e1d4 <_kill_r+0x1c>
 800e1ce:	682b      	ldr	r3, [r5, #0]
 800e1d0:	b103      	cbz	r3, 800e1d4 <_kill_r+0x1c>
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	bd38      	pop	{r3, r4, r5, pc}
 800e1d6:	bf00      	nop
 800e1d8:	24004eb4 	.word	0x24004eb4

0800e1dc <_getpid_r>:
 800e1dc:	f7f3 b864 	b.w	80012a8 <_getpid>

0800e1e0 <nan>:
 800e1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1e8 <nan+0x8>
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	00000000 	.word	0x00000000
 800e1ec:	7ff80000 	.word	0x7ff80000

0800e1f0 <_calloc_r>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	fba1 5402 	umull	r5, r4, r1, r2
 800e1f6:	b93c      	cbnz	r4, 800e208 <_calloc_r+0x18>
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	f7fc f9d7 	bl	800a5ac <_malloc_r>
 800e1fe:	4606      	mov	r6, r0
 800e200:	b928      	cbnz	r0, 800e20e <_calloc_r+0x1e>
 800e202:	2600      	movs	r6, #0
 800e204:	4630      	mov	r0, r6
 800e206:	bd70      	pop	{r4, r5, r6, pc}
 800e208:	220c      	movs	r2, #12
 800e20a:	6002      	str	r2, [r0, #0]
 800e20c:	e7f9      	b.n	800e202 <_calloc_r+0x12>
 800e20e:	462a      	mov	r2, r5
 800e210:	4621      	mov	r1, r4
 800e212:	f7fd f9d0 	bl	800b5b6 <memset>
 800e216:	e7f5      	b.n	800e204 <_calloc_r+0x14>

0800e218 <rshift>:
 800e218:	6903      	ldr	r3, [r0, #16]
 800e21a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e21e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e222:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e226:	f100 0414 	add.w	r4, r0, #20
 800e22a:	dd45      	ble.n	800e2b8 <rshift+0xa0>
 800e22c:	f011 011f 	ands.w	r1, r1, #31
 800e230:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e234:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e238:	d10c      	bne.n	800e254 <rshift+0x3c>
 800e23a:	f100 0710 	add.w	r7, r0, #16
 800e23e:	4629      	mov	r1, r5
 800e240:	42b1      	cmp	r1, r6
 800e242:	d334      	bcc.n	800e2ae <rshift+0x96>
 800e244:	1a9b      	subs	r3, r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	1eea      	subs	r2, r5, #3
 800e24a:	4296      	cmp	r6, r2
 800e24c:	bf38      	it	cc
 800e24e:	2300      	movcc	r3, #0
 800e250:	4423      	add	r3, r4
 800e252:	e015      	b.n	800e280 <rshift+0x68>
 800e254:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e258:	f1c1 0820 	rsb	r8, r1, #32
 800e25c:	40cf      	lsrs	r7, r1
 800e25e:	f105 0e04 	add.w	lr, r5, #4
 800e262:	46a1      	mov	r9, r4
 800e264:	4576      	cmp	r6, lr
 800e266:	46f4      	mov	ip, lr
 800e268:	d815      	bhi.n	800e296 <rshift+0x7e>
 800e26a:	1a9a      	subs	r2, r3, r2
 800e26c:	0092      	lsls	r2, r2, #2
 800e26e:	3a04      	subs	r2, #4
 800e270:	3501      	adds	r5, #1
 800e272:	42ae      	cmp	r6, r5
 800e274:	bf38      	it	cc
 800e276:	2200      	movcc	r2, #0
 800e278:	18a3      	adds	r3, r4, r2
 800e27a:	50a7      	str	r7, [r4, r2]
 800e27c:	b107      	cbz	r7, 800e280 <rshift+0x68>
 800e27e:	3304      	adds	r3, #4
 800e280:	1b1a      	subs	r2, r3, r4
 800e282:	42a3      	cmp	r3, r4
 800e284:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e288:	bf08      	it	eq
 800e28a:	2300      	moveq	r3, #0
 800e28c:	6102      	str	r2, [r0, #16]
 800e28e:	bf08      	it	eq
 800e290:	6143      	streq	r3, [r0, #20]
 800e292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e296:	f8dc c000 	ldr.w	ip, [ip]
 800e29a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e29e:	ea4c 0707 	orr.w	r7, ip, r7
 800e2a2:	f849 7b04 	str.w	r7, [r9], #4
 800e2a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2aa:	40cf      	lsrs	r7, r1
 800e2ac:	e7da      	b.n	800e264 <rshift+0x4c>
 800e2ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2b6:	e7c3      	b.n	800e240 <rshift+0x28>
 800e2b8:	4623      	mov	r3, r4
 800e2ba:	e7e1      	b.n	800e280 <rshift+0x68>

0800e2bc <__hexdig_fun>:
 800e2bc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e2c0:	2b09      	cmp	r3, #9
 800e2c2:	d802      	bhi.n	800e2ca <__hexdig_fun+0xe>
 800e2c4:	3820      	subs	r0, #32
 800e2c6:	b2c0      	uxtb	r0, r0
 800e2c8:	4770      	bx	lr
 800e2ca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e2ce:	2b05      	cmp	r3, #5
 800e2d0:	d801      	bhi.n	800e2d6 <__hexdig_fun+0x1a>
 800e2d2:	3847      	subs	r0, #71	@ 0x47
 800e2d4:	e7f7      	b.n	800e2c6 <__hexdig_fun+0xa>
 800e2d6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e2da:	2b05      	cmp	r3, #5
 800e2dc:	d801      	bhi.n	800e2e2 <__hexdig_fun+0x26>
 800e2de:	3827      	subs	r0, #39	@ 0x27
 800e2e0:	e7f1      	b.n	800e2c6 <__hexdig_fun+0xa>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <__gethex>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	b085      	sub	sp, #20
 800e2ee:	468a      	mov	sl, r1
 800e2f0:	9302      	str	r3, [sp, #8]
 800e2f2:	680b      	ldr	r3, [r1, #0]
 800e2f4:	9001      	str	r0, [sp, #4]
 800e2f6:	4690      	mov	r8, r2
 800e2f8:	1c9c      	adds	r4, r3, #2
 800e2fa:	46a1      	mov	r9, r4
 800e2fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e300:	2830      	cmp	r0, #48	@ 0x30
 800e302:	d0fa      	beq.n	800e2fa <__gethex+0x12>
 800e304:	eba9 0303 	sub.w	r3, r9, r3
 800e308:	f1a3 0b02 	sub.w	fp, r3, #2
 800e30c:	f7ff ffd6 	bl	800e2bc <__hexdig_fun>
 800e310:	4605      	mov	r5, r0
 800e312:	2800      	cmp	r0, #0
 800e314:	d168      	bne.n	800e3e8 <__gethex+0x100>
 800e316:	49a0      	ldr	r1, [pc, #640]	@ (800e598 <__gethex+0x2b0>)
 800e318:	2201      	movs	r2, #1
 800e31a:	4648      	mov	r0, r9
 800e31c:	f7fd f953 	bl	800b5c6 <strncmp>
 800e320:	4607      	mov	r7, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	d167      	bne.n	800e3f6 <__gethex+0x10e>
 800e326:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e32a:	4626      	mov	r6, r4
 800e32c:	f7ff ffc6 	bl	800e2bc <__hexdig_fun>
 800e330:	2800      	cmp	r0, #0
 800e332:	d062      	beq.n	800e3fa <__gethex+0x112>
 800e334:	4623      	mov	r3, r4
 800e336:	7818      	ldrb	r0, [r3, #0]
 800e338:	2830      	cmp	r0, #48	@ 0x30
 800e33a:	4699      	mov	r9, r3
 800e33c:	f103 0301 	add.w	r3, r3, #1
 800e340:	d0f9      	beq.n	800e336 <__gethex+0x4e>
 800e342:	f7ff ffbb 	bl	800e2bc <__hexdig_fun>
 800e346:	fab0 f580 	clz	r5, r0
 800e34a:	096d      	lsrs	r5, r5, #5
 800e34c:	f04f 0b01 	mov.w	fp, #1
 800e350:	464a      	mov	r2, r9
 800e352:	4616      	mov	r6, r2
 800e354:	3201      	adds	r2, #1
 800e356:	7830      	ldrb	r0, [r6, #0]
 800e358:	f7ff ffb0 	bl	800e2bc <__hexdig_fun>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d1f8      	bne.n	800e352 <__gethex+0x6a>
 800e360:	498d      	ldr	r1, [pc, #564]	@ (800e598 <__gethex+0x2b0>)
 800e362:	2201      	movs	r2, #1
 800e364:	4630      	mov	r0, r6
 800e366:	f7fd f92e 	bl	800b5c6 <strncmp>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d13f      	bne.n	800e3ee <__gethex+0x106>
 800e36e:	b944      	cbnz	r4, 800e382 <__gethex+0x9a>
 800e370:	1c74      	adds	r4, r6, #1
 800e372:	4622      	mov	r2, r4
 800e374:	4616      	mov	r6, r2
 800e376:	3201      	adds	r2, #1
 800e378:	7830      	ldrb	r0, [r6, #0]
 800e37a:	f7ff ff9f 	bl	800e2bc <__hexdig_fun>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d1f8      	bne.n	800e374 <__gethex+0x8c>
 800e382:	1ba4      	subs	r4, r4, r6
 800e384:	00a7      	lsls	r7, r4, #2
 800e386:	7833      	ldrb	r3, [r6, #0]
 800e388:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e38c:	2b50      	cmp	r3, #80	@ 0x50
 800e38e:	d13e      	bne.n	800e40e <__gethex+0x126>
 800e390:	7873      	ldrb	r3, [r6, #1]
 800e392:	2b2b      	cmp	r3, #43	@ 0x2b
 800e394:	d033      	beq.n	800e3fe <__gethex+0x116>
 800e396:	2b2d      	cmp	r3, #45	@ 0x2d
 800e398:	d034      	beq.n	800e404 <__gethex+0x11c>
 800e39a:	1c71      	adds	r1, r6, #1
 800e39c:	2400      	movs	r4, #0
 800e39e:	7808      	ldrb	r0, [r1, #0]
 800e3a0:	f7ff ff8c 	bl	800e2bc <__hexdig_fun>
 800e3a4:	1e43      	subs	r3, r0, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b18      	cmp	r3, #24
 800e3aa:	d830      	bhi.n	800e40e <__gethex+0x126>
 800e3ac:	f1a0 0210 	sub.w	r2, r0, #16
 800e3b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3b4:	f7ff ff82 	bl	800e2bc <__hexdig_fun>
 800e3b8:	f100 3cff 	add.w	ip, r0, #4294967295
 800e3bc:	fa5f fc8c 	uxtb.w	ip, ip
 800e3c0:	f1bc 0f18 	cmp.w	ip, #24
 800e3c4:	f04f 030a 	mov.w	r3, #10
 800e3c8:	d91e      	bls.n	800e408 <__gethex+0x120>
 800e3ca:	b104      	cbz	r4, 800e3ce <__gethex+0xe6>
 800e3cc:	4252      	negs	r2, r2
 800e3ce:	4417      	add	r7, r2
 800e3d0:	f8ca 1000 	str.w	r1, [sl]
 800e3d4:	b1ed      	cbz	r5, 800e412 <__gethex+0x12a>
 800e3d6:	f1bb 0f00 	cmp.w	fp, #0
 800e3da:	bf0c      	ite	eq
 800e3dc:	2506      	moveq	r5, #6
 800e3de:	2500      	movne	r5, #0
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	b005      	add	sp, #20
 800e3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e8:	2500      	movs	r5, #0
 800e3ea:	462c      	mov	r4, r5
 800e3ec:	e7b0      	b.n	800e350 <__gethex+0x68>
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	d1c7      	bne.n	800e382 <__gethex+0x9a>
 800e3f2:	4627      	mov	r7, r4
 800e3f4:	e7c7      	b.n	800e386 <__gethex+0x9e>
 800e3f6:	464e      	mov	r6, r9
 800e3f8:	462f      	mov	r7, r5
 800e3fa:	2501      	movs	r5, #1
 800e3fc:	e7c3      	b.n	800e386 <__gethex+0x9e>
 800e3fe:	2400      	movs	r4, #0
 800e400:	1cb1      	adds	r1, r6, #2
 800e402:	e7cc      	b.n	800e39e <__gethex+0xb6>
 800e404:	2401      	movs	r4, #1
 800e406:	e7fb      	b.n	800e400 <__gethex+0x118>
 800e408:	fb03 0002 	mla	r0, r3, r2, r0
 800e40c:	e7ce      	b.n	800e3ac <__gethex+0xc4>
 800e40e:	4631      	mov	r1, r6
 800e410:	e7de      	b.n	800e3d0 <__gethex+0xe8>
 800e412:	eba6 0309 	sub.w	r3, r6, r9
 800e416:	3b01      	subs	r3, #1
 800e418:	4629      	mov	r1, r5
 800e41a:	2b07      	cmp	r3, #7
 800e41c:	dc0a      	bgt.n	800e434 <__gethex+0x14c>
 800e41e:	9801      	ldr	r0, [sp, #4]
 800e420:	f7fd ffc2 	bl	800c3a8 <_Balloc>
 800e424:	4604      	mov	r4, r0
 800e426:	b940      	cbnz	r0, 800e43a <__gethex+0x152>
 800e428:	4b5c      	ldr	r3, [pc, #368]	@ (800e59c <__gethex+0x2b4>)
 800e42a:	4602      	mov	r2, r0
 800e42c:	21e4      	movs	r1, #228	@ 0xe4
 800e42e:	485c      	ldr	r0, [pc, #368]	@ (800e5a0 <__gethex+0x2b8>)
 800e430:	f7fc f86c 	bl	800a50c <__assert_func>
 800e434:	3101      	adds	r1, #1
 800e436:	105b      	asrs	r3, r3, #1
 800e438:	e7ef      	b.n	800e41a <__gethex+0x132>
 800e43a:	f100 0a14 	add.w	sl, r0, #20
 800e43e:	2300      	movs	r3, #0
 800e440:	4655      	mov	r5, sl
 800e442:	469b      	mov	fp, r3
 800e444:	45b1      	cmp	r9, r6
 800e446:	d337      	bcc.n	800e4b8 <__gethex+0x1d0>
 800e448:	f845 bb04 	str.w	fp, [r5], #4
 800e44c:	eba5 050a 	sub.w	r5, r5, sl
 800e450:	10ad      	asrs	r5, r5, #2
 800e452:	6125      	str	r5, [r4, #16]
 800e454:	4658      	mov	r0, fp
 800e456:	f7fe f899 	bl	800c58c <__hi0bits>
 800e45a:	016d      	lsls	r5, r5, #5
 800e45c:	f8d8 6000 	ldr.w	r6, [r8]
 800e460:	1a2d      	subs	r5, r5, r0
 800e462:	42b5      	cmp	r5, r6
 800e464:	dd54      	ble.n	800e510 <__gethex+0x228>
 800e466:	1bad      	subs	r5, r5, r6
 800e468:	4629      	mov	r1, r5
 800e46a:	4620      	mov	r0, r4
 800e46c:	f7fe fc2a 	bl	800ccc4 <__any_on>
 800e470:	4681      	mov	r9, r0
 800e472:	b178      	cbz	r0, 800e494 <__gethex+0x1ac>
 800e474:	1e6b      	subs	r3, r5, #1
 800e476:	1159      	asrs	r1, r3, #5
 800e478:	f003 021f 	and.w	r2, r3, #31
 800e47c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e480:	f04f 0901 	mov.w	r9, #1
 800e484:	fa09 f202 	lsl.w	r2, r9, r2
 800e488:	420a      	tst	r2, r1
 800e48a:	d003      	beq.n	800e494 <__gethex+0x1ac>
 800e48c:	454b      	cmp	r3, r9
 800e48e:	dc36      	bgt.n	800e4fe <__gethex+0x216>
 800e490:	f04f 0902 	mov.w	r9, #2
 800e494:	4629      	mov	r1, r5
 800e496:	4620      	mov	r0, r4
 800e498:	f7ff febe 	bl	800e218 <rshift>
 800e49c:	442f      	add	r7, r5
 800e49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4a2:	42bb      	cmp	r3, r7
 800e4a4:	da42      	bge.n	800e52c <__gethex+0x244>
 800e4a6:	9801      	ldr	r0, [sp, #4]
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	f7fd ffbd 	bl	800c428 <_Bfree>
 800e4ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	25a3      	movs	r5, #163	@ 0xa3
 800e4b6:	e793      	b.n	800e3e0 <__gethex+0xf8>
 800e4b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e4bc:	2a2e      	cmp	r2, #46	@ 0x2e
 800e4be:	d012      	beq.n	800e4e6 <__gethex+0x1fe>
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	d104      	bne.n	800e4ce <__gethex+0x1e6>
 800e4c4:	f845 bb04 	str.w	fp, [r5], #4
 800e4c8:	f04f 0b00 	mov.w	fp, #0
 800e4cc:	465b      	mov	r3, fp
 800e4ce:	7830      	ldrb	r0, [r6, #0]
 800e4d0:	9303      	str	r3, [sp, #12]
 800e4d2:	f7ff fef3 	bl	800e2bc <__hexdig_fun>
 800e4d6:	9b03      	ldr	r3, [sp, #12]
 800e4d8:	f000 000f 	and.w	r0, r0, #15
 800e4dc:	4098      	lsls	r0, r3
 800e4de:	ea4b 0b00 	orr.w	fp, fp, r0
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	e7ae      	b.n	800e444 <__gethex+0x15c>
 800e4e6:	45b1      	cmp	r9, r6
 800e4e8:	d8ea      	bhi.n	800e4c0 <__gethex+0x1d8>
 800e4ea:	492b      	ldr	r1, [pc, #172]	@ (800e598 <__gethex+0x2b0>)
 800e4ec:	9303      	str	r3, [sp, #12]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7fd f868 	bl	800b5c6 <strncmp>
 800e4f6:	9b03      	ldr	r3, [sp, #12]
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d1e1      	bne.n	800e4c0 <__gethex+0x1d8>
 800e4fc:	e7a2      	b.n	800e444 <__gethex+0x15c>
 800e4fe:	1ea9      	subs	r1, r5, #2
 800e500:	4620      	mov	r0, r4
 800e502:	f7fe fbdf 	bl	800ccc4 <__any_on>
 800e506:	2800      	cmp	r0, #0
 800e508:	d0c2      	beq.n	800e490 <__gethex+0x1a8>
 800e50a:	f04f 0903 	mov.w	r9, #3
 800e50e:	e7c1      	b.n	800e494 <__gethex+0x1ac>
 800e510:	da09      	bge.n	800e526 <__gethex+0x23e>
 800e512:	1b75      	subs	r5, r6, r5
 800e514:	4621      	mov	r1, r4
 800e516:	9801      	ldr	r0, [sp, #4]
 800e518:	462a      	mov	r2, r5
 800e51a:	f7fe f99d 	bl	800c858 <__lshift>
 800e51e:	1b7f      	subs	r7, r7, r5
 800e520:	4604      	mov	r4, r0
 800e522:	f100 0a14 	add.w	sl, r0, #20
 800e526:	f04f 0900 	mov.w	r9, #0
 800e52a:	e7b8      	b.n	800e49e <__gethex+0x1b6>
 800e52c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e530:	42bd      	cmp	r5, r7
 800e532:	dd6f      	ble.n	800e614 <__gethex+0x32c>
 800e534:	1bed      	subs	r5, r5, r7
 800e536:	42ae      	cmp	r6, r5
 800e538:	dc34      	bgt.n	800e5a4 <__gethex+0x2bc>
 800e53a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e53e:	2b02      	cmp	r3, #2
 800e540:	d022      	beq.n	800e588 <__gethex+0x2a0>
 800e542:	2b03      	cmp	r3, #3
 800e544:	d024      	beq.n	800e590 <__gethex+0x2a8>
 800e546:	2b01      	cmp	r3, #1
 800e548:	d115      	bne.n	800e576 <__gethex+0x28e>
 800e54a:	42ae      	cmp	r6, r5
 800e54c:	d113      	bne.n	800e576 <__gethex+0x28e>
 800e54e:	2e01      	cmp	r6, #1
 800e550:	d10b      	bne.n	800e56a <__gethex+0x282>
 800e552:	9a02      	ldr	r2, [sp, #8]
 800e554:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	2301      	movs	r3, #1
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	f8ca 3000 	str.w	r3, [sl]
 800e562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e564:	2562      	movs	r5, #98	@ 0x62
 800e566:	601c      	str	r4, [r3, #0]
 800e568:	e73a      	b.n	800e3e0 <__gethex+0xf8>
 800e56a:	1e71      	subs	r1, r6, #1
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7fe fba9 	bl	800ccc4 <__any_on>
 800e572:	2800      	cmp	r0, #0
 800e574:	d1ed      	bne.n	800e552 <__gethex+0x26a>
 800e576:	9801      	ldr	r0, [sp, #4]
 800e578:	4621      	mov	r1, r4
 800e57a:	f7fd ff55 	bl	800c428 <_Bfree>
 800e57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e580:	2300      	movs	r3, #0
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	2550      	movs	r5, #80	@ 0x50
 800e586:	e72b      	b.n	800e3e0 <__gethex+0xf8>
 800e588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1f3      	bne.n	800e576 <__gethex+0x28e>
 800e58e:	e7e0      	b.n	800e552 <__gethex+0x26a>
 800e590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1dd      	bne.n	800e552 <__gethex+0x26a>
 800e596:	e7ee      	b.n	800e576 <__gethex+0x28e>
 800e598:	0800efd0 	.word	0x0800efd0
 800e59c:	0800ee68 	.word	0x0800ee68
 800e5a0:	0800f142 	.word	0x0800f142
 800e5a4:	1e6f      	subs	r7, r5, #1
 800e5a6:	f1b9 0f00 	cmp.w	r9, #0
 800e5aa:	d130      	bne.n	800e60e <__gethex+0x326>
 800e5ac:	b127      	cbz	r7, 800e5b8 <__gethex+0x2d0>
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7fe fb87 	bl	800ccc4 <__any_on>
 800e5b6:	4681      	mov	r9, r0
 800e5b8:	117a      	asrs	r2, r7, #5
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e5c0:	f007 071f 	and.w	r7, r7, #31
 800e5c4:	40bb      	lsls	r3, r7
 800e5c6:	4213      	tst	r3, r2
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	bf18      	it	ne
 800e5ce:	f049 0902 	orrne.w	r9, r9, #2
 800e5d2:	f7ff fe21 	bl	800e218 <rshift>
 800e5d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e5da:	1b76      	subs	r6, r6, r5
 800e5dc:	2502      	movs	r5, #2
 800e5de:	f1b9 0f00 	cmp.w	r9, #0
 800e5e2:	d047      	beq.n	800e674 <__gethex+0x38c>
 800e5e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5e8:	2b02      	cmp	r3, #2
 800e5ea:	d015      	beq.n	800e618 <__gethex+0x330>
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d017      	beq.n	800e620 <__gethex+0x338>
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d109      	bne.n	800e608 <__gethex+0x320>
 800e5f4:	f019 0f02 	tst.w	r9, #2
 800e5f8:	d006      	beq.n	800e608 <__gethex+0x320>
 800e5fa:	f8da 3000 	ldr.w	r3, [sl]
 800e5fe:	ea49 0903 	orr.w	r9, r9, r3
 800e602:	f019 0f01 	tst.w	r9, #1
 800e606:	d10e      	bne.n	800e626 <__gethex+0x33e>
 800e608:	f045 0510 	orr.w	r5, r5, #16
 800e60c:	e032      	b.n	800e674 <__gethex+0x38c>
 800e60e:	f04f 0901 	mov.w	r9, #1
 800e612:	e7d1      	b.n	800e5b8 <__gethex+0x2d0>
 800e614:	2501      	movs	r5, #1
 800e616:	e7e2      	b.n	800e5de <__gethex+0x2f6>
 800e618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e61a:	f1c3 0301 	rsb	r3, r3, #1
 800e61e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0f0      	beq.n	800e608 <__gethex+0x320>
 800e626:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e62a:	f104 0314 	add.w	r3, r4, #20
 800e62e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e632:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e636:	f04f 0c00 	mov.w	ip, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e640:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e644:	d01b      	beq.n	800e67e <__gethex+0x396>
 800e646:	3201      	adds	r2, #1
 800e648:	6002      	str	r2, [r0, #0]
 800e64a:	2d02      	cmp	r5, #2
 800e64c:	f104 0314 	add.w	r3, r4, #20
 800e650:	d13c      	bne.n	800e6cc <__gethex+0x3e4>
 800e652:	f8d8 2000 	ldr.w	r2, [r8]
 800e656:	3a01      	subs	r2, #1
 800e658:	42b2      	cmp	r2, r6
 800e65a:	d109      	bne.n	800e670 <__gethex+0x388>
 800e65c:	1171      	asrs	r1, r6, #5
 800e65e:	2201      	movs	r2, #1
 800e660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e664:	f006 061f 	and.w	r6, r6, #31
 800e668:	fa02 f606 	lsl.w	r6, r2, r6
 800e66c:	421e      	tst	r6, r3
 800e66e:	d13a      	bne.n	800e6e6 <__gethex+0x3fe>
 800e670:	f045 0520 	orr.w	r5, r5, #32
 800e674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e676:	601c      	str	r4, [r3, #0]
 800e678:	9b02      	ldr	r3, [sp, #8]
 800e67a:	601f      	str	r7, [r3, #0]
 800e67c:	e6b0      	b.n	800e3e0 <__gethex+0xf8>
 800e67e:	4299      	cmp	r1, r3
 800e680:	f843 cc04 	str.w	ip, [r3, #-4]
 800e684:	d8d9      	bhi.n	800e63a <__gethex+0x352>
 800e686:	68a3      	ldr	r3, [r4, #8]
 800e688:	459b      	cmp	fp, r3
 800e68a:	db17      	blt.n	800e6bc <__gethex+0x3d4>
 800e68c:	6861      	ldr	r1, [r4, #4]
 800e68e:	9801      	ldr	r0, [sp, #4]
 800e690:	3101      	adds	r1, #1
 800e692:	f7fd fe89 	bl	800c3a8 <_Balloc>
 800e696:	4681      	mov	r9, r0
 800e698:	b918      	cbnz	r0, 800e6a2 <__gethex+0x3ba>
 800e69a:	4b1a      	ldr	r3, [pc, #104]	@ (800e704 <__gethex+0x41c>)
 800e69c:	4602      	mov	r2, r0
 800e69e:	2184      	movs	r1, #132	@ 0x84
 800e6a0:	e6c5      	b.n	800e42e <__gethex+0x146>
 800e6a2:	6922      	ldr	r2, [r4, #16]
 800e6a4:	3202      	adds	r2, #2
 800e6a6:	f104 010c 	add.w	r1, r4, #12
 800e6aa:	0092      	lsls	r2, r2, #2
 800e6ac:	300c      	adds	r0, #12
 800e6ae:	f7fd f836 	bl	800b71e <memcpy>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	9801      	ldr	r0, [sp, #4]
 800e6b6:	f7fd feb7 	bl	800c428 <_Bfree>
 800e6ba:	464c      	mov	r4, r9
 800e6bc:	6923      	ldr	r3, [r4, #16]
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6c4:	6122      	str	r2, [r4, #16]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	615a      	str	r2, [r3, #20]
 800e6ca:	e7be      	b.n	800e64a <__gethex+0x362>
 800e6cc:	6922      	ldr	r2, [r4, #16]
 800e6ce:	455a      	cmp	r2, fp
 800e6d0:	dd0b      	ble.n	800e6ea <__gethex+0x402>
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7ff fd9f 	bl	800e218 <rshift>
 800e6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6de:	3701      	adds	r7, #1
 800e6e0:	42bb      	cmp	r3, r7
 800e6e2:	f6ff aee0 	blt.w	800e4a6 <__gethex+0x1be>
 800e6e6:	2501      	movs	r5, #1
 800e6e8:	e7c2      	b.n	800e670 <__gethex+0x388>
 800e6ea:	f016 061f 	ands.w	r6, r6, #31
 800e6ee:	d0fa      	beq.n	800e6e6 <__gethex+0x3fe>
 800e6f0:	4453      	add	r3, sl
 800e6f2:	f1c6 0620 	rsb	r6, r6, #32
 800e6f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e6fa:	f7fd ff47 	bl	800c58c <__hi0bits>
 800e6fe:	42b0      	cmp	r0, r6
 800e700:	dbe7      	blt.n	800e6d2 <__gethex+0x3ea>
 800e702:	e7f0      	b.n	800e6e6 <__gethex+0x3fe>
 800e704:	0800ee68 	.word	0x0800ee68

0800e708 <L_shift>:
 800e708:	f1c2 0208 	rsb	r2, r2, #8
 800e70c:	0092      	lsls	r2, r2, #2
 800e70e:	b570      	push	{r4, r5, r6, lr}
 800e710:	f1c2 0620 	rsb	r6, r2, #32
 800e714:	6843      	ldr	r3, [r0, #4]
 800e716:	6804      	ldr	r4, [r0, #0]
 800e718:	fa03 f506 	lsl.w	r5, r3, r6
 800e71c:	432c      	orrs	r4, r5
 800e71e:	40d3      	lsrs	r3, r2
 800e720:	6004      	str	r4, [r0, #0]
 800e722:	f840 3f04 	str.w	r3, [r0, #4]!
 800e726:	4288      	cmp	r0, r1
 800e728:	d3f4      	bcc.n	800e714 <L_shift+0xc>
 800e72a:	bd70      	pop	{r4, r5, r6, pc}

0800e72c <__match>:
 800e72c:	b530      	push	{r4, r5, lr}
 800e72e:	6803      	ldr	r3, [r0, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e736:	b914      	cbnz	r4, 800e73e <__match+0x12>
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	2001      	movs	r0, #1
 800e73c:	bd30      	pop	{r4, r5, pc}
 800e73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e742:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e746:	2d19      	cmp	r5, #25
 800e748:	bf98      	it	ls
 800e74a:	3220      	addls	r2, #32
 800e74c:	42a2      	cmp	r2, r4
 800e74e:	d0f0      	beq.n	800e732 <__match+0x6>
 800e750:	2000      	movs	r0, #0
 800e752:	e7f3      	b.n	800e73c <__match+0x10>

0800e754 <__hexnan>:
 800e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	680b      	ldr	r3, [r1, #0]
 800e75a:	6801      	ldr	r1, [r0, #0]
 800e75c:	115e      	asrs	r6, r3, #5
 800e75e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e762:	f013 031f 	ands.w	r3, r3, #31
 800e766:	b087      	sub	sp, #28
 800e768:	bf18      	it	ne
 800e76a:	3604      	addne	r6, #4
 800e76c:	2500      	movs	r5, #0
 800e76e:	1f37      	subs	r7, r6, #4
 800e770:	4682      	mov	sl, r0
 800e772:	4690      	mov	r8, r2
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	f846 5c04 	str.w	r5, [r6, #-4]
 800e77a:	46b9      	mov	r9, r7
 800e77c:	463c      	mov	r4, r7
 800e77e:	9502      	str	r5, [sp, #8]
 800e780:	46ab      	mov	fp, r5
 800e782:	784a      	ldrb	r2, [r1, #1]
 800e784:	1c4b      	adds	r3, r1, #1
 800e786:	9303      	str	r3, [sp, #12]
 800e788:	b342      	cbz	r2, 800e7dc <__hexnan+0x88>
 800e78a:	4610      	mov	r0, r2
 800e78c:	9105      	str	r1, [sp, #20]
 800e78e:	9204      	str	r2, [sp, #16]
 800e790:	f7ff fd94 	bl	800e2bc <__hexdig_fun>
 800e794:	2800      	cmp	r0, #0
 800e796:	d151      	bne.n	800e83c <__hexnan+0xe8>
 800e798:	9a04      	ldr	r2, [sp, #16]
 800e79a:	9905      	ldr	r1, [sp, #20]
 800e79c:	2a20      	cmp	r2, #32
 800e79e:	d818      	bhi.n	800e7d2 <__hexnan+0x7e>
 800e7a0:	9b02      	ldr	r3, [sp, #8]
 800e7a2:	459b      	cmp	fp, r3
 800e7a4:	dd13      	ble.n	800e7ce <__hexnan+0x7a>
 800e7a6:	454c      	cmp	r4, r9
 800e7a8:	d206      	bcs.n	800e7b8 <__hexnan+0x64>
 800e7aa:	2d07      	cmp	r5, #7
 800e7ac:	dc04      	bgt.n	800e7b8 <__hexnan+0x64>
 800e7ae:	462a      	mov	r2, r5
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7ff ffa8 	bl	800e708 <L_shift>
 800e7b8:	4544      	cmp	r4, r8
 800e7ba:	d952      	bls.n	800e862 <__hexnan+0x10e>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f1a4 0904 	sub.w	r9, r4, #4
 800e7c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7c6:	f8cd b008 	str.w	fp, [sp, #8]
 800e7ca:	464c      	mov	r4, r9
 800e7cc:	461d      	mov	r5, r3
 800e7ce:	9903      	ldr	r1, [sp, #12]
 800e7d0:	e7d7      	b.n	800e782 <__hexnan+0x2e>
 800e7d2:	2a29      	cmp	r2, #41	@ 0x29
 800e7d4:	d157      	bne.n	800e886 <__hexnan+0x132>
 800e7d6:	3102      	adds	r1, #2
 800e7d8:	f8ca 1000 	str.w	r1, [sl]
 800e7dc:	f1bb 0f00 	cmp.w	fp, #0
 800e7e0:	d051      	beq.n	800e886 <__hexnan+0x132>
 800e7e2:	454c      	cmp	r4, r9
 800e7e4:	d206      	bcs.n	800e7f4 <__hexnan+0xa0>
 800e7e6:	2d07      	cmp	r5, #7
 800e7e8:	dc04      	bgt.n	800e7f4 <__hexnan+0xa0>
 800e7ea:	462a      	mov	r2, r5
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f7ff ff8a 	bl	800e708 <L_shift>
 800e7f4:	4544      	cmp	r4, r8
 800e7f6:	d936      	bls.n	800e866 <__hexnan+0x112>
 800e7f8:	f1a8 0204 	sub.w	r2, r8, #4
 800e7fc:	4623      	mov	r3, r4
 800e7fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800e802:	f842 1f04 	str.w	r1, [r2, #4]!
 800e806:	429f      	cmp	r7, r3
 800e808:	d2f9      	bcs.n	800e7fe <__hexnan+0xaa>
 800e80a:	1b3b      	subs	r3, r7, r4
 800e80c:	f023 0303 	bic.w	r3, r3, #3
 800e810:	3304      	adds	r3, #4
 800e812:	3401      	adds	r4, #1
 800e814:	3e03      	subs	r6, #3
 800e816:	42b4      	cmp	r4, r6
 800e818:	bf88      	it	hi
 800e81a:	2304      	movhi	r3, #4
 800e81c:	4443      	add	r3, r8
 800e81e:	2200      	movs	r2, #0
 800e820:	f843 2b04 	str.w	r2, [r3], #4
 800e824:	429f      	cmp	r7, r3
 800e826:	d2fb      	bcs.n	800e820 <__hexnan+0xcc>
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	b91b      	cbnz	r3, 800e834 <__hexnan+0xe0>
 800e82c:	4547      	cmp	r7, r8
 800e82e:	d128      	bne.n	800e882 <__hexnan+0x12e>
 800e830:	2301      	movs	r3, #1
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	2005      	movs	r0, #5
 800e836:	b007      	add	sp, #28
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	3501      	adds	r5, #1
 800e83e:	2d08      	cmp	r5, #8
 800e840:	f10b 0b01 	add.w	fp, fp, #1
 800e844:	dd06      	ble.n	800e854 <__hexnan+0x100>
 800e846:	4544      	cmp	r4, r8
 800e848:	d9c1      	bls.n	800e7ce <__hexnan+0x7a>
 800e84a:	2300      	movs	r3, #0
 800e84c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e850:	2501      	movs	r5, #1
 800e852:	3c04      	subs	r4, #4
 800e854:	6822      	ldr	r2, [r4, #0]
 800e856:	f000 000f 	and.w	r0, r0, #15
 800e85a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e85e:	6020      	str	r0, [r4, #0]
 800e860:	e7b5      	b.n	800e7ce <__hexnan+0x7a>
 800e862:	2508      	movs	r5, #8
 800e864:	e7b3      	b.n	800e7ce <__hexnan+0x7a>
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d0dd      	beq.n	800e828 <__hexnan+0xd4>
 800e86c:	f1c3 0320 	rsb	r3, r3, #32
 800e870:	f04f 32ff 	mov.w	r2, #4294967295
 800e874:	40da      	lsrs	r2, r3
 800e876:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e87a:	4013      	ands	r3, r2
 800e87c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e880:	e7d2      	b.n	800e828 <__hexnan+0xd4>
 800e882:	3f04      	subs	r7, #4
 800e884:	e7d0      	b.n	800e828 <__hexnan+0xd4>
 800e886:	2004      	movs	r0, #4
 800e888:	e7d5      	b.n	800e836 <__hexnan+0xe2>

0800e88a <__ascii_mbtowc>:
 800e88a:	b082      	sub	sp, #8
 800e88c:	b901      	cbnz	r1, 800e890 <__ascii_mbtowc+0x6>
 800e88e:	a901      	add	r1, sp, #4
 800e890:	b142      	cbz	r2, 800e8a4 <__ascii_mbtowc+0x1a>
 800e892:	b14b      	cbz	r3, 800e8a8 <__ascii_mbtowc+0x1e>
 800e894:	7813      	ldrb	r3, [r2, #0]
 800e896:	600b      	str	r3, [r1, #0]
 800e898:	7812      	ldrb	r2, [r2, #0]
 800e89a:	1e10      	subs	r0, r2, #0
 800e89c:	bf18      	it	ne
 800e89e:	2001      	movne	r0, #1
 800e8a0:	b002      	add	sp, #8
 800e8a2:	4770      	bx	lr
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	e7fb      	b.n	800e8a0 <__ascii_mbtowc+0x16>
 800e8a8:	f06f 0001 	mvn.w	r0, #1
 800e8ac:	e7f8      	b.n	800e8a0 <__ascii_mbtowc+0x16>

0800e8ae <_realloc_r>:
 800e8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b2:	4680      	mov	r8, r0
 800e8b4:	4615      	mov	r5, r2
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	b921      	cbnz	r1, 800e8c4 <_realloc_r+0x16>
 800e8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8be:	4611      	mov	r1, r2
 800e8c0:	f7fb be74 	b.w	800a5ac <_malloc_r>
 800e8c4:	b92a      	cbnz	r2, 800e8d2 <_realloc_r+0x24>
 800e8c6:	f7fd fd25 	bl	800c314 <_free_r>
 800e8ca:	2400      	movs	r4, #0
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d2:	f000 f8ab 	bl	800ea2c <_malloc_usable_size_r>
 800e8d6:	4285      	cmp	r5, r0
 800e8d8:	4606      	mov	r6, r0
 800e8da:	d802      	bhi.n	800e8e2 <_realloc_r+0x34>
 800e8dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8e0:	d8f4      	bhi.n	800e8cc <_realloc_r+0x1e>
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	f7fb fe61 	bl	800a5ac <_malloc_r>
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d0ec      	beq.n	800e8ca <_realloc_r+0x1c>
 800e8f0:	42b5      	cmp	r5, r6
 800e8f2:	462a      	mov	r2, r5
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	bf28      	it	cs
 800e8f8:	4632      	movcs	r2, r6
 800e8fa:	f7fc ff10 	bl	800b71e <memcpy>
 800e8fe:	4621      	mov	r1, r4
 800e900:	4640      	mov	r0, r8
 800e902:	f7fd fd07 	bl	800c314 <_free_r>
 800e906:	463c      	mov	r4, r7
 800e908:	e7e0      	b.n	800e8cc <_realloc_r+0x1e>

0800e90a <__ascii_wctomb>:
 800e90a:	4603      	mov	r3, r0
 800e90c:	4608      	mov	r0, r1
 800e90e:	b141      	cbz	r1, 800e922 <__ascii_wctomb+0x18>
 800e910:	2aff      	cmp	r2, #255	@ 0xff
 800e912:	d904      	bls.n	800e91e <__ascii_wctomb+0x14>
 800e914:	228a      	movs	r2, #138	@ 0x8a
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	4770      	bx	lr
 800e91e:	700a      	strb	r2, [r1, #0]
 800e920:	2001      	movs	r0, #1
 800e922:	4770      	bx	lr

0800e924 <__swhatbuf_r>:
 800e924:	b570      	push	{r4, r5, r6, lr}
 800e926:	460c      	mov	r4, r1
 800e928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e92c:	2900      	cmp	r1, #0
 800e92e:	b096      	sub	sp, #88	@ 0x58
 800e930:	4615      	mov	r5, r2
 800e932:	461e      	mov	r6, r3
 800e934:	da0d      	bge.n	800e952 <__swhatbuf_r+0x2e>
 800e936:	89a3      	ldrh	r3, [r4, #12]
 800e938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e93c:	f04f 0100 	mov.w	r1, #0
 800e940:	bf14      	ite	ne
 800e942:	2340      	movne	r3, #64	@ 0x40
 800e944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e948:	2000      	movs	r0, #0
 800e94a:	6031      	str	r1, [r6, #0]
 800e94c:	602b      	str	r3, [r5, #0]
 800e94e:	b016      	add	sp, #88	@ 0x58
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	466a      	mov	r2, sp
 800e954:	f000 f848 	bl	800e9e8 <_fstat_r>
 800e958:	2800      	cmp	r0, #0
 800e95a:	dbec      	blt.n	800e936 <__swhatbuf_r+0x12>
 800e95c:	9901      	ldr	r1, [sp, #4]
 800e95e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e966:	4259      	negs	r1, r3
 800e968:	4159      	adcs	r1, r3
 800e96a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e96e:	e7eb      	b.n	800e948 <__swhatbuf_r+0x24>

0800e970 <__smakebuf_r>:
 800e970:	898b      	ldrh	r3, [r1, #12]
 800e972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e974:	079d      	lsls	r5, r3, #30
 800e976:	4606      	mov	r6, r0
 800e978:	460c      	mov	r4, r1
 800e97a:	d507      	bpl.n	800e98c <__smakebuf_r+0x1c>
 800e97c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	2301      	movs	r3, #1
 800e986:	6163      	str	r3, [r4, #20]
 800e988:	b003      	add	sp, #12
 800e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98c:	ab01      	add	r3, sp, #4
 800e98e:	466a      	mov	r2, sp
 800e990:	f7ff ffc8 	bl	800e924 <__swhatbuf_r>
 800e994:	9f00      	ldr	r7, [sp, #0]
 800e996:	4605      	mov	r5, r0
 800e998:	4639      	mov	r1, r7
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7fb fe06 	bl	800a5ac <_malloc_r>
 800e9a0:	b948      	cbnz	r0, 800e9b6 <__smakebuf_r+0x46>
 800e9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9a6:	059a      	lsls	r2, r3, #22
 800e9a8:	d4ee      	bmi.n	800e988 <__smakebuf_r+0x18>
 800e9aa:	f023 0303 	bic.w	r3, r3, #3
 800e9ae:	f043 0302 	orr.w	r3, r3, #2
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	e7e2      	b.n	800e97c <__smakebuf_r+0xc>
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	6020      	str	r0, [r4, #0]
 800e9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9be:	81a3      	strh	r3, [r4, #12]
 800e9c0:	9b01      	ldr	r3, [sp, #4]
 800e9c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e9c6:	b15b      	cbz	r3, 800e9e0 <__smakebuf_r+0x70>
 800e9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f000 f81d 	bl	800ea0c <_isatty_r>
 800e9d2:	b128      	cbz	r0, 800e9e0 <__smakebuf_r+0x70>
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	f023 0303 	bic.w	r3, r3, #3
 800e9da:	f043 0301 	orr.w	r3, r3, #1
 800e9de:	81a3      	strh	r3, [r4, #12]
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	431d      	orrs	r5, r3
 800e9e4:	81a5      	strh	r5, [r4, #12]
 800e9e6:	e7cf      	b.n	800e988 <__smakebuf_r+0x18>

0800e9e8 <_fstat_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d07      	ldr	r5, [pc, #28]	@ (800ea08 <_fstat_r+0x20>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	f7f2 fcbf 	bl	8001378 <_fstat>
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	d102      	bne.n	800ea04 <_fstat_r+0x1c>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b103      	cbz	r3, 800ea04 <_fstat_r+0x1c>
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	bf00      	nop
 800ea08:	24004eb4 	.word	0x24004eb4

0800ea0c <_isatty_r>:
 800ea0c:	b538      	push	{r3, r4, r5, lr}
 800ea0e:	4d06      	ldr	r5, [pc, #24]	@ (800ea28 <_isatty_r+0x1c>)
 800ea10:	2300      	movs	r3, #0
 800ea12:	4604      	mov	r4, r0
 800ea14:	4608      	mov	r0, r1
 800ea16:	602b      	str	r3, [r5, #0]
 800ea18:	f7f2 fcbe 	bl	8001398 <_isatty>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_isatty_r+0x1a>
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_isatty_r+0x1a>
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	24004eb4 	.word	0x24004eb4

0800ea2c <_malloc_usable_size_r>:
 800ea2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea30:	1f18      	subs	r0, r3, #4
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	bfbc      	itt	lt
 800ea36:	580b      	ldrlt	r3, [r1, r0]
 800ea38:	18c0      	addlt	r0, r0, r3
 800ea3a:	4770      	bx	lr

0800ea3c <_init>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	bf00      	nop
 800ea40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea42:	bc08      	pop	{r3}
 800ea44:	469e      	mov	lr, r3
 800ea46:	4770      	bx	lr

0800ea48 <_fini>:
 800ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4a:	bf00      	nop
 800ea4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4e:	bc08      	pop	{r3}
 800ea50:	469e      	mov	lr, r3
 800ea52:	4770      	bx	lr
