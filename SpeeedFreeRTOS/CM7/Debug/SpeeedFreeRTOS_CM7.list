
SpeeedFreeRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d074  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800d318  0800d318  0000e318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da44  0800da44  0000f284  2**0
                  CONTENTS
  4 .ARM          00000008  0800da44  0800da44  0000ea44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da4c  0800da4c  0000f284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da50  0800da50  0000ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  24000000  0800da54  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c38  24000284  0800dcd8  0000f284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004ebc  0800dcd8  0000febc  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  0800dcd8  00010000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023739  00000000  00000000  0000f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057f4  00000000  00000000  000329eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  000381e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ba  00000000  00000000  00039e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f19d  00000000  00000000  0003b44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002467b  00000000  00000000  0007a5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00190b38  00000000  00000000  0009ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022f79a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088e8  00000000  00000000  0022f7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  002380c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000284 	.word	0x24000284
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d2fc 	.word	0x0800d2fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000288 	.word	0x24000288
 80002dc:	0800d2fc 	.word	0x0800d2fc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <SystemInit+0xfc>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000894 <SystemInit+0xfc>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <SystemInit+0xfc>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <SystemInit+0xfc>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <SystemInit+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	2b06      	cmp	r3, #6
 80007c2:	d807      	bhi.n	80007d4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c4:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <SystemInit+0x100>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	4a32      	ldr	r2, [pc, #200]	@ (8000898 <SystemInit+0x100>)
 80007ce:	f043 0307 	orr.w	r3, r3, #7
 80007d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SystemInit+0x104>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a30      	ldr	r2, [pc, #192]	@ (800089c <SystemInit+0x104>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <SystemInit+0x104>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <SystemInit+0x104>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	492c      	ldr	r1, [pc, #176]	@ (800089c <SystemInit+0x104>)
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <SystemInit+0x108>)
 80007ee:	4013      	ands	r3, r2
 80007f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <SystemInit+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d007      	beq.n	800080e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemInit+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 030f 	bic.w	r3, r3, #15
 8000806:	4a24      	ldr	r2, [pc, #144]	@ (8000898 <SystemInit+0x100>)
 8000808:	f043 0307 	orr.w	r3, r3, #7
 800080c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemInit+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <SystemInit+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemInit+0x104>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <SystemInit+0x104>)
 8000822:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <SystemInit+0x10c>)
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemInit+0x104>)
 8000828:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <SystemInit+0x110>)
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemInit+0x104>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <SystemInit+0x114>)
 8000830:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <SystemInit+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <SystemInit+0x104>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <SystemInit+0x114>)
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <SystemInit+0x104>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <SystemInit+0x104>)
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <SystemInit+0x114>)
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <SystemInit+0x104>)
 800084c:	2200      	movs	r2, #0
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0x104>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <SystemInit+0x104>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <SystemInit+0x104>)
 800085e:	2200      	movs	r2, #0
 8000860:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <SystemInit+0x118>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <SystemInit+0x118>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <SystemInit+0x11c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <SystemInit+0x120>)
 8000874:	4013      	ands	r3, r2
 8000876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800087a:	d202      	bcs.n	8000882 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <SystemInit+0x124>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <SystemInit+0x128>)
 8000884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000888:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	52002000 	.word	0x52002000
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	02020200 	.word	0x02020200
 80008a8:	01ff0000 	.word	0x01ff0000
 80008ac:	01010280 	.word	0x01010280
 80008b0:	580000c0 	.word	0x580000c0
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d101      	bne.n	80008de <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <rpmsg_send+0x3c>)
 80008dc:	e00c      	b.n	80008f8 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f006 fd99 	bl	8007428 <rpmsg_send_offchannel_raw>
 80008f6:	4603      	mov	r3, r0
					 len, true);
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	fffff829 	.word	0xfffff829

08000904 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2220      	movs	r2, #32
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4618      	mov	r0, r3
 800091a:	f009 fac6 	bl	8009eaa <strncpy>
	ept->addr = src;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <getPercent>:
 * @param lowerBound lower border value
 * @param upperBound upper border value
 * @returns float4 value between 0 and 1
 */
float getPercent(float value, float lowerBound, float upperBound)
{
 800093e:	b480      	push	{r7}
 8000940:	b087      	sub	sp, #28
 8000942:	af00      	add	r7, sp, #0
 8000944:	ed87 0a03 	vstr	s0, [r7, #12]
 8000948:	edc7 0a02 	vstr	s1, [r7, #8]
 800094c:	ed87 1a01 	vstr	s2, [r7, #4]
	float percentage = (value - lowerBound) / (upperBound - lowerBound);
 8000950:	ed97 7a03 	vldr	s14, [r7, #12]
 8000954:	edd7 7a02 	vldr	s15, [r7, #8]
 8000958:	ee77 6a67 	vsub.f32	s13, s14, s15
 800095c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000960:	edd7 7a02 	vldr	s15, [r7, #8]
 8000964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800096c:	edc7 7a05 	vstr	s15, [r7, #20]
	if(percentage > 1) percentage = 1;
 8000970:	edd7 7a05 	vldr	s15, [r7, #20]
 8000974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000980:	dd02      	ble.n	8000988 <getPercent+0x4a>
 8000982:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000986:	617b      	str	r3, [r7, #20]
	if(percentage < 0) percentage = 0;
 8000988:	edd7 7a05 	vldr	s15, [r7, #20]
 800098c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000994:	d502      	bpl.n	800099c <getPercent+0x5e>
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

	return percentage;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	ee07 3a90 	vmov	s15, r3
}
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <rpmsg_recv_callback>:
static volatile int service_created;
volatile uint32_t received_data;	//received data (change to given struct)
volatile uint32_t received_data1;
static struct rpmsg_endpoint rp_endpoint;
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *prv)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	DataIdentifier *id = (DataIdentifier *)data;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	617b      	str	r3, [r7, #20]
	if(*id == TORQUE_SENSOR)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10c      	bne.n	80009e4 <rpmsg_recv_callback+0x34>
	{
		test = (TorqueEncoder *)data;
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	6013      	str	r3, [r2, #0]
		received_data = test->valueInt;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <rpmsg_recv_callback+0x4c>)
 80009d8:	6013      	str	r3, [r2, #0]
		received_data1 = test->sensor1;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <rpmsg_recv_callback+0x50>)
 80009e2:	6013      	str	r3, [r2, #0]
	}
	message_received = 1;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <rpmsg_recv_callback+0x54>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

	return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	240002c0 	.word	0x240002c0
 80009fc:	240002cc 	.word	0x240002cc
 8000a00:	240002d0 	.word	0x240002d0
 8000a04:	240002c4 	.word	0x240002c4

08000a08 <serice_destroy_cb>:
void serice_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	service_created = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <serice_destroy_cb+0x1c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	240002c8 	.word	0x240002c8

08000a28 <new_service_cb>:
void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	OPENAMP_create_endpoint(&rp_endpoint, name,
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <new_service_cb+0x2c>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <new_service_cb+0x30>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <new_service_cb+0x34>)
 8000a40:	f008 f938 	bl	8008cb4 <OPENAMP_create_endpoint>
	          dest, rpmsg_recv_callback,
			  serice_destroy_cb);
	service_created = 1;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <new_service_cb+0x38>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08000a09 	.word	0x08000a09
 8000a58:	080009b1 	.word	0x080009b1
 8000a5c:	240002d4 	.word	0x240002d4
 8000a60:	240002c8 	.word	0x240002c8

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a6a:	f000 faf3 	bl	8001054 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a6e:	4b62      	ldr	r3, [pc, #392]	@ (8000bf8 <main+0x194>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11b      	bne.n	8000ab2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7a:	f3bf 8f4f 	dsb	sy
}
 8000a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
}
 8000a84:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a86:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf8 <main+0x194>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8e:	f3bf 8f4f 	dsb	sy
}
 8000a92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a94:	f3bf 8f6f 	isb	sy
}
 8000a98:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a9a:	4b57      	ldr	r3, [pc, #348]	@ (8000bf8 <main+0x194>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a56      	ldr	r2, [pc, #344]	@ (8000bf8 <main+0x194>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa6:	f3bf 8f4f 	dsb	sy
}
 8000aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aac:	f3bf 8f6f 	isb	sy
}
 8000ab0:	e000      	b.n	8000ab4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ab2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ab4:	4b50      	ldr	r3, [pc, #320]	@ (8000bf8 <main+0x194>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d138      	bne.n	8000b32 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf8 <main+0x194>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ace:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <main+0x194>)
 8000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ad4:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	0b5b      	lsrs	r3, r3, #13
 8000ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ade:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000af2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	493f      	ldr	r1, [pc, #252]	@ (8000bf8 <main+0x194>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ef      	bne.n	8000aea <main+0x86>
    } while(sets-- != 0U);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	60fa      	str	r2, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e5      	bne.n	8000ae0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
}
 8000b18:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b1a:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <main+0x194>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a36      	ldr	r2, [pc, #216]	@ (8000bf8 <main+0x194>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b2c:	f3bf 8f6f 	isb	sy
}
 8000b30:	e000      	b.n	8000b34 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b32:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b38:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b3a:	bf00      	nop
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <main+0x198>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <main+0xee>
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	617a      	str	r2, [r7, #20]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dcf4      	bgt.n	8000b3c <main+0xd8>
  if ( timeout < 0 )
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da01      	bge.n	8000b5c <main+0xf8>
  {
  Error_Handler();
 8000b58:	f000 fabc 	bl	80010d4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fc62 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f860 	bl	8000c24 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b64:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <main+0x198>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	4a24      	ldr	r2, [pc, #144]	@ (8000bfc <main+0x198>)
 8000b6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <main+0x198>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 fff2 	bl	8001b6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f001 f808 	bl	8001ba0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b94:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b96:	bf00      	nop
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <main+0x198>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <main+0x14a>
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	617a      	str	r2, [r7, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dcf4      	bgt.n	8000b98 <main+0x134>
if ( timeout < 0 )
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da01      	bge.n	8000bb8 <main+0x154>
{
Error_Handler();
 8000bb4:	f000 fa8e 	bl	80010d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f8b4 	bl	8000d24 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bbc:	f002 fbae 	bl	800331c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <main+0x19c>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	480f      	ldr	r0, [pc, #60]	@ (8000c04 <main+0x1a0>)
 8000bc6:	f002 fbf3 	bl	80033b0 <osThreadNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <main+0x1a4>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* creation of txTask */
  txTaskHandle = osThreadNew(startTxTask, NULL, &txTask_attributes);
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <main+0x1a8>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <main+0x1ac>)
 8000bd6:	f002 fbeb 	bl	80033b0 <osThreadNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <main+0x1b0>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* creation of calculateTask */
  calculateTaskHandle = osThreadNew(startCalculateTask, NULL, &calculateTask_attributes);
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <main+0x1b4>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <main+0x1b8>)
 8000be6:	f002 fbe3 	bl	80033b0 <osThreadNew>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <main+0x1bc>)
 8000bee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf0:	f002 fbb8 	bl	8003364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <main+0x190>
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	0800d544 	.word	0x0800d544
 8000c04:	08000df5 	.word	0x08000df5
 8000c08:	240002a0 	.word	0x240002a0
 8000c0c:	0800d568 	.word	0x0800d568
 8000c10:	08000ea9 	.word	0x08000ea9
 8000c14:	240002a4 	.word	0x240002a4
 8000c18:	0800d58c 	.word	0x0800d58c
 8000c1c:	08000f5d 	.word	0x08000f5d
 8000c20:	240002a8 	.word	0x240002a8

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	@ 0x70
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	224c      	movs	r2, #76	@ 0x4c
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f009 f91f 	bl	8009e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f009 f919 	bl	8009e76 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c44:	2004      	movs	r0, #4
 8000c46:	f000 ffeb 	bl	8001c20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <SystemClock_Config+0xf8>)
 8000c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c52:	4a32      	ldr	r2, [pc, #200]	@ (8000d1c <SystemClock_Config+0xf8>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <SystemClock_Config+0xf8>)
 8000c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <SystemClock_Config+0xfc>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000d20 <SystemClock_Config+0xfc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <SystemClock_Config+0xfc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c80:	bf00      	nop
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <SystemClock_Config+0xfc>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c8e:	d1f8      	bne.n	8000c82 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c90:	2303      	movs	r3, #3
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8000c9a:	2309      	movs	r3, #9
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f800 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cda:	f000 f9fb 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	233f      	movs	r3, #63	@ 0x3f
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fc40 	bl	8002588 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d0e:	f000 f9e1 	bl	80010d4 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3770      	adds	r7, #112	@ 0x70
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_GPIO_Init+0xc4>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2120      	movs	r1, #32
 8000d98:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_GPIO_Init+0xc8>)
 8000d9a:	f000 feb3 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	4813      	ldr	r0, [pc, #76]	@ (8000df0 <MX_GPIO_Init+0xcc>)
 8000da4:	f000 feae 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da8:	2320      	movs	r3, #32
 8000daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <MX_GPIO_Init+0xc8>)
 8000dc0:	f000 fcf0 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_GPIO_Init+0xcc>)
 8000ddc:	f000 fce2 	bl	80017a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58021000 	.word	0x58021000

08000df4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
 //initalize OPENAMP and MAILBOX
	MAILBOX_Init();
 8000dfc:	f007 fd9e 	bl	800893c <MAILBOX_Init>
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 8000e00:	2300      	movs	r3, #0
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	491f      	ldr	r1, [pc, #124]	@ (8000e90 <StartDefaultTask+0x9c>)
 8000e12:	4820      	ldr	r0, [pc, #128]	@ (8000e94 <StartDefaultTask+0xa0>)
 8000e14:	f7ff fd76 	bl	8000904 <rpmsg_init_ept>
	if(MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK) Error_Handler();
 8000e18:	491f      	ldr	r1, [pc, #124]	@ (8000e98 <StartDefaultTask+0xa4>)
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f007 fea8 	bl	8008b70 <MX_OPENAMP_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <StartDefaultTask+0x36>
 8000e26:	f000 f955 	bl	80010d4 <Error_Handler>

	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000e2a:	481a      	ldr	r0, [pc, #104]	@ (8000e94 <StartDefaultTask+0xa0>)
 8000e2c:	f007 ff6c 	bl	8008d08 <OPENAMP_Wait_EndPointready>
	int *initalSend = (int*) pvPortMalloc(sizeof(int));
 8000e30:	2004      	movs	r0, #4
 8000e32:	f002 fb9f 	bl	8003574 <pvPortMalloc>
 8000e36:	60f8      	str	r0, [r7, #12]
	*initalSend = 0;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	if(OPENAMP_send(&rp_endpoint, initalSend, sizeof(int)) < 0) Error_Handler(); //If this isn't here code breaks for some reason.
 8000e3e:	2204      	movs	r2, #4
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <StartDefaultTask+0xa0>)
 8000e44:	f7ff fd3e 	bl	80008c4 <rpmsg_send>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da01      	bge.n	8000e52 <StartDefaultTask+0x5e>
 8000e4e:	f000 f941 	bl	80010d4 <Error_Handler>
	vPortFree(initalSend);
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f002 fc5c 	bl	8003710 <vPortFree>
  /* Infinite loop */
  for(;;)
  {
	  if(service_created)
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <StartDefaultTask+0xa8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <StartDefaultTask+0x72>
	  {
		  OPENAMP_check_for_message(); //continously check for message from M4 core(slave).
 8000e60:	f007 ff46 	bl	8008cf0 <OPENAMP_check_for_message>
 8000e64:	e001      	b.n	8000e6a <StartDefaultTask+0x76>
	  }
	  else //service destroyed
	  {
		  OPENAMP_DeInit();
 8000e66:	f007 ff19 	bl	8008c9c <OPENAMP_DeInit>
	  }
	  if(message_received)
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <StartDefaultTask+0xac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <StartDefaultTask+0x92>
	  {
		  //Message received, notify other tasks to start calculation
		  xTaskNotifyGive(calculateTaskHandle);
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <StartDefaultTask+0xb0>)
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	2202      	movs	r2, #2
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f004 fc68 	bl	8005750 <xTaskGenericNotify>
		  message_received = 0;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <StartDefaultTask+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f002 fb24 	bl	80034d4 <osDelay>
	  if(service_created)
 8000e8c:	e7e4      	b.n	8000e58 <StartDefaultTask+0x64>
 8000e8e:	bf00      	nop
 8000e90:	0800d33c 	.word	0x0800d33c
 8000e94:	240002d4 	.word	0x240002d4
 8000e98:	08000a29 	.word	0x08000a29
 8000e9c:	240002c8 	.word	0x240002c8
 8000ea0:	240002c4 	.word	0x240002c4
 8000ea4:	240002a8 	.word	0x240002a8

08000ea8 <startTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxTask */
void startTxTask(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxTask */
  /* Infinite loop */
  for(;;)
  {
	  //WAIT FOR ALL CALCULATION TAKS TO FINISH
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e007      	b.n	8000ec6 <startTxTask+0x1e>
	  {
		  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task
 8000eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f004 fc00 	bl	80056c0 <ulTaskNotifyTake>
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	ddf4      	ble.n	8000eb6 <startTxTask+0xe>
	  }
	  //send data back to C4
	  TorqueEncoder *test = (TorqueEncoder*)pvPortMalloc(sizeof(struct TorqueEncoder));
 8000ecc:	2020      	movs	r0, #32
 8000ece:	f002 fb51 	bl	8003574 <pvPortMalloc>
 8000ed2:	60b8      	str	r0, [r7, #8]
	  test -> id = TORQUE_SENSOR;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	  test -> valueFloat = calcFloatTest;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <startTxTask+0x94>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	619a      	str	r2, [r3, #24]
	  test -> valueInt = message;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <startTxTask+0x98>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	605a      	str	r2, [r3, #4]
	  test -> sensor1 = received_data1;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <startTxTask+0x9c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	609a      	str	r2, [r3, #8]
	  test -> sensorPercent0 = sensorData;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <startTxTask+0xa0>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
	  test -> sensorPercent1 = sensorData1;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <startTxTask+0xa4>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	611a      	str	r2, [r3, #16]
	  test -> travelPercent = travelPercent;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <startTxTask+0xa8>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	615a      	str	r2, [r3, #20]
	  test -> valueBool = false;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	771a      	strb	r2, [r3, #28]

	  if(OPENAMP_send(&rp_endpoint, test, sizeof(struct TorqueEncoder)) < 0) Error_Handler(); //send given message to other core this is also status
 8000f10:	2220      	movs	r2, #32
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <startTxTask+0xac>)
 8000f16:	f7ff fcd5 	bl	80008c4 <rpmsg_send>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da01      	bge.n	8000f24 <startTxTask+0x7c>
 8000f20:	f000 f8d8 	bl	80010d4 <Error_Handler>

	  vPortFree(test);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f002 fbf3 	bl	8003710 <vPortFree>
	  HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <startTxTask+0xb0>)
 8000f2e:	f000 fe02 	bl	8001b36 <HAL_GPIO_TogglePin>

	  osDelay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f002 face 	bl	80034d4 <osDelay>
  {
 8000f38:	e7ba      	b.n	8000eb0 <startTxTask+0x8>
 8000f3a:	bf00      	nop
 8000f3c:	240002bc 	.word	0x240002bc
 8000f40:	240002ac 	.word	0x240002ac
 8000f44:	240002d0 	.word	0x240002d0
 8000f48:	240002b0 	.word	0x240002b0
 8000f4c:	240002b4 	.word	0x240002b4
 8000f50:	240002b8 	.word	0x240002b8
 8000f54:	240002d4 	.word	0x240002d4
 8000f58:	58021000 	.word	0x58021000

08000f5c <startCalculateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCalculateTask */
void startCalculateTask(void *argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCalculateTask */
	//BEGIN CALCULATION (after done data will be stored at a certain variable/struct
	//Notify Sending task when done

	//ABSTRACT TO ANOTHER FILE
	const int MAX_VALUE = 4095;
 8000f64:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f68:	60fb      	str	r3, [r7, #12]
	const int MIN_VALUE = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 8000f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f72:	2001      	movs	r0, #1
 8000f74:	f004 fba4 	bl	80056c0 <ulTaskNotifyTake>

	  sensorData = getPercent(test->valueInt, MIN_VALUE, MAX_VALUE);
 8000f78:	4b30      	ldr	r3, [pc, #192]	@ (800103c <startCalculateTask+0xe0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	ee07 3a10 	vmov	s14, r3
 8000f8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	ee06 3a90 	vmov	s13, r3
 8000f96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000f9a:	eeb0 1a66 	vmov.f32	s2, s13
 8000f9e:	eef0 0a47 	vmov.f32	s1, s14
 8000fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa6:	f7ff fcca 	bl	800093e <getPercent>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <startCalculateTask+0xe4>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]
	  sensorData1 = getPercent(test->sensor1, MIN_VALUE, MAX_VALUE);
 8000fb4:	4b21      	ldr	r3, [pc, #132]	@ (800103c <startCalculateTask+0xe0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	ee07 3a10 	vmov	s14, r3
 8000fc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	ee06 3a90 	vmov	s13, r3
 8000fd2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000fd6:	eeb0 1a66 	vmov.f32	s2, s13
 8000fda:	eef0 0a47 	vmov.f32	s1, s14
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	f7ff fcac 	bl	800093e <getPercent>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <startCalculateTask+0xe8>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]

	  travelPercent = (sensorData + sensorData1) / 2; //average travel percentage
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <startCalculateTask+0xe4>)
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <startCalculateTask+0xe8>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <startCalculateTask+0xec>)
 800100a:	edc3 7a00 	vstr	s15, [r3]
	  travelPercent = travelPercent * 2400;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <startCalculateTask+0xec>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800104c <startCalculateTask+0xf0>
 8001018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <startCalculateTask+0xec>)
 800101e:	edc3 7a00 	vstr	s15, [r3]

	  xTaskNotifyGive(txTaskHandle);
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <startCalculateTask+0xf4>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	2202      	movs	r2, #2
 800102a:	2100      	movs	r1, #0
 800102c:	f004 fb90 	bl	8005750 <xTaskGenericNotify>
	  osDelay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f002 fa4f 	bl	80034d4 <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 8001036:	bf00      	nop
 8001038:	e799      	b.n	8000f6e <startCalculateTask+0x12>
 800103a:	bf00      	nop
 800103c:	240002c0 	.word	0x240002c0
 8001040:	240002b0 	.word	0x240002b0
 8001044:	240002b4 	.word	0x240002b4
 8001048:	240002b8 	.word	0x240002b8
 800104c:	45160000 	.word	0x45160000
 8001050:	240002a4 	.word	0x240002a4

08001054 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001066:	f000 fb25 	bl	80016b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800106a:	2301      	movs	r3, #1
 800106c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800106e:	2300      	movs	r3, #0
 8001070:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8001072:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001076:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001078:	230f      	movs	r3, #15
 800107a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800107c:	2300      	movs	r3, #0
 800107e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001080:	2300      	movs	r3, #0
 8001082:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001084:	2303      	movs	r3, #3
 8001086:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800108c:	2301      	movs	r3, #1
 800108e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001098:	463b      	mov	r3, r7
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fb42 	bl	8001724 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010a0:	2004      	movs	r0, #4
 80010a2:	f000 fb1f 	bl	80016e4 <HAL_MPU_Enable>

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c2:	f000 f9eb 	bl	800149c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010000 	.word	0x40010000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <HAL_MspInit+0x48>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <HAL_MspInit+0x48>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_MspInit+0x48>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	210f      	movs	r1, #15
 8001108:	f06f 0001 	mvn.w	r0, #1
 800110c:	f000 faaa 	bl	8001664 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2105      	movs	r1, #5
 8001114:	207d      	movs	r0, #125	@ 0x7d
 8001116:	f000 faa5 	bl	8001664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800111a:	207d      	movs	r0, #125	@ 0x7d
 800111c:	f000 fabc 	bl	8001698 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58024400 	.word	0x58024400

0800112c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d842      	bhi.n	80011c0 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800113a:	2200      	movs	r2, #0
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	2019      	movs	r0, #25
 8001140:	f000 fa90 	bl	8001664 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001144:	2019      	movs	r0, #25
 8001146:	f000 faa7 	bl	8001698 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <HAL_InitTick+0xac>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_InitTick+0xb0>)
 8001152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <HAL_InitTick+0xb0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <HAL_InitTick+0xb0>)
 8001162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fd7b 	bl	8002c74 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800117e:	f001 fd63 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8001182:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001186:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <HAL_InitTick+0xb4>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0c9b      	lsrs	r3, r3, #18
 800118e:	3b01      	subs	r3, #1
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_InitTick+0xb8>)
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <HAL_InitTick+0xbc>)
 8001196:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0xb8>)
 800119a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800119e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_InitTick+0xb8>)
 80011a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_InitTick+0xb8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_InitTick+0xb8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <HAL_InitTick+0xb8>)
 80011b4:	f001 fda0 	bl	8002cf8 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <HAL_InitTick+0xa2>
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e005      	b.n	80011d0 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <HAL_InitTick+0xb8>)
 80011c6:	f001 fdf9 	bl	8002dbc <HAL_TIM_Base_Start_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3738      	adds	r7, #56	@ 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24000008 	.word	0x24000008
 80011dc:	58024400 	.word	0x58024400
 80011e0:	431bde83 	.word	0x431bde83
 80011e4:	24000314 	.word	0x24000314
 80011e8:	40010000 	.word	0x40010000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <TIM1_UP_IRQHandler+0x10>)
 800122a:	f001 fe3f 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000314 	.word	0x24000314

08001238 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800123c:	f000 fcd6 	bl	8001bec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125e:	f008 fe91 	bl	8009f84 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <_exit+0x12>

0800128a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e00a      	b.n	80012b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129c:	f3af 8000 	nop.w
 80012a0:	4601      	mov	r1, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf0      	blt.n	800129c <_read+0x12>
  }

  return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e009      	b.n	80012ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	60ba      	str	r2, [r7, #8]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbf1      	blt.n	80012d6 <_write+0x12>
  }
  return len;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_close>:

int _close(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001324:	605a      	str	r2, [r3, #4]
  return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_isatty>:

int _isatty(int file)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f008 fdf6 	bl	8009f84 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24080000 	.word	0x24080000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	24000360 	.word	0x24000360
 80013cc:	24004ec0 	.word	0x24004ec0

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d4:	f7ff f9e0 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f008 fdc7 	bl	8009f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fb2f 	bl	8000a64 <main>
  bx  lr
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800140c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001410:	24000284 	.word	0x24000284
  ldr r2, =_sidata
 8001414:	0800da54 	.word	0x0800da54
  ldr r2, =_sbss
 8001418:	24000284 	.word	0x24000284
  ldr r4, =_ebss
 800141c:	24004ebc 	.word	0x24004ebc

08001420 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC3_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f90f 	bl	800164e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001430:	f001 fa60 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4913      	ldr	r1, [pc, #76]	@ (8001490 <HAL_Init+0x6c>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_Init+0x68>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <HAL_Init+0x6c>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_Init+0x70>)
 8001466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_Init+0x74>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	200f      	movs	r0, #15
 8001470:	f7ff fe5c 	bl	800112c <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e002      	b.n	8001484 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147e:	f7ff fe2f 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58024400 	.word	0x58024400
 8001490:	0800d534 	.word	0x0800d534
 8001494:	24000004 	.word	0x24000004
 8001498:	24000000 	.word	0x24000000

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2400000c 	.word	0x2400000c
 80014c0:	24000364 	.word	0x24000364

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	24000364 	.word	0x24000364

080014dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetREVID+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0c1b      	lsrs	r3, r3, #16
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	5c001000 	.word	0x5c001000

080014f4 <__NVIC_SetPriorityGrouping>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	4313      	orrs	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	05fa0000 	.word	0x05fa0000

0800153c <__NVIC_GetPriorityGrouping>:
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff4c 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff63 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb3 	bl	80015e8 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff82 	bl	8001594 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff56 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016b8:	f3bf 8f5f 	dmb	sy
}
 80016bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_MPU_Disable+0x28>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <HAL_MPU_Disable+0x28>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_MPU_Disable+0x2c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00
 80016e0:	e000ed90 	.word	0xe000ed90

080016e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016ec:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_MPU_Enable+0x38>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_MPU_Enable+0x3c>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_MPU_Enable+0x3c>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001700:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001702:	f3bf 8f4f 	dsb	sy
}
 8001706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001708:	f3bf 8f6f 	isb	sy
}
 800170c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed90 	.word	0xe000ed90
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	785a      	ldrb	r2, [r3, #1]
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001732:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7adb      	ldrb	r3, [r3, #11]
 8001752:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a9b      	ldrb	r3, [r3, #10]
 800175a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800175c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7b5b      	ldrb	r3, [r3, #13]
 8001762:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7b9b      	ldrb	r3, [r3, #14]
 800176a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800176c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7bdb      	ldrb	r3, [r3, #15]
 8001772:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7a5b      	ldrb	r3, [r3, #9]
 800177a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800177c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a1b      	ldrb	r3, [r3, #8]
 8001782:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001784:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800178e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001790:	6113      	str	r3, [r2, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed90 	.word	0xe000ed90

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017b2:	4b89      	ldr	r3, [pc, #548]	@ (80019d8 <HAL_GPIO_Init+0x234>)
 80017b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017b6:	e194      	b.n	8001ae2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8186 	beq.w	8001adc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d005      	beq.n	80017e8 <HAL_GPIO_Init+0x44>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d130      	bne.n	800184a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181e:	2201      	movs	r2, #1
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 0201 	and.w	r2, r3, #1
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b03      	cmp	r3, #3
 8001854:	d017      	beq.n	8001886 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80e0 	beq.w	8001adc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <HAL_GPIO_Init+0x238>)
 800191e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001922:	4a2e      	ldr	r2, [pc, #184]	@ (80019dc <HAL_GPIO_Init+0x238>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800192c:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <HAL_GPIO_Init+0x238>)
 800192e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a29      	ldr	r2, [pc, #164]	@ (80019e0 <HAL_GPIO_Init+0x23c>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <HAL_GPIO_Init+0x240>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d052      	beq.n	8001a0c <HAL_GPIO_Init+0x268>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <HAL_GPIO_Init+0x244>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d031      	beq.n	80019d2 <HAL_GPIO_Init+0x22e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <HAL_GPIO_Init+0x248>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <HAL_GPIO_Init+0x22a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <HAL_GPIO_Init+0x24c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x226>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <HAL_GPIO_Init+0x250>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x222>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_GPIO_Init+0x254>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x21e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a1a      	ldr	r2, [pc, #104]	@ (80019fc <HAL_GPIO_Init+0x258>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <HAL_GPIO_Init+0x25c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a18      	ldr	r2, [pc, #96]	@ (8001a04 <HAL_GPIO_Init+0x260>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_GPIO_Init+0x264>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x20e>
 80019ae:	2309      	movs	r3, #9
 80019b0:	e02d      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019b2:	230a      	movs	r3, #10
 80019b4:	e02b      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019b6:	2308      	movs	r3, #8
 80019b8:	e029      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e027      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019be:	2306      	movs	r3, #6
 80019c0:	e025      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e023      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e01f      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e01d      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e01b      	b.n	8001a0e <HAL_GPIO_Init+0x26a>
 80019d6:	bf00      	nop
 80019d8:	58000080 	.word	0x58000080
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58000400 	.word	0x58000400
 80019e4:	58020000 	.word	0x58020000
 80019e8:	58020400 	.word	0x58020400
 80019ec:	58020800 	.word	0x58020800
 80019f0:	58020c00 	.word	0x58020c00
 80019f4:	58021000 	.word	0x58021000
 80019f8:	58021400 	.word	0x58021400
 80019fc:	58021800 	.word	0x58021800
 8001a00:	58021c00 	.word	0x58021c00
 8001a04:	58022000 	.word	0x58022000
 8001a08:	58022400 	.word	0x58022400
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1e:	4938      	ldr	r1, [pc, #224]	@ (8001b00 <HAL_GPIO_Init+0x35c>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae63 	bne.w	80017b8 <HAL_GPIO_Init+0x14>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	3724      	adds	r7, #36	@ 0x24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	58000400 	.word	0x58000400

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b48:	887a      	ldrh	r2, [r7, #2]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	041a      	lsls	r2, r3, #16
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	400b      	ands	r3, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b74:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <HAL_HSEM_FastTake+0x2c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3320      	adds	r3, #32
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_HSEM_FastTake+0x30>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	58026400 	.word	0x58026400
 8001b9c:	80000300 	.word	0x80000300

08001ba0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001baa:	4906      	ldr	r1, [pc, #24]	@ (8001bc4 <HAL_HSEM_Release+0x24>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58026400 	.word	0x58026400

08001bc8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_HSEM_ActivateNotification+0x20>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4904      	ldr	r1, [pc, #16]	@ (8001be8 <HAL_HSEM_ActivateNotification+0x20>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
#endif
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	58026500 	.word	0x58026500

08001bec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_HSEM_IRQHandler+0x30>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_HSEM_IRQHandler+0x30>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4906      	ldr	r1, [pc, #24]	@ (8001c1c <HAL_HSEM_IRQHandler+0x30>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <HAL_HSEM_IRQHandler+0x30>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f006 fe85 	bl	800891c <HAL_HSEM_FreeCallback>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	58026500 	.word	0x58026500

08001c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c28:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d00a      	beq.n	8001c4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e040      	b.n	8001cc8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e03e      	b.n	8001cc8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c52:	491f      	ldr	r1, [pc, #124]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c5a:	f7ff fc33 	bl	80014c4 <HAL_GetTick>
 8001c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c60:	e009      	b.n	8001c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c62:	f7ff fc2f 	bl	80014c4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c70:	d901      	bls.n	8001c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e028      	b.n	8001cc8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c82:	d1ee      	bne.n	8001c62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b1e      	cmp	r3, #30
 8001c88:	d008      	beq.n	8001c9c <HAL_PWREx_ConfigSupply+0x7c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c8e:	d005      	beq.n	8001c9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b1d      	cmp	r3, #29
 8001c94:	d002      	beq.n	8001c9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c9a:	d114      	bne.n	8001cc6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c9c:	f7ff fc12 	bl	80014c4 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ca2:	e009      	b.n	8001cb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ca4:	f7ff fc0e 	bl	80014c4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb2:	d901      	bls.n	8001cb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	58024800 	.word	0x58024800

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	@ 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f000 bc48 	b.w	8002578 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8088 	beq.w	8001e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b99      	ldr	r3, [pc, #612]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d00:	4b96      	ldr	r3, [pc, #600]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d007      	beq.n	8001d1c <HAL_RCC_OscConfig+0x48>
 8001d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0e:	2b18      	cmp	r3, #24
 8001d10:	d111      	bne.n	8001d36 <HAL_RCC_OscConfig+0x62>
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d06d      	beq.n	8001e04 <HAL_RCC_OscConfig+0x130>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d169      	bne.n	8001e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f000 bc21 	b.w	8002578 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x7a>
 8001d40:	4b86      	ldr	r3, [pc, #536]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a85      	ldr	r2, [pc, #532]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e02e      	b.n	8001dac <HAL_RCC_OscConfig+0xd8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x9c>
 8001d56:	4b81      	ldr	r3, [pc, #516]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a80      	ldr	r2, [pc, #512]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b7e      	ldr	r3, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7d      	ldr	r2, [pc, #500]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xd8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0xc0>
 8001d7a:	4b78      	ldr	r3, [pc, #480]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a77      	ldr	r2, [pc, #476]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a74      	ldr	r2, [pc, #464]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xd8>
 8001d94:	4b71      	ldr	r3, [pc, #452]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a70      	ldr	r2, [pc, #448]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6d      	ldr	r2, [pc, #436]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff fb86 	bl	80014c4 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fb82 	bl	80014c4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	@ 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e3d4      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dce:	4b63      	ldr	r3, [pc, #396]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xe8>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb72 	bl	80014c4 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fb6e 	bl	80014c4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	@ 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e3c0      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001df6:	4b59      	ldr	r3, [pc, #356]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x110>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80ca 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e14:	4b51      	ldr	r3, [pc, #324]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_OscConfig+0x166>
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2b18      	cmp	r3, #24
 8001e2e:	d156      	bne.n	8001ede <HAL_RCC_OscConfig+0x20a>
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d151      	bne.n	8001ede <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3a:	4b48      	ldr	r3, [pc, #288]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x17e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e392      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e52:	4b42      	ldr	r3, [pc, #264]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0219 	bic.w	r2, r3, #25
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	493f      	ldr	r1, [pc, #252]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fb2e 	bl	80014c4 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fb2a 	bl	80014c4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e37c      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e7e:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	f7ff fb27 	bl	80014dc <HAL_GetREVID>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d817      	bhi.n	8001ec8 <HAL_RCC_OscConfig+0x1f4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b40      	cmp	r3, #64	@ 0x40
 8001e9e:	d108      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	e07a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	031b      	lsls	r3, r3, #12
 8001ec0:	4926      	ldr	r1, [pc, #152]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec6:	e06f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	4921      	ldr	r1, [pc, #132]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	e064      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d047      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0219 	bic.w	r2, r3, #25
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	491a      	ldr	r1, [pc, #104]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fae4 	bl	80014c4 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fae0 	bl	80014c4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e332      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	f7ff fadd 	bl	80014dc <HAL_GetREVID>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d819      	bhi.n	8001f60 <HAL_RCC_OscConfig+0x28c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b40      	cmp	r3, #64	@ 0x40
 8001f32:	d108      	bne.n	8001f46 <HAL_RCC_OscConfig+0x272>
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f42:	6053      	str	r3, [r2, #4]
 8001f44:	e030      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	031b      	lsls	r3, r3, #12
 8001f54:	4901      	ldr	r1, [pc, #4]	@ (8001f5c <HAL_RCC_OscConfig+0x288>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
 8001f5a:	e025      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	4b9a      	ldr	r3, [pc, #616]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	4997      	ldr	r1, [pc, #604]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	e018      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b95      	ldr	r3, [pc, #596]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a94      	ldr	r2, [pc, #592]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff fa9f 	bl	80014c4 <HAL_GetTick>
 8001f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fa9b 	bl	80014c4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e2ed      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f9c:	4b8b      	ldr	r3, [pc, #556]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a9 	beq.w	8002108 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fc0:	4b82      	ldr	r3, [pc, #520]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d007      	beq.n	8001fdc <HAL_RCC_OscConfig+0x308>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b18      	cmp	r3, #24
 8001fd0:	d13a      	bne.n	8002048 <HAL_RCC_OscConfig+0x374>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d135      	bne.n	8002048 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x320>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b80      	cmp	r3, #128	@ 0x80
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e2c1      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ff4:	f7ff fa72 	bl	80014dc <HAL_GetREVID>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d817      	bhi.n	8002032 <HAL_RCC_OscConfig+0x35e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	2b20      	cmp	r3, #32
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x348>
 800200a:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002012:	4a6e      	ldr	r2, [pc, #440]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002018:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800201a:	e075      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800201c:	4b6b      	ldr	r3, [pc, #428]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	069b      	lsls	r3, r3, #26
 800202a:	4968      	ldr	r1, [pc, #416]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002030:	e06a      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002032:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	061b      	lsls	r3, r3, #24
 8002040:	4962      	ldr	r1, [pc, #392]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002046:	e05f      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d042      	beq.n	80020d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002050:	4b5e      	ldr	r3, [pc, #376]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5d      	ldr	r2, [pc, #372]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fa32 	bl	80014c4 <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002064:	f7ff fa2e 	bl	80014c4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e280      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002076:	4b55      	ldr	r3, [pc, #340]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002082:	f7ff fa2b 	bl	80014dc <HAL_GetREVID>
 8002086:	4603      	mov	r3, r0
 8002088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800208c:	4293      	cmp	r3, r2
 800208e:	d817      	bhi.n	80020c0 <HAL_RCC_OscConfig+0x3ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	2b20      	cmp	r3, #32
 8002096:	d108      	bne.n	80020aa <HAL_RCC_OscConfig+0x3d6>
 8002098:	4b4c      	ldr	r3, [pc, #304]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020a0:	4a4a      	ldr	r2, [pc, #296]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020a6:	6053      	str	r3, [r2, #4]
 80020a8:	e02e      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
 80020aa:	4b48      	ldr	r3, [pc, #288]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	4944      	ldr	r1, [pc, #272]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
 80020be:	e023      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
 80020c0:	4b42      	ldr	r3, [pc, #264]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	493f      	ldr	r1, [pc, #252]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3c      	ldr	r2, [pc, #240]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f9ef 	bl	80014c4 <HAL_GetTick>
 80020e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020ea:	f7ff f9eb 	bl	80014c4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e23d      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020fc:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d036      	beq.n	8002182 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d019      	beq.n	8002150 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211c:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002120:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff f9cc 	bl	80014c4 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff f9c8 	bl	80014c4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e21a      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002142:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x45c>
 800214e:	e018      	b.n	8002182 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff f9b2 	bl	80014c4 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff f9ae 	bl	80014c4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e200      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d039      	beq.n	8002202 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002196:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a0c      	ldr	r2, [pc, #48]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021a2:	f7ff f98f 	bl	80014c4 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021aa:	f7ff f98b 	bl	80014c4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1dd      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_RCC_OscConfig+0x4f8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x4d6>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
 80021ca:	bf00      	nop
 80021cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a9a      	ldr	r2, [pc, #616]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021dc:	f7ff f972 	bl	80014c4 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e4:	f7ff f96e 	bl	80014c4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1c0      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021f6:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8081 	beq.w	8002312 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002210:	4b8c      	ldr	r3, [pc, #560]	@ (8002444 <HAL_RCC_OscConfig+0x770>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a8b      	ldr	r2, [pc, #556]	@ (8002444 <HAL_RCC_OscConfig+0x770>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800221c:	f7ff f952 	bl	80014c4 <HAL_GetTick>
 8002220:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7ff f94e 	bl	80014c4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1a0      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002236:	4b83      	ldr	r3, [pc, #524]	@ (8002444 <HAL_RCC_OscConfig+0x770>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x584>
 800224a:	4b7d      	ldr	r3, [pc, #500]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	4a7c      	ldr	r2, [pc, #496]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	@ 0x70
 8002256:	e02d      	b.n	80022b4 <HAL_RCC_OscConfig+0x5e0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x5a6>
 8002260:	4b77      	ldr	r3, [pc, #476]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a76      	ldr	r2, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	4b74      	ldr	r3, [pc, #464]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	4a73      	ldr	r2, [pc, #460]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	@ 0x70
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x5e0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x5c8>
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002286:	4a6e      	ldr	r2, [pc, #440]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	@ 0x70
 800228e:	4b6c      	ldr	r3, [pc, #432]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002292:	4a6b      	ldr	r2, [pc, #428]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	@ 0x70
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x5e0>
 800229c:	4b68      	ldr	r3, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	4a67      	ldr	r2, [pc, #412]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a8:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	4a64      	ldr	r2, [pc, #400]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f902 	bl	80014c4 <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff f8fe 	bl	80014c4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e14e      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022da:	4b59      	ldr	r3, [pc, #356]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RCC_OscConfig+0x5f0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff f8ec 	bl	80014c4 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7ff f8e8 	bl	80014c4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e138      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002306:	4b4e      	ldr	r3, [pc, #312]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ee      	bne.n	80022f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 812d 	beq.w	8002576 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800231c:	4b48      	ldr	r3, [pc, #288]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002324:	2b18      	cmp	r3, #24
 8002326:	f000 80bd 	beq.w	80024a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	2b02      	cmp	r3, #2
 8002330:	f040 809e 	bne.w	8002470 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b42      	ldr	r3, [pc, #264]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a41      	ldr	r2, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f8c0 	bl	80014c4 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff f8bc 	bl	80014c4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e10e      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800235a:	4b39      	ldr	r3, [pc, #228]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_OscConfig+0x774>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	430a      	orrs	r2, r1
 800237a:	4931      	ldr	r1, [pc, #196]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	3b01      	subs	r3, #1
 8002386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238e:	3b01      	subs	r3, #1
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	b29b      	uxth	r3, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	3b01      	subs	r3, #1
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023b0:	4923      	ldr	r1, [pc, #140]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023b6:	4b22      	ldr	r3, [pc, #136]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_RCC_OscConfig+0x778>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ce:	00d2      	lsls	r2, r2, #3
 80023d0:	491b      	ldr	r1, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f023 020c 	bic.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4917      	ldr	r1, [pc, #92]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	f023 0202 	bic.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	4912      	ldr	r1, [pc, #72]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800240c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800241c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_RCC_OscConfig+0x76c>)
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7ff f845 	bl	80014c4 <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800243c:	e011      	b.n	8002462 <HAL_RCC_OscConfig+0x78e>
 800243e:	bf00      	nop
 8002440:	58024400 	.word	0x58024400
 8002444:	58024800 	.word	0x58024800
 8002448:	fffffc0c 	.word	0xfffffc0c
 800244c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff f838 	bl	80014c4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e08a      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x77c>
 800246e:	e082      	b.n	8002576 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b43      	ldr	r3, [pc, #268]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a42      	ldr	r2, [pc, #264]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff f822 	bl	80014c4 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7ff f81e 	bl	80014c4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e070      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x7b0>
 80024a2:	e068      	b.n	8002576 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024aa:	4b35      	ldr	r3, [pc, #212]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d031      	beq.n	800251c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d12a      	bne.n	800251c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d122      	bne.n	800251c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d11a      	bne.n	800251c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	0a5b      	lsrs	r3, r3, #9
 80024ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d111      	bne.n	800251c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d108      	bne.n	800251c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0e1b      	lsrs	r3, r3, #24
 800250e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002516:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e02b      	b.n	8002578 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002520:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800252a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	429a      	cmp	r2, r3
 8002534:	d01f      	beq.n	8002576 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	4a11      	ldr	r2, [pc, #68]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002542:	f7fe ffbf 	bl	80014c4 <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002548:	bf00      	nop
 800254a:	f7fe ffbb 	bl	80014c4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	4293      	cmp	r3, r2
 8002554:	d0f9      	beq.n	800254a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_RCC_OscConfig+0x8b0>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002562:	00d2      	lsls	r2, r2, #3
 8002564:	4906      	ldr	r1, [pc, #24]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002566:	4313      	orrs	r3, r2
 8002568:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_RCC_OscConfig+0x8ac>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3730      	adds	r7, #48	@ 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	58024400 	.word	0x58024400
 8002584:	ffff0007 	.word	0xffff0007

08002588 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e19c      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b8a      	ldr	r3, [pc, #552]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b87      	ldr	r3, [pc, #540]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	4985      	ldr	r1, [pc, #532]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b83      	ldr	r3, [pc, #524]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e184      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	4b7b      	ldr	r3, [pc, #492]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d908      	bls.n	80025fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025e8:	4b78      	ldr	r3, [pc, #480]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	4975      	ldr	r1, [pc, #468]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	4b70      	ldr	r3, [pc, #448]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002612:	429a      	cmp	r2, r3
 8002614:	d908      	bls.n	8002628 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002616:	4b6d      	ldr	r3, [pc, #436]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	496a      	ldr	r1, [pc, #424]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	4b64      	ldr	r3, [pc, #400]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002640:	429a      	cmp	r2, r3
 8002642:	d908      	bls.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002644:	4b61      	ldr	r3, [pc, #388]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	495e      	ldr	r1, [pc, #376]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002652:	4313      	orrs	r3, r2
 8002654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800266e:	429a      	cmp	r2, r3
 8002670:	d908      	bls.n	8002684 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002672:	4b56      	ldr	r3, [pc, #344]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4953      	ldr	r1, [pc, #332]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002680:	4313      	orrs	r3, r2
 8002682:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b4a      	ldr	r3, [pc, #296]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f023 020f 	bic.w	r2, r3, #15
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4947      	ldr	r1, [pc, #284]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d055      	beq.n	800276a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026be:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4940      	ldr	r1, [pc, #256]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d121      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0f6      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026f0:	4b36      	ldr	r3, [pc, #216]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d115      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0ea      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002708:	4b30      	ldr	r3, [pc, #192]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0de      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002718:	4b2c      	ldr	r3, [pc, #176]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d6      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f023 0207 	bic.w	r2, r3, #7
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4925      	ldr	r1, [pc, #148]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002736:	4313      	orrs	r3, r2
 8002738:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273a:	f7fe fec3 	bl	80014c4 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002740:	e00a      	b.n	8002758 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7fe febf 	bl	80014c4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0be      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	429a      	cmp	r2, r3
 8002768:	d1eb      	bne.n	8002742 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	429a      	cmp	r2, r3
 8002784:	d208      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	490e      	ldr	r1, [pc, #56]	@ (80027cc <HAL_RCC_ClockConfig+0x244>)
 8002794:	4313      	orrs	r3, r2
 8002796:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d214      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	4906      	ldr	r1, [pc, #24]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <HAL_RCC_ClockConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e086      	b.n	80028d6 <HAL_RCC_ClockConfig+0x34e>
 80027c8:	52002000 	.word	0x52002000
 80027cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	4b3f      	ldr	r3, [pc, #252]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d208      	bcs.n	80027fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027ec:	4b3c      	ldr	r3, [pc, #240]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4939      	ldr	r1, [pc, #228]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002816:	429a      	cmp	r2, r3
 8002818:	d208      	bcs.n	800282c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	492e      	ldr	r1, [pc, #184]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002828:	4313      	orrs	r3, r2
 800282a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4922      	ldr	r1, [pc, #136]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002856:	4313      	orrs	r3, r2
 8002858:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002872:	429a      	cmp	r2, r3
 8002874:	d208      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4917      	ldr	r1, [pc, #92]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002884:	4313      	orrs	r3, r2
 8002886:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002888:	f000 f834 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	4912      	ldr	r1, [pc, #72]	@ (80028e4 <HAL_RCC_ClockConfig+0x35c>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_RCC_ClockConfig+0x358>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <HAL_RCC_ClockConfig+0x35c>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_RCC_ClockConfig+0x360>)
 80028be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <HAL_RCC_ClockConfig+0x364>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_RCC_ClockConfig+0x368>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fc2e 	bl	800112c <HAL_InitTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
 80028e4:	0800d534 	.word	0x0800d534
 80028e8:	24000004 	.word	0x24000004
 80028ec:	24000000 	.word	0x24000000
 80028f0:	24000008 	.word	0x24000008

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fa:	4bb3      	ldr	r3, [pc, #716]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002902:	2b18      	cmp	r3, #24
 8002904:	f200 8155 	bhi.w	8002bb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002908:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002975 	.word	0x08002975
 8002914:	08002bb3 	.word	0x08002bb3
 8002918:	08002bb3 	.word	0x08002bb3
 800291c:	08002bb3 	.word	0x08002bb3
 8002920:	08002bb3 	.word	0x08002bb3
 8002924:	08002bb3 	.word	0x08002bb3
 8002928:	08002bb3 	.word	0x08002bb3
 800292c:	08002bb3 	.word	0x08002bb3
 8002930:	0800299b 	.word	0x0800299b
 8002934:	08002bb3 	.word	0x08002bb3
 8002938:	08002bb3 	.word	0x08002bb3
 800293c:	08002bb3 	.word	0x08002bb3
 8002940:	08002bb3 	.word	0x08002bb3
 8002944:	08002bb3 	.word	0x08002bb3
 8002948:	08002bb3 	.word	0x08002bb3
 800294c:	08002bb3 	.word	0x08002bb3
 8002950:	080029a1 	.word	0x080029a1
 8002954:	08002bb3 	.word	0x08002bb3
 8002958:	08002bb3 	.word	0x08002bb3
 800295c:	08002bb3 	.word	0x08002bb3
 8002960:	08002bb3 	.word	0x08002bb3
 8002964:	08002bb3 	.word	0x08002bb3
 8002968:	08002bb3 	.word	0x08002bb3
 800296c:	08002bb3 	.word	0x08002bb3
 8002970:	080029a7 	.word	0x080029a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002974:	4b94      	ldr	r3, [pc, #592]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002980:	4b91      	ldr	r3, [pc, #580]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	4a90      	ldr	r2, [pc, #576]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002992:	e111      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002994:	4b8d      	ldr	r3, [pc, #564]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002996:	61bb      	str	r3, [r7, #24]
      break;
 8002998:	e10e      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800299a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800299c:	61bb      	str	r3, [r7, #24]
      break;
 800299e:	e10b      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029a0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029a2:	61bb      	str	r3, [r7, #24]
      break;
 80029a4:	e108      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029a6:	4b88      	ldr	r3, [pc, #544]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029b0:	4b85      	ldr	r3, [pc, #532]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029bc:	4b82      	ldr	r3, [pc, #520]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029c6:	4b80      	ldr	r3, [pc, #512]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ca:	08db      	lsrs	r3, r3, #3
 80029cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80e1 	beq.w	8002bac <HAL_RCC_GetSysClockFreq+0x2b8>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f000 8083 	beq.w	8002af8 <HAL_RCC_GetSysClockFreq+0x204>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f200 80a1 	bhi.w	8002b3c <HAL_RCC_GetSysClockFreq+0x248>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x114>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d056      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a06:	e099      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a08:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02d      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a14:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3e:	4b62      	ldr	r3, [pc, #392]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a6e:	e087      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a82:	4b51      	ldr	r3, [pc, #324]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ab2:	e065      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac6:	4b40      	ldr	r3, [pc, #256]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ada:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002af6:	e043      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002be4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b3a:	e021      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	0a5b      	lsrs	r3, r3, #9
 8002b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba4:	ee17 3a90 	vmov	r3, s15
 8002ba8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002baa:	e005      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
      break;
 8002bb0:	e002      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bb4:	61bb      	str	r3, [r7, #24]
      break;
 8002bb6:	bf00      	nop
  }

  return sysclockfreq;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	@ 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	03d09000 	.word	0x03d09000
 8002bd0:	003d0900 	.word	0x003d0900
 8002bd4:	017d7840 	.word	0x017d7840
 8002bd8:	46000000 	.word	0x46000000
 8002bdc:	4c742400 	.word	0x4c742400
 8002be0:	4a742400 	.word	0x4a742400
 8002be4:	4bbebc20 	.word	0x4bbebc20

08002be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bee:	f7ff fe81 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490f      	ldr	r1, [pc, #60]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	4a09      	ldr	r2, [pc, #36]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c26:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	0800d534 	.word	0x0800d534
 8002c40:	24000004 	.word	0x24000004
 8002c44:	24000000 	.word	0x24000000

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c4c:	f7ff ffcc 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4904      	ldr	r1, [pc, #16]	@ (8002c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	0800d534 	.word	0x0800d534

08002c74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223f      	movs	r2, #63	@ 0x3f
 8002c82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c84:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0207 	and.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002c90:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002c9c:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_RCC_GetClockConfig+0x80>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	52002000 	.word	0x52002000

08002cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e049      	b.n	8002d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f841 	bl	8002da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f000 f9e8 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e054      	b.n	8002e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a26      	ldr	r2, [pc, #152]	@ (8002e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfe:	d01d      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a22      	ldr	r2, [pc, #136]	@ (8002e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d018      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a21      	ldr	r2, [pc, #132]	@ (8002e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1f      	ldr	r2, [pc, #124]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d115      	bne.n	8002e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d015      	beq.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d011      	beq.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	e008      	b.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e000      	b.n	8002e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40001800 	.word	0x40001800
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	00010007 	.word	0x00010007

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8e9 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8db 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8ec 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8c3 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8b5 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8c6 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0208 	mvn.w	r2, #8
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f89d 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f88f 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8a0 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0210 	mvn.w	r2, #16
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f877 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f869 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f87a 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f84c 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f913 	bl	800326c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f90b 	bl	8003280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f834 	bl	80030f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f06f 0220 	mvn.w	r2, #32
 80030aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8d3 	bl	8003258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d00f      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a43      	ldr	r2, [pc, #268]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00b      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a40      	ldr	r2, [pc, #256]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316c:	d01b      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a32      	ldr	r2, [pc, #200]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d017      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2f      	ldr	r2, [pc, #188]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2e      	ldr	r2, [pc, #184]	@ (800324c <TIM_Base_SetConfig+0x140>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2d      	ldr	r2, [pc, #180]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00f      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <TIM_Base_SetConfig+0x140>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a16      	ldr	r2, [pc, #88]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
  }
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <__NVIC_SetPriority>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	@ (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <SysTick_Handler+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032f0:	f002 f958 	bl	80055a4 <xTaskGetSchedulerState>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032fa:	f000 fd9d 	bl	8003e38 <xPortSysTickHandler>
  }
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800330c:	2100      	movs	r1, #0
 800330e:	f06f 0004 	mvn.w	r0, #4
 8003312:	f7ff ffbf 	bl	8003294 <__NVIC_SetPriority>
#endif
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003322:	f3ef 8305 	mrs	r3, IPSR
 8003326:	603b      	str	r3, [r7, #0]
  return(result);
 8003328:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800332e:	f06f 0305 	mvn.w	r3, #5
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	e00c      	b.n	8003350 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <osKernelInitialize+0x44>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800333e:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <osKernelInitialize+0x44>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003344:	2300      	movs	r3, #0
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e002      	b.n	8003350 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	24000368 	.word	0x24000368

08003364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800336a:	f3ef 8305 	mrs	r3, IPSR
 800336e:	603b      	str	r3, [r7, #0]
  return(result);
 8003370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003376:	f06f 0305 	mvn.w	r3, #5
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	e010      	b.n	80033a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800337e:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <osKernelStart+0x48>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d109      	bne.n	800339a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003386:	f7ff ffbf 	bl	8003308 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800338a:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <osKernelStart+0x48>)
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003390:	f001 fcba 	bl	8004d08 <vTaskStartScheduler>
      stat = osOK;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e002      	b.n	80033a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033a0:	687b      	ldr	r3, [r7, #4]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	24000368 	.word	0x24000368

080033b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08e      	sub	sp, #56	@ 0x38
 80033b4:	af04      	add	r7, sp, #16
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c0:	f3ef 8305 	mrs	r3, IPSR
 80033c4:	617b      	str	r3, [r7, #20]
  return(result);
 80033c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d17e      	bne.n	80034ca <osThreadNew+0x11a>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d07b      	beq.n	80034ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033d6:	2318      	movs	r3, #24
 80033d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d045      	beq.n	8003476 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <osThreadNew+0x48>
        name = attr->name;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <osThreadNew+0x6e>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b38      	cmp	r3, #56	@ 0x38
 8003410:	d805      	bhi.n	800341e <osThreadNew+0x6e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <osThreadNew+0x72>
        return (NULL);
 800341e:	2300      	movs	r3, #0
 8003420:	e054      	b.n	80034cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <osThreadNew+0xa8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003440:	d90a      	bls.n	8003458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <osThreadNew+0xa8>
        mem = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e010      	b.n	800347a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10c      	bne.n	800347a <osThreadNew+0xca>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <osThreadNew+0xca>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <osThreadNew+0xca>
          mem = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e001      	b.n	800347a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d110      	bne.n	80034a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003488:	9202      	str	r2, [sp, #8]
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f001 fa5a 	bl	8004950 <xTaskCreateStatic>
 800349c:	4603      	mov	r3, r0
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e013      	b.n	80034ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f001 faa8 	bl	8004a10 <xTaskCreate>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <osThreadNew+0x11a>
            hTask = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034ca:	693b      	ldr	r3, [r7, #16]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3728      	adds	r7, #40	@ 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034dc:	f3ef 8305 	mrs	r3, IPSR
 80034e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <osDelay+0x1c>
    stat = osErrorISR;
 80034e8:	f06f 0305 	mvn.w	r3, #5
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e007      	b.n	8003500 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 fbce 	bl	8004c9c <vTaskDelay>
    }
  }

  return (stat);
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <vApplicationGetIdleTaskMemory+0x2c>)
 800351c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4a06      	ldr	r2, [pc, #24]	@ (800353c <vApplicationGetIdleTaskMemory+0x30>)
 8003522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2400036c 	.word	0x2400036c
 800353c:	240003c8 	.word	0x240003c8

08003540 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a07      	ldr	r2, [pc, #28]	@ (800356c <vApplicationGetTimerTaskMemory+0x2c>)
 8003550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <vApplicationGetTimerTaskMemory+0x30>)
 8003556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	240005c8 	.word	0x240005c8
 8003570:	24000624 	.word	0x24000624

08003574 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003580:	f001 fc2a 	bl	8004dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003584:	4b5c      	ldr	r3, [pc, #368]	@ (80036f8 <pvPortMalloc+0x184>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800358c:	f000 f924 	bl	80037d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003590:	4b5a      	ldr	r3, [pc, #360]	@ (80036fc <pvPortMalloc+0x188>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8095 	bne.w	80036c8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01e      	beq.n	80035e2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80035a4:	2208      	movs	r2, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f023 0307 	bic.w	r3, r3, #7
 80035bc:	3308      	adds	r3, #8
 80035be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d06f      	beq.n	80036c8 <pvPortMalloc+0x154>
 80035e8:	4b45      	ldr	r3, [pc, #276]	@ (8003700 <pvPortMalloc+0x18c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d86a      	bhi.n	80036c8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80035f2:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <pvPortMalloc+0x190>)
 80035f4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80035f6:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <pvPortMalloc+0x190>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035fc:	e004      	b.n	8003608 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	d903      	bls.n	800361a <pvPortMalloc+0xa6>
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f1      	bne.n	80035fe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800361a:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <pvPortMalloc+0x184>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	429a      	cmp	r2, r3
 8003622:	d051      	beq.n	80036c8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2208      	movs	r2, #8
 800362a:	4413      	add	r3, r2
 800362c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	1ad2      	subs	r2, r2, r3
 800363e:	2308      	movs	r3, #8
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	429a      	cmp	r2, r3
 8003644:	d920      	bls.n	8003688 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <pvPortMalloc+0xfc>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	613b      	str	r3, [r7, #16]
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad2      	subs	r2, r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003682:	69b8      	ldr	r0, [r7, #24]
 8003684:	f000 f90a 	bl	800389c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <pvPortMalloc+0x18c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <pvPortMalloc+0x18c>)
 8003694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003696:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <pvPortMalloc+0x18c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <pvPortMalloc+0x194>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d203      	bcs.n	80036aa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036a2:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <pvPortMalloc+0x18c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a18      	ldr	r2, [pc, #96]	@ (8003708 <pvPortMalloc+0x194>)
 80036a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <pvPortMalloc+0x188>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80036be:	4b13      	ldr	r3, [pc, #76]	@ (800370c <pvPortMalloc+0x198>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a11      	ldr	r2, [pc, #68]	@ (800370c <pvPortMalloc+0x198>)
 80036c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036c8:	f001 fb94 	bl	8004df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <pvPortMalloc+0x17a>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60fb      	str	r3, [r7, #12]
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	e7fd      	b.n	80036ea <pvPortMalloc+0x176>
	return pvReturn;
 80036ee:	69fb      	ldr	r3, [r7, #28]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	@ 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	2400462c 	.word	0x2400462c
 80036fc:	24004640 	.word	0x24004640
 8003700:	24004630 	.word	0x24004630
 8003704:	24004624 	.word	0x24004624
 8003708:	24004634 	.word	0x24004634
 800370c:	24004638 	.word	0x24004638

08003710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04f      	beq.n	80037c2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003722:	2308      	movs	r3, #8
 8003724:	425b      	negs	r3, r3
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4413      	add	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <vPortFree+0xbc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <vPortFree+0x46>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <vPortFree+0x66>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60bb      	str	r3, [r7, #8]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <vPortFree+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01e      	beq.n	80037c2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11a      	bne.n	80037c2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <vPortFree+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	43db      	mvns	r3, r3
 8003796:	401a      	ands	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800379c:	f001 fb1c 	bl	8004dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <vPortFree+0xc0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a09      	ldr	r2, [pc, #36]	@ (80037d0 <vPortFree+0xc0>)
 80037ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f000 f874 	bl	800389c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <vPortFree+0xc4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <vPortFree+0xc4>)
 80037bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80037be:	f001 fb19 	bl	8004df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24004640 	.word	0x24004640
 80037d0:	24004630 	.word	0x24004630
 80037d4:	2400463c 	.word	0x2400463c

080037d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80037e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <prvHeapInit+0xac>)
 80037e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3307      	adds	r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	4a1f      	ldr	r2, [pc, #124]	@ (8003884 <prvHeapInit+0xac>)
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003810:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <prvHeapInit+0xb0>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003816:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <prvHeapInit+0xb0>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003824:	2208      	movs	r2, #8
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0307 	bic.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a15      	ldr	r2, [pc, #84]	@ (800388c <prvHeapInit+0xb4>)
 8003838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800383a:	4b14      	ldr	r3, [pc, #80]	@ (800388c <prvHeapInit+0xb4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <prvHeapInit+0xb4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <prvHeapInit+0xb4>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <prvHeapInit+0xb8>)
 8003866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <prvHeapInit+0xbc>)
 800386e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <prvHeapInit+0xc0>)
 8003872:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003876:	601a      	str	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	24000a24 	.word	0x24000a24
 8003888:	24004624 	.word	0x24004624
 800388c:	2400462c 	.word	0x2400462c
 8003890:	24004634 	.word	0x24004634
 8003894:	24004630 	.word	0x24004630
 8003898:	24004640 	.word	0x24004640

0800389c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038a4:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <prvInsertBlockIntoFreeList+0xac>)
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e002      	b.n	80038b0 <prvInsertBlockIntoFreeList+0x14>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d8f7      	bhi.n	80038aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d108      	bne.n	80038de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	441a      	add	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	441a      	add	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d118      	bne.n	8003924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <prvInsertBlockIntoFreeList+0xb0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d00d      	beq.n	800391a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e008      	b.n	800392c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800391a:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <prvInsertBlockIntoFreeList+0xb0>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e003      	b.n	800392c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d002      	beq.n	800393a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	24004624 	.word	0x24004624
 800394c:	2400462c 	.word	0x2400462c

08003950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0208 	add.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f103 0208 	add.w	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f103 0208 	add.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d103      	bne.n	8003a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e00c      	b.n	8003a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3308      	adds	r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <vListInsert+0x2e>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d2f6      	bcs.n	8003a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d103      	bne.n	8003a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3b04      	subs	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3b04      	subs	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b04      	subs	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <pxPortInitialiseStack+0x64>)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b14      	subs	r3, #20
 8003af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b04      	subs	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f06f 0202 	mvn.w	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b20      	subs	r3, #32
 8003b0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	08003b21 	.word	0x08003b21

08003b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b2a:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <prvTaskExitError+0x58>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d00b      	beq.n	8003b4c <prvTaskExitError+0x2c>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <prvTaskExitError+0x28>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60bb      	str	r3, [r7, #8]
}
 8003b5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b60:	bf00      	nop
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0fc      	beq.n	8003b62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	24000010 	.word	0x24000010
 8003b7c:	00000000 	.word	0x00000000

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	2400468c 	.word	0x2400468c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ba8:	4808      	ldr	r0, [pc, #32]	@ (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bca:	bf00      	nop
 8003bcc:	e000ed08 	.word	0xe000ed08

08003bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <xPortStartScheduler+0x124>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a47      	ldr	r2, [pc, #284]	@ (8003cf8 <xPortStartScheduler+0x128>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10b      	bne.n	8003bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	613b      	str	r3, [r7, #16]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <xPortStartScheduler+0x124>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cfc <xPortStartScheduler+0x12c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10b      	bne.n	8003c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <xPortStartScheduler+0x130>)
 8003c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	22ff      	movs	r2, #255	@ 0xff
 8003c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b31      	ldr	r3, [pc, #196]	@ (8003d04 <xPortStartScheduler+0x134>)
 8003c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c48:	e009      	b.n	8003c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d0ef      	beq.n	8003c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6a:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00b      	beq.n	8003c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60bb      	str	r3, [r7, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cac:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cc4:	f000 f8da 	bl	8003e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <xPortStartScheduler+0x140>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cce:	f000 f8f9 	bl	8003ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <xPortStartScheduler+0x144>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <xPortStartScheduler+0x144>)
 8003cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cde:	f7ff ff63 	bl	8003ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ce2:	f001 f9ef 	bl	80050c4 <vTaskSwitchContext>
	prvTaskExitError();
 8003ce6:	f7ff ff1b 	bl	8003b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	410fc271 	.word	0x410fc271
 8003cfc:	410fc270 	.word	0x410fc270
 8003d00:	e000e400 	.word	0xe000e400
 8003d04:	24004644 	.word	0x24004644
 8003d08:	24004648 	.word	0x24004648
 8003d0c:	e000ed20 	.word	0xe000ed20
 8003d10:	24000010 	.word	0x24000010
 8003d14:	e000ef34 	.word	0xe000ef34

08003d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
}
 8003d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d110      	bne.n	8003d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <vPortEnterCritical+0x60>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	603b      	str	r3, [r7, #0]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <vPortEnterCritical+0x4a>
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	24000010 	.word	0x24000010
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <vPortExitCritical+0x26>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <vPortExitCritical+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <vPortExitCritical+0x50>)
 8003daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <vPortExitCritical+0x50>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <vPortExitCritical+0x44>
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	24000010 	.word	0x24000010

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	f01e 0f10 	tst.w	lr, #16
 8003de0:	bf08      	it	eq
 8003de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003df4:	f380 8811 	msr	BASEPRI, r0
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f001 f960 	bl	80050c4 <vTaskSwitchContext>
 8003e04:	f04f 0000 	mov.w	r0, #0
 8003e08:	f380 8811 	msr	BASEPRI, r0
 8003e0c:	bc09      	pop	{r0, r3}
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e16:	f01e 0f10 	tst.w	lr, #16
 8003e1a:	bf08      	it	eq
 8003e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e20:	f380 8809 	msr	PSP, r0
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst>:
 8003e30:	2400468c 	.word	0x2400468c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f001 f87d 	bl	8004f50 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <xPortSysTickHandler+0x40>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
}
 8003e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <vPortSetupTimerInterrupt+0x38>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <vPortSetupTimerInterrupt+0x3c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	@ (8003ebc <vPortSetupTimerInterrupt+0x40>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <vPortSetupTimerInterrupt+0x44>)
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9e:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000e010 	.word	0xe000e010
 8003eb4:	e000e018 	.word	0xe000e018
 8003eb8:	24000000 	.word	0x24000000
 8003ebc:	10624dd3 	.word	0x10624dd3
 8003ec0:	e000e014 	.word	0xe000e014

08003ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ed4 <vPortEnableVFP+0x10>
 8003ec8:	6801      	ldr	r1, [r0, #0]
 8003eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003ece:	6001      	str	r1, [r0, #0]
 8003ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ed2:	bf00      	nop
 8003ed4:	e000ed88 	.word	0xe000ed88

08003ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ede:	f3ef 8305 	mrs	r3, IPSR
 8003ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d915      	bls.n	8003f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eea:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <vPortValidateInterruptPriority+0x74>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ef4:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <vPortValidateInterruptPriority+0x78>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	7afa      	ldrb	r2, [r7, #11]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d20b      	bcs.n	8003f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	e7fd      	b.n	8003f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f16:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <vPortValidateInterruptPriority+0x7c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <vPortValidateInterruptPriority+0x80>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d90b      	bls.n	8003f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	603b      	str	r3, [r7, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <vPortValidateInterruptPriority+0x62>
	}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000e3f0 	.word	0xe000e3f0
 8003f50:	24004644 	.word	0x24004644
 8003f54:	e000ed0c 	.word	0xe000ed0c
 8003f58:	24004648 	.word	0x24004648

08003f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <xQueueGenericReset+0x2c>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60bb      	str	r3, [r7, #8]
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f88:	f7ff fec6 	bl	8003d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	441a      	add	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	22ff      	movs	r2, #255	@ 0xff
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	22ff      	movs	r2, #255	@ 0xff
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d114      	bne.n	8004008 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01a      	beq.n	800401c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3310      	adds	r3, #16
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f91a 	bl	8005224 <xTaskRemoveFromEventList>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <xQueueGenericReset+0xd0>)
 8003ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	e009      	b.n	800401c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3310      	adds	r3, #16
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fc9f 	bl	8003950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3324      	adds	r3, #36	@ 0x24
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fc9a 	bl	8003950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800401c:	f7ff feae 	bl	8003d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	@ 0x38
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <xQueueGenericCreateStatic+0x56>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <xQueueGenericCreateStatic+0x5a>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <xQueueGenericCreateStatic+0x5c>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	623b      	str	r3, [r7, #32]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <xQueueGenericCreateStatic+0x84>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <xQueueGenericCreateStatic+0x88>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <xQueueGenericCreateStatic+0x8a>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	61fb      	str	r3, [r7, #28]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040d6:	2350      	movs	r3, #80	@ 0x50
 80040d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b50      	cmp	r3, #80	@ 0x50
 80040de:	d00b      	beq.n	80040f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	61bb      	str	r3, [r7, #24]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80040fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800410c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f805 	bl	800412a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3730      	adds	r7, #48	@ 0x30
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e002      	b.n	800414c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004158:	2101      	movs	r1, #1
 800415a:	69b8      	ldr	r0, [r7, #24]
 800415c:	f7ff fefe 	bl	8003f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08e      	sub	sp, #56	@ 0x38
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800417e:	2300      	movs	r3, #0
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xQueueGenericSend+0x34>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <xQueueGenericSend+0x42>
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSend+0x46>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSend+0x48>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <xQueueGenericSend+0x64>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d103      	bne.n	80041e2 <xQueueGenericSend+0x72>
 80041da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <xQueueGenericSend+0x76>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <xQueueGenericSend+0x78>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericSend+0x94>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004204:	f001 f9ce 	bl	80055a4 <xTaskGetSchedulerState>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <xQueueGenericSend+0xa4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <xQueueGenericSend+0xa8>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <xQueueGenericSend+0xaa>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <xQueueGenericSend+0xc6>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	61fb      	str	r3, [r7, #28]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004236:	f7ff fd6f 	bl	8003d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <xQueueGenericSend+0xdc>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d129      	bne.n	80042a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004252:	f000 fa0f 	bl	8004674 <prvCopyDataToQueue>
 8004256:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	3324      	adds	r3, #36	@ 0x24
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ffdd 	bl	8005224 <xTaskRemoveFromEventList>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004270:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <xQueueGenericSend+0x200>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	e00a      	b.n	8004298 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004288:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <xQueueGenericSend+0x200>)
 800428a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004298:	f7ff fd70 	bl	8003d7c <vPortExitCritical>
				return pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	e063      	b.n	8004368 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a6:	f7ff fd69 	bl	8003d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e05c      	b.n	8004368 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f817 	bl	80052ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c2:	f7ff fd5b 	bl	8003d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042c6:	f000 fd87 	bl	8004dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ca:	f7ff fd25 	bl	8003d18 <vPortEnterCritical>
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d103      	bne.n	80042e4 <xQueueGenericSend+0x174>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d103      	bne.n	80042fa <xQueueGenericSend+0x18a>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042fa:	f7ff fd3f 	bl	8003d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042fe:	1d3a      	adds	r2, r7, #4
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 f806 	bl	8005318 <xTaskCheckForTimeOut>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d124      	bne.n	800435c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004314:	f000 faa6 	bl	8004864 <prvIsQueueFull>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	3310      	adds	r3, #16
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ff2a 	bl	8005180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800432c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800432e:	f000 fa31 	bl	8004794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004332:	f000 fd5f 	bl	8004df4 <xTaskResumeAll>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af7c 	bne.w	8004236 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800433e:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <xQueueGenericSend+0x200>)
 8004340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	e772      	b.n	8004236 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004352:	f000 fa1f 	bl	8004794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004356:	f000 fd4d 	bl	8004df4 <xTaskResumeAll>
 800435a:	e76c      	b.n	8004236 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800435c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800435e:	f000 fa19 	bl	8004794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004362:	f000 fd47 	bl	8004df4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004368:	4618      	mov	r0, r3
 800436a:	3738      	adds	r7, #56	@ 0x38
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b090      	sub	sp, #64	@ 0x40
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSendFromISR+0x3e>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueGenericSendFromISR+0x42>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericSendFromISR+0x44>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSendFromISR+0x6e>
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSendFromISR+0x72>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueGenericSendFromISR+0x74>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	623b      	str	r3, [r7, #32]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004404:	f7ff fd68 	bl	8003ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8004408:	f3ef 8211 	mrs	r2, BASEPRI
 800440c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	61fa      	str	r2, [r7, #28]
 800441e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004420:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004422:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <xQueueGenericSendFromISR+0xc2>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d12f      	bne.n	8004496 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800443c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800444c:	f000 f912 	bl	8004674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004450:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d112      	bne.n	8004480 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	3324      	adds	r3, #36	@ 0x24
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fedc 	bl	8005224 <xTaskRemoveFromEventList>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004480:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004484:	3301      	adds	r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	b25a      	sxtb	r2, r3
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004490:	2301      	movs	r3, #1
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004494:	e001      	b.n	800449a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004496:	2300      	movs	r3, #0
 8004498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f383 8811 	msr	BASEPRI, r3
}
 80044a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3740      	adds	r7, #64	@ 0x40
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	@ 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <xQueueReceive+0x32>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	623b      	str	r3, [r7, #32]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <xQueueReceive+0x40>
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <xQueueReceive+0x44>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <xQueueReceive+0x46>
 80044f4:	2300      	movs	r3, #0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <xQueueReceive+0x62>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	61fb      	str	r3, [r7, #28]
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	e7fd      	b.n	800450e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004512:	f001 f847 	bl	80055a4 <xTaskGetSchedulerState>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <xQueueReceive+0x72>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <xQueueReceive+0x76>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <xQueueReceive+0x78>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <xQueueReceive+0x94>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	61bb      	str	r3, [r7, #24]
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004544:	f7ff fbe8 	bl	8003d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01f      	beq.n	8004594 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004558:	f000 f8f6 	bl	8004748 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	3310      	adds	r3, #16
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe57 	bl	8005224 <xTaskRemoveFromEventList>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800457c:	4b3c      	ldr	r3, [pc, #240]	@ (8004670 <xQueueReceive+0x1c0>)
 800457e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800458c:	f7ff fbf6 	bl	8003d7c <vPortExitCritical>
				return pdPASS;
 8004590:	2301      	movs	r3, #1
 8004592:	e069      	b.n	8004668 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800459a:	f7ff fbef 	bl	8003d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800459e:	2300      	movs	r3, #0
 80045a0:	e062      	b.n	8004668 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fe9d 	bl	80052ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b2:	2301      	movs	r3, #1
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b6:	f7ff fbe1 	bl	8003d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ba:	f000 fc0d 	bl	8004dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045be:	f7ff fbab 	bl	8003d18 <vPortEnterCritical>
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d103      	bne.n	80045d8 <xQueueReceive+0x128>
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d103      	bne.n	80045ee <xQueueReceive+0x13e>
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ee:	f7ff fbc5 	bl	8003d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f2:	1d3a      	adds	r2, r7, #4
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fe8c 	bl	8005318 <xTaskCheckForTimeOut>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d123      	bne.n	800464e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004608:	f000 f916 	bl	8004838 <prvIsQueueEmpty>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	3324      	adds	r3, #36	@ 0x24
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fdb0 	bl	8005180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004622:	f000 f8b7 	bl	8004794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004626:	f000 fbe5 	bl	8004df4 <xTaskResumeAll>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d189      	bne.n	8004544 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004630:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <xQueueReceive+0x1c0>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	e780      	b.n	8004544 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004644:	f000 f8a6 	bl	8004794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004648:	f000 fbd4 	bl	8004df4 <xTaskResumeAll>
 800464c:	e77a      	b.n	8004544 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800464e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004650:	f000 f8a0 	bl	8004794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004654:	f000 fbce 	bl	8004df4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800465a:	f000 f8ed 	bl	8004838 <prvIsQueueEmpty>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	f43f af6f 	beq.w	8004544 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004666:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	@ 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d14d      	bne.n	8004736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff9e 	bl	80055e0 <xTaskPriorityDisinherit>
 80046a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	e043      	b.n	8004736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d119      	bne.n	80046e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6858      	ldr	r0, [r3, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	461a      	mov	r2, r3
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	f005 fc8d 	bl	8009fde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	441a      	add	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d32b      	bcc.n	8004736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e026      	b.n	8004736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68d8      	ldr	r0, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	f005 fc73 	bl	8009fde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	425b      	negs	r3, r3
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d207      	bcs.n	8004724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	425b      	negs	r3, r3
 800471e:	441a      	add	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d105      	bne.n	8004736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3b01      	subs	r3, #1
 8004734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	d303      	bcc.n	800477c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68d9      	ldr	r1, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	461a      	mov	r2, r3
 8004786:	6838      	ldr	r0, [r7, #0]
 8004788:	f005 fc29 	bl	8009fde <memcpy>
	}
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800479c:	f7ff fabc 	bl	8003d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047a8:	e011      	b.n	80047ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d012      	beq.n	80047d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3324      	adds	r3, #36	@ 0x24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fd34 	bl	8005224 <xTaskRemoveFromEventList>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047c2:	f000 fe0d 	bl	80053e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dce9      	bgt.n	80047aa <prvUnlockQueue+0x16>
 80047d6:	e000      	b.n	80047da <prvUnlockQueue+0x46>
					break;
 80047d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	22ff      	movs	r2, #255	@ 0xff
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047e2:	f7ff facb 	bl	8003d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047e6:	f7ff fa97 	bl	8003d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047f2:	e011      	b.n	8004818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3310      	adds	r3, #16
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fd0f 	bl	8005224 <xTaskRemoveFromEventList>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800480c:	f000 fde8 	bl	80053e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004810:	7bbb      	ldrb	r3, [r7, #14]
 8004812:	3b01      	subs	r3, #1
 8004814:	b2db      	uxtb	r3, r3
 8004816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800481c:	2b00      	cmp	r3, #0
 800481e:	dce9      	bgt.n	80047f4 <prvUnlockQueue+0x60>
 8004820:	e000      	b.n	8004824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	22ff      	movs	r2, #255	@ 0xff
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800482c:	f7ff faa6 	bl	8003d7c <vPortExitCritical>
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004840:	f7ff fa6a 	bl	8003d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e001      	b.n	8004856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004856:	f7ff fa91 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800486c:	f7ff fa54 	bl	8003d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004878:	429a      	cmp	r2, r3
 800487a:	d102      	bne.n	8004882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e001      	b.n	8004886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004886:	f7ff fa79 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e014      	b.n	80048ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048a4:	4a0f      	ldr	r2, [pc, #60]	@ (80048e4 <vQueueAddToRegistry+0x50>)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048b0:	490c      	ldr	r1, [pc, #48]	@ (80048e4 <vQueueAddToRegistry+0x50>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <vQueueAddToRegistry+0x50>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048c6:	e006      	b.n	80048d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	d9e7      	bls.n	80048a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2400464c 	.word	0x2400464c

080048e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048f8:	f7ff fa0e 	bl	8003d18 <vPortEnterCritical>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d103      	bne.n	8004912 <vQueueWaitForMessageRestricted+0x2a>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004918:	b25b      	sxtb	r3, r3
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d103      	bne.n	8004928 <vQueueWaitForMessageRestricted+0x40>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004928:	f7ff fa28 	bl	8003d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3324      	adds	r3, #36	@ 0x24
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fc45 	bl	80051cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004942:	6978      	ldr	r0, [r7, #20]
 8004944:	f7ff ff26 	bl	8004794 <prvUnlockQueue>
	}
 8004948:	bf00      	nop
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	@ 0x38
 8004954:	af04      	add	r7, sp, #16
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800495e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	623b      	str	r3, [r7, #32]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800497c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	61fb      	str	r3, [r7, #28]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800499a:	235c      	movs	r3, #92	@ 0x5c
 800499c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80049a2:	d00b      	beq.n	80049bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	61bb      	str	r3, [r7, #24]
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01e      	beq.n	8004a02 <xTaskCreateStatic+0xb2>
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049dc:	2300      	movs	r3, #0
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	f107 0314 	add.w	r3, r7, #20
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f850 	bl	8004a9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049fc:	f000 f8de 	bl	8004bbc <prvAddNewTaskToReadyList>
 8004a00:	e001      	b.n	8004a06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a06:	697b      	ldr	r3, [r7, #20]
	}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	@ 0x30
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fda5 	bl	8003574 <pvPortMalloc>
 8004a2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00e      	beq.n	8004a50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a32:	205c      	movs	r0, #92	@ 0x5c
 8004a34:	f7fe fd9e 	bl	8003574 <pvPortMalloc>
 8004a38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a46:	e005      	b.n	8004a54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f7fe fe61 	bl	8003710 <vPortFree>
 8004a4e:	e001      	b.n	8004a54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	2300      	movs	r3, #0
 8004a66:	9303      	str	r3, [sp, #12]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	9302      	str	r3, [sp, #8]
 8004a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f80e 	bl	8004a9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a7e:	69f8      	ldr	r0, [r7, #28]
 8004a80:	f000 f89c 	bl	8004bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a84:	2301      	movs	r3, #1
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e002      	b.n	8004a90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a90:	69bb      	ldr	r3, [r7, #24]
	}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b088      	sub	sp, #32
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	21a5      	movs	r1, #165	@ 0xa5
 8004ab4:	f005 f9df 	bl	8009e76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004ac2:	440b      	add	r3, r1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	617b      	str	r3, [r7, #20]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01f      	beq.n	8004b3a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e012      	b.n	8004b26 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	7819      	ldrb	r1, [r3, #0]
 8004b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3334      	adds	r3, #52	@ 0x34
 8004b10:	460a      	mov	r2, r1
 8004b12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b0f      	cmp	r3, #15
 8004b2a:	d9e9      	bls.n	8004b00 <prvInitialiseNewTask+0x66>
 8004b2c:	e000      	b.n	8004b30 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b38:	e003      	b.n	8004b42 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	2b37      	cmp	r3, #55	@ 0x37
 8004b46:	d901      	bls.n	8004b4c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b48:	2337      	movs	r3, #55	@ 0x37
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe ff14 	bl	8003990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe ff0f 	bl	8003990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	f7fe ff8c 	bl	8003ab8 <pxPortInitialiseStack>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bc4:	f7ff f8a8 	bl	8003d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c80 <prvAddNewTaskToReadyList+0xc4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a2c      	ldr	r2, [pc, #176]	@ (8004c80 <prvAddNewTaskToReadyList+0xc4>)
 8004bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c84 <prvAddNewTaskToReadyList+0xc8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bda:	4a2a      	ldr	r2, [pc, #168]	@ (8004c84 <prvAddNewTaskToReadyList+0xc8>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004be0:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <prvAddNewTaskToReadyList+0xc4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d110      	bne.n	8004c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004be8:	f000 fc1e 	bl	8005428 <prvInitialiseTaskLists>
 8004bec:	e00d      	b.n	8004c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bee:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <prvAddNewTaskToReadyList+0xcc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bf6:	4b23      	ldr	r3, [pc, #140]	@ (8004c84 <prvAddNewTaskToReadyList+0xc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d802      	bhi.n	8004c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c04:	4a1f      	ldr	r2, [pc, #124]	@ (8004c84 <prvAddNewTaskToReadyList+0xc8>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c0a:	4b20      	ldr	r3, [pc, #128]	@ (8004c8c <prvAddNewTaskToReadyList+0xd0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	4a1e      	ldr	r2, [pc, #120]	@ (8004c8c <prvAddNewTaskToReadyList+0xd0>)
 8004c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <prvAddNewTaskToReadyList+0xd0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <prvAddNewTaskToReadyList+0xd4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d903      	bls.n	8004c30 <prvAddNewTaskToReadyList+0x74>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	4a18      	ldr	r2, [pc, #96]	@ (8004c90 <prvAddNewTaskToReadyList+0xd4>)
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <prvAddNewTaskToReadyList+0xd8>)
 8004c3e:	441a      	add	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe feaf 	bl	80039aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c4c:	f7ff f896 	bl	8003d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c50:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <prvAddNewTaskToReadyList+0xcc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <prvAddNewTaskToReadyList+0xc8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d207      	bcs.n	8004c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c66:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <prvAddNewTaskToReadyList+0xdc>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	24004b60 	.word	0x24004b60
 8004c84:	2400468c 	.word	0x2400468c
 8004c88:	24004b6c 	.word	0x24004b6c
 8004c8c:	24004b7c 	.word	0x24004b7c
 8004c90:	24004b68 	.word	0x24004b68
 8004c94:	24004690 	.word	0x24004690
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cae:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <vTaskDelay+0x64>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <vTaskDelay+0x32>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60bb      	str	r3, [r7, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cce:	f000 f883 	bl	8004dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fdf5 	bl	80058c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cda:	f000 f88b 	bl	8004df4 <xTaskResumeAll>
 8004cde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <vTaskDelay+0x68>)
 8004ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	24004b88 	.word	0x24004b88
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d16:	463a      	mov	r2, r7
 8004d18:	1d39      	adds	r1, r7, #4
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fbf4 	bl	800350c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	9202      	str	r2, [sp, #8]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	460a      	mov	r2, r1
 8004d36:	4922      	ldr	r1, [pc, #136]	@ (8004dc0 <vTaskStartScheduler+0xb8>)
 8004d38:	4822      	ldr	r0, [pc, #136]	@ (8004dc4 <vTaskStartScheduler+0xbc>)
 8004d3a:	f7ff fe09 	bl	8004950 <xTaskCreateStatic>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4a21      	ldr	r2, [pc, #132]	@ (8004dc8 <vTaskStartScheduler+0xc0>)
 8004d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d44:	4b20      	ldr	r3, [pc, #128]	@ (8004dc8 <vTaskStartScheduler+0xc0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e001      	b.n	8004d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d5c:	f000 fe06 	bl	800596c <xTimerCreateTimerTask>
 8004d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d116      	bne.n	8004d96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	613b      	str	r3, [r7, #16]
}
 8004d7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d7c:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <vTaskStartScheduler+0xc4>)
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d84:	4b12      	ldr	r3, [pc, #72]	@ (8004dd0 <vTaskStartScheduler+0xc8>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <vTaskStartScheduler+0xcc>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d90:	f7fe ff1e 	bl	8003bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d94:	e00f      	b.n	8004db6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d10b      	bne.n	8004db6 <vTaskStartScheduler+0xae>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <vTaskStartScheduler+0xaa>
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	0800d34c 	.word	0x0800d34c
 8004dc4:	080053f9 	.word	0x080053f9
 8004dc8:	24004b84 	.word	0x24004b84
 8004dcc:	24004b80 	.word	0x24004b80
 8004dd0:	24004b6c 	.word	0x24004b6c
 8004dd4:	24004b64 	.word	0x24004b64

08004dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ddc:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <vTaskSuspendAll+0x18>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a03      	ldr	r2, [pc, #12]	@ (8004df0 <vTaskSuspendAll+0x18>)
 8004de4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004de6:	bf00      	nop
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	24004b88 	.word	0x24004b88

08004df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e02:	4b42      	ldr	r3, [pc, #264]	@ (8004f0c <xTaskResumeAll+0x118>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	603b      	str	r3, [r7, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e22:	f7fe ff79 	bl	8003d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e26:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <xTaskResumeAll+0x118>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a37      	ldr	r2, [pc, #220]	@ (8004f0c <xTaskResumeAll+0x118>)
 8004e2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e30:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <xTaskResumeAll+0x118>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d162      	bne.n	8004efe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e38:	4b35      	ldr	r3, [pc, #212]	@ (8004f10 <xTaskResumeAll+0x11c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05e      	beq.n	8004efe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e40:	e02f      	b.n	8004ea2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e42:	4b34      	ldr	r3, [pc, #208]	@ (8004f14 <xTaskResumeAll+0x120>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fe08 	bl	8003a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fe03 	bl	8003a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e62:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <xTaskResumeAll+0x124>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d903      	bls.n	8004e72 <xTaskResumeAll+0x7e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f18 <xTaskResumeAll+0x124>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a27      	ldr	r2, [pc, #156]	@ (8004f1c <xTaskResumeAll+0x128>)
 8004e80:	441a      	add	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe fd8e 	bl	80039aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e92:	4b23      	ldr	r3, [pc, #140]	@ (8004f20 <xTaskResumeAll+0x12c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e9c:	4b21      	ldr	r3, [pc, #132]	@ (8004f24 <xTaskResumeAll+0x130>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <xTaskResumeAll+0x120>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1cb      	bne.n	8004e42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004eb0:	f000 fb58 	bl	8005564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <xTaskResumeAll+0x134>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ec0:	f000 f846 	bl	8004f50 <xTaskIncrementTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004eca:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <xTaskResumeAll+0x130>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f1      	bne.n	8004ec0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <xTaskResumeAll+0x134>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <xTaskResumeAll+0x130>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eee:	4b0f      	ldr	r3, [pc, #60]	@ (8004f2c <xTaskResumeAll+0x138>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004efe:	f7fe ff3d 	bl	8003d7c <vPortExitCritical>

	return xAlreadyYielded;
 8004f02:	68bb      	ldr	r3, [r7, #8]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	24004b88 	.word	0x24004b88
 8004f10:	24004b60 	.word	0x24004b60
 8004f14:	24004b20 	.word	0x24004b20
 8004f18:	24004b68 	.word	0x24004b68
 8004f1c:	24004690 	.word	0x24004690
 8004f20:	2400468c 	.word	0x2400468c
 8004f24:	24004b74 	.word	0x24004b74
 8004f28:	24004b70 	.word	0x24004b70
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f36:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <xTaskGetTickCount+0x1c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f3c:	687b      	ldr	r3, [r7, #4]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	24004b64 	.word	0x24004b64

08004f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005098 <xTaskIncrementTick+0x148>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 8090 	bne.w	8005084 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f64:	4b4d      	ldr	r3, [pc, #308]	@ (800509c <xTaskIncrementTick+0x14c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800509c <xTaskIncrementTick+0x14c>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d121      	bne.n	8004fbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f78:	4b49      	ldr	r3, [pc, #292]	@ (80050a0 <xTaskIncrementTick+0x150>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	603b      	str	r3, [r7, #0]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xTaskIncrementTick+0x46>
 8004f9a:	4b41      	ldr	r3, [pc, #260]	@ (80050a0 <xTaskIncrementTick+0x150>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	4b40      	ldr	r3, [pc, #256]	@ (80050a4 <xTaskIncrementTick+0x154>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80050a0 <xTaskIncrementTick+0x150>)
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80050a4 <xTaskIncrementTick+0x154>)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b3e      	ldr	r3, [pc, #248]	@ (80050a8 <xTaskIncrementTick+0x158>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80050a8 <xTaskIncrementTick+0x158>)
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	f000 fad4 	bl	8005564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <xTaskIncrementTick+0x15c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d349      	bcc.n	800505a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc6:	4b36      	ldr	r3, [pc, #216]	@ (80050a0 <xTaskIncrementTick+0x150>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd0:	4b36      	ldr	r3, [pc, #216]	@ (80050ac <xTaskIncrementTick+0x15c>)
 8004fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd6:	601a      	str	r2, [r3, #0]
					break;
 8004fd8:	e03f      	b.n	800505a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b31      	ldr	r3, [pc, #196]	@ (80050a0 <xTaskIncrementTick+0x150>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d203      	bcs.n	8004ffa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80050ac <xTaskIncrementTick+0x15c>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ff8:	e02f      	b.n	800505a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fd30 	bl	8003a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	3318      	adds	r3, #24
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fd27 	bl	8003a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501a:	4b25      	ldr	r3, [pc, #148]	@ (80050b0 <xTaskIncrementTick+0x160>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d903      	bls.n	800502a <xTaskIncrementTick+0xda>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4a22      	ldr	r2, [pc, #136]	@ (80050b0 <xTaskIncrementTick+0x160>)
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4a1f      	ldr	r2, [pc, #124]	@ (80050b4 <xTaskIncrementTick+0x164>)
 8005038:	441a      	add	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fe fcb2 	bl	80039aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504a:	4b1b      	ldr	r3, [pc, #108]	@ (80050b8 <xTaskIncrementTick+0x168>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d3b8      	bcc.n	8004fc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005058:	e7b5      	b.n	8004fc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800505a:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <xTaskIncrementTick+0x168>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005060:	4914      	ldr	r1, [pc, #80]	@ (80050b4 <xTaskIncrementTick+0x164>)
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d901      	bls.n	8005076 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <xTaskIncrementTick+0x16c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800507e:	2301      	movs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e004      	b.n	800508e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005084:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <xTaskIncrementTick+0x170>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <xTaskIncrementTick+0x170>)
 800508c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	24004b88 	.word	0x24004b88
 800509c:	24004b64 	.word	0x24004b64
 80050a0:	24004b18 	.word	0x24004b18
 80050a4:	24004b1c 	.word	0x24004b1c
 80050a8:	24004b78 	.word	0x24004b78
 80050ac:	24004b80 	.word	0x24004b80
 80050b0:	24004b68 	.word	0x24004b68
 80050b4:	24004690 	.word	0x24004690
 80050b8:	2400468c 	.word	0x2400468c
 80050bc:	24004b74 	.word	0x24004b74
 80050c0:	24004b70 	.word	0x24004b70

080050c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050ca:	4b28      	ldr	r3, [pc, #160]	@ (800516c <vTaskSwitchContext+0xa8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050d2:	4b27      	ldr	r3, [pc, #156]	@ (8005170 <vTaskSwitchContext+0xac>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050d8:	e042      	b.n	8005160 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80050da:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <vTaskSwitchContext+0xac>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	4b24      	ldr	r3, [pc, #144]	@ (8005174 <vTaskSwitchContext+0xb0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e011      	b.n	800510c <vTaskSwitchContext+0x48>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <vTaskSwitchContext+0x42>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vTaskSwitchContext+0x3e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b01      	subs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	491a      	ldr	r1, [pc, #104]	@ (8005178 <vTaskSwitchContext+0xb4>)
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0e3      	beq.n	80050e8 <vTaskSwitchContext+0x24>
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <vTaskSwitchContext+0xb4>)
 800512c:	4413      	add	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3308      	adds	r3, #8
 8005142:	429a      	cmp	r2, r3
 8005144:	d104      	bne.n	8005150 <vTaskSwitchContext+0x8c>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4a09      	ldr	r2, [pc, #36]	@ (800517c <vTaskSwitchContext+0xb8>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4a06      	ldr	r2, [pc, #24]	@ (8005174 <vTaskSwitchContext+0xb0>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	24004b88 	.word	0x24004b88
 8005170:	24004b74 	.word	0x24004b74
 8005174:	24004b68 	.word	0x24004b68
 8005178:	24004690 	.word	0x24004690
 800517c:	2400468c 	.word	0x2400468c

08005180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051a8:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <vTaskPlaceOnEventList+0x48>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3318      	adds	r3, #24
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe fc1e 	bl	80039f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051b6:	2101      	movs	r1, #1
 80051b8:	6838      	ldr	r0, [r7, #0]
 80051ba:	f000 fb83 	bl	80058c4 <prvAddCurrentTaskToDelayedList>
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2400468c 	.word	0x2400468c

080051cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	e7fd      	b.n	80051f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <vTaskPlaceOnEventListRestricted+0x54>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3318      	adds	r3, #24
 80051fc:	4619      	mov	r1, r3
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7fe fbd3 	bl	80039aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 fb56 	bl	80058c4 <prvAddCurrentTaskToDelayedList>
	}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2400468c 	.word	0x2400468c

08005224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3318      	adds	r3, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fc04 	bl	8003a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525c:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <xTaskRemoveFromEventList+0xb0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11d      	bne.n	80052a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fbfb 	bl	8003a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005272:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <xTaskRemoveFromEventList+0xb4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d903      	bls.n	8005282 <xTaskRemoveFromEventList+0x5e>
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	4a16      	ldr	r2, [pc, #88]	@ (80052d8 <xTaskRemoveFromEventList+0xb4>)
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <xTaskRemoveFromEventList+0xb8>)
 8005290:	441a      	add	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7fe fb86 	bl	80039aa <vListInsertEnd>
 800529e:	e005      	b.n	80052ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	3318      	adds	r3, #24
 80052a4:	4619      	mov	r1, r3
 80052a6:	480e      	ldr	r0, [pc, #56]	@ (80052e0 <xTaskRemoveFromEventList+0xbc>)
 80052a8:	f7fe fb7f 	bl	80039aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <xTaskRemoveFromEventList+0xc0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d905      	bls.n	80052c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052be:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <xTaskRemoveFromEventList+0xc4>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e001      	b.n	80052ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	24004b88 	.word	0x24004b88
 80052d8:	24004b68 	.word	0x24004b68
 80052dc:	24004690 	.word	0x24004690
 80052e0:	24004b20 	.word	0x24004b20
 80052e4:	2400468c 	.word	0x2400468c
 80052e8:	24004b74 	.word	0x24004b74

080052ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <vTaskInternalSetTimeOutState+0x24>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <vTaskInternalSetTimeOutState+0x28>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	24004b78 	.word	0x24004b78
 8005314:	24004b64 	.word	0x24004b64

08005318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	613b      	str	r3, [r7, #16]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60fb      	str	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800535e:	f7fe fcdb 	bl	8003d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005362:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <xTaskCheckForTimeOut+0xc0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d102      	bne.n	8005382 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e023      	b.n	80053ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <xTaskCheckForTimeOut+0xc4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d007      	beq.n	800539e <xTaskCheckForTimeOut+0x86>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e015      	b.n	80053ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d20b      	bcs.n	80053c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff99 	bl	80052ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e004      	b.n	80053ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053c6:	2301      	movs	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053ca:	f7fe fcd7 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 80053ce:	69fb      	ldr	r3, [r7, #28]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	24004b64 	.word	0x24004b64
 80053dc:	24004b78 	.word	0x24004b78

080053e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053e4:	4b03      	ldr	r3, [pc, #12]	@ (80053f4 <vTaskMissedYield+0x14>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	24004b74 	.word	0x24004b74

080053f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005400:	f000 f852 	bl	80054a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005404:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <prvIdleTask+0x28>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d9f9      	bls.n	8005400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <prvIdleTask+0x2c>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800541c:	e7f0      	b.n	8005400 <prvIdleTask+0x8>
 800541e:	bf00      	nop
 8005420:	24004690 	.word	0x24004690
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	e00c      	b.n	800544e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4a12      	ldr	r2, [pc, #72]	@ (8005488 <prvInitialiseTaskLists+0x60>)
 8005440:	4413      	add	r3, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fa84 	bl	8003950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3301      	adds	r3, #1
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b37      	cmp	r3, #55	@ 0x37
 8005452:	d9ef      	bls.n	8005434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005454:	480d      	ldr	r0, [pc, #52]	@ (800548c <prvInitialiseTaskLists+0x64>)
 8005456:	f7fe fa7b 	bl	8003950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800545a:	480d      	ldr	r0, [pc, #52]	@ (8005490 <prvInitialiseTaskLists+0x68>)
 800545c:	f7fe fa78 	bl	8003950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005460:	480c      	ldr	r0, [pc, #48]	@ (8005494 <prvInitialiseTaskLists+0x6c>)
 8005462:	f7fe fa75 	bl	8003950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005466:	480c      	ldr	r0, [pc, #48]	@ (8005498 <prvInitialiseTaskLists+0x70>)
 8005468:	f7fe fa72 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800546c:	480b      	ldr	r0, [pc, #44]	@ (800549c <prvInitialiseTaskLists+0x74>)
 800546e:	f7fe fa6f 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <prvInitialiseTaskLists+0x78>)
 8005474:	4a05      	ldr	r2, [pc, #20]	@ (800548c <prvInitialiseTaskLists+0x64>)
 8005476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005478:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <prvInitialiseTaskLists+0x7c>)
 800547a:	4a05      	ldr	r2, [pc, #20]	@ (8005490 <prvInitialiseTaskLists+0x68>)
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	24004690 	.word	0x24004690
 800548c:	24004af0 	.word	0x24004af0
 8005490:	24004b04 	.word	0x24004b04
 8005494:	24004b20 	.word	0x24004b20
 8005498:	24004b34 	.word	0x24004b34
 800549c:	24004b4c 	.word	0x24004b4c
 80054a0:	24004b18 	.word	0x24004b18
 80054a4:	24004b1c 	.word	0x24004b1c

080054a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ae:	e019      	b.n	80054e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054b0:	f7fe fc32 	bl	8003d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b4:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <prvCheckTasksWaitingTermination+0x50>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe facf 	bl	8003a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <prvCheckTasksWaitingTermination+0x54>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a0b      	ldr	r2, [pc, #44]	@ (80054fc <prvCheckTasksWaitingTermination+0x54>)
 80054ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <prvCheckTasksWaitingTermination+0x58>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005500 <prvCheckTasksWaitingTermination+0x58>)
 80054d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054da:	f7fe fc4f 	bl	8003d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f810 	bl	8005504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <prvCheckTasksWaitingTermination+0x58>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e1      	bne.n	80054b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	24004b34 	.word	0x24004b34
 80054fc:	24004b60 	.word	0x24004b60
 8005500:	24004b48 	.word	0x24004b48

08005504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe f8f8 	bl	8003710 <vPortFree>
				vPortFree( pxTCB );
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fe f8f5 	bl	8003710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005526:	e019      	b.n	800555c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800552e:	2b01      	cmp	r3, #1
 8005530:	d103      	bne.n	800553a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fe f8ec 	bl	8003710 <vPortFree>
	}
 8005538:	e010      	b.n	800555c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005540:	2b02      	cmp	r3, #2
 8005542:	d00b      	beq.n	800555c <prvDeleteTCB+0x58>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <prvDeleteTCB+0x54>
	}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <prvResetNextTaskUnblockTime+0x38>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005574:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005576:	f04f 32ff 	mov.w	r2, #4294967295
 800557a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800557c:	e008      	b.n	8005590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <prvResetNextTaskUnblockTime+0x38>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4a04      	ldr	r2, [pc, #16]	@ (80055a0 <prvResetNextTaskUnblockTime+0x3c>)
 800558e:	6013      	str	r3, [r2, #0]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	24004b18 	.word	0x24004b18
 80055a0:	24004b80 	.word	0x24004b80

080055a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <xTaskGetSchedulerState+0x34>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055b2:	2301      	movs	r3, #1
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	e008      	b.n	80055ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b8:	4b08      	ldr	r3, [pc, #32]	@ (80055dc <xTaskGetSchedulerState+0x38>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055c0:	2302      	movs	r3, #2
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	e001      	b.n	80055ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ca:	687b      	ldr	r3, [r7, #4]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	24004b6c 	.word	0x24004b6c
 80055dc:	24004b88 	.word	0x24004b88

080055e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d058      	beq.n	80056a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055f6:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <xTaskPriorityDisinherit+0xd4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d00b      	beq.n	8005618 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60fb      	str	r3, [r7, #12]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60bb      	str	r3, [r7, #8]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564a:	429a      	cmp	r2, r3
 800564c:	d02c      	beq.n	80056a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d128      	bne.n	80056a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fa02 	bl	8003a64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005678:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <xTaskPriorityDisinherit+0xd8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d903      	bls.n	8005688 <xTaskPriorityDisinherit+0xa8>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <xTaskPriorityDisinherit+0xd8>)
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a09      	ldr	r2, [pc, #36]	@ (80056bc <xTaskPriorityDisinherit+0xdc>)
 8005696:	441a      	add	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe f983 	bl	80039aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056a8:	697b      	ldr	r3, [r7, #20]
	}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	2400468c 	.word	0x2400468c
 80056b8:	24004b68 	.word	0x24004b68
 80056bc:	24004690 	.word	0x24004690

080056c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80056ca:	f7fe fb25 	bl	8003d18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80056ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <ulTaskNotifyTake+0x88>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d113      	bne.n	8005700 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <ulTaskNotifyTake+0x88>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056e8:	2101      	movs	r1, #1
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f000 f8ea 	bl	80058c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80056f0:	4b16      	ldr	r3, [pc, #88]	@ (800574c <ulTaskNotifyTake+0x8c>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005700:	f7fe fb3c 	bl	8003d7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005704:	f7fe fb08 	bl	8003d18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005708:	4b0f      	ldr	r3, [pc, #60]	@ (8005748 <ulTaskNotifyTake+0x88>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00c      	beq.n	8005730 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800571c:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <ulTaskNotifyTake+0x88>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	@ 0x54
 8005724:	e004      	b.n	8005730 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005726:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <ulTaskNotifyTake+0x88>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	3a01      	subs	r2, #1
 800572e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <ulTaskNotifyTake+0x88>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800573a:	f7fe fb1f 	bl	8003d7c <vPortExitCritical>

		return ulReturn;
 800573e:	68fb      	ldr	r3, [r7, #12]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2400468c 	.word	0x2400468c
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	@ 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <xTaskGenericNotify+0x32>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	61bb      	str	r3, [r7, #24]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005786:	f7fe fac7 	bl	8003d18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800579e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d827      	bhi.n	80057fe <xTaskGenericNotify+0xae>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <xTaskGenericNotify+0x64>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	08005821 	.word	0x08005821
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	080057d7 	.word	0x080057d7
 80057c0:	080057e3 	.word	0x080057e3
 80057c4:	080057eb 	.word	0x080057eb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80057d4:	e027      	b.n	8005826 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80057e0:	e021      	b.n	8005826 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80057e8:	e01d      	b.n	8005826 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d003      	beq.n	80057f8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80057f6:	e016      	b.n	8005826 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80057fc:	e013      	b.n	8005826 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d00d      	beq.n	8005824 <xTaskGenericNotify+0xd4>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	617b      	str	r3, [r7, #20]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xTaskGenericNotify+0xcc>
					break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <xTaskGenericNotify+0xd6>

					break;
 8005824:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d13b      	bne.n	80058a4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe f917 	bl	8003a64 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583a:	4b1e      	ldr	r3, [pc, #120]	@ (80058b4 <xTaskGenericNotify+0x164>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d903      	bls.n	800584a <xTaskGenericNotify+0xfa>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	4a1b      	ldr	r2, [pc, #108]	@ (80058b4 <xTaskGenericNotify+0x164>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a18      	ldr	r2, [pc, #96]	@ (80058b8 <xTaskGenericNotify+0x168>)
 8005858:	441a      	add	r2, r3
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe f8a2 	bl	80039aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <xTaskGenericNotify+0x136>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	613b      	str	r3, [r7, #16]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588a:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <xTaskGenericNotify+0x16c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d907      	bls.n	80058a4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005894:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <xTaskGenericNotify+0x170>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058a4:	f7fe fa6a 	bl	8003d7c <vPortExitCritical>

		return xReturn;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	@ 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	24004b68 	.word	0x24004b68
 80058b8:	24004690 	.word	0x24004690
 80058bc:	2400468c 	.word	0x2400468c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058ce:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x90>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d4:	4b20      	ldr	r3, [pc, #128]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3304      	adds	r3, #4
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe f8c2 	bl	8003a64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d10a      	bne.n	80058fe <prvAddCurrentTaskToDelayedList+0x3a>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x94>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4819      	ldr	r0, [pc, #100]	@ (800595c <prvAddCurrentTaskToDelayedList+0x98>)
 80058f8:	f7fe f857 	bl	80039aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058fc:	e026      	b.n	800594c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005906:	4b14      	ldr	r3, [pc, #80]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x94>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	429a      	cmp	r2, r3
 8005914:	d209      	bcs.n	800592a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x94>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fe f865 	bl	80039f2 <vListInsert>
}
 8005928:	e010      	b.n	800594c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592a:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xa0>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x94>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3304      	adds	r3, #4
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7fe f85b 	bl	80039f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800593c:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <prvAddCurrentTaskToDelayedList+0xa4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	d202      	bcs.n	800594c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005946:	4a08      	ldr	r2, [pc, #32]	@ (8005968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	24004b64 	.word	0x24004b64
 8005958:	2400468c 	.word	0x2400468c
 800595c:	24004b4c 	.word	0x24004b4c
 8005960:	24004b1c 	.word	0x24004b1c
 8005964:	24004b18 	.word	0x24004b18
 8005968:	24004b80 	.word	0x24004b80

0800596c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	@ 0x28
 8005970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005976:	f000 fb13 	bl	8005fa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800597a:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <xTimerCreateTimerTask+0x84>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d021      	beq.n	80059c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800598a:	1d3a      	adds	r2, r7, #4
 800598c:	f107 0108 	add.w	r1, r7, #8
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	4618      	mov	r0, r3
 8005996:	f7fd fdd3 	bl	8003540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	2302      	movs	r3, #2
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2300      	movs	r3, #0
 80059aa:	460a      	mov	r2, r1
 80059ac:	4911      	ldr	r1, [pc, #68]	@ (80059f4 <xTimerCreateTimerTask+0x88>)
 80059ae:	4812      	ldr	r0, [pc, #72]	@ (80059f8 <xTimerCreateTimerTask+0x8c>)
 80059b0:	f7fe ffce 	bl	8004950 <xTaskCreateStatic>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a11      	ldr	r2, [pc, #68]	@ (80059fc <xTimerCreateTimerTask+0x90>)
 80059b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <xTimerCreateTimerTask+0x90>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059c2:	2301      	movs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	613b      	str	r3, [r7, #16]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059e4:	697b      	ldr	r3, [r7, #20]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	24004bbc 	.word	0x24004bbc
 80059f4:	0800d354 	.word	0x0800d354
 80059f8:	08005b39 	.word	0x08005b39
 80059fc:	24004bc0 	.word	0x24004bc0

08005a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	@ 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10b      	bne.n	8005a30 <xTimerGenericCommand+0x30>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	623b      	str	r3, [r7, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	e7fd      	b.n	8005a2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a30:	4b19      	ldr	r3, [pc, #100]	@ (8005a98 <xTimerGenericCommand+0x98>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02a      	beq.n	8005a8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	dc18      	bgt.n	8005a7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a4a:	f7ff fdab 	bl	80055a4 <xTaskGetSchedulerState>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d109      	bne.n	8005a68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a54:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <xTimerGenericCommand+0x98>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	f107 0110 	add.w	r1, r7, #16
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a60:	f7fe fb86 	bl	8004170 <xQueueGenericSend>
 8005a64:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a66:	e012      	b.n	8005a8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <xTimerGenericCommand+0x98>)
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	f107 0110 	add.w	r1, r7, #16
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	f7fe fb7c 	bl	8004170 <xQueueGenericSend>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a7a:	e008      	b.n	8005a8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <xTimerGenericCommand+0x98>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	f107 0110 	add.w	r1, r7, #16
 8005a84:	2300      	movs	r3, #0
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	f7fe fc74 	bl	8004374 <xQueueGenericSendFromISR>
 8005a8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	24004bbc 	.word	0x24004bbc

08005a9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa6:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <prvProcessExpiredTimer+0x98>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd ffd5 	bl	8003a64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d023      	beq.n	8005b10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	18d1      	adds	r1, r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	6978      	ldr	r0, [r7, #20]
 8005ad6:	f000 f8d5 	bl	8005c84 <prvInsertTimerInActiveList>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d020      	beq.n	8005b22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff88 	bl	8005a00 <xTimerGenericCommand>
 8005af0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d114      	bne.n	8005b22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	60fb      	str	r3, [r7, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	4798      	blx	r3
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	24004bb4 	.word	0x24004bb4

08005b38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f859 	bl	8005bfc <prvGetNextExpireTime>
 8005b4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f805 	bl	8005b60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b56:	f000 f8d7 	bl	8005d08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b5a:	bf00      	nop
 8005b5c:	e7f0      	b.n	8005b40 <prvTimerTask+0x8>
	...

08005b60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b6a:	f7ff f935 	bl	8004dd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f866 	bl	8005c44 <prvSampleTimeNow>
 8005b78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d130      	bne.n	8005be2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <prvProcessTimerOrBlockTask+0x3c>
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d806      	bhi.n	8005b9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b8e:	f7ff f931 	bl	8004df4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff81 	bl	8005a9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b9a:	e024      	b.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ba2:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <prvProcessTimerOrBlockTask+0x90>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <prvProcessTimerOrBlockTask+0x50>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <prvProcessTimerOrBlockTask+0x52>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <prvProcessTimerOrBlockTask+0x94>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f7fe fe91 	bl	80048e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bc6:	f7ff f915 	bl	8004df4 <xTaskResumeAll>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd0:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <prvProcessTimerOrBlockTask+0x98>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
}
 8005be0:	e001      	b.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005be2:	f7ff f907 	bl	8004df4 <xTaskResumeAll>
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	24004bb8 	.word	0x24004bb8
 8005bf4:	24004bbc 	.word	0x24004bbc
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c04:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <prvGetNextExpireTime+0x44>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <prvGetNextExpireTime+0x16>
 8005c0e:	2201      	movs	r2, #1
 8005c10:	e000      	b.n	8005c14 <prvGetNextExpireTime+0x18>
 8005c12:	2200      	movs	r2, #0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c20:	4b07      	ldr	r3, [pc, #28]	@ (8005c40 <prvGetNextExpireTime+0x44>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e001      	b.n	8005c30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	24004bb4 	.word	0x24004bb4

08005c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c4c:	f7ff f970 	bl	8004f30 <xTaskGetTickCount>
 8005c50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c52:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <prvSampleTimeNow+0x3c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d205      	bcs.n	8005c68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c5c:	f000 f93a 	bl	8005ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e002      	b.n	8005c6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	@ (8005c80 <prvSampleTimeNow+0x3c>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	24004bc4 	.word	0x24004bc4

08005c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d812      	bhi.n	8005cd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e01b      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <prvInsertTimerInActiveList+0x7c>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7fd fe92 	bl	80039f2 <vListInsert>
 8005cce:	e012      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d206      	bcs.n	8005ce6 <prvInsertTimerInActiveList+0x62>
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e007      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <prvInsertTimerInActiveList+0x80>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fd fe7e 	bl	80039f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	24004bb8 	.word	0x24004bb8
 8005d04:	24004bb4 	.word	0x24004bb4

08005d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	@ 0x38
 8005d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d0e:	e0ce      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da19      	bge.n	8005d4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	3304      	adds	r3, #4
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	61fb      	str	r3, [r7, #28]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d40:	6850      	ldr	r0, [r2, #4]
 8005d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d44:	6892      	ldr	r2, [r2, #8]
 8005d46:	4611      	mov	r1, r2
 8005d48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f2c0 80ae 	blt.w	8005eae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fe7e 	bl	8003a64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d68:	463b      	mov	r3, r7
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff6a 	bl	8005c44 <prvSampleTimeNow>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	f200 8097 	bhi.w	8005ea8 <prvProcessReceivedCommands+0x1a0>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <prvProcessReceivedCommands+0x78>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005e1f 	.word	0x08005e1f
 8005d90:	08005e33 	.word	0x08005e33
 8005d94:	08005e7f 	.word	0x08005e7f
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005da9 	.word	0x08005da9
 8005da0:	08005e1f 	.word	0x08005e1f
 8005da4:	08005e33 	.word	0x08005e33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	18d1      	adds	r1, r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc8:	f7ff ff5c 	bl	8005c84 <prvInsertTimerInActiveList>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d06c      	beq.n	8005eac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d061      	beq.n	8005eac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	441a      	add	r2, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	2100      	movs	r1, #0
 8005df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dfa:	f7ff fe01 	bl	8005a00 <xTimerGenericCommand>
 8005dfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d152      	bne.n	8005eac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	61bb      	str	r3, [r7, #24]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e30:	e03d      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	617b      	str	r3, [r7, #20]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	18d1      	adds	r1, r2, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e78:	f7ff ff04 	bl	8005c84 <prvInsertTimerInActiveList>
					break;
 8005e7c:	e017      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8e:	f7fd fc3f 	bl	8003710 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e92:	e00c      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ea6:	e002      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <prvProcessReceivedCommands+0x1a6>
					break;
 8005eac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eae:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <prvProcessReceivedCommands+0x1c8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1d39      	adds	r1, r7, #4
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fafa 	bl	80044b0 <xQueueReceive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f47f af26 	bne.w	8005d10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3730      	adds	r7, #48	@ 0x30
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	24004bbc 	.word	0x24004bbc

08005ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eda:	e049      	b.n	8005f70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005edc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd fdb5 	bl	8003a64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d02f      	beq.n	8005f70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d90e      	bls.n	8005f40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7fd fd5a 	bl	80039f2 <vListInsert>
 8005f3e:	e017      	b.n	8005f70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f40:	2300      	movs	r3, #0
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fd58 	bl	8005a00 <xTimerGenericCommand>
 8005f50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	603b      	str	r3, [r7, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f70:	4b09      	ldr	r3, [pc, #36]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1b0      	bne.n	8005edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f7a:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f80:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <prvSwitchTimerLists+0xc8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <prvSwitchTimerLists+0xc4>)
 8005f86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f88:	4a04      	ldr	r2, [pc, #16]	@ (8005f9c <prvSwitchTimerLists+0xc8>)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6013      	str	r3, [r2, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	24004bb4 	.word	0x24004bb4
 8005f9c:	24004bb8 	.word	0x24004bb8

08005fa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fa6:	f7fd feb7 	bl	8003d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <prvCheckForValidListAndQueue+0x60>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d120      	bne.n	8005ff4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fb2:	4814      	ldr	r0, [pc, #80]	@ (8006004 <prvCheckForValidListAndQueue+0x64>)
 8005fb4:	f7fd fccc 	bl	8003950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fb8:	4813      	ldr	r0, [pc, #76]	@ (8006008 <prvCheckForValidListAndQueue+0x68>)
 8005fba:	f7fd fcc9 	bl	8003950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	@ (800600c <prvCheckForValidListAndQueue+0x6c>)
 8005fc0:	4a10      	ldr	r2, [pc, #64]	@ (8006004 <prvCheckForValidListAndQueue+0x64>)
 8005fc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fc4:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <prvCheckForValidListAndQueue+0x70>)
 8005fc6:	4a10      	ldr	r2, [pc, #64]	@ (8006008 <prvCheckForValidListAndQueue+0x68>)
 8005fc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	4b11      	ldr	r3, [pc, #68]	@ (8006014 <prvCheckForValidListAndQueue+0x74>)
 8005fd0:	4a11      	ldr	r2, [pc, #68]	@ (8006018 <prvCheckForValidListAndQueue+0x78>)
 8005fd2:	2110      	movs	r1, #16
 8005fd4:	200a      	movs	r0, #10
 8005fd6:	f7fe f82b 	bl	8004030 <xQueueGenericCreateStatic>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <prvCheckForValidListAndQueue+0x60>)
 8005fde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fe0:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <prvCheckForValidListAndQueue+0x60>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <prvCheckForValidListAndQueue+0x60>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	490b      	ldr	r1, [pc, #44]	@ (800601c <prvCheckForValidListAndQueue+0x7c>)
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fc50 	bl	8004894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ff4:	f7fd fec2 	bl	8003d7c <vPortExitCritical>
}
 8005ff8:	bf00      	nop
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	24004bbc 	.word	0x24004bbc
 8006004:	24004b8c 	.word	0x24004b8c
 8006008:	24004ba0 	.word	0x24004ba0
 800600c:	24004bb4 	.word	0x24004bb4
 8006010:	24004bb8 	.word	0x24004bb8
 8006014:	24004c68 	.word	0x24004c68
 8006018:	24004bc8 	.word	0x24004bc8
 800601c:	0800d35c 	.word	0x0800d35c

08006020 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ffdd 	bl	8006042 <metal_list_add_before>
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6852      	ldr	r2, [r2, #4]
 80060a0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f002 f848 	bl	8008168 <metal_machine_cache_flush>
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f002 f846 	bl	800817e <metal_machine_cache_invalidate>
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ffdd 	bl	80060c6 <__metal_cache_flush>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ffdd 	bl	80060e0 <__metal_cache_invalidate>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <metal_bus_register+0x20>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <metal_bus_register+0x20>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <metal_bus_register+0x26>
		return -EINVAL;
 8006150:	f06f 0315 	mvn.w	r3, #21
 8006154:	e026      	b.n	80061a4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2100      	movs	r1, #0
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f855 	bl	800620c <metal_bus_find>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <metal_bus_register+0x3e>
		return -EEXIST;
 8006168:	f06f 0310 	mvn.w	r3, #16
 800616c:	e01a      	b.n	80061a4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	331c      	adds	r3, #28
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff ff54 	bl	8006020 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3324      	adds	r3, #36	@ 0x24
 800617c:	4619      	mov	r1, r3
 800617e:	480b      	ldr	r0, [pc, #44]	@ (80061ac <metal_bus_register+0x7c>)
 8006180:	f7ff ff79 	bl	8006076 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <metal_bus_register+0x80>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b06      	cmp	r3, #6
 800618a:	d90a      	bls.n	80061a2 <metal_bus_register+0x72>
 800618c:	4b08      	ldr	r3, [pc, #32]	@ (80061b0 <metal_bus_register+0x80>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <metal_bus_register+0x72>
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <metal_bus_register+0x80>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	4905      	ldr	r1, [pc, #20]	@ (80061b4 <metal_bus_register+0x84>)
 800619e:	2007      	movs	r0, #7
 80061a0:	4798      	blx	r3
	return 0;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	24004cc0 	.word	0x24004cc0
 80061b0:	24004cb8 	.word	0x24004cb8
 80061b4:	0800d364 	.word	0x0800d364

080061b8 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3324      	adds	r3, #36	@ 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff63 	bl	8006090 <metal_list_del>
	if (bus->ops.bus_close)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 80061da:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <metal_bus_unregister+0x4c>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d90a      	bls.n	80061f8 <metal_bus_unregister+0x40>
 80061e2:	4b08      	ldr	r3, [pc, #32]	@ (8006204 <metal_bus_unregister+0x4c>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <metal_bus_unregister+0x40>
 80061ea:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <metal_bus_unregister+0x4c>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	4905      	ldr	r1, [pc, #20]	@ (8006208 <metal_bus_unregister+0x50>)
 80061f4:	2007      	movs	r0, #7
 80061f6:	4798      	blx	r3
	return 0;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	24004cb8 	.word	0x24004cb8
 8006208:	0800d378 	.word	0x0800d378

0800620c <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <metal_bus_find+0x58>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e017      	b.n	800624e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b24      	subs	r3, #36	@ 0x24
 8006222:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa f858 	bl	80002e0 <strcmp>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <metal_bus_find+0x3a>
			continue;
		if (result)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <metal_bus_find+0x36>
			*result = bus;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	601a      	str	r2, [r3, #0]
		return 0;
 8006242:	2300      	movs	r3, #0
 8006244:	e009      	b.n	800625a <metal_bus_find+0x4e>
			continue;
 8006246:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a05      	ldr	r2, [pc, #20]	@ (8006268 <metal_bus_find+0x5c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d1e3      	bne.n	800621e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8006256:	f06f 0301 	mvn.w	r3, #1
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	24004cb8 	.word	0x24004cb8
 8006268:	24004cc0 	.word	0x24004cc0

0800626c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <metal_device_open+0x2e>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <metal_device_open+0x2e>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d006      	beq.n	800629a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <metal_device_open+0x2e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 800629a:	f06f 0315 	mvn.w	r3, #21
 800629e:	e01f      	b.n	80062e0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80062a0:	f107 0310 	add.w	r3, r7, #16
 80062a4:	4619      	mov	r1, r3
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ffb0 	bl	800620c <metal_bus_find>
 80062ac:	6178      	str	r0, [r7, #20]
	if (error)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <metal_device_open+0x4c>
		return error;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	e013      	b.n	80062e0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <metal_device_open+0x5a>
		return -ENODEV;
 80062c0:	f06f 0312 	mvn.w	r3, #18
 80062c4:	e00c      	b.n	80062e0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	6938      	ldr	r0, [r7, #16]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4798      	blx	r3
 80062d2:	6178      	str	r0, [r7, #20]
	if (error)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <metal_device_open+0x72>
		return error;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	e000      	b.n	80062e0 <metal_device_open+0x74>

	return 0;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <metal_register_generic_device+0x22>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8006306:	2b02      	cmp	r3, #2
 8006308:	d902      	bls.n	8006310 <metal_register_generic_device+0x28>
		return -EINVAL;
 800630a:	f06f 0315 	mvn.w	r3, #21
 800630e:	e009      	b.n	8006324 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a06      	ldr	r2, [pc, #24]	@ (800632c <metal_register_generic_device+0x44>)
 8006314:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	336c      	adds	r3, #108	@ 0x6c
 800631a:	4619      	mov	r1, r3
 800631c:	4804      	ldr	r0, [pc, #16]	@ (8006330 <metal_register_generic_device+0x48>)
 800631e:	f7ff feaa 	bl	8006076 <metal_list_add_tail>
			    &device->node);
	return 0;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	24000014 	.word	0x24000014
 8006330:	24004cd0 	.word	0x24004cd0

08006334 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8006340:	4b12      	ldr	r3, [pc, #72]	@ (800638c <metal_generic_dev_open+0x58>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e017      	b.n	8006378 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	3b6c      	subs	r3, #108	@ 0x6c
 800634c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f7f9 ffc3 	bl	80002e0 <strcmp>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f000 f890 	bl	800648c <metal_generic_dev_sys_open>
 800636c:	4603      	mov	r3, r0
 800636e:	e009      	b.n	8006384 <metal_generic_dev_open+0x50>
			continue;
 8006370:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4a05      	ldr	r2, [pc, #20]	@ (8006390 <metal_generic_dev_open+0x5c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d1e3      	bne.n	8006348 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8006380:	f06f 0312 	mvn.w	r3, #18
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	24004cb8 	.word	0x24004cb8
 8006390:	24004cd0 	.word	0x24004cd0

08006394 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80063a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d009      	beq.n	80063be <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	461a      	mov	r2, r3
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063ba:	f003 fe10 	bl	8009fde <memcpy>
	for (i = 0; i < nents_in; i++) {
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e02f      	b.n	8006424 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d114      	bne.n	80063f4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	4413      	add	r3, r2
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	461a      	mov	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	4413      	add	r3, r2
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4619      	mov	r1, r3
 80063f0:	f7ff fe83 	bl	80060fa <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	4413      	add	r3, r2
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4613      	mov	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	461a      	mov	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	4413      	add	r3, r2
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4619      	mov	r1, r3
 800641a:	f7ff fe7b 	bl	8006114 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	3301      	adds	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	429a      	cmp	r2, r3
 800642a:	dbcb      	blt.n	80063c4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 800642c:	6a3b      	ldr	r3, [r7, #32]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e017      	b.n	800647a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	461a      	mov	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	4413      	add	r3, r2
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	461a      	mov	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	4413      	add	r3, r2
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	4619      	mov	r1, r3
 8006470:	f7ff fe50 	bl	8006114 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	3301      	adds	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	429a      	cmp	r2, r3
 8006480:	dbe3      	blt.n	800644a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e013      	b.n	80064c2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	3308      	adds	r3, #8
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f000 f828 	bl	800650c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d3e6      	bcc.n	800649a <metal_generic_dev_sys_open+0xe>
 80064cc:	e000      	b.n	80064d0 <metal_generic_dev_sys_open+0x44>
			break;
 80064ce:	bf00      	nop
	}

	return 0;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 80064e4:	4803      	ldr	r0, [pc, #12]	@ (80064f4 <metal_sys_init+0x18>)
 80064e6:	f7ff fe23 	bl	8006130 <metal_bus_register>
	return 0;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	24000014 	.word	0x24000014

080064f8 <metal_sys_finish>:

void metal_sys_finish(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 80064fc:	4802      	ldr	r0, [pc, #8]	@ (8006508 <metal_sys_finish+0x10>)
 80064fe:	f7ff fe5b 	bl	80061b8 <metal_bus_unregister>
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	24000014 	.word	0x24000014

0800650c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02c      	beq.n	8006580 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	fa22 f303 	lsr.w	r3, r2, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e013      	b.n	800656e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 fe1b 	bl	8008194 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	3301      	adds	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	429a      	cmp	r2, r3
 800657e:	d9e2      	bls.n	8006546 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8006580:	bf00      	nop
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <metal_list_init>:
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	int error = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80065b8:	2220      	movs	r2, #32
 80065ba:	2100      	movs	r1, #0
 80065bc:	4810      	ldr	r0, [pc, #64]	@ (8006600 <metal_init+0x54>)
 80065be:	f003 fc5a 	bl	8009e76 <memset>

	_metal.common.log_handler   = params->log_handler;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006600 <metal_init+0x54>)
 80065c8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	791a      	ldrb	r2, [r3, #4]
 80065ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <metal_init+0x54>)
 80065d0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 80065d2:	480c      	ldr	r0, [pc, #48]	@ (8006604 <metal_init+0x58>)
 80065d4:	f7ff ffd8 	bl	8006588 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 80065d8:	480b      	ldr	r0, [pc, #44]	@ (8006608 <metal_init+0x5c>)
 80065da:	f7ff ffd5 	bl	8006588 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 80065de:	480b      	ldr	r0, [pc, #44]	@ (800660c <metal_init+0x60>)
 80065e0:	f7ff ffd2 	bl	8006588 <metal_list_init>

	error = metal_sys_init(params);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff ff79 	bl	80064dc <metal_sys_init>
 80065ea:	60f8      	str	r0, [r7, #12]
	if (error)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <metal_init+0x4a>
		return error;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	e000      	b.n	80065f8 <metal_init+0x4c>

	return error;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	24004cb8 	.word	0x24004cb8
 8006604:	24004cc0 	.word	0x24004cc0
 8006608:	24004cc8 	.word	0x24004cc8
 800660c:	24004cd0 	.word	0x24004cd0

08006610 <metal_finish>:

void metal_finish(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8006614:	f7ff ff70 	bl	80064f8 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8006618:	2220      	movs	r2, #32
 800661a:	2100      	movs	r1, #0
 800661c:	4802      	ldr	r0, [pc, #8]	@ (8006628 <metal_finish+0x18>)
 800661e:	f003 fc2a 	bl	8009e76 <memset>
}
 8006622:	bf00      	nop
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	24004cb8 	.word	0x24004cb8

0800662c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d009      	beq.n	8006654 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d804      	bhi.n	8006654 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	4413      	add	r3, r2
 8006652:	e000      	b.n	8006656 <metal_io_virt+0x2a>
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8006662:	b5b0      	push	{r4, r5, r7, lr}
 8006664:	b08a      	sub	sp, #40	@ 0x28
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	611a      	str	r2, [r3, #16]
 8006680:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	605a      	str	r2, [r3, #4]
	io->size = size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006698:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	2b1f      	cmp	r3, #31
 800669e:	d904      	bls.n	80066aa <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	611a      	str	r2, [r3, #16]
 80066a8:	e006      	b.n	80066b8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 80066aa:	2201      	movs	r2, #1
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	1e5a      	subs	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066bc:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 80066be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <metal_io_init+0x7a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c8:	f103 0418 	add.w	r4, r3, #24
 80066cc:	4615      	mov	r5, r2
 80066ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80066da:	e00a      	b.n	80066f2 <metal_io_init+0x90>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f103 0418 	add.w	r4, r3, #24
 80066e2:	f107 0510 	add.w	r5, r7, #16
 80066e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066ee:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff0a 	bl	800650c <metal_sys_io_mem_map>
}
 80066f8:	bf00      	nop
 80066fa:	3728      	adds	r7, #40	@ 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bdb0      	pop	{r4, r5, r7, pc}

08006700 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b08b      	sub	sp, #44	@ 0x2c
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff ff8b 	bl	800662c <metal_io_virt>
 8006716:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	d902      	bls.n	800672c <metal_io_block_read+0x2c>
		return -ERANGE;
 8006726:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800672a:	e05c      	b.n	80067e6 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	d904      	bls.n	8006744 <metal_io_block_read+0x44>
		len = io->size - offset;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1c      	ldr	r4, [r3, #32]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2305      	movs	r3, #5
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	47a0      	blx	r4
 8006762:	6178      	str	r0, [r7, #20]
 8006764:	e03e      	b.n	80067e4 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8006766:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800676a:	e00c      	b.n	8006786 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	701a      	strb	r2, [r3, #0]
			dest++;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3301      	adds	r3, #1
 8006778:	61bb      	str	r3, [r7, #24]
			ptr++;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	3301      	adds	r3, #1
 800677e:	61fb      	str	r3, [r7, #28]
			len--;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	3b01      	subs	r3, #1
 8006784:	603b      	str	r3, [r7, #0]
		while ( len && (
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ea      	bne.n	800676c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80067a0:	e00c      	b.n	80067bc <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3304      	adds	r3, #4
 80067ae:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3304      	adds	r3, #4
 80067b4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	3b04      	subs	r3, #4
 80067ba:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	dcef      	bgt.n	80067a2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 80067c2:	e00c      	b.n	80067de <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1ef      	bne.n	80067c4 <metal_io_block_read+0xc4>
	}
	return retlen;
 80067e4:	697b      	ldr	r3, [r7, #20]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3724      	adds	r7, #36	@ 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}

080067ee <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 80067ee:	b590      	push	{r4, r7, lr}
 80067f0:	b08b      	sub	sp, #44	@ 0x2c
 80067f2:	af02      	add	r7, sp, #8
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff ff14 	bl	800662c <metal_io_virt>
 8006804:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d902      	bls.n	800681a <metal_io_block_write+0x2c>
		return -ERANGE;
 8006814:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8006818:	e05b      	b.n	80068d2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d904      	bls.n	8006832 <metal_io_block_write+0x44>
		len = io->size - offset;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d017      	beq.n	800686e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	2305      	movs	r3, #5
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	47a0      	blx	r4
 8006850:	6178      	str	r0, [r7, #20]
 8006852:	e03d      	b.n	80068d0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	701a      	strb	r2, [r3, #0]
			ptr++;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
			source++;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	3301      	adds	r3, #1
 8006866:	61bb      	str	r3, [r7, #24]
			len--;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	3b01      	subs	r3, #1
 800686c:	603b      	str	r3, [r7, #0]
		while ( len && (
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1ea      	bne.n	8006854 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8006888:	e00c      	b.n	80068a4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	3304      	adds	r3, #4
 8006896:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	3304      	adds	r3, #4
 800689c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	3b04      	subs	r3, #4
 80068a2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	dcef      	bgt.n	800688a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 80068aa:	e00c      	b.n	80068c6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	3301      	adds	r3, #1
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1ef      	bne.n	80068ac <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 80068cc:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80068d0:	697b      	ldr	r3, [r7, #20]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3724      	adds	r7, #36	@ 0x24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}

080068da <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 80068da:	b590      	push	{r4, r7, lr}
 80068dc:	b08b      	sub	sp, #44	@ 0x2c
 80068de:	af02      	add	r7, sp, #8
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fe9d 	bl	800662c <metal_io_virt>
 80068f2:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d902      	bls.n	8006908 <metal_io_block_set+0x2e>
		return -ERANGE;
 8006902:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8006906:	e05d      	b.n	80069c4 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	d904      	bls.n	8006920 <metal_io_block_set+0x46>
		len = io->size - offset;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006930:	79fa      	ldrb	r2, [r7, #7]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2305      	movs	r3, #5
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	47a0      	blx	r4
 800693e:	e040      	b.n	80069c2 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e00a      	b.n	8006960 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800694a:	79fa      	ldrb	r2, [r7, #7]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4313      	orrs	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3301      	adds	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d9f1      	bls.n	800694a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8006966:	e008      	b.n	800697a <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	79fa      	ldrb	r2, [r7, #7]
 800696c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <metal_io_block_set+0xc4>
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1ee      	bne.n	8006968 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800698a:	e008      	b.n	800699e <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3304      	adds	r3, #4
 8006996:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	3b04      	subs	r3, #4
 800699c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	dcf3      	bgt.n	800698c <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80069a4:	e008      	b.n	80069b8 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	79fa      	ldrb	r2, [r7, #7]
 80069aa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f3      	bne.n	80069a6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 80069be:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80069c2:	693b      	ldr	r3, [r7, #16]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	@ 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}

080069cc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 80069cc:	b40e      	push	{r1, r2, r3}
 80069ce:	b480      	push	{r7}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	4603      	mov	r3, r0
 80069d6:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	b003      	add	sp, #12
 80069e4:	4770      	bx	lr

080069e6 <metal_io_virt>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
		: NULL);
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d009      	beq.n	8006a0e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d804      	bhi.n	8006a0e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	e000      	b.n	8006a10 <metal_io_virt+0x2a>
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d201      	bcs.n	8006a3e <metal_io_virt_to_offset+0x22>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	e001      	b.n	8006a42 <metal_io_virt_to_offset+0x26>
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8006a50:	b5b0      	push	{r4, r5, r7, lr}
 8006a52:	b08c      	sub	sp, #48	@ 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff ffbf 	bl	80069e6 <metal_io_virt>
 8006a68:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699c      	ldr	r4, [r3, #24]
 8006a76:	79fa      	ldrb	r2, [r7, #7]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	47a0      	blx	r4
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	e059      	b.n	8006b3a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d012      	beq.n	8006ab2 <metal_io_read+0x62>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10f      	bne.n	8006ab2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8006a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	f3bf 8f5b 	dmb	ish
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f3bf 8f5b 	dmb	ish
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	76fb      	strb	r3, [r7, #27]
 8006aa6:	7efb      	ldrb	r3, [r7, #27]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2200      	movs	r2, #0
 8006aac:	461c      	mov	r4, r3
 8006aae:	4615      	mov	r5, r2
 8006ab0:	e043      	b.n	8006b3a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <metal_io_read+0x8e>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d10f      	bne.n	8006ade <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8006abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	f3bf 8f5b 	dmb	ish
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	f3bf 8f5b 	dmb	ish
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	833b      	strh	r3, [r7, #24]
 8006ad2:	8b3b      	ldrh	r3, [r7, #24]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	461c      	mov	r4, r3
 8006ada:	4615      	mov	r5, r2
 8006adc:	e02d      	b.n	8006b3a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <metal_io_read+0xb6>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d10d      	bne.n	8006b06 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f3bf 8f5b 	dmb	ish
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f3bf 8f5b 	dmb	ish
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	461c      	mov	r4, r3
 8006b02:	4615      	mov	r5, r2
 8006b04:	e019      	b.n	8006b3a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <metal_io_read+0xde>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d10d      	bne.n	8006b2e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	f3bf 8f5b 	dmb	ish
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f3bf 8f5b 	dmb	ish
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2200      	movs	r2, #0
 8006b28:	461c      	mov	r4, r3
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e005      	b.n	8006b3a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8006b2e:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <metal_io_read+0xf8>)
 8006b30:	4a06      	ldr	r2, [pc, #24]	@ (8006b4c <metal_io_read+0xfc>)
 8006b32:	21f0      	movs	r1, #240	@ 0xf0
 8006b34:	4806      	ldr	r0, [pc, #24]	@ (8006b50 <metal_io_read+0x100>)
 8006b36:	f002 f949 	bl	8008dcc <__assert_func>
	return 0; /* quiet compiler */
}
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	3730      	adds	r7, #48	@ 0x30
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bdb0      	pop	{r4, r5, r7, pc}
 8006b48:	0800d418 	.word	0x0800d418
 8006b4c:	0800d5f4 	.word	0x0800d5f4
 8006b50:	0800d41c 	.word	0x0800d41c

08006b54 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b08f      	sub	sp, #60	@ 0x3c
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff3e 	bl	80069e6 <metal_io_virt>
 8006b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	69dc      	ldr	r4, [r3, #28]
 8006b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8006b8c:	e04e      	b.n	8006c2c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <metal_io_write+0x5e>
 8006b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10b      	bne.n	8006bb2 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b9e:	783b      	ldrb	r3, [r7, #0]
 8006ba0:	76fb      	strb	r3, [r7, #27]
 8006ba2:	7efa      	ldrb	r2, [r7, #27]
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	f3bf 8f5b 	dmb	ish
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	f3bf 8f5b 	dmb	ish
 8006bb0:	e03c      	b.n	8006c2c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <metal_io_write+0x82>
 8006bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d10b      	bne.n	8006bd6 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc2:	883b      	ldrh	r3, [r7, #0]
 8006bc4:	833b      	strh	r3, [r7, #24]
 8006bc6:	8b3a      	ldrh	r2, [r7, #24]
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	f3bf 8f5b 	dmb	ish
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	f3bf 8f5b 	dmb	ish
 8006bd4:	e02a      	b.n	8006c2c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00e      	beq.n	8006bfa <metal_io_write+0xa6>
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d10b      	bne.n	8006bfa <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	f3bf 8f5b 	dmb	ish
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f5b 	dmb	ish
 8006bf8:	e018      	b.n	8006c2c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <metal_io_write+0xca>
 8006c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d10b      	bne.n	8006c1e <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f3bf 8f5b 	dmb	ish
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f5b 	dmb	ish
 8006c1c:	e006      	b.n	8006c2c <metal_io_write+0xd8>
		metal_assert (0);
 8006c1e:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <metal_io_write+0xe0>)
 8006c20:	4a05      	ldr	r2, [pc, #20]	@ (8006c38 <metal_io_write+0xe4>)
 8006c22:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8006c26:	4805      	ldr	r0, [pc, #20]	@ (8006c3c <metal_io_write+0xe8>)
 8006c28:	f002 f8d0 	bl	8008dcc <__assert_func>
}
 8006c2c:	bf00      	nop
 8006c2e:	3734      	adds	r7, #52	@ 0x34
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd90      	pop	{r4, r7, pc}
 8006c34:	0800d418 	.word	0x0800d418
 8006c38:	0800d604 	.word	0x0800d604
 8006c3c:	0800d41c 	.word	0x0800d41c

08006c40 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 f8dd 	bl	8008e08 <malloc>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 f8d9 	bl	8008e18 <free>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3307      	adds	r3, #7
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ffde 	bl	8006c40 <metal_allocate_memory>
 8006c84:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f003 f8f0 	bl	8009e76 <memset>
	}

	return vqs;
 8006c96:	68bb      	ldr	r3, [r7, #8]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	891b      	ldrh	r3, [r3, #8]
 8006cac:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	3b18      	subs	r3, #24
 8006cb8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d905      	bls.n	8006cd0 <rproc_virtio_virtqueue_notify+0x30>
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <rproc_virtio_virtqueue_notify+0x5c>)
 8006cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006d00 <rproc_virtio_virtqueue_notify+0x60>)
 8006cc8:	2133      	movs	r1, #51	@ 0x33
 8006cca:	480e      	ldr	r0, [pc, #56]	@ (8006d04 <rproc_virtio_virtqueue_notify+0x64>)
 8006ccc:	f002 f87e 	bl	8008dcc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	440b      	add	r3, r1
 8006ce0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6810      	ldr	r0, [r2, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	6912      	ldr	r2, [r2, #16]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4798      	blx	r3
}
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	0800d464 	.word	0x0800d464
 8006d00:	0800d5d4 	.word	0x0800d5d4
 8006d04:	0800d480 	.word	0x0800d480

08006d08 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3b18      	subs	r3, #24
 8006d14:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fe77 	bl	8006a1c <metal_io_virt_to_offset>
 8006d2e:	4601      	mov	r1, r0
 8006d30:	2301      	movs	r3, #1
 8006d32:	2205      	movs	r2, #5
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff fe8b 	bl	8006a50 <metal_io_read>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4613      	mov	r3, r2
 8006d40:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8006d42:	7afb      	ldrb	r3, [r7, #11]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8006d4c:	b5b0      	push	{r4, r5, r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3b18      	subs	r3, #24
 8006d5c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fe53 	bl	8006a1c <metal_io_virt_to_offset>
 8006d76:	4601      	mov	r1, r0
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	461c      	mov	r4, r3
 8006d7e:	4615      	mov	r5, r2
 8006d80:	2301      	movs	r3, #1
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	2305      	movs	r3, #5
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4622      	mov	r2, r4
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fee1 	bl	8006b54 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6810      	ldr	r0, [r2, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4798      	blx	r3
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bdb0      	pop	{r4, r5, r7, pc}

08006daa <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3b18      	subs	r3, #24
 8006db6:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	4619      	mov	r1, r3
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fe26 	bl	8006a1c <metal_io_virt_to_offset>
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fe3a 	bl	8006a50 <metal_io_read>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4613      	mov	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8006de4:	68bb      	ldr	r3, [r7, #8]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8006dee:	b5b0      	push	{r4, r5, r7, lr}
 8006df0:	b088      	sub	sp, #32
 8006df2:	af02      	add	r7, sp, #8
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3b18      	subs	r3, #24
 8006dfc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff fe03 	bl	8006a1c <metal_io_virt_to_offset>
 8006e16:	4601      	mov	r1, r0
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	4615      	mov	r5, r2
 8006e20:	2304      	movs	r3, #4
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	2305      	movs	r3, #5
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7ff fe91 	bl	8006b54 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	6810      	ldr	r0, [r2, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4798      	blx	r3
}
 8006e42:	bf00      	nop
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bdb0      	pop	{r4, r5, r7, pc}

08006e4a <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b085      	sub	sp, #20
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8006ea6:	2140      	movs	r1, #64	@ 0x40
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff4f 	bl	8006d4c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	@ 0x38
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	7e5b      	ldrb	r3, [r3, #25]
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8006ed0:	2050      	movs	r0, #80	@ 0x50
 8006ed2:	f7ff feb5 	bl	8006c40 <metal_allocate_memory>
 8006ed6:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e092      	b.n	8007008 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8006ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fea7 	bl	8006c40 <metal_allocate_memory>
 8006ef2:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8081 	beq.w	8006ffe <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8006efc:	2250      	movs	r2, #80	@ 0x50
 8006efe:	2100      	movs	r1, #0
 8006f00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f02:	f002 ffb8 	bl	8009e76 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8006f06:	2218      	movs	r2, #24
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6a38      	ldr	r0, [r7, #32]
 8006f0c:	f002 ffb3 	bl	8009e76 <memset>
	vdev = &rpvdev->vdev;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	3318      	adds	r3, #24
 8006f14:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1a:	e025      	b.n	8006f68 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8006f20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f2e:	4413      	add	r3, r2
 8006f30:	3304      	adds	r3, #4
 8006f32:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8006f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f42:	f7ff fe94 	bl	8006c6e <virtqueue_allocate>
 8006f46:	6178      	str	r0, [r7, #20]
		if (!vq)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d031      	beq.n	8006fb2 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8006f4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f50:	4613      	mov	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4413      	add	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	3301      	adds	r3, #1
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d3d5      	bcc.n	8006f1c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f74:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	6a3a      	ldr	r2, [r7, #32]
 8006f80:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f86:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f9e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fa4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4a19      	ldr	r2, [pc, #100]	@ (8007010 <rproc_virtio_create_vdev+0x158>)
 8006faa:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	3318      	adds	r3, #24
 8006fb0:	e02a      	b.n	8007008 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8006fb2:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb8:	e019      	b.n	8006fee <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8006fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	4413      	add	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	4413      	add	r3, r2
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	4413      	add	r3, r2
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fe38 	bl	8006c58 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fea:	3301      	adds	r3, #1
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d3e1      	bcc.n	8006fba <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8006ff6:	6a38      	ldr	r0, [r7, #32]
 8006ff8:	f7ff fe2e 	bl	8006c58 <metal_free_memory>
 8006ffc:	e000      	b.n	8007000 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8006ffe:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8007000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007002:	f7ff fe29 	bl	8006c58 <metal_free_memory>
	return NULL;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3738      	adds	r7, #56	@ 0x38
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	0800d5b0 	.word	0x0800d5b0

08007014 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8007030:	f06f 0301 	mvn.w	r3, #1
 8007034:	e019      	b.n	800706a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4613      	mov	r3, r2
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	4413      	add	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	440b      	add	r3, r1
 8007046:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	b29a      	uxth	r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007066:	609a      	str	r2, [r3, #8]

	return 0;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8007086:	f06f 0315 	mvn.w	r3, #21
 800708a:	e02c      	b.n	80070e6 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d101      	bne.n	800709a <rproc_virtio_notified+0x24>
		return 0;
 8007096:	2300      	movs	r3, #0
 8007098:	e025      	b.n	80070e6 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e01a      	b.n	80070dc <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4613      	mov	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	440b      	add	r3, r1
 80070b6:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d003      	beq.n	80070ca <rproc_virtio_notified+0x54>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d105      	bne.n	80070d6 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80070d0:	68b8      	ldr	r0, [r7, #8]
 80070d2:	f001 fbca 	bl	800886a <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	3301      	adds	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d3e0      	bcc.n	80070a6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fe02 	bl	8006d08 <rproc_virtio_get_status>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8007112:	e7f4      	b.n	80070fe <rproc_virtio_wait_remote_ready+0x10>
		return;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8007118:	bf00      	nop
	}
}
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8007128:	bf00      	nop
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	4611      	mov	r1, r2
 8007130:	f3bf 8f5b 	dmb	ish
 8007134:	e8d3 2f4f 	ldrexb	r2, [r3]
 8007138:	e8c3 1f40 	strexb	r0, r1, [r3]
 800713c:	2800      	cmp	r0, #0
 800713e:	d1f9      	bne.n	8007134 <__metal_mutex_acquire+0x14>
 8007140:	f3bf 8f5b 	dmb	ish
 8007144:	b2d3      	uxtb	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1ef      	bne.n	800712a <__metal_mutex_acquire+0xa>
		;
	}
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f3bf 8f5b 	dmb	ish
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	f3bf 8f5b 	dmb	ish
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ffcc 	bl	8007120 <__metal_mutex_acquire>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ffdd 	bl	8007158 <__metal_mutex_release>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <metal_list_add_before>:
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	601a      	str	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <metal_list_add_tail>:
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff ffdd 	bl	80071a6 <metal_list_add_before>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <metal_list_del>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6852      	ldr	r2, [r2, #4]
 8007204:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	009a      	lsls	r2, r3, #2
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	440a      	add	r2, r1
 800723e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	f002 021f 	and.w	r2, r2, #31
 8007246:	2001      	movs	r0, #1
 8007248:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4403      	add	r3, r0
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	2101      	movs	r1, #1
 8007280:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8007284:	4013      	ands	r3, r2
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	009a      	lsls	r2, r3, #2
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	440a      	add	r2, r1
 80072a6:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	f002 021f 	and.w	r2, r2, #31
 80072ae:	2001      	movs	r0, #1
 80072b0:	fa00 f202 	lsl.w	r2, r0, r2
 80072b4:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4403      	add	r3, r0
 80072bc:	400a      	ands	r2, r1
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ffc2 	bl	8007262 <metal_bitmap_is_bit_set>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e002      	b.n	800730a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	3301      	adds	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	d207      	bcs.n	8007322 <metal_bitmap_next_clear_bit+0x30>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff ffd8 	bl	80072cc <metal_bitmap_is_bit_clear>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8007322:	697b      	ldr	r3, [r7, #20]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <rpmsg_init_ept>:
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f002 fdb2 	bl	8009eaa <strncpy>
	ept->addr = src;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
 8007374:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ffb8 	bl	80072f2 <metal_bitmap_next_clear_bit>
 8007382:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d206      	bcs.n	800739a <rpmsg_get_address+0x34>
		addr = nextbit;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff48 	bl	800722a <metal_bitmap_set_bit>
	}

	return addr;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	da03      	bge.n	80073c0 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ff69 	bl	8007292 <metal_bitmap_clear_bit>
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	da05      	bge.n	80073e8 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff ff3f 	bl	8007262 <metal_bitmap_is_bit_set>
 80073e4:	4603      	mov	r3, r0
 80073e6:	e000      	b.n	80073ea <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <rpmsg_is_address_set+0x2c>)
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	fffff82d 	.word	0xfffff82d

080073f8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	da05      	bge.n	8007418 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff ff0b 	bl	800722a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8007418:	4b02      	ldr	r3, [pc, #8]	@ (8007424 <rpmsg_set_address+0x2c>)
	}
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	fffff82d 	.word	0xfffff82d

08007428 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b089      	sub	sp, #36	@ 0x24
 800742c:	af02      	add	r7, sp, #8
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <rpmsg_send_offchannel_raw+0x2a>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d006      	beq.n	8007452 <rpmsg_send_offchannel_raw+0x2a>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <rpmsg_send_offchannel_raw+0x2a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d101      	bne.n	8007456 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <rpmsg_send_offchannel_raw+0x60>)
 8007454:	e014      	b.n	8007480 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	6978      	ldr	r0, [r7, #20]
 8007478:	47a0      	blx	r4
 800747a:	4603      	mov	r3, r0
 800747c:	e000      	b.n	8007480 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800747e:	4b02      	ldr	r3, [pc, #8]	@ (8007488 <rpmsg_send_offchannel_raw+0x60>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	bd90      	pop	{r4, r7, pc}
 8007488:	fffff82d 	.word	0xfffff82d

0800748c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b090      	sub	sp, #64	@ 0x40
 8007490:	af02      	add	r7, sp, #8
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	2220      	movs	r2, #32
 80074a8:	4618      	mov	r0, r3
 80074aa:	f002 fcfe 	bl	8009eaa <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	2201      	movs	r2, #1
 80074b8:	9201      	str	r2, [sp, #4]
 80074ba:	2228      	movs	r2, #40	@ 0x28
 80074bc:	9200      	str	r2, [sp, #0]
 80074be:	2235      	movs	r2, #53	@ 0x35
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ffb1 	bl	8007428 <rpmsg_send_offchannel_raw>
 80074c6:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da01      	bge.n	80074d2 <rpmsg_send_ns_message+0x46>
		return ret;
 80074ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d0:	e000      	b.n	80074d4 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3738      	adds	r7, #56	@ 0x38
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	e04b      	b.n	800758a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	3b34      	subs	r3, #52	@ 0x34
 80074fa:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d006      	beq.n	8007512 <rpmsg_get_endpoint+0x36>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d101      	bne.n	8007512 <rpmsg_get_endpoint+0x36>
			return ept;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	e040      	b.n	8007594 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	d106      	bne.n	800752a <rpmsg_get_endpoint+0x4e>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d101      	bne.n	800752a <rpmsg_get_endpoint+0x4e>
			return ept;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	e034      	b.n	8007594 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00c      	beq.n	800754a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2220      	movs	r2, #32
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	4618      	mov	r0, r3
 8007538:	f002 fca5 	bl	8009e86 <strncmp>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf0c      	ite	eq
 8007542:	2301      	moveq	r3, #1
 8007544:	2300      	movne	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d018      	beq.n	8007582 <rpmsg_get_endpoint+0xa6>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d015      	beq.n	8007582 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d006      	beq.n	800756c <rpmsg_get_endpoint+0x90>
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d101      	bne.n	800756c <rpmsg_get_endpoint+0x90>
			return ept;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	e013      	b.n	8007594 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d107      	bne.n	8007584 <rpmsg_get_endpoint+0xa8>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d102      	bne.n	8007584 <rpmsg_get_endpoint+0xa8>
			return ept;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	e008      	b.n	8007594 <rpmsg_get_endpoint+0xb8>
			continue;
 8007582:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	429a      	cmp	r2, r3
 8007590:	d1af      	bne.n	80074f2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d008      	beq.n	80075cc <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80075c4:	461a      	mov	r2, r3
 80075c6:	2180      	movs	r1, #128	@ 0x80
 80075c8:	f7ff feec 	bl	80073a4 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3334      	adds	r3, #52	@ 0x34
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fe0f 	bl	80071f4 <metal_list_del>
 80075d6:	e000      	b.n	80075da <rpmsg_unregister_endpoint+0x3e>
		return;
 80075d8:	bf00      	nop
}
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3334      	adds	r3, #52	@ 0x34
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7ff fdee 	bl	80071da <metal_list_add_tail>
	return RPMSG_SUCCESS;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	613b      	str	r3, [r7, #16]

	if (!ept)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8007620:	4b37      	ldr	r3, [pc, #220]	@ (8007700 <rpmsg_create_ept+0xf8>)
 8007622:	e068      	b.n	80076f6 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3358      	adds	r3, #88	@ 0x58
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fda6 	bl	800717a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d018      	beq.n	8007668 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3348      	adds	r3, #72	@ 0x48
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	2180      	movs	r1, #128	@ 0x80
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fec2 	bl	80073c8 <rpmsg_is_address_set>
 8007644:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d107      	bne.n	800765c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3348      	adds	r3, #72	@ 0x48
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fecf 	bl	80073f8 <rpmsg_set_address>
 800765a:	e00c      	b.n	8007676 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	dd40      	ble.n	80076e4 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8007666:	e040      	b.n	80076ea <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3348      	adds	r3, #72	@ 0x48
 800766c:	2180      	movs	r1, #128	@ 0x80
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fe79 	bl	8007366 <rpmsg_get_address>
 8007674:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fe51 	bl	800732c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	68b8      	ldr	r0, [r7, #8]
 800768e:	f7ff ffa7 	bl	80075e0 <rpmsg_register_endpoint>
 8007692:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	da06      	bge.n	80076a8 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	3348      	adds	r3, #72	@ 0x48
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	2180      	movs	r1, #128	@ 0x80
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fe7e 	bl	80073a4 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d11c      	bne.n	80076e8 <rpmsg_create_ept+0xe0>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d117      	bne.n	80076e8 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	3358      	adds	r3, #88	@ 0x58
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff fd67 	bl	8007190 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80076c2:	2100      	movs	r1, #0
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff fee1 	bl	800748c <rpmsg_send_ns_message>
 80076ca:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3358      	adds	r3, #88	@ 0x58
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fd52 	bl	800717a <metal_mutex_acquire>
		if (status)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff5d 	bl	800759c <rpmsg_unregister_endpoint>
 80076e2:	e002      	b.n	80076ea <rpmsg_create_ept+0xe2>
			goto ret_status;
 80076e4:	bf00      	nop
 80076e6:	e000      	b.n	80076ea <rpmsg_create_ept+0xe2>
	}

ret_status:
 80076e8:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3358      	adds	r3, #88	@ 0x58
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fd4e 	bl	8007190 <metal_mutex_release>
	return status;
 80076f4:	697b      	ldr	r3, [r7, #20]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	fffff82d 	.word	0xfffff82d

08007704 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d018      	beq.n	8007744 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	2b35      	cmp	r3, #53	@ 0x35
 800771e:	d003      	beq.n	8007728 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff feb2 	bl	800748c <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3358      	adds	r3, #88	@ 0x58
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fd24 	bl	800717a <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff32 	bl	800759c <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3358      	adds	r3, #88	@ 0x58
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fd27 	bl	8007190 <metal_mutex_release>
 8007742:	e000      	b.n	8007746 <rpmsg_destroy_ept+0x42>
		return;
 8007744:	bf00      	nop
}
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <__metal_cache_invalidate>:
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fd10 	bl	800817e <metal_machine_cache_invalidate>
}
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <metal_cache_invalidate>:
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ffea 	bl	800774c <__metal_cache_invalidate>
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff ffee 	bl	8007780 <__metal_sleep_usec>
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <metal_list_init>:
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <metal_list_is_empty>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	return list->next == list;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <metal_io_virt_to_offset>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	429a      	cmp	r2, r3
 8007810:	d201      	bcs.n	8007816 <metal_io_virt_to_offset+0x22>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	e001      	b.n	800781a <metal_io_virt_to_offset+0x26>
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <__metal_mutex_init>:
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	461a      	mov	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f3bf 8f5b 	dmb	ish
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	f3bf 8f5b 	dmb	ish
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <__metal_mutex_deinit>:
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <__metal_mutex_acquire>:
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800786e:	bf00      	nop
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	4611      	mov	r1, r2
 8007876:	f3bf 8f5b 	dmb	ish
 800787a:	e8d3 2f4f 	ldrexb	r2, [r3]
 800787e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8007882:	2800      	cmp	r0, #0
 8007884:	d1f9      	bne.n	800787a <__metal_mutex_acquire+0x14>
 8007886:	f3bf 8f5b 	dmb	ish
 800788a:	b2d3      	uxtb	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ef      	bne.n	8007870 <__metal_mutex_acquire+0xa>
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <__metal_mutex_release>:
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f3bf 8f5b 	dmb	ish
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	f3bf 8f5b 	dmb	ish
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <metal_mutex_init>:
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff ffac 	bl	8007826 <__metal_mutex_init>
}
 80078ce:	bf00      	nop
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <metal_mutex_deinit>:
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff ffb7 	bl	8007852 <__metal_mutex_deinit>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <metal_mutex_acquire>:
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff ffb6 	bl	8007866 <__metal_mutex_acquire>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <metal_mutex_release>:
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ffc7 	bl	800789e <__metal_mutex_release>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <rpmsg_init_ept>:
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	4618      	mov	r0, r3
 800792e:	f002 fabc 	bl	8009eaa <strncpy>
	ept->addr = src;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795e:	699b      	ldr	r3, [r3, #24]
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007984:	78f9      	ldrb	r1, [r7, #3]
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80079a6:	4610      	mov	r0, r2
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af02      	add	r7, sp, #8
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	f000 fc19 	bl	8008228 <virtio_create_virtqueues>
 80079f6:	4603      	mov	r3, r0
					callbacks);
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fd62 	bl	80074dc <rpmsg_get_endpoint>
 8007a18:	4603      	mov	r3, r0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d901      	bls.n	8007a3a <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e00f      	b.n	8007a5a <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6899      	ldr	r1, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	1acb      	subs	r3, r1, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	605a      	str	r2, [r3, #4]

	return buffer;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01d      	beq.n	8007ab4 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <rpmsg_virtio_init_shm_pool+0x2c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f023 0303 	bic.w	r3, r3, #3
 8007a8e:	3304      	adds	r3, #4
 8007a90:	e000      	b.n	8007a94 <rpmsg_virtio_init_shm_pool+0x2e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <rpmsg_virtio_init_shm_pool+0x46>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	e000      	b.n	8007aae <rpmsg_virtio_init_shm_pool+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	6053      	str	r3, [r2, #4]
 8007ab2:	e000      	b.n	8007ab6 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8007ab4:	bf00      	nop
}
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	@ 0x28
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ff3f 	bl	8007952 <rpmsg_virtio_get_role>
 8007ad4:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10d      	bne.n	8007af8 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8007ae8:	f107 0114 	add.w	r1, r7, #20
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2301      	movs	r3, #1
 8007af2:	2200      	movs	r2, #0
 8007af4:	f000 fce7 	bl	80084c6 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8007af8:	bf00      	nop
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	@ 0x28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff ff1f 	bl	8007952 <rpmsg_virtio_get_role>
 8007b14:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10f      	bne.n	8007b3c <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007b28:	f107 0114 	add.w	r1, r7, #20
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2301      	movs	r3, #1
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 fcc7 	bl	80084c6 <virtqueue_add_buffer>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	e000      	b.n	8007b3e <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fefd 	bl	8007952 <rpmsg_virtio_get_role>
 8007b58:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d116      	bne.n	8007b92 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fcee 	bl	800854e <virtqueue_get_buffer>
 8007b72:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ff4d 	bl	8007a22 <rpmsg_virtio_shm_pool_get_buffer>
 8007b88:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b90:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8007b92:	697b      	ldr	r3, [r7, #20]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff fed2 	bl	8007952 <rpmsg_virtio_get_role>
 8007bae:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d107      	bne.n	8007bca <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fcc3 	bl	800854e <virtqueue_get_buffer>
 8007bc8:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6978      	ldr	r0, [r7, #20]
 8007bd8:	f7ff fdc5 	bl	8007766 <metal_cache_invalidate>
	}

	return data;
 8007bdc:	697b      	ldr	r3, [r7, #20]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff feaf 	bl	8007952 <rpmsg_virtio_get_role>
 8007bf4:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8007c00:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8007c04:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b090      	sub	sp, #64	@ 0x40
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8007c2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007c2c:	f7ff feb1 	bl	8007992 <rpmsg_virtio_get_status>
 8007c30:	4603      	mov	r3, r0
 8007c32:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8007c3e:	4b46      	ldr	r3, [pc, #280]	@ (8007d58 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8007c40:	e086      	b.n	8007d50 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8007c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8007c48:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8007c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c4e:	e001      	b.n	8007c54 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3358      	adds	r3, #88	@ 0x58
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fe47 	bl	80078ec <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8007c5e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007c60:	f7ff ffc1 	bl	8007be6 <_rpmsg_virtio_get_buffer_size>
 8007c64:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8007c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	dc08      	bgt.n	8007c80 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8007c6e:	f107 0216 	add.w	r2, r7, #22
 8007c72:	f107 0310 	add.w	r3, r7, #16
 8007c76:	4619      	mov	r1, r3
 8007c78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007c7a:	f7ff ff64 	bl	8007b46 <rpmsg_virtio_get_tx_buffer>
 8007c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3358      	adds	r3, #88	@ 0x58
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fe3c 	bl	8007902 <metal_mutex_release>
		if (buffer || !tick_count)
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10e      	bne.n	8007cae <rpmsg_virtio_send_offchannel_raw+0x9e>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8007c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8007c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d5c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8007c9e:	e057      	b.n	8007d50 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8007ca0:	200a      	movs	r0, #10
 8007ca2:	f7ff fd78 	bl	8007796 <metal_sleep_usec>
		tick_count--;
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8007cac:	e7d2      	b.n	8007c54 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8007cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8007cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8007d60 <rpmsg_virtio_send_offchannel_raw+0x150>)
 8007cb6:	e04b      	b.n	8007d50 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8007cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cce:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8007cd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd4:	f7ff fd8e 	bl	80077f4 <metal_io_virt_to_offset>
 8007cd8:	4601      	mov	r1, r0
 8007cda:	f107 0218 	add.w	r2, r7, #24
 8007cde:	2310      	movs	r3, #16
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce2:	f7fe fd84 	bl	80067ee <metal_io_block_write>
 8007ce6:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d001      	beq.n	8007cf2 <rpmsg_virtio_send_offchannel_raw+0xe2>
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfa:	f7ff fd7b 	bl	80077f4 <metal_io_virt_to_offset>
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d06:	f7fe fd72 	bl	80067ee <metal_io_block_write>
 8007d0a:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <rpmsg_virtio_send_offchannel_raw+0x108>
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3358      	adds	r3, #88	@ 0x58
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fde5 	bl	80078ec <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007d2a:	f7ff fee9 	bl	8007b00 <rpmsg_virtio_enqueue_buffer>
 8007d2e:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8007d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <rpmsg_virtio_send_offchannel_raw+0x12a>
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fc7f 	bl	8008642 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3358      	adds	r3, #88	@ 0x58
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fdda 	bl	8007902 <metal_mutex_release>

	return size;
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3740      	adds	r7, #64	@ 0x40
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	fffff82c 	.word	0xfffff82c
 8007d5c:	fffff82b 	.word	0xfffff82b
 8007d60:	fffff82e 	.word	0xfffff82e

08007d64 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b08d      	sub	sp, #52	@ 0x34
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	3358      	adds	r3, #88	@ 0x58
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff fda9 	bl	80078ec <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8007d9a:	f107 020a 	add.w	r2, r7, #10
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	4619      	mov	r1, r3
 8007da4:	69f8      	ldr	r0, [r7, #28]
 8007da6:	f7ff fef9 	bl	8007b9c <rpmsg_virtio_get_rx_buffer>
 8007daa:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	3358      	adds	r3, #88	@ 0x58
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fda6 	bl	8007902 <metal_mutex_release>

	while (rp_hdr) {
 8007db6:	e04d      	b.n	8007e54 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	3358      	adds	r3, #88	@ 0x58
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fd95 	bl	80078ec <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	69b8      	ldr	r0, [r7, #24]
 8007dca:	f7ff fe19 	bl	8007a00 <rpmsg_get_ept_from_addr>
 8007dce:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	3358      	adds	r3, #88	@ 0x58
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fd94 	bl	8007902 <metal_mutex_release>

		if (!ept)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d03d      	beq.n	8007e5c <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d103      	bne.n	8007df2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	899b      	ldrh	r3, [r3, #12]
 8007e00:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8007e02:	4618      	mov	r0, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	4602      	mov	r2, r0
 8007e12:	6978      	ldr	r0, [r7, #20]
 8007e14:	47a0      	blx	r4
 8007e16:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <rpmsg_virtio_rx_callback+0xaa>
 8007e1e:	bf00      	nop
 8007e20:	e7fd      	b.n	8007e1e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	3358      	adds	r3, #88	@ 0x58
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fd60 	bl	80078ec <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	897b      	ldrh	r3, [r7, #10]
 8007e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e32:	69f8      	ldr	r0, [r7, #28]
 8007e34:	f7ff fe44 	bl	8007ac0 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8007e38:	f107 020a 	add.w	r2, r7, #10
 8007e3c:	f107 030c 	add.w	r3, r7, #12
 8007e40:	4619      	mov	r1, r3
 8007e42:	69f8      	ldr	r0, [r7, #28]
 8007e44:	f7ff feaa 	bl	8007b9c <rpmsg_virtio_get_rx_buffer>
 8007e48:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	3358      	adds	r3, #88	@ 0x58
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fd57 	bl	8007902 <metal_mutex_release>
	while (rp_hdr) {
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1ae      	bne.n	8007db8 <rpmsg_virtio_rx_callback+0x40>
 8007e5a:	e000      	b.n	8007e5e <rpmsg_virtio_rx_callback+0xe6>
			return;
 8007e5c:	bf00      	nop
	}
}
 8007e5e:	372c      	adds	r7, #44	@ 0x2c
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}

08007e64 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b092      	sub	sp, #72	@ 0x48
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8007e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7a:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b28      	cmp	r3, #40	@ 0x28
 8007e8a:	d001      	beq.n	8007e90 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e057      	b.n	8007f40 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8007e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 8007e92:	4619      	mov	r1, r3
 8007e94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e96:	f7ff fcad 	bl	80077f4 <metal_io_virt_to_offset>
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	f107 0210 	add.w	r2, r7, #16
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007ea4:	f7fe fc2c 	bl	8006700 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8007eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb0:	3358      	adds	r3, #88	@ 0x58
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fd1a 	bl	80078ec <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8007eb8:	f107 0110 	add.w	r1, r7, #16
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007ec4:	f7ff fb0a 	bl	80074dc <rpmsg_get_endpoint>
 8007ec8:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee2:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8007ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee6:	3358      	adds	r3, #88	@ 0x58
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fd0a 	bl	8007902 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d024      	beq.n	8007f3e <rpmsg_virtio_ns_callback+0xda>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d020      	beq.n	8007f3e <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	4798      	blx	r3
 8007f04:	e01b      	b.n	8007f3e <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d110      	bne.n	8007f2e <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0e:	3358      	adds	r3, #88	@ 0x58
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fcf6 	bl	8007902 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8007f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8007f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f22:	f107 0110 	add.w	r1, r7, #16
 8007f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007f2a:	4798      	blx	r3
 8007f2c:	e007      	b.n	8007f3e <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f32:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8007f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f36:	3358      	adds	r3, #88	@ 0x58
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fce2 	bl	8007902 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3748      	adds	r7, #72	@ 0x48
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b094      	sub	sp, #80	@ 0x50
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 8007f5a:	2264      	movs	r2, #100	@ 0x64
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f60:	f001 ff89 	bl	8009e76 <memset>
	metal_mutex_init(&rdev->lock);
 8007f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f66:	3358      	adds	r3, #88	@ 0x58
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff fca9 	bl	80078c0 <metal_mutex_init>
	rvdev->vdev = vdev;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	4a5d      	ldr	r2, [pc, #372]	@ (80080f8 <rpmsg_init_vdev+0x1b0>)
 8007f84:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff fce3 	bl	8007952 <rpmsg_virtio_get_role>
 8007f8c:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d120      	bne.n	8007fd6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8007f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 8007f9a:	4b58      	ldr	r3, [pc, #352]	@ (80080fc <rpmsg_init_vdev+0x1b4>)
 8007f9c:	e0a7      	b.n	80080ee <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8007f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8007fa6:	4b56      	ldr	r3, [pc, #344]	@ (8008100 <rpmsg_init_vdev+0x1b8>)
 8007fa8:	e0a1      	b.n	80080ee <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fae:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 8007fb0:	4b54      	ldr	r3, [pc, #336]	@ (8008104 <rpmsg_init_vdev+0x1bc>)
 8007fb2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8007fb4:	4b54      	ldr	r3, [pc, #336]	@ (8008108 <rpmsg_init_vdev+0x1c0>)
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8007fb8:	4b54      	ldr	r3, [pc, #336]	@ (800810c <rpmsg_init_vdev+0x1c4>)
 8007fba:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8007fbc:	4b54      	ldr	r3, [pc, #336]	@ (8008110 <rpmsg_init_vdev+0x1c8>)
 8007fbe:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fce:	3318      	adds	r3, #24
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8007fdc:	f107 0220 	add.w	r2, r7, #32
 8007fe0:	f107 0318 	add.w	r3, r7, #24
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	2202      	movs	r2, #2
 8007fea:	2100      	movs	r1, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fcf2 	bl	80079d6 <rpmsg_virtio_create_virtqueues>
 8007ff2:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8007ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <rpmsg_init_vdev+0xb6>
		return status;
 8007ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ffc:	e077      	b.n	80080ee <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8007ffe:	2300      	movs	r3, #0
 8008000:	643b      	str	r3, [r7, #64]	@ 0x40
 8008002:	e00f      	b.n	8008024 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800800a:	4613      	mov	r3, r2
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4413      	add	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	440b      	add	r3, r1
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800801e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008020:	3301      	adds	r3, #1
 8008022:	643b      	str	r3, [r7, #64]	@ 0x40
 8008024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008026:	2b01      	cmp	r3, #1
 8008028:	d9ec      	bls.n	8008004 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800802a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802c:	2b00      	cmp	r3, #0
 800802e:	d137      	bne.n	80080a0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8008030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008034:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800803a:	e02a      	b.n	8008092 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800803c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008040:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008042:	f7ff fcee 	bl	8007a22 <rpmsg_virtio_shm_pool_get_buffer>
 8008046:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800804e:	4b2c      	ldr	r3, [pc, #176]	@ (8008100 <rpmsg_init_vdev+0x1b8>)
 8008050:	e04d      	b.n	80080ee <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8008056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f7ff fbcb 	bl	80077f4 <metal_io_virt_to_offset>
 800805e:	4601      	mov	r1, r0
 8008060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008064:	2200      	movs	r2, #0
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f7fe fc37 	bl	80068da <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8008070:	f107 0110 	add.w	r1, r7, #16
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2301      	movs	r3, #1
 800807a:	2200      	movs	r2, #0
 800807c:	f000 fa23 	bl	80084c6 <virtqueue_add_buffer>
 8008080:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8008082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <rpmsg_init_vdev+0x144>
				return status;
 8008088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800808a:	e030      	b.n	80080ee <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800808c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808e:	3301      	adds	r3, #1
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008096:	895b      	ldrh	r3, [r3, #10]
 8008098:	461a      	mov	r2, r3
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	4293      	cmp	r3, r2
 800809e:	d3cd      	bcc.n	800803c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fb83 	bl	80077ae <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fc83 	bl	80079b4 <rpmsg_virtio_get_features>
 80080ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	f103 0008 	add.w	r0, r3, #8
 80080c0:	2300      	movs	r3, #0
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	4b13      	ldr	r3, [pc, #76]	@ (8008114 <rpmsg_init_vdev+0x1cc>)
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	2335      	movs	r3, #53	@ 0x35
 80080ca:	2235      	movs	r2, #53	@ 0x35
 80080cc:	4912      	ldr	r1, [pc, #72]	@ (8008118 <rpmsg_init_vdev+0x1d0>)
 80080ce:	f7ff fc23 	bl	8007918 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	3308      	adds	r3, #8
 80080d6:	4619      	mov	r1, r3
 80080d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080da:	f7ff fa81 	bl	80075e0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80080de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 80080e4:	2104      	movs	r1, #4
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fc40 	bl	800796c <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 80080ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3748      	adds	r7, #72	@ 0x48
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08007c11 	.word	0x08007c11
 80080fc:	fffff82d 	.word	0xfffff82d
 8008100:	fffff82e 	.word	0xfffff82e
 8008104:	0800d500 	.word	0x0800d500
 8008108:	0800d508 	.word	0x0800d508
 800810c:	08007d79 	.word	0x08007d79
 8008110:	08007d65 	.word	0x08007d65
 8008114:	08007e65 	.word	0x08007e65
 8008118:	0800d510 	.word	0x0800d510

0800811c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8008128:	e008      	b.n	800813c <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3b34      	subs	r3, #52	@ 0x34
 8008134:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fae4 	bl	8007704 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff fb46 	bl	80077d0 <metal_list_is_empty>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0ef      	beq.n	800812a <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	3358      	adds	r3, #88	@ 0x58
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fbbb 	bl	80078d6 <metal_mutex_deinit>
}
 8008160:	bf00      	nop
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 80081a2:	68fb      	ldr	r3, [r7, #12]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3303      	adds	r3, #3
 80081c4:	005a      	lsls	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4413      	add	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	4413      	add	r3, r2
 80081d2:	1e5a      	subs	r2, r3, #1
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	425b      	negs	r3, r3
 80081d8:	4013      	ands	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	3306      	adds	r3, #6
 80081e6:	60fb      	str	r3, [r7, #12]

	return size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <metal_io_virt_to_offset>:
{
 80081f6:	b480      	push	{r7}
 80081f8:	b085      	sub	sp, #20
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	429a      	cmp	r2, r3
 8008212:	d201      	bcs.n	8008218 <metal_io_virt_to_offset+0x22>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	e001      	b.n	800821c <metal_io_virt_to_offset+0x26>
 8008218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b091      	sub	sp, #68	@ 0x44
 800822c:	af04      	add	r7, sp, #16
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	429a      	cmp	r2, r3
 8008242:	d902      	bls.n	800824a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8008244:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8008248:	e053      	b.n	80082f2 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800824e:	e04b      	b.n	80082e8 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008256:	4613      	mov	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4413      	add	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	440b      	add	r3, r1
 8008260:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	3304      	adds	r3, #4
 8008266:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d118      	bne.n	80082a2 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	69f8      	ldr	r0, [r7, #28]
 800827e:	f7ff ffba 	bl	80081f6 <metal_io_virt_to_offset>
 8008282:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8008288:	461a      	mov	r2, r3
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f7ff ff8d 	bl	80081b0 <vring_size>
 8008296:	4603      	mov	r3, r0
 8008298:	2200      	movs	r2, #0
 800829a:	69b9      	ldr	r1, [r7, #24]
 800829c:	69f8      	ldr	r0, [r7, #28]
 800829e:	f7fe fb1c 	bl	80068da <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80082a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a4:	b298      	uxth	r0, r3
 80082a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4413      	add	r3, r2
 80082ae:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80082b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082b6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80082b8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	6a12      	ldr	r2, [r2, #32]
 80082be:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80082c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082c2:	6809      	ldr	r1, [r1, #0]
 80082c4:	9102      	str	r1, [sp, #8]
 80082c6:	9201      	str	r2, [sp, #4]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	4622      	mov	r2, r4
 80082ce:	4601      	mov	r1, r0
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f8c4 	bl	800845e <virtqueue_create>
 80082d6:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <virtio_create_virtqueues+0xba>
			return ret;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	e007      	b.n	80082f2 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80082e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e4:	3301      	adds	r3, #1
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3af      	bcc.n	8008250 <virtio_create_virtqueues+0x28>
	}
	return 0;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3734      	adds	r7, #52	@ 0x34
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd90      	pop	{r4, r7, pc}

080082fa <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	441a      	add	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	3304      	adds	r3, #4
 800832c:	461a      	mov	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	425b      	negs	r3, r3
 8008338:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800833a:	461a      	mov	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	60da      	str	r2, [r3, #12]
}
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	80fb      	strh	r3, [r7, #6]
 8008356:	460b      	mov	r3, r1
 8008358:	80bb      	strh	r3, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800835e:	88ba      	ldrh	r2, [r7, #4]
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800836a:	88b9      	ldrh	r1, [r7, #4]
 800836c:	887b      	ldrh	r3, [r7, #2]
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8008372:	429a      	cmp	r2, r3
 8008374:	bf34      	ite	cc
 8008376:	2301      	movcc	r3, #1
 8008378:	2300      	movcs	r3, #0
 800837a:	b2db      	uxtb	r3, r3
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <metal_io_virt_to_offset>:
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d201      	bcs.n	80083aa <metal_io_virt_to_offset+0x22>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	e001      	b.n	80083ae <metal_io_virt_to_offset+0x26>
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <metal_io_phys>:
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 80083c8:	2b1f      	cmp	r3, #31
 80083ca:	d805      	bhi.n	80083d8 <metal_io_phys+0x1e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	fa22 f303 	lsr.w	r3, r2, r3
 80083d6:	e000      	b.n	80083da <metal_io_phys+0x20>
 80083d8:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 80083da:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d80b      	bhi.n	8008406 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6919      	ldr	r1, [r3, #16]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8008402:	4413      	add	r3, r2
 8008404:	e001      	b.n	800840a <metal_io_phys+0x50>
 8008406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <metal_io_virt_to_phys>:
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ffb0 	bl	8008388 <metal_io_virt_to_offset>
 8008428:	4603      	mov	r3, r0
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ffc4 	bl	80083ba <metal_io_phys>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff ffe1 	bl	8008416 <metal_io_virt_to_phys>
 8008454:	4603      	mov	r3, r0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	460b      	mov	r3, r1
 800846c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d121      	bne.n	80084bc <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	897a      	ldrh	r2, [r7, #10]
 8008488:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	891a      	ldrh	r2, [r3, #8]
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8008492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008494:	895a      	ldrh	r2, [r3, #10]
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 800849a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849c:	6a3a      	ldr	r2, [r7, #32]
 800849e:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a4:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6819      	ldr	r1, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b2:	f000 f97a 	bl	80087aa <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 80084b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b8:	f000 f899 	bl	80085ee <virtqueue_disable_cb>
	}

	return (status);
 80084bc:	697b      	ldr	r3, [r7, #20]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b08a      	sub	sp, #40	@ 0x28
 80084ca:	af02      	add	r7, sp, #8
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 80084d8:	2300      	movs	r3, #0
 80084da:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	4413      	add	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12c      	bne.n	8008544 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80084ee:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 80084f0:	8a7b      	ldrh	r3, [r7, #18]
 80084f2:	3307      	adds	r3, #7
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008500:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	b29a      	uxth	r2, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69d9      	ldr	r1, [r3, #28]
 800850e:	8a7a      	ldrh	r2, [r7, #18]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f8a7 	bl	800866e <vq_ring_add_buffer>
 8008520:	4603      	mov	r3, r0
 8008522:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8a3a      	ldrh	r2, [r7, #16]
 8008528:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	b29b      	uxth	r3, r3
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800853a:	8a7b      	ldrh	r3, [r7, #18]
 800853c:	4619      	mov	r1, r3
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f966 	bl	8008810 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8008544:	69bb      	ldr	r3, [r7, #24]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b088      	sub	sp, #32
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <virtqueue_get_buffer+0x20>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	429a      	cmp	r2, r3
 800856c:	d101      	bne.n	8008572 <virtqueue_get_buffer+0x24>
		return (NULL);
 800856e:	2300      	movs	r3, #0
 8008570:	e039      	b.n	80085e6 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	b291      	uxth	r1, r2
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	8651      	strh	r1, [r2, #50]	@ 0x32
 800857e:	b21a      	sxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	895b      	ldrh	r3, [r3, #10]
 8008584:	3b01      	subs	r3, #1
 8008586:	b29b      	uxth	r3, r3
 8008588:	b21b      	sxth	r3, r3
 800858a:	4013      	ands	r3, r2
 800858c:	b21b      	sxth	r3, r3
 800858e:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008594:	8bfb      	ldrh	r3, [r7, #30]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	3304      	adds	r3, #4
 800859c:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800859e:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	82fb      	strh	r3, [r7, #22]
	if (len)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80085b6:	8afb      	ldrh	r3, [r7, #22]
 80085b8:	4619      	mov	r1, r3
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 f8ae 	bl	800871c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 80085c0:	8afa      	ldrh	r2, [r7, #22]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3207      	adds	r2, #7
 80085c6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80085ca:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 80085cc:	8afa      	ldrh	r2, [r7, #22]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3207      	adds	r2, #7
 80085d2:	2100      	movs	r1, #0
 80085d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	8bfa      	ldrh	r2, [r7, #30]
 80085e2:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 80085e4:	693b      	ldr	r3, [r7, #16]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	895b      	ldrh	r3, [r3, #10]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8008616:	3901      	subs	r1, #1
 8008618:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	4413      	add	r3, r2
 800861e:	460a      	mov	r2, r1
 8008620:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8008622:	e008      	b.n	8008636 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	881a      	ldrh	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f042 0201 	orr.w	r2, r2, #1
 8008632:	b292      	uxth	r2, r2
 8008634:	801a      	strh	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800864a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f91d 	bl	800888e <vq_ring_must_notify_host>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f94d 	bl	80088fa <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800866e:	b5b0      	push	{r4, r5, r7, lr}
 8008670:	b088      	sub	sp, #32
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800867e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008682:	4413      	add	r3, r2
 8008684:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	837b      	strh	r3, [r7, #26]
 800868e:	e03c      	b.n	800870a <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8008690:	8b7b      	ldrh	r3, [r7, #26]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4413      	add	r3, r2
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fec8 	bl	800843c <virtqueue_virt_to_phys>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2200      	movs	r2, #0
 80086b0:	461c      	mov	r4, r3
 80086b2:	4615      	mov	r5, r2
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	461a      	mov	r2, r3
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	2200      	movs	r2, #0
 80086ce:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	da06      	bge.n	80086e8 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	899b      	ldrh	r3, [r3, #12]
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	429a      	cmp	r2, r3
 80086ee:	db06      	blt.n	80086fe <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	899b      	ldrh	r3, [r3, #12]
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	3301      	adds	r3, #1
 8008702:	61fb      	str	r3, [r7, #28]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	89db      	ldrh	r3, [r3, #14]
 8008708:	837b      	strh	r3, [r7, #26]
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	429a      	cmp	r2, r3
 8008710:	dbbe      	blt.n	8008690 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8008712:	8b7b      	ldrh	r3, [r7, #26]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3720      	adds	r7, #32
 8008718:	46bd      	mov	sp, r7
 800871a:	bdb0      	pop	{r4, r5, r7, pc}

0800871c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69da      	ldr	r2, [r3, #28]
 800872c:	887b      	ldrh	r3, [r7, #2]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4413      	add	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	3307      	adds	r3, #7
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	889b      	ldrh	r3, [r3, #4]
 8008748:	4413      	add	r3, r2
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	889b      	ldrh	r3, [r3, #4]
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	899b      	ldrh	r3, [r3, #12]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d113      	bne.n	8008790 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8008768:	e00c      	b.n	8008784 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	89db      	ldrh	r3, [r3, #14]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	4413      	add	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	889b      	ldrh	r3, [r3, #4]
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	899b      	ldrh	r3, [r3, #12]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ec      	bne.n	800876a <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	887a      	ldrh	r2, [r7, #2]
 800879c:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b088      	sub	sp, #32
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	895b      	ldrh	r3, [r3, #10]
 80087ba:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3318      	adds	r3, #24
 80087c0:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	f7ff fd96 	bl	80082fa <vring_init>

	for (i = 0; i < size - 1; i++)
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	e00c      	b.n	80087ee <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	440b      	add	r3, r1
 80087e2:	3201      	adds	r2, #1
 80087e4:	b292      	uxth	r2, r2
 80087e6:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3301      	adds	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	dbed      	blt.n	80087d4 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4413      	add	r3, r2
 8008802:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008806:	81da      	strh	r2, [r3, #14]
}
 8008808:	bf00      	nop
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	b21a      	sxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	895b      	ldrh	r3, [r3, #10]
 8008828:	3b01      	subs	r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	b21b      	sxth	r3, r3
 800882e:	4013      	ands	r3, r2
 8008830:	b21b      	sxth	r3, r3
 8008832:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1a      	ldr	r2, [r3, #32]
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	887a      	ldrh	r2, [r7, #2]
 8008840:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8008842:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	885a      	ldrh	r2, [r3, #2]
 800884c:	3201      	adds	r2, #1
 800884e:	b292      	uxth	r2, r2
 8008850:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008856:	3301      	adds	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8008872:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01d      	beq.n	80088de <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	885b      	ldrh	r3, [r3, #2]
 80088a8:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ae:	89fa      	ldrh	r2, [r7, #14]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	4413      	add	r3, r2
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 80088c4:	89ba      	ldrh	r2, [r7, #12]
 80088c6:	89f9      	ldrh	r1, [r7, #14]
 80088c8:	897b      	ldrh	r3, [r7, #10]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fd3e 	bl	800834c <vring_need_event>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e009      	b.n	80088f2 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8008924:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <HAL_HSEM_FreeCallback+0x1c>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800892a:	2002      	movs	r0, #2
 800892c:	f7f9 f94c 	bl	8001bc8 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	24004cd8 	.word	0x24004cd8

0800893c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8008942:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <MAILBOX_Init+0x34>)
 8008944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008948:	4a09      	ldr	r2, [pc, #36]	@ (8008970 <MAILBOX_Init+0x34>)
 800894a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800894e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008952:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <MAILBOX_Init+0x34>)
 8008954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800895c:	607b      	str	r3, [r7, #4]
 800895e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8008960:	2002      	movs	r0, #2
 8008962:	f7f9 f931 	bl	8001bc8 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	58024400 	.word	0x58024400

08008974 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800897c:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <MAILBOX_Poll+0x30>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d108      	bne.n	8008996 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fe fb75 	bl	8007076 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <MAILBOX_Poll+0x30>)
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
    return 0;
 8008992:	2300      	movs	r3, #0
 8008994:	e001      	b.n	800899a <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8008996:	f06f 030a 	mvn.w	r3, #10
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	24004cd8 	.word	0x24004cd8

080089a8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80089b2:	2000      	movs	r0, #0
 80089b4:	f7f9 f8da 	bl	8001b6c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80089b8:	2100      	movs	r1, #0
 80089ba:	2000      	movs	r0, #0
 80089bc:	f7f9 f8f0 	bl	8001ba0 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d006      	beq.n	80089ea <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e4:	d001      	beq.n	80089ea <is_rpmsg_ept_ready+0x20>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <is_rpmsg_ept_ready+0x22>
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d209      	bcs.n	8008a20 <metal_device_io_region+0x28>
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	3308      	adds	r3, #8
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	e000      	b.n	8008a22 <metal_device_io_region+0x2a>
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b08d      	sub	sp, #52	@ 0x34
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	6078      	str	r0, [r7, #4]
  int status = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8008a40:	4a41      	ldr	r2, [pc, #260]	@ (8008b48 <OPENAMP_shmem_init+0x118>)
 8008a42:	f107 0310 	add.w	r3, r7, #16
 8008a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a4a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fd fda6 	bl	80065ac <metal_init>

  status = metal_register_generic_device(&shm_device);
 8008a60:	483a      	ldr	r0, [pc, #232]	@ (8008b4c <OPENAMP_shmem_init+0x11c>)
 8008a62:	f7fd fc41 	bl	80062e8 <metal_register_generic_device>
 8008a66:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <OPENAMP_shmem_init+0x42>
    return status;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	e066      	b.n	8008b40 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8008a72:	f107 0318 	add.w	r3, r7, #24
 8008a76:	461a      	mov	r2, r3
 8008a78:	4935      	ldr	r1, [pc, #212]	@ (8008b50 <OPENAMP_shmem_init+0x120>)
 8008a7a:	4836      	ldr	r0, [pc, #216]	@ (8008b54 <OPENAMP_shmem_init+0x124>)
 8008a7c:	f7fd fbf6 	bl	800626c <metal_device_open>
 8008a80:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <OPENAMP_shmem_init+0x5c>
    return status;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	e059      	b.n	8008b40 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8008a8c:	4a32      	ldr	r2, [pc, #200]	@ (8008b58 <OPENAMP_shmem_init+0x128>)
 8008a8e:	4b33      	ldr	r3, [pc, #204]	@ (8008b5c <OPENAMP_shmem_init+0x12c>)
 8008a90:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8008a98:	4a31      	ldr	r2, [pc, #196]	@ (8008b60 <OPENAMP_shmem_init+0x130>)
 8008a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b58 <OPENAMP_shmem_init+0x128>)
 8008a9c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8008b5c <OPENAMP_shmem_init+0x12c>)
 8008ab2:	4929      	ldr	r1, [pc, #164]	@ (8008b58 <OPENAMP_shmem_init+0x128>)
 8008ab4:	f7fd fdd5 	bl	8006662 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff ff9b 	bl	80089f8 <metal_device_io_region>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a27      	ldr	r2, [pc, #156]	@ (8008b64 <OPENAMP_shmem_init+0x134>)
 8008ac6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8008ac8:	4b26      	ldr	r3, [pc, #152]	@ (8008b64 <OPENAMP_shmem_init+0x134>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <OPENAMP_shmem_init+0xa6>
    return -1;
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	e034      	b.n	8008b40 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f929 	bl	8008d38 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b68 <OPENAMP_shmem_init+0x138>)
 8008aea:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8008aec:	4b1e      	ldr	r3, [pc, #120]	@ (8008b68 <OPENAMP_shmem_init+0x138>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295
 8008af8:	e022      	b.n	8008b40 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8008b00:	4b19      	ldr	r3, [pc, #100]	@ (8008b68 <OPENAMP_shmem_init+0x138>)
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	4b18      	ldr	r3, [pc, #96]	@ (8008b68 <OPENAMP_shmem_init+0x138>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	461c      	mov	r4, r3
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	2300      	movs	r3, #0
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	f7fd fda1 	bl	8006662 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2101      	movs	r1, #1
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff ff67 	bl	80089f8 <metal_device_io_region>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b6c <OPENAMP_shmem_init+0x13c>)
 8008b2e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8008b30:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <OPENAMP_shmem_init+0x13c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <OPENAMP_shmem_init+0x10e>
    return -1;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	e000      	b.n	8008b40 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3724      	adds	r7, #36	@ 0x24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd90      	pop	{r4, r7, pc}
 8008b48:	0800d528 	.word	0x0800d528
 8008b4c:	24000040 	.word	0x24000040
 8008b50:	0800d514 	.word	0x0800d514
 8008b54:	0800d520 	.word	0x0800d520
 8008b58:	38000400 	.word	0x38000400
 8008b5c:	24004d6c 	.word	0x24004d6c
 8008b60:	38010000 	.word	0x38010000
 8008b64:	24004cdc 	.word	0x24004cdc
 8008b68:	24004ce4 	.word	0x24004ce4
 8008b6c:	24004ce0 	.word	0x24004ce0

08008b70 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b08b      	sub	sp, #44	@ 0x2c
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
  int status = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8008b86:	f7ff fed9 	bl	800893c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ff50 	bl	8008a30 <OPENAMP_shmem_init>
 8008b90:	60f8      	str	r0, [r7, #12]
  if(status)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	e06a      	b.n	8008c72 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4b37      	ldr	r3, [pc, #220]	@ (8008c7c <MX_OPENAMP_Init+0x10c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f103 0218 	add.w	r2, r3, #24
 8008ba6:	4b36      	ldr	r3, [pc, #216]	@ (8008c80 <MX_OPENAMP_Init+0x110>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2100      	movs	r1, #0
 8008bac:	9102      	str	r1, [sp, #8]
 8008bae:	4935      	ldr	r1, [pc, #212]	@ (8008c84 <MX_OPENAMP_Init+0x114>)
 8008bb0:	9101      	str	r1, [sp, #4]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	9100      	str	r1, [sp, #0]
 8008bb6:	21ff      	movs	r1, #255	@ 0xff
 8008bb8:	f7fe f97e 	bl	8006eb8 <rproc_virtio_create_vdev>
 8008bbc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8008bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc8:	e053      	b.n	8008c72 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8008bca:	6938      	ldr	r0, [r7, #16]
 8008bcc:	f7fe fa8f 	bl	80070ee <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8008bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <MX_OPENAMP_Init+0x10c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3334      	adds	r3, #52	@ 0x34
 8008bd6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8008be0:	461c      	mov	r4, r3
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <MX_OPENAMP_Init+0x118>)
 8008be4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	6892      	ldr	r2, [r2, #8]
 8008bea:	6979      	ldr	r1, [r7, #20]
 8008bec:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8008bee:	9102      	str	r1, [sp, #8]
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f7fe fa0a 	bl	8007014 <rproc_virtio_init_vring>
 8008c00:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e032      	b.n	8008c72 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8008c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <MX_OPENAMP_Init+0x10c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3348      	adds	r3, #72	@ 0x48
 8008c12:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8008c1c:	461c      	mov	r4, r3
 8008c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c88 <MX_OPENAMP_Init+0x118>)
 8008c20:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	6892      	ldr	r2, [r2, #8]
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8008c2a:	9102      	str	r1, [sp, #8]
 8008c2c:	9201      	str	r2, [sp, #4]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4623      	mov	r3, r4
 8008c32:	4602      	mov	r2, r0
 8008c34:	2101      	movs	r1, #1
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f7fe f9ec 	bl	8007014 <rproc_virtio_init_vring>
 8008c3c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	e014      	b.n	8008c72 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8008c48:	4b10      	ldr	r3, [pc, #64]	@ (8008c8c <MX_OPENAMP_Init+0x11c>)
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8008c50:	4a0f      	ldr	r2, [pc, #60]	@ (8008c90 <MX_OPENAMP_Init+0x120>)
 8008c52:	4b0e      	ldr	r3, [pc, #56]	@ (8008c8c <MX_OPENAMP_Init+0x11c>)
 8008c54:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8008c56:	461a      	mov	r2, r3
 8008c58:	480e      	ldr	r0, [pc, #56]	@ (8008c94 <MX_OPENAMP_Init+0x124>)
 8008c5a:	f7fe ff04 	bl	8007a66 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <MX_OPENAMP_Init+0x118>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a0c      	ldr	r2, [pc, #48]	@ (8008c94 <MX_OPENAMP_Init+0x124>)
 8008c64:	9200      	str	r2, [sp, #0]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	6939      	ldr	r1, [r7, #16]
 8008c6a:	480b      	ldr	r0, [pc, #44]	@ (8008c98 <MX_OPENAMP_Init+0x128>)
 8008c6c:	f7ff f96c 	bl	8007f48 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd90      	pop	{r4, r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	24004ce4 	.word	0x24004ce4
 8008c80:	24004ce0 	.word	0x24004ce0
 8008c84:	080089a9 	.word	0x080089a9
 8008c88:	24004cdc 	.word	0x24004cdc
 8008c8c:	38000400 	.word	0x38000400
 8008c90:	38010000 	.word	0x38010000
 8008c94:	24004ce8 	.word	0x24004ce8
 8008c98:	24004cf4 	.word	0x24004cf4

08008c9c <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 8008ca0:	4803      	ldr	r0, [pc, #12]	@ (8008cb0 <OPENAMP_DeInit+0x14>)
 8008ca2:	f7ff fa3b 	bl	800811c <rpmsg_deinit_vdev>

  metal_finish();
 8008ca6:	f7fd fcb3 	bl	8006610 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 8008caa:	bf00      	nop
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	24004cf4 	.word	0x24004cf4

08008cb4 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	@ 0x28
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	4904      	ldr	r1, [pc, #16]	@ (8008cec <OPENAMP_create_endpoint+0x38>)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7fe fc94 	bl	8007608 <rpmsg_create_ept>
 8008ce0:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8008ce2:	697b      	ldr	r3, [r7, #20]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	24004cf4 	.word	0x24004cf4

08008cf0 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8008cf4:	4b03      	ldr	r3, [pc, #12]	@ (8008d04 <OPENAMP_check_for_message+0x14>)
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fe3b 	bl	8008974 <MAILBOX_Poll>
}
 8008cfe:	bf00      	nop
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	24004cf4 	.word	0x24004cf4

08008d08 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8008d10:	e004      	b.n	8008d1c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8008d12:	4b08      	ldr	r3, [pc, #32]	@ (8008d34 <OPENAMP_Wait_EndPointready+0x2c>)
 8008d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fe2c 	bl	8008974 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff fe54 	bl	80089ca <is_rpmsg_ept_ready>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0f4      	beq.n	8008d12 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	24004cf4 	.word	0x24004cf4

08008d38 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8008d44:	228c      	movs	r2, #140	@ 0x8c
 8008d46:	2100      	movs	r1, #0
 8008d48:	481e      	ldr	r0, [pc, #120]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d4a:	f001 f894 	bl	8009e76 <memset>
	resource_table.num = 1;
 8008d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8008d54:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8008d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d5c:	2218      	movs	r2, #24
 8008d5e:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8008d60:	4b19      	ldr	r3, [pc, #100]	@ (8008dc8 <resource_table_init+0x90>)
 8008d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d66:	4a17      	ldr	r2, [pc, #92]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d68:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8008d6a:	4b16      	ldr	r3, [pc, #88]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8008d70:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d72:	2204      	movs	r2, #4
 8008d74:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 8008d76:	4b13      	ldr	r3, [pc, #76]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8008d7c:	4a12      	ldr	r2, [pc, #72]	@ (8008dc8 <resource_table_init+0x90>)
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d80:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8008d82:	4b10      	ldr	r3, [pc, #64]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d84:	2204      	movs	r2, #4
 8008d86:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8008d88:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 8008d94:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d96:	2203      	movs	r2, #3
 8008d98:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc4 <resource_table_init+0x8c>)
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8008da0:	4b08      	ldr	r3, [pc, #32]	@ (8008dc4 <resource_table_init+0x8c>)
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8008da8:	4b06      	ldr	r3, [pc, #24]	@ (8008dc4 <resource_table_init+0x8c>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	228c      	movs	r2, #140	@ 0x8c
 8008db2:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4a03      	ldr	r2, [pc, #12]	@ (8008dc4 <resource_table_init+0x8c>)
 8008db8:	601a      	str	r2, [r3, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	38000000 	.word	0x38000000
 8008dc8:	38000400 	.word	0x38000400

08008dcc <__assert_func>:
 8008dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dce:	4614      	mov	r4, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <__assert_func+0x2c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	68d8      	ldr	r0, [r3, #12]
 8008dda:	b954      	cbnz	r4, 8008df2 <__assert_func+0x26>
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <__assert_func+0x30>)
 8008dde:	461c      	mov	r4, r3
 8008de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008de4:	9100      	str	r1, [sp, #0]
 8008de6:	462b      	mov	r3, r5
 8008de8:	4905      	ldr	r1, [pc, #20]	@ (8008e00 <__assert_func+0x34>)
 8008dea:	f000 ffb1 	bl	8009d50 <fiprintf>
 8008dee:	f001 f90b 	bl	800a008 <abort>
 8008df2:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <__assert_func+0x38>)
 8008df4:	e7f4      	b.n	8008de0 <__assert_func+0x14>
 8008df6:	bf00      	nop
 8008df8:	240000c8 	.word	0x240000c8
 8008dfc:	0800d64e 	.word	0x0800d64e
 8008e00:	0800d620 	.word	0x0800d620
 8008e04:	0800d613 	.word	0x0800d613

08008e08 <malloc>:
 8008e08:	4b02      	ldr	r3, [pc, #8]	@ (8008e14 <malloc+0xc>)
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f000 b82d 	b.w	8008e6c <_malloc_r>
 8008e12:	bf00      	nop
 8008e14:	240000c8 	.word	0x240000c8

08008e18 <free>:
 8008e18:	4b02      	ldr	r3, [pc, #8]	@ (8008e24 <free+0xc>)
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	f001 bed9 	b.w	800abd4 <_free_r>
 8008e22:	bf00      	nop
 8008e24:	240000c8 	.word	0x240000c8

08008e28 <sbrk_aligned>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e68 <sbrk_aligned+0x40>)
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	6831      	ldr	r1, [r6, #0]
 8008e30:	4605      	mov	r5, r0
 8008e32:	b911      	cbnz	r1, 8008e3a <sbrk_aligned+0x12>
 8008e34:	f001 f884 	bl	8009f40 <_sbrk_r>
 8008e38:	6030      	str	r0, [r6, #0]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f001 f87f 	bl	8009f40 <_sbrk_r>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d103      	bne.n	8008e4e <sbrk_aligned+0x26>
 8008e46:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	1cc4      	adds	r4, r0, #3
 8008e50:	f024 0403 	bic.w	r4, r4, #3
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d0f8      	beq.n	8008e4a <sbrk_aligned+0x22>
 8008e58:	1a21      	subs	r1, r4, r0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f001 f870 	bl	8009f40 <_sbrk_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d1f2      	bne.n	8008e4a <sbrk_aligned+0x22>
 8008e64:	e7ef      	b.n	8008e46 <sbrk_aligned+0x1e>
 8008e66:	bf00      	nop
 8008e68:	24004d70 	.word	0x24004d70

08008e6c <_malloc_r>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	1ccd      	adds	r5, r1, #3
 8008e72:	f025 0503 	bic.w	r5, r5, #3
 8008e76:	3508      	adds	r5, #8
 8008e78:	2d0c      	cmp	r5, #12
 8008e7a:	bf38      	it	cc
 8008e7c:	250c      	movcc	r5, #12
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	4606      	mov	r6, r0
 8008e82:	db01      	blt.n	8008e88 <_malloc_r+0x1c>
 8008e84:	42a9      	cmp	r1, r5
 8008e86:	d904      	bls.n	8008e92 <_malloc_r+0x26>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	6033      	str	r3, [r6, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f68 <_malloc_r+0xfc>
 8008e96:	f000 f869 	bl	8008f6c <__malloc_lock>
 8008e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	bb44      	cbnz	r4, 8008ef4 <_malloc_r+0x88>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffbf 	bl	8008e28 <sbrk_aligned>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	4604      	mov	r4, r0
 8008eae:	d158      	bne.n	8008f62 <_malloc_r+0xf6>
 8008eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb4:	4627      	mov	r7, r4
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	d143      	bne.n	8008f42 <_malloc_r+0xd6>
 8008eba:	2c00      	cmp	r4, #0
 8008ebc:	d04b      	beq.n	8008f56 <_malloc_r+0xea>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	eb04 0903 	add.w	r9, r4, r3
 8008ec8:	f001 f83a 	bl	8009f40 <_sbrk_r>
 8008ecc:	4581      	cmp	r9, r0
 8008ece:	d142      	bne.n	8008f56 <_malloc_r+0xea>
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	1a6d      	subs	r5, r5, r1
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ffa6 	bl	8008e28 <sbrk_aligned>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d03a      	beq.n	8008f56 <_malloc_r+0xea>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	442b      	add	r3, r5
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	bb62      	cbnz	r2, 8008f48 <_malloc_r+0xdc>
 8008eee:	f8c8 7000 	str.w	r7, [r8]
 8008ef2:	e00f      	b.n	8008f14 <_malloc_r+0xa8>
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	1b52      	subs	r2, r2, r5
 8008ef8:	d420      	bmi.n	8008f3c <_malloc_r+0xd0>
 8008efa:	2a0b      	cmp	r2, #11
 8008efc:	d917      	bls.n	8008f2e <_malloc_r+0xc2>
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	6025      	str	r5, [r4, #0]
 8008f04:	bf18      	it	ne
 8008f06:	6059      	strne	r1, [r3, #4]
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	bf08      	it	eq
 8008f0c:	f8c8 1000 	streq.w	r1, [r8]
 8008f10:	5162      	str	r2, [r4, r5]
 8008f12:	604b      	str	r3, [r1, #4]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 f82f 	bl	8008f78 <__malloc_unlock>
 8008f1a:	f104 000b 	add.w	r0, r4, #11
 8008f1e:	1d23      	adds	r3, r4, #4
 8008f20:	f020 0007 	bic.w	r0, r0, #7
 8008f24:	1ac2      	subs	r2, r0, r3
 8008f26:	bf1c      	itt	ne
 8008f28:	1a1b      	subne	r3, r3, r0
 8008f2a:	50a3      	strne	r3, [r4, r2]
 8008f2c:	e7af      	b.n	8008e8e <_malloc_r+0x22>
 8008f2e:	6862      	ldr	r2, [r4, #4]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	bf0c      	ite	eq
 8008f34:	f8c8 2000 	streq.w	r2, [r8]
 8008f38:	605a      	strne	r2, [r3, #4]
 8008f3a:	e7eb      	b.n	8008f14 <_malloc_r+0xa8>
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	6864      	ldr	r4, [r4, #4]
 8008f40:	e7ae      	b.n	8008ea0 <_malloc_r+0x34>
 8008f42:	463c      	mov	r4, r7
 8008f44:	687f      	ldr	r7, [r7, #4]
 8008f46:	e7b6      	b.n	8008eb6 <_malloc_r+0x4a>
 8008f48:	461a      	mov	r2, r3
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d1fb      	bne.n	8008f48 <_malloc_r+0xdc>
 8008f50:	2300      	movs	r3, #0
 8008f52:	6053      	str	r3, [r2, #4]
 8008f54:	e7de      	b.n	8008f14 <_malloc_r+0xa8>
 8008f56:	230c      	movs	r3, #12
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f000 f80c 	bl	8008f78 <__malloc_unlock>
 8008f60:	e794      	b.n	8008e8c <_malloc_r+0x20>
 8008f62:	6005      	str	r5, [r0, #0]
 8008f64:	e7d6      	b.n	8008f14 <_malloc_r+0xa8>
 8008f66:	bf00      	nop
 8008f68:	24004d74 	.word	0x24004d74

08008f6c <__malloc_lock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	@ (8008f74 <__malloc_lock+0x8>)
 8008f6e:	f001 b834 	b.w	8009fda <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	24004eb8 	.word	0x24004eb8

08008f78 <__malloc_unlock>:
 8008f78:	4801      	ldr	r0, [pc, #4]	@ (8008f80 <__malloc_unlock+0x8>)
 8008f7a:	f001 b82f 	b.w	8009fdc <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	24004eb8 	.word	0x24004eb8

08008f84 <__cvt>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	ed2d 8b02 	vpush	{d8}
 8008f8a:	eeb0 8b40 	vmov.f64	d8, d0
 8008f8e:	b085      	sub	sp, #20
 8008f90:	4617      	mov	r7, r2
 8008f92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008f94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f96:	ee18 2a90 	vmov	r2, s17
 8008f9a:	f025 0520 	bic.w	r5, r5, #32
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	bfb6      	itet	lt
 8008fa2:	222d      	movlt	r2, #45	@ 0x2d
 8008fa4:	2200      	movge	r2, #0
 8008fa6:	eeb1 8b40 	vneglt.f64	d8, d0
 8008faa:	2d46      	cmp	r5, #70	@ 0x46
 8008fac:	460c      	mov	r4, r1
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	d004      	beq.n	8008fbc <__cvt+0x38>
 8008fb2:	2d45      	cmp	r5, #69	@ 0x45
 8008fb4:	d100      	bne.n	8008fb8 <__cvt+0x34>
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	2102      	movs	r1, #2
 8008fba:	e000      	b.n	8008fbe <__cvt+0x3a>
 8008fbc:	2103      	movs	r1, #3
 8008fbe:	ab03      	add	r3, sp, #12
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	ab02      	add	r3, sp, #8
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4633      	mov	r3, r6
 8008fca:	eeb0 0b48 	vmov.f64	d0, d8
 8008fce:	f001 f8ab 	bl	800a128 <_dtoa_r>
 8008fd2:	2d47      	cmp	r5, #71	@ 0x47
 8008fd4:	d114      	bne.n	8009000 <__cvt+0x7c>
 8008fd6:	07fb      	lsls	r3, r7, #31
 8008fd8:	d50a      	bpl.n	8008ff0 <__cvt+0x6c>
 8008fda:	1902      	adds	r2, r0, r4
 8008fdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe4:	bf08      	it	eq
 8008fe6:	9203      	streq	r2, [sp, #12]
 8008fe8:	2130      	movs	r1, #48	@ 0x30
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d319      	bcc.n	8009024 <__cvt+0xa0>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ff4:	1a1b      	subs	r3, r3, r0
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	b005      	add	sp, #20
 8008ffa:	ecbd 8b02 	vpop	{d8}
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	2d46      	cmp	r5, #70	@ 0x46
 8009002:	eb00 0204 	add.w	r2, r0, r4
 8009006:	d1e9      	bne.n	8008fdc <__cvt+0x58>
 8009008:	7803      	ldrb	r3, [r0, #0]
 800900a:	2b30      	cmp	r3, #48	@ 0x30
 800900c:	d107      	bne.n	800901e <__cvt+0x9a>
 800900e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009016:	bf1c      	itt	ne
 8009018:	f1c4 0401 	rsbne	r4, r4, #1
 800901c:	6034      	strne	r4, [r6, #0]
 800901e:	6833      	ldr	r3, [r6, #0]
 8009020:	441a      	add	r2, r3
 8009022:	e7db      	b.n	8008fdc <__cvt+0x58>
 8009024:	1c5c      	adds	r4, r3, #1
 8009026:	9403      	str	r4, [sp, #12]
 8009028:	7019      	strb	r1, [r3, #0]
 800902a:	e7de      	b.n	8008fea <__cvt+0x66>

0800902c <__exponent>:
 800902c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902e:	2900      	cmp	r1, #0
 8009030:	bfba      	itte	lt
 8009032:	4249      	neglt	r1, r1
 8009034:	232d      	movlt	r3, #45	@ 0x2d
 8009036:	232b      	movge	r3, #43	@ 0x2b
 8009038:	2909      	cmp	r1, #9
 800903a:	7002      	strb	r2, [r0, #0]
 800903c:	7043      	strb	r3, [r0, #1]
 800903e:	dd29      	ble.n	8009094 <__exponent+0x68>
 8009040:	f10d 0307 	add.w	r3, sp, #7
 8009044:	461d      	mov	r5, r3
 8009046:	270a      	movs	r7, #10
 8009048:	461a      	mov	r2, r3
 800904a:	fbb1 f6f7 	udiv	r6, r1, r7
 800904e:	fb07 1416 	mls	r4, r7, r6, r1
 8009052:	3430      	adds	r4, #48	@ 0x30
 8009054:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009058:	460c      	mov	r4, r1
 800905a:	2c63      	cmp	r4, #99	@ 0x63
 800905c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009060:	4631      	mov	r1, r6
 8009062:	dcf1      	bgt.n	8009048 <__exponent+0x1c>
 8009064:	3130      	adds	r1, #48	@ 0x30
 8009066:	1e94      	subs	r4, r2, #2
 8009068:	f803 1c01 	strb.w	r1, [r3, #-1]
 800906c:	1c41      	adds	r1, r0, #1
 800906e:	4623      	mov	r3, r4
 8009070:	42ab      	cmp	r3, r5
 8009072:	d30a      	bcc.n	800908a <__exponent+0x5e>
 8009074:	f10d 0309 	add.w	r3, sp, #9
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	42ac      	cmp	r4, r5
 800907c:	bf88      	it	hi
 800907e:	2300      	movhi	r3, #0
 8009080:	3302      	adds	r3, #2
 8009082:	4403      	add	r3, r0
 8009084:	1a18      	subs	r0, r3, r0
 8009086:	b003      	add	sp, #12
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800908e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009092:	e7ed      	b.n	8009070 <__exponent+0x44>
 8009094:	2330      	movs	r3, #48	@ 0x30
 8009096:	3130      	adds	r1, #48	@ 0x30
 8009098:	7083      	strb	r3, [r0, #2]
 800909a:	70c1      	strb	r1, [r0, #3]
 800909c:	1d03      	adds	r3, r0, #4
 800909e:	e7f1      	b.n	8009084 <__exponent+0x58>

080090a0 <_printf_float>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	b08d      	sub	sp, #52	@ 0x34
 80090a6:	460c      	mov	r4, r1
 80090a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090ac:	4616      	mov	r6, r2
 80090ae:	461f      	mov	r7, r3
 80090b0:	4605      	mov	r5, r0
 80090b2:	f000 ff0d 	bl	8009ed0 <_localeconv_r>
 80090b6:	f8d0 b000 	ldr.w	fp, [r0]
 80090ba:	4658      	mov	r0, fp
 80090bc:	f7f7 f970 	bl	80003a0 <strlen>
 80090c0:	2300      	movs	r3, #0
 80090c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c4:	f8d8 3000 	ldr.w	r3, [r8]
 80090c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	9005      	str	r0, [sp, #20]
 80090d0:	3307      	adds	r3, #7
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	f103 0108 	add.w	r1, r3, #8
 80090da:	f8c8 1000 	str.w	r1, [r8]
 80090de:	ed93 0b00 	vldr	d0, [r3]
 80090e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009340 <_printf_float+0x2a0>
 80090e6:	eeb0 7bc0 	vabs.f64	d7, d0
 80090ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80090ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80090f6:	dd24      	ble.n	8009142 <_printf_float+0xa2>
 80090f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009100:	d502      	bpl.n	8009108 <_printf_float+0x68>
 8009102:	232d      	movs	r3, #45	@ 0x2d
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009108:	498f      	ldr	r1, [pc, #572]	@ (8009348 <_printf_float+0x2a8>)
 800910a:	4b90      	ldr	r3, [pc, #576]	@ (800934c <_printf_float+0x2ac>)
 800910c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009110:	bf94      	ite	ls
 8009112:	4688      	movls	r8, r1
 8009114:	4698      	movhi	r8, r3
 8009116:	f022 0204 	bic.w	r2, r2, #4
 800911a:	2303      	movs	r3, #3
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	f04f 0a00 	mov.w	sl, #0
 8009124:	9700      	str	r7, [sp, #0]
 8009126:	4633      	mov	r3, r6
 8009128:	aa0b      	add	r2, sp, #44	@ 0x2c
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f9d1 	bl	80094d4 <_printf_common>
 8009132:	3001      	adds	r0, #1
 8009134:	f040 8089 	bne.w	800924a <_printf_float+0x1aa>
 8009138:	f04f 30ff 	mov.w	r0, #4294967295
 800913c:	b00d      	add	sp, #52	@ 0x34
 800913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	eeb4 0b40 	vcmp.f64	d0, d0
 8009146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914a:	d709      	bvc.n	8009160 <_printf_float+0xc0>
 800914c:	ee10 3a90 	vmov	r3, s1
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbc      	itt	lt
 8009154:	232d      	movlt	r3, #45	@ 0x2d
 8009156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800915a:	497d      	ldr	r1, [pc, #500]	@ (8009350 <_printf_float+0x2b0>)
 800915c:	4b7d      	ldr	r3, [pc, #500]	@ (8009354 <_printf_float+0x2b4>)
 800915e:	e7d5      	b.n	800910c <_printf_float+0x6c>
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009168:	d139      	bne.n	80091de <_printf_float+0x13e>
 800916a:	2306      	movs	r3, #6
 800916c:	6063      	str	r3, [r4, #4]
 800916e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009172:	2300      	movs	r3, #0
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	ab0a      	add	r3, sp, #40	@ 0x28
 800917a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800917e:	ab09      	add	r3, sp, #36	@ 0x24
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	6861      	ldr	r1, [r4, #4]
 8009184:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009188:	4628      	mov	r0, r5
 800918a:	f7ff fefb 	bl	8008f84 <__cvt>
 800918e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009194:	4680      	mov	r8, r0
 8009196:	d129      	bne.n	80091ec <_printf_float+0x14c>
 8009198:	1cc8      	adds	r0, r1, #3
 800919a:	db02      	blt.n	80091a2 <_printf_float+0x102>
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	4299      	cmp	r1, r3
 80091a0:	dd41      	ble.n	8009226 <_printf_float+0x186>
 80091a2:	f1a9 0902 	sub.w	r9, r9, #2
 80091a6:	fa5f f989 	uxtb.w	r9, r9
 80091aa:	3901      	subs	r1, #1
 80091ac:	464a      	mov	r2, r9
 80091ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80091b4:	f7ff ff3a 	bl	800902c <__exponent>
 80091b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091ba:	1813      	adds	r3, r2, r0
 80091bc:	2a01      	cmp	r2, #1
 80091be:	4682      	mov	sl, r0
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	dc02      	bgt.n	80091ca <_printf_float+0x12a>
 80091c4:	6822      	ldr	r2, [r4, #0]
 80091c6:	07d2      	lsls	r2, r2, #31
 80091c8:	d501      	bpl.n	80091ce <_printf_float+0x12e>
 80091ca:	3301      	adds	r3, #1
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0a6      	beq.n	8009124 <_printf_float+0x84>
 80091d6:	232d      	movs	r3, #45	@ 0x2d
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091dc:	e7a2      	b.n	8009124 <_printf_float+0x84>
 80091de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091e2:	d1c4      	bne.n	800916e <_printf_float+0xce>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1c2      	bne.n	800916e <_printf_float+0xce>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e7bf      	b.n	800916c <_printf_float+0xcc>
 80091ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80091f0:	d9db      	bls.n	80091aa <_printf_float+0x10a>
 80091f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80091f6:	d118      	bne.n	800922a <_printf_float+0x18a>
 80091f8:	2900      	cmp	r1, #0
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	dd0b      	ble.n	8009216 <_printf_float+0x176>
 80091fe:	6121      	str	r1, [r4, #16]
 8009200:	b913      	cbnz	r3, 8009208 <_printf_float+0x168>
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	07d0      	lsls	r0, r2, #31
 8009206:	d502      	bpl.n	800920e <_printf_float+0x16e>
 8009208:	3301      	adds	r3, #1
 800920a:	440b      	add	r3, r1
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009210:	f04f 0a00 	mov.w	sl, #0
 8009214:	e7db      	b.n	80091ce <_printf_float+0x12e>
 8009216:	b913      	cbnz	r3, 800921e <_printf_float+0x17e>
 8009218:	6822      	ldr	r2, [r4, #0]
 800921a:	07d2      	lsls	r2, r2, #31
 800921c:	d501      	bpl.n	8009222 <_printf_float+0x182>
 800921e:	3302      	adds	r3, #2
 8009220:	e7f4      	b.n	800920c <_printf_float+0x16c>
 8009222:	2301      	movs	r3, #1
 8009224:	e7f2      	b.n	800920c <_printf_float+0x16c>
 8009226:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800922a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922c:	4299      	cmp	r1, r3
 800922e:	db05      	blt.n	800923c <_printf_float+0x19c>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	6121      	str	r1, [r4, #16]
 8009234:	07d8      	lsls	r0, r3, #31
 8009236:	d5ea      	bpl.n	800920e <_printf_float+0x16e>
 8009238:	1c4b      	adds	r3, r1, #1
 800923a:	e7e7      	b.n	800920c <_printf_float+0x16c>
 800923c:	2900      	cmp	r1, #0
 800923e:	bfd4      	ite	le
 8009240:	f1c1 0202 	rsble	r2, r1, #2
 8009244:	2201      	movgt	r2, #1
 8009246:	4413      	add	r3, r2
 8009248:	e7e0      	b.n	800920c <_printf_float+0x16c>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	055a      	lsls	r2, r3, #21
 800924e:	d407      	bmi.n	8009260 <_printf_float+0x1c0>
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	4642      	mov	r2, r8
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	d12a      	bne.n	80092b4 <_printf_float+0x214>
 800925e:	e76b      	b.n	8009138 <_printf_float+0x98>
 8009260:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009264:	f240 80e0 	bls.w	8009428 <_printf_float+0x388>
 8009268:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800926c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009274:	d133      	bne.n	80092de <_printf_float+0x23e>
 8009276:	4a38      	ldr	r2, [pc, #224]	@ (8009358 <_printf_float+0x2b8>)
 8009278:	2301      	movs	r3, #1
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f af59 	beq.w	8009138 <_printf_float+0x98>
 8009286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800928a:	4543      	cmp	r3, r8
 800928c:	db02      	blt.n	8009294 <_printf_float+0x1f4>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	07d8      	lsls	r0, r3, #31
 8009292:	d50f      	bpl.n	80092b4 <_printf_float+0x214>
 8009294:	9b05      	ldr	r3, [sp, #20]
 8009296:	465a      	mov	r2, fp
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f43f af4a 	beq.w	8009138 <_printf_float+0x98>
 80092a4:	f04f 0900 	mov.w	r9, #0
 80092a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80092ac:	f104 0a1a 	add.w	sl, r4, #26
 80092b0:	45c8      	cmp	r8, r9
 80092b2:	dc09      	bgt.n	80092c8 <_printf_float+0x228>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	079b      	lsls	r3, r3, #30
 80092b8:	f100 8107 	bmi.w	80094ca <_printf_float+0x42a>
 80092bc:	68e0      	ldr	r0, [r4, #12]
 80092be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c0:	4298      	cmp	r0, r3
 80092c2:	bfb8      	it	lt
 80092c4:	4618      	movlt	r0, r3
 80092c6:	e739      	b.n	800913c <_printf_float+0x9c>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af30 	beq.w	8009138 <_printf_float+0x98>
 80092d8:	f109 0901 	add.w	r9, r9, #1
 80092dc:	e7e8      	b.n	80092b0 <_printf_float+0x210>
 80092de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dc3b      	bgt.n	800935c <_printf_float+0x2bc>
 80092e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009358 <_printf_float+0x2b8>)
 80092e6:	2301      	movs	r3, #1
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f af22 	beq.w	8009138 <_printf_float+0x98>
 80092f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092f8:	ea59 0303 	orrs.w	r3, r9, r3
 80092fc:	d102      	bne.n	8009304 <_printf_float+0x264>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	07d9      	lsls	r1, r3, #31
 8009302:	d5d7      	bpl.n	80092b4 <_printf_float+0x214>
 8009304:	9b05      	ldr	r3, [sp, #20]
 8009306:	465a      	mov	r2, fp
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f af12 	beq.w	8009138 <_printf_float+0x98>
 8009314:	f04f 0a00 	mov.w	sl, #0
 8009318:	f104 0b1a 	add.w	fp, r4, #26
 800931c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931e:	425b      	negs	r3, r3
 8009320:	4553      	cmp	r3, sl
 8009322:	dc01      	bgt.n	8009328 <_printf_float+0x288>
 8009324:	464b      	mov	r3, r9
 8009326:	e794      	b.n	8009252 <_printf_float+0x1b2>
 8009328:	2301      	movs	r3, #1
 800932a:	465a      	mov	r2, fp
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af00 	beq.w	8009138 <_printf_float+0x98>
 8009338:	f10a 0a01 	add.w	sl, sl, #1
 800933c:	e7ee      	b.n	800931c <_printf_float+0x27c>
 800933e:	bf00      	nop
 8009340:	ffffffff 	.word	0xffffffff
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	0800d64f 	.word	0x0800d64f
 800934c:	0800d653 	.word	0x0800d653
 8009350:	0800d657 	.word	0x0800d657
 8009354:	0800d65b 	.word	0x0800d65b
 8009358:	0800d65f 	.word	0x0800d65f
 800935c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800935e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009362:	4553      	cmp	r3, sl
 8009364:	bfa8      	it	ge
 8009366:	4653      	movge	r3, sl
 8009368:	2b00      	cmp	r3, #0
 800936a:	4699      	mov	r9, r3
 800936c:	dc37      	bgt.n	80093de <_printf_float+0x33e>
 800936e:	2300      	movs	r3, #0
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009376:	f104 021a 	add.w	r2, r4, #26
 800937a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800937c:	9907      	ldr	r1, [sp, #28]
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	eba3 0309 	sub.w	r3, r3, r9
 8009384:	428b      	cmp	r3, r1
 8009386:	dc31      	bgt.n	80093ec <_printf_float+0x34c>
 8009388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938a:	459a      	cmp	sl, r3
 800938c:	dc3b      	bgt.n	8009406 <_printf_float+0x366>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	07da      	lsls	r2, r3, #31
 8009392:	d438      	bmi.n	8009406 <_printf_float+0x366>
 8009394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009396:	ebaa 0903 	sub.w	r9, sl, r3
 800939a:	9b06      	ldr	r3, [sp, #24]
 800939c:	ebaa 0303 	sub.w	r3, sl, r3
 80093a0:	4599      	cmp	r9, r3
 80093a2:	bfa8      	it	ge
 80093a4:	4699      	movge	r9, r3
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	dc34      	bgt.n	8009416 <_printf_float+0x376>
 80093ac:	f04f 0800 	mov.w	r8, #0
 80093b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b4:	f104 0b1a 	add.w	fp, r4, #26
 80093b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ba:	ebaa 0303 	sub.w	r3, sl, r3
 80093be:	eba3 0309 	sub.w	r3, r3, r9
 80093c2:	4543      	cmp	r3, r8
 80093c4:	f77f af76 	ble.w	80092b4 <_printf_float+0x214>
 80093c8:	2301      	movs	r3, #1
 80093ca:	465a      	mov	r2, fp
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f aeb0 	beq.w	8009138 <_printf_float+0x98>
 80093d8:	f108 0801 	add.w	r8, r8, #1
 80093dc:	e7ec      	b.n	80093b8 <_printf_float+0x318>
 80093de:	4642      	mov	r2, r8
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	d1c1      	bne.n	800936e <_printf_float+0x2ce>
 80093ea:	e6a5      	b.n	8009138 <_printf_float+0x98>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4631      	mov	r1, r6
 80093f0:	4628      	mov	r0, r5
 80093f2:	9206      	str	r2, [sp, #24]
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f ae9e 	beq.w	8009138 <_printf_float+0x98>
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	9a06      	ldr	r2, [sp, #24]
 8009400:	3301      	adds	r3, #1
 8009402:	9307      	str	r3, [sp, #28]
 8009404:	e7b9      	b.n	800937a <_printf_float+0x2da>
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	465a      	mov	r2, fp
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	d1bf      	bne.n	8009394 <_printf_float+0x2f4>
 8009414:	e690      	b.n	8009138 <_printf_float+0x98>
 8009416:	9a06      	ldr	r2, [sp, #24]
 8009418:	464b      	mov	r3, r9
 800941a:	4442      	add	r2, r8
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	47b8      	blx	r7
 8009422:	3001      	adds	r0, #1
 8009424:	d1c2      	bne.n	80093ac <_printf_float+0x30c>
 8009426:	e687      	b.n	8009138 <_printf_float+0x98>
 8009428:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800942c:	f1b9 0f01 	cmp.w	r9, #1
 8009430:	dc01      	bgt.n	8009436 <_printf_float+0x396>
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d536      	bpl.n	80094a4 <_printf_float+0x404>
 8009436:	2301      	movs	r3, #1
 8009438:	4642      	mov	r2, r8
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f ae79 	beq.w	8009138 <_printf_float+0x98>
 8009446:	9b05      	ldr	r3, [sp, #20]
 8009448:	465a      	mov	r2, fp
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f ae71 	beq.w	8009138 <_printf_float+0x98>
 8009456:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800945a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009462:	f109 39ff 	add.w	r9, r9, #4294967295
 8009466:	d018      	beq.n	800949a <_printf_float+0x3fa>
 8009468:	464b      	mov	r3, r9
 800946a:	f108 0201 	add.w	r2, r8, #1
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	d10c      	bne.n	8009492 <_printf_float+0x3f2>
 8009478:	e65e      	b.n	8009138 <_printf_float+0x98>
 800947a:	2301      	movs	r3, #1
 800947c:	465a      	mov	r2, fp
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae57 	beq.w	8009138 <_printf_float+0x98>
 800948a:	f108 0801 	add.w	r8, r8, #1
 800948e:	45c8      	cmp	r8, r9
 8009490:	dbf3      	blt.n	800947a <_printf_float+0x3da>
 8009492:	4653      	mov	r3, sl
 8009494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009498:	e6dc      	b.n	8009254 <_printf_float+0x1b4>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	f104 0b1a 	add.w	fp, r4, #26
 80094a2:	e7f4      	b.n	800948e <_printf_float+0x3ee>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4642      	mov	r2, r8
 80094a8:	e7e1      	b.n	800946e <_printf_float+0x3ce>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae3f 	beq.w	8009138 <_printf_float+0x98>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	4543      	cmp	r3, r8
 80094c6:	dcf0      	bgt.n	80094aa <_printf_float+0x40a>
 80094c8:	e6f8      	b.n	80092bc <_printf_float+0x21c>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f4      	b.n	80094be <_printf_float+0x41e>

080094d4 <_printf_common>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	4616      	mov	r6, r2
 80094da:	4698      	mov	r8, r3
 80094dc:	688a      	ldr	r2, [r1, #8]
 80094de:	690b      	ldr	r3, [r1, #16]
 80094e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b10a      	cbz	r2, 80094fa <_printf_common+0x26>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0699      	lsls	r1, r3, #26
 80094fe:	bf42      	ittt	mi
 8009500:	6833      	ldrmi	r3, [r6, #0]
 8009502:	3302      	addmi	r3, #2
 8009504:	6033      	strmi	r3, [r6, #0]
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	f015 0506 	ands.w	r5, r5, #6
 800950c:	d106      	bne.n	800951c <_printf_common+0x48>
 800950e:	f104 0a19 	add.w	sl, r4, #25
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc26      	bgt.n	800956a <_printf_common+0x96>
 800951c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	3b00      	subs	r3, #0
 8009524:	bf18      	it	ne
 8009526:	2301      	movne	r3, #1
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d42b      	bmi.n	8009584 <_printf_common+0xb0>
 800952c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009530:	4641      	mov	r1, r8
 8009532:	4638      	mov	r0, r7
 8009534:	47c8      	blx	r9
 8009536:	3001      	adds	r0, #1
 8009538:	d01e      	beq.n	8009578 <_printf_common+0xa4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	f003 0306 	and.w	r3, r3, #6
 8009542:	2b04      	cmp	r3, #4
 8009544:	bf02      	ittt	eq
 8009546:	68e5      	ldreq	r5, [r4, #12]
 8009548:	6833      	ldreq	r3, [r6, #0]
 800954a:	1aed      	subeq	r5, r5, r3
 800954c:	68a3      	ldr	r3, [r4, #8]
 800954e:	bf0c      	ite	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	2500      	movne	r5, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	bfc4      	itt	gt
 800955a:	1a9b      	subgt	r3, r3, r2
 800955c:	18ed      	addgt	r5, r5, r3
 800955e:	2600      	movs	r6, #0
 8009560:	341a      	adds	r4, #26
 8009562:	42b5      	cmp	r5, r6
 8009564:	d11a      	bne.n	800959c <_printf_common+0xc8>
 8009566:	2000      	movs	r0, #0
 8009568:	e008      	b.n	800957c <_printf_common+0xa8>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4641      	mov	r1, r8
 8009570:	4638      	mov	r0, r7
 8009572:	47c8      	blx	r9
 8009574:	3001      	adds	r0, #1
 8009576:	d103      	bne.n	8009580 <_printf_common+0xac>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	3501      	adds	r5, #1
 8009582:	e7c6      	b.n	8009512 <_printf_common+0x3e>
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	2030      	movs	r0, #48	@ 0x30
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800958e:	4422      	add	r2, r4
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009598:	3302      	adds	r3, #2
 800959a:	e7c7      	b.n	800952c <_printf_common+0x58>
 800959c:	2301      	movs	r3, #1
 800959e:	4622      	mov	r2, r4
 80095a0:	4641      	mov	r1, r8
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c8      	blx	r9
 80095a6:	3001      	adds	r0, #1
 80095a8:	d0e6      	beq.n	8009578 <_printf_common+0xa4>
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7d9      	b.n	8009562 <_printf_common+0x8e>
	...

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	7e0f      	ldrb	r7, [r1, #24]
 80095b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095b8:	2f78      	cmp	r7, #120	@ 0x78
 80095ba:	4691      	mov	r9, r2
 80095bc:	4680      	mov	r8, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	469a      	mov	sl, r3
 80095c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	@ 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d2 	beq.w	8009776 <_printf_i+0x1c6>
 80095d2:	2f58      	cmp	r7, #88	@ 0x58
 80095d4:	f000 80b9 	beq.w	800974a <_printf_i+0x19a>
 80095d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a101      	add	r1, pc, #4	@ (adr r1, 80095f0 <_printf_i+0x40>)
 80095ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	0800975d 	.word	0x0800975d
 8009620:	08009687 	.word	0x08009687
 8009624:	08009717 	.word	0x08009717
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	0800977f 	.word	0x0800977f
 8009634:	080095d9 	.word	0x080095d9
 8009638:	08009687 	.word	0x08009687
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	0800971f 	.word	0x0800971f
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6032      	str	r2, [r6, #0]
 8009650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e09d      	b.n	8009798 <_printf_i+0x1e8>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	6031      	str	r1, [r6, #0]
 8009664:	0606      	lsls	r6, r0, #24
 8009666:	d501      	bpl.n	800966c <_printf_i+0xbc>
 8009668:	681d      	ldr	r5, [r3, #0]
 800966a:	e003      	b.n	8009674 <_printf_i+0xc4>
 800966c:	0645      	lsls	r5, r0, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0xb8>
 8009670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009674:	2d00      	cmp	r5, #0
 8009676:	da03      	bge.n	8009680 <_printf_i+0xd0>
 8009678:	232d      	movs	r3, #45	@ 0x2d
 800967a:	426d      	negs	r5, r5
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009680:	4859      	ldr	r0, [pc, #356]	@ (80097e8 <_printf_i+0x238>)
 8009682:	230a      	movs	r3, #10
 8009684:	e011      	b.n	80096aa <_printf_i+0xfa>
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	0608      	lsls	r0, r1, #24
 800968c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009690:	d402      	bmi.n	8009698 <_printf_i+0xe8>
 8009692:	0649      	lsls	r1, r1, #25
 8009694:	bf48      	it	mi
 8009696:	b2ad      	uxthmi	r5, r5
 8009698:	2f6f      	cmp	r7, #111	@ 0x6f
 800969a:	4853      	ldr	r0, [pc, #332]	@ (80097e8 <_printf_i+0x238>)
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	bf14      	ite	ne
 80096a0:	230a      	movne	r3, #10
 80096a2:	2308      	moveq	r3, #8
 80096a4:	2100      	movs	r1, #0
 80096a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096aa:	6866      	ldr	r6, [r4, #4]
 80096ac:	60a6      	str	r6, [r4, #8]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	bfa2      	ittt	ge
 80096b2:	6821      	ldrge	r1, [r4, #0]
 80096b4:	f021 0104 	bicge.w	r1, r1, #4
 80096b8:	6021      	strge	r1, [r4, #0]
 80096ba:	b90d      	cbnz	r5, 80096c0 <_printf_i+0x110>
 80096bc:	2e00      	cmp	r6, #0
 80096be:	d04b      	beq.n	8009758 <_printf_i+0x1a8>
 80096c0:	4616      	mov	r6, r2
 80096c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c6:	fb03 5711 	mls	r7, r3, r1, r5
 80096ca:	5dc7      	ldrb	r7, [r0, r7]
 80096cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096d0:	462f      	mov	r7, r5
 80096d2:	42bb      	cmp	r3, r7
 80096d4:	460d      	mov	r5, r1
 80096d6:	d9f4      	bls.n	80096c2 <_printf_i+0x112>
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d10b      	bne.n	80096f4 <_printf_i+0x144>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	07df      	lsls	r7, r3, #31
 80096e0:	d508      	bpl.n	80096f4 <_printf_i+0x144>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	6861      	ldr	r1, [r4, #4]
 80096e6:	4299      	cmp	r1, r3
 80096e8:	bfde      	ittt	le
 80096ea:	2330      	movle	r3, #48	@ 0x30
 80096ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096f4:	1b92      	subs	r2, r2, r6
 80096f6:	6122      	str	r2, [r4, #16]
 80096f8:	f8cd a000 	str.w	sl, [sp]
 80096fc:	464b      	mov	r3, r9
 80096fe:	aa03      	add	r2, sp, #12
 8009700:	4621      	mov	r1, r4
 8009702:	4640      	mov	r0, r8
 8009704:	f7ff fee6 	bl	80094d4 <_printf_common>
 8009708:	3001      	adds	r0, #1
 800970a:	d14a      	bne.n	80097a2 <_printf_i+0x1f2>
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	b004      	add	sp, #16
 8009712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f043 0320 	orr.w	r3, r3, #32
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	4833      	ldr	r0, [pc, #204]	@ (80097ec <_printf_i+0x23c>)
 8009720:	2778      	movs	r7, #120	@ 0x78
 8009722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	6831      	ldr	r1, [r6, #0]
 800972a:	061f      	lsls	r7, r3, #24
 800972c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009730:	d402      	bmi.n	8009738 <_printf_i+0x188>
 8009732:	065f      	lsls	r7, r3, #25
 8009734:	bf48      	it	mi
 8009736:	b2ad      	uxthmi	r5, r5
 8009738:	6031      	str	r1, [r6, #0]
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	bf44      	itt	mi
 800973e:	f043 0320 	orrmi.w	r3, r3, #32
 8009742:	6023      	strmi	r3, [r4, #0]
 8009744:	b11d      	cbz	r5, 800974e <_printf_i+0x19e>
 8009746:	2310      	movs	r3, #16
 8009748:	e7ac      	b.n	80096a4 <_printf_i+0xf4>
 800974a:	4827      	ldr	r0, [pc, #156]	@ (80097e8 <_printf_i+0x238>)
 800974c:	e7e9      	b.n	8009722 <_printf_i+0x172>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f023 0320 	bic.w	r3, r3, #32
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	e7f6      	b.n	8009746 <_printf_i+0x196>
 8009758:	4616      	mov	r6, r2
 800975a:	e7bd      	b.n	80096d8 <_printf_i+0x128>
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	6825      	ldr	r5, [r4, #0]
 8009760:	6961      	ldr	r1, [r4, #20]
 8009762:	1d18      	adds	r0, r3, #4
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	062e      	lsls	r6, r5, #24
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	d501      	bpl.n	8009770 <_printf_i+0x1c0>
 800976c:	6019      	str	r1, [r3, #0]
 800976e:	e002      	b.n	8009776 <_printf_i+0x1c6>
 8009770:	0668      	lsls	r0, r5, #25
 8009772:	d5fb      	bpl.n	800976c <_printf_i+0x1bc>
 8009774:	8019      	strh	r1, [r3, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	4616      	mov	r6, r2
 800977c:	e7bc      	b.n	80096f8 <_printf_i+0x148>
 800977e:	6833      	ldr	r3, [r6, #0]
 8009780:	1d1a      	adds	r2, r3, #4
 8009782:	6032      	str	r2, [r6, #0]
 8009784:	681e      	ldr	r6, [r3, #0]
 8009786:	6862      	ldr	r2, [r4, #4]
 8009788:	2100      	movs	r1, #0
 800978a:	4630      	mov	r0, r6
 800978c:	f7f6 fdb8 	bl	8000300 <memchr>
 8009790:	b108      	cbz	r0, 8009796 <_printf_i+0x1e6>
 8009792:	1b80      	subs	r0, r0, r6
 8009794:	6060      	str	r0, [r4, #4]
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	2300      	movs	r3, #0
 800979c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097a0:	e7aa      	b.n	80096f8 <_printf_i+0x148>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	4632      	mov	r2, r6
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	47d0      	blx	sl
 80097ac:	3001      	adds	r0, #1
 80097ae:	d0ad      	beq.n	800970c <_printf_i+0x15c>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	079b      	lsls	r3, r3, #30
 80097b4:	d413      	bmi.n	80097de <_printf_i+0x22e>
 80097b6:	68e0      	ldr	r0, [r4, #12]
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	4298      	cmp	r0, r3
 80097bc:	bfb8      	it	lt
 80097be:	4618      	movlt	r0, r3
 80097c0:	e7a6      	b.n	8009710 <_printf_i+0x160>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4632      	mov	r2, r6
 80097c6:	4649      	mov	r1, r9
 80097c8:	4640      	mov	r0, r8
 80097ca:	47d0      	blx	sl
 80097cc:	3001      	adds	r0, #1
 80097ce:	d09d      	beq.n	800970c <_printf_i+0x15c>
 80097d0:	3501      	adds	r5, #1
 80097d2:	68e3      	ldr	r3, [r4, #12]
 80097d4:	9903      	ldr	r1, [sp, #12]
 80097d6:	1a5b      	subs	r3, r3, r1
 80097d8:	42ab      	cmp	r3, r5
 80097da:	dcf2      	bgt.n	80097c2 <_printf_i+0x212>
 80097dc:	e7eb      	b.n	80097b6 <_printf_i+0x206>
 80097de:	2500      	movs	r5, #0
 80097e0:	f104 0619 	add.w	r6, r4, #25
 80097e4:	e7f5      	b.n	80097d2 <_printf_i+0x222>
 80097e6:	bf00      	nop
 80097e8:	0800d661 	.word	0x0800d661
 80097ec:	0800d672 	.word	0x0800d672

080097f0 <_scanf_float>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	b087      	sub	sp, #28
 80097f6:	4617      	mov	r7, r2
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	688b      	ldr	r3, [r1, #8]
 80097fc:	1e5a      	subs	r2, r3, #1
 80097fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009802:	bf81      	itttt	hi
 8009804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009808:	eb03 0b05 	addhi.w	fp, r3, r5
 800980c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009810:	608b      	strhi	r3, [r1, #8]
 8009812:	680b      	ldr	r3, [r1, #0]
 8009814:	460a      	mov	r2, r1
 8009816:	f04f 0500 	mov.w	r5, #0
 800981a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800981e:	f842 3b1c 	str.w	r3, [r2], #28
 8009822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009826:	4680      	mov	r8, r0
 8009828:	460c      	mov	r4, r1
 800982a:	bf98      	it	ls
 800982c:	f04f 0b00 	movls.w	fp, #0
 8009830:	9201      	str	r2, [sp, #4]
 8009832:	4616      	mov	r6, r2
 8009834:	46aa      	mov	sl, r5
 8009836:	46a9      	mov	r9, r5
 8009838:	9502      	str	r5, [sp, #8]
 800983a:	68a2      	ldr	r2, [r4, #8]
 800983c:	b152      	cbz	r2, 8009854 <_scanf_float+0x64>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b4e      	cmp	r3, #78	@ 0x4e
 8009844:	d864      	bhi.n	8009910 <_scanf_float+0x120>
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d83c      	bhi.n	80098c4 <_scanf_float+0xd4>
 800984a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800984e:	b2c8      	uxtb	r0, r1
 8009850:	280e      	cmp	r0, #14
 8009852:	d93a      	bls.n	80098ca <_scanf_float+0xda>
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d003      	beq.n	8009862 <_scanf_float+0x72>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009866:	f1ba 0f01 	cmp.w	sl, #1
 800986a:	f200 8117 	bhi.w	8009a9c <_scanf_float+0x2ac>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	429e      	cmp	r6, r3
 8009872:	f200 8108 	bhi.w	8009a86 <_scanf_float+0x296>
 8009876:	2001      	movs	r0, #1
 8009878:	b007      	add	sp, #28
 800987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009882:	2a0d      	cmp	r2, #13
 8009884:	d8e6      	bhi.n	8009854 <_scanf_float+0x64>
 8009886:	a101      	add	r1, pc, #4	@ (adr r1, 800988c <_scanf_float+0x9c>)
 8009888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800988c:	080099d3 	.word	0x080099d3
 8009890:	08009855 	.word	0x08009855
 8009894:	08009855 	.word	0x08009855
 8009898:	08009855 	.word	0x08009855
 800989c:	08009a33 	.word	0x08009a33
 80098a0:	08009a0b 	.word	0x08009a0b
 80098a4:	08009855 	.word	0x08009855
 80098a8:	08009855 	.word	0x08009855
 80098ac:	080099e1 	.word	0x080099e1
 80098b0:	08009855 	.word	0x08009855
 80098b4:	08009855 	.word	0x08009855
 80098b8:	08009855 	.word	0x08009855
 80098bc:	08009855 	.word	0x08009855
 80098c0:	08009999 	.word	0x08009999
 80098c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80098c8:	e7db      	b.n	8009882 <_scanf_float+0x92>
 80098ca:	290e      	cmp	r1, #14
 80098cc:	d8c2      	bhi.n	8009854 <_scanf_float+0x64>
 80098ce:	a001      	add	r0, pc, #4	@ (adr r0, 80098d4 <_scanf_float+0xe4>)
 80098d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098d4:	08009989 	.word	0x08009989
 80098d8:	08009855 	.word	0x08009855
 80098dc:	08009989 	.word	0x08009989
 80098e0:	08009a1f 	.word	0x08009a1f
 80098e4:	08009855 	.word	0x08009855
 80098e8:	08009931 	.word	0x08009931
 80098ec:	0800996f 	.word	0x0800996f
 80098f0:	0800996f 	.word	0x0800996f
 80098f4:	0800996f 	.word	0x0800996f
 80098f8:	0800996f 	.word	0x0800996f
 80098fc:	0800996f 	.word	0x0800996f
 8009900:	0800996f 	.word	0x0800996f
 8009904:	0800996f 	.word	0x0800996f
 8009908:	0800996f 	.word	0x0800996f
 800990c:	0800996f 	.word	0x0800996f
 8009910:	2b6e      	cmp	r3, #110	@ 0x6e
 8009912:	d809      	bhi.n	8009928 <_scanf_float+0x138>
 8009914:	2b60      	cmp	r3, #96	@ 0x60
 8009916:	d8b2      	bhi.n	800987e <_scanf_float+0x8e>
 8009918:	2b54      	cmp	r3, #84	@ 0x54
 800991a:	d07b      	beq.n	8009a14 <_scanf_float+0x224>
 800991c:	2b59      	cmp	r3, #89	@ 0x59
 800991e:	d199      	bne.n	8009854 <_scanf_float+0x64>
 8009920:	2d07      	cmp	r5, #7
 8009922:	d197      	bne.n	8009854 <_scanf_float+0x64>
 8009924:	2508      	movs	r5, #8
 8009926:	e02c      	b.n	8009982 <_scanf_float+0x192>
 8009928:	2b74      	cmp	r3, #116	@ 0x74
 800992a:	d073      	beq.n	8009a14 <_scanf_float+0x224>
 800992c:	2b79      	cmp	r3, #121	@ 0x79
 800992e:	e7f6      	b.n	800991e <_scanf_float+0x12e>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	05c8      	lsls	r0, r1, #23
 8009934:	d51b      	bpl.n	800996e <_scanf_float+0x17e>
 8009936:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800993a:	6021      	str	r1, [r4, #0]
 800993c:	f109 0901 	add.w	r9, r9, #1
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	d003      	beq.n	800994e <_scanf_float+0x15e>
 8009946:	3201      	adds	r2, #1
 8009948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800994c:	60a2      	str	r2, [r4, #8]
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	3b01      	subs	r3, #1
 8009952:	60a3      	str	r3, [r4, #8]
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3b01      	subs	r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	f340 8087 	ble.w	8009a74 <_scanf_float+0x284>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	e765      	b.n	800983a <_scanf_float+0x4a>
 800996e:	eb1a 0105 	adds.w	r1, sl, r5
 8009972:	f47f af6f 	bne.w	8009854 <_scanf_float+0x64>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800997c:	6022      	str	r2, [r4, #0]
 800997e:	460d      	mov	r5, r1
 8009980:	468a      	mov	sl, r1
 8009982:	f806 3b01 	strb.w	r3, [r6], #1
 8009986:	e7e2      	b.n	800994e <_scanf_float+0x15e>
 8009988:	6822      	ldr	r2, [r4, #0]
 800998a:	0610      	lsls	r0, r2, #24
 800998c:	f57f af62 	bpl.w	8009854 <_scanf_float+0x64>
 8009990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	e7f4      	b.n	8009982 <_scanf_float+0x192>
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d10e      	bne.n	80099bc <_scanf_float+0x1cc>
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	d10e      	bne.n	80099c2 <_scanf_float+0x1d2>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099ae:	d108      	bne.n	80099c2 <_scanf_float+0x1d2>
 80099b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	f04f 0a01 	mov.w	sl, #1
 80099ba:	e7e2      	b.n	8009982 <_scanf_float+0x192>
 80099bc:	f1ba 0f02 	cmp.w	sl, #2
 80099c0:	d055      	beq.n	8009a6e <_scanf_float+0x27e>
 80099c2:	2d01      	cmp	r5, #1
 80099c4:	d002      	beq.n	80099cc <_scanf_float+0x1dc>
 80099c6:	2d04      	cmp	r5, #4
 80099c8:	f47f af44 	bne.w	8009854 <_scanf_float+0x64>
 80099cc:	3501      	adds	r5, #1
 80099ce:	b2ed      	uxtb	r5, r5
 80099d0:	e7d7      	b.n	8009982 <_scanf_float+0x192>
 80099d2:	f1ba 0f01 	cmp.w	sl, #1
 80099d6:	f47f af3d 	bne.w	8009854 <_scanf_float+0x64>
 80099da:	f04f 0a02 	mov.w	sl, #2
 80099de:	e7d0      	b.n	8009982 <_scanf_float+0x192>
 80099e0:	b97d      	cbnz	r5, 8009a02 <_scanf_float+0x212>
 80099e2:	f1b9 0f00 	cmp.w	r9, #0
 80099e6:	f47f af38 	bne.w	800985a <_scanf_float+0x6a>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099f4:	f040 8101 	bne.w	8009bfa <_scanf_float+0x40a>
 80099f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099fc:	6022      	str	r2, [r4, #0]
 80099fe:	2501      	movs	r5, #1
 8009a00:	e7bf      	b.n	8009982 <_scanf_float+0x192>
 8009a02:	2d03      	cmp	r5, #3
 8009a04:	d0e2      	beq.n	80099cc <_scanf_float+0x1dc>
 8009a06:	2d05      	cmp	r5, #5
 8009a08:	e7de      	b.n	80099c8 <_scanf_float+0x1d8>
 8009a0a:	2d02      	cmp	r5, #2
 8009a0c:	f47f af22 	bne.w	8009854 <_scanf_float+0x64>
 8009a10:	2503      	movs	r5, #3
 8009a12:	e7b6      	b.n	8009982 <_scanf_float+0x192>
 8009a14:	2d06      	cmp	r5, #6
 8009a16:	f47f af1d 	bne.w	8009854 <_scanf_float+0x64>
 8009a1a:	2507      	movs	r5, #7
 8009a1c:	e7b1      	b.n	8009982 <_scanf_float+0x192>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	0591      	lsls	r1, r2, #22
 8009a22:	f57f af17 	bpl.w	8009854 <_scanf_float+0x64>
 8009a26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a2a:	6022      	str	r2, [r4, #0]
 8009a2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a30:	e7a7      	b.n	8009982 <_scanf_float+0x192>
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a3c:	d006      	beq.n	8009a4c <_scanf_float+0x25c>
 8009a3e:	0550      	lsls	r0, r2, #21
 8009a40:	f57f af08 	bpl.w	8009854 <_scanf_float+0x64>
 8009a44:	f1b9 0f00 	cmp.w	r9, #0
 8009a48:	f000 80d7 	beq.w	8009bfa <_scanf_float+0x40a>
 8009a4c:	0591      	lsls	r1, r2, #22
 8009a4e:	bf58      	it	pl
 8009a50:	9902      	ldrpl	r1, [sp, #8]
 8009a52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a56:	bf58      	it	pl
 8009a58:	eba9 0101 	subpl.w	r1, r9, r1
 8009a5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009a60:	bf58      	it	pl
 8009a62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	f04f 0900 	mov.w	r9, #0
 8009a6c:	e789      	b.n	8009982 <_scanf_float+0x192>
 8009a6e:	f04f 0a03 	mov.w	sl, #3
 8009a72:	e786      	b.n	8009982 <_scanf_float+0x192>
 8009a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a78:	4639      	mov	r1, r7
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4798      	blx	r3
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f aedb 	beq.w	800983a <_scanf_float+0x4a>
 8009a84:	e6e6      	b.n	8009854 <_scanf_float+0x64>
 8009a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4640      	mov	r0, r8
 8009a92:	4798      	blx	r3
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	e6e8      	b.n	800986e <_scanf_float+0x7e>
 8009a9c:	1e6b      	subs	r3, r5, #1
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	d824      	bhi.n	8009aec <_scanf_float+0x2fc>
 8009aa2:	2d02      	cmp	r5, #2
 8009aa4:	d836      	bhi.n	8009b14 <_scanf_float+0x324>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	429e      	cmp	r6, r3
 8009aaa:	f67f aee4 	bls.w	8009876 <_scanf_float+0x86>
 8009aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4640      	mov	r0, r8
 8009aba:	4798      	blx	r3
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	6123      	str	r3, [r4, #16]
 8009ac2:	e7f0      	b.n	8009aa6 <_scanf_float+0x2b6>
 8009ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009acc:	463a      	mov	r2, r7
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4798      	blx	r3
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009adc:	fa5f fa8a 	uxtb.w	sl, sl
 8009ae0:	f1ba 0f02 	cmp.w	sl, #2
 8009ae4:	d1ee      	bne.n	8009ac4 <_scanf_float+0x2d4>
 8009ae6:	3d03      	subs	r5, #3
 8009ae8:	b2ed      	uxtb	r5, r5
 8009aea:	1b76      	subs	r6, r6, r5
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	05da      	lsls	r2, r3, #23
 8009af0:	d530      	bpl.n	8009b54 <_scanf_float+0x364>
 8009af2:	055b      	lsls	r3, r3, #21
 8009af4:	d511      	bpl.n	8009b1a <_scanf_float+0x32a>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	429e      	cmp	r6, r3
 8009afa:	f67f aebc 	bls.w	8009876 <_scanf_float+0x86>
 8009afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b06:	463a      	mov	r2, r7
 8009b08:	4640      	mov	r0, r8
 8009b0a:	4798      	blx	r3
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	e7f0      	b.n	8009af6 <_scanf_float+0x306>
 8009b14:	46aa      	mov	sl, r5
 8009b16:	46b3      	mov	fp, r6
 8009b18:	e7de      	b.n	8009ad8 <_scanf_float+0x2e8>
 8009b1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	2965      	cmp	r1, #101	@ 0x65
 8009b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b26:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	d00c      	beq.n	8009b48 <_scanf_float+0x358>
 8009b2e:	2945      	cmp	r1, #69	@ 0x45
 8009b30:	d00a      	beq.n	8009b48 <_scanf_float+0x358>
 8009b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b36:	463a      	mov	r2, r7
 8009b38:	4640      	mov	r0, r8
 8009b3a:	4798      	blx	r3
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	1eb5      	subs	r5, r6, #2
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4798      	blx	r3
 8009b52:	462e      	mov	r6, r5
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	f012 0210 	ands.w	r2, r2, #16
 8009b5a:	d001      	beq.n	8009b60 <_scanf_float+0x370>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e68b      	b.n	8009878 <_scanf_float+0x88>
 8009b60:	7032      	strb	r2, [r6, #0]
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b6c:	d11a      	bne.n	8009ba4 <_scanf_float+0x3b4>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	454b      	cmp	r3, r9
 8009b72:	eba3 0209 	sub.w	r2, r3, r9
 8009b76:	d121      	bne.n	8009bbc <_scanf_float+0x3cc>
 8009b78:	9901      	ldr	r1, [sp, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	f002 fad5 	bl	800c12c <_strtod_r>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	6821      	ldr	r1, [r4, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f011 0f02 	tst.w	r1, #2
 8009b8c:	f103 0204 	add.w	r2, r3, #4
 8009b90:	d01f      	beq.n	8009bd2 <_scanf_float+0x3e2>
 8009b92:	9903      	ldr	r1, [sp, #12]
 8009b94:	600a      	str	r2, [r1, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	ed83 0b00 	vstr	d0, [r3]
 8009b9c:	68e3      	ldr	r3, [r4, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60e3      	str	r3, [r4, #12]
 8009ba2:	e7db      	b.n	8009b5c <_scanf_float+0x36c>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0e6      	beq.n	8009b78 <_scanf_float+0x388>
 8009baa:	9905      	ldr	r1, [sp, #20]
 8009bac:	230a      	movs	r3, #10
 8009bae:	3101      	adds	r1, #1
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	f002 fb3b 	bl	800c22c <_strtol_r>
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	9e05      	ldr	r6, [sp, #20]
 8009bba:	1ac2      	subs	r2, r0, r3
 8009bbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009bc0:	429e      	cmp	r6, r3
 8009bc2:	bf28      	it	cs
 8009bc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009bc8:	490d      	ldr	r1, [pc, #52]	@ (8009c00 <_scanf_float+0x410>)
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f000 f8f0 	bl	8009db0 <siprintf>
 8009bd0:	e7d2      	b.n	8009b78 <_scanf_float+0x388>
 8009bd2:	f011 0f04 	tst.w	r1, #4
 8009bd6:	9903      	ldr	r1, [sp, #12]
 8009bd8:	600a      	str	r2, [r1, #0]
 8009bda:	d1dc      	bne.n	8009b96 <_scanf_float+0x3a6>
 8009bdc:	eeb4 0b40 	vcmp.f64	d0, d0
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	681d      	ldr	r5, [r3, #0]
 8009be6:	d705      	bvc.n	8009bf4 <_scanf_float+0x404>
 8009be8:	4806      	ldr	r0, [pc, #24]	@ (8009c04 <_scanf_float+0x414>)
 8009bea:	f000 fa07 	bl	8009ffc <nanf>
 8009bee:	ed85 0a00 	vstr	s0, [r5]
 8009bf2:	e7d3      	b.n	8009b9c <_scanf_float+0x3ac>
 8009bf4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009bf8:	e7f9      	b.n	8009bee <_scanf_float+0x3fe>
 8009bfa:	f04f 0900 	mov.w	r9, #0
 8009bfe:	e630      	b.n	8009862 <_scanf_float+0x72>
 8009c00:	0800d683 	.word	0x0800d683
 8009c04:	0800d64e 	.word	0x0800d64e

08009c08 <std>:
 8009c08:	2300      	movs	r3, #0
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c16:	6083      	str	r3, [r0, #8]
 8009c18:	8181      	strh	r1, [r0, #12]
 8009c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c1c:	81c2      	strh	r2, [r0, #14]
 8009c1e:	6183      	str	r3, [r0, #24]
 8009c20:	4619      	mov	r1, r3
 8009c22:	2208      	movs	r2, #8
 8009c24:	305c      	adds	r0, #92	@ 0x5c
 8009c26:	f000 f926 	bl	8009e76 <memset>
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <std+0x58>)
 8009c2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <std+0x5c>)
 8009c30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c32:	4b0d      	ldr	r3, [pc, #52]	@ (8009c68 <std+0x60>)
 8009c34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <std+0x64>)
 8009c38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <std+0x68>)
 8009c3c:	6224      	str	r4, [r4, #32]
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d006      	beq.n	8009c50 <std+0x48>
 8009c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c46:	4294      	cmp	r4, r2
 8009c48:	d002      	beq.n	8009c50 <std+0x48>
 8009c4a:	33d0      	adds	r3, #208	@ 0xd0
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d105      	bne.n	8009c5c <std+0x54>
 8009c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f000 b9be 	b.w	8009fd8 <__retarget_lock_init_recursive>
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	08009df1 	.word	0x08009df1
 8009c64:	08009e13 	.word	0x08009e13
 8009c68:	08009e4b 	.word	0x08009e4b
 8009c6c:	08009e6f 	.word	0x08009e6f
 8009c70:	24004d78 	.word	0x24004d78

08009c74 <stdio_exit_handler>:
 8009c74:	4a02      	ldr	r2, [pc, #8]	@ (8009c80 <stdio_exit_handler+0xc>)
 8009c76:	4903      	ldr	r1, [pc, #12]	@ (8009c84 <stdio_exit_handler+0x10>)
 8009c78:	4803      	ldr	r0, [pc, #12]	@ (8009c88 <stdio_exit_handler+0x14>)
 8009c7a:	f000 b87b 	b.w	8009d74 <_fwalk_sglue>
 8009c7e:	bf00      	nop
 8009c80:	240000bc 	.word	0x240000bc
 8009c84:	0800c86d 	.word	0x0800c86d
 8009c88:	240000cc 	.word	0x240000cc

08009c8c <cleanup_stdio>:
 8009c8c:	6841      	ldr	r1, [r0, #4]
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <cleanup_stdio+0x34>)
 8009c90:	4299      	cmp	r1, r3
 8009c92:	b510      	push	{r4, lr}
 8009c94:	4604      	mov	r4, r0
 8009c96:	d001      	beq.n	8009c9c <cleanup_stdio+0x10>
 8009c98:	f002 fde8 	bl	800c86c <_fflush_r>
 8009c9c:	68a1      	ldr	r1, [r4, #8]
 8009c9e:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <cleanup_stdio+0x38>)
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d002      	beq.n	8009caa <cleanup_stdio+0x1e>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f002 fde1 	bl	800c86c <_fflush_r>
 8009caa:	68e1      	ldr	r1, [r4, #12]
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <cleanup_stdio+0x3c>)
 8009cae:	4299      	cmp	r1, r3
 8009cb0:	d004      	beq.n	8009cbc <cleanup_stdio+0x30>
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb8:	f002 bdd8 	b.w	800c86c <_fflush_r>
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	bf00      	nop
 8009cc0:	24004d78 	.word	0x24004d78
 8009cc4:	24004de0 	.word	0x24004de0
 8009cc8:	24004e48 	.word	0x24004e48

08009ccc <global_stdio_init.part.0>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4b0b      	ldr	r3, [pc, #44]	@ (8009cfc <global_stdio_init.part.0+0x30>)
 8009cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8009d00 <global_stdio_init.part.0+0x34>)
 8009cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8009d04 <global_stdio_init.part.0+0x38>)
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2104      	movs	r1, #4
 8009cdc:	f7ff ff94 	bl	8009c08 <std>
 8009ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	2109      	movs	r1, #9
 8009ce8:	f7ff ff8e 	bl	8009c08 <std>
 8009cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf6:	2112      	movs	r1, #18
 8009cf8:	f7ff bf86 	b.w	8009c08 <std>
 8009cfc:	24004eb0 	.word	0x24004eb0
 8009d00:	24004d78 	.word	0x24004d78
 8009d04:	08009c75 	.word	0x08009c75

08009d08 <__sfp_lock_acquire>:
 8009d08:	4801      	ldr	r0, [pc, #4]	@ (8009d10 <__sfp_lock_acquire+0x8>)
 8009d0a:	f000 b966 	b.w	8009fda <__retarget_lock_acquire_recursive>
 8009d0e:	bf00      	nop
 8009d10:	24004eb9 	.word	0x24004eb9

08009d14 <__sfp_lock_release>:
 8009d14:	4801      	ldr	r0, [pc, #4]	@ (8009d1c <__sfp_lock_release+0x8>)
 8009d16:	f000 b961 	b.w	8009fdc <__retarget_lock_release_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	24004eb9 	.word	0x24004eb9

08009d20 <__sinit>:
 8009d20:	b510      	push	{r4, lr}
 8009d22:	4604      	mov	r4, r0
 8009d24:	f7ff fff0 	bl	8009d08 <__sfp_lock_acquire>
 8009d28:	6a23      	ldr	r3, [r4, #32]
 8009d2a:	b11b      	cbz	r3, 8009d34 <__sinit+0x14>
 8009d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d30:	f7ff bff0 	b.w	8009d14 <__sfp_lock_release>
 8009d34:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <__sinit+0x28>)
 8009d36:	6223      	str	r3, [r4, #32]
 8009d38:	4b04      	ldr	r3, [pc, #16]	@ (8009d4c <__sinit+0x2c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1f5      	bne.n	8009d2c <__sinit+0xc>
 8009d40:	f7ff ffc4 	bl	8009ccc <global_stdio_init.part.0>
 8009d44:	e7f2      	b.n	8009d2c <__sinit+0xc>
 8009d46:	bf00      	nop
 8009d48:	08009c8d 	.word	0x08009c8d
 8009d4c:	24004eb0 	.word	0x24004eb0

08009d50 <fiprintf>:
 8009d50:	b40e      	push	{r1, r2, r3}
 8009d52:	b503      	push	{r0, r1, lr}
 8009d54:	4601      	mov	r1, r0
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	4805      	ldr	r0, [pc, #20]	@ (8009d70 <fiprintf+0x20>)
 8009d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d5e:	6800      	ldr	r0, [r0, #0]
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	f002 fbe7 	bl	800c534 <_vfiprintf_r>
 8009d66:	b002      	add	sp, #8
 8009d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d6c:	b003      	add	sp, #12
 8009d6e:	4770      	bx	lr
 8009d70:	240000c8 	.word	0x240000c8

08009d74 <_fwalk_sglue>:
 8009d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	4607      	mov	r7, r0
 8009d7a:	4688      	mov	r8, r1
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	2600      	movs	r6, #0
 8009d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d84:	f1b9 0901 	subs.w	r9, r9, #1
 8009d88:	d505      	bpl.n	8009d96 <_fwalk_sglue+0x22>
 8009d8a:	6824      	ldr	r4, [r4, #0]
 8009d8c:	2c00      	cmp	r4, #0
 8009d8e:	d1f7      	bne.n	8009d80 <_fwalk_sglue+0xc>
 8009d90:	4630      	mov	r0, r6
 8009d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d96:	89ab      	ldrh	r3, [r5, #12]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d907      	bls.n	8009dac <_fwalk_sglue+0x38>
 8009d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da0:	3301      	adds	r3, #1
 8009da2:	d003      	beq.n	8009dac <_fwalk_sglue+0x38>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4638      	mov	r0, r7
 8009da8:	47c0      	blx	r8
 8009daa:	4306      	orrs	r6, r0
 8009dac:	3568      	adds	r5, #104	@ 0x68
 8009dae:	e7e9      	b.n	8009d84 <_fwalk_sglue+0x10>

08009db0 <siprintf>:
 8009db0:	b40e      	push	{r1, r2, r3}
 8009db2:	b500      	push	{lr}
 8009db4:	b09c      	sub	sp, #112	@ 0x70
 8009db6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009db8:	9002      	str	r0, [sp, #8]
 8009dba:	9006      	str	r0, [sp, #24]
 8009dbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009dc0:	4809      	ldr	r0, [pc, #36]	@ (8009de8 <siprintf+0x38>)
 8009dc2:	9107      	str	r1, [sp, #28]
 8009dc4:	9104      	str	r1, [sp, #16]
 8009dc6:	4909      	ldr	r1, [pc, #36]	@ (8009dec <siprintf+0x3c>)
 8009dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dcc:	9105      	str	r1, [sp, #20]
 8009dce:	6800      	ldr	r0, [r0, #0]
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	a902      	add	r1, sp, #8
 8009dd4:	f002 fa88 	bl	800c2e8 <_svfiprintf_r>
 8009dd8:	9b02      	ldr	r3, [sp, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	b01c      	add	sp, #112	@ 0x70
 8009de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de4:	b003      	add	sp, #12
 8009de6:	4770      	bx	lr
 8009de8:	240000c8 	.word	0x240000c8
 8009dec:	ffff0208 	.word	0xffff0208

08009df0 <__sread>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df8:	f000 f890 	bl	8009f1c <_read_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	bfab      	itete	ge
 8009e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e02:	89a3      	ldrhlt	r3, [r4, #12]
 8009e04:	181b      	addge	r3, r3, r0
 8009e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e0a:	bfac      	ite	ge
 8009e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e0e:	81a3      	strhlt	r3, [r4, #12]
 8009e10:	bd10      	pop	{r4, pc}

08009e12 <__swrite>:
 8009e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e16:	461f      	mov	r7, r3
 8009e18:	898b      	ldrh	r3, [r1, #12]
 8009e1a:	05db      	lsls	r3, r3, #23
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	4616      	mov	r6, r2
 8009e22:	d505      	bpl.n	8009e30 <__swrite+0x1e>
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f000 f864 	bl	8009ef8 <_lseek_r>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	f000 b88b 	b.w	8009f60 <_write_r>

08009e4a <__sseek>:
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e52:	f000 f851 	bl	8009ef8 <_lseek_r>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	bf15      	itete	ne
 8009e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e66:	81a3      	strheq	r3, [r4, #12]
 8009e68:	bf18      	it	ne
 8009e6a:	81a3      	strhne	r3, [r4, #12]
 8009e6c:	bd10      	pop	{r4, pc}

08009e6e <__sclose>:
 8009e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e72:	f000 b831 	b.w	8009ed8 <_close_r>

08009e76 <memset>:
 8009e76:	4402      	add	r2, r0
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d100      	bne.n	8009e80 <memset+0xa>
 8009e7e:	4770      	bx	lr
 8009e80:	f803 1b01 	strb.w	r1, [r3], #1
 8009e84:	e7f9      	b.n	8009e7a <memset+0x4>

08009e86 <strncmp>:
 8009e86:	b510      	push	{r4, lr}
 8009e88:	b16a      	cbz	r2, 8009ea6 <strncmp+0x20>
 8009e8a:	3901      	subs	r1, #1
 8009e8c:	1884      	adds	r4, r0, r2
 8009e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d103      	bne.n	8009ea2 <strncmp+0x1c>
 8009e9a:	42a0      	cmp	r0, r4
 8009e9c:	d001      	beq.n	8009ea2 <strncmp+0x1c>
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	d1f5      	bne.n	8009e8e <strncmp+0x8>
 8009ea2:	1ad0      	subs	r0, r2, r3
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	e7fc      	b.n	8009ea4 <strncmp+0x1e>

08009eaa <strncpy>:
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	3901      	subs	r1, #1
 8009eae:	4603      	mov	r3, r0
 8009eb0:	b132      	cbz	r2, 8009ec0 <strncpy+0x16>
 8009eb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009eb6:	f803 4b01 	strb.w	r4, [r3], #1
 8009eba:	3a01      	subs	r2, #1
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d1f7      	bne.n	8009eb0 <strncpy+0x6>
 8009ec0:	441a      	add	r2, r3
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d100      	bne.n	8009eca <strncpy+0x20>
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ece:	e7f9      	b.n	8009ec4 <strncpy+0x1a>

08009ed0 <_localeconv_r>:
 8009ed0:	4800      	ldr	r0, [pc, #0]	@ (8009ed4 <_localeconv_r+0x4>)
 8009ed2:	4770      	bx	lr
 8009ed4:	24000208 	.word	0x24000208

08009ed8 <_close_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d06      	ldr	r5, [pc, #24]	@ (8009ef4 <_close_r+0x1c>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f7 fa0a 	bl	80012fc <_close>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_close_r+0x1a>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_close_r+0x1a>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	24004eb4 	.word	0x24004eb4

08009ef8 <_lseek_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	@ (8009f18 <_lseek_r+0x20>)
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f7 fa1f 	bl	800134a <_lseek>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_lseek_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_lseek_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	24004eb4 	.word	0x24004eb4

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	@ (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f7 f9ad 	bl	800128a <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	24004eb4 	.word	0x24004eb4

08009f40 <_sbrk_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d06      	ldr	r5, [pc, #24]	@ (8009f5c <_sbrk_r+0x1c>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f7 fa0a 	bl	8001364 <_sbrk>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_sbrk_r+0x1a>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_sbrk_r+0x1a>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	24004eb4 	.word	0x24004eb4

08009f60 <_write_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	@ (8009f80 <_write_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f7 f9a8 	bl	80012c4 <_write>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_write_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_write_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	24004eb4 	.word	0x24004eb4

08009f84 <__errno>:
 8009f84:	4b01      	ldr	r3, [pc, #4]	@ (8009f8c <__errno+0x8>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	240000c8 	.word	0x240000c8

08009f90 <__libc_init_array>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	4d0d      	ldr	r5, [pc, #52]	@ (8009fc8 <__libc_init_array+0x38>)
 8009f94:	4c0d      	ldr	r4, [pc, #52]	@ (8009fcc <__libc_init_array+0x3c>)
 8009f96:	1b64      	subs	r4, r4, r5
 8009f98:	10a4      	asrs	r4, r4, #2
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	42a6      	cmp	r6, r4
 8009f9e:	d109      	bne.n	8009fb4 <__libc_init_array+0x24>
 8009fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8009fd0 <__libc_init_array+0x40>)
 8009fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8009fd4 <__libc_init_array+0x44>)
 8009fa4:	f003 f9aa 	bl	800d2fc <_init>
 8009fa8:	1b64      	subs	r4, r4, r5
 8009faa:	10a4      	asrs	r4, r4, #2
 8009fac:	2600      	movs	r6, #0
 8009fae:	42a6      	cmp	r6, r4
 8009fb0:	d105      	bne.n	8009fbe <__libc_init_array+0x2e>
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb8:	4798      	blx	r3
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7ee      	b.n	8009f9c <__libc_init_array+0xc>
 8009fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc2:	4798      	blx	r3
 8009fc4:	3601      	adds	r6, #1
 8009fc6:	e7f2      	b.n	8009fae <__libc_init_array+0x1e>
 8009fc8:	0800da4c 	.word	0x0800da4c
 8009fcc:	0800da4c 	.word	0x0800da4c
 8009fd0:	0800da4c 	.word	0x0800da4c
 8009fd4:	0800da50 	.word	0x0800da50

08009fd8 <__retarget_lock_init_recursive>:
 8009fd8:	4770      	bx	lr

08009fda <__retarget_lock_acquire_recursive>:
 8009fda:	4770      	bx	lr

08009fdc <__retarget_lock_release_recursive>:
 8009fdc:	4770      	bx	lr

08009fde <memcpy>:
 8009fde:	440a      	add	r2, r1
 8009fe0:	4291      	cmp	r1, r2
 8009fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe6:	d100      	bne.n	8009fea <memcpy+0xc>
 8009fe8:	4770      	bx	lr
 8009fea:	b510      	push	{r4, lr}
 8009fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff4:	4291      	cmp	r1, r2
 8009ff6:	d1f9      	bne.n	8009fec <memcpy+0xe>
 8009ff8:	bd10      	pop	{r4, pc}
	...

08009ffc <nanf>:
 8009ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a004 <nanf+0x8>
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	7fc00000 	.word	0x7fc00000

0800a008 <abort>:
 800a008:	b508      	push	{r3, lr}
 800a00a:	2006      	movs	r0, #6
 800a00c:	f002 fd2c 	bl	800ca68 <raise>
 800a010:	2001      	movs	r0, #1
 800a012:	f7f7 f92f 	bl	8001274 <_exit>

0800a016 <quorem>:
 800a016:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	6903      	ldr	r3, [r0, #16]
 800a01c:	690c      	ldr	r4, [r1, #16]
 800a01e:	42a3      	cmp	r3, r4
 800a020:	4607      	mov	r7, r0
 800a022:	db7e      	blt.n	800a122 <quorem+0x10c>
 800a024:	3c01      	subs	r4, #1
 800a026:	f101 0814 	add.w	r8, r1, #20
 800a02a:	00a3      	lsls	r3, r4, #2
 800a02c:	f100 0514 	add.w	r5, r0, #20
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a03c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a040:	3301      	adds	r3, #1
 800a042:	429a      	cmp	r2, r3
 800a044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a048:	fbb2 f6f3 	udiv	r6, r2, r3
 800a04c:	d32e      	bcc.n	800a0ac <quorem+0x96>
 800a04e:	f04f 0a00 	mov.w	sl, #0
 800a052:	46c4      	mov	ip, r8
 800a054:	46ae      	mov	lr, r5
 800a056:	46d3      	mov	fp, sl
 800a058:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a05c:	b298      	uxth	r0, r3
 800a05e:	fb06 a000 	mla	r0, r6, r0, sl
 800a062:	0c02      	lsrs	r2, r0, #16
 800a064:	0c1b      	lsrs	r3, r3, #16
 800a066:	fb06 2303 	mla	r3, r6, r3, r2
 800a06a:	f8de 2000 	ldr.w	r2, [lr]
 800a06e:	b280      	uxth	r0, r0
 800a070:	b292      	uxth	r2, r2
 800a072:	1a12      	subs	r2, r2, r0
 800a074:	445a      	add	r2, fp
 800a076:	f8de 0000 	ldr.w	r0, [lr]
 800a07a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a084:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a088:	b292      	uxth	r2, r2
 800a08a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a08e:	45e1      	cmp	r9, ip
 800a090:	f84e 2b04 	str.w	r2, [lr], #4
 800a094:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a098:	d2de      	bcs.n	800a058 <quorem+0x42>
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	58eb      	ldr	r3, [r5, r3]
 800a09e:	b92b      	cbnz	r3, 800a0ac <quorem+0x96>
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	3b04      	subs	r3, #4
 800a0a4:	429d      	cmp	r5, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	d32f      	bcc.n	800a10a <quorem+0xf4>
 800a0aa:	613c      	str	r4, [r7, #16]
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f001 f89f 	bl	800b1f0 <__mcmp>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	db25      	blt.n	800a102 <quorem+0xec>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0be:	f8d1 c000 	ldr.w	ip, [r1]
 800a0c2:	fa1f fe82 	uxth.w	lr, r2
 800a0c6:	fa1f f38c 	uxth.w	r3, ip
 800a0ca:	eba3 030e 	sub.w	r3, r3, lr
 800a0ce:	4403      	add	r3, r0
 800a0d0:	0c12      	lsrs	r2, r2, #16
 800a0d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0e0:	45c1      	cmp	r9, r8
 800a0e2:	f841 3b04 	str.w	r3, [r1], #4
 800a0e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0ea:	d2e6      	bcs.n	800a0ba <quorem+0xa4>
 800a0ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0f4:	b922      	cbnz	r2, 800a100 <quorem+0xea>
 800a0f6:	3b04      	subs	r3, #4
 800a0f8:	429d      	cmp	r5, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	d30b      	bcc.n	800a116 <quorem+0x100>
 800a0fe:	613c      	str	r4, [r7, #16]
 800a100:	3601      	adds	r6, #1
 800a102:	4630      	mov	r0, r6
 800a104:	b003      	add	sp, #12
 800a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	3b04      	subs	r3, #4
 800a10e:	2a00      	cmp	r2, #0
 800a110:	d1cb      	bne.n	800a0aa <quorem+0x94>
 800a112:	3c01      	subs	r4, #1
 800a114:	e7c6      	b.n	800a0a4 <quorem+0x8e>
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	3b04      	subs	r3, #4
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d1ef      	bne.n	800a0fe <quorem+0xe8>
 800a11e:	3c01      	subs	r4, #1
 800a120:	e7ea      	b.n	800a0f8 <quorem+0xe2>
 800a122:	2000      	movs	r0, #0
 800a124:	e7ee      	b.n	800a104 <quorem+0xee>
	...

0800a128 <_dtoa_r>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ed2d 8b02 	vpush	{d8}
 800a130:	69c7      	ldr	r7, [r0, #28]
 800a132:	b091      	sub	sp, #68	@ 0x44
 800a134:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a138:	ec55 4b10 	vmov	r4, r5, d0
 800a13c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a13e:	9107      	str	r1, [sp, #28]
 800a140:	4681      	mov	r9, r0
 800a142:	9209      	str	r2, [sp, #36]	@ 0x24
 800a144:	930d      	str	r3, [sp, #52]	@ 0x34
 800a146:	b97f      	cbnz	r7, 800a168 <_dtoa_r+0x40>
 800a148:	2010      	movs	r0, #16
 800a14a:	f7fe fe5d 	bl	8008e08 <malloc>
 800a14e:	4602      	mov	r2, r0
 800a150:	f8c9 001c 	str.w	r0, [r9, #28]
 800a154:	b920      	cbnz	r0, 800a160 <_dtoa_r+0x38>
 800a156:	4ba0      	ldr	r3, [pc, #640]	@ (800a3d8 <_dtoa_r+0x2b0>)
 800a158:	21ef      	movs	r1, #239	@ 0xef
 800a15a:	48a0      	ldr	r0, [pc, #640]	@ (800a3dc <_dtoa_r+0x2b4>)
 800a15c:	f7fe fe36 	bl	8008dcc <__assert_func>
 800a160:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a164:	6007      	str	r7, [r0, #0]
 800a166:	60c7      	str	r7, [r0, #12]
 800a168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	b159      	cbz	r1, 800a188 <_dtoa_r+0x60>
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	604a      	str	r2, [r1, #4]
 800a174:	2301      	movs	r3, #1
 800a176:	4093      	lsls	r3, r2
 800a178:	608b      	str	r3, [r1, #8]
 800a17a:	4648      	mov	r0, r9
 800a17c:	f000 fdb4 	bl	800ace8 <_Bfree>
 800a180:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	1e2b      	subs	r3, r5, #0
 800a18a:	bfbb      	ittet	lt
 800a18c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a190:	9303      	strlt	r3, [sp, #12]
 800a192:	2300      	movge	r3, #0
 800a194:	2201      	movlt	r2, #1
 800a196:	bfac      	ite	ge
 800a198:	6033      	strge	r3, [r6, #0]
 800a19a:	6032      	strlt	r2, [r6, #0]
 800a19c:	4b90      	ldr	r3, [pc, #576]	@ (800a3e0 <_dtoa_r+0x2b8>)
 800a19e:	9e03      	ldr	r6, [sp, #12]
 800a1a0:	43b3      	bics	r3, r6
 800a1a2:	d110      	bne.n	800a1c6 <_dtoa_r+0x9e>
 800a1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a1b0:	4323      	orrs	r3, r4
 800a1b2:	f000 84de 	beq.w	800ab72 <_dtoa_r+0xa4a>
 800a1b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1b8:	4f8a      	ldr	r7, [pc, #552]	@ (800a3e4 <_dtoa_r+0x2bc>)
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 84e0 	beq.w	800ab80 <_dtoa_r+0xa58>
 800a1c0:	1cfb      	adds	r3, r7, #3
 800a1c2:	f000 bcdb 	b.w	800ab7c <_dtoa_r+0xa54>
 800a1c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a1ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d2:	d10a      	bne.n	800a1ea <_dtoa_r+0xc2>
 800a1d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1dc:	b113      	cbz	r3, 800a1e4 <_dtoa_r+0xbc>
 800a1de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a1e0:	4b81      	ldr	r3, [pc, #516]	@ (800a3e8 <_dtoa_r+0x2c0>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	4f81      	ldr	r7, [pc, #516]	@ (800a3ec <_dtoa_r+0x2c4>)
 800a1e6:	f000 bccb 	b.w	800ab80 <_dtoa_r+0xa58>
 800a1ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800a1ec:	a90f      	add	r1, sp, #60	@ 0x3c
 800a1ee:	4648      	mov	r0, r9
 800a1f0:	eeb0 0b48 	vmov.f64	d0, d8
 800a1f4:	f001 f91c 	bl	800b430 <__d2b>
 800a1f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1fe:	9001      	str	r0, [sp, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d045      	beq.n	800a290 <_dtoa_r+0x168>
 800a204:	eeb0 7b48 	vmov.f64	d7, d8
 800a208:	ee18 1a90 	vmov	r1, s17
 800a20c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a210:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a214:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a21c:	2500      	movs	r5, #0
 800a21e:	ee07 1a90 	vmov	s15, r1
 800a222:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a3c0 <_dtoa_r+0x298>
 800a22a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a22e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a3c8 <_dtoa_r+0x2a0>
 800a232:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a236:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a3d0 <_dtoa_r+0x2a8>
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a242:	eeb0 7b46 	vmov.f64	d7, d6
 800a246:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a24a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a24e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	ee16 8a90 	vmov	r8, s13
 800a25a:	d508      	bpl.n	800a26e <_dtoa_r+0x146>
 800a25c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a260:	eeb4 6b47 	vcmp.f64	d6, d7
 800a264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a268:	bf18      	it	ne
 800a26a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a26e:	f1b8 0f16 	cmp.w	r8, #22
 800a272:	d82b      	bhi.n	800a2cc <_dtoa_r+0x1a4>
 800a274:	495e      	ldr	r1, [pc, #376]	@ (800a3f0 <_dtoa_r+0x2c8>)
 800a276:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a27a:	ed91 7b00 	vldr	d7, [r1]
 800a27e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a286:	d501      	bpl.n	800a28c <_dtoa_r+0x164>
 800a288:	f108 38ff 	add.w	r8, r8, #4294967295
 800a28c:	2100      	movs	r1, #0
 800a28e:	e01e      	b.n	800a2ce <_dtoa_r+0x1a6>
 800a290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a292:	4413      	add	r3, r2
 800a294:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a298:	2920      	cmp	r1, #32
 800a29a:	bfc1      	itttt	gt
 800a29c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a2a0:	408e      	lslgt	r6, r1
 800a2a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a2a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a2aa:	bfd6      	itet	le
 800a2ac:	f1c1 0120 	rsble	r1, r1, #32
 800a2b0:	4331      	orrgt	r1, r6
 800a2b2:	fa04 f101 	lslle.w	r1, r4, r1
 800a2b6:	ee07 1a90 	vmov	s15, r1
 800a2ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	ee17 1a90 	vmov	r1, s15
 800a2c4:	2501      	movs	r5, #1
 800a2c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a2ca:	e7a8      	b.n	800a21e <_dtoa_r+0xf6>
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	1e53      	subs	r3, r2, #1
 800a2d2:	9306      	str	r3, [sp, #24]
 800a2d4:	bf45      	ittet	mi
 800a2d6:	f1c2 0301 	rsbmi	r3, r2, #1
 800a2da:	9305      	strmi	r3, [sp, #20]
 800a2dc:	2300      	movpl	r3, #0
 800a2de:	2300      	movmi	r3, #0
 800a2e0:	bf4c      	ite	mi
 800a2e2:	9306      	strmi	r3, [sp, #24]
 800a2e4:	9305      	strpl	r3, [sp, #20]
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	910c      	str	r1, [sp, #48]	@ 0x30
 800a2ec:	db18      	blt.n	800a320 <_dtoa_r+0x1f8>
 800a2ee:	9b06      	ldr	r3, [sp, #24]
 800a2f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a2f4:	4443      	add	r3, r8
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9a07      	ldr	r2, [sp, #28]
 800a2fc:	2a09      	cmp	r2, #9
 800a2fe:	d849      	bhi.n	800a394 <_dtoa_r+0x26c>
 800a300:	2a05      	cmp	r2, #5
 800a302:	bfc4      	itt	gt
 800a304:	3a04      	subgt	r2, #4
 800a306:	9207      	strgt	r2, [sp, #28]
 800a308:	9a07      	ldr	r2, [sp, #28]
 800a30a:	f1a2 0202 	sub.w	r2, r2, #2
 800a30e:	bfcc      	ite	gt
 800a310:	2400      	movgt	r4, #0
 800a312:	2401      	movle	r4, #1
 800a314:	2a03      	cmp	r2, #3
 800a316:	d848      	bhi.n	800a3aa <_dtoa_r+0x282>
 800a318:	e8df f002 	tbb	[pc, r2]
 800a31c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	2200      	movs	r2, #0
 800a324:	eba3 0308 	sub.w	r3, r3, r8
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a32c:	f1c8 0300 	rsb	r3, r8, #0
 800a330:	e7e3      	b.n	800a2fa <_dtoa_r+0x1d2>
 800a332:	2200      	movs	r2, #0
 800a334:	9208      	str	r2, [sp, #32]
 800a336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a338:	2a00      	cmp	r2, #0
 800a33a:	dc39      	bgt.n	800a3b0 <_dtoa_r+0x288>
 800a33c:	f04f 0b01 	mov.w	fp, #1
 800a340:	46da      	mov	sl, fp
 800a342:	465a      	mov	r2, fp
 800a344:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a348:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a34c:	2100      	movs	r1, #0
 800a34e:	2004      	movs	r0, #4
 800a350:	f100 0614 	add.w	r6, r0, #20
 800a354:	4296      	cmp	r6, r2
 800a356:	d930      	bls.n	800a3ba <_dtoa_r+0x292>
 800a358:	6079      	str	r1, [r7, #4]
 800a35a:	4648      	mov	r0, r9
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	f000 fc83 	bl	800ac68 <_Balloc>
 800a362:	9b04      	ldr	r3, [sp, #16]
 800a364:	4607      	mov	r7, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d146      	bne.n	800a3f8 <_dtoa_r+0x2d0>
 800a36a:	4b22      	ldr	r3, [pc, #136]	@ (800a3f4 <_dtoa_r+0x2cc>)
 800a36c:	4602      	mov	r2, r0
 800a36e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a372:	e6f2      	b.n	800a15a <_dtoa_r+0x32>
 800a374:	2201      	movs	r2, #1
 800a376:	e7dd      	b.n	800a334 <_dtoa_r+0x20c>
 800a378:	2200      	movs	r2, #0
 800a37a:	9208      	str	r2, [sp, #32]
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	eb08 0b02 	add.w	fp, r8, r2
 800a382:	f10b 0a01 	add.w	sl, fp, #1
 800a386:	4652      	mov	r2, sl
 800a388:	2a01      	cmp	r2, #1
 800a38a:	bfb8      	it	lt
 800a38c:	2201      	movlt	r2, #1
 800a38e:	e7db      	b.n	800a348 <_dtoa_r+0x220>
 800a390:	2201      	movs	r2, #1
 800a392:	e7f2      	b.n	800a37a <_dtoa_r+0x252>
 800a394:	2401      	movs	r4, #1
 800a396:	2200      	movs	r2, #0
 800a398:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a39c:	f04f 3bff 	mov.w	fp, #4294967295
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	46da      	mov	sl, fp
 800a3a4:	2212      	movs	r2, #18
 800a3a6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3a8:	e7ce      	b.n	800a348 <_dtoa_r+0x220>
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	9208      	str	r2, [sp, #32]
 800a3ae:	e7f5      	b.n	800a39c <_dtoa_r+0x274>
 800a3b0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a3b4:	46da      	mov	sl, fp
 800a3b6:	465a      	mov	r2, fp
 800a3b8:	e7c6      	b.n	800a348 <_dtoa_r+0x220>
 800a3ba:	3101      	adds	r1, #1
 800a3bc:	0040      	lsls	r0, r0, #1
 800a3be:	e7c7      	b.n	800a350 <_dtoa_r+0x228>
 800a3c0:	636f4361 	.word	0x636f4361
 800a3c4:	3fd287a7 	.word	0x3fd287a7
 800a3c8:	8b60c8b3 	.word	0x8b60c8b3
 800a3cc:	3fc68a28 	.word	0x3fc68a28
 800a3d0:	509f79fb 	.word	0x509f79fb
 800a3d4:	3fd34413 	.word	0x3fd34413
 800a3d8:	0800d695 	.word	0x0800d695
 800a3dc:	0800d6ac 	.word	0x0800d6ac
 800a3e0:	7ff00000 	.word	0x7ff00000
 800a3e4:	0800d691 	.word	0x0800d691
 800a3e8:	0800d660 	.word	0x0800d660
 800a3ec:	0800d65f 	.word	0x0800d65f
 800a3f0:	0800d7a8 	.word	0x0800d7a8
 800a3f4:	0800d704 	.word	0x0800d704
 800a3f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a3fc:	f1ba 0f0e 	cmp.w	sl, #14
 800a400:	6010      	str	r0, [r2, #0]
 800a402:	d86f      	bhi.n	800a4e4 <_dtoa_r+0x3bc>
 800a404:	2c00      	cmp	r4, #0
 800a406:	d06d      	beq.n	800a4e4 <_dtoa_r+0x3bc>
 800a408:	f1b8 0f00 	cmp.w	r8, #0
 800a40c:	f340 80c2 	ble.w	800a594 <_dtoa_r+0x46c>
 800a410:	4aca      	ldr	r2, [pc, #808]	@ (800a73c <_dtoa_r+0x614>)
 800a412:	f008 010f 	and.w	r1, r8, #15
 800a416:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a41a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a41e:	ed92 7b00 	vldr	d7, [r2]
 800a422:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a426:	f000 80a9 	beq.w	800a57c <_dtoa_r+0x454>
 800a42a:	4ac5      	ldr	r2, [pc, #788]	@ (800a740 <_dtoa_r+0x618>)
 800a42c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a430:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a434:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a438:	f001 010f 	and.w	r1, r1, #15
 800a43c:	2203      	movs	r2, #3
 800a43e:	48c0      	ldr	r0, [pc, #768]	@ (800a740 <_dtoa_r+0x618>)
 800a440:	2900      	cmp	r1, #0
 800a442:	f040 809d 	bne.w	800a580 <_dtoa_r+0x458>
 800a446:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a44a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a44e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a454:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a458:	2900      	cmp	r1, #0
 800a45a:	f000 80c1 	beq.w	800a5e0 <_dtoa_r+0x4b8>
 800a45e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46a:	f140 80b9 	bpl.w	800a5e0 <_dtoa_r+0x4b8>
 800a46e:	f1ba 0f00 	cmp.w	sl, #0
 800a472:	f000 80b5 	beq.w	800a5e0 <_dtoa_r+0x4b8>
 800a476:	f1bb 0f00 	cmp.w	fp, #0
 800a47a:	dd31      	ble.n	800a4e0 <_dtoa_r+0x3b8>
 800a47c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a480:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a484:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a488:	f108 31ff 	add.w	r1, r8, #4294967295
 800a48c:	9104      	str	r1, [sp, #16]
 800a48e:	3201      	adds	r2, #1
 800a490:	465c      	mov	r4, fp
 800a492:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a496:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a49a:	ee07 2a90 	vmov	s15, r2
 800a49e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a4a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a4a6:	ee15 2a90 	vmov	r2, s11
 800a4aa:	ec51 0b15 	vmov	r0, r1, d5
 800a4ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	f040 8098 	bne.w	800a5e8 <_dtoa_r+0x4c0>
 800a4b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a4bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a4c0:	ec41 0b17 	vmov	d7, r0, r1
 800a4c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	f300 8261 	bgt.w	800a992 <_dtoa_r+0x86a>
 800a4d0:	eeb1 7b47 	vneg.f64	d7, d7
 800a4d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4dc:	f100 80f5 	bmi.w	800a6ca <_dtoa_r+0x5a2>
 800a4e0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	f2c0 812c 	blt.w	800a744 <_dtoa_r+0x61c>
 800a4ec:	f1b8 0f0e 	cmp.w	r8, #14
 800a4f0:	f300 8128 	bgt.w	800a744 <_dtoa_r+0x61c>
 800a4f4:	4b91      	ldr	r3, [pc, #580]	@ (800a73c <_dtoa_r+0x614>)
 800a4f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a4fa:	ed93 6b00 	vldr	d6, [r3]
 800a4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	da03      	bge.n	800a50c <_dtoa_r+0x3e4>
 800a504:	f1ba 0f00 	cmp.w	sl, #0
 800a508:	f340 80d2 	ble.w	800a6b0 <_dtoa_r+0x588>
 800a50c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a510:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a514:	463e      	mov	r6, r7
 800a516:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a51a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a51e:	ee15 3a10 	vmov	r3, s10
 800a522:	3330      	adds	r3, #48	@ 0x30
 800a524:	f806 3b01 	strb.w	r3, [r6], #1
 800a528:	1bf3      	subs	r3, r6, r7
 800a52a:	459a      	cmp	sl, r3
 800a52c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a530:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a534:	f040 80f8 	bne.w	800a728 <_dtoa_r+0x600>
 800a538:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a53c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	f300 80dd 	bgt.w	800a702 <_dtoa_r+0x5da>
 800a548:	eeb4 7b46 	vcmp.f64	d7, d6
 800a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a550:	d104      	bne.n	800a55c <_dtoa_r+0x434>
 800a552:	ee15 3a10 	vmov	r3, s10
 800a556:	07db      	lsls	r3, r3, #31
 800a558:	f100 80d3 	bmi.w	800a702 <_dtoa_r+0x5da>
 800a55c:	9901      	ldr	r1, [sp, #4]
 800a55e:	4648      	mov	r0, r9
 800a560:	f000 fbc2 	bl	800ace8 <_Bfree>
 800a564:	2300      	movs	r3, #0
 800a566:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a568:	7033      	strb	r3, [r6, #0]
 800a56a:	f108 0301 	add.w	r3, r8, #1
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 8304 	beq.w	800ab80 <_dtoa_r+0xa58>
 800a578:	601e      	str	r6, [r3, #0]
 800a57a:	e301      	b.n	800ab80 <_dtoa_r+0xa58>
 800a57c:	2202      	movs	r2, #2
 800a57e:	e75e      	b.n	800a43e <_dtoa_r+0x316>
 800a580:	07cc      	lsls	r4, r1, #31
 800a582:	d504      	bpl.n	800a58e <_dtoa_r+0x466>
 800a584:	ed90 6b00 	vldr	d6, [r0]
 800a588:	3201      	adds	r2, #1
 800a58a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a58e:	1049      	asrs	r1, r1, #1
 800a590:	3008      	adds	r0, #8
 800a592:	e755      	b.n	800a440 <_dtoa_r+0x318>
 800a594:	d022      	beq.n	800a5dc <_dtoa_r+0x4b4>
 800a596:	f1c8 0100 	rsb	r1, r8, #0
 800a59a:	4a68      	ldr	r2, [pc, #416]	@ (800a73c <_dtoa_r+0x614>)
 800a59c:	f001 000f 	and.w	r0, r1, #15
 800a5a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a5a4:	ed92 7b00 	vldr	d7, [r2]
 800a5a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a5ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5b0:	4863      	ldr	r0, [pc, #396]	@ (800a740 <_dtoa_r+0x618>)
 800a5b2:	1109      	asrs	r1, r1, #4
 800a5b4:	2400      	movs	r4, #0
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	b929      	cbnz	r1, 800a5c6 <_dtoa_r+0x49e>
 800a5ba:	2c00      	cmp	r4, #0
 800a5bc:	f43f af49 	beq.w	800a452 <_dtoa_r+0x32a>
 800a5c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5c4:	e745      	b.n	800a452 <_dtoa_r+0x32a>
 800a5c6:	07ce      	lsls	r6, r1, #31
 800a5c8:	d505      	bpl.n	800a5d6 <_dtoa_r+0x4ae>
 800a5ca:	ed90 6b00 	vldr	d6, [r0]
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	2401      	movs	r4, #1
 800a5d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5d6:	1049      	asrs	r1, r1, #1
 800a5d8:	3008      	adds	r0, #8
 800a5da:	e7ed      	b.n	800a5b8 <_dtoa_r+0x490>
 800a5dc:	2202      	movs	r2, #2
 800a5de:	e738      	b.n	800a452 <_dtoa_r+0x32a>
 800a5e0:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5e4:	4654      	mov	r4, sl
 800a5e6:	e754      	b.n	800a492 <_dtoa_r+0x36a>
 800a5e8:	4a54      	ldr	r2, [pc, #336]	@ (800a73c <_dtoa_r+0x614>)
 800a5ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a5ee:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a5f2:	9a08      	ldr	r2, [sp, #32]
 800a5f4:	ec41 0b17 	vmov	d7, r0, r1
 800a5f8:	443c      	add	r4, r7
 800a5fa:	b34a      	cbz	r2, 800a650 <_dtoa_r+0x528>
 800a5fc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a600:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a604:	463e      	mov	r6, r7
 800a606:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a60a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a60e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a612:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a616:	ee14 2a90 	vmov	r2, s9
 800a61a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a61e:	3230      	adds	r2, #48	@ 0x30
 800a620:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a624:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62c:	f806 2b01 	strb.w	r2, [r6], #1
 800a630:	d438      	bmi.n	800a6a4 <_dtoa_r+0x57c>
 800a632:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a636:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63e:	d462      	bmi.n	800a706 <_dtoa_r+0x5de>
 800a640:	42a6      	cmp	r6, r4
 800a642:	f43f af4d 	beq.w	800a4e0 <_dtoa_r+0x3b8>
 800a646:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a64a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a64e:	e7e0      	b.n	800a612 <_dtoa_r+0x4ea>
 800a650:	4621      	mov	r1, r4
 800a652:	463e      	mov	r6, r7
 800a654:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a658:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a65c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a660:	ee14 2a90 	vmov	r2, s9
 800a664:	3230      	adds	r2, #48	@ 0x30
 800a666:	f806 2b01 	strb.w	r2, [r6], #1
 800a66a:	42a6      	cmp	r6, r4
 800a66c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a670:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a674:	d119      	bne.n	800a6aa <_dtoa_r+0x582>
 800a676:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a67a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a67e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a686:	dc3e      	bgt.n	800a706 <_dtoa_r+0x5de>
 800a688:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a68c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a694:	f57f af24 	bpl.w	800a4e0 <_dtoa_r+0x3b8>
 800a698:	460e      	mov	r6, r1
 800a69a:	3901      	subs	r1, #1
 800a69c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6a0:	2b30      	cmp	r3, #48	@ 0x30
 800a6a2:	d0f9      	beq.n	800a698 <_dtoa_r+0x570>
 800a6a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6a8:	e758      	b.n	800a55c <_dtoa_r+0x434>
 800a6aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a6ae:	e7d5      	b.n	800a65c <_dtoa_r+0x534>
 800a6b0:	d10b      	bne.n	800a6ca <_dtoa_r+0x5a2>
 800a6b2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a6b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a6ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c6:	f2c0 8161 	blt.w	800a98c <_dtoa_r+0x864>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	4625      	mov	r5, r4
 800a6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	463e      	mov	r6, r7
 800a6d6:	f04f 0800 	mov.w	r8, #0
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4648      	mov	r0, r9
 800a6de:	f000 fb03 	bl	800ace8 <_Bfree>
 800a6e2:	2d00      	cmp	r5, #0
 800a6e4:	d0de      	beq.n	800a6a4 <_dtoa_r+0x57c>
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	d005      	beq.n	800a6f8 <_dtoa_r+0x5d0>
 800a6ec:	45a8      	cmp	r8, r5
 800a6ee:	d003      	beq.n	800a6f8 <_dtoa_r+0x5d0>
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	4648      	mov	r0, r9
 800a6f4:	f000 faf8 	bl	800ace8 <_Bfree>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4648      	mov	r0, r9
 800a6fc:	f000 faf4 	bl	800ace8 <_Bfree>
 800a700:	e7d0      	b.n	800a6a4 <_dtoa_r+0x57c>
 800a702:	f8cd 8010 	str.w	r8, [sp, #16]
 800a706:	4633      	mov	r3, r6
 800a708:	461e      	mov	r6, r3
 800a70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a70e:	2a39      	cmp	r2, #57	@ 0x39
 800a710:	d106      	bne.n	800a720 <_dtoa_r+0x5f8>
 800a712:	429f      	cmp	r7, r3
 800a714:	d1f8      	bne.n	800a708 <_dtoa_r+0x5e0>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	3201      	adds	r2, #1
 800a71a:	9204      	str	r2, [sp, #16]
 800a71c:	2230      	movs	r2, #48	@ 0x30
 800a71e:	703a      	strb	r2, [r7, #0]
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	3201      	adds	r2, #1
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	e7bd      	b.n	800a6a4 <_dtoa_r+0x57c>
 800a728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a72c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	f47f aeef 	bne.w	800a516 <_dtoa_r+0x3ee>
 800a738:	e710      	b.n	800a55c <_dtoa_r+0x434>
 800a73a:	bf00      	nop
 800a73c:	0800d7a8 	.word	0x0800d7a8
 800a740:	0800d780 	.word	0x0800d780
 800a744:	9908      	ldr	r1, [sp, #32]
 800a746:	2900      	cmp	r1, #0
 800a748:	f000 80e3 	beq.w	800a912 <_dtoa_r+0x7ea>
 800a74c:	9907      	ldr	r1, [sp, #28]
 800a74e:	2901      	cmp	r1, #1
 800a750:	f300 80c8 	bgt.w	800a8e4 <_dtoa_r+0x7bc>
 800a754:	2d00      	cmp	r5, #0
 800a756:	f000 80c1 	beq.w	800a8dc <_dtoa_r+0x7b4>
 800a75a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a75e:	9e05      	ldr	r6, [sp, #20]
 800a760:	461c      	mov	r4, r3
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9b05      	ldr	r3, [sp, #20]
 800a766:	4413      	add	r3, r2
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	9b06      	ldr	r3, [sp, #24]
 800a76c:	2101      	movs	r1, #1
 800a76e:	4413      	add	r3, r2
 800a770:	4648      	mov	r0, r9
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	f000 fbb6 	bl	800aee4 <__i2b>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	4605      	mov	r5, r0
 800a77c:	b166      	cbz	r6, 800a798 <_dtoa_r+0x670>
 800a77e:	9a06      	ldr	r2, [sp, #24]
 800a780:	2a00      	cmp	r2, #0
 800a782:	dd09      	ble.n	800a798 <_dtoa_r+0x670>
 800a784:	42b2      	cmp	r2, r6
 800a786:	9905      	ldr	r1, [sp, #20]
 800a788:	bfa8      	it	ge
 800a78a:	4632      	movge	r2, r6
 800a78c:	1a89      	subs	r1, r1, r2
 800a78e:	9105      	str	r1, [sp, #20]
 800a790:	9906      	ldr	r1, [sp, #24]
 800a792:	1ab6      	subs	r6, r6, r2
 800a794:	1a8a      	subs	r2, r1, r2
 800a796:	9206      	str	r2, [sp, #24]
 800a798:	b1fb      	cbz	r3, 800a7da <_dtoa_r+0x6b2>
 800a79a:	9a08      	ldr	r2, [sp, #32]
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	f000 80bc 	beq.w	800a91a <_dtoa_r+0x7f2>
 800a7a2:	b19c      	cbz	r4, 800a7cc <_dtoa_r+0x6a4>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	4648      	mov	r0, r9
 800a7aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7ac:	f000 fc5a 	bl	800b064 <__pow5mult>
 800a7b0:	9a01      	ldr	r2, [sp, #4]
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f000 fbaa 	bl	800af10 <__multiply>
 800a7bc:	9901      	ldr	r1, [sp, #4]
 800a7be:	9004      	str	r0, [sp, #16]
 800a7c0:	4648      	mov	r0, r9
 800a7c2:	f000 fa91 	bl	800ace8 <_Bfree>
 800a7c6:	9a04      	ldr	r2, [sp, #16]
 800a7c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7ca:	9201      	str	r2, [sp, #4]
 800a7cc:	1b1a      	subs	r2, r3, r4
 800a7ce:	d004      	beq.n	800a7da <_dtoa_r+0x6b2>
 800a7d0:	9901      	ldr	r1, [sp, #4]
 800a7d2:	4648      	mov	r0, r9
 800a7d4:	f000 fc46 	bl	800b064 <__pow5mult>
 800a7d8:	9001      	str	r0, [sp, #4]
 800a7da:	2101      	movs	r1, #1
 800a7dc:	4648      	mov	r0, r9
 800a7de:	f000 fb81 	bl	800aee4 <__i2b>
 800a7e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 81d0 	beq.w	800ab8c <_dtoa_r+0xa64>
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	4648      	mov	r0, r9
 800a7f2:	f000 fc37 	bl	800b064 <__pow5mult>
 800a7f6:	9b07      	ldr	r3, [sp, #28]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	f300 8095 	bgt.w	800a92a <_dtoa_r+0x802>
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 808b 	bne.w	800a91e <_dtoa_r+0x7f6>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a80e:	2a00      	cmp	r2, #0
 800a810:	f040 8087 	bne.w	800a922 <_dtoa_r+0x7fa>
 800a814:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a818:	0d12      	lsrs	r2, r2, #20
 800a81a:	0512      	lsls	r2, r2, #20
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	f000 8082 	beq.w	800a926 <_dtoa_r+0x7fe>
 800a822:	9b05      	ldr	r3, [sp, #20]
 800a824:	3301      	adds	r3, #1
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	3301      	adds	r3, #1
 800a82c:	9306      	str	r3, [sp, #24]
 800a82e:	2301      	movs	r3, #1
 800a830:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 81af 	beq.w	800ab98 <_dtoa_r+0xa70>
 800a83a:	6922      	ldr	r2, [r4, #16]
 800a83c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a840:	6910      	ldr	r0, [r2, #16]
 800a842:	f000 fb03 	bl	800ae4c <__hi0bits>
 800a846:	f1c0 0020 	rsb	r0, r0, #32
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	4418      	add	r0, r3
 800a84e:	f010 001f 	ands.w	r0, r0, #31
 800a852:	d076      	beq.n	800a942 <_dtoa_r+0x81a>
 800a854:	f1c0 0220 	rsb	r2, r0, #32
 800a858:	2a04      	cmp	r2, #4
 800a85a:	dd69      	ble.n	800a930 <_dtoa_r+0x808>
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	f1c0 001c 	rsb	r0, r0, #28
 800a862:	4403      	add	r3, r0
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	4406      	add	r6, r0
 800a86a:	4403      	add	r3, r0
 800a86c:	9306      	str	r3, [sp, #24]
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd05      	ble.n	800a880 <_dtoa_r+0x758>
 800a874:	9901      	ldr	r1, [sp, #4]
 800a876:	461a      	mov	r2, r3
 800a878:	4648      	mov	r0, r9
 800a87a:	f000 fc4d 	bl	800b118 <__lshift>
 800a87e:	9001      	str	r0, [sp, #4]
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	dd05      	ble.n	800a892 <_dtoa_r+0x76a>
 800a886:	4621      	mov	r1, r4
 800a888:	461a      	mov	r2, r3
 800a88a:	4648      	mov	r0, r9
 800a88c:	f000 fc44 	bl	800b118 <__lshift>
 800a890:	4604      	mov	r4, r0
 800a892:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a894:	2b00      	cmp	r3, #0
 800a896:	d056      	beq.n	800a946 <_dtoa_r+0x81e>
 800a898:	9801      	ldr	r0, [sp, #4]
 800a89a:	4621      	mov	r1, r4
 800a89c:	f000 fca8 	bl	800b1f0 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	da50      	bge.n	800a946 <_dtoa_r+0x81e>
 800a8a4:	f108 33ff 	add.w	r3, r8, #4294967295
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9901      	ldr	r1, [sp, #4]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	220a      	movs	r2, #10
 800a8b0:	4648      	mov	r0, r9
 800a8b2:	f000 fa3b 	bl	800ad2c <__multadd>
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	9001      	str	r0, [sp, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 816e 	beq.w	800ab9c <_dtoa_r+0xa74>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	4648      	mov	r0, r9
 800a8c8:	f000 fa30 	bl	800ad2c <__multadd>
 800a8cc:	f1bb 0f00 	cmp.w	fp, #0
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	dc64      	bgt.n	800a99e <_dtoa_r+0x876>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc3e      	bgt.n	800a958 <_dtoa_r+0x830>
 800a8da:	e060      	b.n	800a99e <_dtoa_r+0x876>
 800a8dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a8e2:	e73c      	b.n	800a75e <_dtoa_r+0x636>
 800a8e4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	bfbf      	itttt	lt
 800a8ec:	1ae2      	sublt	r2, r4, r3
 800a8ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8f0:	189b      	addlt	r3, r3, r2
 800a8f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a8f4:	bfae      	itee	ge
 800a8f6:	1b1c      	subge	r4, r3, r4
 800a8f8:	4623      	movlt	r3, r4
 800a8fa:	2400      	movlt	r4, #0
 800a8fc:	f1ba 0f00 	cmp.w	sl, #0
 800a900:	bfb5      	itete	lt
 800a902:	9a05      	ldrlt	r2, [sp, #20]
 800a904:	9e05      	ldrge	r6, [sp, #20]
 800a906:	eba2 060a 	sublt.w	r6, r2, sl
 800a90a:	4652      	movge	r2, sl
 800a90c:	bfb8      	it	lt
 800a90e:	2200      	movlt	r2, #0
 800a910:	e727      	b.n	800a762 <_dtoa_r+0x63a>
 800a912:	9e05      	ldr	r6, [sp, #20]
 800a914:	9d08      	ldr	r5, [sp, #32]
 800a916:	461c      	mov	r4, r3
 800a918:	e730      	b.n	800a77c <_dtoa_r+0x654>
 800a91a:	461a      	mov	r2, r3
 800a91c:	e758      	b.n	800a7d0 <_dtoa_r+0x6a8>
 800a91e:	2300      	movs	r3, #0
 800a920:	e786      	b.n	800a830 <_dtoa_r+0x708>
 800a922:	9b02      	ldr	r3, [sp, #8]
 800a924:	e784      	b.n	800a830 <_dtoa_r+0x708>
 800a926:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a928:	e783      	b.n	800a832 <_dtoa_r+0x70a>
 800a92a:	2300      	movs	r3, #0
 800a92c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a92e:	e784      	b.n	800a83a <_dtoa_r+0x712>
 800a930:	d09d      	beq.n	800a86e <_dtoa_r+0x746>
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	321c      	adds	r2, #28
 800a936:	4413      	add	r3, r2
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	4416      	add	r6, r2
 800a93e:	4413      	add	r3, r2
 800a940:	e794      	b.n	800a86c <_dtoa_r+0x744>
 800a942:	4602      	mov	r2, r0
 800a944:	e7f5      	b.n	800a932 <_dtoa_r+0x80a>
 800a946:	f1ba 0f00 	cmp.w	sl, #0
 800a94a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a94e:	46d3      	mov	fp, sl
 800a950:	dc21      	bgt.n	800a996 <_dtoa_r+0x86e>
 800a952:	9b07      	ldr	r3, [sp, #28]
 800a954:	2b02      	cmp	r3, #2
 800a956:	dd1e      	ble.n	800a996 <_dtoa_r+0x86e>
 800a958:	f1bb 0f00 	cmp.w	fp, #0
 800a95c:	f47f aeb7 	bne.w	800a6ce <_dtoa_r+0x5a6>
 800a960:	4621      	mov	r1, r4
 800a962:	465b      	mov	r3, fp
 800a964:	2205      	movs	r2, #5
 800a966:	4648      	mov	r0, r9
 800a968:	f000 f9e0 	bl	800ad2c <__multadd>
 800a96c:	4601      	mov	r1, r0
 800a96e:	4604      	mov	r4, r0
 800a970:	9801      	ldr	r0, [sp, #4]
 800a972:	f000 fc3d 	bl	800b1f0 <__mcmp>
 800a976:	2800      	cmp	r0, #0
 800a978:	f77f aea9 	ble.w	800a6ce <_dtoa_r+0x5a6>
 800a97c:	463e      	mov	r6, r7
 800a97e:	2331      	movs	r3, #49	@ 0x31
 800a980:	f806 3b01 	strb.w	r3, [r6], #1
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	3301      	adds	r3, #1
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	e6a4      	b.n	800a6d6 <_dtoa_r+0x5ae>
 800a98c:	f8cd 8010 	str.w	r8, [sp, #16]
 800a990:	4654      	mov	r4, sl
 800a992:	4625      	mov	r5, r4
 800a994:	e7f2      	b.n	800a97c <_dtoa_r+0x854>
 800a996:	9b08      	ldr	r3, [sp, #32]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 8103 	beq.w	800aba4 <_dtoa_r+0xa7c>
 800a99e:	2e00      	cmp	r6, #0
 800a9a0:	dd05      	ble.n	800a9ae <_dtoa_r+0x886>
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	f000 fbb6 	bl	800b118 <__lshift>
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d058      	beq.n	800aa66 <_dtoa_r+0x93e>
 800a9b4:	6869      	ldr	r1, [r5, #4]
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	f000 f956 	bl	800ac68 <_Balloc>
 800a9bc:	4606      	mov	r6, r0
 800a9be:	b928      	cbnz	r0, 800a9cc <_dtoa_r+0x8a4>
 800a9c0:	4b82      	ldr	r3, [pc, #520]	@ (800abcc <_dtoa_r+0xaa4>)
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9c8:	f7ff bbc7 	b.w	800a15a <_dtoa_r+0x32>
 800a9cc:	692a      	ldr	r2, [r5, #16]
 800a9ce:	3202      	adds	r2, #2
 800a9d0:	0092      	lsls	r2, r2, #2
 800a9d2:	f105 010c 	add.w	r1, r5, #12
 800a9d6:	300c      	adds	r0, #12
 800a9d8:	f7ff fb01 	bl	8009fde <memcpy>
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4648      	mov	r0, r9
 800a9e2:	f000 fb99 	bl	800b118 <__lshift>
 800a9e6:	1c7b      	adds	r3, r7, #1
 800a9e8:	9305      	str	r3, [sp, #20]
 800a9ea:	eb07 030b 	add.w	r3, r7, fp
 800a9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	46a8      	mov	r8, r5
 800a9f8:	9308      	str	r3, [sp, #32]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	9801      	ldr	r0, [sp, #4]
 800aa00:	4621      	mov	r1, r4
 800aa02:	f103 3bff 	add.w	fp, r3, #4294967295
 800aa06:	f7ff fb06 	bl	800a016 <quorem>
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	9002      	str	r0, [sp, #8]
 800aa0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800aa12:	9801      	ldr	r0, [sp, #4]
 800aa14:	f000 fbec 	bl	800b1f0 <__mcmp>
 800aa18:	462a      	mov	r2, r5
 800aa1a:	9006      	str	r0, [sp, #24]
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4648      	mov	r0, r9
 800aa20:	f000 fc02 	bl	800b228 <__mdiff>
 800aa24:	68c2      	ldr	r2, [r0, #12]
 800aa26:	4606      	mov	r6, r0
 800aa28:	b9fa      	cbnz	r2, 800aa6a <_dtoa_r+0x942>
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	9801      	ldr	r0, [sp, #4]
 800aa2e:	f000 fbdf 	bl	800b1f0 <__mcmp>
 800aa32:	4602      	mov	r2, r0
 800aa34:	4631      	mov	r1, r6
 800aa36:	4648      	mov	r0, r9
 800aa38:	920a      	str	r2, [sp, #40]	@ 0x28
 800aa3a:	f000 f955 	bl	800ace8 <_Bfree>
 800aa3e:	9b07      	ldr	r3, [sp, #28]
 800aa40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa42:	9e05      	ldr	r6, [sp, #20]
 800aa44:	ea43 0102 	orr.w	r1, r3, r2
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	4319      	orrs	r1, r3
 800aa4c:	d10f      	bne.n	800aa6e <_dtoa_r+0x946>
 800aa4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa52:	d028      	beq.n	800aaa6 <_dtoa_r+0x97e>
 800aa54:	9b06      	ldr	r3, [sp, #24]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dd02      	ble.n	800aa60 <_dtoa_r+0x938>
 800aa5a:	9b02      	ldr	r3, [sp, #8]
 800aa5c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800aa60:	f88b a000 	strb.w	sl, [fp]
 800aa64:	e639      	b.n	800a6da <_dtoa_r+0x5b2>
 800aa66:	4628      	mov	r0, r5
 800aa68:	e7bd      	b.n	800a9e6 <_dtoa_r+0x8be>
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	e7e2      	b.n	800aa34 <_dtoa_r+0x90c>
 800aa6e:	9b06      	ldr	r3, [sp, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	db04      	blt.n	800aa7e <_dtoa_r+0x956>
 800aa74:	9907      	ldr	r1, [sp, #28]
 800aa76:	430b      	orrs	r3, r1
 800aa78:	9908      	ldr	r1, [sp, #32]
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	d120      	bne.n	800aac0 <_dtoa_r+0x998>
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	ddee      	ble.n	800aa60 <_dtoa_r+0x938>
 800aa82:	9901      	ldr	r1, [sp, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	4648      	mov	r0, r9
 800aa88:	f000 fb46 	bl	800b118 <__lshift>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	9001      	str	r0, [sp, #4]
 800aa90:	f000 fbae 	bl	800b1f0 <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dc03      	bgt.n	800aaa0 <_dtoa_r+0x978>
 800aa98:	d1e2      	bne.n	800aa60 <_dtoa_r+0x938>
 800aa9a:	f01a 0f01 	tst.w	sl, #1
 800aa9e:	d0df      	beq.n	800aa60 <_dtoa_r+0x938>
 800aaa0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aaa4:	d1d9      	bne.n	800aa5a <_dtoa_r+0x932>
 800aaa6:	2339      	movs	r3, #57	@ 0x39
 800aaa8:	f88b 3000 	strb.w	r3, [fp]
 800aaac:	4633      	mov	r3, r6
 800aaae:	461e      	mov	r6, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aab6:	2a39      	cmp	r2, #57	@ 0x39
 800aab8:	d053      	beq.n	800ab62 <_dtoa_r+0xa3a>
 800aaba:	3201      	adds	r2, #1
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	e60c      	b.n	800a6da <_dtoa_r+0x5b2>
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	dd07      	ble.n	800aad4 <_dtoa_r+0x9ac>
 800aac4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aac8:	d0ed      	beq.n	800aaa6 <_dtoa_r+0x97e>
 800aaca:	f10a 0301 	add.w	r3, sl, #1
 800aace:	f88b 3000 	strb.w	r3, [fp]
 800aad2:	e602      	b.n	800a6da <_dtoa_r+0x5b2>
 800aad4:	9b05      	ldr	r3, [sp, #20]
 800aad6:	9a05      	ldr	r2, [sp, #20]
 800aad8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800aadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aade:	4293      	cmp	r3, r2
 800aae0:	d029      	beq.n	800ab36 <_dtoa_r+0xa0e>
 800aae2:	9901      	ldr	r1, [sp, #4]
 800aae4:	2300      	movs	r3, #0
 800aae6:	220a      	movs	r2, #10
 800aae8:	4648      	mov	r0, r9
 800aaea:	f000 f91f 	bl	800ad2c <__multadd>
 800aaee:	45a8      	cmp	r8, r5
 800aaf0:	9001      	str	r0, [sp, #4]
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f04f 020a 	mov.w	r2, #10
 800aafa:	4641      	mov	r1, r8
 800aafc:	4648      	mov	r0, r9
 800aafe:	d107      	bne.n	800ab10 <_dtoa_r+0x9e8>
 800ab00:	f000 f914 	bl	800ad2c <__multadd>
 800ab04:	4680      	mov	r8, r0
 800ab06:	4605      	mov	r5, r0
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	e775      	b.n	800a9fc <_dtoa_r+0x8d4>
 800ab10:	f000 f90c 	bl	800ad2c <__multadd>
 800ab14:	4629      	mov	r1, r5
 800ab16:	4680      	mov	r8, r0
 800ab18:	2300      	movs	r3, #0
 800ab1a:	220a      	movs	r2, #10
 800ab1c:	4648      	mov	r0, r9
 800ab1e:	f000 f905 	bl	800ad2c <__multadd>
 800ab22:	4605      	mov	r5, r0
 800ab24:	e7f0      	b.n	800ab08 <_dtoa_r+0x9e0>
 800ab26:	f1bb 0f00 	cmp.w	fp, #0
 800ab2a:	bfcc      	ite	gt
 800ab2c:	465e      	movgt	r6, fp
 800ab2e:	2601      	movle	r6, #1
 800ab30:	443e      	add	r6, r7
 800ab32:	f04f 0800 	mov.w	r8, #0
 800ab36:	9901      	ldr	r1, [sp, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	4648      	mov	r0, r9
 800ab3c:	f000 faec 	bl	800b118 <__lshift>
 800ab40:	4621      	mov	r1, r4
 800ab42:	9001      	str	r0, [sp, #4]
 800ab44:	f000 fb54 	bl	800b1f0 <__mcmp>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	dcaf      	bgt.n	800aaac <_dtoa_r+0x984>
 800ab4c:	d102      	bne.n	800ab54 <_dtoa_r+0xa2c>
 800ab4e:	f01a 0f01 	tst.w	sl, #1
 800ab52:	d1ab      	bne.n	800aaac <_dtoa_r+0x984>
 800ab54:	4633      	mov	r3, r6
 800ab56:	461e      	mov	r6, r3
 800ab58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab5c:	2a30      	cmp	r2, #48	@ 0x30
 800ab5e:	d0fa      	beq.n	800ab56 <_dtoa_r+0xa2e>
 800ab60:	e5bb      	b.n	800a6da <_dtoa_r+0x5b2>
 800ab62:	429f      	cmp	r7, r3
 800ab64:	d1a3      	bne.n	800aaae <_dtoa_r+0x986>
 800ab66:	9b04      	ldr	r3, [sp, #16]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	9304      	str	r3, [sp, #16]
 800ab6c:	2331      	movs	r3, #49	@ 0x31
 800ab6e:	703b      	strb	r3, [r7, #0]
 800ab70:	e5b3      	b.n	800a6da <_dtoa_r+0x5b2>
 800ab72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab74:	4f16      	ldr	r7, [pc, #88]	@ (800abd0 <_dtoa_r+0xaa8>)
 800ab76:	b11b      	cbz	r3, 800ab80 <_dtoa_r+0xa58>
 800ab78:	f107 0308 	add.w	r3, r7, #8
 800ab7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	4638      	mov	r0, r7
 800ab82:	b011      	add	sp, #68	@ 0x44
 800ab84:	ecbd 8b02 	vpop	{d8}
 800ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	9b07      	ldr	r3, [sp, #28]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	f77f ae36 	ble.w	800a800 <_dtoa_r+0x6d8>
 800ab94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab98:	2001      	movs	r0, #1
 800ab9a:	e656      	b.n	800a84a <_dtoa_r+0x722>
 800ab9c:	f1bb 0f00 	cmp.w	fp, #0
 800aba0:	f77f aed7 	ble.w	800a952 <_dtoa_r+0x82a>
 800aba4:	463e      	mov	r6, r7
 800aba6:	9801      	ldr	r0, [sp, #4]
 800aba8:	4621      	mov	r1, r4
 800abaa:	f7ff fa34 	bl	800a016 <quorem>
 800abae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800abb2:	f806 ab01 	strb.w	sl, [r6], #1
 800abb6:	1bf2      	subs	r2, r6, r7
 800abb8:	4593      	cmp	fp, r2
 800abba:	ddb4      	ble.n	800ab26 <_dtoa_r+0x9fe>
 800abbc:	9901      	ldr	r1, [sp, #4]
 800abbe:	2300      	movs	r3, #0
 800abc0:	220a      	movs	r2, #10
 800abc2:	4648      	mov	r0, r9
 800abc4:	f000 f8b2 	bl	800ad2c <__multadd>
 800abc8:	9001      	str	r0, [sp, #4]
 800abca:	e7ec      	b.n	800aba6 <_dtoa_r+0xa7e>
 800abcc:	0800d704 	.word	0x0800d704
 800abd0:	0800d688 	.word	0x0800d688

0800abd4 <_free_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4605      	mov	r5, r0
 800abd8:	2900      	cmp	r1, #0
 800abda:	d041      	beq.n	800ac60 <_free_r+0x8c>
 800abdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe0:	1f0c      	subs	r4, r1, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bfb8      	it	lt
 800abe6:	18e4      	addlt	r4, r4, r3
 800abe8:	f7fe f9c0 	bl	8008f6c <__malloc_lock>
 800abec:	4a1d      	ldr	r2, [pc, #116]	@ (800ac64 <_free_r+0x90>)
 800abee:	6813      	ldr	r3, [r2, #0]
 800abf0:	b933      	cbnz	r3, 800ac00 <_free_r+0x2c>
 800abf2:	6063      	str	r3, [r4, #4]
 800abf4:	6014      	str	r4, [r2, #0]
 800abf6:	4628      	mov	r0, r5
 800abf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfc:	f7fe b9bc 	b.w	8008f78 <__malloc_unlock>
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d908      	bls.n	800ac16 <_free_r+0x42>
 800ac04:	6820      	ldr	r0, [r4, #0]
 800ac06:	1821      	adds	r1, r4, r0
 800ac08:	428b      	cmp	r3, r1
 800ac0a:	bf01      	itttt	eq
 800ac0c:	6819      	ldreq	r1, [r3, #0]
 800ac0e:	685b      	ldreq	r3, [r3, #4]
 800ac10:	1809      	addeq	r1, r1, r0
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	e7ed      	b.n	800abf2 <_free_r+0x1e>
 800ac16:	461a      	mov	r2, r3
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	b10b      	cbz	r3, 800ac20 <_free_r+0x4c>
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	d9fa      	bls.n	800ac16 <_free_r+0x42>
 800ac20:	6811      	ldr	r1, [r2, #0]
 800ac22:	1850      	adds	r0, r2, r1
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d10b      	bne.n	800ac40 <_free_r+0x6c>
 800ac28:	6820      	ldr	r0, [r4, #0]
 800ac2a:	4401      	add	r1, r0
 800ac2c:	1850      	adds	r0, r2, r1
 800ac2e:	4283      	cmp	r3, r0
 800ac30:	6011      	str	r1, [r2, #0]
 800ac32:	d1e0      	bne.n	800abf6 <_free_r+0x22>
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	6053      	str	r3, [r2, #4]
 800ac3a:	4408      	add	r0, r1
 800ac3c:	6010      	str	r0, [r2, #0]
 800ac3e:	e7da      	b.n	800abf6 <_free_r+0x22>
 800ac40:	d902      	bls.n	800ac48 <_free_r+0x74>
 800ac42:	230c      	movs	r3, #12
 800ac44:	602b      	str	r3, [r5, #0]
 800ac46:	e7d6      	b.n	800abf6 <_free_r+0x22>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	1821      	adds	r1, r4, r0
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf04      	itt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	bf04      	itt	eq
 800ac58:	1809      	addeq	r1, r1, r0
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	6054      	str	r4, [r2, #4]
 800ac5e:	e7ca      	b.n	800abf6 <_free_r+0x22>
 800ac60:	bd38      	pop	{r3, r4, r5, pc}
 800ac62:	bf00      	nop
 800ac64:	24004d74 	.word	0x24004d74

0800ac68 <_Balloc>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	69c6      	ldr	r6, [r0, #28]
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	b976      	cbnz	r6, 800ac90 <_Balloc+0x28>
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7fe f8c8 	bl	8008e08 <malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	61e0      	str	r0, [r4, #28]
 800ac7c:	b920      	cbnz	r0, 800ac88 <_Balloc+0x20>
 800ac7e:	4b18      	ldr	r3, [pc, #96]	@ (800ace0 <_Balloc+0x78>)
 800ac80:	4818      	ldr	r0, [pc, #96]	@ (800ace4 <_Balloc+0x7c>)
 800ac82:	216b      	movs	r1, #107	@ 0x6b
 800ac84:	f7fe f8a2 	bl	8008dcc <__assert_func>
 800ac88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac8c:	6006      	str	r6, [r0, #0]
 800ac8e:	60c6      	str	r6, [r0, #12]
 800ac90:	69e6      	ldr	r6, [r4, #28]
 800ac92:	68f3      	ldr	r3, [r6, #12]
 800ac94:	b183      	cbz	r3, 800acb8 <_Balloc+0x50>
 800ac96:	69e3      	ldr	r3, [r4, #28]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac9e:	b9b8      	cbnz	r0, 800acd0 <_Balloc+0x68>
 800aca0:	2101      	movs	r1, #1
 800aca2:	fa01 f605 	lsl.w	r6, r1, r5
 800aca6:	1d72      	adds	r2, r6, #5
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	4620      	mov	r0, r4
 800acac:	f001 ff00 	bl	800cab0 <_calloc_r>
 800acb0:	b160      	cbz	r0, 800accc <_Balloc+0x64>
 800acb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acb6:	e00e      	b.n	800acd6 <_Balloc+0x6e>
 800acb8:	2221      	movs	r2, #33	@ 0x21
 800acba:	2104      	movs	r1, #4
 800acbc:	4620      	mov	r0, r4
 800acbe:	f001 fef7 	bl	800cab0 <_calloc_r>
 800acc2:	69e3      	ldr	r3, [r4, #28]
 800acc4:	60f0      	str	r0, [r6, #12]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e4      	bne.n	800ac96 <_Balloc+0x2e>
 800accc:	2000      	movs	r0, #0
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	6802      	ldr	r2, [r0, #0]
 800acd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acd6:	2300      	movs	r3, #0
 800acd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acdc:	e7f7      	b.n	800acce <_Balloc+0x66>
 800acde:	bf00      	nop
 800ace0:	0800d695 	.word	0x0800d695
 800ace4:	0800d715 	.word	0x0800d715

0800ace8 <_Bfree>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	69c6      	ldr	r6, [r0, #28]
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	b976      	cbnz	r6, 800ad10 <_Bfree+0x28>
 800acf2:	2010      	movs	r0, #16
 800acf4:	f7fe f888 	bl	8008e08 <malloc>
 800acf8:	4602      	mov	r2, r0
 800acfa:	61e8      	str	r0, [r5, #28]
 800acfc:	b920      	cbnz	r0, 800ad08 <_Bfree+0x20>
 800acfe:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <_Bfree+0x3c>)
 800ad00:	4809      	ldr	r0, [pc, #36]	@ (800ad28 <_Bfree+0x40>)
 800ad02:	218f      	movs	r1, #143	@ 0x8f
 800ad04:	f7fe f862 	bl	8008dcc <__assert_func>
 800ad08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad0c:	6006      	str	r6, [r0, #0]
 800ad0e:	60c6      	str	r6, [r0, #12]
 800ad10:	b13c      	cbz	r4, 800ad22 <_Bfree+0x3a>
 800ad12:	69eb      	ldr	r3, [r5, #28]
 800ad14:	6862      	ldr	r2, [r4, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad1c:	6021      	str	r1, [r4, #0]
 800ad1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	0800d695 	.word	0x0800d695
 800ad28:	0800d715 	.word	0x0800d715

0800ad2c <__multadd>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	690d      	ldr	r5, [r1, #16]
 800ad32:	4607      	mov	r7, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	461e      	mov	r6, r3
 800ad38:	f101 0c14 	add.w	ip, r1, #20
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad42:	b299      	uxth	r1, r3
 800ad44:	fb02 6101 	mla	r1, r2, r1, r6
 800ad48:	0c1e      	lsrs	r6, r3, #16
 800ad4a:	0c0b      	lsrs	r3, r1, #16
 800ad4c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad50:	b289      	uxth	r1, r1
 800ad52:	3001      	adds	r0, #1
 800ad54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad58:	4285      	cmp	r5, r0
 800ad5a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad62:	dcec      	bgt.n	800ad3e <__multadd+0x12>
 800ad64:	b30e      	cbz	r6, 800adaa <__multadd+0x7e>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dc19      	bgt.n	800ada0 <__multadd+0x74>
 800ad6c:	6861      	ldr	r1, [r4, #4]
 800ad6e:	4638      	mov	r0, r7
 800ad70:	3101      	adds	r1, #1
 800ad72:	f7ff ff79 	bl	800ac68 <_Balloc>
 800ad76:	4680      	mov	r8, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <__multadd+0x5a>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	@ (800adb0 <__multadd+0x84>)
 800ad7e:	480d      	ldr	r0, [pc, #52]	@ (800adb4 <__multadd+0x88>)
 800ad80:	21ba      	movs	r1, #186	@ 0xba
 800ad82:	f7fe f823 	bl	8008dcc <__assert_func>
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	3202      	adds	r2, #2
 800ad8a:	f104 010c 	add.w	r1, r4, #12
 800ad8e:	0092      	lsls	r2, r2, #2
 800ad90:	300c      	adds	r0, #12
 800ad92:	f7ff f924 	bl	8009fde <memcpy>
 800ad96:	4621      	mov	r1, r4
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff ffa5 	bl	800ace8 <_Bfree>
 800ad9e:	4644      	mov	r4, r8
 800ada0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ada4:	3501      	adds	r5, #1
 800ada6:	615e      	str	r6, [r3, #20]
 800ada8:	6125      	str	r5, [r4, #16]
 800adaa:	4620      	mov	r0, r4
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	0800d704 	.word	0x0800d704
 800adb4:	0800d715 	.word	0x0800d715

0800adb8 <__s2b>:
 800adb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adbc:	460c      	mov	r4, r1
 800adbe:	4615      	mov	r5, r2
 800adc0:	461f      	mov	r7, r3
 800adc2:	2209      	movs	r2, #9
 800adc4:	3308      	adds	r3, #8
 800adc6:	4606      	mov	r6, r0
 800adc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800adcc:	2100      	movs	r1, #0
 800adce:	2201      	movs	r2, #1
 800add0:	429a      	cmp	r2, r3
 800add2:	db09      	blt.n	800ade8 <__s2b+0x30>
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ff47 	bl	800ac68 <_Balloc>
 800adda:	b940      	cbnz	r0, 800adee <__s2b+0x36>
 800addc:	4602      	mov	r2, r0
 800adde:	4b19      	ldr	r3, [pc, #100]	@ (800ae44 <__s2b+0x8c>)
 800ade0:	4819      	ldr	r0, [pc, #100]	@ (800ae48 <__s2b+0x90>)
 800ade2:	21d3      	movs	r1, #211	@ 0xd3
 800ade4:	f7fd fff2 	bl	8008dcc <__assert_func>
 800ade8:	0052      	lsls	r2, r2, #1
 800adea:	3101      	adds	r1, #1
 800adec:	e7f0      	b.n	800add0 <__s2b+0x18>
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	6143      	str	r3, [r0, #20]
 800adf2:	2d09      	cmp	r5, #9
 800adf4:	f04f 0301 	mov.w	r3, #1
 800adf8:	6103      	str	r3, [r0, #16]
 800adfa:	dd16      	ble.n	800ae2a <__s2b+0x72>
 800adfc:	f104 0909 	add.w	r9, r4, #9
 800ae00:	46c8      	mov	r8, r9
 800ae02:	442c      	add	r4, r5
 800ae04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae08:	4601      	mov	r1, r0
 800ae0a:	3b30      	subs	r3, #48	@ 0x30
 800ae0c:	220a      	movs	r2, #10
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ff8c 	bl	800ad2c <__multadd>
 800ae14:	45a0      	cmp	r8, r4
 800ae16:	d1f5      	bne.n	800ae04 <__s2b+0x4c>
 800ae18:	f1a5 0408 	sub.w	r4, r5, #8
 800ae1c:	444c      	add	r4, r9
 800ae1e:	1b2d      	subs	r5, r5, r4
 800ae20:	1963      	adds	r3, r4, r5
 800ae22:	42bb      	cmp	r3, r7
 800ae24:	db04      	blt.n	800ae30 <__s2b+0x78>
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	340a      	adds	r4, #10
 800ae2c:	2509      	movs	r5, #9
 800ae2e:	e7f6      	b.n	800ae1e <__s2b+0x66>
 800ae30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae34:	4601      	mov	r1, r0
 800ae36:	3b30      	subs	r3, #48	@ 0x30
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff76 	bl	800ad2c <__multadd>
 800ae40:	e7ee      	b.n	800ae20 <__s2b+0x68>
 800ae42:	bf00      	nop
 800ae44:	0800d704 	.word	0x0800d704
 800ae48:	0800d715 	.word	0x0800d715

0800ae4c <__hi0bits>:
 800ae4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae50:	4603      	mov	r3, r0
 800ae52:	bf36      	itet	cc
 800ae54:	0403      	lslcc	r3, r0, #16
 800ae56:	2000      	movcs	r0, #0
 800ae58:	2010      	movcc	r0, #16
 800ae5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae5e:	bf3c      	itt	cc
 800ae60:	021b      	lslcc	r3, r3, #8
 800ae62:	3008      	addcc	r0, #8
 800ae64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae68:	bf3c      	itt	cc
 800ae6a:	011b      	lslcc	r3, r3, #4
 800ae6c:	3004      	addcc	r0, #4
 800ae6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae72:	bf3c      	itt	cc
 800ae74:	009b      	lslcc	r3, r3, #2
 800ae76:	3002      	addcc	r0, #2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	db05      	blt.n	800ae88 <__hi0bits+0x3c>
 800ae7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae80:	f100 0001 	add.w	r0, r0, #1
 800ae84:	bf08      	it	eq
 800ae86:	2020      	moveq	r0, #32
 800ae88:	4770      	bx	lr

0800ae8a <__lo0bits>:
 800ae8a:	6803      	ldr	r3, [r0, #0]
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	f013 0007 	ands.w	r0, r3, #7
 800ae92:	d00b      	beq.n	800aeac <__lo0bits+0x22>
 800ae94:	07d9      	lsls	r1, r3, #31
 800ae96:	d421      	bmi.n	800aedc <__lo0bits+0x52>
 800ae98:	0798      	lsls	r0, r3, #30
 800ae9a:	bf49      	itett	mi
 800ae9c:	085b      	lsrmi	r3, r3, #1
 800ae9e:	089b      	lsrpl	r3, r3, #2
 800aea0:	2001      	movmi	r0, #1
 800aea2:	6013      	strmi	r3, [r2, #0]
 800aea4:	bf5c      	itt	pl
 800aea6:	6013      	strpl	r3, [r2, #0]
 800aea8:	2002      	movpl	r0, #2
 800aeaa:	4770      	bx	lr
 800aeac:	b299      	uxth	r1, r3
 800aeae:	b909      	cbnz	r1, 800aeb4 <__lo0bits+0x2a>
 800aeb0:	0c1b      	lsrs	r3, r3, #16
 800aeb2:	2010      	movs	r0, #16
 800aeb4:	b2d9      	uxtb	r1, r3
 800aeb6:	b909      	cbnz	r1, 800aebc <__lo0bits+0x32>
 800aeb8:	3008      	adds	r0, #8
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	0719      	lsls	r1, r3, #28
 800aebe:	bf04      	itt	eq
 800aec0:	091b      	lsreq	r3, r3, #4
 800aec2:	3004      	addeq	r0, #4
 800aec4:	0799      	lsls	r1, r3, #30
 800aec6:	bf04      	itt	eq
 800aec8:	089b      	lsreq	r3, r3, #2
 800aeca:	3002      	addeq	r0, #2
 800aecc:	07d9      	lsls	r1, r3, #31
 800aece:	d403      	bmi.n	800aed8 <__lo0bits+0x4e>
 800aed0:	085b      	lsrs	r3, r3, #1
 800aed2:	f100 0001 	add.w	r0, r0, #1
 800aed6:	d003      	beq.n	800aee0 <__lo0bits+0x56>
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	4770      	bx	lr
 800aedc:	2000      	movs	r0, #0
 800aede:	4770      	bx	lr
 800aee0:	2020      	movs	r0, #32
 800aee2:	4770      	bx	lr

0800aee4 <__i2b>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	460c      	mov	r4, r1
 800aee8:	2101      	movs	r1, #1
 800aeea:	f7ff febd 	bl	800ac68 <_Balloc>
 800aeee:	4602      	mov	r2, r0
 800aef0:	b928      	cbnz	r0, 800aefe <__i2b+0x1a>
 800aef2:	4b05      	ldr	r3, [pc, #20]	@ (800af08 <__i2b+0x24>)
 800aef4:	4805      	ldr	r0, [pc, #20]	@ (800af0c <__i2b+0x28>)
 800aef6:	f240 1145 	movw	r1, #325	@ 0x145
 800aefa:	f7fd ff67 	bl	8008dcc <__assert_func>
 800aefe:	2301      	movs	r3, #1
 800af00:	6144      	str	r4, [r0, #20]
 800af02:	6103      	str	r3, [r0, #16]
 800af04:	bd10      	pop	{r4, pc}
 800af06:	bf00      	nop
 800af08:	0800d704 	.word	0x0800d704
 800af0c:	0800d715 	.word	0x0800d715

0800af10 <__multiply>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4614      	mov	r4, r2
 800af16:	690a      	ldr	r2, [r1, #16]
 800af18:	6923      	ldr	r3, [r4, #16]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	bfa8      	it	ge
 800af1e:	4623      	movge	r3, r4
 800af20:	460f      	mov	r7, r1
 800af22:	bfa4      	itt	ge
 800af24:	460c      	movge	r4, r1
 800af26:	461f      	movge	r7, r3
 800af28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	6861      	ldr	r1, [r4, #4]
 800af34:	eb0a 0609 	add.w	r6, sl, r9
 800af38:	42b3      	cmp	r3, r6
 800af3a:	b085      	sub	sp, #20
 800af3c:	bfb8      	it	lt
 800af3e:	3101      	addlt	r1, #1
 800af40:	f7ff fe92 	bl	800ac68 <_Balloc>
 800af44:	b930      	cbnz	r0, 800af54 <__multiply+0x44>
 800af46:	4602      	mov	r2, r0
 800af48:	4b44      	ldr	r3, [pc, #272]	@ (800b05c <__multiply+0x14c>)
 800af4a:	4845      	ldr	r0, [pc, #276]	@ (800b060 <__multiply+0x150>)
 800af4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af50:	f7fd ff3c 	bl	8008dcc <__assert_func>
 800af54:	f100 0514 	add.w	r5, r0, #20
 800af58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af5c:	462b      	mov	r3, r5
 800af5e:	2200      	movs	r2, #0
 800af60:	4543      	cmp	r3, r8
 800af62:	d321      	bcc.n	800afa8 <__multiply+0x98>
 800af64:	f107 0114 	add.w	r1, r7, #20
 800af68:	f104 0214 	add.w	r2, r4, #20
 800af6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af74:	9302      	str	r3, [sp, #8]
 800af76:	1b13      	subs	r3, r2, r4
 800af78:	3b15      	subs	r3, #21
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	3304      	adds	r3, #4
 800af80:	f104 0715 	add.w	r7, r4, #21
 800af84:	42ba      	cmp	r2, r7
 800af86:	bf38      	it	cc
 800af88:	2304      	movcc	r3, #4
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	9103      	str	r1, [sp, #12]
 800af90:	428b      	cmp	r3, r1
 800af92:	d80c      	bhi.n	800afae <__multiply+0x9e>
 800af94:	2e00      	cmp	r6, #0
 800af96:	dd03      	ble.n	800afa0 <__multiply+0x90>
 800af98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d05b      	beq.n	800b058 <__multiply+0x148>
 800afa0:	6106      	str	r6, [r0, #16]
 800afa2:	b005      	add	sp, #20
 800afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa8:	f843 2b04 	str.w	r2, [r3], #4
 800afac:	e7d8      	b.n	800af60 <__multiply+0x50>
 800afae:	f8b1 a000 	ldrh.w	sl, [r1]
 800afb2:	f1ba 0f00 	cmp.w	sl, #0
 800afb6:	d024      	beq.n	800b002 <__multiply+0xf2>
 800afb8:	f104 0e14 	add.w	lr, r4, #20
 800afbc:	46a9      	mov	r9, r5
 800afbe:	f04f 0c00 	mov.w	ip, #0
 800afc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afc6:	f8d9 3000 	ldr.w	r3, [r9]
 800afca:	fa1f fb87 	uxth.w	fp, r7
 800afce:	b29b      	uxth	r3, r3
 800afd0:	fb0a 330b 	mla	r3, sl, fp, r3
 800afd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afd8:	f8d9 7000 	ldr.w	r7, [r9]
 800afdc:	4463      	add	r3, ip
 800afde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afe2:	fb0a c70b 	mla	r7, sl, fp, ip
 800afe6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afea:	b29b      	uxth	r3, r3
 800afec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aff0:	4572      	cmp	r2, lr
 800aff2:	f849 3b04 	str.w	r3, [r9], #4
 800aff6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800affa:	d8e2      	bhi.n	800afc2 <__multiply+0xb2>
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	f845 c003 	str.w	ip, [r5, r3]
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b008:	3104      	adds	r1, #4
 800b00a:	f1b9 0f00 	cmp.w	r9, #0
 800b00e:	d021      	beq.n	800b054 <__multiply+0x144>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	f104 0c14 	add.w	ip, r4, #20
 800b016:	46ae      	mov	lr, r5
 800b018:	f04f 0a00 	mov.w	sl, #0
 800b01c:	f8bc b000 	ldrh.w	fp, [ip]
 800b020:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b024:	fb09 770b 	mla	r7, r9, fp, r7
 800b028:	4457      	add	r7, sl
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b030:	f84e 3b04 	str.w	r3, [lr], #4
 800b034:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b03c:	f8be 3000 	ldrh.w	r3, [lr]
 800b040:	fb09 330a 	mla	r3, r9, sl, r3
 800b044:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b048:	4562      	cmp	r2, ip
 800b04a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b04e:	d8e5      	bhi.n	800b01c <__multiply+0x10c>
 800b050:	9f01      	ldr	r7, [sp, #4]
 800b052:	51eb      	str	r3, [r5, r7]
 800b054:	3504      	adds	r5, #4
 800b056:	e799      	b.n	800af8c <__multiply+0x7c>
 800b058:	3e01      	subs	r6, #1
 800b05a:	e79b      	b.n	800af94 <__multiply+0x84>
 800b05c:	0800d704 	.word	0x0800d704
 800b060:	0800d715 	.word	0x0800d715

0800b064 <__pow5mult>:
 800b064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b068:	4615      	mov	r5, r2
 800b06a:	f012 0203 	ands.w	r2, r2, #3
 800b06e:	4607      	mov	r7, r0
 800b070:	460e      	mov	r6, r1
 800b072:	d007      	beq.n	800b084 <__pow5mult+0x20>
 800b074:	4c25      	ldr	r4, [pc, #148]	@ (800b10c <__pow5mult+0xa8>)
 800b076:	3a01      	subs	r2, #1
 800b078:	2300      	movs	r3, #0
 800b07a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b07e:	f7ff fe55 	bl	800ad2c <__multadd>
 800b082:	4606      	mov	r6, r0
 800b084:	10ad      	asrs	r5, r5, #2
 800b086:	d03d      	beq.n	800b104 <__pow5mult+0xa0>
 800b088:	69fc      	ldr	r4, [r7, #28]
 800b08a:	b97c      	cbnz	r4, 800b0ac <__pow5mult+0x48>
 800b08c:	2010      	movs	r0, #16
 800b08e:	f7fd febb 	bl	8008e08 <malloc>
 800b092:	4602      	mov	r2, r0
 800b094:	61f8      	str	r0, [r7, #28]
 800b096:	b928      	cbnz	r0, 800b0a4 <__pow5mult+0x40>
 800b098:	4b1d      	ldr	r3, [pc, #116]	@ (800b110 <__pow5mult+0xac>)
 800b09a:	481e      	ldr	r0, [pc, #120]	@ (800b114 <__pow5mult+0xb0>)
 800b09c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0a0:	f7fd fe94 	bl	8008dcc <__assert_func>
 800b0a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0a8:	6004      	str	r4, [r0, #0]
 800b0aa:	60c4      	str	r4, [r0, #12]
 800b0ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0b4:	b94c      	cbnz	r4, 800b0ca <__pow5mult+0x66>
 800b0b6:	f240 2171 	movw	r1, #625	@ 0x271
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f7ff ff12 	bl	800aee4 <__i2b>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	07eb      	lsls	r3, r5, #31
 800b0d0:	d50a      	bpl.n	800b0e8 <__pow5mult+0x84>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7ff ff1a 	bl	800af10 <__multiply>
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff fe01 	bl	800ace8 <_Bfree>
 800b0e6:	4646      	mov	r6, r8
 800b0e8:	106d      	asrs	r5, r5, #1
 800b0ea:	d00b      	beq.n	800b104 <__pow5mult+0xa0>
 800b0ec:	6820      	ldr	r0, [r4, #0]
 800b0ee:	b938      	cbnz	r0, 800b100 <__pow5mult+0x9c>
 800b0f0:	4622      	mov	r2, r4
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	f7ff ff0b 	bl	800af10 <__multiply>
 800b0fa:	6020      	str	r0, [r4, #0]
 800b0fc:	f8c0 9000 	str.w	r9, [r0]
 800b100:	4604      	mov	r4, r0
 800b102:	e7e4      	b.n	800b0ce <__pow5mult+0x6a>
 800b104:	4630      	mov	r0, r6
 800b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10a:	bf00      	nop
 800b10c:	0800d770 	.word	0x0800d770
 800b110:	0800d695 	.word	0x0800d695
 800b114:	0800d715 	.word	0x0800d715

0800b118 <__lshift>:
 800b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	460c      	mov	r4, r1
 800b11e:	6849      	ldr	r1, [r1, #4]
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	4607      	mov	r7, r0
 800b12a:	4691      	mov	r9, r2
 800b12c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b130:	f108 0601 	add.w	r6, r8, #1
 800b134:	42b3      	cmp	r3, r6
 800b136:	db0b      	blt.n	800b150 <__lshift+0x38>
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff fd95 	bl	800ac68 <_Balloc>
 800b13e:	4605      	mov	r5, r0
 800b140:	b948      	cbnz	r0, 800b156 <__lshift+0x3e>
 800b142:	4602      	mov	r2, r0
 800b144:	4b28      	ldr	r3, [pc, #160]	@ (800b1e8 <__lshift+0xd0>)
 800b146:	4829      	ldr	r0, [pc, #164]	@ (800b1ec <__lshift+0xd4>)
 800b148:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b14c:	f7fd fe3e 	bl	8008dcc <__assert_func>
 800b150:	3101      	adds	r1, #1
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	e7ee      	b.n	800b134 <__lshift+0x1c>
 800b156:	2300      	movs	r3, #0
 800b158:	f100 0114 	add.w	r1, r0, #20
 800b15c:	f100 0210 	add.w	r2, r0, #16
 800b160:	4618      	mov	r0, r3
 800b162:	4553      	cmp	r3, sl
 800b164:	db33      	blt.n	800b1ce <__lshift+0xb6>
 800b166:	6920      	ldr	r0, [r4, #16]
 800b168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b16c:	f104 0314 	add.w	r3, r4, #20
 800b170:	f019 091f 	ands.w	r9, r9, #31
 800b174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b17c:	d02b      	beq.n	800b1d6 <__lshift+0xbe>
 800b17e:	f1c9 0e20 	rsb	lr, r9, #32
 800b182:	468a      	mov	sl, r1
 800b184:	2200      	movs	r2, #0
 800b186:	6818      	ldr	r0, [r3, #0]
 800b188:	fa00 f009 	lsl.w	r0, r0, r9
 800b18c:	4310      	orrs	r0, r2
 800b18e:	f84a 0b04 	str.w	r0, [sl], #4
 800b192:	f853 2b04 	ldr.w	r2, [r3], #4
 800b196:	459c      	cmp	ip, r3
 800b198:	fa22 f20e 	lsr.w	r2, r2, lr
 800b19c:	d8f3      	bhi.n	800b186 <__lshift+0x6e>
 800b19e:	ebac 0304 	sub.w	r3, ip, r4
 800b1a2:	3b15      	subs	r3, #21
 800b1a4:	f023 0303 	bic.w	r3, r3, #3
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	f104 0015 	add.w	r0, r4, #21
 800b1ae:	4584      	cmp	ip, r0
 800b1b0:	bf38      	it	cc
 800b1b2:	2304      	movcc	r3, #4
 800b1b4:	50ca      	str	r2, [r1, r3]
 800b1b6:	b10a      	cbz	r2, 800b1bc <__lshift+0xa4>
 800b1b8:	f108 0602 	add.w	r6, r8, #2
 800b1bc:	3e01      	subs	r6, #1
 800b1be:	4638      	mov	r0, r7
 800b1c0:	612e      	str	r6, [r5, #16]
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	f7ff fd90 	bl	800ace8 <_Bfree>
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	e7c5      	b.n	800b162 <__lshift+0x4a>
 800b1d6:	3904      	subs	r1, #4
 800b1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1e0:	459c      	cmp	ip, r3
 800b1e2:	d8f9      	bhi.n	800b1d8 <__lshift+0xc0>
 800b1e4:	e7ea      	b.n	800b1bc <__lshift+0xa4>
 800b1e6:	bf00      	nop
 800b1e8:	0800d704 	.word	0x0800d704
 800b1ec:	0800d715 	.word	0x0800d715

0800b1f0 <__mcmp>:
 800b1f0:	690a      	ldr	r2, [r1, #16]
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	6900      	ldr	r0, [r0, #16]
 800b1f6:	1a80      	subs	r0, r0, r2
 800b1f8:	b530      	push	{r4, r5, lr}
 800b1fa:	d10e      	bne.n	800b21a <__mcmp+0x2a>
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	3114      	adds	r1, #20
 800b200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b20c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b210:	4295      	cmp	r5, r2
 800b212:	d003      	beq.n	800b21c <__mcmp+0x2c>
 800b214:	d205      	bcs.n	800b222 <__mcmp+0x32>
 800b216:	f04f 30ff 	mov.w	r0, #4294967295
 800b21a:	bd30      	pop	{r4, r5, pc}
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d3f3      	bcc.n	800b208 <__mcmp+0x18>
 800b220:	e7fb      	b.n	800b21a <__mcmp+0x2a>
 800b222:	2001      	movs	r0, #1
 800b224:	e7f9      	b.n	800b21a <__mcmp+0x2a>
	...

0800b228 <__mdiff>:
 800b228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	4689      	mov	r9, r1
 800b22e:	4606      	mov	r6, r0
 800b230:	4611      	mov	r1, r2
 800b232:	4648      	mov	r0, r9
 800b234:	4614      	mov	r4, r2
 800b236:	f7ff ffdb 	bl	800b1f0 <__mcmp>
 800b23a:	1e05      	subs	r5, r0, #0
 800b23c:	d112      	bne.n	800b264 <__mdiff+0x3c>
 800b23e:	4629      	mov	r1, r5
 800b240:	4630      	mov	r0, r6
 800b242:	f7ff fd11 	bl	800ac68 <_Balloc>
 800b246:	4602      	mov	r2, r0
 800b248:	b928      	cbnz	r0, 800b256 <__mdiff+0x2e>
 800b24a:	4b3f      	ldr	r3, [pc, #252]	@ (800b348 <__mdiff+0x120>)
 800b24c:	f240 2137 	movw	r1, #567	@ 0x237
 800b250:	483e      	ldr	r0, [pc, #248]	@ (800b34c <__mdiff+0x124>)
 800b252:	f7fd fdbb 	bl	8008dcc <__assert_func>
 800b256:	2301      	movs	r3, #1
 800b258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b25c:	4610      	mov	r0, r2
 800b25e:	b003      	add	sp, #12
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	bfbc      	itt	lt
 800b266:	464b      	movlt	r3, r9
 800b268:	46a1      	movlt	r9, r4
 800b26a:	4630      	mov	r0, r6
 800b26c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b270:	bfba      	itte	lt
 800b272:	461c      	movlt	r4, r3
 800b274:	2501      	movlt	r5, #1
 800b276:	2500      	movge	r5, #0
 800b278:	f7ff fcf6 	bl	800ac68 <_Balloc>
 800b27c:	4602      	mov	r2, r0
 800b27e:	b918      	cbnz	r0, 800b288 <__mdiff+0x60>
 800b280:	4b31      	ldr	r3, [pc, #196]	@ (800b348 <__mdiff+0x120>)
 800b282:	f240 2145 	movw	r1, #581	@ 0x245
 800b286:	e7e3      	b.n	800b250 <__mdiff+0x28>
 800b288:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b28c:	6926      	ldr	r6, [r4, #16]
 800b28e:	60c5      	str	r5, [r0, #12]
 800b290:	f109 0310 	add.w	r3, r9, #16
 800b294:	f109 0514 	add.w	r5, r9, #20
 800b298:	f104 0e14 	add.w	lr, r4, #20
 800b29c:	f100 0b14 	add.w	fp, r0, #20
 800b2a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	46d9      	mov	r9, fp
 800b2ac:	f04f 0c00 	mov.w	ip, #0
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	fa1f f38a 	uxth.w	r3, sl
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	b283      	uxth	r3, r0
 800b2c4:	1acb      	subs	r3, r1, r3
 800b2c6:	0c00      	lsrs	r0, r0, #16
 800b2c8:	4463      	add	r3, ip
 800b2ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2d8:	4576      	cmp	r6, lr
 800b2da:	f849 3b04 	str.w	r3, [r9], #4
 800b2de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2e2:	d8e5      	bhi.n	800b2b0 <__mdiff+0x88>
 800b2e4:	1b33      	subs	r3, r6, r4
 800b2e6:	3b15      	subs	r3, #21
 800b2e8:	f023 0303 	bic.w	r3, r3, #3
 800b2ec:	3415      	adds	r4, #21
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	42a6      	cmp	r6, r4
 800b2f2:	bf38      	it	cc
 800b2f4:	2304      	movcc	r3, #4
 800b2f6:	441d      	add	r5, r3
 800b2f8:	445b      	add	r3, fp
 800b2fa:	461e      	mov	r6, r3
 800b2fc:	462c      	mov	r4, r5
 800b2fe:	4544      	cmp	r4, r8
 800b300:	d30e      	bcc.n	800b320 <__mdiff+0xf8>
 800b302:	f108 0103 	add.w	r1, r8, #3
 800b306:	1b49      	subs	r1, r1, r5
 800b308:	f021 0103 	bic.w	r1, r1, #3
 800b30c:	3d03      	subs	r5, #3
 800b30e:	45a8      	cmp	r8, r5
 800b310:	bf38      	it	cc
 800b312:	2100      	movcc	r1, #0
 800b314:	440b      	add	r3, r1
 800b316:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b31a:	b191      	cbz	r1, 800b342 <__mdiff+0x11a>
 800b31c:	6117      	str	r7, [r2, #16]
 800b31e:	e79d      	b.n	800b25c <__mdiff+0x34>
 800b320:	f854 1b04 	ldr.w	r1, [r4], #4
 800b324:	46e6      	mov	lr, ip
 800b326:	0c08      	lsrs	r0, r1, #16
 800b328:	fa1c fc81 	uxtah	ip, ip, r1
 800b32c:	4471      	add	r1, lr
 800b32e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b332:	b289      	uxth	r1, r1
 800b334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b338:	f846 1b04 	str.w	r1, [r6], #4
 800b33c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b340:	e7dd      	b.n	800b2fe <__mdiff+0xd6>
 800b342:	3f01      	subs	r7, #1
 800b344:	e7e7      	b.n	800b316 <__mdiff+0xee>
 800b346:	bf00      	nop
 800b348:	0800d704 	.word	0x0800d704
 800b34c:	0800d715 	.word	0x0800d715

0800b350 <__ulp>:
 800b350:	b082      	sub	sp, #8
 800b352:	ed8d 0b00 	vstr	d0, [sp]
 800b356:	9a01      	ldr	r2, [sp, #4]
 800b358:	4b0f      	ldr	r3, [pc, #60]	@ (800b398 <__ulp+0x48>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b360:	2b00      	cmp	r3, #0
 800b362:	dc08      	bgt.n	800b376 <__ulp+0x26>
 800b364:	425b      	negs	r3, r3
 800b366:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b36a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b36e:	da04      	bge.n	800b37a <__ulp+0x2a>
 800b370:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b374:	4113      	asrs	r3, r2
 800b376:	2200      	movs	r2, #0
 800b378:	e008      	b.n	800b38c <__ulp+0x3c>
 800b37a:	f1a2 0314 	sub.w	r3, r2, #20
 800b37e:	2b1e      	cmp	r3, #30
 800b380:	bfda      	itte	le
 800b382:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b386:	40da      	lsrle	r2, r3
 800b388:	2201      	movgt	r2, #1
 800b38a:	2300      	movs	r3, #0
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	ec41 0b10 	vmov	d0, r0, r1
 800b394:	b002      	add	sp, #8
 800b396:	4770      	bx	lr
 800b398:	7ff00000 	.word	0x7ff00000

0800b39c <__b2d>:
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	6906      	ldr	r6, [r0, #16]
 800b3a2:	f100 0814 	add.w	r8, r0, #20
 800b3a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3aa:	1f37      	subs	r7, r6, #4
 800b3ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f7ff fd4b 	bl	800ae4c <__hi0bits>
 800b3b6:	f1c0 0320 	rsb	r3, r0, #32
 800b3ba:	280a      	cmp	r0, #10
 800b3bc:	600b      	str	r3, [r1, #0]
 800b3be:	491b      	ldr	r1, [pc, #108]	@ (800b42c <__b2d+0x90>)
 800b3c0:	dc15      	bgt.n	800b3ee <__b2d+0x52>
 800b3c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3ca:	45b8      	cmp	r8, r7
 800b3cc:	ea43 0501 	orr.w	r5, r3, r1
 800b3d0:	bf34      	ite	cc
 800b3d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3d6:	2300      	movcs	r3, #0
 800b3d8:	3015      	adds	r0, #21
 800b3da:	fa02 f000 	lsl.w	r0, r2, r0
 800b3de:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3e2:	4303      	orrs	r3, r0
 800b3e4:	461c      	mov	r4, r3
 800b3e6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ee:	45b8      	cmp	r8, r7
 800b3f0:	bf3a      	itte	cc
 800b3f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b3fa:	2300      	movcs	r3, #0
 800b3fc:	380b      	subs	r0, #11
 800b3fe:	d012      	beq.n	800b426 <__b2d+0x8a>
 800b400:	f1c0 0120 	rsb	r1, r0, #32
 800b404:	fa23 f401 	lsr.w	r4, r3, r1
 800b408:	4082      	lsls	r2, r0
 800b40a:	4322      	orrs	r2, r4
 800b40c:	4547      	cmp	r7, r8
 800b40e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b412:	bf8c      	ite	hi
 800b414:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b418:	2200      	movls	r2, #0
 800b41a:	4083      	lsls	r3, r0
 800b41c:	40ca      	lsrs	r2, r1
 800b41e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b422:	4313      	orrs	r3, r2
 800b424:	e7de      	b.n	800b3e4 <__b2d+0x48>
 800b426:	ea42 0501 	orr.w	r5, r2, r1
 800b42a:	e7db      	b.n	800b3e4 <__b2d+0x48>
 800b42c:	3ff00000 	.word	0x3ff00000

0800b430 <__d2b>:
 800b430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b434:	460f      	mov	r7, r1
 800b436:	2101      	movs	r1, #1
 800b438:	ec59 8b10 	vmov	r8, r9, d0
 800b43c:	4616      	mov	r6, r2
 800b43e:	f7ff fc13 	bl	800ac68 <_Balloc>
 800b442:	4604      	mov	r4, r0
 800b444:	b930      	cbnz	r0, 800b454 <__d2b+0x24>
 800b446:	4602      	mov	r2, r0
 800b448:	4b23      	ldr	r3, [pc, #140]	@ (800b4d8 <__d2b+0xa8>)
 800b44a:	4824      	ldr	r0, [pc, #144]	@ (800b4dc <__d2b+0xac>)
 800b44c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b450:	f7fd fcbc 	bl	8008dcc <__assert_func>
 800b454:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b45c:	b10d      	cbz	r5, 800b462 <__d2b+0x32>
 800b45e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	f1b8 0300 	subs.w	r3, r8, #0
 800b468:	d023      	beq.n	800b4b2 <__d2b+0x82>
 800b46a:	4668      	mov	r0, sp
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	f7ff fd0c 	bl	800ae8a <__lo0bits>
 800b472:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b476:	b1d0      	cbz	r0, 800b4ae <__d2b+0x7e>
 800b478:	f1c0 0320 	rsb	r3, r0, #32
 800b47c:	fa02 f303 	lsl.w	r3, r2, r3
 800b480:	430b      	orrs	r3, r1
 800b482:	40c2      	lsrs	r2, r0
 800b484:	6163      	str	r3, [r4, #20]
 800b486:	9201      	str	r2, [sp, #4]
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	61a3      	str	r3, [r4, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bf0c      	ite	eq
 800b490:	2201      	moveq	r2, #1
 800b492:	2202      	movne	r2, #2
 800b494:	6122      	str	r2, [r4, #16]
 800b496:	b1a5      	cbz	r5, 800b4c2 <__d2b+0x92>
 800b498:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b49c:	4405      	add	r5, r0
 800b49e:	603d      	str	r5, [r7, #0]
 800b4a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b4a4:	6030      	str	r0, [r6, #0]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	b003      	add	sp, #12
 800b4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ae:	6161      	str	r1, [r4, #20]
 800b4b0:	e7ea      	b.n	800b488 <__d2b+0x58>
 800b4b2:	a801      	add	r0, sp, #4
 800b4b4:	f7ff fce9 	bl	800ae8a <__lo0bits>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	6163      	str	r3, [r4, #20]
 800b4bc:	3020      	adds	r0, #32
 800b4be:	2201      	movs	r2, #1
 800b4c0:	e7e8      	b.n	800b494 <__d2b+0x64>
 800b4c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4ca:	6038      	str	r0, [r7, #0]
 800b4cc:	6918      	ldr	r0, [r3, #16]
 800b4ce:	f7ff fcbd 	bl	800ae4c <__hi0bits>
 800b4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4d6:	e7e5      	b.n	800b4a4 <__d2b+0x74>
 800b4d8:	0800d704 	.word	0x0800d704
 800b4dc:	0800d715 	.word	0x0800d715

0800b4e0 <__ratio>:
 800b4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	4688      	mov	r8, r1
 800b4e6:	4669      	mov	r1, sp
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	f7ff ff57 	bl	800b39c <__b2d>
 800b4ee:	a901      	add	r1, sp, #4
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	ec55 4b10 	vmov	r4, r5, d0
 800b4f6:	f7ff ff51 	bl	800b39c <__b2d>
 800b4fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b4fe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b502:	1ad2      	subs	r2, r2, r3
 800b504:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b508:	1a5b      	subs	r3, r3, r1
 800b50a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b50e:	ec57 6b10 	vmov	r6, r7, d0
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfd6      	itet	le
 800b516:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b51a:	462a      	movgt	r2, r5
 800b51c:	463a      	movle	r2, r7
 800b51e:	46ab      	mov	fp, r5
 800b520:	46a2      	mov	sl, r4
 800b522:	bfce      	itee	gt
 800b524:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b528:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b52c:	ee00 3a90 	vmovle	s1, r3
 800b530:	ec4b ab17 	vmov	d7, sl, fp
 800b534:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b538:	b003      	add	sp, #12
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b53e <__copybits>:
 800b53e:	3901      	subs	r1, #1
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	1149      	asrs	r1, r1, #5
 800b544:	6914      	ldr	r4, [r2, #16]
 800b546:	3101      	adds	r1, #1
 800b548:	f102 0314 	add.w	r3, r2, #20
 800b54c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b550:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b554:	1f05      	subs	r5, r0, #4
 800b556:	42a3      	cmp	r3, r4
 800b558:	d30c      	bcc.n	800b574 <__copybits+0x36>
 800b55a:	1aa3      	subs	r3, r4, r2
 800b55c:	3b11      	subs	r3, #17
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	3211      	adds	r2, #17
 800b564:	42a2      	cmp	r2, r4
 800b566:	bf88      	it	hi
 800b568:	2300      	movhi	r3, #0
 800b56a:	4418      	add	r0, r3
 800b56c:	2300      	movs	r3, #0
 800b56e:	4288      	cmp	r0, r1
 800b570:	d305      	bcc.n	800b57e <__copybits+0x40>
 800b572:	bd70      	pop	{r4, r5, r6, pc}
 800b574:	f853 6b04 	ldr.w	r6, [r3], #4
 800b578:	f845 6f04 	str.w	r6, [r5, #4]!
 800b57c:	e7eb      	b.n	800b556 <__copybits+0x18>
 800b57e:	f840 3b04 	str.w	r3, [r0], #4
 800b582:	e7f4      	b.n	800b56e <__copybits+0x30>

0800b584 <__any_on>:
 800b584:	f100 0214 	add.w	r2, r0, #20
 800b588:	6900      	ldr	r0, [r0, #16]
 800b58a:	114b      	asrs	r3, r1, #5
 800b58c:	4298      	cmp	r0, r3
 800b58e:	b510      	push	{r4, lr}
 800b590:	db11      	blt.n	800b5b6 <__any_on+0x32>
 800b592:	dd0a      	ble.n	800b5aa <__any_on+0x26>
 800b594:	f011 011f 	ands.w	r1, r1, #31
 800b598:	d007      	beq.n	800b5aa <__any_on+0x26>
 800b59a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b59e:	fa24 f001 	lsr.w	r0, r4, r1
 800b5a2:	fa00 f101 	lsl.w	r1, r0, r1
 800b5a6:	428c      	cmp	r4, r1
 800b5a8:	d10b      	bne.n	800b5c2 <__any_on+0x3e>
 800b5aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d803      	bhi.n	800b5ba <__any_on+0x36>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	e7f7      	b.n	800b5aa <__any_on+0x26>
 800b5ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d0f5      	beq.n	800b5ae <__any_on+0x2a>
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7f6      	b.n	800b5b4 <__any_on+0x30>

0800b5c6 <sulp>:
 800b5c6:	b570      	push	{r4, r5, r6, lr}
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	ec45 4b10 	vmov	d0, r4, r5
 800b5d2:	f7ff febd 	bl	800b350 <__ulp>
 800b5d6:	b17e      	cbz	r6, 800b5f8 <sulp+0x32>
 800b5d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dd09      	ble.n	800b5f8 <sulp+0x32>
 800b5e4:	051b      	lsls	r3, r3, #20
 800b5e6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b5f0:	ec41 0b17 	vmov	d7, r0, r1
 800b5f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	0000      	movs	r0, r0
 800b5fc:	0000      	movs	r0, r0
	...

0800b600 <_strtod_l>:
 800b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	ed2d 8b0a 	vpush	{d8-d12}
 800b608:	b097      	sub	sp, #92	@ 0x5c
 800b60a:	4688      	mov	r8, r1
 800b60c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b60e:	2200      	movs	r2, #0
 800b610:	9212      	str	r2, [sp, #72]	@ 0x48
 800b612:	9005      	str	r0, [sp, #20]
 800b614:	f04f 0a00 	mov.w	sl, #0
 800b618:	f04f 0b00 	mov.w	fp, #0
 800b61c:	460a      	mov	r2, r1
 800b61e:	9211      	str	r2, [sp, #68]	@ 0x44
 800b620:	7811      	ldrb	r1, [r2, #0]
 800b622:	292b      	cmp	r1, #43	@ 0x2b
 800b624:	d04c      	beq.n	800b6c0 <_strtod_l+0xc0>
 800b626:	d839      	bhi.n	800b69c <_strtod_l+0x9c>
 800b628:	290d      	cmp	r1, #13
 800b62a:	d833      	bhi.n	800b694 <_strtod_l+0x94>
 800b62c:	2908      	cmp	r1, #8
 800b62e:	d833      	bhi.n	800b698 <_strtod_l+0x98>
 800b630:	2900      	cmp	r1, #0
 800b632:	d03c      	beq.n	800b6ae <_strtod_l+0xae>
 800b634:	2200      	movs	r2, #0
 800b636:	9208      	str	r2, [sp, #32]
 800b638:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b63a:	782a      	ldrb	r2, [r5, #0]
 800b63c:	2a30      	cmp	r2, #48	@ 0x30
 800b63e:	f040 80b5 	bne.w	800b7ac <_strtod_l+0x1ac>
 800b642:	786a      	ldrb	r2, [r5, #1]
 800b644:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b648:	2a58      	cmp	r2, #88	@ 0x58
 800b64a:	d170      	bne.n	800b72e <_strtod_l+0x12e>
 800b64c:	9302      	str	r3, [sp, #8]
 800b64e:	9b08      	ldr	r3, [sp, #32]
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	ab12      	add	r3, sp, #72	@ 0x48
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	4a8b      	ldr	r2, [pc, #556]	@ (800b884 <_strtod_l+0x284>)
 800b658:	9805      	ldr	r0, [sp, #20]
 800b65a:	ab13      	add	r3, sp, #76	@ 0x4c
 800b65c:	a911      	add	r1, sp, #68	@ 0x44
 800b65e:	f001 faa3 	bl	800cba8 <__gethex>
 800b662:	f010 060f 	ands.w	r6, r0, #15
 800b666:	4604      	mov	r4, r0
 800b668:	d005      	beq.n	800b676 <_strtod_l+0x76>
 800b66a:	2e06      	cmp	r6, #6
 800b66c:	d12a      	bne.n	800b6c4 <_strtod_l+0xc4>
 800b66e:	3501      	adds	r5, #1
 800b670:	2300      	movs	r3, #0
 800b672:	9511      	str	r5, [sp, #68]	@ 0x44
 800b674:	9308      	str	r3, [sp, #32]
 800b676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f040 852f 	bne.w	800c0dc <_strtod_l+0xadc>
 800b67e:	9b08      	ldr	r3, [sp, #32]
 800b680:	ec4b ab10 	vmov	d0, sl, fp
 800b684:	b1cb      	cbz	r3, 800b6ba <_strtod_l+0xba>
 800b686:	eeb1 0b40 	vneg.f64	d0, d0
 800b68a:	b017      	add	sp, #92	@ 0x5c
 800b68c:	ecbd 8b0a 	vpop	{d8-d12}
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b694:	2920      	cmp	r1, #32
 800b696:	d1cd      	bne.n	800b634 <_strtod_l+0x34>
 800b698:	3201      	adds	r2, #1
 800b69a:	e7c0      	b.n	800b61e <_strtod_l+0x1e>
 800b69c:	292d      	cmp	r1, #45	@ 0x2d
 800b69e:	d1c9      	bne.n	800b634 <_strtod_l+0x34>
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	9108      	str	r1, [sp, #32]
 800b6a4:	1c51      	adds	r1, r2, #1
 800b6a6:	9111      	str	r1, [sp, #68]	@ 0x44
 800b6a8:	7852      	ldrb	r2, [r2, #1]
 800b6aa:	2a00      	cmp	r2, #0
 800b6ac:	d1c4      	bne.n	800b638 <_strtod_l+0x38>
 800b6ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 850f 	bne.w	800c0d8 <_strtod_l+0xad8>
 800b6ba:	ec4b ab10 	vmov	d0, sl, fp
 800b6be:	e7e4      	b.n	800b68a <_strtod_l+0x8a>
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	e7ee      	b.n	800b6a2 <_strtod_l+0xa2>
 800b6c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b6c6:	b13a      	cbz	r2, 800b6d8 <_strtod_l+0xd8>
 800b6c8:	2135      	movs	r1, #53	@ 0x35
 800b6ca:	a814      	add	r0, sp, #80	@ 0x50
 800b6cc:	f7ff ff37 	bl	800b53e <__copybits>
 800b6d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b6d2:	9805      	ldr	r0, [sp, #20]
 800b6d4:	f7ff fb08 	bl	800ace8 <_Bfree>
 800b6d8:	1e73      	subs	r3, r6, #1
 800b6da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	d806      	bhi.n	800b6ee <_strtod_l+0xee>
 800b6e0:	e8df f003 	tbb	[pc, r3]
 800b6e4:	201d0314 	.word	0x201d0314
 800b6e8:	14          	.byte	0x14
 800b6e9:	00          	.byte	0x00
 800b6ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b6ee:	05e3      	lsls	r3, r4, #23
 800b6f0:	bf48      	it	mi
 800b6f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6fa:	0d1b      	lsrs	r3, r3, #20
 800b6fc:	051b      	lsls	r3, r3, #20
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1b9      	bne.n	800b676 <_strtod_l+0x76>
 800b702:	f7fe fc3f 	bl	8009f84 <__errno>
 800b706:	2322      	movs	r3, #34	@ 0x22
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	e7b4      	b.n	800b676 <_strtod_l+0x76>
 800b70c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b71c:	e7e7      	b.n	800b6ee <_strtod_l+0xee>
 800b71e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b88c <_strtod_l+0x28c>
 800b722:	e7e4      	b.n	800b6ee <_strtod_l+0xee>
 800b724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b728:	f04f 3aff 	mov.w	sl, #4294967295
 800b72c:	e7df      	b.n	800b6ee <_strtod_l+0xee>
 800b72e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	9211      	str	r2, [sp, #68]	@ 0x44
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	2b30      	cmp	r3, #48	@ 0x30
 800b738:	d0f9      	beq.n	800b72e <_strtod_l+0x12e>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d09b      	beq.n	800b676 <_strtod_l+0x76>
 800b73e:	2301      	movs	r3, #1
 800b740:	2600      	movs	r6, #0
 800b742:	9307      	str	r3, [sp, #28]
 800b744:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b746:	930a      	str	r3, [sp, #40]	@ 0x28
 800b748:	46b1      	mov	r9, r6
 800b74a:	4635      	mov	r5, r6
 800b74c:	220a      	movs	r2, #10
 800b74e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b750:	7804      	ldrb	r4, [r0, #0]
 800b752:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b756:	b2d9      	uxtb	r1, r3
 800b758:	2909      	cmp	r1, #9
 800b75a:	d929      	bls.n	800b7b0 <_strtod_l+0x1b0>
 800b75c:	494a      	ldr	r1, [pc, #296]	@ (800b888 <_strtod_l+0x288>)
 800b75e:	2201      	movs	r2, #1
 800b760:	f7fe fb91 	bl	8009e86 <strncmp>
 800b764:	b378      	cbz	r0, 800b7c6 <_strtod_l+0x1c6>
 800b766:	2000      	movs	r0, #0
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	4607      	mov	r7, r0
 800b76e:	9006      	str	r0, [sp, #24]
 800b770:	2a65      	cmp	r2, #101	@ 0x65
 800b772:	d001      	beq.n	800b778 <_strtod_l+0x178>
 800b774:	2a45      	cmp	r2, #69	@ 0x45
 800b776:	d117      	bne.n	800b7a8 <_strtod_l+0x1a8>
 800b778:	b91b      	cbnz	r3, 800b782 <_strtod_l+0x182>
 800b77a:	9b07      	ldr	r3, [sp, #28]
 800b77c:	4303      	orrs	r3, r0
 800b77e:	d096      	beq.n	800b6ae <_strtod_l+0xae>
 800b780:	2300      	movs	r3, #0
 800b782:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b786:	f108 0201 	add.w	r2, r8, #1
 800b78a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b78c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b790:	2a2b      	cmp	r2, #43	@ 0x2b
 800b792:	d06b      	beq.n	800b86c <_strtod_l+0x26c>
 800b794:	2a2d      	cmp	r2, #45	@ 0x2d
 800b796:	d071      	beq.n	800b87c <_strtod_l+0x27c>
 800b798:	f04f 0e00 	mov.w	lr, #0
 800b79c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b7a0:	2c09      	cmp	r4, #9
 800b7a2:	d979      	bls.n	800b898 <_strtod_l+0x298>
 800b7a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	e094      	b.n	800b8d6 <_strtod_l+0x2d6>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e7c7      	b.n	800b740 <_strtod_l+0x140>
 800b7b0:	2d08      	cmp	r5, #8
 800b7b2:	f100 0001 	add.w	r0, r0, #1
 800b7b6:	bfd4      	ite	le
 800b7b8:	fb02 3909 	mlale	r9, r2, r9, r3
 800b7bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	9011      	str	r0, [sp, #68]	@ 0x44
 800b7c4:	e7c3      	b.n	800b74e <_strtod_l+0x14e>
 800b7c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800b7cc:	785a      	ldrb	r2, [r3, #1]
 800b7ce:	b375      	cbz	r5, 800b82e <_strtod_l+0x22e>
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b7d8:	2909      	cmp	r1, #9
 800b7da:	d913      	bls.n	800b804 <_strtod_l+0x204>
 800b7dc:	2101      	movs	r1, #1
 800b7de:	9106      	str	r1, [sp, #24]
 800b7e0:	e7c6      	b.n	800b770 <_strtod_l+0x170>
 800b7e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800b7e8:	785a      	ldrb	r2, [r3, #1]
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	2a30      	cmp	r2, #48	@ 0x30
 800b7ee:	d0f8      	beq.n	800b7e2 <_strtod_l+0x1e2>
 800b7f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b7f4:	2b08      	cmp	r3, #8
 800b7f6:	f200 8476 	bhi.w	800c0e6 <_strtod_l+0xae6>
 800b7fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7fe:	4607      	mov	r7, r0
 800b800:	2000      	movs	r0, #0
 800b802:	4603      	mov	r3, r0
 800b804:	3a30      	subs	r2, #48	@ 0x30
 800b806:	f100 0101 	add.w	r1, r0, #1
 800b80a:	d023      	beq.n	800b854 <_strtod_l+0x254>
 800b80c:	440f      	add	r7, r1
 800b80e:	eb00 0c03 	add.w	ip, r0, r3
 800b812:	4619      	mov	r1, r3
 800b814:	240a      	movs	r4, #10
 800b816:	4561      	cmp	r1, ip
 800b818:	d10b      	bne.n	800b832 <_strtod_l+0x232>
 800b81a:	1c5c      	adds	r4, r3, #1
 800b81c:	4403      	add	r3, r0
 800b81e:	2b08      	cmp	r3, #8
 800b820:	4404      	add	r4, r0
 800b822:	dc11      	bgt.n	800b848 <_strtod_l+0x248>
 800b824:	230a      	movs	r3, #10
 800b826:	fb03 2909 	mla	r9, r3, r9, r2
 800b82a:	2100      	movs	r1, #0
 800b82c:	e013      	b.n	800b856 <_strtod_l+0x256>
 800b82e:	4628      	mov	r0, r5
 800b830:	e7dc      	b.n	800b7ec <_strtod_l+0x1ec>
 800b832:	2908      	cmp	r1, #8
 800b834:	f101 0101 	add.w	r1, r1, #1
 800b838:	dc02      	bgt.n	800b840 <_strtod_l+0x240>
 800b83a:	fb04 f909 	mul.w	r9, r4, r9
 800b83e:	e7ea      	b.n	800b816 <_strtod_l+0x216>
 800b840:	2910      	cmp	r1, #16
 800b842:	bfd8      	it	le
 800b844:	4366      	mulle	r6, r4
 800b846:	e7e6      	b.n	800b816 <_strtod_l+0x216>
 800b848:	2b0f      	cmp	r3, #15
 800b84a:	dcee      	bgt.n	800b82a <_strtod_l+0x22a>
 800b84c:	230a      	movs	r3, #10
 800b84e:	fb03 2606 	mla	r6, r3, r6, r2
 800b852:	e7ea      	b.n	800b82a <_strtod_l+0x22a>
 800b854:	461c      	mov	r4, r3
 800b856:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b85c:	785a      	ldrb	r2, [r3, #1]
 800b85e:	4608      	mov	r0, r1
 800b860:	4623      	mov	r3, r4
 800b862:	e7b7      	b.n	800b7d4 <_strtod_l+0x1d4>
 800b864:	2301      	movs	r3, #1
 800b866:	2700      	movs	r7, #0
 800b868:	9306      	str	r3, [sp, #24]
 800b86a:	e786      	b.n	800b77a <_strtod_l+0x17a>
 800b86c:	f04f 0e00 	mov.w	lr, #0
 800b870:	f108 0202 	add.w	r2, r8, #2
 800b874:	9211      	str	r2, [sp, #68]	@ 0x44
 800b876:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b87a:	e78f      	b.n	800b79c <_strtod_l+0x19c>
 800b87c:	f04f 0e01 	mov.w	lr, #1
 800b880:	e7f6      	b.n	800b870 <_strtod_l+0x270>
 800b882:	bf00      	nop
 800b884:	0800d888 	.word	0x0800d888
 800b888:	0800d870 	.word	0x0800d870
 800b88c:	7ff00000 	.word	0x7ff00000
 800b890:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b892:	1c54      	adds	r4, r2, #1
 800b894:	9411      	str	r4, [sp, #68]	@ 0x44
 800b896:	7852      	ldrb	r2, [r2, #1]
 800b898:	2a30      	cmp	r2, #48	@ 0x30
 800b89a:	d0f9      	beq.n	800b890 <_strtod_l+0x290>
 800b89c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b8a0:	2c08      	cmp	r4, #8
 800b8a2:	d881      	bhi.n	800b7a8 <_strtod_l+0x1a8>
 800b8a4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b8a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b8ae:	1c51      	adds	r1, r2, #1
 800b8b0:	9111      	str	r1, [sp, #68]	@ 0x44
 800b8b2:	7852      	ldrb	r2, [r2, #1]
 800b8b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b8b8:	2c09      	cmp	r4, #9
 800b8ba:	d938      	bls.n	800b92e <_strtod_l+0x32e>
 800b8bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b8be:	1b0c      	subs	r4, r1, r4
 800b8c0:	2c08      	cmp	r4, #8
 800b8c2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b8c6:	dc02      	bgt.n	800b8ce <_strtod_l+0x2ce>
 800b8c8:	4564      	cmp	r4, ip
 800b8ca:	bfa8      	it	ge
 800b8cc:	4664      	movge	r4, ip
 800b8ce:	f1be 0f00 	cmp.w	lr, #0
 800b8d2:	d000      	beq.n	800b8d6 <_strtod_l+0x2d6>
 800b8d4:	4264      	negs	r4, r4
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d14e      	bne.n	800b978 <_strtod_l+0x378>
 800b8da:	9b07      	ldr	r3, [sp, #28]
 800b8dc:	4318      	orrs	r0, r3
 800b8de:	f47f aeca 	bne.w	800b676 <_strtod_l+0x76>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f47f aee2 	bne.w	800b6ae <_strtod_l+0xae>
 800b8ea:	2a69      	cmp	r2, #105	@ 0x69
 800b8ec:	d027      	beq.n	800b93e <_strtod_l+0x33e>
 800b8ee:	dc24      	bgt.n	800b93a <_strtod_l+0x33a>
 800b8f0:	2a49      	cmp	r2, #73	@ 0x49
 800b8f2:	d024      	beq.n	800b93e <_strtod_l+0x33e>
 800b8f4:	2a4e      	cmp	r2, #78	@ 0x4e
 800b8f6:	f47f aeda 	bne.w	800b6ae <_strtod_l+0xae>
 800b8fa:	4997      	ldr	r1, [pc, #604]	@ (800bb58 <_strtod_l+0x558>)
 800b8fc:	a811      	add	r0, sp, #68	@ 0x44
 800b8fe:	f001 fb75 	bl	800cfec <__match>
 800b902:	2800      	cmp	r0, #0
 800b904:	f43f aed3 	beq.w	800b6ae <_strtod_l+0xae>
 800b908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b28      	cmp	r3, #40	@ 0x28
 800b90e:	d12d      	bne.n	800b96c <_strtod_l+0x36c>
 800b910:	4992      	ldr	r1, [pc, #584]	@ (800bb5c <_strtod_l+0x55c>)
 800b912:	aa14      	add	r2, sp, #80	@ 0x50
 800b914:	a811      	add	r0, sp, #68	@ 0x44
 800b916:	f001 fb7d 	bl	800d014 <__hexnan>
 800b91a:	2805      	cmp	r0, #5
 800b91c:	d126      	bne.n	800b96c <_strtod_l+0x36c>
 800b91e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b920:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b924:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b928:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b92c:	e6a3      	b.n	800b676 <_strtod_l+0x76>
 800b92e:	240a      	movs	r4, #10
 800b930:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b934:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b938:	e7b8      	b.n	800b8ac <_strtod_l+0x2ac>
 800b93a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b93c:	e7db      	b.n	800b8f6 <_strtod_l+0x2f6>
 800b93e:	4988      	ldr	r1, [pc, #544]	@ (800bb60 <_strtod_l+0x560>)
 800b940:	a811      	add	r0, sp, #68	@ 0x44
 800b942:	f001 fb53 	bl	800cfec <__match>
 800b946:	2800      	cmp	r0, #0
 800b948:	f43f aeb1 	beq.w	800b6ae <_strtod_l+0xae>
 800b94c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b94e:	4985      	ldr	r1, [pc, #532]	@ (800bb64 <_strtod_l+0x564>)
 800b950:	3b01      	subs	r3, #1
 800b952:	a811      	add	r0, sp, #68	@ 0x44
 800b954:	9311      	str	r3, [sp, #68]	@ 0x44
 800b956:	f001 fb49 	bl	800cfec <__match>
 800b95a:	b910      	cbnz	r0, 800b962 <_strtod_l+0x362>
 800b95c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b95e:	3301      	adds	r3, #1
 800b960:	9311      	str	r3, [sp, #68]	@ 0x44
 800b962:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800bb78 <_strtod_l+0x578>
 800b966:	f04f 0a00 	mov.w	sl, #0
 800b96a:	e684      	b.n	800b676 <_strtod_l+0x76>
 800b96c:	487e      	ldr	r0, [pc, #504]	@ (800bb68 <_strtod_l+0x568>)
 800b96e:	f001 f897 	bl	800caa0 <nan>
 800b972:	ec5b ab10 	vmov	sl, fp, d0
 800b976:	e67e      	b.n	800b676 <_strtod_l+0x76>
 800b978:	ee07 9a90 	vmov	s15, r9
 800b97c:	1be2      	subs	r2, r4, r7
 800b97e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b982:	2d00      	cmp	r5, #0
 800b984:	bf08      	it	eq
 800b986:	461d      	moveq	r5, r3
 800b988:	2b10      	cmp	r3, #16
 800b98a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b98c:	461a      	mov	r2, r3
 800b98e:	bfa8      	it	ge
 800b990:	2210      	movge	r2, #16
 800b992:	2b09      	cmp	r3, #9
 800b994:	ec5b ab17 	vmov	sl, fp, d7
 800b998:	dc15      	bgt.n	800b9c6 <_strtod_l+0x3c6>
 800b99a:	1be1      	subs	r1, r4, r7
 800b99c:	2900      	cmp	r1, #0
 800b99e:	f43f ae6a 	beq.w	800b676 <_strtod_l+0x76>
 800b9a2:	eba4 0107 	sub.w	r1, r4, r7
 800b9a6:	dd72      	ble.n	800ba8e <_strtod_l+0x48e>
 800b9a8:	2916      	cmp	r1, #22
 800b9aa:	dc59      	bgt.n	800ba60 <_strtod_l+0x460>
 800b9ac:	4b6f      	ldr	r3, [pc, #444]	@ (800bb6c <_strtod_l+0x56c>)
 800b9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9b4:	ed93 7b00 	vldr	d7, [r3]
 800b9b8:	ec4b ab16 	vmov	d6, sl, fp
 800b9bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9c0:	ec5b ab17 	vmov	sl, fp, d7
 800b9c4:	e657      	b.n	800b676 <_strtod_l+0x76>
 800b9c6:	4969      	ldr	r1, [pc, #420]	@ (800bb6c <_strtod_l+0x56c>)
 800b9c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b9cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b9d0:	ee06 6a90 	vmov	s13, r6
 800b9d4:	2b0f      	cmp	r3, #15
 800b9d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b9da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b9de:	ec5b ab16 	vmov	sl, fp, d6
 800b9e2:	ddda      	ble.n	800b99a <_strtod_l+0x39a>
 800b9e4:	1a9a      	subs	r2, r3, r2
 800b9e6:	1be1      	subs	r1, r4, r7
 800b9e8:	440a      	add	r2, r1
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	f340 8094 	ble.w	800bb18 <_strtod_l+0x518>
 800b9f0:	f012 000f 	ands.w	r0, r2, #15
 800b9f4:	d00a      	beq.n	800ba0c <_strtod_l+0x40c>
 800b9f6:	495d      	ldr	r1, [pc, #372]	@ (800bb6c <_strtod_l+0x56c>)
 800b9f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b9fc:	ed91 7b00 	vldr	d7, [r1]
 800ba00:	ec4b ab16 	vmov	d6, sl, fp
 800ba04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba08:	ec5b ab17 	vmov	sl, fp, d7
 800ba0c:	f032 020f 	bics.w	r2, r2, #15
 800ba10:	d073      	beq.n	800bafa <_strtod_l+0x4fa>
 800ba12:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ba16:	dd47      	ble.n	800baa8 <_strtod_l+0x4a8>
 800ba18:	2400      	movs	r4, #0
 800ba1a:	4625      	mov	r5, r4
 800ba1c:	9407      	str	r4, [sp, #28]
 800ba1e:	4626      	mov	r6, r4
 800ba20:	9a05      	ldr	r2, [sp, #20]
 800ba22:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb78 <_strtod_l+0x578>
 800ba26:	2322      	movs	r3, #34	@ 0x22
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	f04f 0a00 	mov.w	sl, #0
 800ba2e:	9b07      	ldr	r3, [sp, #28]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f43f ae20 	beq.w	800b676 <_strtod_l+0x76>
 800ba36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	f7ff f955 	bl	800ace8 <_Bfree>
 800ba3e:	9805      	ldr	r0, [sp, #20]
 800ba40:	4631      	mov	r1, r6
 800ba42:	f7ff f951 	bl	800ace8 <_Bfree>
 800ba46:	9805      	ldr	r0, [sp, #20]
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7ff f94d 	bl	800ace8 <_Bfree>
 800ba4e:	9907      	ldr	r1, [sp, #28]
 800ba50:	9805      	ldr	r0, [sp, #20]
 800ba52:	f7ff f949 	bl	800ace8 <_Bfree>
 800ba56:	9805      	ldr	r0, [sp, #20]
 800ba58:	4621      	mov	r1, r4
 800ba5a:	f7ff f945 	bl	800ace8 <_Bfree>
 800ba5e:	e60a      	b.n	800b676 <_strtod_l+0x76>
 800ba60:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ba64:	1be0      	subs	r0, r4, r7
 800ba66:	4281      	cmp	r1, r0
 800ba68:	dbbc      	blt.n	800b9e4 <_strtod_l+0x3e4>
 800ba6a:	4a40      	ldr	r2, [pc, #256]	@ (800bb6c <_strtod_l+0x56c>)
 800ba6c:	f1c3 030f 	rsb	r3, r3, #15
 800ba70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ba74:	ed91 7b00 	vldr	d7, [r1]
 800ba78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba7a:	ec4b ab16 	vmov	d6, sl, fp
 800ba7e:	1acb      	subs	r3, r1, r3
 800ba80:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ba84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba88:	ed92 6b00 	vldr	d6, [r2]
 800ba8c:	e796      	b.n	800b9bc <_strtod_l+0x3bc>
 800ba8e:	3116      	adds	r1, #22
 800ba90:	dba8      	blt.n	800b9e4 <_strtod_l+0x3e4>
 800ba92:	4b36      	ldr	r3, [pc, #216]	@ (800bb6c <_strtod_l+0x56c>)
 800ba94:	1b3c      	subs	r4, r7, r4
 800ba96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ba9a:	ed94 7b00 	vldr	d7, [r4]
 800ba9e:	ec4b ab16 	vmov	d6, sl, fp
 800baa2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800baa6:	e78b      	b.n	800b9c0 <_strtod_l+0x3c0>
 800baa8:	2000      	movs	r0, #0
 800baaa:	ec4b ab17 	vmov	d7, sl, fp
 800baae:	4e30      	ldr	r6, [pc, #192]	@ (800bb70 <_strtod_l+0x570>)
 800bab0:	1112      	asrs	r2, r2, #4
 800bab2:	4601      	mov	r1, r0
 800bab4:	2a01      	cmp	r2, #1
 800bab6:	dc23      	bgt.n	800bb00 <_strtod_l+0x500>
 800bab8:	b108      	cbz	r0, 800babe <_strtod_l+0x4be>
 800baba:	ec5b ab17 	vmov	sl, fp, d7
 800babe:	4a2c      	ldr	r2, [pc, #176]	@ (800bb70 <_strtod_l+0x570>)
 800bac0:	482c      	ldr	r0, [pc, #176]	@ (800bb74 <_strtod_l+0x574>)
 800bac2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bac6:	ed92 7b00 	vldr	d7, [r2]
 800baca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bace:	ec4b ab16 	vmov	d6, sl, fp
 800bad2:	4a29      	ldr	r2, [pc, #164]	@ (800bb78 <_strtod_l+0x578>)
 800bad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bad8:	ee17 1a90 	vmov	r1, s15
 800badc:	400a      	ands	r2, r1
 800bade:	4282      	cmp	r2, r0
 800bae0:	ec5b ab17 	vmov	sl, fp, d7
 800bae4:	d898      	bhi.n	800ba18 <_strtod_l+0x418>
 800bae6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800baea:	4282      	cmp	r2, r0
 800baec:	bf86      	itte	hi
 800baee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bb7c <_strtod_l+0x57c>
 800baf2:	f04f 3aff 	movhi.w	sl, #4294967295
 800baf6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800bafa:	2200      	movs	r2, #0
 800bafc:	9206      	str	r2, [sp, #24]
 800bafe:	e076      	b.n	800bbee <_strtod_l+0x5ee>
 800bb00:	f012 0f01 	tst.w	r2, #1
 800bb04:	d004      	beq.n	800bb10 <_strtod_l+0x510>
 800bb06:	ed96 6b00 	vldr	d6, [r6]
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb10:	3101      	adds	r1, #1
 800bb12:	1052      	asrs	r2, r2, #1
 800bb14:	3608      	adds	r6, #8
 800bb16:	e7cd      	b.n	800bab4 <_strtod_l+0x4b4>
 800bb18:	d0ef      	beq.n	800bafa <_strtod_l+0x4fa>
 800bb1a:	4252      	negs	r2, r2
 800bb1c:	f012 000f 	ands.w	r0, r2, #15
 800bb20:	d00a      	beq.n	800bb38 <_strtod_l+0x538>
 800bb22:	4912      	ldr	r1, [pc, #72]	@ (800bb6c <_strtod_l+0x56c>)
 800bb24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bb28:	ed91 7b00 	vldr	d7, [r1]
 800bb2c:	ec4b ab16 	vmov	d6, sl, fp
 800bb30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb34:	ec5b ab17 	vmov	sl, fp, d7
 800bb38:	1112      	asrs	r2, r2, #4
 800bb3a:	d0de      	beq.n	800bafa <_strtod_l+0x4fa>
 800bb3c:	2a1f      	cmp	r2, #31
 800bb3e:	dd1f      	ble.n	800bb80 <_strtod_l+0x580>
 800bb40:	2400      	movs	r4, #0
 800bb42:	4625      	mov	r5, r4
 800bb44:	9407      	str	r4, [sp, #28]
 800bb46:	4626      	mov	r6, r4
 800bb48:	9a05      	ldr	r2, [sp, #20]
 800bb4a:	2322      	movs	r3, #34	@ 0x22
 800bb4c:	f04f 0a00 	mov.w	sl, #0
 800bb50:	f04f 0b00 	mov.w	fp, #0
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	e76a      	b.n	800ba2e <_strtod_l+0x42e>
 800bb58:	0800d65c 	.word	0x0800d65c
 800bb5c:	0800d874 	.word	0x0800d874
 800bb60:	0800d654 	.word	0x0800d654
 800bb64:	0800d68b 	.word	0x0800d68b
 800bb68:	0800d64e 	.word	0x0800d64e
 800bb6c:	0800d7a8 	.word	0x0800d7a8
 800bb70:	0800d780 	.word	0x0800d780
 800bb74:	7ca00000 	.word	0x7ca00000
 800bb78:	7ff00000 	.word	0x7ff00000
 800bb7c:	7fefffff 	.word	0x7fefffff
 800bb80:	f012 0110 	ands.w	r1, r2, #16
 800bb84:	bf18      	it	ne
 800bb86:	216a      	movne	r1, #106	@ 0x6a
 800bb88:	9106      	str	r1, [sp, #24]
 800bb8a:	ec4b ab17 	vmov	d7, sl, fp
 800bb8e:	49b0      	ldr	r1, [pc, #704]	@ (800be50 <_strtod_l+0x850>)
 800bb90:	2000      	movs	r0, #0
 800bb92:	07d6      	lsls	r6, r2, #31
 800bb94:	d504      	bpl.n	800bba0 <_strtod_l+0x5a0>
 800bb96:	ed91 6b00 	vldr	d6, [r1]
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bba0:	1052      	asrs	r2, r2, #1
 800bba2:	f101 0108 	add.w	r1, r1, #8
 800bba6:	d1f4      	bne.n	800bb92 <_strtod_l+0x592>
 800bba8:	b108      	cbz	r0, 800bbae <_strtod_l+0x5ae>
 800bbaa:	ec5b ab17 	vmov	sl, fp, d7
 800bbae:	9a06      	ldr	r2, [sp, #24]
 800bbb0:	b1b2      	cbz	r2, 800bbe0 <_strtod_l+0x5e0>
 800bbb2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800bbb6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	dd0f      	ble.n	800bbe0 <_strtod_l+0x5e0>
 800bbc0:	2a1f      	cmp	r2, #31
 800bbc2:	dd55      	ble.n	800bc70 <_strtod_l+0x670>
 800bbc4:	2a34      	cmp	r2, #52	@ 0x34
 800bbc6:	bfde      	ittt	le
 800bbc8:	f04f 32ff 	movle.w	r2, #4294967295
 800bbcc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800bbd0:	408a      	lslle	r2, r1
 800bbd2:	f04f 0a00 	mov.w	sl, #0
 800bbd6:	bfcc      	ite	gt
 800bbd8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bbdc:	ea02 0b00 	andle.w	fp, r2, r0
 800bbe0:	ec4b ab17 	vmov	d7, sl, fp
 800bbe4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbec:	d0a8      	beq.n	800bb40 <_strtod_l+0x540>
 800bbee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbf0:	9805      	ldr	r0, [sp, #20]
 800bbf2:	f8cd 9000 	str.w	r9, [sp]
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	f7ff f8de 	bl	800adb8 <__s2b>
 800bbfc:	9007      	str	r0, [sp, #28]
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f af0a 	beq.w	800ba18 <_strtod_l+0x418>
 800bc04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc06:	1b3f      	subs	r7, r7, r4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfb4      	ite	lt
 800bc0c:	463b      	movlt	r3, r7
 800bc0e:	2300      	movge	r3, #0
 800bc10:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc14:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800be40 <_strtod_l+0x840>
 800bc18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc1c:	2400      	movs	r4, #0
 800bc1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc20:	4625      	mov	r5, r4
 800bc22:	9b07      	ldr	r3, [sp, #28]
 800bc24:	9805      	ldr	r0, [sp, #20]
 800bc26:	6859      	ldr	r1, [r3, #4]
 800bc28:	f7ff f81e 	bl	800ac68 <_Balloc>
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f43f aef6 	beq.w	800ba20 <_strtod_l+0x420>
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	ec4b ab19 	vmov	d9, sl, fp
 800bc3c:	3202      	adds	r2, #2
 800bc3e:	f103 010c 	add.w	r1, r3, #12
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	300c      	adds	r0, #12
 800bc46:	f7fe f9ca 	bl	8009fde <memcpy>
 800bc4a:	eeb0 0b49 	vmov.f64	d0, d9
 800bc4e:	9805      	ldr	r0, [sp, #20]
 800bc50:	aa14      	add	r2, sp, #80	@ 0x50
 800bc52:	a913      	add	r1, sp, #76	@ 0x4c
 800bc54:	f7ff fbec 	bl	800b430 <__d2b>
 800bc58:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f43f aee0 	beq.w	800ba20 <_strtod_l+0x420>
 800bc60:	9805      	ldr	r0, [sp, #20]
 800bc62:	2101      	movs	r1, #1
 800bc64:	f7ff f93e 	bl	800aee4 <__i2b>
 800bc68:	4605      	mov	r5, r0
 800bc6a:	b940      	cbnz	r0, 800bc7e <_strtod_l+0x67e>
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	e6d7      	b.n	800ba20 <_strtod_l+0x420>
 800bc70:	f04f 31ff 	mov.w	r1, #4294967295
 800bc74:	fa01 f202 	lsl.w	r2, r1, r2
 800bc78:	ea02 0a0a 	and.w	sl, r2, sl
 800bc7c:	e7b0      	b.n	800bbe0 <_strtod_l+0x5e0>
 800bc7e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bc80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bc82:	2f00      	cmp	r7, #0
 800bc84:	bfab      	itete	ge
 800bc86:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bc88:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bc8a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bc8e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bc92:	bfac      	ite	ge
 800bc94:	eb07 0903 	addge.w	r9, r7, r3
 800bc98:	eba3 0807 	sublt.w	r8, r3, r7
 800bc9c:	9b06      	ldr	r3, [sp, #24]
 800bc9e:	1aff      	subs	r7, r7, r3
 800bca0:	4417      	add	r7, r2
 800bca2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800bca6:	4a6b      	ldr	r2, [pc, #428]	@ (800be54 <_strtod_l+0x854>)
 800bca8:	3f01      	subs	r7, #1
 800bcaa:	4297      	cmp	r7, r2
 800bcac:	da51      	bge.n	800bd52 <_strtod_l+0x752>
 800bcae:	1bd1      	subs	r1, r2, r7
 800bcb0:	291f      	cmp	r1, #31
 800bcb2:	eba3 0301 	sub.w	r3, r3, r1
 800bcb6:	f04f 0201 	mov.w	r2, #1
 800bcba:	dc3e      	bgt.n	800bd3a <_strtod_l+0x73a>
 800bcbc:	408a      	lsls	r2, r1
 800bcbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bcc4:	eb09 0703 	add.w	r7, r9, r3
 800bcc8:	4498      	add	r8, r3
 800bcca:	9b06      	ldr	r3, [sp, #24]
 800bccc:	45b9      	cmp	r9, r7
 800bcce:	4498      	add	r8, r3
 800bcd0:	464b      	mov	r3, r9
 800bcd2:	bfa8      	it	ge
 800bcd4:	463b      	movge	r3, r7
 800bcd6:	4543      	cmp	r3, r8
 800bcd8:	bfa8      	it	ge
 800bcda:	4643      	movge	r3, r8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfc2      	ittt	gt
 800bce0:	1aff      	subgt	r7, r7, r3
 800bce2:	eba8 0803 	subgt.w	r8, r8, r3
 800bce6:	eba9 0903 	subgt.w	r9, r9, r3
 800bcea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dd16      	ble.n	800bd1e <_strtod_l+0x71e>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	9805      	ldr	r0, [sp, #20]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	f7ff f9b5 	bl	800b064 <__pow5mult>
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d0b5      	beq.n	800bc6c <_strtod_l+0x66c>
 800bd00:	4601      	mov	r1, r0
 800bd02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd04:	9805      	ldr	r0, [sp, #20]
 800bd06:	f7ff f903 	bl	800af10 <__multiply>
 800bd0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f43f ae87 	beq.w	800ba20 <_strtod_l+0x420>
 800bd12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd14:	9805      	ldr	r0, [sp, #20]
 800bd16:	f7fe ffe7 	bl	800ace8 <_Bfree>
 800bd1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd1c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	dc1b      	bgt.n	800bd5a <_strtod_l+0x75a>
 800bd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	dd21      	ble.n	800bd6c <_strtod_l+0x76c>
 800bd28:	4631      	mov	r1, r6
 800bd2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd2c:	9805      	ldr	r0, [sp, #20]
 800bd2e:	f7ff f999 	bl	800b064 <__pow5mult>
 800bd32:	4606      	mov	r6, r0
 800bd34:	b9d0      	cbnz	r0, 800bd6c <_strtod_l+0x76c>
 800bd36:	2600      	movs	r6, #0
 800bd38:	e672      	b.n	800ba20 <_strtod_l+0x420>
 800bd3a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800bd3e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800bd42:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800bd46:	37e2      	adds	r7, #226	@ 0xe2
 800bd48:	fa02 f107 	lsl.w	r1, r2, r7
 800bd4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd50:	e7b8      	b.n	800bcc4 <_strtod_l+0x6c4>
 800bd52:	2200      	movs	r2, #0
 800bd54:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd56:	2201      	movs	r2, #1
 800bd58:	e7f9      	b.n	800bd4e <_strtod_l+0x74e>
 800bd5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd5c:	9805      	ldr	r0, [sp, #20]
 800bd5e:	463a      	mov	r2, r7
 800bd60:	f7ff f9da 	bl	800b118 <__lshift>
 800bd64:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d1db      	bne.n	800bd22 <_strtod_l+0x722>
 800bd6a:	e659      	b.n	800ba20 <_strtod_l+0x420>
 800bd6c:	f1b8 0f00 	cmp.w	r8, #0
 800bd70:	dd07      	ble.n	800bd82 <_strtod_l+0x782>
 800bd72:	4631      	mov	r1, r6
 800bd74:	9805      	ldr	r0, [sp, #20]
 800bd76:	4642      	mov	r2, r8
 800bd78:	f7ff f9ce 	bl	800b118 <__lshift>
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0d9      	beq.n	800bd36 <_strtod_l+0x736>
 800bd82:	f1b9 0f00 	cmp.w	r9, #0
 800bd86:	dd08      	ble.n	800bd9a <_strtod_l+0x79a>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	9805      	ldr	r0, [sp, #20]
 800bd8c:	464a      	mov	r2, r9
 800bd8e:	f7ff f9c3 	bl	800b118 <__lshift>
 800bd92:	4605      	mov	r5, r0
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f43f ae43 	beq.w	800ba20 <_strtod_l+0x420>
 800bd9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd9c:	9805      	ldr	r0, [sp, #20]
 800bd9e:	4632      	mov	r2, r6
 800bda0:	f7ff fa42 	bl	800b228 <__mdiff>
 800bda4:	4604      	mov	r4, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f43f ae3a 	beq.w	800ba20 <_strtod_l+0x420>
 800bdac:	2300      	movs	r3, #0
 800bdae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800bdb2:	60c3      	str	r3, [r0, #12]
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	f7ff fa1b 	bl	800b1f0 <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	da4e      	bge.n	800be5c <_strtod_l+0x85c>
 800bdbe:	ea58 080a 	orrs.w	r8, r8, sl
 800bdc2:	d174      	bne.n	800beae <_strtod_l+0x8ae>
 800bdc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d170      	bne.n	800beae <_strtod_l+0x8ae>
 800bdcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdd0:	0d1b      	lsrs	r3, r3, #20
 800bdd2:	051b      	lsls	r3, r3, #20
 800bdd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdd8:	d969      	bls.n	800beae <_strtod_l+0x8ae>
 800bdda:	6963      	ldr	r3, [r4, #20]
 800bddc:	b913      	cbnz	r3, 800bde4 <_strtod_l+0x7e4>
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	dd64      	ble.n	800beae <_strtod_l+0x8ae>
 800bde4:	4621      	mov	r1, r4
 800bde6:	2201      	movs	r2, #1
 800bde8:	9805      	ldr	r0, [sp, #20]
 800bdea:	f7ff f995 	bl	800b118 <__lshift>
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	f7ff f9fd 	bl	800b1f0 <__mcmp>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	dd59      	ble.n	800beae <_strtod_l+0x8ae>
 800bdfa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdfe:	9a06      	ldr	r2, [sp, #24]
 800be00:	0d1b      	lsrs	r3, r3, #20
 800be02:	051b      	lsls	r3, r3, #20
 800be04:	2a00      	cmp	r2, #0
 800be06:	d070      	beq.n	800beea <_strtod_l+0x8ea>
 800be08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be0c:	d86d      	bhi.n	800beea <_strtod_l+0x8ea>
 800be0e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be12:	f67f ae99 	bls.w	800bb48 <_strtod_l+0x548>
 800be16:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800be48 <_strtod_l+0x848>
 800be1a:	ec4b ab16 	vmov	d6, sl, fp
 800be1e:	4b0e      	ldr	r3, [pc, #56]	@ (800be58 <_strtod_l+0x858>)
 800be20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800be24:	ee17 2a90 	vmov	r2, s15
 800be28:	4013      	ands	r3, r2
 800be2a:	ec5b ab17 	vmov	sl, fp, d7
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f47f ae01 	bne.w	800ba36 <_strtod_l+0x436>
 800be34:	9a05      	ldr	r2, [sp, #20]
 800be36:	2322      	movs	r3, #34	@ 0x22
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	e5fc      	b.n	800ba36 <_strtod_l+0x436>
 800be3c:	f3af 8000 	nop.w
 800be40:	ffc00000 	.word	0xffc00000
 800be44:	41dfffff 	.word	0x41dfffff
 800be48:	00000000 	.word	0x00000000
 800be4c:	39500000 	.word	0x39500000
 800be50:	0800d8a0 	.word	0x0800d8a0
 800be54:	fffffc02 	.word	0xfffffc02
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	46d9      	mov	r9, fp
 800be5e:	d15d      	bne.n	800bf1c <_strtod_l+0x91c>
 800be60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	d02a      	beq.n	800bec0 <_strtod_l+0x8c0>
 800be6a:	4aab      	ldr	r2, [pc, #684]	@ (800c118 <_strtod_l+0xb18>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d12a      	bne.n	800bec6 <_strtod_l+0x8c6>
 800be70:	9b06      	ldr	r3, [sp, #24]
 800be72:	4652      	mov	r2, sl
 800be74:	b1fb      	cbz	r3, 800beb6 <_strtod_l+0x8b6>
 800be76:	4ba9      	ldr	r3, [pc, #676]	@ (800c11c <_strtod_l+0xb1c>)
 800be78:	ea0b 0303 	and.w	r3, fp, r3
 800be7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be80:	f04f 31ff 	mov.w	r1, #4294967295
 800be84:	d81a      	bhi.n	800bebc <_strtod_l+0x8bc>
 800be86:	0d1b      	lsrs	r3, r3, #20
 800be88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be8c:	fa01 f303 	lsl.w	r3, r1, r3
 800be90:	429a      	cmp	r2, r3
 800be92:	d118      	bne.n	800bec6 <_strtod_l+0x8c6>
 800be94:	4ba2      	ldr	r3, [pc, #648]	@ (800c120 <_strtod_l+0xb20>)
 800be96:	4599      	cmp	r9, r3
 800be98:	d102      	bne.n	800bea0 <_strtod_l+0x8a0>
 800be9a:	3201      	adds	r2, #1
 800be9c:	f43f adc0 	beq.w	800ba20 <_strtod_l+0x420>
 800bea0:	4b9e      	ldr	r3, [pc, #632]	@ (800c11c <_strtod_l+0xb1c>)
 800bea2:	ea09 0303 	and.w	r3, r9, r3
 800bea6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800beaa:	f04f 0a00 	mov.w	sl, #0
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1b0      	bne.n	800be16 <_strtod_l+0x816>
 800beb4:	e5bf      	b.n	800ba36 <_strtod_l+0x436>
 800beb6:	f04f 33ff 	mov.w	r3, #4294967295
 800beba:	e7e9      	b.n	800be90 <_strtod_l+0x890>
 800bebc:	460b      	mov	r3, r1
 800bebe:	e7e7      	b.n	800be90 <_strtod_l+0x890>
 800bec0:	ea53 030a 	orrs.w	r3, r3, sl
 800bec4:	d099      	beq.n	800bdfa <_strtod_l+0x7fa>
 800bec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec8:	b1c3      	cbz	r3, 800befc <_strtod_l+0x8fc>
 800beca:	ea13 0f09 	tst.w	r3, r9
 800bece:	d0ee      	beq.n	800beae <_strtod_l+0x8ae>
 800bed0:	9a06      	ldr	r2, [sp, #24]
 800bed2:	4650      	mov	r0, sl
 800bed4:	4659      	mov	r1, fp
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	d013      	beq.n	800bf04 <_strtod_l+0x904>
 800bedc:	f7ff fb73 	bl	800b5c6 <sulp>
 800bee0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800bee4:	ec5b ab17 	vmov	sl, fp, d7
 800bee8:	e7e1      	b.n	800beae <_strtod_l+0x8ae>
 800beea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800beee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bef2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bef6:	f04f 3aff 	mov.w	sl, #4294967295
 800befa:	e7d8      	b.n	800beae <_strtod_l+0x8ae>
 800befc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800befe:	ea13 0f0a 	tst.w	r3, sl
 800bf02:	e7e4      	b.n	800bece <_strtod_l+0x8ce>
 800bf04:	f7ff fb5f 	bl	800b5c6 <sulp>
 800bf08:	ee39 0b40 	vsub.f64	d0, d9, d0
 800bf0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bf10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf14:	ec5b ab10 	vmov	sl, fp, d0
 800bf18:	d1c9      	bne.n	800beae <_strtod_l+0x8ae>
 800bf1a:	e615      	b.n	800bb48 <_strtod_l+0x548>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff fade 	bl	800b4e0 <__ratio>
 800bf24:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bf28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf30:	d85d      	bhi.n	800bfee <_strtod_l+0x9ee>
 800bf32:	f1b8 0f00 	cmp.w	r8, #0
 800bf36:	d164      	bne.n	800c002 <_strtod_l+0xa02>
 800bf38:	f1ba 0f00 	cmp.w	sl, #0
 800bf3c:	d14b      	bne.n	800bfd6 <_strtod_l+0x9d6>
 800bf3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf42:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d160      	bne.n	800c00c <_strtod_l+0xa0c>
 800bf4a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800bf4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800bf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf56:	d401      	bmi.n	800bf5c <_strtod_l+0x95c>
 800bf58:	ee20 8b08 	vmul.f64	d8, d0, d8
 800bf5c:	eeb1 ab48 	vneg.f64	d10, d8
 800bf60:	486e      	ldr	r0, [pc, #440]	@ (800c11c <_strtod_l+0xb1c>)
 800bf62:	4970      	ldr	r1, [pc, #448]	@ (800c124 <_strtod_l+0xb24>)
 800bf64:	ea09 0700 	and.w	r7, r9, r0
 800bf68:	428f      	cmp	r7, r1
 800bf6a:	ec53 2b1a 	vmov	r2, r3, d10
 800bf6e:	d17d      	bne.n	800c06c <_strtod_l+0xa6c>
 800bf70:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800bf74:	ec4b ab1c 	vmov	d12, sl, fp
 800bf78:	eeb0 0b4c 	vmov.f64	d0, d12
 800bf7c:	f7ff f9e8 	bl	800b350 <__ulp>
 800bf80:	4866      	ldr	r0, [pc, #408]	@ (800c11c <_strtod_l+0xb1c>)
 800bf82:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800bf86:	ee1c 3a90 	vmov	r3, s25
 800bf8a:	4a67      	ldr	r2, [pc, #412]	@ (800c128 <_strtod_l+0xb28>)
 800bf8c:	ea03 0100 	and.w	r1, r3, r0
 800bf90:	4291      	cmp	r1, r2
 800bf92:	ec5b ab1c 	vmov	sl, fp, d12
 800bf96:	d93c      	bls.n	800c012 <_strtod_l+0xa12>
 800bf98:	ee19 2a90 	vmov	r2, s19
 800bf9c:	4b60      	ldr	r3, [pc, #384]	@ (800c120 <_strtod_l+0xb20>)
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d104      	bne.n	800bfac <_strtod_l+0x9ac>
 800bfa2:	ee19 3a10 	vmov	r3, s18
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	f43f ad3a 	beq.w	800ba20 <_strtod_l+0x420>
 800bfac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c120 <_strtod_l+0xb20>
 800bfb0:	f04f 3aff 	mov.w	sl, #4294967295
 800bfb4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bfb6:	9805      	ldr	r0, [sp, #20]
 800bfb8:	f7fe fe96 	bl	800ace8 <_Bfree>
 800bfbc:	9805      	ldr	r0, [sp, #20]
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	f7fe fe92 	bl	800ace8 <_Bfree>
 800bfc4:	9805      	ldr	r0, [sp, #20]
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7fe fe8e 	bl	800ace8 <_Bfree>
 800bfcc:	9805      	ldr	r0, [sp, #20]
 800bfce:	4621      	mov	r1, r4
 800bfd0:	f7fe fe8a 	bl	800ace8 <_Bfree>
 800bfd4:	e625      	b.n	800bc22 <_strtod_l+0x622>
 800bfd6:	f1ba 0f01 	cmp.w	sl, #1
 800bfda:	d103      	bne.n	800bfe4 <_strtod_l+0x9e4>
 800bfdc:	f1bb 0f00 	cmp.w	fp, #0
 800bfe0:	f43f adb2 	beq.w	800bb48 <_strtod_l+0x548>
 800bfe4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800bfe8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bfec:	e7b8      	b.n	800bf60 <_strtod_l+0x960>
 800bfee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800bff2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800bff6:	f1b8 0f00 	cmp.w	r8, #0
 800bffa:	d0af      	beq.n	800bf5c <_strtod_l+0x95c>
 800bffc:	eeb0 ab48 	vmov.f64	d10, d8
 800c000:	e7ae      	b.n	800bf60 <_strtod_l+0x960>
 800c002:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c006:	eeb0 8b4a 	vmov.f64	d8, d10
 800c00a:	e7a9      	b.n	800bf60 <_strtod_l+0x960>
 800c00c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c010:	e7a6      	b.n	800bf60 <_strtod_l+0x960>
 800c012:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c016:	9b06      	ldr	r3, [sp, #24]
 800c018:	46d9      	mov	r9, fp
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1ca      	bne.n	800bfb4 <_strtod_l+0x9b4>
 800c01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c022:	0d1b      	lsrs	r3, r3, #20
 800c024:	051b      	lsls	r3, r3, #20
 800c026:	429f      	cmp	r7, r3
 800c028:	d1c4      	bne.n	800bfb4 <_strtod_l+0x9b4>
 800c02a:	ec51 0b18 	vmov	r0, r1, d8
 800c02e:	f7f4 fb7b 	bl	8000728 <__aeabi_d2lz>
 800c032:	f7f4 fb4b 	bl	80006cc <__aeabi_l2d>
 800c036:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c03a:	ec41 0b17 	vmov	d7, r0, r1
 800c03e:	ea49 090a 	orr.w	r9, r9, sl
 800c042:	ea59 0908 	orrs.w	r9, r9, r8
 800c046:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c04a:	d03c      	beq.n	800c0c6 <_strtod_l+0xac6>
 800c04c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c100 <_strtod_l+0xb00>
 800c050:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c058:	f53f aced 	bmi.w	800ba36 <_strtod_l+0x436>
 800c05c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c108 <_strtod_l+0xb08>
 800c060:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c068:	dda4      	ble.n	800bfb4 <_strtod_l+0x9b4>
 800c06a:	e4e4      	b.n	800ba36 <_strtod_l+0x436>
 800c06c:	9906      	ldr	r1, [sp, #24]
 800c06e:	b1e1      	cbz	r1, 800c0aa <_strtod_l+0xaaa>
 800c070:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c074:	d819      	bhi.n	800c0aa <_strtod_l+0xaaa>
 800c076:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07e:	d811      	bhi.n	800c0a4 <_strtod_l+0xaa4>
 800c080:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c084:	ee18 3a10 	vmov	r3, s16
 800c088:	2b01      	cmp	r3, #1
 800c08a:	bf38      	it	cc
 800c08c:	2301      	movcc	r3, #1
 800c08e:	ee08 3a10 	vmov	s16, r3
 800c092:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c096:	f1b8 0f00 	cmp.w	r8, #0
 800c09a:	d111      	bne.n	800c0c0 <_strtod_l+0xac0>
 800c09c:	eeb1 7b48 	vneg.f64	d7, d8
 800c0a0:	ec53 2b17 	vmov	r2, r3, d7
 800c0a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c0a8:	1bcb      	subs	r3, r1, r7
 800c0aa:	eeb0 0b49 	vmov.f64	d0, d9
 800c0ae:	ec43 2b1a 	vmov	d10, r2, r3
 800c0b2:	f7ff f94d 	bl	800b350 <__ulp>
 800c0b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c0ba:	ec5b ab19 	vmov	sl, fp, d9
 800c0be:	e7aa      	b.n	800c016 <_strtod_l+0xa16>
 800c0c0:	eeb0 7b48 	vmov.f64	d7, d8
 800c0c4:	e7ec      	b.n	800c0a0 <_strtod_l+0xaa0>
 800c0c6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c110 <_strtod_l+0xb10>
 800c0ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	f57f af6f 	bpl.w	800bfb4 <_strtod_l+0x9b4>
 800c0d6:	e4ae      	b.n	800ba36 <_strtod_l+0x436>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9308      	str	r3, [sp, #32]
 800c0dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0e0:	6013      	str	r3, [r2, #0]
 800c0e2:	f7ff bacc 	b.w	800b67e <_strtod_l+0x7e>
 800c0e6:	2a65      	cmp	r2, #101	@ 0x65
 800c0e8:	f43f abbc 	beq.w	800b864 <_strtod_l+0x264>
 800c0ec:	2a45      	cmp	r2, #69	@ 0x45
 800c0ee:	f43f abb9 	beq.w	800b864 <_strtod_l+0x264>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	9306      	str	r3, [sp, #24]
 800c0f6:	f7ff bbf0 	b.w	800b8da <_strtod_l+0x2da>
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w
 800c100:	94a03595 	.word	0x94a03595
 800c104:	3fdfffff 	.word	0x3fdfffff
 800c108:	35afe535 	.word	0x35afe535
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	94a03595 	.word	0x94a03595
 800c114:	3fcfffff 	.word	0x3fcfffff
 800c118:	000fffff 	.word	0x000fffff
 800c11c:	7ff00000 	.word	0x7ff00000
 800c120:	7fefffff 	.word	0x7fefffff
 800c124:	7fe00000 	.word	0x7fe00000
 800c128:	7c9fffff 	.word	0x7c9fffff

0800c12c <_strtod_r>:
 800c12c:	4b01      	ldr	r3, [pc, #4]	@ (800c134 <_strtod_r+0x8>)
 800c12e:	f7ff ba67 	b.w	800b600 <_strtod_l>
 800c132:	bf00      	nop
 800c134:	24000118 	.word	0x24000118

0800c138 <_strtol_l.constprop.0>:
 800c138:	2b24      	cmp	r3, #36	@ 0x24
 800c13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c13e:	4686      	mov	lr, r0
 800c140:	4690      	mov	r8, r2
 800c142:	d801      	bhi.n	800c148 <_strtol_l.constprop.0+0x10>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d106      	bne.n	800c156 <_strtol_l.constprop.0+0x1e>
 800c148:	f7fd ff1c 	bl	8009f84 <__errno>
 800c14c:	2316      	movs	r3, #22
 800c14e:	6003      	str	r3, [r0, #0]
 800c150:	2000      	movs	r0, #0
 800c152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c156:	4834      	ldr	r0, [pc, #208]	@ (800c228 <_strtol_l.constprop.0+0xf0>)
 800c158:	460d      	mov	r5, r1
 800c15a:	462a      	mov	r2, r5
 800c15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c160:	5d06      	ldrb	r6, [r0, r4]
 800c162:	f016 0608 	ands.w	r6, r6, #8
 800c166:	d1f8      	bne.n	800c15a <_strtol_l.constprop.0+0x22>
 800c168:	2c2d      	cmp	r4, #45	@ 0x2d
 800c16a:	d12d      	bne.n	800c1c8 <_strtol_l.constprop.0+0x90>
 800c16c:	782c      	ldrb	r4, [r5, #0]
 800c16e:	2601      	movs	r6, #1
 800c170:	1c95      	adds	r5, r2, #2
 800c172:	f033 0210 	bics.w	r2, r3, #16
 800c176:	d109      	bne.n	800c18c <_strtol_l.constprop.0+0x54>
 800c178:	2c30      	cmp	r4, #48	@ 0x30
 800c17a:	d12a      	bne.n	800c1d2 <_strtol_l.constprop.0+0x9a>
 800c17c:	782a      	ldrb	r2, [r5, #0]
 800c17e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c182:	2a58      	cmp	r2, #88	@ 0x58
 800c184:	d125      	bne.n	800c1d2 <_strtol_l.constprop.0+0x9a>
 800c186:	786c      	ldrb	r4, [r5, #1]
 800c188:	2310      	movs	r3, #16
 800c18a:	3502      	adds	r5, #2
 800c18c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c190:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c194:	2200      	movs	r2, #0
 800c196:	fbbc f9f3 	udiv	r9, ip, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c1a4:	2f09      	cmp	r7, #9
 800c1a6:	d81b      	bhi.n	800c1e0 <_strtol_l.constprop.0+0xa8>
 800c1a8:	463c      	mov	r4, r7
 800c1aa:	42a3      	cmp	r3, r4
 800c1ac:	dd27      	ble.n	800c1fe <_strtol_l.constprop.0+0xc6>
 800c1ae:	1c57      	adds	r7, r2, #1
 800c1b0:	d007      	beq.n	800c1c2 <_strtol_l.constprop.0+0x8a>
 800c1b2:	4581      	cmp	r9, r0
 800c1b4:	d320      	bcc.n	800c1f8 <_strtol_l.constprop.0+0xc0>
 800c1b6:	d101      	bne.n	800c1bc <_strtol_l.constprop.0+0x84>
 800c1b8:	45a2      	cmp	sl, r4
 800c1ba:	db1d      	blt.n	800c1f8 <_strtol_l.constprop.0+0xc0>
 800c1bc:	fb00 4003 	mla	r0, r0, r3, r4
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1c6:	e7eb      	b.n	800c1a0 <_strtol_l.constprop.0+0x68>
 800c1c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800c1ca:	bf04      	itt	eq
 800c1cc:	782c      	ldrbeq	r4, [r5, #0]
 800c1ce:	1c95      	addeq	r5, r2, #2
 800c1d0:	e7cf      	b.n	800c172 <_strtol_l.constprop.0+0x3a>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1da      	bne.n	800c18c <_strtol_l.constprop.0+0x54>
 800c1d6:	2c30      	cmp	r4, #48	@ 0x30
 800c1d8:	bf0c      	ite	eq
 800c1da:	2308      	moveq	r3, #8
 800c1dc:	230a      	movne	r3, #10
 800c1de:	e7d5      	b.n	800c18c <_strtol_l.constprop.0+0x54>
 800c1e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1e4:	2f19      	cmp	r7, #25
 800c1e6:	d801      	bhi.n	800c1ec <_strtol_l.constprop.0+0xb4>
 800c1e8:	3c37      	subs	r4, #55	@ 0x37
 800c1ea:	e7de      	b.n	800c1aa <_strtol_l.constprop.0+0x72>
 800c1ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1f0:	2f19      	cmp	r7, #25
 800c1f2:	d804      	bhi.n	800c1fe <_strtol_l.constprop.0+0xc6>
 800c1f4:	3c57      	subs	r4, #87	@ 0x57
 800c1f6:	e7d8      	b.n	800c1aa <_strtol_l.constprop.0+0x72>
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fc:	e7e1      	b.n	800c1c2 <_strtol_l.constprop.0+0x8a>
 800c1fe:	1c53      	adds	r3, r2, #1
 800c200:	d108      	bne.n	800c214 <_strtol_l.constprop.0+0xdc>
 800c202:	2322      	movs	r3, #34	@ 0x22
 800c204:	f8ce 3000 	str.w	r3, [lr]
 800c208:	4660      	mov	r0, ip
 800c20a:	f1b8 0f00 	cmp.w	r8, #0
 800c20e:	d0a0      	beq.n	800c152 <_strtol_l.constprop.0+0x1a>
 800c210:	1e69      	subs	r1, r5, #1
 800c212:	e006      	b.n	800c222 <_strtol_l.constprop.0+0xea>
 800c214:	b106      	cbz	r6, 800c218 <_strtol_l.constprop.0+0xe0>
 800c216:	4240      	negs	r0, r0
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	d099      	beq.n	800c152 <_strtol_l.constprop.0+0x1a>
 800c21e:	2a00      	cmp	r2, #0
 800c220:	d1f6      	bne.n	800c210 <_strtol_l.constprop.0+0xd8>
 800c222:	f8c8 1000 	str.w	r1, [r8]
 800c226:	e794      	b.n	800c152 <_strtol_l.constprop.0+0x1a>
 800c228:	0800d8c9 	.word	0x0800d8c9

0800c22c <_strtol_r>:
 800c22c:	f7ff bf84 	b.w	800c138 <_strtol_l.constprop.0>

0800c230 <__ssputs_r>:
 800c230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c234:	688e      	ldr	r6, [r1, #8]
 800c236:	461f      	mov	r7, r3
 800c238:	42be      	cmp	r6, r7
 800c23a:	680b      	ldr	r3, [r1, #0]
 800c23c:	4682      	mov	sl, r0
 800c23e:	460c      	mov	r4, r1
 800c240:	4690      	mov	r8, r2
 800c242:	d82d      	bhi.n	800c2a0 <__ssputs_r+0x70>
 800c244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c248:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c24c:	d026      	beq.n	800c29c <__ssputs_r+0x6c>
 800c24e:	6965      	ldr	r5, [r4, #20]
 800c250:	6909      	ldr	r1, [r1, #16]
 800c252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c256:	eba3 0901 	sub.w	r9, r3, r1
 800c25a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c25e:	1c7b      	adds	r3, r7, #1
 800c260:	444b      	add	r3, r9
 800c262:	106d      	asrs	r5, r5, #1
 800c264:	429d      	cmp	r5, r3
 800c266:	bf38      	it	cc
 800c268:	461d      	movcc	r5, r3
 800c26a:	0553      	lsls	r3, r2, #21
 800c26c:	d527      	bpl.n	800c2be <__ssputs_r+0x8e>
 800c26e:	4629      	mov	r1, r5
 800c270:	f7fc fdfc 	bl	8008e6c <_malloc_r>
 800c274:	4606      	mov	r6, r0
 800c276:	b360      	cbz	r0, 800c2d2 <__ssputs_r+0xa2>
 800c278:	6921      	ldr	r1, [r4, #16]
 800c27a:	464a      	mov	r2, r9
 800c27c:	f7fd feaf 	bl	8009fde <memcpy>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28a:	81a3      	strh	r3, [r4, #12]
 800c28c:	6126      	str	r6, [r4, #16]
 800c28e:	6165      	str	r5, [r4, #20]
 800c290:	444e      	add	r6, r9
 800c292:	eba5 0509 	sub.w	r5, r5, r9
 800c296:	6026      	str	r6, [r4, #0]
 800c298:	60a5      	str	r5, [r4, #8]
 800c29a:	463e      	mov	r6, r7
 800c29c:	42be      	cmp	r6, r7
 800c29e:	d900      	bls.n	800c2a2 <__ssputs_r+0x72>
 800c2a0:	463e      	mov	r6, r7
 800c2a2:	6820      	ldr	r0, [r4, #0]
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	4641      	mov	r1, r8
 800c2a8:	f000 fb9c 	bl	800c9e4 <memmove>
 800c2ac:	68a3      	ldr	r3, [r4, #8]
 800c2ae:	1b9b      	subs	r3, r3, r6
 800c2b0:	60a3      	str	r3, [r4, #8]
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	4433      	add	r3, r6
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2be:	462a      	mov	r2, r5
 800c2c0:	f000 ff55 	bl	800d16e <_realloc_r>
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d1e0      	bne.n	800c28c <__ssputs_r+0x5c>
 800c2ca:	6921      	ldr	r1, [r4, #16]
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	f7fe fc81 	bl	800abd4 <_free_r>
 800c2d2:	230c      	movs	r3, #12
 800c2d4:	f8ca 3000 	str.w	r3, [sl]
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	e7e9      	b.n	800c2ba <__ssputs_r+0x8a>
	...

0800c2e8 <_svfiprintf_r>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	4698      	mov	r8, r3
 800c2ee:	898b      	ldrh	r3, [r1, #12]
 800c2f0:	061b      	lsls	r3, r3, #24
 800c2f2:	b09d      	sub	sp, #116	@ 0x74
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	d510      	bpl.n	800c31e <_svfiprintf_r+0x36>
 800c2fc:	690b      	ldr	r3, [r1, #16]
 800c2fe:	b973      	cbnz	r3, 800c31e <_svfiprintf_r+0x36>
 800c300:	2140      	movs	r1, #64	@ 0x40
 800c302:	f7fc fdb3 	bl	8008e6c <_malloc_r>
 800c306:	6028      	str	r0, [r5, #0]
 800c308:	6128      	str	r0, [r5, #16]
 800c30a:	b930      	cbnz	r0, 800c31a <_svfiprintf_r+0x32>
 800c30c:	230c      	movs	r3, #12
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	b01d      	add	sp, #116	@ 0x74
 800c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31a:	2340      	movs	r3, #64	@ 0x40
 800c31c:	616b      	str	r3, [r5, #20]
 800c31e:	2300      	movs	r3, #0
 800c320:	9309      	str	r3, [sp, #36]	@ 0x24
 800c322:	2320      	movs	r3, #32
 800c324:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c328:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32c:	2330      	movs	r3, #48	@ 0x30
 800c32e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4cc <_svfiprintf_r+0x1e4>
 800c332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c336:	f04f 0901 	mov.w	r9, #1
 800c33a:	4623      	mov	r3, r4
 800c33c:	469a      	mov	sl, r3
 800c33e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c342:	b10a      	cbz	r2, 800c348 <_svfiprintf_r+0x60>
 800c344:	2a25      	cmp	r2, #37	@ 0x25
 800c346:	d1f9      	bne.n	800c33c <_svfiprintf_r+0x54>
 800c348:	ebba 0b04 	subs.w	fp, sl, r4
 800c34c:	d00b      	beq.n	800c366 <_svfiprintf_r+0x7e>
 800c34e:	465b      	mov	r3, fp
 800c350:	4622      	mov	r2, r4
 800c352:	4629      	mov	r1, r5
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff ff6b 	bl	800c230 <__ssputs_r>
 800c35a:	3001      	adds	r0, #1
 800c35c:	f000 80a7 	beq.w	800c4ae <_svfiprintf_r+0x1c6>
 800c360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c362:	445a      	add	r2, fp
 800c364:	9209      	str	r2, [sp, #36]	@ 0x24
 800c366:	f89a 3000 	ldrb.w	r3, [sl]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 809f 	beq.w	800c4ae <_svfiprintf_r+0x1c6>
 800c370:	2300      	movs	r3, #0
 800c372:	f04f 32ff 	mov.w	r2, #4294967295
 800c376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c37a:	f10a 0a01 	add.w	sl, sl, #1
 800c37e:	9304      	str	r3, [sp, #16]
 800c380:	9307      	str	r3, [sp, #28]
 800c382:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c386:	931a      	str	r3, [sp, #104]	@ 0x68
 800c388:	4654      	mov	r4, sl
 800c38a:	2205      	movs	r2, #5
 800c38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c390:	484e      	ldr	r0, [pc, #312]	@ (800c4cc <_svfiprintf_r+0x1e4>)
 800c392:	f7f3 ffb5 	bl	8000300 <memchr>
 800c396:	9a04      	ldr	r2, [sp, #16]
 800c398:	b9d8      	cbnz	r0, 800c3d2 <_svfiprintf_r+0xea>
 800c39a:	06d0      	lsls	r0, r2, #27
 800c39c:	bf44      	itt	mi
 800c39e:	2320      	movmi	r3, #32
 800c3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3a4:	0711      	lsls	r1, r2, #28
 800c3a6:	bf44      	itt	mi
 800c3a8:	232b      	movmi	r3, #43	@ 0x2b
 800c3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3b4:	d015      	beq.n	800c3e2 <_svfiprintf_r+0xfa>
 800c3b6:	9a07      	ldr	r2, [sp, #28]
 800c3b8:	4654      	mov	r4, sl
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f04f 0c0a 	mov.w	ip, #10
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3c6:	3b30      	subs	r3, #48	@ 0x30
 800c3c8:	2b09      	cmp	r3, #9
 800c3ca:	d94b      	bls.n	800c464 <_svfiprintf_r+0x17c>
 800c3cc:	b1b0      	cbz	r0, 800c3fc <_svfiprintf_r+0x114>
 800c3ce:	9207      	str	r2, [sp, #28]
 800c3d0:	e014      	b.n	800c3fc <_svfiprintf_r+0x114>
 800c3d2:	eba0 0308 	sub.w	r3, r0, r8
 800c3d6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	46a2      	mov	sl, r4
 800c3e0:	e7d2      	b.n	800c388 <_svfiprintf_r+0xa0>
 800c3e2:	9b03      	ldr	r3, [sp, #12]
 800c3e4:	1d19      	adds	r1, r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	9103      	str	r1, [sp, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfbb      	ittet	lt
 800c3ee:	425b      	neglt	r3, r3
 800c3f0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f4:	9307      	strge	r3, [sp, #28]
 800c3f6:	9307      	strlt	r3, [sp, #28]
 800c3f8:	bfb8      	it	lt
 800c3fa:	9204      	strlt	r2, [sp, #16]
 800c3fc:	7823      	ldrb	r3, [r4, #0]
 800c3fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800c400:	d10a      	bne.n	800c418 <_svfiprintf_r+0x130>
 800c402:	7863      	ldrb	r3, [r4, #1]
 800c404:	2b2a      	cmp	r3, #42	@ 0x2a
 800c406:	d132      	bne.n	800c46e <_svfiprintf_r+0x186>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	1d1a      	adds	r2, r3, #4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	9203      	str	r2, [sp, #12]
 800c410:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c414:	3402      	adds	r4, #2
 800c416:	9305      	str	r3, [sp, #20]
 800c418:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4dc <_svfiprintf_r+0x1f4>
 800c41c:	7821      	ldrb	r1, [r4, #0]
 800c41e:	2203      	movs	r2, #3
 800c420:	4650      	mov	r0, sl
 800c422:	f7f3 ff6d 	bl	8000300 <memchr>
 800c426:	b138      	cbz	r0, 800c438 <_svfiprintf_r+0x150>
 800c428:	9b04      	ldr	r3, [sp, #16]
 800c42a:	eba0 000a 	sub.w	r0, r0, sl
 800c42e:	2240      	movs	r2, #64	@ 0x40
 800c430:	4082      	lsls	r2, r0
 800c432:	4313      	orrs	r3, r2
 800c434:	3401      	adds	r4, #1
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43c:	4824      	ldr	r0, [pc, #144]	@ (800c4d0 <_svfiprintf_r+0x1e8>)
 800c43e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c442:	2206      	movs	r2, #6
 800c444:	f7f3 ff5c 	bl	8000300 <memchr>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d036      	beq.n	800c4ba <_svfiprintf_r+0x1d2>
 800c44c:	4b21      	ldr	r3, [pc, #132]	@ (800c4d4 <_svfiprintf_r+0x1ec>)
 800c44e:	bb1b      	cbnz	r3, 800c498 <_svfiprintf_r+0x1b0>
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	3307      	adds	r3, #7
 800c454:	f023 0307 	bic.w	r3, r3, #7
 800c458:	3308      	adds	r3, #8
 800c45a:	9303      	str	r3, [sp, #12]
 800c45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45e:	4433      	add	r3, r6
 800c460:	9309      	str	r3, [sp, #36]	@ 0x24
 800c462:	e76a      	b.n	800c33a <_svfiprintf_r+0x52>
 800c464:	fb0c 3202 	mla	r2, ip, r2, r3
 800c468:	460c      	mov	r4, r1
 800c46a:	2001      	movs	r0, #1
 800c46c:	e7a8      	b.n	800c3c0 <_svfiprintf_r+0xd8>
 800c46e:	2300      	movs	r3, #0
 800c470:	3401      	adds	r4, #1
 800c472:	9305      	str	r3, [sp, #20]
 800c474:	4619      	mov	r1, r3
 800c476:	f04f 0c0a 	mov.w	ip, #10
 800c47a:	4620      	mov	r0, r4
 800c47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c480:	3a30      	subs	r2, #48	@ 0x30
 800c482:	2a09      	cmp	r2, #9
 800c484:	d903      	bls.n	800c48e <_svfiprintf_r+0x1a6>
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0c6      	beq.n	800c418 <_svfiprintf_r+0x130>
 800c48a:	9105      	str	r1, [sp, #20]
 800c48c:	e7c4      	b.n	800c418 <_svfiprintf_r+0x130>
 800c48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c492:	4604      	mov	r4, r0
 800c494:	2301      	movs	r3, #1
 800c496:	e7f0      	b.n	800c47a <_svfiprintf_r+0x192>
 800c498:	ab03      	add	r3, sp, #12
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	462a      	mov	r2, r5
 800c49e:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d8 <_svfiprintf_r+0x1f0>)
 800c4a0:	a904      	add	r1, sp, #16
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f7fc fdfc 	bl	80090a0 <_printf_float>
 800c4a8:	1c42      	adds	r2, r0, #1
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	d1d6      	bne.n	800c45c <_svfiprintf_r+0x174>
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	065b      	lsls	r3, r3, #25
 800c4b2:	f53f af2d 	bmi.w	800c310 <_svfiprintf_r+0x28>
 800c4b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4b8:	e72c      	b.n	800c314 <_svfiprintf_r+0x2c>
 800c4ba:	ab03      	add	r3, sp, #12
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4b05      	ldr	r3, [pc, #20]	@ (800c4d8 <_svfiprintf_r+0x1f0>)
 800c4c2:	a904      	add	r1, sp, #16
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7fd f873 	bl	80095b0 <_printf_i>
 800c4ca:	e7ed      	b.n	800c4a8 <_svfiprintf_r+0x1c0>
 800c4cc:	0800d9c9 	.word	0x0800d9c9
 800c4d0:	0800d9d3 	.word	0x0800d9d3
 800c4d4:	080090a1 	.word	0x080090a1
 800c4d8:	0800c231 	.word	0x0800c231
 800c4dc:	0800d9cf 	.word	0x0800d9cf

0800c4e0 <__sfputc_r>:
 800c4e0:	6893      	ldr	r3, [r2, #8]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	b410      	push	{r4}
 800c4e8:	6093      	str	r3, [r2, #8]
 800c4ea:	da08      	bge.n	800c4fe <__sfputc_r+0x1e>
 800c4ec:	6994      	ldr	r4, [r2, #24]
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	db01      	blt.n	800c4f6 <__sfputc_r+0x16>
 800c4f2:	290a      	cmp	r1, #10
 800c4f4:	d103      	bne.n	800c4fe <__sfputc_r+0x1e>
 800c4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4fa:	f000 b9df 	b.w	800c8bc <__swbuf_r>
 800c4fe:	6813      	ldr	r3, [r2, #0]
 800c500:	1c58      	adds	r0, r3, #1
 800c502:	6010      	str	r0, [r2, #0]
 800c504:	7019      	strb	r1, [r3, #0]
 800c506:	4608      	mov	r0, r1
 800c508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <__sfputs_r>:
 800c50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c510:	4606      	mov	r6, r0
 800c512:	460f      	mov	r7, r1
 800c514:	4614      	mov	r4, r2
 800c516:	18d5      	adds	r5, r2, r3
 800c518:	42ac      	cmp	r4, r5
 800c51a:	d101      	bne.n	800c520 <__sfputs_r+0x12>
 800c51c:	2000      	movs	r0, #0
 800c51e:	e007      	b.n	800c530 <__sfputs_r+0x22>
 800c520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c524:	463a      	mov	r2, r7
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff ffda 	bl	800c4e0 <__sfputc_r>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d1f3      	bne.n	800c518 <__sfputs_r+0xa>
 800c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c534 <_vfiprintf_r>:
 800c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	460d      	mov	r5, r1
 800c53a:	b09d      	sub	sp, #116	@ 0x74
 800c53c:	4614      	mov	r4, r2
 800c53e:	4698      	mov	r8, r3
 800c540:	4606      	mov	r6, r0
 800c542:	b118      	cbz	r0, 800c54c <_vfiprintf_r+0x18>
 800c544:	6a03      	ldr	r3, [r0, #32]
 800c546:	b90b      	cbnz	r3, 800c54c <_vfiprintf_r+0x18>
 800c548:	f7fd fbea 	bl	8009d20 <__sinit>
 800c54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c54e:	07d9      	lsls	r1, r3, #31
 800c550:	d405      	bmi.n	800c55e <_vfiprintf_r+0x2a>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	059a      	lsls	r2, r3, #22
 800c556:	d402      	bmi.n	800c55e <_vfiprintf_r+0x2a>
 800c558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c55a:	f7fd fd3e 	bl	8009fda <__retarget_lock_acquire_recursive>
 800c55e:	89ab      	ldrh	r3, [r5, #12]
 800c560:	071b      	lsls	r3, r3, #28
 800c562:	d501      	bpl.n	800c568 <_vfiprintf_r+0x34>
 800c564:	692b      	ldr	r3, [r5, #16]
 800c566:	b99b      	cbnz	r3, 800c590 <_vfiprintf_r+0x5c>
 800c568:	4629      	mov	r1, r5
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 f9e4 	bl	800c938 <__swsetup_r>
 800c570:	b170      	cbz	r0, 800c590 <_vfiprintf_r+0x5c>
 800c572:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c574:	07dc      	lsls	r4, r3, #31
 800c576:	d504      	bpl.n	800c582 <_vfiprintf_r+0x4e>
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	b01d      	add	sp, #116	@ 0x74
 800c57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c582:	89ab      	ldrh	r3, [r5, #12]
 800c584:	0598      	lsls	r0, r3, #22
 800c586:	d4f7      	bmi.n	800c578 <_vfiprintf_r+0x44>
 800c588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c58a:	f7fd fd27 	bl	8009fdc <__retarget_lock_release_recursive>
 800c58e:	e7f3      	b.n	800c578 <_vfiprintf_r+0x44>
 800c590:	2300      	movs	r3, #0
 800c592:	9309      	str	r3, [sp, #36]	@ 0x24
 800c594:	2320      	movs	r3, #32
 800c596:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c59e:	2330      	movs	r3, #48	@ 0x30
 800c5a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c750 <_vfiprintf_r+0x21c>
 800c5a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5a8:	f04f 0901 	mov.w	r9, #1
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	469a      	mov	sl, r3
 800c5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5b4:	b10a      	cbz	r2, 800c5ba <_vfiprintf_r+0x86>
 800c5b6:	2a25      	cmp	r2, #37	@ 0x25
 800c5b8:	d1f9      	bne.n	800c5ae <_vfiprintf_r+0x7a>
 800c5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c5be:	d00b      	beq.n	800c5d8 <_vfiprintf_r+0xa4>
 800c5c0:	465b      	mov	r3, fp
 800c5c2:	4622      	mov	r2, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7ff ffa1 	bl	800c50e <__sfputs_r>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	f000 80a7 	beq.w	800c720 <_vfiprintf_r+0x1ec>
 800c5d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5d4:	445a      	add	r2, fp
 800c5d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 809f 	beq.w	800c720 <_vfiprintf_r+0x1ec>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ec:	f10a 0a01 	add.w	sl, sl, #1
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	9307      	str	r3, [sp, #28]
 800c5f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5fa:	4654      	mov	r4, sl
 800c5fc:	2205      	movs	r2, #5
 800c5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c602:	4853      	ldr	r0, [pc, #332]	@ (800c750 <_vfiprintf_r+0x21c>)
 800c604:	f7f3 fe7c 	bl	8000300 <memchr>
 800c608:	9a04      	ldr	r2, [sp, #16]
 800c60a:	b9d8      	cbnz	r0, 800c644 <_vfiprintf_r+0x110>
 800c60c:	06d1      	lsls	r1, r2, #27
 800c60e:	bf44      	itt	mi
 800c610:	2320      	movmi	r3, #32
 800c612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c616:	0713      	lsls	r3, r2, #28
 800c618:	bf44      	itt	mi
 800c61a:	232b      	movmi	r3, #43	@ 0x2b
 800c61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c620:	f89a 3000 	ldrb.w	r3, [sl]
 800c624:	2b2a      	cmp	r3, #42	@ 0x2a
 800c626:	d015      	beq.n	800c654 <_vfiprintf_r+0x120>
 800c628:	9a07      	ldr	r2, [sp, #28]
 800c62a:	4654      	mov	r4, sl
 800c62c:	2000      	movs	r0, #0
 800c62e:	f04f 0c0a 	mov.w	ip, #10
 800c632:	4621      	mov	r1, r4
 800c634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c638:	3b30      	subs	r3, #48	@ 0x30
 800c63a:	2b09      	cmp	r3, #9
 800c63c:	d94b      	bls.n	800c6d6 <_vfiprintf_r+0x1a2>
 800c63e:	b1b0      	cbz	r0, 800c66e <_vfiprintf_r+0x13a>
 800c640:	9207      	str	r2, [sp, #28]
 800c642:	e014      	b.n	800c66e <_vfiprintf_r+0x13a>
 800c644:	eba0 0308 	sub.w	r3, r0, r8
 800c648:	fa09 f303 	lsl.w	r3, r9, r3
 800c64c:	4313      	orrs	r3, r2
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	46a2      	mov	sl, r4
 800c652:	e7d2      	b.n	800c5fa <_vfiprintf_r+0xc6>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	1d19      	adds	r1, r3, #4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	9103      	str	r1, [sp, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bfbb      	ittet	lt
 800c660:	425b      	neglt	r3, r3
 800c662:	f042 0202 	orrlt.w	r2, r2, #2
 800c666:	9307      	strge	r3, [sp, #28]
 800c668:	9307      	strlt	r3, [sp, #28]
 800c66a:	bfb8      	it	lt
 800c66c:	9204      	strlt	r2, [sp, #16]
 800c66e:	7823      	ldrb	r3, [r4, #0]
 800c670:	2b2e      	cmp	r3, #46	@ 0x2e
 800c672:	d10a      	bne.n	800c68a <_vfiprintf_r+0x156>
 800c674:	7863      	ldrb	r3, [r4, #1]
 800c676:	2b2a      	cmp	r3, #42	@ 0x2a
 800c678:	d132      	bne.n	800c6e0 <_vfiprintf_r+0x1ac>
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	1d1a      	adds	r2, r3, #4
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	9203      	str	r2, [sp, #12]
 800c682:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c686:	3402      	adds	r4, #2
 800c688:	9305      	str	r3, [sp, #20]
 800c68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c760 <_vfiprintf_r+0x22c>
 800c68e:	7821      	ldrb	r1, [r4, #0]
 800c690:	2203      	movs	r2, #3
 800c692:	4650      	mov	r0, sl
 800c694:	f7f3 fe34 	bl	8000300 <memchr>
 800c698:	b138      	cbz	r0, 800c6aa <_vfiprintf_r+0x176>
 800c69a:	9b04      	ldr	r3, [sp, #16]
 800c69c:	eba0 000a 	sub.w	r0, r0, sl
 800c6a0:	2240      	movs	r2, #64	@ 0x40
 800c6a2:	4082      	lsls	r2, r0
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	3401      	adds	r4, #1
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ae:	4829      	ldr	r0, [pc, #164]	@ (800c754 <_vfiprintf_r+0x220>)
 800c6b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6b4:	2206      	movs	r2, #6
 800c6b6:	f7f3 fe23 	bl	8000300 <memchr>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d03f      	beq.n	800c73e <_vfiprintf_r+0x20a>
 800c6be:	4b26      	ldr	r3, [pc, #152]	@ (800c758 <_vfiprintf_r+0x224>)
 800c6c0:	bb1b      	cbnz	r3, 800c70a <_vfiprintf_r+0x1d6>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	3307      	adds	r3, #7
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	9303      	str	r3, [sp, #12]
 800c6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d0:	443b      	add	r3, r7
 800c6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6d4:	e76a      	b.n	800c5ac <_vfiprintf_r+0x78>
 800c6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6da:	460c      	mov	r4, r1
 800c6dc:	2001      	movs	r0, #1
 800c6de:	e7a8      	b.n	800c632 <_vfiprintf_r+0xfe>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	3401      	adds	r4, #1
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	f04f 0c0a 	mov.w	ip, #10
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6f2:	3a30      	subs	r2, #48	@ 0x30
 800c6f4:	2a09      	cmp	r2, #9
 800c6f6:	d903      	bls.n	800c700 <_vfiprintf_r+0x1cc>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0c6      	beq.n	800c68a <_vfiprintf_r+0x156>
 800c6fc:	9105      	str	r1, [sp, #20]
 800c6fe:	e7c4      	b.n	800c68a <_vfiprintf_r+0x156>
 800c700:	fb0c 2101 	mla	r1, ip, r1, r2
 800c704:	4604      	mov	r4, r0
 800c706:	2301      	movs	r3, #1
 800c708:	e7f0      	b.n	800c6ec <_vfiprintf_r+0x1b8>
 800c70a:	ab03      	add	r3, sp, #12
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	462a      	mov	r2, r5
 800c710:	4b12      	ldr	r3, [pc, #72]	@ (800c75c <_vfiprintf_r+0x228>)
 800c712:	a904      	add	r1, sp, #16
 800c714:	4630      	mov	r0, r6
 800c716:	f7fc fcc3 	bl	80090a0 <_printf_float>
 800c71a:	4607      	mov	r7, r0
 800c71c:	1c78      	adds	r0, r7, #1
 800c71e:	d1d6      	bne.n	800c6ce <_vfiprintf_r+0x19a>
 800c720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c722:	07d9      	lsls	r1, r3, #31
 800c724:	d405      	bmi.n	800c732 <_vfiprintf_r+0x1fe>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	059a      	lsls	r2, r3, #22
 800c72a:	d402      	bmi.n	800c732 <_vfiprintf_r+0x1fe>
 800c72c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c72e:	f7fd fc55 	bl	8009fdc <__retarget_lock_release_recursive>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	065b      	lsls	r3, r3, #25
 800c736:	f53f af1f 	bmi.w	800c578 <_vfiprintf_r+0x44>
 800c73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c73c:	e71e      	b.n	800c57c <_vfiprintf_r+0x48>
 800c73e:	ab03      	add	r3, sp, #12
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	462a      	mov	r2, r5
 800c744:	4b05      	ldr	r3, [pc, #20]	@ (800c75c <_vfiprintf_r+0x228>)
 800c746:	a904      	add	r1, sp, #16
 800c748:	4630      	mov	r0, r6
 800c74a:	f7fc ff31 	bl	80095b0 <_printf_i>
 800c74e:	e7e4      	b.n	800c71a <_vfiprintf_r+0x1e6>
 800c750:	0800d9c9 	.word	0x0800d9c9
 800c754:	0800d9d3 	.word	0x0800d9d3
 800c758:	080090a1 	.word	0x080090a1
 800c75c:	0800c50f 	.word	0x0800c50f
 800c760:	0800d9cf 	.word	0x0800d9cf

0800c764 <__sflush_r>:
 800c764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	0716      	lsls	r6, r2, #28
 800c76e:	4605      	mov	r5, r0
 800c770:	460c      	mov	r4, r1
 800c772:	d454      	bmi.n	800c81e <__sflush_r+0xba>
 800c774:	684b      	ldr	r3, [r1, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	dc02      	bgt.n	800c780 <__sflush_r+0x1c>
 800c77a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd48      	ble.n	800c812 <__sflush_r+0xae>
 800c780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c782:	2e00      	cmp	r6, #0
 800c784:	d045      	beq.n	800c812 <__sflush_r+0xae>
 800c786:	2300      	movs	r3, #0
 800c788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c78c:	682f      	ldr	r7, [r5, #0]
 800c78e:	6a21      	ldr	r1, [r4, #32]
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	d030      	beq.n	800c7f6 <__sflush_r+0x92>
 800c794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	0759      	lsls	r1, r3, #29
 800c79a:	d505      	bpl.n	800c7a8 <__sflush_r+0x44>
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	1ad2      	subs	r2, r2, r3
 800c7a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7a2:	b10b      	cbz	r3, 800c7a8 <__sflush_r+0x44>
 800c7a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7a6:	1ad2      	subs	r2, r2, r3
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7ac:	6a21      	ldr	r1, [r4, #32]
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	47b0      	blx	r6
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	d106      	bne.n	800c7c6 <__sflush_r+0x62>
 800c7b8:	6829      	ldr	r1, [r5, #0]
 800c7ba:	291d      	cmp	r1, #29
 800c7bc:	d82b      	bhi.n	800c816 <__sflush_r+0xb2>
 800c7be:	4a2a      	ldr	r2, [pc, #168]	@ (800c868 <__sflush_r+0x104>)
 800c7c0:	410a      	asrs	r2, r1
 800c7c2:	07d6      	lsls	r6, r2, #31
 800c7c4:	d427      	bmi.n	800c816 <__sflush_r+0xb2>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	6062      	str	r2, [r4, #4]
 800c7ca:	04d9      	lsls	r1, r3, #19
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	6022      	str	r2, [r4, #0]
 800c7d0:	d504      	bpl.n	800c7dc <__sflush_r+0x78>
 800c7d2:	1c42      	adds	r2, r0, #1
 800c7d4:	d101      	bne.n	800c7da <__sflush_r+0x76>
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	b903      	cbnz	r3, 800c7dc <__sflush_r+0x78>
 800c7da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7de:	602f      	str	r7, [r5, #0]
 800c7e0:	b1b9      	cbz	r1, 800c812 <__sflush_r+0xae>
 800c7e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7e6:	4299      	cmp	r1, r3
 800c7e8:	d002      	beq.n	800c7f0 <__sflush_r+0x8c>
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f7fe f9f2 	bl	800abd4 <_free_r>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7f4:	e00d      	b.n	800c812 <__sflush_r+0xae>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b0      	blx	r6
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	1c50      	adds	r0, r2, #1
 800c800:	d1c9      	bne.n	800c796 <__sflush_r+0x32>
 800c802:	682b      	ldr	r3, [r5, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0c6      	beq.n	800c796 <__sflush_r+0x32>
 800c808:	2b1d      	cmp	r3, #29
 800c80a:	d001      	beq.n	800c810 <__sflush_r+0xac>
 800c80c:	2b16      	cmp	r3, #22
 800c80e:	d11e      	bne.n	800c84e <__sflush_r+0xea>
 800c810:	602f      	str	r7, [r5, #0]
 800c812:	2000      	movs	r0, #0
 800c814:	e022      	b.n	800c85c <__sflush_r+0xf8>
 800c816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c81a:	b21b      	sxth	r3, r3
 800c81c:	e01b      	b.n	800c856 <__sflush_r+0xf2>
 800c81e:	690f      	ldr	r7, [r1, #16]
 800c820:	2f00      	cmp	r7, #0
 800c822:	d0f6      	beq.n	800c812 <__sflush_r+0xae>
 800c824:	0793      	lsls	r3, r2, #30
 800c826:	680e      	ldr	r6, [r1, #0]
 800c828:	bf08      	it	eq
 800c82a:	694b      	ldreq	r3, [r1, #20]
 800c82c:	600f      	str	r7, [r1, #0]
 800c82e:	bf18      	it	ne
 800c830:	2300      	movne	r3, #0
 800c832:	eba6 0807 	sub.w	r8, r6, r7
 800c836:	608b      	str	r3, [r1, #8]
 800c838:	f1b8 0f00 	cmp.w	r8, #0
 800c83c:	dde9      	ble.n	800c812 <__sflush_r+0xae>
 800c83e:	6a21      	ldr	r1, [r4, #32]
 800c840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c842:	4643      	mov	r3, r8
 800c844:	463a      	mov	r2, r7
 800c846:	4628      	mov	r0, r5
 800c848:	47b0      	blx	r6
 800c84a:	2800      	cmp	r0, #0
 800c84c:	dc08      	bgt.n	800c860 <__sflush_r+0xfc>
 800c84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c856:	81a3      	strh	r3, [r4, #12]
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c860:	4407      	add	r7, r0
 800c862:	eba8 0800 	sub.w	r8, r8, r0
 800c866:	e7e7      	b.n	800c838 <__sflush_r+0xd4>
 800c868:	dfbffffe 	.word	0xdfbffffe

0800c86c <_fflush_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	690b      	ldr	r3, [r1, #16]
 800c870:	4605      	mov	r5, r0
 800c872:	460c      	mov	r4, r1
 800c874:	b913      	cbnz	r3, 800c87c <_fflush_r+0x10>
 800c876:	2500      	movs	r5, #0
 800c878:	4628      	mov	r0, r5
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	b118      	cbz	r0, 800c886 <_fflush_r+0x1a>
 800c87e:	6a03      	ldr	r3, [r0, #32]
 800c880:	b90b      	cbnz	r3, 800c886 <_fflush_r+0x1a>
 800c882:	f7fd fa4d 	bl	8009d20 <__sinit>
 800c886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0f3      	beq.n	800c876 <_fflush_r+0xa>
 800c88e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c890:	07d0      	lsls	r0, r2, #31
 800c892:	d404      	bmi.n	800c89e <_fflush_r+0x32>
 800c894:	0599      	lsls	r1, r3, #22
 800c896:	d402      	bmi.n	800c89e <_fflush_r+0x32>
 800c898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c89a:	f7fd fb9e 	bl	8009fda <__retarget_lock_acquire_recursive>
 800c89e:	4628      	mov	r0, r5
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	f7ff ff5f 	bl	800c764 <__sflush_r>
 800c8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8a8:	07da      	lsls	r2, r3, #31
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	d4e4      	bmi.n	800c878 <_fflush_r+0xc>
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	059b      	lsls	r3, r3, #22
 800c8b2:	d4e1      	bmi.n	800c878 <_fflush_r+0xc>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8b6:	f7fd fb91 	bl	8009fdc <__retarget_lock_release_recursive>
 800c8ba:	e7dd      	b.n	800c878 <_fflush_r+0xc>

0800c8bc <__swbuf_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	460e      	mov	r6, r1
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <__swbuf_r+0x12>
 800c8c6:	6a03      	ldr	r3, [r0, #32]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <__swbuf_r+0x12>
 800c8ca:	f7fd fa29 	bl	8009d20 <__sinit>
 800c8ce:	69a3      	ldr	r3, [r4, #24]
 800c8d0:	60a3      	str	r3, [r4, #8]
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	071a      	lsls	r2, r3, #28
 800c8d6:	d501      	bpl.n	800c8dc <__swbuf_r+0x20>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	b943      	cbnz	r3, 800c8ee <__swbuf_r+0x32>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f82a 	bl	800c938 <__swsetup_r>
 800c8e4:	b118      	cbz	r0, 800c8ee <__swbuf_r+0x32>
 800c8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	6922      	ldr	r2, [r4, #16]
 800c8f2:	1a98      	subs	r0, r3, r2
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	b2f6      	uxtb	r6, r6
 800c8f8:	4283      	cmp	r3, r0
 800c8fa:	4637      	mov	r7, r6
 800c8fc:	dc05      	bgt.n	800c90a <__swbuf_r+0x4e>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4628      	mov	r0, r5
 800c902:	f7ff ffb3 	bl	800c86c <_fflush_r>
 800c906:	2800      	cmp	r0, #0
 800c908:	d1ed      	bne.n	800c8e6 <__swbuf_r+0x2a>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	60a3      	str	r3, [r4, #8]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	701e      	strb	r6, [r3, #0]
 800c918:	6962      	ldr	r2, [r4, #20]
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d004      	beq.n	800c92a <__swbuf_r+0x6e>
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	07db      	lsls	r3, r3, #31
 800c924:	d5e1      	bpl.n	800c8ea <__swbuf_r+0x2e>
 800c926:	2e0a      	cmp	r6, #10
 800c928:	d1df      	bne.n	800c8ea <__swbuf_r+0x2e>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4628      	mov	r0, r5
 800c92e:	f7ff ff9d 	bl	800c86c <_fflush_r>
 800c932:	2800      	cmp	r0, #0
 800c934:	d0d9      	beq.n	800c8ea <__swbuf_r+0x2e>
 800c936:	e7d6      	b.n	800c8e6 <__swbuf_r+0x2a>

0800c938 <__swsetup_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4b29      	ldr	r3, [pc, #164]	@ (800c9e0 <__swsetup_r+0xa8>)
 800c93c:	4605      	mov	r5, r0
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	460c      	mov	r4, r1
 800c942:	b118      	cbz	r0, 800c94c <__swsetup_r+0x14>
 800c944:	6a03      	ldr	r3, [r0, #32]
 800c946:	b90b      	cbnz	r3, 800c94c <__swsetup_r+0x14>
 800c948:	f7fd f9ea 	bl	8009d20 <__sinit>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	0719      	lsls	r1, r3, #28
 800c952:	d422      	bmi.n	800c99a <__swsetup_r+0x62>
 800c954:	06da      	lsls	r2, r3, #27
 800c956:	d407      	bmi.n	800c968 <__swsetup_r+0x30>
 800c958:	2209      	movs	r2, #9
 800c95a:	602a      	str	r2, [r5, #0]
 800c95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	f04f 30ff 	mov.w	r0, #4294967295
 800c966:	e033      	b.n	800c9d0 <__swsetup_r+0x98>
 800c968:	0758      	lsls	r0, r3, #29
 800c96a:	d512      	bpl.n	800c992 <__swsetup_r+0x5a>
 800c96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c96e:	b141      	cbz	r1, 800c982 <__swsetup_r+0x4a>
 800c970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c974:	4299      	cmp	r1, r3
 800c976:	d002      	beq.n	800c97e <__swsetup_r+0x46>
 800c978:	4628      	mov	r0, r5
 800c97a:	f7fe f92b 	bl	800abd4 <_free_r>
 800c97e:	2300      	movs	r3, #0
 800c980:	6363      	str	r3, [r4, #52]	@ 0x34
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	2300      	movs	r3, #0
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f043 0308 	orr.w	r3, r3, #8
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	b94b      	cbnz	r3, 800c9b2 <__swsetup_r+0x7a>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9a8:	d003      	beq.n	800c9b2 <__swsetup_r+0x7a>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 fc3f 	bl	800d230 <__smakebuf_r>
 800c9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b6:	f013 0201 	ands.w	r2, r3, #1
 800c9ba:	d00a      	beq.n	800c9d2 <__swsetup_r+0x9a>
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60a2      	str	r2, [r4, #8]
 800c9c0:	6962      	ldr	r2, [r4, #20]
 800c9c2:	4252      	negs	r2, r2
 800c9c4:	61a2      	str	r2, [r4, #24]
 800c9c6:	6922      	ldr	r2, [r4, #16]
 800c9c8:	b942      	cbnz	r2, 800c9dc <__swsetup_r+0xa4>
 800c9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9ce:	d1c5      	bne.n	800c95c <__swsetup_r+0x24>
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
 800c9d2:	0799      	lsls	r1, r3, #30
 800c9d4:	bf58      	it	pl
 800c9d6:	6962      	ldrpl	r2, [r4, #20]
 800c9d8:	60a2      	str	r2, [r4, #8]
 800c9da:	e7f4      	b.n	800c9c6 <__swsetup_r+0x8e>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7f7      	b.n	800c9d0 <__swsetup_r+0x98>
 800c9e0:	240000c8 	.word	0x240000c8

0800c9e4 <memmove>:
 800c9e4:	4288      	cmp	r0, r1
 800c9e6:	b510      	push	{r4, lr}
 800c9e8:	eb01 0402 	add.w	r4, r1, r2
 800c9ec:	d902      	bls.n	800c9f4 <memmove+0x10>
 800c9ee:	4284      	cmp	r4, r0
 800c9f0:	4623      	mov	r3, r4
 800c9f2:	d807      	bhi.n	800ca04 <memmove+0x20>
 800c9f4:	1e43      	subs	r3, r0, #1
 800c9f6:	42a1      	cmp	r1, r4
 800c9f8:	d008      	beq.n	800ca0c <memmove+0x28>
 800c9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca02:	e7f8      	b.n	800c9f6 <memmove+0x12>
 800ca04:	4402      	add	r2, r0
 800ca06:	4601      	mov	r1, r0
 800ca08:	428a      	cmp	r2, r1
 800ca0a:	d100      	bne.n	800ca0e <memmove+0x2a>
 800ca0c:	bd10      	pop	{r4, pc}
 800ca0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca16:	e7f7      	b.n	800ca08 <memmove+0x24>

0800ca18 <_raise_r>:
 800ca18:	291f      	cmp	r1, #31
 800ca1a:	b538      	push	{r3, r4, r5, lr}
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	d904      	bls.n	800ca2c <_raise_r+0x14>
 800ca22:	2316      	movs	r3, #22
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca2e:	b112      	cbz	r2, 800ca36 <_raise_r+0x1e>
 800ca30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca34:	b94b      	cbnz	r3, 800ca4a <_raise_r+0x32>
 800ca36:	4628      	mov	r0, r5
 800ca38:	f000 f830 	bl	800ca9c <_getpid_r>
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	4601      	mov	r1, r0
 800ca40:	4628      	mov	r0, r5
 800ca42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca46:	f000 b817 	b.w	800ca78 <_kill_r>
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d00a      	beq.n	800ca64 <_raise_r+0x4c>
 800ca4e:	1c59      	adds	r1, r3, #1
 800ca50:	d103      	bne.n	800ca5a <_raise_r+0x42>
 800ca52:	2316      	movs	r3, #22
 800ca54:	6003      	str	r3, [r0, #0]
 800ca56:	2001      	movs	r0, #1
 800ca58:	e7e7      	b.n	800ca2a <_raise_r+0x12>
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca60:	4620      	mov	r0, r4
 800ca62:	4798      	blx	r3
 800ca64:	2000      	movs	r0, #0
 800ca66:	e7e0      	b.n	800ca2a <_raise_r+0x12>

0800ca68 <raise>:
 800ca68:	4b02      	ldr	r3, [pc, #8]	@ (800ca74 <raise+0xc>)
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	f7ff bfd3 	b.w	800ca18 <_raise_r>
 800ca72:	bf00      	nop
 800ca74:	240000c8 	.word	0x240000c8

0800ca78 <_kill_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d07      	ldr	r5, [pc, #28]	@ (800ca98 <_kill_r+0x20>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	4611      	mov	r1, r2
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	f7f4 fbe5 	bl	8001254 <_kill>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	d102      	bne.n	800ca94 <_kill_r+0x1c>
 800ca8e:	682b      	ldr	r3, [r5, #0]
 800ca90:	b103      	cbz	r3, 800ca94 <_kill_r+0x1c>
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	bf00      	nop
 800ca98:	24004eb4 	.word	0x24004eb4

0800ca9c <_getpid_r>:
 800ca9c:	f7f4 bbd2 	b.w	8001244 <_getpid>

0800caa0 <nan>:
 800caa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800caa8 <nan+0x8>
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	00000000 	.word	0x00000000
 800caac:	7ff80000 	.word	0x7ff80000

0800cab0 <_calloc_r>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	fba1 5402 	umull	r5, r4, r1, r2
 800cab6:	b93c      	cbnz	r4, 800cac8 <_calloc_r+0x18>
 800cab8:	4629      	mov	r1, r5
 800caba:	f7fc f9d7 	bl	8008e6c <_malloc_r>
 800cabe:	4606      	mov	r6, r0
 800cac0:	b928      	cbnz	r0, 800cace <_calloc_r+0x1e>
 800cac2:	2600      	movs	r6, #0
 800cac4:	4630      	mov	r0, r6
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	220c      	movs	r2, #12
 800caca:	6002      	str	r2, [r0, #0]
 800cacc:	e7f9      	b.n	800cac2 <_calloc_r+0x12>
 800cace:	462a      	mov	r2, r5
 800cad0:	4621      	mov	r1, r4
 800cad2:	f7fd f9d0 	bl	8009e76 <memset>
 800cad6:	e7f5      	b.n	800cac4 <_calloc_r+0x14>

0800cad8 <rshift>:
 800cad8:	6903      	ldr	r3, [r0, #16]
 800cada:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cae6:	f100 0414 	add.w	r4, r0, #20
 800caea:	dd45      	ble.n	800cb78 <rshift+0xa0>
 800caec:	f011 011f 	ands.w	r1, r1, #31
 800caf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800caf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caf8:	d10c      	bne.n	800cb14 <rshift+0x3c>
 800cafa:	f100 0710 	add.w	r7, r0, #16
 800cafe:	4629      	mov	r1, r5
 800cb00:	42b1      	cmp	r1, r6
 800cb02:	d334      	bcc.n	800cb6e <rshift+0x96>
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	1eea      	subs	r2, r5, #3
 800cb0a:	4296      	cmp	r6, r2
 800cb0c:	bf38      	it	cc
 800cb0e:	2300      	movcc	r3, #0
 800cb10:	4423      	add	r3, r4
 800cb12:	e015      	b.n	800cb40 <rshift+0x68>
 800cb14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb18:	f1c1 0820 	rsb	r8, r1, #32
 800cb1c:	40cf      	lsrs	r7, r1
 800cb1e:	f105 0e04 	add.w	lr, r5, #4
 800cb22:	46a1      	mov	r9, r4
 800cb24:	4576      	cmp	r6, lr
 800cb26:	46f4      	mov	ip, lr
 800cb28:	d815      	bhi.n	800cb56 <rshift+0x7e>
 800cb2a:	1a9a      	subs	r2, r3, r2
 800cb2c:	0092      	lsls	r2, r2, #2
 800cb2e:	3a04      	subs	r2, #4
 800cb30:	3501      	adds	r5, #1
 800cb32:	42ae      	cmp	r6, r5
 800cb34:	bf38      	it	cc
 800cb36:	2200      	movcc	r2, #0
 800cb38:	18a3      	adds	r3, r4, r2
 800cb3a:	50a7      	str	r7, [r4, r2]
 800cb3c:	b107      	cbz	r7, 800cb40 <rshift+0x68>
 800cb3e:	3304      	adds	r3, #4
 800cb40:	1b1a      	subs	r2, r3, r4
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb48:	bf08      	it	eq
 800cb4a:	2300      	moveq	r3, #0
 800cb4c:	6102      	str	r2, [r0, #16]
 800cb4e:	bf08      	it	eq
 800cb50:	6143      	streq	r3, [r0, #20]
 800cb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb56:	f8dc c000 	ldr.w	ip, [ip]
 800cb5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb5e:	ea4c 0707 	orr.w	r7, ip, r7
 800cb62:	f849 7b04 	str.w	r7, [r9], #4
 800cb66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb6a:	40cf      	lsrs	r7, r1
 800cb6c:	e7da      	b.n	800cb24 <rshift+0x4c>
 800cb6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb72:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb76:	e7c3      	b.n	800cb00 <rshift+0x28>
 800cb78:	4623      	mov	r3, r4
 800cb7a:	e7e1      	b.n	800cb40 <rshift+0x68>

0800cb7c <__hexdig_fun>:
 800cb7c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb80:	2b09      	cmp	r3, #9
 800cb82:	d802      	bhi.n	800cb8a <__hexdig_fun+0xe>
 800cb84:	3820      	subs	r0, #32
 800cb86:	b2c0      	uxtb	r0, r0
 800cb88:	4770      	bx	lr
 800cb8a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb8e:	2b05      	cmp	r3, #5
 800cb90:	d801      	bhi.n	800cb96 <__hexdig_fun+0x1a>
 800cb92:	3847      	subs	r0, #71	@ 0x47
 800cb94:	e7f7      	b.n	800cb86 <__hexdig_fun+0xa>
 800cb96:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb9a:	2b05      	cmp	r3, #5
 800cb9c:	d801      	bhi.n	800cba2 <__hexdig_fun+0x26>
 800cb9e:	3827      	subs	r0, #39	@ 0x27
 800cba0:	e7f1      	b.n	800cb86 <__hexdig_fun+0xa>
 800cba2:	2000      	movs	r0, #0
 800cba4:	4770      	bx	lr
	...

0800cba8 <__gethex>:
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbac:	b085      	sub	sp, #20
 800cbae:	468a      	mov	sl, r1
 800cbb0:	9302      	str	r3, [sp, #8]
 800cbb2:	680b      	ldr	r3, [r1, #0]
 800cbb4:	9001      	str	r0, [sp, #4]
 800cbb6:	4690      	mov	r8, r2
 800cbb8:	1c9c      	adds	r4, r3, #2
 800cbba:	46a1      	mov	r9, r4
 800cbbc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cbc0:	2830      	cmp	r0, #48	@ 0x30
 800cbc2:	d0fa      	beq.n	800cbba <__gethex+0x12>
 800cbc4:	eba9 0303 	sub.w	r3, r9, r3
 800cbc8:	f1a3 0b02 	sub.w	fp, r3, #2
 800cbcc:	f7ff ffd6 	bl	800cb7c <__hexdig_fun>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d168      	bne.n	800cca8 <__gethex+0x100>
 800cbd6:	49a0      	ldr	r1, [pc, #640]	@ (800ce58 <__gethex+0x2b0>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	4648      	mov	r0, r9
 800cbdc:	f7fd f953 	bl	8009e86 <strncmp>
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d167      	bne.n	800ccb6 <__gethex+0x10e>
 800cbe6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cbea:	4626      	mov	r6, r4
 800cbec:	f7ff ffc6 	bl	800cb7c <__hexdig_fun>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d062      	beq.n	800ccba <__gethex+0x112>
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	7818      	ldrb	r0, [r3, #0]
 800cbf8:	2830      	cmp	r0, #48	@ 0x30
 800cbfa:	4699      	mov	r9, r3
 800cbfc:	f103 0301 	add.w	r3, r3, #1
 800cc00:	d0f9      	beq.n	800cbf6 <__gethex+0x4e>
 800cc02:	f7ff ffbb 	bl	800cb7c <__hexdig_fun>
 800cc06:	fab0 f580 	clz	r5, r0
 800cc0a:	096d      	lsrs	r5, r5, #5
 800cc0c:	f04f 0b01 	mov.w	fp, #1
 800cc10:	464a      	mov	r2, r9
 800cc12:	4616      	mov	r6, r2
 800cc14:	3201      	adds	r2, #1
 800cc16:	7830      	ldrb	r0, [r6, #0]
 800cc18:	f7ff ffb0 	bl	800cb7c <__hexdig_fun>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d1f8      	bne.n	800cc12 <__gethex+0x6a>
 800cc20:	498d      	ldr	r1, [pc, #564]	@ (800ce58 <__gethex+0x2b0>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7fd f92e 	bl	8009e86 <strncmp>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d13f      	bne.n	800ccae <__gethex+0x106>
 800cc2e:	b944      	cbnz	r4, 800cc42 <__gethex+0x9a>
 800cc30:	1c74      	adds	r4, r6, #1
 800cc32:	4622      	mov	r2, r4
 800cc34:	4616      	mov	r6, r2
 800cc36:	3201      	adds	r2, #1
 800cc38:	7830      	ldrb	r0, [r6, #0]
 800cc3a:	f7ff ff9f 	bl	800cb7c <__hexdig_fun>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d1f8      	bne.n	800cc34 <__gethex+0x8c>
 800cc42:	1ba4      	subs	r4, r4, r6
 800cc44:	00a7      	lsls	r7, r4, #2
 800cc46:	7833      	ldrb	r3, [r6, #0]
 800cc48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc4c:	2b50      	cmp	r3, #80	@ 0x50
 800cc4e:	d13e      	bne.n	800ccce <__gethex+0x126>
 800cc50:	7873      	ldrb	r3, [r6, #1]
 800cc52:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc54:	d033      	beq.n	800ccbe <__gethex+0x116>
 800cc56:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc58:	d034      	beq.n	800ccc4 <__gethex+0x11c>
 800cc5a:	1c71      	adds	r1, r6, #1
 800cc5c:	2400      	movs	r4, #0
 800cc5e:	7808      	ldrb	r0, [r1, #0]
 800cc60:	f7ff ff8c 	bl	800cb7c <__hexdig_fun>
 800cc64:	1e43      	subs	r3, r0, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b18      	cmp	r3, #24
 800cc6a:	d830      	bhi.n	800ccce <__gethex+0x126>
 800cc6c:	f1a0 0210 	sub.w	r2, r0, #16
 800cc70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc74:	f7ff ff82 	bl	800cb7c <__hexdig_fun>
 800cc78:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc7c:	fa5f fc8c 	uxtb.w	ip, ip
 800cc80:	f1bc 0f18 	cmp.w	ip, #24
 800cc84:	f04f 030a 	mov.w	r3, #10
 800cc88:	d91e      	bls.n	800ccc8 <__gethex+0x120>
 800cc8a:	b104      	cbz	r4, 800cc8e <__gethex+0xe6>
 800cc8c:	4252      	negs	r2, r2
 800cc8e:	4417      	add	r7, r2
 800cc90:	f8ca 1000 	str.w	r1, [sl]
 800cc94:	b1ed      	cbz	r5, 800ccd2 <__gethex+0x12a>
 800cc96:	f1bb 0f00 	cmp.w	fp, #0
 800cc9a:	bf0c      	ite	eq
 800cc9c:	2506      	moveq	r5, #6
 800cc9e:	2500      	movne	r5, #0
 800cca0:	4628      	mov	r0, r5
 800cca2:	b005      	add	sp, #20
 800cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca8:	2500      	movs	r5, #0
 800ccaa:	462c      	mov	r4, r5
 800ccac:	e7b0      	b.n	800cc10 <__gethex+0x68>
 800ccae:	2c00      	cmp	r4, #0
 800ccb0:	d1c7      	bne.n	800cc42 <__gethex+0x9a>
 800ccb2:	4627      	mov	r7, r4
 800ccb4:	e7c7      	b.n	800cc46 <__gethex+0x9e>
 800ccb6:	464e      	mov	r6, r9
 800ccb8:	462f      	mov	r7, r5
 800ccba:	2501      	movs	r5, #1
 800ccbc:	e7c3      	b.n	800cc46 <__gethex+0x9e>
 800ccbe:	2400      	movs	r4, #0
 800ccc0:	1cb1      	adds	r1, r6, #2
 800ccc2:	e7cc      	b.n	800cc5e <__gethex+0xb6>
 800ccc4:	2401      	movs	r4, #1
 800ccc6:	e7fb      	b.n	800ccc0 <__gethex+0x118>
 800ccc8:	fb03 0002 	mla	r0, r3, r2, r0
 800cccc:	e7ce      	b.n	800cc6c <__gethex+0xc4>
 800ccce:	4631      	mov	r1, r6
 800ccd0:	e7de      	b.n	800cc90 <__gethex+0xe8>
 800ccd2:	eba6 0309 	sub.w	r3, r6, r9
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	4629      	mov	r1, r5
 800ccda:	2b07      	cmp	r3, #7
 800ccdc:	dc0a      	bgt.n	800ccf4 <__gethex+0x14c>
 800ccde:	9801      	ldr	r0, [sp, #4]
 800cce0:	f7fd ffc2 	bl	800ac68 <_Balloc>
 800cce4:	4604      	mov	r4, r0
 800cce6:	b940      	cbnz	r0, 800ccfa <__gethex+0x152>
 800cce8:	4b5c      	ldr	r3, [pc, #368]	@ (800ce5c <__gethex+0x2b4>)
 800ccea:	4602      	mov	r2, r0
 800ccec:	21e4      	movs	r1, #228	@ 0xe4
 800ccee:	485c      	ldr	r0, [pc, #368]	@ (800ce60 <__gethex+0x2b8>)
 800ccf0:	f7fc f86c 	bl	8008dcc <__assert_func>
 800ccf4:	3101      	adds	r1, #1
 800ccf6:	105b      	asrs	r3, r3, #1
 800ccf8:	e7ef      	b.n	800ccda <__gethex+0x132>
 800ccfa:	f100 0a14 	add.w	sl, r0, #20
 800ccfe:	2300      	movs	r3, #0
 800cd00:	4655      	mov	r5, sl
 800cd02:	469b      	mov	fp, r3
 800cd04:	45b1      	cmp	r9, r6
 800cd06:	d337      	bcc.n	800cd78 <__gethex+0x1d0>
 800cd08:	f845 bb04 	str.w	fp, [r5], #4
 800cd0c:	eba5 050a 	sub.w	r5, r5, sl
 800cd10:	10ad      	asrs	r5, r5, #2
 800cd12:	6125      	str	r5, [r4, #16]
 800cd14:	4658      	mov	r0, fp
 800cd16:	f7fe f899 	bl	800ae4c <__hi0bits>
 800cd1a:	016d      	lsls	r5, r5, #5
 800cd1c:	f8d8 6000 	ldr.w	r6, [r8]
 800cd20:	1a2d      	subs	r5, r5, r0
 800cd22:	42b5      	cmp	r5, r6
 800cd24:	dd54      	ble.n	800cdd0 <__gethex+0x228>
 800cd26:	1bad      	subs	r5, r5, r6
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7fe fc2a 	bl	800b584 <__any_on>
 800cd30:	4681      	mov	r9, r0
 800cd32:	b178      	cbz	r0, 800cd54 <__gethex+0x1ac>
 800cd34:	1e6b      	subs	r3, r5, #1
 800cd36:	1159      	asrs	r1, r3, #5
 800cd38:	f003 021f 	and.w	r2, r3, #31
 800cd3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd40:	f04f 0901 	mov.w	r9, #1
 800cd44:	fa09 f202 	lsl.w	r2, r9, r2
 800cd48:	420a      	tst	r2, r1
 800cd4a:	d003      	beq.n	800cd54 <__gethex+0x1ac>
 800cd4c:	454b      	cmp	r3, r9
 800cd4e:	dc36      	bgt.n	800cdbe <__gethex+0x216>
 800cd50:	f04f 0902 	mov.w	r9, #2
 800cd54:	4629      	mov	r1, r5
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7ff febe 	bl	800cad8 <rshift>
 800cd5c:	442f      	add	r7, r5
 800cd5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd62:	42bb      	cmp	r3, r7
 800cd64:	da42      	bge.n	800cdec <__gethex+0x244>
 800cd66:	9801      	ldr	r0, [sp, #4]
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f7fd ffbd 	bl	800ace8 <_Bfree>
 800cd6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd70:	2300      	movs	r3, #0
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	25a3      	movs	r5, #163	@ 0xa3
 800cd76:	e793      	b.n	800cca0 <__gethex+0xf8>
 800cd78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd7c:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd7e:	d012      	beq.n	800cda6 <__gethex+0x1fe>
 800cd80:	2b20      	cmp	r3, #32
 800cd82:	d104      	bne.n	800cd8e <__gethex+0x1e6>
 800cd84:	f845 bb04 	str.w	fp, [r5], #4
 800cd88:	f04f 0b00 	mov.w	fp, #0
 800cd8c:	465b      	mov	r3, fp
 800cd8e:	7830      	ldrb	r0, [r6, #0]
 800cd90:	9303      	str	r3, [sp, #12]
 800cd92:	f7ff fef3 	bl	800cb7c <__hexdig_fun>
 800cd96:	9b03      	ldr	r3, [sp, #12]
 800cd98:	f000 000f 	and.w	r0, r0, #15
 800cd9c:	4098      	lsls	r0, r3
 800cd9e:	ea4b 0b00 	orr.w	fp, fp, r0
 800cda2:	3304      	adds	r3, #4
 800cda4:	e7ae      	b.n	800cd04 <__gethex+0x15c>
 800cda6:	45b1      	cmp	r9, r6
 800cda8:	d8ea      	bhi.n	800cd80 <__gethex+0x1d8>
 800cdaa:	492b      	ldr	r1, [pc, #172]	@ (800ce58 <__gethex+0x2b0>)
 800cdac:	9303      	str	r3, [sp, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f7fd f868 	bl	8009e86 <strncmp>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1e1      	bne.n	800cd80 <__gethex+0x1d8>
 800cdbc:	e7a2      	b.n	800cd04 <__gethex+0x15c>
 800cdbe:	1ea9      	subs	r1, r5, #2
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f7fe fbdf 	bl	800b584 <__any_on>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0c2      	beq.n	800cd50 <__gethex+0x1a8>
 800cdca:	f04f 0903 	mov.w	r9, #3
 800cdce:	e7c1      	b.n	800cd54 <__gethex+0x1ac>
 800cdd0:	da09      	bge.n	800cde6 <__gethex+0x23e>
 800cdd2:	1b75      	subs	r5, r6, r5
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	9801      	ldr	r0, [sp, #4]
 800cdd8:	462a      	mov	r2, r5
 800cdda:	f7fe f99d 	bl	800b118 <__lshift>
 800cdde:	1b7f      	subs	r7, r7, r5
 800cde0:	4604      	mov	r4, r0
 800cde2:	f100 0a14 	add.w	sl, r0, #20
 800cde6:	f04f 0900 	mov.w	r9, #0
 800cdea:	e7b8      	b.n	800cd5e <__gethex+0x1b6>
 800cdec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdf0:	42bd      	cmp	r5, r7
 800cdf2:	dd6f      	ble.n	800ced4 <__gethex+0x32c>
 800cdf4:	1bed      	subs	r5, r5, r7
 800cdf6:	42ae      	cmp	r6, r5
 800cdf8:	dc34      	bgt.n	800ce64 <__gethex+0x2bc>
 800cdfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d022      	beq.n	800ce48 <__gethex+0x2a0>
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d024      	beq.n	800ce50 <__gethex+0x2a8>
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d115      	bne.n	800ce36 <__gethex+0x28e>
 800ce0a:	42ae      	cmp	r6, r5
 800ce0c:	d113      	bne.n	800ce36 <__gethex+0x28e>
 800ce0e:	2e01      	cmp	r6, #1
 800ce10:	d10b      	bne.n	800ce2a <__gethex+0x282>
 800ce12:	9a02      	ldr	r2, [sp, #8]
 800ce14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	6123      	str	r3, [r4, #16]
 800ce1e:	f8ca 3000 	str.w	r3, [sl]
 800ce22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce24:	2562      	movs	r5, #98	@ 0x62
 800ce26:	601c      	str	r4, [r3, #0]
 800ce28:	e73a      	b.n	800cca0 <__gethex+0xf8>
 800ce2a:	1e71      	subs	r1, r6, #1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7fe fba9 	bl	800b584 <__any_on>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d1ed      	bne.n	800ce12 <__gethex+0x26a>
 800ce36:	9801      	ldr	r0, [sp, #4]
 800ce38:	4621      	mov	r1, r4
 800ce3a:	f7fd ff55 	bl	800ace8 <_Bfree>
 800ce3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce40:	2300      	movs	r3, #0
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	2550      	movs	r5, #80	@ 0x50
 800ce46:	e72b      	b.n	800cca0 <__gethex+0xf8>
 800ce48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1f3      	bne.n	800ce36 <__gethex+0x28e>
 800ce4e:	e7e0      	b.n	800ce12 <__gethex+0x26a>
 800ce50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1dd      	bne.n	800ce12 <__gethex+0x26a>
 800ce56:	e7ee      	b.n	800ce36 <__gethex+0x28e>
 800ce58:	0800d870 	.word	0x0800d870
 800ce5c:	0800d704 	.word	0x0800d704
 800ce60:	0800d9e2 	.word	0x0800d9e2
 800ce64:	1e6f      	subs	r7, r5, #1
 800ce66:	f1b9 0f00 	cmp.w	r9, #0
 800ce6a:	d130      	bne.n	800cece <__gethex+0x326>
 800ce6c:	b127      	cbz	r7, 800ce78 <__gethex+0x2d0>
 800ce6e:	4639      	mov	r1, r7
 800ce70:	4620      	mov	r0, r4
 800ce72:	f7fe fb87 	bl	800b584 <__any_on>
 800ce76:	4681      	mov	r9, r0
 800ce78:	117a      	asrs	r2, r7, #5
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce80:	f007 071f 	and.w	r7, r7, #31
 800ce84:	40bb      	lsls	r3, r7
 800ce86:	4213      	tst	r3, r2
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	bf18      	it	ne
 800ce8e:	f049 0902 	orrne.w	r9, r9, #2
 800ce92:	f7ff fe21 	bl	800cad8 <rshift>
 800ce96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce9a:	1b76      	subs	r6, r6, r5
 800ce9c:	2502      	movs	r5, #2
 800ce9e:	f1b9 0f00 	cmp.w	r9, #0
 800cea2:	d047      	beq.n	800cf34 <__gethex+0x38c>
 800cea4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d015      	beq.n	800ced8 <__gethex+0x330>
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d017      	beq.n	800cee0 <__gethex+0x338>
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d109      	bne.n	800cec8 <__gethex+0x320>
 800ceb4:	f019 0f02 	tst.w	r9, #2
 800ceb8:	d006      	beq.n	800cec8 <__gethex+0x320>
 800ceba:	f8da 3000 	ldr.w	r3, [sl]
 800cebe:	ea49 0903 	orr.w	r9, r9, r3
 800cec2:	f019 0f01 	tst.w	r9, #1
 800cec6:	d10e      	bne.n	800cee6 <__gethex+0x33e>
 800cec8:	f045 0510 	orr.w	r5, r5, #16
 800cecc:	e032      	b.n	800cf34 <__gethex+0x38c>
 800cece:	f04f 0901 	mov.w	r9, #1
 800ced2:	e7d1      	b.n	800ce78 <__gethex+0x2d0>
 800ced4:	2501      	movs	r5, #1
 800ced6:	e7e2      	b.n	800ce9e <__gethex+0x2f6>
 800ced8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceda:	f1c3 0301 	rsb	r3, r3, #1
 800cede:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0f0      	beq.n	800cec8 <__gethex+0x320>
 800cee6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ceea:	f104 0314 	add.w	r3, r4, #20
 800ceee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cef2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cef6:	f04f 0c00 	mov.w	ip, #0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf00:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf04:	d01b      	beq.n	800cf3e <__gethex+0x396>
 800cf06:	3201      	adds	r2, #1
 800cf08:	6002      	str	r2, [r0, #0]
 800cf0a:	2d02      	cmp	r5, #2
 800cf0c:	f104 0314 	add.w	r3, r4, #20
 800cf10:	d13c      	bne.n	800cf8c <__gethex+0x3e4>
 800cf12:	f8d8 2000 	ldr.w	r2, [r8]
 800cf16:	3a01      	subs	r2, #1
 800cf18:	42b2      	cmp	r2, r6
 800cf1a:	d109      	bne.n	800cf30 <__gethex+0x388>
 800cf1c:	1171      	asrs	r1, r6, #5
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf24:	f006 061f 	and.w	r6, r6, #31
 800cf28:	fa02 f606 	lsl.w	r6, r2, r6
 800cf2c:	421e      	tst	r6, r3
 800cf2e:	d13a      	bne.n	800cfa6 <__gethex+0x3fe>
 800cf30:	f045 0520 	orr.w	r5, r5, #32
 800cf34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf36:	601c      	str	r4, [r3, #0]
 800cf38:	9b02      	ldr	r3, [sp, #8]
 800cf3a:	601f      	str	r7, [r3, #0]
 800cf3c:	e6b0      	b.n	800cca0 <__gethex+0xf8>
 800cf3e:	4299      	cmp	r1, r3
 800cf40:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf44:	d8d9      	bhi.n	800cefa <__gethex+0x352>
 800cf46:	68a3      	ldr	r3, [r4, #8]
 800cf48:	459b      	cmp	fp, r3
 800cf4a:	db17      	blt.n	800cf7c <__gethex+0x3d4>
 800cf4c:	6861      	ldr	r1, [r4, #4]
 800cf4e:	9801      	ldr	r0, [sp, #4]
 800cf50:	3101      	adds	r1, #1
 800cf52:	f7fd fe89 	bl	800ac68 <_Balloc>
 800cf56:	4681      	mov	r9, r0
 800cf58:	b918      	cbnz	r0, 800cf62 <__gethex+0x3ba>
 800cf5a:	4b1a      	ldr	r3, [pc, #104]	@ (800cfc4 <__gethex+0x41c>)
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	2184      	movs	r1, #132	@ 0x84
 800cf60:	e6c5      	b.n	800ccee <__gethex+0x146>
 800cf62:	6922      	ldr	r2, [r4, #16]
 800cf64:	3202      	adds	r2, #2
 800cf66:	f104 010c 	add.w	r1, r4, #12
 800cf6a:	0092      	lsls	r2, r2, #2
 800cf6c:	300c      	adds	r0, #12
 800cf6e:	f7fd f836 	bl	8009fde <memcpy>
 800cf72:	4621      	mov	r1, r4
 800cf74:	9801      	ldr	r0, [sp, #4]
 800cf76:	f7fd feb7 	bl	800ace8 <_Bfree>
 800cf7a:	464c      	mov	r4, r9
 800cf7c:	6923      	ldr	r3, [r4, #16]
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf84:	6122      	str	r2, [r4, #16]
 800cf86:	2201      	movs	r2, #1
 800cf88:	615a      	str	r2, [r3, #20]
 800cf8a:	e7be      	b.n	800cf0a <__gethex+0x362>
 800cf8c:	6922      	ldr	r2, [r4, #16]
 800cf8e:	455a      	cmp	r2, fp
 800cf90:	dd0b      	ble.n	800cfaa <__gethex+0x402>
 800cf92:	2101      	movs	r1, #1
 800cf94:	4620      	mov	r0, r4
 800cf96:	f7ff fd9f 	bl	800cad8 <rshift>
 800cf9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf9e:	3701      	adds	r7, #1
 800cfa0:	42bb      	cmp	r3, r7
 800cfa2:	f6ff aee0 	blt.w	800cd66 <__gethex+0x1be>
 800cfa6:	2501      	movs	r5, #1
 800cfa8:	e7c2      	b.n	800cf30 <__gethex+0x388>
 800cfaa:	f016 061f 	ands.w	r6, r6, #31
 800cfae:	d0fa      	beq.n	800cfa6 <__gethex+0x3fe>
 800cfb0:	4453      	add	r3, sl
 800cfb2:	f1c6 0620 	rsb	r6, r6, #32
 800cfb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cfba:	f7fd ff47 	bl	800ae4c <__hi0bits>
 800cfbe:	42b0      	cmp	r0, r6
 800cfc0:	dbe7      	blt.n	800cf92 <__gethex+0x3ea>
 800cfc2:	e7f0      	b.n	800cfa6 <__gethex+0x3fe>
 800cfc4:	0800d704 	.word	0x0800d704

0800cfc8 <L_shift>:
 800cfc8:	f1c2 0208 	rsb	r2, r2, #8
 800cfcc:	0092      	lsls	r2, r2, #2
 800cfce:	b570      	push	{r4, r5, r6, lr}
 800cfd0:	f1c2 0620 	rsb	r6, r2, #32
 800cfd4:	6843      	ldr	r3, [r0, #4]
 800cfd6:	6804      	ldr	r4, [r0, #0]
 800cfd8:	fa03 f506 	lsl.w	r5, r3, r6
 800cfdc:	432c      	orrs	r4, r5
 800cfde:	40d3      	lsrs	r3, r2
 800cfe0:	6004      	str	r4, [r0, #0]
 800cfe2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfe6:	4288      	cmp	r0, r1
 800cfe8:	d3f4      	bcc.n	800cfd4 <L_shift+0xc>
 800cfea:	bd70      	pop	{r4, r5, r6, pc}

0800cfec <__match>:
 800cfec:	b530      	push	{r4, r5, lr}
 800cfee:	6803      	ldr	r3, [r0, #0]
 800cff0:	3301      	adds	r3, #1
 800cff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cff6:	b914      	cbnz	r4, 800cffe <__match+0x12>
 800cff8:	6003      	str	r3, [r0, #0]
 800cffa:	2001      	movs	r0, #1
 800cffc:	bd30      	pop	{r4, r5, pc}
 800cffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d002:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d006:	2d19      	cmp	r5, #25
 800d008:	bf98      	it	ls
 800d00a:	3220      	addls	r2, #32
 800d00c:	42a2      	cmp	r2, r4
 800d00e:	d0f0      	beq.n	800cff2 <__match+0x6>
 800d010:	2000      	movs	r0, #0
 800d012:	e7f3      	b.n	800cffc <__match+0x10>

0800d014 <__hexnan>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	680b      	ldr	r3, [r1, #0]
 800d01a:	6801      	ldr	r1, [r0, #0]
 800d01c:	115e      	asrs	r6, r3, #5
 800d01e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d022:	f013 031f 	ands.w	r3, r3, #31
 800d026:	b087      	sub	sp, #28
 800d028:	bf18      	it	ne
 800d02a:	3604      	addne	r6, #4
 800d02c:	2500      	movs	r5, #0
 800d02e:	1f37      	subs	r7, r6, #4
 800d030:	4682      	mov	sl, r0
 800d032:	4690      	mov	r8, r2
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	f846 5c04 	str.w	r5, [r6, #-4]
 800d03a:	46b9      	mov	r9, r7
 800d03c:	463c      	mov	r4, r7
 800d03e:	9502      	str	r5, [sp, #8]
 800d040:	46ab      	mov	fp, r5
 800d042:	784a      	ldrb	r2, [r1, #1]
 800d044:	1c4b      	adds	r3, r1, #1
 800d046:	9303      	str	r3, [sp, #12]
 800d048:	b342      	cbz	r2, 800d09c <__hexnan+0x88>
 800d04a:	4610      	mov	r0, r2
 800d04c:	9105      	str	r1, [sp, #20]
 800d04e:	9204      	str	r2, [sp, #16]
 800d050:	f7ff fd94 	bl	800cb7c <__hexdig_fun>
 800d054:	2800      	cmp	r0, #0
 800d056:	d151      	bne.n	800d0fc <__hexnan+0xe8>
 800d058:	9a04      	ldr	r2, [sp, #16]
 800d05a:	9905      	ldr	r1, [sp, #20]
 800d05c:	2a20      	cmp	r2, #32
 800d05e:	d818      	bhi.n	800d092 <__hexnan+0x7e>
 800d060:	9b02      	ldr	r3, [sp, #8]
 800d062:	459b      	cmp	fp, r3
 800d064:	dd13      	ble.n	800d08e <__hexnan+0x7a>
 800d066:	454c      	cmp	r4, r9
 800d068:	d206      	bcs.n	800d078 <__hexnan+0x64>
 800d06a:	2d07      	cmp	r5, #7
 800d06c:	dc04      	bgt.n	800d078 <__hexnan+0x64>
 800d06e:	462a      	mov	r2, r5
 800d070:	4649      	mov	r1, r9
 800d072:	4620      	mov	r0, r4
 800d074:	f7ff ffa8 	bl	800cfc8 <L_shift>
 800d078:	4544      	cmp	r4, r8
 800d07a:	d952      	bls.n	800d122 <__hexnan+0x10e>
 800d07c:	2300      	movs	r3, #0
 800d07e:	f1a4 0904 	sub.w	r9, r4, #4
 800d082:	f844 3c04 	str.w	r3, [r4, #-4]
 800d086:	f8cd b008 	str.w	fp, [sp, #8]
 800d08a:	464c      	mov	r4, r9
 800d08c:	461d      	mov	r5, r3
 800d08e:	9903      	ldr	r1, [sp, #12]
 800d090:	e7d7      	b.n	800d042 <__hexnan+0x2e>
 800d092:	2a29      	cmp	r2, #41	@ 0x29
 800d094:	d157      	bne.n	800d146 <__hexnan+0x132>
 800d096:	3102      	adds	r1, #2
 800d098:	f8ca 1000 	str.w	r1, [sl]
 800d09c:	f1bb 0f00 	cmp.w	fp, #0
 800d0a0:	d051      	beq.n	800d146 <__hexnan+0x132>
 800d0a2:	454c      	cmp	r4, r9
 800d0a4:	d206      	bcs.n	800d0b4 <__hexnan+0xa0>
 800d0a6:	2d07      	cmp	r5, #7
 800d0a8:	dc04      	bgt.n	800d0b4 <__hexnan+0xa0>
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7ff ff8a 	bl	800cfc8 <L_shift>
 800d0b4:	4544      	cmp	r4, r8
 800d0b6:	d936      	bls.n	800d126 <__hexnan+0x112>
 800d0b8:	f1a8 0204 	sub.w	r2, r8, #4
 800d0bc:	4623      	mov	r3, r4
 800d0be:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d0c6:	429f      	cmp	r7, r3
 800d0c8:	d2f9      	bcs.n	800d0be <__hexnan+0xaa>
 800d0ca:	1b3b      	subs	r3, r7, r4
 800d0cc:	f023 0303 	bic.w	r3, r3, #3
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	3401      	adds	r4, #1
 800d0d4:	3e03      	subs	r6, #3
 800d0d6:	42b4      	cmp	r4, r6
 800d0d8:	bf88      	it	hi
 800d0da:	2304      	movhi	r3, #4
 800d0dc:	4443      	add	r3, r8
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f843 2b04 	str.w	r2, [r3], #4
 800d0e4:	429f      	cmp	r7, r3
 800d0e6:	d2fb      	bcs.n	800d0e0 <__hexnan+0xcc>
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	b91b      	cbnz	r3, 800d0f4 <__hexnan+0xe0>
 800d0ec:	4547      	cmp	r7, r8
 800d0ee:	d128      	bne.n	800d142 <__hexnan+0x12e>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	2005      	movs	r0, #5
 800d0f6:	b007      	add	sp, #28
 800d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fc:	3501      	adds	r5, #1
 800d0fe:	2d08      	cmp	r5, #8
 800d100:	f10b 0b01 	add.w	fp, fp, #1
 800d104:	dd06      	ble.n	800d114 <__hexnan+0x100>
 800d106:	4544      	cmp	r4, r8
 800d108:	d9c1      	bls.n	800d08e <__hexnan+0x7a>
 800d10a:	2300      	movs	r3, #0
 800d10c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d110:	2501      	movs	r5, #1
 800d112:	3c04      	subs	r4, #4
 800d114:	6822      	ldr	r2, [r4, #0]
 800d116:	f000 000f 	and.w	r0, r0, #15
 800d11a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d11e:	6020      	str	r0, [r4, #0]
 800d120:	e7b5      	b.n	800d08e <__hexnan+0x7a>
 800d122:	2508      	movs	r5, #8
 800d124:	e7b3      	b.n	800d08e <__hexnan+0x7a>
 800d126:	9b01      	ldr	r3, [sp, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0dd      	beq.n	800d0e8 <__hexnan+0xd4>
 800d12c:	f1c3 0320 	rsb	r3, r3, #32
 800d130:	f04f 32ff 	mov.w	r2, #4294967295
 800d134:	40da      	lsrs	r2, r3
 800d136:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d13a:	4013      	ands	r3, r2
 800d13c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d140:	e7d2      	b.n	800d0e8 <__hexnan+0xd4>
 800d142:	3f04      	subs	r7, #4
 800d144:	e7d0      	b.n	800d0e8 <__hexnan+0xd4>
 800d146:	2004      	movs	r0, #4
 800d148:	e7d5      	b.n	800d0f6 <__hexnan+0xe2>

0800d14a <__ascii_mbtowc>:
 800d14a:	b082      	sub	sp, #8
 800d14c:	b901      	cbnz	r1, 800d150 <__ascii_mbtowc+0x6>
 800d14e:	a901      	add	r1, sp, #4
 800d150:	b142      	cbz	r2, 800d164 <__ascii_mbtowc+0x1a>
 800d152:	b14b      	cbz	r3, 800d168 <__ascii_mbtowc+0x1e>
 800d154:	7813      	ldrb	r3, [r2, #0]
 800d156:	600b      	str	r3, [r1, #0]
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	1e10      	subs	r0, r2, #0
 800d15c:	bf18      	it	ne
 800d15e:	2001      	movne	r0, #1
 800d160:	b002      	add	sp, #8
 800d162:	4770      	bx	lr
 800d164:	4610      	mov	r0, r2
 800d166:	e7fb      	b.n	800d160 <__ascii_mbtowc+0x16>
 800d168:	f06f 0001 	mvn.w	r0, #1
 800d16c:	e7f8      	b.n	800d160 <__ascii_mbtowc+0x16>

0800d16e <_realloc_r>:
 800d16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d172:	4680      	mov	r8, r0
 800d174:	4615      	mov	r5, r2
 800d176:	460c      	mov	r4, r1
 800d178:	b921      	cbnz	r1, 800d184 <_realloc_r+0x16>
 800d17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d17e:	4611      	mov	r1, r2
 800d180:	f7fb be74 	b.w	8008e6c <_malloc_r>
 800d184:	b92a      	cbnz	r2, 800d192 <_realloc_r+0x24>
 800d186:	f7fd fd25 	bl	800abd4 <_free_r>
 800d18a:	2400      	movs	r4, #0
 800d18c:	4620      	mov	r0, r4
 800d18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d192:	f000 f8ab 	bl	800d2ec <_malloc_usable_size_r>
 800d196:	4285      	cmp	r5, r0
 800d198:	4606      	mov	r6, r0
 800d19a:	d802      	bhi.n	800d1a2 <_realloc_r+0x34>
 800d19c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1a0:	d8f4      	bhi.n	800d18c <_realloc_r+0x1e>
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	f7fb fe61 	bl	8008e6c <_malloc_r>
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d0ec      	beq.n	800d18a <_realloc_r+0x1c>
 800d1b0:	42b5      	cmp	r5, r6
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	4621      	mov	r1, r4
 800d1b6:	bf28      	it	cs
 800d1b8:	4632      	movcs	r2, r6
 800d1ba:	f7fc ff10 	bl	8009fde <memcpy>
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	f7fd fd07 	bl	800abd4 <_free_r>
 800d1c6:	463c      	mov	r4, r7
 800d1c8:	e7e0      	b.n	800d18c <_realloc_r+0x1e>

0800d1ca <__ascii_wctomb>:
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	b141      	cbz	r1, 800d1e2 <__ascii_wctomb+0x18>
 800d1d0:	2aff      	cmp	r2, #255	@ 0xff
 800d1d2:	d904      	bls.n	800d1de <__ascii_wctomb+0x14>
 800d1d4:	228a      	movs	r2, #138	@ 0x8a
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1dc:	4770      	bx	lr
 800d1de:	700a      	strb	r2, [r1, #0]
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	4770      	bx	lr

0800d1e4 <__swhatbuf_r>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ec:	2900      	cmp	r1, #0
 800d1ee:	b096      	sub	sp, #88	@ 0x58
 800d1f0:	4615      	mov	r5, r2
 800d1f2:	461e      	mov	r6, r3
 800d1f4:	da0d      	bge.n	800d212 <__swhatbuf_r+0x2e>
 800d1f6:	89a3      	ldrh	r3, [r4, #12]
 800d1f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1fc:	f04f 0100 	mov.w	r1, #0
 800d200:	bf14      	ite	ne
 800d202:	2340      	movne	r3, #64	@ 0x40
 800d204:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d208:	2000      	movs	r0, #0
 800d20a:	6031      	str	r1, [r6, #0]
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	b016      	add	sp, #88	@ 0x58
 800d210:	bd70      	pop	{r4, r5, r6, pc}
 800d212:	466a      	mov	r2, sp
 800d214:	f000 f848 	bl	800d2a8 <_fstat_r>
 800d218:	2800      	cmp	r0, #0
 800d21a:	dbec      	blt.n	800d1f6 <__swhatbuf_r+0x12>
 800d21c:	9901      	ldr	r1, [sp, #4]
 800d21e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d222:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d226:	4259      	negs	r1, r3
 800d228:	4159      	adcs	r1, r3
 800d22a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d22e:	e7eb      	b.n	800d208 <__swhatbuf_r+0x24>

0800d230 <__smakebuf_r>:
 800d230:	898b      	ldrh	r3, [r1, #12]
 800d232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d234:	079d      	lsls	r5, r3, #30
 800d236:	4606      	mov	r6, r0
 800d238:	460c      	mov	r4, r1
 800d23a:	d507      	bpl.n	800d24c <__smakebuf_r+0x1c>
 800d23c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	2301      	movs	r3, #1
 800d246:	6163      	str	r3, [r4, #20]
 800d248:	b003      	add	sp, #12
 800d24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d24c:	ab01      	add	r3, sp, #4
 800d24e:	466a      	mov	r2, sp
 800d250:	f7ff ffc8 	bl	800d1e4 <__swhatbuf_r>
 800d254:	9f00      	ldr	r7, [sp, #0]
 800d256:	4605      	mov	r5, r0
 800d258:	4639      	mov	r1, r7
 800d25a:	4630      	mov	r0, r6
 800d25c:	f7fb fe06 	bl	8008e6c <_malloc_r>
 800d260:	b948      	cbnz	r0, 800d276 <__smakebuf_r+0x46>
 800d262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d266:	059a      	lsls	r2, r3, #22
 800d268:	d4ee      	bmi.n	800d248 <__smakebuf_r+0x18>
 800d26a:	f023 0303 	bic.w	r3, r3, #3
 800d26e:	f043 0302 	orr.w	r3, r3, #2
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	e7e2      	b.n	800d23c <__smakebuf_r+0xc>
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	6020      	str	r0, [r4, #0]
 800d27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d286:	b15b      	cbz	r3, 800d2a0 <__smakebuf_r+0x70>
 800d288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d28c:	4630      	mov	r0, r6
 800d28e:	f000 f81d 	bl	800d2cc <_isatty_r>
 800d292:	b128      	cbz	r0, 800d2a0 <__smakebuf_r+0x70>
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	f023 0303 	bic.w	r3, r3, #3
 800d29a:	f043 0301 	orr.w	r3, r3, #1
 800d29e:	81a3      	strh	r3, [r4, #12]
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	431d      	orrs	r5, r3
 800d2a4:	81a5      	strh	r5, [r4, #12]
 800d2a6:	e7cf      	b.n	800d248 <__smakebuf_r+0x18>

0800d2a8 <_fstat_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4d07      	ldr	r5, [pc, #28]	@ (800d2c8 <_fstat_r+0x20>)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	602b      	str	r3, [r5, #0]
 800d2b6:	f7f4 f82d 	bl	8001314 <_fstat>
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	d102      	bne.n	800d2c4 <_fstat_r+0x1c>
 800d2be:	682b      	ldr	r3, [r5, #0]
 800d2c0:	b103      	cbz	r3, 800d2c4 <_fstat_r+0x1c>
 800d2c2:	6023      	str	r3, [r4, #0]
 800d2c4:	bd38      	pop	{r3, r4, r5, pc}
 800d2c6:	bf00      	nop
 800d2c8:	24004eb4 	.word	0x24004eb4

0800d2cc <_isatty_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d06      	ldr	r5, [pc, #24]	@ (800d2e8 <_isatty_r+0x1c>)
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	f7f4 f82c 	bl	8001334 <_isatty>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_isatty_r+0x1a>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_isatty_r+0x1a>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	24004eb4 	.word	0x24004eb4

0800d2ec <_malloc_usable_size_r>:
 800d2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2f0:	1f18      	subs	r0, r3, #4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bfbc      	itt	lt
 800d2f6:	580b      	ldrlt	r3, [r1, r0]
 800d2f8:	18c0      	addlt	r0, r0, r3
 800d2fa:	4770      	bx	lr

0800d2fc <_init>:
 800d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fe:	bf00      	nop
 800d300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d302:	bc08      	pop	{r3}
 800d304:	469e      	mov	lr, r3
 800d306:	4770      	bx	lr

0800d308 <_fini>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	bf00      	nop
 800d30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30e:	bc08      	pop	{r3}
 800d310:	469e      	mov	lr, r3
 800d312:	4770      	bx	lr
