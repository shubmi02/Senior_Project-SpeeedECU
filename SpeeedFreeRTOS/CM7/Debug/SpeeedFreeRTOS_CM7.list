
SpeeedFreeRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800ea68  0800ea68  0000fa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f194  0800f194  00011284  2**0
                  CONTENTS
  4 .ARM          00000008  0800f194  0800f194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f19c  0800f19c  00011284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f19c  0800f19c  0001019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1a0  0800f1a0  000101a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  24000000  0800f1a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c38  24000284  0800f428  00011284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004ebc  0800f428  00011ebc  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  0800f428  00012000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00011284  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024d4e  00000000  00000000  000112b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a5d  00000000  00000000  00036000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001686  00000000  00000000  0003d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f44f  00000000  00000000  0003ee9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002645d  00000000  00000000  0007e2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001914f3  00000000  00000000  000a474a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00235c3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d48  00000000  00000000  00235c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0023e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000284 	.word	0x24000284
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ea4c 	.word	0x0800ea4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000288 	.word	0x24000288
 80002dc:	0800ea4c 	.word	0x0800ea4c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <SystemInit+0xfc>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000894 <SystemInit+0xfc>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <SystemInit+0xfc>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <SystemInit+0xfc>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <SystemInit+0x100>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	2b06      	cmp	r3, #6
 80007c2:	d807      	bhi.n	80007d4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c4:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <SystemInit+0x100>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	4a32      	ldr	r2, [pc, #200]	@ (8000898 <SystemInit+0x100>)
 80007ce:	f043 0307 	orr.w	r3, r3, #7
 80007d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SystemInit+0x104>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a30      	ldr	r2, [pc, #192]	@ (800089c <SystemInit+0x104>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <SystemInit+0x104>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <SystemInit+0x104>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	492c      	ldr	r1, [pc, #176]	@ (800089c <SystemInit+0x104>)
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <SystemInit+0x108>)
 80007ee:	4013      	ands	r3, r2
 80007f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <SystemInit+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d007      	beq.n	800080e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemInit+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 030f 	bic.w	r3, r3, #15
 8000806:	4a24      	ldr	r2, [pc, #144]	@ (8000898 <SystemInit+0x100>)
 8000808:	f043 0307 	orr.w	r3, r3, #7
 800080c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemInit+0x104>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <SystemInit+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemInit+0x104>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <SystemInit+0x104>)
 8000822:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <SystemInit+0x10c>)
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemInit+0x104>)
 8000828:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <SystemInit+0x110>)
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemInit+0x104>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <SystemInit+0x114>)
 8000830:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <SystemInit+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <SystemInit+0x104>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <SystemInit+0x114>)
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <SystemInit+0x104>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <SystemInit+0x104>)
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <SystemInit+0x114>)
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <SystemInit+0x104>)
 800084c:	2200      	movs	r2, #0
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0x104>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <SystemInit+0x104>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <SystemInit+0x104>)
 800085e:	2200      	movs	r2, #0
 8000860:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <SystemInit+0x118>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <SystemInit+0x118>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <SystemInit+0x11c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <SystemInit+0x120>)
 8000874:	4013      	ands	r3, r2
 8000876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800087a:	d202      	bcs.n	8000882 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <SystemInit+0x124>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <SystemInit+0x128>)
 8000884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000888:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	52002000 	.word	0x52002000
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	02020200 	.word	0x02020200
 80008a8:	01ff0000 	.word	0x01ff0000
 80008ac:	01010280 	.word	0x01010280
 80008b0:	580000c0 	.word	0x580000c0
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d101      	bne.n	80008de <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <rpmsg_send+0x3c>)
 80008dc:	e00c      	b.n	80008f8 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f008 f941 	bl	8008b78 <rpmsg_send_offchannel_raw>
 80008f6:	4603      	mov	r3, r0
					 len, true);
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	fffff829 	.word	0xfffff829

08000904 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2220      	movs	r2, #32
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4618      	mov	r0, r3
 800091a:	f00a fe6e 	bl	800b5fa <strncpy>
	ept->addr = src;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <getPercent>:
 * @param lowerBound lower border value
 * @param upperBound upper border value
 * @returns float4 value between 0 and 1
 */
float getPercent(float value, float lowerBound, float upperBound)
{
 800093e:	b480      	push	{r7}
 8000940:	b087      	sub	sp, #28
 8000942:	af00      	add	r7, sp, #0
 8000944:	ed87 0a03 	vstr	s0, [r7, #12]
 8000948:	edc7 0a02 	vstr	s1, [r7, #8]
 800094c:	ed87 1a01 	vstr	s2, [r7, #4]
	float percentage = (value - lowerBound) / (upperBound - lowerBound);
 8000950:	ed97 7a03 	vldr	s14, [r7, #12]
 8000954:	edd7 7a02 	vldr	s15, [r7, #8]
 8000958:	ee77 6a67 	vsub.f32	s13, s14, s15
 800095c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000960:	edd7 7a02 	vldr	s15, [r7, #8]
 8000964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800096c:	edc7 7a05 	vstr	s15, [r7, #20]
	if(percentage > 1) percentage = 1;
 8000970:	edd7 7a05 	vldr	s15, [r7, #20]
 8000974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000980:	dd02      	ble.n	8000988 <getPercent+0x4a>
 8000982:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000986:	617b      	str	r3, [r7, #20]
	if(percentage < 0) percentage = 0;
 8000988:	edd7 7a05 	vldr	s15, [r7, #20]
 800098c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000994:	d502      	bpl.n	800099c <getPercent+0x5e>
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

	return percentage;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	ee07 3a90 	vmov	s15, r3
}
 80009a2:	eeb0 0a67 	vmov.f32	s0, s15
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <rpmsg_recv_callback>:
static volatile int service_created;
volatile uint32_t received_data;	//received data (change to given struct)
volatile uint32_t received_data1;
static struct rpmsg_endpoint rp_endpoint;
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *prv)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	DataIdentifier *id = (DataIdentifier *)data;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	617b      	str	r3, [r7, #20]
	if(*id == TORQUE_SENSOR)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10c      	bne.n	80009e4 <rpmsg_recv_callback+0x34>
	{
		test = (TorqueEncoder *)data;
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	6013      	str	r3, [r2, #0]
		received_data = test->valueInt;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <rpmsg_recv_callback+0x4c>)
 80009d8:	6013      	str	r3, [r2, #0]
		received_data1 = test->sensor1;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <rpmsg_recv_callback+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <rpmsg_recv_callback+0x50>)
 80009e2:	6013      	str	r3, [r2, #0]
	}
	message_received = 1;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <rpmsg_recv_callback+0x54>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

	return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	240002c0 	.word	0x240002c0
 80009fc:	240002cc 	.word	0x240002cc
 8000a00:	240002d0 	.word	0x240002d0
 8000a04:	240002c4 	.word	0x240002c4

08000a08 <serice_destroy_cb>:
void serice_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	service_created = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <serice_destroy_cb+0x1c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	240002c8 	.word	0x240002c8

08000a28 <new_service_cb>:
void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	OPENAMP_create_endpoint(&rp_endpoint, name,
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <new_service_cb+0x2c>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <new_service_cb+0x30>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <new_service_cb+0x34>)
 8000a40:	f009 fce0 	bl	800a404 <OPENAMP_create_endpoint>
	          dest, rpmsg_recv_callback,
			  serice_destroy_cb);
	service_created = 1;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <new_service_cb+0x38>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08000a09 	.word	0x08000a09
 8000a58:	080009b1 	.word	0x080009b1
 8000a5c:	240002d4 	.word	0x240002d4
 8000a60:	240002c8 	.word	0x240002c8

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a6a:	f000 fb2f 	bl	80010cc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a6e:	4b63      	ldr	r3, [pc, #396]	@ (8000bfc <main+0x198>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11b      	bne.n	8000ab2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7a:	f3bf 8f4f 	dsb	sy
}
 8000a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
}
 8000a84:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a86:	4b5d      	ldr	r3, [pc, #372]	@ (8000bfc <main+0x198>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8e:	f3bf 8f4f 	dsb	sy
}
 8000a92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a94:	f3bf 8f6f 	isb	sy
}
 8000a98:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a9a:	4b58      	ldr	r3, [pc, #352]	@ (8000bfc <main+0x198>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a57      	ldr	r2, [pc, #348]	@ (8000bfc <main+0x198>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa6:	f3bf 8f4f 	dsb	sy
}
 8000aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aac:	f3bf 8f6f 	isb	sy
}
 8000ab0:	e000      	b.n	8000ab4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ab2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ab4:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <main+0x198>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d138      	bne.n	8000b32 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <main+0x198>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ace:	4b4b      	ldr	r3, [pc, #300]	@ (8000bfc <main+0x198>)
 8000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ad4:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	0b5b      	lsrs	r3, r3, #13
 8000ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ade:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000af2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	4940      	ldr	r1, [pc, #256]	@ (8000bfc <main+0x198>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ef      	bne.n	8000aea <main+0x86>
    } while(sets-- != 0U);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	60fa      	str	r2, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e5      	bne.n	8000ae0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
}
 8000b18:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b1a:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <main+0x198>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a37      	ldr	r2, [pc, #220]	@ (8000bfc <main+0x198>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b2c:	f3bf 8f6f 	isb	sy
}
 8000b30:	e000      	b.n	8000b34 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b32:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b38:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b3a:	bf00      	nop
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <main+0x19c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <main+0xee>
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	617a      	str	r2, [r7, #20]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dcf4      	bgt.n	8000b3c <main+0xd8>
  if ( timeout < 0 )
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da01      	bge.n	8000b5c <main+0xf8>
  {
  Error_Handler();
 8000b58:	f000 faf8 	bl	800114c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fc9e 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f862 	bl	8000c28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f8e0 	bl	8000d28 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <main+0x19c>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <main+0x19c>)
 8000b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <main+0x19c>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f001 f82c 	bl	8001be4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f001 f842 	bl	8001c18 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b98:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b9a:	bf00      	nop
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <main+0x19c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d104      	bne.n	8000bb2 <main+0x14e>
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	617a      	str	r2, [r7, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dcf4      	bgt.n	8000b9c <main+0x138>
if ( timeout < 0 )
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <main+0x158>
{
Error_Handler();
 8000bb8:	f000 fac8 	bl	800114c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f8e4 	bl	8000d88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc0:	f003 ff56 	bl	8004a70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <main+0x1a0>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480f      	ldr	r0, [pc, #60]	@ (8000c08 <main+0x1a4>)
 8000bca:	f003 ff9b 	bl	8004b04 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <main+0x1a8>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of txTask */
  txTaskHandle = osThreadNew(startTxTask, NULL, &txTask_attributes);
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <main+0x1ac>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <main+0x1b0>)
 8000bda:	f003 ff93 	bl	8004b04 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <main+0x1b4>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of calculateTask */
  calculateTaskHandle = osThreadNew(startCalculateTask, NULL, &calculateTask_attributes);
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <main+0x1b8>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <main+0x1bc>)
 8000bea:	f003 ff8b 	bl	8004b04 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <main+0x1c0>)
 8000bf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf4:	f003 ff60 	bl	8004ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <main+0x194>
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	58024400 	.word	0x58024400
 8000c04:	0800ec94 	.word	0x0800ec94
 8000c08:	08000e59 	.word	0x08000e59
 8000c0c:	240002a0 	.word	0x240002a0
 8000c10:	0800ecb8 	.word	0x0800ecb8
 8000c14:	08000f0d 	.word	0x08000f0d
 8000c18:	240002a4 	.word	0x240002a4
 8000c1c:	0800ecdc 	.word	0x0800ecdc
 8000c20:	08000fc1 	.word	0x08000fc1
 8000c24:	240002a8 	.word	0x240002a8

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	@ 0x70
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a fcc5 	bl	800b5c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00a fcbf 	bl	800b5c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c48:	2004      	movs	r0, #4
 8000c4a:	f001 f825 	bl	8001c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c5e:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <SystemClock_Config+0xf8>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c70:	4a2c      	ldr	r2, [pc, #176]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c84:	bf00      	nop
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <SystemClock_Config+0xfc>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c92:	d1f8      	bne.n	8000c86 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c94:	2303      	movs	r3, #3
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2340      	movs	r3, #64	@ 0x40
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f83a 	bl	8001d4c <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cde:	f000 fa35 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	233f      	movs	r3, #63	@ 0x3f
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fc7a 	bl	8002600 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d12:	f000 fa1b 	bl	800114c <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3770      	adds	r7, #112	@ 0x70
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58000400 	.word	0x58000400
 8000d24:	58024800 	.word	0x58024800

08000d28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0b0      	sub	sp, #192	@ 0xc0
 8000d2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	22c0      	movs	r2, #192	@ 0xc0
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00a fc46 	bl	800b5c6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d5a:	23c0      	movs	r3, #192	@ 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fffe 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d7a:	f000 f9e7 	bl	800114c <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	37c0      	adds	r7, #192	@ 0xc0
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */


	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	4a29      	ldr	r2, [pc, #164]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a22      	ldr	r2, [pc, #136]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_GPIO_Init+0xc4>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <MX_GPIO_Init+0xc8>)
 8000dfe:	f000 febd 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_GPIO_Init+0xcc>)
 8000e08:	f000 feb8 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <MX_GPIO_Init+0xc8>)
 8000e24:	f000 fcfa 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_GPIO_Init+0xcc>)
 8000e40:	f000 fcec 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020000 	.word	0x58020000
 8000e54:	58021000 	.word	0x58021000

08000e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
 //initalize OPENAMP and MAILBOX
	MAILBOX_Init();
 8000e60:	f009 f914 	bl	800a08c <MAILBOX_Init>
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 8000e64:	2300      	movs	r3, #0
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	491f      	ldr	r1, [pc, #124]	@ (8000ef4 <StartDefaultTask+0x9c>)
 8000e76:	4820      	ldr	r0, [pc, #128]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000e78:	f7ff fd44 	bl	8000904 <rpmsg_init_ept>
	if(MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK) Error_Handler();
 8000e7c:	491f      	ldr	r1, [pc, #124]	@ (8000efc <StartDefaultTask+0xa4>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f009 fa1e 	bl	800a2c0 <MX_OPENAMP_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <StartDefaultTask+0x36>
 8000e8a:	f000 f95f 	bl	800114c <Error_Handler>

	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000e8e:	481a      	ldr	r0, [pc, #104]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000e90:	f009 fae2 	bl	800a458 <OPENAMP_Wait_EndPointready>
	int *initalSend = (int*) pvPortMalloc(sizeof(int));
 8000e94:	2004      	movs	r0, #4
 8000e96:	f003 ff17 	bl	8004cc8 <pvPortMalloc>
 8000e9a:	60f8      	str	r0, [r7, #12]
	*initalSend = 0;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	if(OPENAMP_send(&rp_endpoint, initalSend, sizeof(int)) < 0) Error_Handler(); //If this isn't here code breaks for some reason.
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <StartDefaultTask+0xa0>)
 8000ea8:	f7ff fd0c 	bl	80008c4 <rpmsg_send>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da01      	bge.n	8000eb6 <StartDefaultTask+0x5e>
 8000eb2:	f000 f94b 	bl	800114c <Error_Handler>
	vPortFree(initalSend);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f003 ffd4 	bl	8004e64 <vPortFree>
  /* Infinite loop */
  for(;;)
  {
	  if(service_created)
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <StartDefaultTask+0xa8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <StartDefaultTask+0x72>
	  {
		  OPENAMP_check_for_message(); //continously check for message from M4 core(slave).
 8000ec4:	f009 fabc 	bl	800a440 <OPENAMP_check_for_message>
 8000ec8:	e001      	b.n	8000ece <StartDefaultTask+0x76>
	  }
	  else //service destroyed
	  {
		  OPENAMP_DeInit();
 8000eca:	f009 fa8f 	bl	800a3ec <OPENAMP_DeInit>
	  }
	  if(message_received)
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <StartDefaultTask+0xac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <StartDefaultTask+0x92>
	  {
		  //Message received, notify other tasks to start calculation
		  xTaskNotifyGive(calculateTaskHandle);
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <StartDefaultTask+0xb0>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	2202      	movs	r2, #2
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f005 ffde 	bl	8006ea0 <xTaskGenericNotify>
		  message_received = 0;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <StartDefaultTask+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f003 fe9c 	bl	8004c28 <osDelay>
	  if(service_created)
 8000ef0:	e7e4      	b.n	8000ebc <StartDefaultTask+0x64>
 8000ef2:	bf00      	nop
 8000ef4:	0800ea8c 	.word	0x0800ea8c
 8000ef8:	240002d4 	.word	0x240002d4
 8000efc:	08000a29 	.word	0x08000a29
 8000f00:	240002c8 	.word	0x240002c8
 8000f04:	240002c4 	.word	0x240002c4
 8000f08:	240002a8 	.word	0x240002a8

08000f0c <startTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxTask */
void startTxTask(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxTask */
  /* Infinite loop */
  for(;;)
  {
	  //WAIT FOR ALL CALCULATION TAKS TO FINISH
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e007      	b.n	8000f2a <startTxTask+0x1e>
	  {
		  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task
 8000f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f005 ff76 	bl	8006e10 <ulTaskNotifyTake>
	  for(int i = 0; i < NUM_OF_CALC; i++)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	ddf4      	ble.n	8000f1a <startTxTask+0xe>
	  }
	  //send data back to C4
	  TorqueEncoder *test = (TorqueEncoder*)pvPortMalloc(sizeof(struct TorqueEncoder));
 8000f30:	2020      	movs	r0, #32
 8000f32:	f003 fec9 	bl	8004cc8 <pvPortMalloc>
 8000f36:	60b8      	str	r0, [r7, #8]
	  test -> id = TORQUE_SENSOR;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	  test -> valueFloat = calcFloatTest;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <startTxTask+0x94>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	619a      	str	r2, [r3, #24]
	  test -> valueInt = message;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <startTxTask+0x98>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	605a      	str	r2, [r3, #4]
	  test -> sensor1 = received_data1;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <startTxTask+0x9c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	609a      	str	r2, [r3, #8]
	  test -> sensorPercent0 = sensorData;
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <startTxTask+0xa0>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
	  test -> sensorPercent1 = sensorData1;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <startTxTask+0xa4>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	611a      	str	r2, [r3, #16]
	  test -> travelPercent = travelPercent;
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <startTxTask+0xa8>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	615a      	str	r2, [r3, #20]
	  test -> valueBool = false;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2200      	movs	r2, #0
 8000f72:	771a      	strb	r2, [r3, #28]

	  if(OPENAMP_send(&rp_endpoint, test, sizeof(struct TorqueEncoder)) < 0) Error_Handler(); //send given message to other core this is also status
 8000f74:	2220      	movs	r2, #32
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <startTxTask+0xac>)
 8000f7a:	f7ff fca3 	bl	80008c4 <rpmsg_send>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da01      	bge.n	8000f88 <startTxTask+0x7c>
 8000f84:	f000 f8e2 	bl	800114c <Error_Handler>

	  vPortFree(test);
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f003 ff6b 	bl	8004e64 <vPortFree>
	  HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <startTxTask+0xb0>)
 8000f92:	f000 fe0c 	bl	8001bae <HAL_GPIO_TogglePin>

	  osDelay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f003 fe46 	bl	8004c28 <osDelay>
  {
 8000f9c:	e7ba      	b.n	8000f14 <startTxTask+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	240002bc 	.word	0x240002bc
 8000fa4:	240002ac 	.word	0x240002ac
 8000fa8:	240002d0 	.word	0x240002d0
 8000fac:	240002b0 	.word	0x240002b0
 8000fb0:	240002b4 	.word	0x240002b4
 8000fb4:	240002b8 	.word	0x240002b8
 8000fb8:	240002d4 	.word	0x240002d4
 8000fbc:	58021000 	.word	0x58021000

08000fc0 <startCalculateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCalculateTask */
void startCalculateTask(void *argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCalculateTask */
	//BEGIN CALCULATION (after done data will be stored at a certain variable/struct
	//Notify Sending task when done

	//ABSTRACT TO ANOTHER FILE
	const int MAX_VALUE = 4095;
 8000fc8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000fcc:	60fb      	str	r3, [r7, #12]
	const int MIN_VALUE = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 8000fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f005 ff1a 	bl	8006e10 <ulTaskNotifyTake>

	  sensorData = getPercent(test->valueInt, MIN_VALUE, MAX_VALUE);
 8000fdc:	4b35      	ldr	r3, [pc, #212]	@ (80010b4 <startCalculateTask+0xf4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	ee07 3a10 	vmov	s14, r3
 8000ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	ee06 3a90 	vmov	s13, r3
 8000ffa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000ffe:	eeb0 1a66 	vmov.f32	s2, s13
 8001002:	eef0 0a47 	vmov.f32	s1, s14
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f7ff fc98 	bl	800093e <getPercent>
 800100e:	eef0 7a40 	vmov.f32	s15, s0
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <startCalculateTask+0xf8>)
 8001014:	edc3 7a00 	vstr	s15, [r3]
	  sensorData1 = getPercent(test->sensor1, MIN_VALUE, MAX_VALUE);
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <startCalculateTask+0xf4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	ee07 3a10 	vmov	s14, r3
 800102c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	ee06 3a90 	vmov	s13, r3
 8001036:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800103a:	eeb0 1a66 	vmov.f32	s2, s13
 800103e:	eef0 0a47 	vmov.f32	s1, s14
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	f7ff fc7a 	bl	800093e <getPercent>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <startCalculateTask+0xfc>)
 8001050:	edc3 7a00 	vstr	s15, [r3]

	  travelPercent = (sensorData + sensorData1) / 2; //average travel percentage
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <startCalculateTask+0xf8>)
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <startCalculateTask+0xfc>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001064:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <startCalculateTask+0x100>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
	  travelPercent = travelPercent * 2400;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <startCalculateTask+0x100>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010c4 <startCalculateTask+0x104>
 800107c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <startCalculateTask+0x100>)
 8001082:	edc3 7a00 	vstr	s15, [r3]
	  travelPercent = 2400 - travelPercent;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <startCalculateTask+0x100>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80010c4 <startCalculateTask+0x104>
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <startCalculateTask+0x100>)
 8001096:	edc3 7a00 	vstr	s15, [r3]

	  xTaskNotifyGive(txTaskHandle);
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <startCalculateTask+0x108>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	2202      	movs	r2, #2
 80010a2:	2100      	movs	r1, #0
 80010a4:	f005 fefc 	bl	8006ea0 <xTaskGenericNotify>
	  osDelay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f003 fdbd 	bl	8004c28 <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read received message)
 80010ae:	bf00      	nop
 80010b0:	e78f      	b.n	8000fd2 <startCalculateTask+0x12>
 80010b2:	bf00      	nop
 80010b4:	240002c0 	.word	0x240002c0
 80010b8:	240002b0 	.word	0x240002b0
 80010bc:	240002b4 	.word	0x240002b4
 80010c0:	240002b8 	.word	0x240002b8
 80010c4:	45160000 	.word	0x45160000
 80010c8:	240002a4 	.word	0x240002a4

080010cc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010de:	f000 fb25 	bl	800172c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80010ea:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80010ee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80010f0:	230f      	movs	r3, #15
 80010f2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010fc:	2303      	movs	r3, #3
 80010fe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001104:	2301      	movs	r3, #1
 8001106:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fb42 	bl	800179c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001118:	2004      	movs	r0, #4
 800111a:	f000 fb1f 	bl	800175c <HAL_MPU_Enable>

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113a:	f000 f9eb 	bl	8001514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010000 	.word	0x40010000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_MspInit+0x48>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001164:	4a0e      	ldr	r2, [pc, #56]	@ (80011a0 <HAL_MspInit+0x48>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <HAL_MspInit+0x48>)
 8001170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	210f      	movs	r1, #15
 8001180:	f06f 0001 	mvn.w	r0, #1
 8001184:	f000 faaa 	bl	80016dc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2105      	movs	r1, #5
 800118c:	207d      	movs	r0, #125	@ 0x7d
 800118e:	f000 faa5 	bl	80016dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001192:	207d      	movs	r0, #125	@ 0x7d
 8001194:	f000 fabc 	bl	8001710 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400

080011a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	@ 0x38
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d842      	bhi.n	8001238 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 fa90 	bl	80016dc <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011bc:	2019      	movs	r0, #25
 80011be:	f000 faa7 	bl	8001710 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <HAL_InitTick+0xac>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <HAL_InitTick+0xb0>)
 80011ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ce:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <HAL_InitTick+0xb0>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <HAL_InitTick+0xb0>)
 80011da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fd7b 	bl	8002cec <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011f6:	f001 fd63 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 80011fa:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fe:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <HAL_InitTick+0xb4>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	3b01      	subs	r3, #1
 8001208:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_InitTick+0xb8>)
 800120c:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_InitTick+0xbc>)
 800120e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0xb8>)
 8001212:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001216:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_InitTick+0xb8>)
 800121a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_InitTick+0xb8>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_InitTick+0xb8>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <HAL_InitTick+0xb8>)
 800122c:	f003 f90e 	bl	800444c <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d107      	bne.n	8001246 <HAL_InitTick+0xa2>
 8001236:	e001      	b.n	800123c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e005      	b.n	8001248 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <HAL_InitTick+0xb8>)
 800123e:	f003 f967 	bl	8004510 <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	@ 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000008 	.word	0x24000008
 8001254:	58024400 	.word	0x58024400
 8001258:	431bde83 	.word	0x431bde83
 800125c:	24000314 	.word	0x24000314
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <TIM1_UP_IRQHandler+0x10>)
 80012a2:	f003 f9ad 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24000314 	.word	0x24000314

080012b0 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80012b4:	f000 fcd6 	bl	8001c64 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return 1;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_kill>:

int _kill(int pid, int sig)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d6:	f00a f9fd 	bl	800b6d4 <__errno>
 80012da:	4603      	mov	r3, r0
 80012dc:	2216      	movs	r2, #22
 80012de:	601a      	str	r2, [r3, #0]
  return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_exit>:

void _exit (int status)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffe7 	bl	80012cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80012fe:	bf00      	nop
 8001300:	e7fd      	b.n	80012fe <_exit+0x12>

08001302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00a      	b.n	800132a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001314:	f3af 8000 	nop.w
 8001318:	4601      	mov	r1, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	b2ca      	uxtb	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf0      	blt.n	8001314 <_read+0x12>
  }

  return len;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e009      	b.n	8001362 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbf1      	blt.n	800134e <_write+0x12>
  }
  return len;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_close>:

int _close(int file)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800139c:	605a      	str	r2, [r3, #4]
  return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_isatty>:

int _isatty(int file)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f00a f962 	bl	800b6d4 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	24080000 	.word	0x24080000
 800143c:	00000400 	.word	0x00000400
 8001440:	24000360 	.word	0x24000360
 8001444:	24004ec0 	.word	0x24004ec0

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800144c:	f7ff f9a4 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f00a f933 	bl	800b6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147a:	f7ff faf3 	bl	8000a64 <main>
  bx  lr
 800147e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001484:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001488:	24000284 	.word	0x24000284
  ldr r2, =_sidata
 800148c:	0800f1a4 	.word	0x0800f1a4
  ldr r2, =_sbss
 8001490:	24000284 	.word	0x24000284
  ldr r4, =_ebss
 8001494:	24004ebc 	.word	0x24004ebc

08001498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC3_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f90f 	bl	80016c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a8:	f001 fa60 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4913      	ldr	r1, [pc, #76]	@ (8001508 <HAL_Init+0x6c>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_Init+0x68>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_Init+0x6c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_Init+0x70>)
 80014de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_Init+0x74>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	200f      	movs	r0, #15
 80014e8:	f7ff fe5c 	bl	80011a4 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e002      	b.n	80014fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f6:	f7ff fe2f 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	58024400 	.word	0x58024400
 8001508:	0800ec84 	.word	0x0800ec84
 800150c:	24000004 	.word	0x24000004
 8001510:	24000000 	.word	0x24000000

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2400000c 	.word	0x2400000c
 8001538:	24000364 	.word	0x24000364

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	24000364 	.word	0x24000364

08001554 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetREVID+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0c1b      	lsrs	r3, r3, #16
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	5c001000 	.word	0x5c001000

0800156c <__NVIC_SetPriorityGrouping>:
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	@ (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff4c 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ea:	f7ff ff63 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	6978      	ldr	r0, [r7, #20]
 80016f6:	f7ff ffb3 	bl	8001660 <NVIC_EncodePriority>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff82 	bl	800160c <__NVIC_SetPriority>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff56 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001730:	f3bf 8f5f 	dmb	sy
}
 8001734:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_MPU_Disable+0x28>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	4a06      	ldr	r2, [pc, #24]	@ (8001754 <HAL_MPU_Disable+0x28>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001740:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_MPU_Disable+0x2c>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	e000ed90 	.word	0xe000ed90

0800175c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_MPU_Enable+0x38>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_MPU_Enable+0x3c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <HAL_MPU_Enable+0x3c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001778:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800177a:	f3bf 8f4f 	dsb	sy
}
 800177e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001780:	f3bf 8f6f 	isb	sy
}
 8001784:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed90 	.word	0xe000ed90
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	785a      	ldrb	r2, [r3, #1]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_MPU_ConfigRegion+0x7c>)
 80017aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_MPU_ConfigRegion+0x7c>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_MPU_ConfigRegion+0x7c>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_MPU_ConfigRegion+0x7c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7adb      	ldrb	r3, [r3, #11]
 80017ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7a9b      	ldrb	r3, [r3, #10]
 80017d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7b5b      	ldrb	r3, [r3, #13]
 80017da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b9b      	ldrb	r3, [r3, #14]
 80017e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7bdb      	ldrb	r3, [r3, #15]
 80017ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7a5b      	ldrb	r3, [r3, #9]
 80017f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7a1b      	ldrb	r3, [r3, #8]
 80017fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001806:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001808:	6113      	str	r3, [r2, #16]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed90 	.word	0xe000ed90

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800182a:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <HAL_GPIO_Init+0x234>)
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800182e:	e194      	b.n	8001b5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8186 	beq.w	8001b54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x44>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d017      	beq.n	80018fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	69b9      	ldr	r1, [r7, #24]
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80e0 	beq.w	8001b54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x238>)
 8001996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800199a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a54 <HAL_GPIO_Init+0x238>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_GPIO_Init+0x238>)
 80019a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b2:	4a29      	ldr	r2, [pc, #164]	@ (8001a58 <HAL_GPIO_Init+0x23c>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <HAL_GPIO_Init+0x240>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d052      	beq.n	8001a84 <HAL_GPIO_Init+0x268>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <HAL_GPIO_Init+0x244>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d031      	beq.n	8001a4a <HAL_GPIO_Init+0x22e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_GPIO_Init+0x248>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02b      	beq.n	8001a46 <HAL_GPIO_Init+0x22a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_GPIO_Init+0x24c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x226>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <HAL_GPIO_Init+0x250>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x222>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <HAL_GPIO_Init+0x254>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x21e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_GPIO_Init+0x258>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x21a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <HAL_GPIO_Init+0x25c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x216>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a18      	ldr	r2, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x260>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x212>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <HAL_GPIO_Init+0x264>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x20e>
 8001a26:	2309      	movs	r3, #9
 8001a28:	e02d      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	e02b      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a2e:	2308      	movs	r3, #8
 8001a30:	e029      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e027      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e025      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e023      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e021      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e01f      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e01d      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e01b      	b.n	8001a86 <HAL_GPIO_Init+0x26a>
 8001a4e:	bf00      	nop
 8001a50:	58000080 	.word	0x58000080
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58000400 	.word	0x58000400
 8001a5c:	58020000 	.word	0x58020000
 8001a60:	58020400 	.word	0x58020400
 8001a64:	58020800 	.word	0x58020800
 8001a68:	58020c00 	.word	0x58020c00
 8001a6c:	58021000 	.word	0x58021000
 8001a70:	58021400 	.word	0x58021400
 8001a74:	58021800 	.word	0x58021800
 8001a78:	58021c00 	.word	0x58021c00
 8001a7c:	58022000 	.word	0x58022000
 8001a80:	58022400 	.word	0x58022400
 8001a84:	2300      	movs	r3, #0
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a96:	4938      	ldr	r1, [pc, #224]	@ (8001b78 <HAL_GPIO_Init+0x35c>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3301      	adds	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f ae63 	bne.w	8001830 <HAL_GPIO_Init+0x14>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3724      	adds	r7, #36	@ 0x24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	58000400 	.word	0x58000400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	400b      	ands	r3, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001bec:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_HSEM_FastTake+0x2c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3320      	adds	r3, #32
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_HSEM_FastTake+0x30>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	58026400 	.word	0x58026400
 8001c14:	80000300 	.word	0x80000300

08001c18 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001c22:	4906      	ldr	r1, [pc, #24]	@ (8001c3c <HAL_HSEM_Release+0x24>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	58026400 	.word	0x58026400

08001c40 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_HSEM_ActivateNotification+0x20>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4904      	ldr	r1, [pc, #16]	@ (8001c60 <HAL_HSEM_ActivateNotification+0x20>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
#endif
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	58026500 	.word	0x58026500

08001c64 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_HSEM_IRQHandler+0x30>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_HSEM_IRQHandler+0x30>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4906      	ldr	r1, [pc, #24]	@ (8001c94 <HAL_HSEM_IRQHandler+0x30>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <HAL_HSEM_IRQHandler+0x30>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f008 f9f1 	bl	800a06c <HAL_HSEM_FreeCallback>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	58026500 	.word	0x58026500

08001c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	2b06      	cmp	r3, #6
 8001caa:	d00a      	beq.n	8001cc2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cac:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e040      	b.n	8001d40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e03e      	b.n	8001d40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cc2:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001cca:	491f      	ldr	r1, [pc, #124]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cd2:	f7ff fc33 	bl	800153c <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cd8:	e009      	b.n	8001cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cda:	f7ff fc2f 	bl	800153c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ce8:	d901      	bls.n	8001cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e028      	b.n	8001d40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cee:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cfa:	d1ee      	bne.n	8001cda <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b1e      	cmp	r3, #30
 8001d00:	d008      	beq.n	8001d14 <HAL_PWREx_ConfigSupply+0x7c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d06:	d005      	beq.n	8001d14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b1d      	cmp	r3, #29
 8001d0c:	d002      	beq.n	8001d14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d12:	d114      	bne.n	8001d3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d14:	f7ff fc12 	bl	800153c <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d1a:	e009      	b.n	8001d30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d1c:	f7ff fc0e 	bl	800153c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d2a:	d901      	bls.n	8001d30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e007      	b.n	8001d40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d1ee      	bne.n	8001d1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	58024800 	.word	0x58024800

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f000 bc48 	b.w	80025f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8088 	beq.w	8001e7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b99      	ldr	r3, [pc, #612]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d78:	4b96      	ldr	r3, [pc, #600]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d007      	beq.n	8001d94 <HAL_RCC_OscConfig+0x48>
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d86:	2b18      	cmp	r3, #24
 8001d88:	d111      	bne.n	8001dae <HAL_RCC_OscConfig+0x62>
 8001d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d06d      	beq.n	8001e7c <HAL_RCC_OscConfig+0x130>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d169      	bne.n	8001e7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f000 bc21 	b.w	80025f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x7a>
 8001db8:	4b86      	ldr	r3, [pc, #536]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a85      	ldr	r2, [pc, #532]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e02e      	b.n	8001e24 <HAL_RCC_OscConfig+0xd8>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x9c>
 8001dce:	4b81      	ldr	r3, [pc, #516]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a80      	ldr	r2, [pc, #512]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7d      	ldr	r2, [pc, #500]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xc0>
 8001df2:	4b78      	ldr	r3, [pc, #480]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a77      	ldr	r2, [pc, #476]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b75      	ldr	r3, [pc, #468]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a74      	ldr	r2, [pc, #464]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd8>
 8001e0c:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a70      	ldr	r2, [pc, #448]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb86 	bl	800153c <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fb82 	bl	800153c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e3d4      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e46:	4b63      	ldr	r3, [pc, #396]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe8>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fb72 	bl	800153c <HAL_GetTick>
 8001e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fb6e 	bl	800153c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e3c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e6e:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x110>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80ca 	beq.w	8002020 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8c:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e96:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x166>
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	2b18      	cmp	r3, #24
 8001ea6:	d156      	bne.n	8001f56 <HAL_RCC_OscConfig+0x20a>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d151      	bne.n	8001f56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb2:	4b48      	ldr	r3, [pc, #288]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x17e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e392      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eca:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0219 	bic.w	r2, r3, #25
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	493f      	ldr	r1, [pc, #252]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fb2e 	bl	800153c <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fb2a 	bl	800153c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e37c      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef6:	4b37      	ldr	r3, [pc, #220]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	f7ff fb27 	bl	8001554 <HAL_GetREVID>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d817      	bhi.n	8001f40 <HAL_RCC_OscConfig+0x1f4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d108      	bne.n	8001f2a <HAL_RCC_OscConfig+0x1de>
 8001f18:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f20:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f28:	e07a      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	031b      	lsls	r3, r3, #12
 8001f38:	4926      	ldr	r1, [pc, #152]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3e:	e06f      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	4921      	ldr	r1, [pc, #132]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f54:	e064      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d047      	beq.n	8001fee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0219 	bic.w	r2, r3, #25
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	491a      	ldr	r1, [pc, #104]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fae4 	bl	800153c <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fae0 	bl	800153c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e332      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	f7ff fadd 	bl	8001554 <HAL_GetREVID>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d819      	bhi.n	8001fd8 <HAL_RCC_OscConfig+0x28c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b40      	cmp	r3, #64	@ 0x40
 8001faa:	d108      	bne.n	8001fbe <HAL_RCC_OscConfig+0x272>
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fba:	6053      	str	r3, [r2, #4]
 8001fbc:	e030      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	031b      	lsls	r3, r3, #12
 8001fcc:	4901      	ldr	r1, [pc, #4]	@ (8001fd4 <HAL_RCC_OscConfig+0x288>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
 8001fd2:	e025      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	4997      	ldr	r1, [pc, #604]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e018      	b.n	8002020 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b95      	ldr	r3, [pc, #596]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a94      	ldr	r2, [pc, #592]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fa9f 	bl	800153c <HAL_GetTick>
 8001ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fa9b 	bl	800153c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e2ed      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002014:	4b8b      	ldr	r3, [pc, #556]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a9 	beq.w	8002180 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	4b85      	ldr	r3, [pc, #532]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002036:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002038:	4b82      	ldr	r3, [pc, #520]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d007      	beq.n	8002054 <HAL_RCC_OscConfig+0x308>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b18      	cmp	r3, #24
 8002048:	d13a      	bne.n	80020c0 <HAL_RCC_OscConfig+0x374>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d135      	bne.n	80020c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002054:	4b7b      	ldr	r3, [pc, #492]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_OscConfig+0x320>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b80      	cmp	r3, #128	@ 0x80
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2c1      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800206c:	f7ff fa72 	bl	8001554 <HAL_GetREVID>
 8002070:	4603      	mov	r3, r0
 8002072:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002076:	4293      	cmp	r3, r2
 8002078:	d817      	bhi.n	80020aa <HAL_RCC_OscConfig+0x35e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2b20      	cmp	r3, #32
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x348>
 8002082:	4b70      	ldr	r3, [pc, #448]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800208a:	4a6e      	ldr	r2, [pc, #440]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800208c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002090:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002092:	e075      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002094:	4b6b      	ldr	r3, [pc, #428]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	069b      	lsls	r3, r3, #26
 80020a2:	4968      	ldr	r1, [pc, #416]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020a8:	e06a      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020aa:	4b66      	ldr	r3, [pc, #408]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	061b      	lsls	r3, r3, #24
 80020b8:	4962      	ldr	r1, [pc, #392]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020be:	e05f      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d042      	beq.n	800214e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa32 	bl	800153c <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020dc:	f7ff fa2e 	bl	800153c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e280      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ee:	4b55      	ldr	r3, [pc, #340]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020fa:	f7ff fa2b 	bl	8001554 <HAL_GetREVID>
 80020fe:	4603      	mov	r3, r0
 8002100:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002104:	4293      	cmp	r3, r2
 8002106:	d817      	bhi.n	8002138 <HAL_RCC_OscConfig+0x3ec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b20      	cmp	r3, #32
 800210e:	d108      	bne.n	8002122 <HAL_RCC_OscConfig+0x3d6>
 8002110:	4b4c      	ldr	r3, [pc, #304]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002118:	4a4a      	ldr	r2, [pc, #296]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800211a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800211e:	6053      	str	r3, [r2, #4]
 8002120:	e02e      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
 8002122:	4b48      	ldr	r3, [pc, #288]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	4944      	ldr	r1, [pc, #272]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e023      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
 8002138:	4b42      	ldr	r3, [pc, #264]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	493f      	ldr	r1, [pc, #252]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e018      	b.n	8002180 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a3c      	ldr	r2, [pc, #240]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff f9ef 	bl	800153c <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002162:	f7ff f9eb 	bl	800153c <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e23d      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002174:	4b33      	ldr	r3, [pc, #204]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d036      	beq.n	80021fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d019      	beq.n	80021c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002198:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff f9cc 	bl	800153c <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff f9c8 	bl	800153c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e21a      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80021bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x45c>
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f9b2 	bl	800153c <HAL_GetTick>
 80021d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f9ae 	bl	800153c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e200      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d039      	beq.n	800227a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002218:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800221a:	f7ff f98f 	bl	800153c <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002222:	f7ff f98b 	bl	800153c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1dd      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x4d6>
 8002240:	e01b      	b.n	800227a <HAL_RCC_OscConfig+0x52e>
 8002242:	bf00      	nop
 8002244:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002248:	4b9b      	ldr	r3, [pc, #620]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a9a      	ldr	r2, [pc, #616]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800224e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002254:	f7ff f972 	bl	800153c <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225c:	f7ff f96e 	bl	800153c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800226e:	4b92      	ldr	r3, [pc, #584]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8081 	beq.w	800238a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002288:	4b8c      	ldr	r3, [pc, #560]	@ (80024bc <HAL_RCC_OscConfig+0x770>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a8b      	ldr	r2, [pc, #556]	@ (80024bc <HAL_RCC_OscConfig+0x770>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002294:	f7ff f952 	bl	800153c <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7ff f94e 	bl	800153c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1a0      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ae:	4b83      	ldr	r3, [pc, #524]	@ (80024bc <HAL_RCC_OscConfig+0x770>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x584>
 80022c2:	4b7d      	ldr	r3, [pc, #500]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c6:	4a7c      	ldr	r2, [pc, #496]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ce:	e02d      	b.n	800232c <HAL_RCC_OscConfig+0x5e0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x5a6>
 80022d8:	4b77      	ldr	r3, [pc, #476]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a76      	ldr	r2, [pc, #472]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	4b74      	ldr	r3, [pc, #464]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	4a73      	ldr	r2, [pc, #460]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x5e0>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c8>
 80022fa:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a6e      	ldr	r2, [pc, #440]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
 8002306:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a6b      	ldr	r2, [pc, #428]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x5e0>
 8002314:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4a67      	ldr	r2, [pc, #412]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002320:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a64      	ldr	r2, [pc, #400]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff f902 	bl	800153c <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff f8fe 	bl	800153c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e14e      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002352:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x5f0>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff f8ec 	bl	800153c <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7ff f8e8 	bl	800153c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e138      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800237e:	4b4e      	ldr	r3, [pc, #312]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 812d 	beq.w	80025ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002394:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800239c:	2b18      	cmp	r3, #24
 800239e:	f000 80bd 	beq.w	800251c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	f040 809e 	bne.w	80024e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a41      	ldr	r2, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f8c0 	bl	800153c <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f8bc 	bl	800153c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e10e      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023d2:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <HAL_RCC_OscConfig+0x774>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	430a      	orrs	r2, r1
 80023f2:	4931      	ldr	r1, [pc, #196]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	3b01      	subs	r3, #1
 80023fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002406:	3b01      	subs	r3, #1
 8002408:	025b      	lsls	r3, r3, #9
 800240a:	b29b      	uxth	r3, r3
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	3b01      	subs	r3, #1
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002420:	3b01      	subs	r3, #1
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002428:	4923      	ldr	r1, [pc, #140]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	4a21      	ldr	r2, [pc, #132]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800243a:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <HAL_RCC_OscConfig+0x778>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002446:	00d2      	lsls	r2, r2, #3
 8002448:	491b      	ldr	r1, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	f023 020c 	bic.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4917      	ldr	r1, [pc, #92]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002460:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	f023 0202 	bic.w	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	4912      	ldr	r1, [pc, #72]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	4a10      	ldr	r2, [pc, #64]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <HAL_RCC_OscConfig+0x76c>)
 80024a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7ff f845 	bl	800153c <HAL_GetTick>
 80024b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b4:	e011      	b.n	80024da <HAL_RCC_OscConfig+0x78e>
 80024b6:	bf00      	nop
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58024800 	.word	0x58024800
 80024c0:	fffffc0c 	.word	0xfffffc0c
 80024c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f838 	bl	800153c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e08a      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x77c>
 80024e6:	e082      	b.n	80025ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a42      	ldr	r2, [pc, #264]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80024ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff f822 	bl	800153c <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f81e 	bl	800153c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e070      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800250e:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x7b0>
 800251a:	e068      	b.n	80025ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800251c:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002522:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	2b01      	cmp	r3, #1
 800252e:	d031      	beq.n	8002594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d12a      	bne.n	8002594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d122      	bne.n	8002594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0a5b      	lsrs	r3, r3, #9
 8002562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d108      	bne.n	8002594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	0e1b      	lsrs	r3, r3, #24
 8002586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e02b      	b.n	80025f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002598:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d01f      	beq.n	80025ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	4a11      	ldr	r2, [pc, #68]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ba:	f7fe ffbf 	bl	800153c <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025c0:	bf00      	nop
 80025c2:	f7fe ffbb 	bl	800153c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d0f9      	beq.n	80025c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_RCC_OscConfig+0x8b0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025da:	00d2      	lsls	r2, r2, #3
 80025dc:	4906      	ldr	r1, [pc, #24]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e6:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_RCC_OscConfig+0x8ac>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3730      	adds	r7, #48	@ 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400
 80025fc:	ffff0007 	.word	0xffff0007

08002600 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e19c      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b8a      	ldr	r3, [pc, #552]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b87      	ldr	r3, [pc, #540]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 020f 	bic.w	r2, r3, #15
 800262a:	4985      	ldr	r1, [pc, #532]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b83      	ldr	r3, [pc, #524]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e184      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	4b7b      	ldr	r3, [pc, #492]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800265c:	429a      	cmp	r2, r3
 800265e:	d908      	bls.n	8002672 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002660:	4b78      	ldr	r3, [pc, #480]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4975      	ldr	r1, [pc, #468]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800266e:	4313      	orrs	r3, r2
 8002670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	4b70      	ldr	r3, [pc, #448]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268a:	429a      	cmp	r2, r3
 800268c:	d908      	bls.n	80026a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800268e:	4b6d      	ldr	r3, [pc, #436]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	496a      	ldr	r1, [pc, #424]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800269c:	4313      	orrs	r3, r2
 800269e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	4b64      	ldr	r3, [pc, #400]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d908      	bls.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026bc:	4b61      	ldr	r3, [pc, #388]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	495e      	ldr	r1, [pc, #376]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d908      	bls.n	80026fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026ea:	4b56      	ldr	r3, [pc, #344]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4953      	ldr	r1, [pc, #332]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	429a      	cmp	r2, r3
 8002716:	d908      	bls.n	800272a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f023 020f 	bic.w	r2, r3, #15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4947      	ldr	r1, [pc, #284]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002726:	4313      	orrs	r3, r2
 8002728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d055      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002736:	4b43      	ldr	r3, [pc, #268]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4940      	ldr	r1, [pc, #256]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002744:	4313      	orrs	r3, r2
 8002746:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d107      	bne.n	8002760 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002750:	4b3c      	ldr	r3, [pc, #240]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d121      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0f6      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002768:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d115      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ea      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0de      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002790:	4b2c      	ldr	r3, [pc, #176]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d6      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a0:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f023 0207 	bic.w	r2, r3, #7
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4925      	ldr	r1, [pc, #148]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b2:	f7fe fec3 	bl	800153c <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ba:	f7fe febf 	bl	800153c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0be      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	429a      	cmp	r2, r3
 80027e0:	d1eb      	bne.n	80027ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d208      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f023 020f 	bic.w	r2, r3, #15
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	490e      	ldr	r1, [pc, #56]	@ (8002844 <HAL_RCC_ClockConfig+0x244>)
 800280c:	4313      	orrs	r3, r2
 800280e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d214      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 020f 	bic.w	r2, r3, #15
 8002826:	4906      	ldr	r1, [pc, #24]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <HAL_RCC_ClockConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e086      	b.n	800294e <HAL_RCC_ClockConfig+0x34e>
 8002840:	52002000 	.word	0x52002000
 8002844:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	4b3f      	ldr	r3, [pc, #252]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002860:	429a      	cmp	r2, r3
 8002862:	d208      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002864:	4b3c      	ldr	r3, [pc, #240]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4939      	ldr	r1, [pc, #228]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002872:	4313      	orrs	r3, r2
 8002874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800288e:	429a      	cmp	r2, r3
 8002890:	d208      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	492e      	ldr	r1, [pc, #184]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028bc:	429a      	cmp	r2, r3
 80028be:	d208      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4922      	ldr	r1, [pc, #136]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d208      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4917      	ldr	r1, [pc, #92]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002900:	f000 f834 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	4912      	ldr	r1, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x35c>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_RCC_ClockConfig+0x358>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <HAL_RCC_ClockConfig+0x35c>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <HAL_RCC_ClockConfig+0x360>)
 8002936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_RCC_ClockConfig+0x364>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800293e:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x368>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc2e 	bl	80011a4 <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
 800294a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	58024400 	.word	0x58024400
 800295c:	0800ec84 	.word	0x0800ec84
 8002960:	24000004 	.word	0x24000004
 8002964:	24000000 	.word	0x24000000
 8002968:	24000008 	.word	0x24000008

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002972:	4bb3      	ldr	r3, [pc, #716]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800297a:	2b18      	cmp	r3, #24
 800297c:	f200 8155 	bhi.w	8002c2a <HAL_RCC_GetSysClockFreq+0x2be>
 8002980:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	080029ed 	.word	0x080029ed
 800298c:	08002c2b 	.word	0x08002c2b
 8002990:	08002c2b 	.word	0x08002c2b
 8002994:	08002c2b 	.word	0x08002c2b
 8002998:	08002c2b 	.word	0x08002c2b
 800299c:	08002c2b 	.word	0x08002c2b
 80029a0:	08002c2b 	.word	0x08002c2b
 80029a4:	08002c2b 	.word	0x08002c2b
 80029a8:	08002a13 	.word	0x08002a13
 80029ac:	08002c2b 	.word	0x08002c2b
 80029b0:	08002c2b 	.word	0x08002c2b
 80029b4:	08002c2b 	.word	0x08002c2b
 80029b8:	08002c2b 	.word	0x08002c2b
 80029bc:	08002c2b 	.word	0x08002c2b
 80029c0:	08002c2b 	.word	0x08002c2b
 80029c4:	08002c2b 	.word	0x08002c2b
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002c2b 	.word	0x08002c2b
 80029d0:	08002c2b 	.word	0x08002c2b
 80029d4:	08002c2b 	.word	0x08002c2b
 80029d8:	08002c2b 	.word	0x08002c2b
 80029dc:	08002c2b 	.word	0x08002c2b
 80029e0:	08002c2b 	.word	0x08002c2b
 80029e4:	08002c2b 	.word	0x08002c2b
 80029e8:	08002a1f 	.word	0x08002a1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029ec:	4b94      	ldr	r3, [pc, #592]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029f8:	4b91      	ldr	r3, [pc, #580]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	4a90      	ldr	r2, [pc, #576]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a0a:	e111      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a0e:	61bb      	str	r3, [r7, #24]
      break;
 8002a10:	e10e      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a12:	4b8d      	ldr	r3, [pc, #564]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a14:	61bb      	str	r3, [r7, #24]
      break;
 8002a16:	e10b      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a18:	4b8c      	ldr	r3, [pc, #560]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a1a:	61bb      	str	r3, [r7, #24]
      break;
 8002a1c:	e108      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a1e:	4b88      	ldr	r3, [pc, #544]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a28:	4b85      	ldr	r3, [pc, #532]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a34:	4b82      	ldr	r3, [pc, #520]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a3e:	4b80      	ldr	r3, [pc, #512]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	08db      	lsrs	r3, r3, #3
 8002a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80e1 	beq.w	8002c24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	f000 8083 	beq.w	8002b70 <HAL_RCC_GetSysClockFreq+0x204>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f200 80a1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x248>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x114>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d056      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a7e:	e099      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a80:	4b6f      	ldr	r3, [pc, #444]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	4a6b      	ldr	r2, [pc, #428]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b62      	ldr	r3, [pc, #392]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ae6:	e087      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b51      	ldr	r3, [pc, #324]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b2a:	e065      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6e:	e043      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b82:	4b2f      	ldr	r3, [pc, #188]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bb2:	e021      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c02:	3301      	adds	r3, #1
 8002c04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1c:	ee17 3a90 	vmov	r3, s15
 8002c20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
      break;
 8002c28:	e002      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c2c:	61bb      	str	r3, [r7, #24]
      break;
 8002c2e:	bf00      	nop
  }

  return sysclockfreq;
 8002c30:	69bb      	ldr	r3, [r7, #24]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400
 8002c44:	03d09000 	.word	0x03d09000
 8002c48:	003d0900 	.word	0x003d0900
 8002c4c:	017d7840 	.word	0x017d7840
 8002c50:	46000000 	.word	0x46000000
 8002c54:	4c742400 	.word	0x4c742400
 8002c58:	4a742400 	.word	0x4a742400
 8002c5c:	4bbebc20 	.word	0x4bbebc20

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c66:	f7ff fe81 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490f      	ldr	r1, [pc, #60]	@ (8002cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a07      	ldr	r2, [pc, #28]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c9e:	4a07      	ldr	r2, [pc, #28]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	0800ec84 	.word	0x0800ec84
 8002cb8:	24000004 	.word	0x24000004
 8002cbc:	24000000 	.word	0x24000000

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cc4:	f7ff ffcc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4904      	ldr	r1, [pc, #16]	@ (8002ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	0800ec84 	.word	0x0800ec84

08002cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	223f      	movs	r2, #63	@ 0x3f
 8002cfa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0207 	and.w	r2, r3, #7
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002d08:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_RCC_GetClockConfig+0x7c>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <HAL_RCC_GetClockConfig+0x80>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	52002000 	.word	0x52002000

08002d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0ca      	sub	sp, #296	@ 0x128
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d94:	2500      	movs	r5, #0
 8002d96:	ea54 0305 	orrs.w	r3, r4, r5
 8002d9a:	d049      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002da2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002da6:	d02f      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002da8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dac:	d828      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db2:	d01a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002db4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db8:	d822      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dc2:	d007      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc6:	4bb8      	ldr	r3, [pc, #736]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	4ab7      	ldr	r2, [pc, #732]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dd2:	e01a      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd8:	3308      	adds	r3, #8
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 f9d1 	bl	8004184 <RCCEx_PLL2_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002de8:	e00f      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dee:	3328      	adds	r3, #40	@ 0x28
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fa78 	bl	80042e8 <RCCEx_PLL3_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dfe:	e004      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e12:	4ba5      	ldr	r3, [pc, #660]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e20:	4aa1      	ldr	r2, [pc, #644]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e26:	e003      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e3c:	f04f 0900 	mov.w	r9, #0
 8002e40:	ea58 0309 	orrs.w	r3, r8, r9
 8002e44:	d047      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d82a      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e6d 	.word	0x08002e6d
 8002e5c:	08002e7b 	.word	0x08002e7b
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002eaf 	.word	0x08002eaf
 8002e68:	08002eaf 	.word	0x08002eaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	4a8d      	ldr	r2, [pc, #564]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e78:	e01a      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7e:	3308      	adds	r3, #8
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f97e 	bl	8004184 <RCCEx_PLL2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e94:	3328      	adds	r3, #40	@ 0x28
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 fa25 	bl	80042e8 <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	f023 0107 	bic.w	r1, r3, #7
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	4a78      	ldr	r2, [pc, #480]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002ee2:	f04f 0b00 	mov.w	fp, #0
 8002ee6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002eea:	d04c      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef6:	d030      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efc:	d829      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f00:	d02d      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f04:	d825      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f06:	2b80      	cmp	r3, #128	@ 0x80
 8002f08:	d018      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d821      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f16:	e01c      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f18:	4b63      	ldr	r3, [pc, #396]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4a62      	ldr	r2, [pc, #392]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f24:	e01c      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f928 	bl	8004184 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e011      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	3328      	adds	r3, #40	@ 0x28
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 f9cf 	bl	80042e8 <RCCEx_PLL3_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f50:	e006      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f58:	e002      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f68:	4b4f      	ldr	r3, [pc, #316]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	4a4c      	ldr	r2, [pc, #304]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	d053      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fb2:	d035      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002fb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fb8:	d82e      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002fbe:	d031      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002fc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002fc4:	d828      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fca:	d01a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d822      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fda:	d007      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002fdc:	e01c      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fde:	4b32      	ldr	r3, [pc, #200]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	4a31      	ldr	r2, [pc, #196]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fea:	e01c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f8c5 	bl	8004184 <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003000:	e011      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003006:	3328      	adds	r3, #40	@ 0x28
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f96c 	bl	80042e8 <RCCEx_PLL3_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003016:	e006      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800301e:	e002      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800302e:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003040:	430b      	orrs	r3, r1
 8003042:	6593      	str	r3, [r2, #88]	@ 0x58
 8003044:	e003      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800304a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800305a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003064:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003068:	460b      	mov	r3, r1
 800306a:	4313      	orrs	r3, r2
 800306c:	d056      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003076:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307a:	d038      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800307c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003080:	d831      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003082:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003086:	d034      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800308c:	d82b      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800308e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003092:	d01d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003098:	d825      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800309e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80030a4:	e01f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ac:	4ba2      	ldr	r3, [pc, #648]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	4aa1      	ldr	r2, [pc, #644]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b8:	e01c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	3308      	adds	r3, #8
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f85e 	bl	8004184 <RCCEx_PLL2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80030ce:	e011      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d4:	3328      	adds	r3, #40	@ 0x28
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 f905 	bl	80042e8 <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800310c:	4a8a      	ldr	r2, [pc, #552]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800310e:	430b      	orrs	r3, r1
 8003110:	6593      	str	r3, [r2, #88]	@ 0x58
 8003112:	e003      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800311c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003132:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d03a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	2b30      	cmp	r3, #48	@ 0x30
 8003144:	d01f      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003146:	2b30      	cmp	r3, #48	@ 0x30
 8003148:	d819      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800314a:	2b20      	cmp	r3, #32
 800314c:	d00c      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800314e:	2b20      	cmp	r3, #32
 8003150:	d815      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d019      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003156:	2b10      	cmp	r3, #16
 8003158:	d111      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315a:	4b77      	ldr	r3, [pc, #476]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	4a76      	ldr	r2, [pc, #472]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316c:	3308      	adds	r3, #8
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f001 f807 	bl	8004184 <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003184:	e002      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800318a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003194:	4b68      	ldr	r3, [pc, #416]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003198:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a2:	4a65      	ldr	r2, [pc, #404]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a8:	e003      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80031c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4313      	orrs	r3, r2
 80031d0:	d051      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031dc:	d035      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031e2:	d82e      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031e8:	d031      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80031ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031ee:	d828      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f4:	d01a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031fa:	d822      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003204:	d007      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003206:	e01c      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4b4b      	ldr	r3, [pc, #300]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	4a4a      	ldr	r2, [pc, #296]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003214:	e01c      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	3308      	adds	r3, #8
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 ffb0 	bl	8004184 <RCCEx_PLL2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800322a:	e011      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	3328      	adds	r3, #40	@ 0x28
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f857 	bl	80042e8 <RCCEx_PLL3_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003240:	e006      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003248:	e002      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800324e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003258:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800325a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003266:	4a34      	ldr	r2, [pc, #208]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6513      	str	r3, [r2, #80]	@ 0x50
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800328c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d056      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800329c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a0:	d033      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80032a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a6:	d82c      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ac:	d02f      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80032ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032b2:	d826      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032b8:	d02b      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80032ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032be:	d820      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c4:	d012      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80032c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ca:	d81a      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d022      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d115      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032da:	3308      	adds	r3, #8
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ff50 	bl	8004184 <RCCEx_PLL2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032ea:	e015      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f0:	3328      	adds	r3, #40	@ 0x28
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fff7 	bl	80042e8 <RCCEx_PLL3_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003300:	e00a      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800330a:	bf00      	nop
 800330c:	e004      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800332e:	4a02      	ldr	r2, [pc, #8]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003330:	430b      	orrs	r3, r1
 8003332:	6513      	str	r3, [r2, #80]	@ 0x50
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003336:	bf00      	nop
 8003338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800335a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d055      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003370:	d033      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003376:	d82c      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d02f      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003382:	d826      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003384:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003388:	d02b      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800338a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800338e:	d820      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003394:	d012      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339a:	d81a      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d022      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80033a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a4:	d115      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	3308      	adds	r3, #8
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fee8 	bl	8004184 <RCCEx_PLL2_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033ba:	e015      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	3328      	adds	r3, #40	@ 0x28
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ff8f 	bl	80042e8 <RCCEx_PLL3_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033d0:	e00a      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033da:	bf00      	nop
 80033dc:	e004      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033f0:	4ba3      	ldr	r3, [pc, #652]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003400:	4a9f      	ldr	r2, [pc, #636]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003402:	430b      	orrs	r3, r1
 8003404:	6593      	str	r3, [r2, #88]	@ 0x58
 8003406:	e003      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800342a:	460b      	mov	r3, r1
 800342c:	4313      	orrs	r3, r2
 800342e:	d037      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800343a:	d00e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003440:	d816      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344a:	d111      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b8c      	ldr	r3, [pc, #560]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	4a8b      	ldr	r2, [pc, #556]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	3308      	adds	r3, #8
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fe8e 	bl	8004184 <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003482:	4b7f      	ldr	r3, [pc, #508]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003486:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a7b      	ldr	r2, [pc, #492]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	430b      	orrs	r3, r1
 8003494:	6513      	str	r3, [r2, #80]	@ 0x50
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	d039      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d81c      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80034ca:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	0800350d 	.word	0x0800350d
 80034d4:	080034e1 	.word	0x080034e1
 80034d8:	080034ef 	.word	0x080034ef
 80034dc:	0800350d 	.word	0x0800350d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e0:	4b67      	ldr	r3, [pc, #412]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	4a66      	ldr	r2, [pc, #408]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034ec:	e00f      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	3308      	adds	r3, #8
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fe44 	bl	8004184 <RCCEx_PLL2_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003516:	4b5a      	ldr	r3, [pc, #360]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	f023 0103 	bic.w	r1, r3, #3
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003524:	4a56      	ldr	r2, [pc, #344]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003526:	430b      	orrs	r3, r1
 8003528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003540:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800354a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	f000 809f 	beq.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003556:	4b4b      	ldr	r3, [pc, #300]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4a      	ldr	r2, [pc, #296]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003562:	f7fd ffeb 	bl	800153c <HAL_GetTick>
 8003566:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356c:	f7fd ffe6 	bl	800153c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b64      	cmp	r3, #100	@ 0x64
 800357a:	d903      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003582:	e005      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003584:	4b3f      	ldr	r3, [pc, #252]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ed      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d179      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003598:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035a4:	4053      	eors	r3, r2
 80035a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d015      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ae:	4b34      	ldr	r3, [pc, #208]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ba:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	4a30      	ldr	r2, [pc, #192]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e6:	d118      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd ffa8 	bl	800153c <HAL_GetTick>
 80035ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f0:	e00d      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fd ffa3 	bl	800153c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035fc:	1ad2      	subs	r2, r2, r3
 80035fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003602:	429a      	cmp	r2, r3
 8003604:	d903      	bls.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800360c:	e005      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800360e:	4b1c      	ldr	r3, [pc, #112]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0eb      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800361a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361e:	2b00      	cmp	r3, #0
 8003620:	d129      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003632:	d10e      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003644:	091a      	lsrs	r2, r3, #4
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003648:	4013      	ands	r3, r2
 800364a:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6113      	str	r3, [r2, #16]
 8003650:	e005      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003652:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003658:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800365c:	6113      	str	r3, [r2, #16]
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003660:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
 8003674:	e00e      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003680:	58024400 	.word	0x58024400
 8003684:	58024800 	.word	0x58024800
 8003688:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 0301 	and.w	r3, r2, #1
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f000 8089 	beq.w	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036bc:	2b28      	cmp	r3, #40	@ 0x28
 80036be:	d86b      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080037a1 	.word	0x080037a1
 80036cc:	08003799 	.word	0x08003799
 80036d0:	08003799 	.word	0x08003799
 80036d4:	08003799 	.word	0x08003799
 80036d8:	08003799 	.word	0x08003799
 80036dc:	08003799 	.word	0x08003799
 80036e0:	08003799 	.word	0x08003799
 80036e4:	08003799 	.word	0x08003799
 80036e8:	0800376d 	.word	0x0800376d
 80036ec:	08003799 	.word	0x08003799
 80036f0:	08003799 	.word	0x08003799
 80036f4:	08003799 	.word	0x08003799
 80036f8:	08003799 	.word	0x08003799
 80036fc:	08003799 	.word	0x08003799
 8003700:	08003799 	.word	0x08003799
 8003704:	08003799 	.word	0x08003799
 8003708:	08003783 	.word	0x08003783
 800370c:	08003799 	.word	0x08003799
 8003710:	08003799 	.word	0x08003799
 8003714:	08003799 	.word	0x08003799
 8003718:	08003799 	.word	0x08003799
 800371c:	08003799 	.word	0x08003799
 8003720:	08003799 	.word	0x08003799
 8003724:	08003799 	.word	0x08003799
 8003728:	080037a1 	.word	0x080037a1
 800372c:	08003799 	.word	0x08003799
 8003730:	08003799 	.word	0x08003799
 8003734:	08003799 	.word	0x08003799
 8003738:	08003799 	.word	0x08003799
 800373c:	08003799 	.word	0x08003799
 8003740:	08003799 	.word	0x08003799
 8003744:	08003799 	.word	0x08003799
 8003748:	080037a1 	.word	0x080037a1
 800374c:	08003799 	.word	0x08003799
 8003750:	08003799 	.word	0x08003799
 8003754:	08003799 	.word	0x08003799
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
 8003760:	08003799 	.word	0x08003799
 8003764:	08003799 	.word	0x08003799
 8003768:	080037a1 	.word	0x080037a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003770:	3308      	adds	r3, #8
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd05 	bl	8004184 <RCCEx_PLL2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003780:	e00f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	3328      	adds	r3, #40	@ 0x28
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fdac 	bl	80042e8 <RCCEx_PLL3_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003796:	e004      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037aa:	4bbf      	ldr	r3, [pc, #764]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b8:	4abb      	ldr	r2, [pc, #748]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f002 0302 	and.w	r3, r2, #2
 80037d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d041      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d824      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80037f2:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003811 	.word	0x08003811
 8003800:	08003827 	.word	0x08003827
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	3308      	adds	r3, #8
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fcb3 	bl	8004184 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003824:	e00f      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd5a 	bl	80042e8 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800383a:	e004      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800384e:	4b96      	ldr	r3, [pc, #600]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f023 0107 	bic.w	r1, r3, #7
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800385c:	4a92      	ldr	r2, [pc, #584]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6553      	str	r3, [r2, #84]	@ 0x54
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 0304 	and.w	r3, r2, #4
 8003878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003882:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d044      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003894:	2b05      	cmp	r3, #5
 8003896:	d825      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003898:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038ed 	.word	0x080038ed
 80038a4:	080038b9 	.word	0x080038b9
 80038a8:	080038cf 	.word	0x080038cf
 80038ac:	080038ed 	.word	0x080038ed
 80038b0:	080038ed 	.word	0x080038ed
 80038b4:	080038ed 	.word	0x080038ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	3308      	adds	r3, #8
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fc5f 	bl	8004184 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038cc:	e00f      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	3328      	adds	r3, #40	@ 0x28
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fd06 	bl	80042e8 <RCCEx_PLL3_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038e2:	e004      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ea:	e000      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80038ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038f6:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	f023 0107 	bic.w	r1, r3, #7
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003906:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003908:	430b      	orrs	r3, r1
 800390a:	6593      	str	r3, [r2, #88]	@ 0x58
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f002 0320 	and.w	r3, r2, #32
 8003922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800392c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003930:	460b      	mov	r3, r1
 8003932:	4313      	orrs	r3, r2
 8003934:	d055      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003942:	d033      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003948:	d82c      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d02f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003954:	d826      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800395a:	d02b      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800395c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003960:	d820      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003966:	d012      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800396c:	d81a      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d022      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003976:	d115      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	3308      	adds	r3, #8
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fbff 	bl	8004184 <RCCEx_PLL2_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800398c:	e015      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	3328      	adds	r3, #40	@ 0x28
 8003994:	2102      	movs	r1, #2
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fca6 	bl	80042e8 <RCCEx_PLL3_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039a2:	e00a      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039aa:	e006      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039ac:	bf00      	nop
 80039ae:	e004      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039b0:	bf00      	nop
 80039b2:	e002      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039c2:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a35      	ldr	r2, [pc, #212]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80039d8:	e003      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d058      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a0e:	d033      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003a10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a14:	d82c      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d02f      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a20:	d826      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a26:	d02b      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a2c:	d820      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a32:	d012      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a38:	d81a      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d022      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a42:	d115      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	3308      	adds	r3, #8
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fb99 	bl	8004184 <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a58:	e015      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	3328      	adds	r3, #40	@ 0x28
 8003a60:	2102      	movs	r1, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fc40 	bl	80042e8 <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a7c:	bf00      	nop
 8003a7e:	e002      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a80:	bf00      	nop
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a9e:	4a02      	ldr	r2, [pc, #8]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa4:	e006      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d055      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003adc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003ae2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ae6:	d82c      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aec:	d02f      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af2:	d826      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003af4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003af8:	d02b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003afa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003afe:	d820      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b04:	d012      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b0a:	d81a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d022      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b14:	d115      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fb30 	bl	8004184 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fbd7 	bl	80042e8 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b60:	4ba1      	ldr	r3, [pc, #644]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b70:	4a9d      	ldr	r2, [pc, #628]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 0308 	and.w	r3, r2, #8
 8003b8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d01e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3328      	adds	r3, #40	@ 0x28
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fb96 	bl	80042e8 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bc8:	4b87      	ldr	r3, [pc, #540]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd8:	4a83      	ldr	r2, [pc, #524]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f002 0310 	and.w	r3, r2, #16
 8003bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bf4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d01e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	3328      	adds	r3, #40	@ 0x28
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb67 	bl	80042e8 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c26:	4b70      	ldr	r3, [pc, #448]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c36:	4a6c      	ldr	r2, [pc, #432]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d03e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c68:	d022      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c6e:	d81b      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003c7a:	e015      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	3308      	adds	r3, #8
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa7d 	bl	8004184 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	3328      	adds	r3, #40	@ 0x28
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb24 	bl	80042e8 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cba:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cca:	4a47      	ldr	r2, [pc, #284]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ce8:	2300      	movs	r3, #0
 8003cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	d03b      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d02:	d01f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d08:	d818      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003d10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d14:	d007      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d16:	e011      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d18:	4b33      	ldr	r3, [pc, #204]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	4a32      	ldr	r2, [pc, #200]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d24:	e00f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3328      	adds	r3, #40	@ 0x28
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fada 	bl	80042e8 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4e:	4b26      	ldr	r3, [pc, #152]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	4a22      	ldr	r2, [pc, #136]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d84:	460b      	mov	r3, r1
 8003d86:	4313      	orrs	r3, r2
 8003d88:	d034      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d9a:	e011      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a11      	ldr	r2, [pc, #68]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f9e6 	bl	8004184 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dde:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e02:	2300      	movs	r3, #0
 8003e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d00c      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	3328      	adds	r3, #40	@ 0x28
 8003e16:	2102      	movs	r1, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fa65 	bl	80042e8 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e38:	2300      	movs	r3, #0
 8003e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d038      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e52:	d018      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e58:	d811      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5e:	d014      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e64:	d80b      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e70:	4bc3      	ldr	r3, [pc, #780]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4ac2      	ldr	r2, [pc, #776]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e7c:	e008      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e98:	4bb9      	ldr	r3, [pc, #740]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea8:	4ab5      	ldr	r2, [pc, #724]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ed4:	4baa      	ldr	r3, [pc, #680]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee2:	4aa7      	ldr	r2, [pc, #668]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003efa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f04:	4b9e      	ldr	r3, [pc, #632]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f14:	4a9a      	ldr	r2, [pc, #616]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f28:	2300      	movs	r3, #0
 8003f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d009      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f36:	4b92      	ldr	r3, [pc, #584]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f44:	4a8e      	ldr	r2, [pc, #568]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f58:	2300      	movs	r3, #0
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f66:	4b86      	ldr	r3, [pc, #536]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4a85      	ldr	r2, [pc, #532]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f70:	6113      	str	r3, [r2, #16]
 8003f72:	4b83      	ldr	r3, [pc, #524]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f74:	6919      	ldr	r1, [r3, #16]
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f7e:	4a80      	ldr	r2, [pc, #512]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f92:	2300      	movs	r3, #0
 8003f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fa0:	4b77      	ldr	r3, [pc, #476]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fae:	4a74      	ldr	r2, [pc, #464]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe0:	4a67      	ldr	r2, [pc, #412]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3308      	adds	r3, #8
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8ba 	bl	8004184 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	2100      	movs	r1, #0
 8004030:	6239      	str	r1, [r7, #32]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
 8004038:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800403c:	460b      	mov	r3, r1
 800403e:	4313      	orrs	r3, r2
 8004040:	d011      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	3308      	adds	r3, #8
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f89a 	bl	8004184 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	2100      	movs	r1, #0
 8004070:	61b9      	str	r1, [r7, #24]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800407c:	460b      	mov	r3, r1
 800407e:	4313      	orrs	r3, r2
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	3308      	adds	r3, #8
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f87a 	bl	8004184 <RCCEx_PLL2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	2100      	movs	r1, #0
 80040b0:	6139      	str	r1, [r7, #16]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d011      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f90c 	bl	80042e8 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	2100      	movs	r1, #0
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d011      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	3328      	adds	r3, #40	@ 0x28
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f8ec 	bl	80042e8 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	2100      	movs	r1, #0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e9d7 1200 	ldrd	r1, r2, [r7]
 800413c:	460b      	mov	r3, r1
 800413e:	4313      	orrs	r3, r2
 8004140:	d011      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	3328      	adds	r3, #40	@ 0x28
 8004148:	2102      	movs	r1, #2
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f8cc 	bl	80042e8 <RCCEx_PLL3_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004166:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004180:	58024400 	.word	0x58024400

08004184 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004192:	4b53      	ldr	r3, [pc, #332]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b03      	cmp	r3, #3
 800419c:	d101      	bne.n	80041a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e099      	b.n	80042d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041a2:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a4e      	ldr	r2, [pc, #312]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ae:	f7fd f9c5 	bl	800153c <HAL_GetTick>
 80041b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b4:	e008      	b.n	80041c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041b6:	f7fd f9c1 	bl	800153c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e086      	b.n	80042d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c8:	4b45      	ldr	r3, [pc, #276]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041d4:	4b42      	ldr	r3, [pc, #264]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	031b      	lsls	r3, r3, #12
 80041e2:	493f      	ldr	r1, [pc, #252]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	025b      	lsls	r3, r3, #9
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	3b01      	subs	r3, #1
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004218:	4931      	ldr	r1, [pc, #196]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800421e:	4b30      	ldr	r3, [pc, #192]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	492d      	ldr	r1, [pc, #180]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004230:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	f023 0220 	bic.w	r2, r3, #32
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4928      	ldr	r1, [pc, #160]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004242:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	4a26      	ldr	r2, [pc, #152]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <RCCEx_PLL2_Config+0x160>)
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	69d2      	ldr	r2, [r2, #28]
 800425a:	00d2      	lsls	r2, r2, #3
 800425c:	4920      	ldr	r1, [pc, #128]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004262:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004268:	f043 0310 	orr.w	r3, r3, #16
 800426c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004274:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800427a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004280:	e00f      	b.n	80042a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800428e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004294:	e005      	b.n	80042a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a11      	ldr	r2, [pc, #68]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 800429c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042a2:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a0e      	ldr	r2, [pc, #56]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ae:	f7fd f945 	bl	800153c <HAL_GetTick>
 80042b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b4:	e008      	b.n	80042c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042b6:	f7fd f941 	bl	800153c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <RCCEx_PLL2_Config+0x15c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400
 80042e4:	ffff0007 	.word	0xffff0007

080042e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042f6:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d101      	bne.n	8004306 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e099      	b.n	800443a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004306:	4b4f      	ldr	r3, [pc, #316]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800430c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004312:	f7fd f913 	bl	800153c <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004318:	e008      	b.n	800432c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800431a:	f7fd f90f 	bl	800153c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e086      	b.n	800443a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800432c:	4b45      	ldr	r3, [pc, #276]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f0      	bne.n	800431a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004338:	4b42      	ldr	r3, [pc, #264]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	493f      	ldr	r1, [pc, #252]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	628b      	str	r3, [r1, #40]	@ 0x28
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	3b01      	subs	r3, #1
 8004352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	b29b      	uxth	r3, r3
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	3b01      	subs	r3, #1
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	3b01      	subs	r3, #1
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800437c:	4931      	ldr	r1, [pc, #196]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004382:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	492d      	ldr	r1, [pc, #180]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004394:	4b2b      	ldr	r3, [pc, #172]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	4928      	ldr	r1, [pc, #160]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043a6:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	4a26      	ldr	r2, [pc, #152]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043b2:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b6:	4b24      	ldr	r3, [pc, #144]	@ (8004448 <RCCEx_PLL3_Config+0x160>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	69d2      	ldr	r2, [r2, #28]
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	4920      	ldr	r1, [pc, #128]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043e4:	e00f      	b.n	8004406 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d106      	bne.n	80043fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043ec:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043f8:	e005      	b.n	8004406 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004404:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004406:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0e      	ldr	r2, [pc, #56]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fd f893 	bl	800153c <HAL_GetTick>
 8004416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004418:	e008      	b.n	800442c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800441a:	f7fd f88f 	bl	800153c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <RCCEx_PLL3_Config+0x15c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
 8004448:	ffff0007 	.word	0xffff0007

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f841 	bl	80044fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 f9e8 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e054      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a26      	ldr	r2, [pc, #152]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004552:	d01d      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <HAL_TIM_Base_Start_IT+0xdc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d115      	bne.n	80045bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <HAL_TIM_Base_Start_IT+0xec>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d015      	beq.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a8:	d011      	beq.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	e008      	b.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40001800 	.word	0x40001800
 80045f8:	40014000 	.word	0x40014000
 80045fc:	00010007 	.word	0x00010007

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8e9 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8db 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8ec 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8c3 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8b5 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8c6 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0208 	mvn.w	r2, #8
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f89d 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f88f 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8a0 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f877 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f869 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f87a 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0201 	mvn.w	r2, #1
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fcde 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f913 	bl	80049c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f90b 	bl	80049d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f834 	bl	800484a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0220 	mvn.w	r2, #32
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8d3 	bl	80049ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a46      	ldr	r2, [pc, #280]	@ (800498c <TIM_Base_SetConfig+0x12c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d013      	beq.n	80048a0 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487e:	d00f      	beq.n	80048a0 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a43      	ldr	r2, [pc, #268]	@ (8004990 <TIM_Base_SetConfig+0x130>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <TIM_Base_SetConfig+0x134>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a41      	ldr	r2, [pc, #260]	@ (8004998 <TIM_Base_SetConfig+0x138>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a40      	ldr	r2, [pc, #256]	@ (800499c <TIM_Base_SetConfig+0x13c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d108      	bne.n	80048b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a35      	ldr	r2, [pc, #212]	@ (800498c <TIM_Base_SetConfig+0x12c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01f      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c0:	d01b      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a32      	ldr	r2, [pc, #200]	@ (8004990 <TIM_Base_SetConfig+0x130>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d017      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a31      	ldr	r2, [pc, #196]	@ (8004994 <TIM_Base_SetConfig+0x134>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a30      	ldr	r2, [pc, #192]	@ (8004998 <TIM_Base_SetConfig+0x138>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00f      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	@ (800499c <TIM_Base_SetConfig+0x13c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00b      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2e      	ldr	r2, [pc, #184]	@ (80049a0 <TIM_Base_SetConfig+0x140>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2d      	ldr	r2, [pc, #180]	@ (80049a4 <TIM_Base_SetConfig+0x144>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d003      	beq.n	80048fa <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2c      	ldr	r2, [pc, #176]	@ (80049a8 <TIM_Base_SetConfig+0x148>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d108      	bne.n	800490c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a16      	ldr	r2, [pc, #88]	@ (800498c <TIM_Base_SetConfig+0x12c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0xf8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a18      	ldr	r2, [pc, #96]	@ (800499c <TIM_Base_SetConfig+0x13c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <TIM_Base_SetConfig+0x140>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0xf8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <TIM_Base_SetConfig+0x144>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0xf8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a15      	ldr	r2, [pc, #84]	@ (80049a8 <TIM_Base_SetConfig+0x148>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d103      	bne.n	8004960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f023 0201 	bic.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]
  }
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40010400 	.word	0x40010400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800

080049ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <__NVIC_SetPriority>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	@ (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	@ (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <SysTick_Handler+0x1c>)
 8004a42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a44:	f002 f956 	bl	8006cf4 <xTaskGetSchedulerState>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a4e:	f000 fd9b 	bl	8005588 <xPortSysTickHandler>
  }
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000e010 	.word	0xe000e010

08004a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a60:	2100      	movs	r1, #0
 8004a62:	f06f 0004 	mvn.w	r0, #4
 8004a66:	f7ff ffbf 	bl	80049e8 <__NVIC_SetPriority>
#endif
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a76:	f3ef 8305 	mrs	r3, IPSR
 8004a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a82:	f06f 0305 	mvn.w	r3, #5
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	e00c      	b.n	8004aa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <osKernelInitialize+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a92:	4b08      	ldr	r3, [pc, #32]	@ (8004ab4 <osKernelInitialize+0x44>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	e002      	b.n	8004aa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aa4:	687b      	ldr	r3, [r7, #4]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	24000368 	.word	0x24000368

08004ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004aca:	f06f 0305 	mvn.w	r3, #5
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e010      	b.n	8004af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <osKernelStart+0x48>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d109      	bne.n	8004aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ada:	f7ff ffbf 	bl	8004a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <osKernelStart+0x48>)
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ae4:	f001 fcb8 	bl	8006458 <vTaskStartScheduler>
      stat = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e002      	b.n	8004af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	24000368 	.word	0x24000368

08004b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08e      	sub	sp, #56	@ 0x38
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b14:	f3ef 8305 	mrs	r3, IPSR
 8004b18:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d17e      	bne.n	8004c1e <osThreadNew+0x11a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d07b      	beq.n	8004c1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b2a:	2318      	movs	r3, #24
 8004b2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d045      	beq.n	8004bca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <osThreadNew+0x48>
        name = attr->name;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <osThreadNew+0x6e>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b38      	cmp	r3, #56	@ 0x38
 8004b64:	d805      	bhi.n	8004b72 <osThreadNew+0x6e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <osThreadNew+0x72>
        return (NULL);
 8004b72:	2300      	movs	r3, #0
 8004b74:	e054      	b.n	8004c20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <osThreadNew+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b5b      	cmp	r3, #91	@ 0x5b
 8004b94:	d90a      	bls.n	8004bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osThreadNew+0xa8>
        mem = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e010      	b.n	8004bce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <osThreadNew+0xca>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <osThreadNew+0xca>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <osThreadNew+0xca>
          mem = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e001      	b.n	8004bce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d110      	bne.n	8004bf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bdc:	9202      	str	r2, [sp, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a3a      	ldr	r2, [r7, #32]
 8004be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f001 fa58 	bl	80060a0 <xTaskCreateStatic>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e013      	b.n	8004c1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d110      	bne.n	8004c1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f001 faa6 	bl	8006160 <xTaskCreate>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <osThreadNew+0x11a>
            hTask = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c1e:	693b      	ldr	r3, [r7, #16]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	@ 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c30:	f3ef 8305 	mrs	r3, IPSR
 8004c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <osDelay+0x1c>
    stat = osErrorISR;
 8004c3c:	f06f 0305 	mvn.w	r3, #5
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e007      	b.n	8004c54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 fbcc 	bl	80063ec <vTaskDelay>
    }
  }

  return (stat);
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8004c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <vApplicationGetIdleTaskMemory+0x30>)
 8004c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2400036c 	.word	0x2400036c
 8004c90:	240003c8 	.word	0x240003c8

08004c94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ca4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4a06      	ldr	r2, [pc, #24]	@ (8004cc4 <vApplicationGetTimerTaskMemory+0x30>)
 8004caa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	240005c8 	.word	0x240005c8
 8004cc4:	24000624 	.word	0x24000624

08004cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	@ 0x28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cd4:	f001 fc28 	bl	8006528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e4c <pvPortMalloc+0x184>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ce0:	f000 f924 	bl	8004f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e50 <pvPortMalloc+0x188>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8095 	bne.w	8004e1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d015      	beq.n	8004d36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f023 0307 	bic.w	r3, r3, #7
 8004d10:	3308      	adds	r3, #8
 8004d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	e7fd      	b.n	8004d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d06f      	beq.n	8004e1c <pvPortMalloc+0x154>
 8004d3c:	4b45      	ldr	r3, [pc, #276]	@ (8004e54 <pvPortMalloc+0x18c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d86a      	bhi.n	8004e1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d46:	4b44      	ldr	r3, [pc, #272]	@ (8004e58 <pvPortMalloc+0x190>)
 8004d48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d4a:	4b43      	ldr	r3, [pc, #268]	@ (8004e58 <pvPortMalloc+0x190>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d50:	e004      	b.n	8004d5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d903      	bls.n	8004d6e <pvPortMalloc+0xa6>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f1      	bne.n	8004d52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d6e:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <pvPortMalloc+0x184>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d051      	beq.n	8004e1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	4413      	add	r3, r2
 8004d80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	1ad2      	subs	r2, r2, r3
 8004d92:	2308      	movs	r3, #8
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d920      	bls.n	8004ddc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4413      	add	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <pvPortMalloc+0xfc>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	613b      	str	r3, [r7, #16]
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dd6:	69b8      	ldr	r0, [r7, #24]
 8004dd8:	f000 f90a 	bl	8004ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <pvPortMalloc+0x18c>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e54 <pvPortMalloc+0x18c>)
 8004de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dea:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <pvPortMalloc+0x18c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <pvPortMalloc+0x194>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d203      	bcs.n	8004dfe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004df6:	4b17      	ldr	r3, [pc, #92]	@ (8004e54 <pvPortMalloc+0x18c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <pvPortMalloc+0x194>)
 8004dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <pvPortMalloc+0x188>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e12:	4b13      	ldr	r3, [pc, #76]	@ (8004e60 <pvPortMalloc+0x198>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a11      	ldr	r2, [pc, #68]	@ (8004e60 <pvPortMalloc+0x198>)
 8004e1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e1c:	f001 fb92 	bl	8006544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <pvPortMalloc+0x17a>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60fb      	str	r3, [r7, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	e7fd      	b.n	8004e3e <pvPortMalloc+0x176>
	return pvReturn;
 8004e42:	69fb      	ldr	r3, [r7, #28]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	@ 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2400462c 	.word	0x2400462c
 8004e50:	24004640 	.word	0x24004640
 8004e54:	24004630 	.word	0x24004630
 8004e58:	24004624 	.word	0x24004624
 8004e5c:	24004634 	.word	0x24004634
 8004e60:	24004638 	.word	0x24004638

08004e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04f      	beq.n	8004f16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e76:	2308      	movs	r3, #8
 8004e78:	425b      	negs	r3, r3
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b25      	ldr	r3, [pc, #148]	@ (8004f20 <vPortFree+0xbc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <vPortFree+0x46>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <vPortFree+0x66>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60bb      	str	r3, [r7, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <vPortFree+0xbc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01e      	beq.n	8004f16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11a      	bne.n	8004f16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <vPortFree+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ef0:	f001 fb1a 	bl	8006528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <vPortFree+0xc0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	4a09      	ldr	r2, [pc, #36]	@ (8004f24 <vPortFree+0xc0>)
 8004f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f02:	6938      	ldr	r0, [r7, #16]
 8004f04:	f000 f874 	bl	8004ff0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f08:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <vPortFree+0xc4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	4a06      	ldr	r2, [pc, #24]	@ (8004f28 <vPortFree+0xc4>)
 8004f10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f12:	f001 fb17 	bl	8006544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	24004640 	.word	0x24004640
 8004f24:	24004630 	.word	0x24004630
 8004f28:	2400463c 	.word	0x2400463c

08004f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <prvHeapInit+0xac>)
 8004f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3307      	adds	r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0307 	bic.w	r3, r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <prvHeapInit+0xac>)
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <prvHeapInit+0xb0>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <prvHeapInit+0xb0>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4413      	add	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f78:	2208      	movs	r2, #8
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <prvHeapInit+0xb4>)
 8004f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f8e:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <prvHeapInit+0xb4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <prvHeapInit+0xb4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fac:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <prvHeapInit+0xb4>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe4 <prvHeapInit+0xb8>)
 8004fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <prvHeapInit+0xbc>)
 8004fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fc4:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <prvHeapInit+0xc0>)
 8004fc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	24000a24 	.word	0x24000a24
 8004fdc:	24004624 	.word	0x24004624
 8004fe0:	2400462c 	.word	0x2400462c
 8004fe4:	24004634 	.word	0x24004634
 8004fe8:	24004630 	.word	0x24004630
 8004fec:	24004640 	.word	0x24004640

08004ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ff8:	4b28      	ldr	r3, [pc, #160]	@ (800509c <prvInsertBlockIntoFreeList+0xac>)
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e002      	b.n	8005004 <prvInsertBlockIntoFreeList+0x14>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d8f7      	bhi.n	8004ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4413      	add	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d108      	bne.n	8005032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d118      	bne.n	8005078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <prvInsertBlockIntoFreeList+0xb0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d00d      	beq.n	800506e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	441a      	add	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e008      	b.n	8005080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800506e:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <prvInsertBlockIntoFreeList+0xb0>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e003      	b.n	8005080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d002      	beq.n	800508e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	24004624 	.word	0x24004624
 80050a0:	2400462c 	.word	0x2400462c

080050a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0208 	add.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0208 	add.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d103      	bne.n	8005166 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e00c      	b.n	8005180 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3308      	adds	r3, #8
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e002      	b.n	8005174 <vListInsert+0x2e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d2f6      	bcs.n	800516e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6892      	ldr	r2, [r2, #8]
 80051ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6852      	ldr	r2, [r2, #4]
 80051d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d103      	bne.n	80051ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b04      	subs	r3, #4
 800521c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3b04      	subs	r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b04      	subs	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800523c:	4a0c      	ldr	r2, [pc, #48]	@ (8005270 <pxPortInitialiseStack+0x64>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b14      	subs	r3, #20
 8005246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b04      	subs	r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f06f 0202 	mvn.w	r2, #2
 800525a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b20      	subs	r3, #32
 8005260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	08005275 	.word	0x08005275

08005274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800527e:	4b13      	ldr	r3, [pc, #76]	@ (80052cc <prvTaskExitError+0x58>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d00b      	beq.n	80052a0 <prvTaskExitError+0x2c>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	60fb      	str	r3, [r7, #12]
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <prvTaskExitError+0x28>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60bb      	str	r3, [r7, #8]
}
 80052b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052b4:	bf00      	nop
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0fc      	beq.n	80052b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	24000010 	.word	0x24000010

080052d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052d0:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <pxCurrentTCBConst2>)
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	6808      	ldr	r0, [r1, #0]
 80052d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	f380 8809 	msr	PSP, r0
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8811 	msr	BASEPRI, r0
 80052ea:	4770      	bx	lr
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst2>:
 80052f0:	2400468c 	.word	0x2400468c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052f8:	4808      	ldr	r0, [pc, #32]	@ (800531c <prvPortStartFirstTask+0x24>)
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	f380 8808 	msr	MSP, r0
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8814 	msr	CONTROL, r0
 800530a:	b662      	cpsie	i
 800530c:	b661      	cpsie	f
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	df00      	svc	0
 8005318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800531a:	bf00      	nop
 800531c:	e000ed08 	.word	0xe000ed08

08005320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005326:	4b47      	ldr	r3, [pc, #284]	@ (8005444 <xPortStartScheduler+0x124>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a47      	ldr	r2, [pc, #284]	@ (8005448 <xPortStartScheduler+0x128>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10b      	bne.n	8005348 <xPortStartScheduler+0x28>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005348:	4b3e      	ldr	r3, [pc, #248]	@ (8005444 <xPortStartScheduler+0x124>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a3f      	ldr	r2, [pc, #252]	@ (800544c <xPortStartScheduler+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10b      	bne.n	800536a <xPortStartScheduler+0x4a>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800536a:	4b39      	ldr	r3, [pc, #228]	@ (8005450 <xPortStartScheduler+0x130>)
 800536c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	22ff      	movs	r2, #255	@ 0xff
 800537a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <xPortStartScheduler+0x134>)
 8005390:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005392:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <xPortStartScheduler+0x138>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005398:	e009      	b.n	80053ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800539a:	4b2f      	ldr	r3, [pc, #188]	@ (8005458 <xPortStartScheduler+0x138>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005458 <xPortStartScheduler+0x138>)
 80053a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b80      	cmp	r3, #128	@ 0x80
 80053b8:	d0ef      	beq.n	800539a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053ba:	4b27      	ldr	r3, [pc, #156]	@ (8005458 <xPortStartScheduler+0x138>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1c3 0307 	rsb	r3, r3, #7
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d00b      	beq.n	80053de <xPortStartScheduler+0xbe>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053de:	4b1e      	ldr	r3, [pc, #120]	@ (8005458 <xPortStartScheduler+0x138>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <xPortStartScheduler+0x138>)
 80053e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <xPortStartScheduler+0x138>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053f0:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <xPortStartScheduler+0x138>)
 80053f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fc:	4b17      	ldr	r3, [pc, #92]	@ (800545c <xPortStartScheduler+0x13c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	@ (800545c <xPortStartScheduler+0x13c>)
 8005402:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005406:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005408:	4b14      	ldr	r3, [pc, #80]	@ (800545c <xPortStartScheduler+0x13c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a13      	ldr	r2, [pc, #76]	@ (800545c <xPortStartScheduler+0x13c>)
 800540e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005412:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005414:	f000 f8da 	bl	80055cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005418:	4b11      	ldr	r3, [pc, #68]	@ (8005460 <xPortStartScheduler+0x140>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800541e:	f000 f8f9 	bl	8005614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005422:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <xPortStartScheduler+0x144>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a0f      	ldr	r2, [pc, #60]	@ (8005464 <xPortStartScheduler+0x144>)
 8005428:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800542c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800542e:	f7ff ff63 	bl	80052f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005432:	f001 f9ef 	bl	8006814 <vTaskSwitchContext>
	prvTaskExitError();
 8005436:	f7ff ff1d 	bl	8005274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	e000ed00 	.word	0xe000ed00
 8005448:	410fc271 	.word	0x410fc271
 800544c:	410fc270 	.word	0x410fc270
 8005450:	e000e400 	.word	0xe000e400
 8005454:	24004644 	.word	0x24004644
 8005458:	24004648 	.word	0x24004648
 800545c:	e000ed20 	.word	0xe000ed20
 8005460:	24000010 	.word	0x24000010
 8005464:	e000ef34 	.word	0xe000ef34

08005468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <vPortEnterCritical+0x5c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a0e      	ldr	r2, [pc, #56]	@ (80054c4 <vPortEnterCritical+0x5c>)
 800548a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800548c:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <vPortEnterCritical+0x5c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d110      	bne.n	80054b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <vPortEnterCritical+0x60>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	603b      	str	r3, [r7, #0]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <vPortEnterCritical+0x4a>
	}
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	24000010 	.word	0x24000010
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054d2:	4b12      	ldr	r3, [pc, #72]	@ (800551c <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <vPortExitCritical+0x26>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <vPortExitCritical+0x50>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4a08      	ldr	r2, [pc, #32]	@ (800551c <vPortExitCritical+0x50>)
 80054fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054fc:	4b07      	ldr	r3, [pc, #28]	@ (800551c <vPortExitCritical+0x50>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <vPortExitCritical+0x44>
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800550e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	24000010 	.word	0x24000010

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f01e 0f10 	tst.w	lr, #16
 8005530:	bf08      	it	eq
 8005532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005540:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005544:	f380 8811 	msr	BASEPRI, r0
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f001 f960 	bl	8006814 <vTaskSwitchContext>
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f380 8811 	msr	BASEPRI, r0
 800555c:	bc09      	pop	{r0, r3}
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005566:	f01e 0f10 	tst.w	lr, #16
 800556a:	bf08      	it	eq
 800556c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005570:	f380 8809 	msr	PSP, r0
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w

08005580 <pxCurrentTCBConst>:
 8005580:	2400468c 	.word	0x2400468c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a2:	f001 f87d 	bl	80066a0 <xTaskIncrementTick>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <xPortSysTickHandler+0x40>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f383 8811 	msr	BASEPRI, r3
}
 80055be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <vPortSetupTimerInterrupt+0x38>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <vPortSetupTimerInterrupt+0x3c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <vPortSetupTimerInterrupt+0x40>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	4a09      	ldr	r2, [pc, #36]	@ (8005610 <vPortSetupTimerInterrupt+0x44>)
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ee:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000e010 	.word	0xe000e010
 8005604:	e000e018 	.word	0xe000e018
 8005608:	24000000 	.word	0x24000000
 800560c:	10624dd3 	.word	0x10624dd3
 8005610:	e000e014 	.word	0xe000e014

08005614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005614:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005624 <vPortEnableVFP+0x10>
 8005618:	6801      	ldr	r1, [r0, #0]
 800561a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800561e:	6001      	str	r1, [r0, #0]
 8005620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005622:	bf00      	nop
 8005624:	e000ed88 	.word	0xe000ed88

08005628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800562e:	f3ef 8305 	mrs	r3, IPSR
 8005632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b0f      	cmp	r3, #15
 8005638:	d915      	bls.n	8005666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800563a:	4a18      	ldr	r2, [pc, #96]	@ (800569c <vPortValidateInterruptPriority+0x74>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005644:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <vPortValidateInterruptPriority+0x78>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	7afa      	ldrb	r2, [r7, #11]
 800564a:	429a      	cmp	r2, r3
 800564c:	d20b      	bcs.n	8005666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005666:	4b0f      	ldr	r3, [pc, #60]	@ (80056a4 <vPortValidateInterruptPriority+0x7c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800566e:	4b0e      	ldr	r3, [pc, #56]	@ (80056a8 <vPortValidateInterruptPriority+0x80>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d90b      	bls.n	800568e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	603b      	str	r3, [r7, #0]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <vPortValidateInterruptPriority+0x62>
	}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e3f0 	.word	0xe000e3f0
 80056a0:	24004644 	.word	0x24004644
 80056a4:	e000ed0c 	.word	0xe000ed0c
 80056a8:	24004648 	.word	0x24004648

080056ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60bb      	str	r3, [r7, #8]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056d8:	f7ff fec6 	bl	8005468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	3b01      	subs	r3, #1
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	22ff      	movs	r2, #255	@ 0xff
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	22ff      	movs	r2, #255	@ 0xff
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d114      	bne.n	8005758 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01a      	beq.n	800576c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3310      	adds	r3, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f91a 	bl	8006974 <xTaskRemoveFromEventList>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <xQueueGenericReset+0xd0>)
 8005748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	e009      	b.n	800576c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3310      	adds	r3, #16
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fca1 	bl	80050a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3324      	adds	r3, #36	@ 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fc9c 	bl	80050a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800576c:	f7ff feae 	bl	80054cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005770:	2301      	movs	r3, #1
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	@ 0x38
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <xQueueGenericCreateStatic+0x56>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <xQueueGenericCreateStatic+0x5a>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <xQueueGenericCreateStatic+0x5c>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	623b      	str	r3, [r7, #32]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <xQueueGenericCreateStatic+0x84>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <xQueueGenericCreateStatic+0x88>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <xQueueGenericCreateStatic+0x8a>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	61fb      	str	r3, [r7, #28]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005826:	2350      	movs	r3, #80	@ 0x50
 8005828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b50      	cmp	r3, #80	@ 0x50
 800582e:	d00b      	beq.n	8005848 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61bb      	str	r3, [r7, #24]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005848:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800585c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f805 	bl	800587a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005872:	4618      	mov	r0, r3
 8005874:	3730      	adds	r7, #48	@ 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e002      	b.n	800589c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058a8:	2101      	movs	r1, #1
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f7ff fefe 	bl	80056ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08e      	sub	sp, #56	@ 0x38
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ce:	2300      	movs	r3, #0
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xQueueGenericSend+0x34>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <xQueueGenericSend+0x42>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <xQueueGenericSend+0x46>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <xQueueGenericSend+0x48>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xQueueGenericSend+0x64>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d103      	bne.n	8005932 <xQueueGenericSend+0x72>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <xQueueGenericSend+0x76>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueGenericSend+0x78>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10b      	bne.n	8005954 <xQueueGenericSend+0x94>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	623b      	str	r3, [r7, #32]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005954:	f001 f9ce 	bl	8006cf4 <xTaskGetSchedulerState>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <xQueueGenericSend+0xa4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueGenericSend+0xa8>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueGenericSend+0xaa>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueGenericSend+0xc6>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61fb      	str	r3, [r7, #28]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005986:	f7ff fd6f 	bl	8005468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <xQueueGenericSend+0xdc>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d129      	bne.n	80059f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a2:	f000 fa0f 	bl	8005dc4 <prvCopyDataToQueue>
 80059a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	3324      	adds	r3, #36	@ 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ffdd 	bl	8006974 <xTaskRemoveFromEventList>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059c0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ac0 <xQueueGenericSend+0x200>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	e00a      	b.n	80059e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <xQueueGenericSend+0x200>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059e8:	f7ff fd70 	bl	80054cc <vPortExitCritical>
				return pdPASS;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e063      	b.n	8005ab8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f6:	f7ff fd69 	bl	80054cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e05c      	b.n	8005ab8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f817 	bl	8006a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a12:	f7ff fd5b 	bl	80054cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a16:	f000 fd87 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a1a:	f7ff fd25 	bl	8005468 <vPortEnterCritical>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a24:	b25b      	sxtb	r3, r3
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d103      	bne.n	8005a34 <xQueueGenericSend+0x174>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a3a:	b25b      	sxtb	r3, r3
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d103      	bne.n	8005a4a <xQueueGenericSend+0x18a>
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a4a:	f7ff fd3f 	bl	80054cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a4e:	1d3a      	adds	r2, r7, #4
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 f806 	bl	8006a68 <xTaskCheckForTimeOut>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d124      	bne.n	8005aac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a64:	f000 faa6 	bl	8005fb4 <prvIsQueueFull>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d018      	beq.n	8005aa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	3310      	adds	r3, #16
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 ff2a 	bl	80068d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a7e:	f000 fa31 	bl	8005ee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a82:	f000 fd5f 	bl	8006544 <xTaskResumeAll>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f47f af7c 	bne.w	8005986 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <xQueueGenericSend+0x200>)
 8005a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	e772      	b.n	8005986 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa2:	f000 fa1f 	bl	8005ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa6:	f000 fd4d 	bl	8006544 <xTaskResumeAll>
 8005aaa:	e76c      	b.n	8005986 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aae:	f000 fa19 	bl	8005ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ab2:	f000 fd47 	bl	8006544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3738      	adds	r7, #56	@ 0x38
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	@ 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <xQueueGenericSendFromISR+0x3e>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <xQueueGenericSendFromISR+0x42>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericSendFromISR+0x44>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSendFromISR+0x6e>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSendFromISR+0x72>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSendFromISR+0x74>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	623b      	str	r3, [r7, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b54:	f7ff fd68 	bl	8005628 <vPortValidateInterruptPriority>
	__asm volatile
 8005b58:	f3ef 8211 	mrs	r2, BASEPRI
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005b70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <xQueueGenericSendFromISR+0xc2>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d12f      	bne.n	8005be6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b9c:	f000 f912 	bl	8005dc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ba0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d112      	bne.n	8005bd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	3324      	adds	r3, #36	@ 0x24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fedc 	bl	8006974 <xTaskRemoveFromEventList>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00e      	beq.n	8005be0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e007      	b.n	8005be0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	b25a      	sxtb	r2, r3
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005be0:	2301      	movs	r3, #1
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005be4:	e001      	b.n	8005bea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bec:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f383 8811 	msr	BASEPRI, r3
}
 8005bf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3740      	adds	r7, #64	@ 0x40
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	@ 0x30
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <xQueueReceive+0x32>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	623b      	str	r3, [r7, #32]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <xQueueReceive+0x40>
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <xQueueReceive+0x44>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <xQueueReceive+0x46>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <xQueueReceive+0x62>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	61fb      	str	r3, [r7, #28]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c62:	f001 f847 	bl	8006cf4 <xTaskGetSchedulerState>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <xQueueReceive+0x72>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <xQueueReceive+0x76>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <xQueueReceive+0x78>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xQueueReceive+0x94>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	61bb      	str	r3, [r7, #24]
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c94:	f7ff fbe8 	bl	8005468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01f      	beq.n	8005ce4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ca8:	f000 f8f6 	bl	8005e98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fe57 	bl	8006974 <xTaskRemoveFromEventList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc0 <xQueueReceive+0x1c0>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cdc:	f7ff fbf6 	bl	80054cc <vPortExitCritical>
				return pdPASS;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e069      	b.n	8005db8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cea:	f7ff fbef 	bl	80054cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e062      	b.n	8005db8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fe9d 	bl	8006a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d06:	f7ff fbe1 	bl	80054cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d0a:	f000 fc0d 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d0e:	f7ff fbab 	bl	8005468 <vPortEnterCritical>
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d18:	b25b      	sxtb	r3, r3
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d103      	bne.n	8005d28 <xQueueReceive+0x128>
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0x13e>
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d3e:	f7ff fbc5 	bl	80054cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d42:	1d3a      	adds	r2, r7, #4
 8005d44:	f107 0310 	add.w	r3, r7, #16
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fe8c 	bl	8006a68 <xTaskCheckForTimeOut>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d123      	bne.n	8005d9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d58:	f000 f916 	bl	8005f88 <prvIsQueueEmpty>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d64:	3324      	adds	r3, #36	@ 0x24
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fdb0 	bl	80068d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d72:	f000 f8b7 	bl	8005ee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d76:	f000 fbe5 	bl	8006544 <xTaskResumeAll>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d189      	bne.n	8005c94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d80:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <xQueueReceive+0x1c0>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e780      	b.n	8005c94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d94:	f000 f8a6 	bl	8005ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d98:	f000 fbd4 	bl	8006544 <xTaskResumeAll>
 8005d9c:	e77a      	b.n	8005c94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da0:	f000 f8a0 	bl	8005ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da4:	f000 fbce 	bl	8006544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005daa:	f000 f8ed 	bl	8005f88 <prvIsQueueEmpty>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f43f af6f 	beq.w	8005c94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005db6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3730      	adds	r7, #48	@ 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d14d      	bne.n	8005e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 ff9e 	bl	8006d30 <xTaskPriorityDisinherit>
 8005df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	e043      	b.n	8005e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d119      	bne.n	8005e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6858      	ldr	r0, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	f005 fc8d 	bl	800b72e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d32b      	bcc.n	8005e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	e026      	b.n	8005e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68d8      	ldr	r0, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	461a      	mov	r2, r3
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	f005 fc73 	bl	800b72e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	425b      	negs	r3, r3
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d207      	bcs.n	8005e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	441a      	add	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d105      	bne.n	8005e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d303      	bcc.n	8005ecc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6838      	ldr	r0, [r7, #0]
 8005ed8:	f005 fc29 	bl	800b72e <memcpy>
	}
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005eec:	f7ff fabc 	bl	8005468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ef8:	e011      	b.n	8005f1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d012      	beq.n	8005f28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3324      	adds	r3, #36	@ 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fd34 	bl	8006974 <xTaskRemoveFromEventList>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f12:	f000 fe0d 	bl	8006b30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dce9      	bgt.n	8005efa <prvUnlockQueue+0x16>
 8005f26:	e000      	b.n	8005f2a <prvUnlockQueue+0x46>
					break;
 8005f28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	22ff      	movs	r2, #255	@ 0xff
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f32:	f7ff facb 	bl	80054cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f36:	f7ff fa97 	bl	8005468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f42:	e011      	b.n	8005f68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d012      	beq.n	8005f72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3310      	adds	r3, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fd0f 	bl	8006974 <xTaskRemoveFromEventList>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f5c:	f000 fde8 	bl	8006b30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dce9      	bgt.n	8005f44 <prvUnlockQueue+0x60>
 8005f70:	e000      	b.n	8005f74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	22ff      	movs	r2, #255	@ 0xff
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f7c:	f7ff faa6 	bl	80054cc <vPortExitCritical>
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f90:	f7ff fa6a 	bl	8005468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e001      	b.n	8005fa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f7ff fa91 	bl	80054cc <vPortExitCritical>

	return xReturn;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fbc:	f7ff fa54 	bl	8005468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d102      	bne.n	8005fd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e001      	b.n	8005fd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fd6:	f7ff fa79 	bl	80054cc <vPortExitCritical>

	return xReturn;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e014      	b.n	800601e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8006034 <vQueueAddToRegistry+0x50>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006000:	490c      	ldr	r1, [pc, #48]	@ (8006034 <vQueueAddToRegistry+0x50>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800600a:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <vQueueAddToRegistry+0x50>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4413      	add	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006016:	e006      	b.n	8006026 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b07      	cmp	r3, #7
 8006022:	d9e7      	bls.n	8005ff4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2400464c 	.word	0x2400464c

08006038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006048:	f7ff fa0e 	bl	8005468 <vPortEnterCritical>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006052:	b25b      	sxtb	r3, r3
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d103      	bne.n	8006062 <vQueueWaitForMessageRestricted+0x2a>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006068:	b25b      	sxtb	r3, r3
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d103      	bne.n	8006078 <vQueueWaitForMessageRestricted+0x40>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006078:	f7ff fa28 	bl	80054cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	3324      	adds	r3, #36	@ 0x24
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fc45 	bl	800691c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff ff26 	bl	8005ee4 <prvUnlockQueue>
	}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	@ 0x38
 80060a4:	af04      	add	r7, sp, #16
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	623b      	str	r3, [r7, #32]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	61fb      	str	r3, [r7, #28]
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ea:	235c      	movs	r3, #92	@ 0x5c
 80060ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80060f2:	d00b      	beq.n	800610c <xTaskCreateStatic+0x6c>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800610c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01e      	beq.n	8006152 <xTaskCreateStatic+0xb2>
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01b      	beq.n	8006152 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800612c:	2300      	movs	r3, #0
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	f107 0314 	add.w	r3, r7, #20
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f850 	bl	80061ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800614a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800614c:	f000 f8de 	bl	800630c <prvAddNewTaskToReadyList>
 8006150:	e001      	b.n	8006156 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006156:	697b      	ldr	r3, [r7, #20]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	@ 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	@ 0x30
 8006164:	af04      	add	r7, sp, #16
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fda7 	bl	8004cc8 <pvPortMalloc>
 800617a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006182:	205c      	movs	r0, #92	@ 0x5c
 8006184:	f7fe fda0 	bl	8004cc8 <pvPortMalloc>
 8006188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	631a      	str	r2, [r3, #48]	@ 0x30
 8006196:	e005      	b.n	80061a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006198:	6978      	ldr	r0, [r7, #20]
 800619a:	f7fe fe63 	bl	8004e64 <vPortFree>
 800619e:	e001      	b.n	80061a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f80e 	bl	80061ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ce:	69f8      	ldr	r0, [r7, #28]
 80061d0:	f000 f89c 	bl	800630c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061d4:	2301      	movs	r3, #1
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e002      	b.n	80061e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061e0:	69bb      	ldr	r3, [r7, #24]
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	461a      	mov	r2, r3
 8006202:	21a5      	movs	r1, #165	@ 0xa5
 8006204:	f005 f9df 	bl	800b5c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006212:	440b      	add	r3, r1
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	617b      	str	r3, [r7, #20]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01f      	beq.n	800628a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e012      	b.n	8006276 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	7819      	ldrb	r1, [r3, #0]
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	3334      	adds	r3, #52	@ 0x34
 8006260:	460a      	mov	r2, r1
 8006262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d9e9      	bls.n	8006250 <prvInitialiseNewTask+0x66>
 800627c:	e000      	b.n	8006280 <prvInitialiseNewTask+0x96>
			{
				break;
 800627e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006288:	e003      	b.n	8006292 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	2b37      	cmp	r3, #55	@ 0x37
 8006296:	d901      	bls.n	800629c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006298:	2337      	movs	r3, #55	@ 0x37
 800629a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe ff16 	bl	80050e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	3318      	adds	r3, #24
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe ff11 	bl	80050e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	2200      	movs	r2, #0
 80062dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	69b8      	ldr	r0, [r7, #24]
 80062ec:	f7fe ff8e 	bl	800520c <pxPortInitialiseStack>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006302:	bf00      	nop
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006314:	f7ff f8a8 	bl	8005468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006318:	4b2d      	ldr	r3, [pc, #180]	@ (80063d0 <prvAddNewTaskToReadyList+0xc4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	4a2c      	ldr	r2, [pc, #176]	@ (80063d0 <prvAddNewTaskToReadyList+0xc4>)
 8006320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006322:	4b2c      	ldr	r3, [pc, #176]	@ (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800632a:	4a2a      	ldr	r2, [pc, #168]	@ (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006330:	4b27      	ldr	r3, [pc, #156]	@ (80063d0 <prvAddNewTaskToReadyList+0xc4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d110      	bne.n	800635a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006338:	f000 fc1e 	bl	8006b78 <prvInitialiseTaskLists>
 800633c:	e00d      	b.n	800635a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800633e:	4b26      	ldr	r3, [pc, #152]	@ (80063d8 <prvAddNewTaskToReadyList+0xcc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006346:	4b23      	ldr	r3, [pc, #140]	@ (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	429a      	cmp	r2, r3
 8006352:	d802      	bhi.n	800635a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006354:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800635a:	4b20      	ldr	r3, [pc, #128]	@ (80063dc <prvAddNewTaskToReadyList+0xd0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	4a1e      	ldr	r2, [pc, #120]	@ (80063dc <prvAddNewTaskToReadyList+0xd0>)
 8006362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006364:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <prvAddNewTaskToReadyList+0xd0>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <prvAddNewTaskToReadyList+0xd4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d903      	bls.n	8006380 <prvAddNewTaskToReadyList+0x74>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	4a18      	ldr	r2, [pc, #96]	@ (80063e0 <prvAddNewTaskToReadyList+0xd4>)
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <prvAddNewTaskToReadyList+0xd8>)
 800638e:	441a      	add	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fe feb1 	bl	80050fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800639c:	f7ff f896 	bl	80054cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063a0:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <prvAddNewTaskToReadyList+0xcc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00e      	beq.n	80063c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <prvAddNewTaskToReadyList+0xc8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d207      	bcs.n	80063c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063b6:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <prvAddNewTaskToReadyList+0xdc>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	24004b60 	.word	0x24004b60
 80063d4:	2400468c 	.word	0x2400468c
 80063d8:	24004b6c 	.word	0x24004b6c
 80063dc:	24004b7c 	.word	0x24004b7c
 80063e0:	24004b68 	.word	0x24004b68
 80063e4:	24004690 	.word	0x24004690
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063fe:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <vTaskDelay+0x64>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <vTaskDelay+0x32>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60bb      	str	r3, [r7, #8]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800641e:	f000 f883 	bl	8006528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006422:	2100      	movs	r1, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fdf5 	bl	8007014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800642a:	f000 f88b 	bl	8006544 <xTaskResumeAll>
 800642e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d107      	bne.n	8006446 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006436:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <vTaskDelay+0x68>)
 8006438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	24004b88 	.word	0x24004b88
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	@ 0x28
 800645c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006466:	463a      	mov	r2, r7
 8006468:	1d39      	adds	r1, r7, #4
 800646a:	f107 0308 	add.w	r3, r7, #8
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fbf6 	bl	8004c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	9202      	str	r2, [sp, #8]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	2300      	movs	r3, #0
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	2300      	movs	r3, #0
 8006484:	460a      	mov	r2, r1
 8006486:	4922      	ldr	r1, [pc, #136]	@ (8006510 <vTaskStartScheduler+0xb8>)
 8006488:	4822      	ldr	r0, [pc, #136]	@ (8006514 <vTaskStartScheduler+0xbc>)
 800648a:	f7ff fe09 	bl	80060a0 <xTaskCreateStatic>
 800648e:	4603      	mov	r3, r0
 8006490:	4a21      	ldr	r2, [pc, #132]	@ (8006518 <vTaskStartScheduler+0xc0>)
 8006492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006494:	4b20      	ldr	r3, [pc, #128]	@ (8006518 <vTaskStartScheduler+0xc0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e001      	b.n	80064a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d102      	bne.n	80064b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064ac:	f000 fe06 	bl	80070bc <xTimerCreateTimerTask>
 80064b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d116      	bne.n	80064e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	613b      	str	r3, [r7, #16]
}
 80064ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064cc:	4b13      	ldr	r3, [pc, #76]	@ (800651c <vTaskStartScheduler+0xc4>)
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295
 80064d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <vTaskStartScheduler+0xc8>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064da:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <vTaskStartScheduler+0xcc>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064e0:	f7fe ff1e 	bl	8005320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064e4:	e00f      	b.n	8006506 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d10b      	bne.n	8006506 <vTaskStartScheduler+0xae>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <vTaskStartScheduler+0xaa>
}
 8006506:	bf00      	nop
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	0800ea9c 	.word	0x0800ea9c
 8006514:	08006b49 	.word	0x08006b49
 8006518:	24004b84 	.word	0x24004b84
 800651c:	24004b80 	.word	0x24004b80
 8006520:	24004b6c 	.word	0x24004b6c
 8006524:	24004b64 	.word	0x24004b64

08006528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800652c:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <vTaskSuspendAll+0x18>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a03      	ldr	r2, [pc, #12]	@ (8006540 <vTaskSuspendAll+0x18>)
 8006534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	24004b88 	.word	0x24004b88

08006544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006552:	4b42      	ldr	r3, [pc, #264]	@ (800665c <xTaskResumeAll+0x118>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10b      	bne.n	8006572 <xTaskResumeAll+0x2e>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006572:	f7fe ff79 	bl	8005468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006576:	4b39      	ldr	r3, [pc, #228]	@ (800665c <xTaskResumeAll+0x118>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3b01      	subs	r3, #1
 800657c:	4a37      	ldr	r2, [pc, #220]	@ (800665c <xTaskResumeAll+0x118>)
 800657e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006580:	4b36      	ldr	r3, [pc, #216]	@ (800665c <xTaskResumeAll+0x118>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d162      	bne.n	800664e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006588:	4b35      	ldr	r3, [pc, #212]	@ (8006660 <xTaskResumeAll+0x11c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d05e      	beq.n	800664e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006590:	e02f      	b.n	80065f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006592:	4b34      	ldr	r3, [pc, #208]	@ (8006664 <xTaskResumeAll+0x120>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3318      	adds	r3, #24
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fe0a 	bl	80051b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fe05 	bl	80051b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006668 <xTaskResumeAll+0x124>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <xTaskResumeAll+0x7e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	4a2a      	ldr	r2, [pc, #168]	@ (8006668 <xTaskResumeAll+0x124>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a27      	ldr	r2, [pc, #156]	@ (800666c <xTaskResumeAll+0x128>)
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe fd90 	bl	80050fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e2:	4b23      	ldr	r3, [pc, #140]	@ (8006670 <xTaskResumeAll+0x12c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d302      	bcc.n	80065f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065ec:	4b21      	ldr	r3, [pc, #132]	@ (8006674 <xTaskResumeAll+0x130>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006664 <xTaskResumeAll+0x120>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1cb      	bne.n	8006592 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006600:	f000 fb58 	bl	8006cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006604:	4b1c      	ldr	r3, [pc, #112]	@ (8006678 <xTaskResumeAll+0x134>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006610:	f000 f846 	bl	80066a0 <xTaskIncrementTick>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800661a:	4b16      	ldr	r3, [pc, #88]	@ (8006674 <xTaskResumeAll+0x130>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f1      	bne.n	8006610 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800662c:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <xTaskResumeAll+0x134>)
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006632:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <xTaskResumeAll+0x130>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800663a:	2301      	movs	r3, #1
 800663c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800663e:	4b0f      	ldr	r3, [pc, #60]	@ (800667c <xTaskResumeAll+0x138>)
 8006640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800664e:	f7fe ff3d 	bl	80054cc <vPortExitCritical>

	return xAlreadyYielded;
 8006652:	68bb      	ldr	r3, [r7, #8]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	24004b88 	.word	0x24004b88
 8006660:	24004b60 	.word	0x24004b60
 8006664:	24004b20 	.word	0x24004b20
 8006668:	24004b68 	.word	0x24004b68
 800666c:	24004690 	.word	0x24004690
 8006670:	2400468c 	.word	0x2400468c
 8006674:	24004b74 	.word	0x24004b74
 8006678:	24004b70 	.word	0x24004b70
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006686:	4b05      	ldr	r3, [pc, #20]	@ (800669c <xTaskGetTickCount+0x1c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800668c:	687b      	ldr	r3, [r7, #4]
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	24004b64 	.word	0x24004b64

080066a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066aa:	4b4f      	ldr	r3, [pc, #316]	@ (80067e8 <xTaskIncrementTick+0x148>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 8090 	bne.w	80067d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066b4:	4b4d      	ldr	r3, [pc, #308]	@ (80067ec <xTaskIncrementTick+0x14c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066bc:	4a4b      	ldr	r2, [pc, #300]	@ (80067ec <xTaskIncrementTick+0x14c>)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d121      	bne.n	800670c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80066c8:	4b49      	ldr	r3, [pc, #292]	@ (80067f0 <xTaskIncrementTick+0x150>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	603b      	str	r3, [r7, #0]
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	e7fd      	b.n	80066e6 <xTaskIncrementTick+0x46>
 80066ea:	4b41      	ldr	r3, [pc, #260]	@ (80067f0 <xTaskIncrementTick+0x150>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	4b40      	ldr	r3, [pc, #256]	@ (80067f4 <xTaskIncrementTick+0x154>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3e      	ldr	r2, [pc, #248]	@ (80067f0 <xTaskIncrementTick+0x150>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4a3e      	ldr	r2, [pc, #248]	@ (80067f4 <xTaskIncrementTick+0x154>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <xTaskIncrementTick+0x158>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	4a3c      	ldr	r2, [pc, #240]	@ (80067f8 <xTaskIncrementTick+0x158>)
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	f000 fad4 	bl	8006cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800670c:	4b3b      	ldr	r3, [pc, #236]	@ (80067fc <xTaskIncrementTick+0x15c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d349      	bcc.n	80067aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006716:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <xTaskIncrementTick+0x150>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006720:	4b36      	ldr	r3, [pc, #216]	@ (80067fc <xTaskIncrementTick+0x15c>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	601a      	str	r2, [r3, #0]
					break;
 8006728:	e03f      	b.n	80067aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672a:	4b31      	ldr	r3, [pc, #196]	@ (80067f0 <xTaskIncrementTick+0x150>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d203      	bcs.n	800674a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006742:	4a2e      	ldr	r2, [pc, #184]	@ (80067fc <xTaskIncrementTick+0x15c>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006748:	e02f      	b.n	80067aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	3304      	adds	r3, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fd32 	bl	80051b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	3318      	adds	r3, #24
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fd29 	bl	80051b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	4b25      	ldr	r3, [pc, #148]	@ (8006800 <xTaskIncrementTick+0x160>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d903      	bls.n	800677a <xTaskIncrementTick+0xda>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	4a22      	ldr	r2, [pc, #136]	@ (8006800 <xTaskIncrementTick+0x160>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a1f      	ldr	r2, [pc, #124]	@ (8006804 <xTaskIncrementTick+0x164>)
 8006788:	441a      	add	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7fe fcb4 	bl	80050fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <xTaskIncrementTick+0x168>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d3b8      	bcc.n	8006716 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a8:	e7b5      	b.n	8006716 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067aa:	4b17      	ldr	r3, [pc, #92]	@ (8006808 <xTaskIncrementTick+0x168>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b0:	4914      	ldr	r1, [pc, #80]	@ (8006804 <xTaskIncrementTick+0x164>)
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d901      	bls.n	80067c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067c6:	4b11      	ldr	r3, [pc, #68]	@ (800680c <xTaskIncrementTick+0x16c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e004      	b.n	80067de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <xTaskIncrementTick+0x170>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	4a0d      	ldr	r2, [pc, #52]	@ (8006810 <xTaskIncrementTick+0x170>)
 80067dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067de:	697b      	ldr	r3, [r7, #20]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	24004b88 	.word	0x24004b88
 80067ec:	24004b64 	.word	0x24004b64
 80067f0:	24004b18 	.word	0x24004b18
 80067f4:	24004b1c 	.word	0x24004b1c
 80067f8:	24004b78 	.word	0x24004b78
 80067fc:	24004b80 	.word	0x24004b80
 8006800:	24004b68 	.word	0x24004b68
 8006804:	24004690 	.word	0x24004690
 8006808:	2400468c 	.word	0x2400468c
 800680c:	24004b74 	.word	0x24004b74
 8006810:	24004b70 	.word	0x24004b70

08006814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681a:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <vTaskSwitchContext+0xa8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006822:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <vTaskSwitchContext+0xac>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006828:	e042      	b.n	80068b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800682a:	4b25      	ldr	r3, [pc, #148]	@ (80068c0 <vTaskSwitchContext+0xac>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	4b24      	ldr	r3, [pc, #144]	@ (80068c4 <vTaskSwitchContext+0xb0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e011      	b.n	800685c <vTaskSwitchContext+0x48>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10b      	bne.n	8006856 <vTaskSwitchContext+0x42>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vTaskSwitchContext+0x3e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b01      	subs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	491a      	ldr	r1, [pc, #104]	@ (80068c8 <vTaskSwitchContext+0xb4>)
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0e3      	beq.n	8006838 <vTaskSwitchContext+0x24>
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4a13      	ldr	r2, [pc, #76]	@ (80068c8 <vTaskSwitchContext+0xb4>)
 800687c:	4413      	add	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	3308      	adds	r3, #8
 8006892:	429a      	cmp	r2, r3
 8006894:	d104      	bne.n	80068a0 <vTaskSwitchContext+0x8c>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	4a09      	ldr	r2, [pc, #36]	@ (80068cc <vTaskSwitchContext+0xb8>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	4a06      	ldr	r2, [pc, #24]	@ (80068c4 <vTaskSwitchContext+0xb0>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6013      	str	r3, [r2, #0]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	24004b88 	.word	0x24004b88
 80068c0:	24004b74 	.word	0x24004b74
 80068c4:	24004b68 	.word	0x24004b68
 80068c8:	24004690 	.word	0x24004690
 80068cc:	2400468c 	.word	0x2400468c

080068d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <vTaskPlaceOnEventList+0x48>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3318      	adds	r3, #24
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fe fc20 	bl	8005146 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006906:	2101      	movs	r1, #1
 8006908:	6838      	ldr	r0, [r7, #0]
 800690a:	f000 fb83 	bl	8007014 <prvAddCurrentTaskToDelayedList>
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2400468c 	.word	0x2400468c

0800691c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10b      	bne.n	8006946 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006946:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <vTaskPlaceOnEventListRestricted+0x54>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3318      	adds	r3, #24
 800694c:	4619      	mov	r1, r3
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7fe fbd5 	bl	80050fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800695a:	f04f 33ff 	mov.w	r3, #4294967295
 800695e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f000 fb56 	bl	8007014 <prvAddCurrentTaskToDelayedList>
	}
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	2400468c 	.word	0x2400468c

08006974 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3318      	adds	r3, #24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc06 	bl	80051b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006a24 <xTaskRemoveFromEventList+0xb0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11d      	bne.n	80069f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fbfd 	bl	80051b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	4b19      	ldr	r3, [pc, #100]	@ (8006a28 <xTaskRemoveFromEventList+0xb4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d903      	bls.n	80069d2 <xTaskRemoveFromEventList+0x5e>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ce:	4a16      	ldr	r2, [pc, #88]	@ (8006a28 <xTaskRemoveFromEventList+0xb4>)
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a13      	ldr	r2, [pc, #76]	@ (8006a2c <xTaskRemoveFromEventList+0xb8>)
 80069e0:	441a      	add	r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fe fb88 	bl	80050fe <vListInsertEnd>
 80069ee:	e005      	b.n	80069fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4619      	mov	r1, r3
 80069f6:	480e      	ldr	r0, [pc, #56]	@ (8006a30 <xTaskRemoveFromEventList+0xbc>)
 80069f8:	f7fe fb81 	bl	80050fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a00:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <xTaskRemoveFromEventList+0xc0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d905      	bls.n	8006a16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <xTaskRemoveFromEventList+0xc4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e001      	b.n	8006a1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a1a:	697b      	ldr	r3, [r7, #20]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	24004b88 	.word	0x24004b88
 8006a28:	24004b68 	.word	0x24004b68
 8006a2c:	24004690 	.word	0x24004690
 8006a30:	24004b20 	.word	0x24004b20
 8006a34:	2400468c 	.word	0x2400468c
 8006a38:	24004b74 	.word	0x24004b74

08006a3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a44:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <vTaskInternalSetTimeOutState+0x24>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <vTaskInternalSetTimeOutState+0x28>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	24004b78 	.word	0x24004b78
 8006a64:	24004b64 	.word	0x24004b64

08006a68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	613b      	str	r3, [r7, #16]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	60fb      	str	r3, [r7, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006aae:	f7fe fcdb 	bl	8005468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <xTaskCheckForTimeOut+0xc0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d102      	bne.n	8006ad2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e023      	b.n	8006b1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b15      	ldr	r3, [pc, #84]	@ (8006b2c <xTaskCheckForTimeOut+0xc4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d007      	beq.n	8006aee <xTaskCheckForTimeOut+0x86>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d302      	bcc.n	8006aee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e015      	b.n	8006b1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d20b      	bcs.n	8006b10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff99 	bl	8006a3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e004      	b.n	8006b1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b1a:	f7fe fcd7 	bl	80054cc <vPortExitCritical>

	return xReturn;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	24004b64 	.word	0x24004b64
 8006b2c:	24004b78 	.word	0x24004b78

08006b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b34:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <vTaskMissedYield+0x14>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	24004b74 	.word	0x24004b74

08006b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b50:	f000 f852 	bl	8006bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <prvIdleTask+0x28>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d9f9      	bls.n	8006b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b5c:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <prvIdleTask+0x2c>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b6c:	e7f0      	b.n	8006b50 <prvIdleTask+0x8>
 8006b6e:	bf00      	nop
 8006b70:	24004690 	.word	0x24004690
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	e00c      	b.n	8006b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4a12      	ldr	r2, [pc, #72]	@ (8006bd8 <prvInitialiseTaskLists+0x60>)
 8006b90:	4413      	add	r3, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fa86 	bl	80050a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b37      	cmp	r3, #55	@ 0x37
 8006ba2:	d9ef      	bls.n	8006b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba4:	480d      	ldr	r0, [pc, #52]	@ (8006bdc <prvInitialiseTaskLists+0x64>)
 8006ba6:	f7fe fa7d 	bl	80050a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006baa:	480d      	ldr	r0, [pc, #52]	@ (8006be0 <prvInitialiseTaskLists+0x68>)
 8006bac:	f7fe fa7a 	bl	80050a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb0:	480c      	ldr	r0, [pc, #48]	@ (8006be4 <prvInitialiseTaskLists+0x6c>)
 8006bb2:	f7fe fa77 	bl	80050a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bb6:	480c      	ldr	r0, [pc, #48]	@ (8006be8 <prvInitialiseTaskLists+0x70>)
 8006bb8:	f7fe fa74 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bbc:	480b      	ldr	r0, [pc, #44]	@ (8006bec <prvInitialiseTaskLists+0x74>)
 8006bbe:	f7fe fa71 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <prvInitialiseTaskLists+0x78>)
 8006bc4:	4a05      	ldr	r2, [pc, #20]	@ (8006bdc <prvInitialiseTaskLists+0x64>)
 8006bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <prvInitialiseTaskLists+0x7c>)
 8006bca:	4a05      	ldr	r2, [pc, #20]	@ (8006be0 <prvInitialiseTaskLists+0x68>)
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	24004690 	.word	0x24004690
 8006bdc:	24004af0 	.word	0x24004af0
 8006be0:	24004b04 	.word	0x24004b04
 8006be4:	24004b20 	.word	0x24004b20
 8006be8:	24004b34 	.word	0x24004b34
 8006bec:	24004b4c 	.word	0x24004b4c
 8006bf0:	24004b18 	.word	0x24004b18
 8006bf4:	24004b1c 	.word	0x24004b1c

08006bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bfe:	e019      	b.n	8006c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c00:	f7fe fc32 	bl	8005468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c04:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <prvCheckTasksWaitingTermination+0x50>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fad1 	bl	80051b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <prvCheckTasksWaitingTermination+0x54>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c4c <prvCheckTasksWaitingTermination+0x54>)
 8006c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4a0a      	ldr	r2, [pc, #40]	@ (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c2a:	f7fe fc4f 	bl	80054cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f810 	bl	8006c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <prvCheckTasksWaitingTermination+0x58>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e1      	bne.n	8006c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	24004b34 	.word	0x24004b34
 8006c4c:	24004b60 	.word	0x24004b60
 8006c50:	24004b48 	.word	0x24004b48

08006c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d108      	bne.n	8006c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe f8fa 	bl	8004e64 <vPortFree>
				vPortFree( pxTCB );
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe f8f7 	bl	8004e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c76:	e019      	b.n	8006cac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d103      	bne.n	8006c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fe f8ee 	bl	8004e64 <vPortFree>
	}
 8006c88:	e010      	b.n	8006cac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d00b      	beq.n	8006cac <prvDeleteTCB+0x58>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvDeleteTCB+0x54>
	}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cba:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <prvResetNextTaskUnblockTime+0x38>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ccc:	e008      	b.n	8006ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cce:	4b07      	ldr	r3, [pc, #28]	@ (8006cec <prvResetNextTaskUnblockTime+0x38>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cde:	6013      	str	r3, [r2, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	24004b18 	.word	0x24004b18
 8006cf0:	24004b80 	.word	0x24004b80

08006cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <xTaskGetSchedulerState+0x34>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d02:	2301      	movs	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e008      	b.n	8006d1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d08:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <xTaskGetSchedulerState+0x38>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d10:	2302      	movs	r3, #2
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	e001      	b.n	8006d1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d1a:	687b      	ldr	r3, [r7, #4]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	24004b6c 	.word	0x24004b6c
 8006d2c:	24004b88 	.word	0x24004b88

08006d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d058      	beq.n	8006df8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d46:	4b2f      	ldr	r3, [pc, #188]	@ (8006e04 <xTaskPriorityDisinherit+0xd4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d00b      	beq.n	8006d68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60bb      	str	r3, [r7, #8]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8c:	1e5a      	subs	r2, r3, #1
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d02c      	beq.n	8006df8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d128      	bne.n	8006df8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fa04 	bl	80051b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <xTaskPriorityDisinherit+0xd8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d903      	bls.n	8006dd8 <xTaskPriorityDisinherit+0xa8>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <xTaskPriorityDisinherit+0xd8>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a09      	ldr	r2, [pc, #36]	@ (8006e0c <xTaskPriorityDisinherit+0xdc>)
 8006de6:	441a      	add	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7fe f985 	bl	80050fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006df8:	697b      	ldr	r3, [r7, #20]
	}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	2400468c 	.word	0x2400468c
 8006e08:	24004b68 	.word	0x24004b68
 8006e0c:	24004690 	.word	0x24004690

08006e10 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e1a:	f7fe fb25 	bl	8005468 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d113      	bne.n	8006e50 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e28:	4b1b      	ldr	r3, [pc, #108]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6838      	ldr	r0, [r7, #0]
 8006e3c:	f000 f8ea 	bl	8007014 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e40:	4b16      	ldr	r3, [pc, #88]	@ (8006e9c <ulTaskNotifyTake+0x8c>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e50:	f7fe fb3c 	bl	80054cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e54:	f7fe fb08 	bl	8005468 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e58:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2200      	movs	r2, #0
 8006e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e74:	e004      	b.n	8006e80 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e76:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <ulTaskNotifyTake+0x88>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006e8a:	f7fe fb1f 	bl	80054cc <vPortExitCritical>

		return ulReturn;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2400468c 	.word	0x2400468c
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	@ 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xTaskGenericNotify+0x32>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	61bb      	str	r3, [r7, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006ed6:	f7fe fac7 	bl	8005468 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006eee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d827      	bhi.n	8006f4e <xTaskGenericNotify+0xae>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <xTaskGenericNotify+0x64>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f27 	.word	0x08006f27
 8006f10:	08006f33 	.word	0x08006f33
 8006f14:	08006f3b 	.word	0x08006f3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f24:	e027      	b.n	8006f76 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f30:	e021      	b.n	8006f76 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006f38:	e01d      	b.n	8006f76 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d003      	beq.n	8006f48 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f46:	e016      	b.n	8006f76 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006f4c:	e013      	b.n	8006f76 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d00d      	beq.n	8006f74 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	617b      	str	r3, [r7, #20]
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <xTaskGenericNotify+0xcc>
					break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <xTaskGenericNotify+0xd6>

					break;
 8006f74:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f76:	7ffb      	ldrb	r3, [r7, #31]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d13b      	bne.n	8006ff4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe f919 	bl	80051b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007004 <xTaskGenericNotify+0x164>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d903      	bls.n	8006f9a <xTaskGenericNotify+0xfa>
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	4a1b      	ldr	r2, [pc, #108]	@ (8007004 <xTaskGenericNotify+0x164>)
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <xTaskGenericNotify+0x168>)
 8006fa8:	441a      	add	r2, r3
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe f8a4 	bl	80050fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <xTaskGenericNotify+0x136>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	613b      	str	r3, [r7, #16]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <xTaskGenericNotify+0x16c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d907      	bls.n	8006ff4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <xTaskGenericNotify+0x170>)
 8006fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ff4:	f7fe fa6a 	bl	80054cc <vPortExitCritical>

		return xReturn;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3728      	adds	r7, #40	@ 0x28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	24004b68 	.word	0x24004b68
 8007008:	24004690 	.word	0x24004690
 800700c:	2400468c 	.word	0x2400468c
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800701e:	4b21      	ldr	r3, [pc, #132]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007024:	4b20      	ldr	r3, [pc, #128]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe f8c4 	bl	80051b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d10a      	bne.n	800704e <prvAddCurrentTaskToDelayedList+0x3a>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4819      	ldr	r0, [pc, #100]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007048:	f7fe f859 	bl	80050fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800704c:	e026      	b.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007056:	4b14      	ldr	r3, [pc, #80]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d209      	bcs.n	800707a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b12      	ldr	r3, [pc, #72]	@ (80070b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b0f      	ldr	r3, [pc, #60]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe f867 	bl	8005146 <vListInsert>
}
 8007078:	e010      	b.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707a:	4b0e      	ldr	r3, [pc, #56]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe f85d 	bl	8005146 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d202      	bcs.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007096:	4a08      	ldr	r2, [pc, #32]	@ (80070b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	24004b64 	.word	0x24004b64
 80070a8:	2400468c 	.word	0x2400468c
 80070ac:	24004b4c 	.word	0x24004b4c
 80070b0:	24004b1c 	.word	0x24004b1c
 80070b4:	24004b18 	.word	0x24004b18
 80070b8:	24004b80 	.word	0x24004b80

080070bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	@ 0x28
 80070c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070c6:	f000 fb13 	bl	80076f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007140 <xTimerCreateTimerTask+0x84>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d021      	beq.n	8007116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070da:	1d3a      	adds	r2, r7, #4
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fd fdd5 	bl	8004c94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	9202      	str	r2, [sp, #8]
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2302      	movs	r3, #2
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	460a      	mov	r2, r1
 80070fc:	4911      	ldr	r1, [pc, #68]	@ (8007144 <xTimerCreateTimerTask+0x88>)
 80070fe:	4812      	ldr	r0, [pc, #72]	@ (8007148 <xTimerCreateTimerTask+0x8c>)
 8007100:	f7fe ffce 	bl	80060a0 <xTaskCreateStatic>
 8007104:	4603      	mov	r3, r0
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <xTimerCreateTimerTask+0x90>)
 8007108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800710a:	4b10      	ldr	r3, [pc, #64]	@ (800714c <xTimerCreateTimerTask+0x90>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	613b      	str	r3, [r7, #16]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007134:	697b      	ldr	r3, [r7, #20]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	24004bbc 	.word	0x24004bbc
 8007144:	0800eaa4 	.word	0x0800eaa4
 8007148:	08007289 	.word	0x08007289
 800714c:	24004bc0 	.word	0x24004bc0

08007150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	@ 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800715e:	2300      	movs	r3, #0
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <xTimerGenericCommand+0x30>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	623b      	str	r3, [r7, #32]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007180:	4b19      	ldr	r3, [pc, #100]	@ (80071e8 <xTimerGenericCommand+0x98>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02a      	beq.n	80071de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b05      	cmp	r3, #5
 8007198:	dc18      	bgt.n	80071cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800719a:	f7ff fdab 	bl	8006cf4 <xTaskGetSchedulerState>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d109      	bne.n	80071b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071a4:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <xTimerGenericCommand+0x98>)
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	f107 0110 	add.w	r1, r7, #16
 80071ac:	2300      	movs	r3, #0
 80071ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b0:	f7fe fb86 	bl	80058c0 <xQueueGenericSend>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80071b6:	e012      	b.n	80071de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071b8:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <xTimerGenericCommand+0x98>)
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	f107 0110 	add.w	r1, r7, #16
 80071c0:	2300      	movs	r3, #0
 80071c2:	2200      	movs	r2, #0
 80071c4:	f7fe fb7c 	bl	80058c0 <xQueueGenericSend>
 80071c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071ca:	e008      	b.n	80071de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071cc:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <xTimerGenericCommand+0x98>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	f107 0110 	add.w	r1, r7, #16
 80071d4:	2300      	movs	r3, #0
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	f7fe fc74 	bl	8005ac4 <xQueueGenericSendFromISR>
 80071dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	@ 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	24004bbc 	.word	0x24004bbc

080071ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f6:	4b23      	ldr	r3, [pc, #140]	@ (8007284 <prvProcessExpiredTimer+0x98>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd ffd7 	bl	80051b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d023      	beq.n	8007260 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	18d1      	adds	r1, r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	6978      	ldr	r0, [r7, #20]
 8007226:	f000 f8d5 	bl	80073d4 <prvInsertTimerInActiveList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d020      	beq.n	8007272 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007230:	2300      	movs	r3, #0
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	2100      	movs	r1, #0
 800723a:	6978      	ldr	r0, [r7, #20]
 800723c:	f7ff ff88 	bl	8007150 <xTimerGenericCommand>
 8007240:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d114      	bne.n	8007272 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007266:	f023 0301 	bic.w	r3, r3, #1
 800726a:	b2da      	uxtb	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	4798      	blx	r3
}
 800727a:	bf00      	nop
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	24004bb4 	.word	0x24004bb4

08007288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007290:	f107 0308 	add.w	r3, r7, #8
 8007294:	4618      	mov	r0, r3
 8007296:	f000 f859 	bl	800734c <prvGetNextExpireTime>
 800729a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4619      	mov	r1, r3
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f805 	bl	80072b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072a6:	f000 f8d7 	bl	8007458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072aa:	bf00      	nop
 80072ac:	e7f0      	b.n	8007290 <prvTimerTask+0x8>
	...

080072b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ba:	f7ff f935 	bl	8006528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072be:	f107 0308 	add.w	r3, r7, #8
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f866 	bl	8007394 <prvSampleTimeNow>
 80072c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d130      	bne.n	8007332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <prvProcessTimerOrBlockTask+0x3c>
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d806      	bhi.n	80072ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072de:	f7ff f931 	bl	8006544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff ff81 	bl	80071ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072ea:	e024      	b.n	8007336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072f2:	4b13      	ldr	r3, [pc, #76]	@ (8007340 <prvProcessTimerOrBlockTask+0x90>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <prvProcessTimerOrBlockTask+0x50>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <prvProcessTimerOrBlockTask+0x52>
 8007300:	2300      	movs	r3, #0
 8007302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <prvProcessTimerOrBlockTask+0x94>)
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4619      	mov	r1, r3
 8007312:	f7fe fe91 	bl	8006038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007316:	f7ff f915 	bl	8006544 <xTaskResumeAll>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007320:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <prvProcessTimerOrBlockTask+0x98>)
 8007322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
}
 8007330:	e001      	b.n	8007336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007332:	f7ff f907 	bl	8006544 <xTaskResumeAll>
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	24004bb8 	.word	0x24004bb8
 8007344:	24004bbc 	.word	0x24004bbc
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007354:	4b0e      	ldr	r3, [pc, #56]	@ (8007390 <prvGetNextExpireTime+0x44>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <prvGetNextExpireTime+0x16>
 800735e:	2201      	movs	r2, #1
 8007360:	e000      	b.n	8007364 <prvGetNextExpireTime+0x18>
 8007362:	2200      	movs	r2, #0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <prvGetNextExpireTime+0x44>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e001      	b.n	8007380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007380:	68fb      	ldr	r3, [r7, #12]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	24004bb4 	.word	0x24004bb4

08007394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800739c:	f7ff f970 	bl	8006680 <xTaskGetTickCount>
 80073a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073a2:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <prvSampleTimeNow+0x3c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d205      	bcs.n	80073b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073ac:	f000 f93a 	bl	8007624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e002      	b.n	80073be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073be:	4a04      	ldr	r2, [pc, #16]	@ (80073d0 <prvSampleTimeNow+0x3c>)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073c4:	68fb      	ldr	r3, [r7, #12]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	24004bc4 	.word	0x24004bc4

080073d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d812      	bhi.n	8007420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	429a      	cmp	r2, r3
 8007406:	d302      	bcc.n	800740e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007408:	2301      	movs	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e01b      	b.n	8007446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800740e:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <prvInsertTimerInActiveList+0x7c>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3304      	adds	r3, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7fd fe94 	bl	8005146 <vListInsert>
 800741e:	e012      	b.n	8007446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d206      	bcs.n	8007436 <prvInsertTimerInActiveList+0x62>
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d302      	bcc.n	8007436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e007      	b.n	8007446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007436:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <prvInsertTimerInActiveList+0x80>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fd fe80 	bl	8005146 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	24004bb8 	.word	0x24004bb8
 8007454:	24004bb4 	.word	0x24004bb4

08007458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08e      	sub	sp, #56	@ 0x38
 800745c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800745e:	e0ce      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da19      	bge.n	800749a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007466:	1d3b      	adds	r3, r7, #4
 8007468:	3304      	adds	r3, #4
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800746c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61fb      	str	r3, [r7, #28]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007490:	6850      	ldr	r0, [r2, #4]
 8007492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007494:	6892      	ldr	r2, [r2, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f2c0 80ae 	blt.w	80075fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fe80 	bl	80051b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b8:	463b      	mov	r3, r7
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff ff6a 	bl	8007394 <prvSampleTimeNow>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	f200 8097 	bhi.w	80075f8 <prvProcessReceivedCommands+0x1a0>
 80074ca:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <prvProcessReceivedCommands+0x78>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074f9 	.word	0x080074f9
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	080074f9 	.word	0x080074f9
 80074dc:	0800756f 	.word	0x0800756f
 80074e0:	08007583 	.word	0x08007583
 80074e4:	080075cf 	.word	0x080075cf
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	080074f9 	.word	0x080074f9
 80074f0:	0800756f 	.word	0x0800756f
 80074f4:	08007583 	.word	0x08007583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	b2da      	uxtb	r2, r3
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	18d1      	adds	r1, r2, r3
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007518:	f7ff ff5c 	bl	80073d4 <prvInsertTimerInActiveList>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d06c      	beq.n	80075fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d061      	beq.n	80075fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	441a      	add	r2, r3
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	2100      	movs	r1, #0
 8007548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800754a:	f7ff fe01 	bl	8007150 <xTimerGenericCommand>
 800754e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d152      	bne.n	80075fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	61bb      	str	r3, [r7, #24]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007580:	e03d      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	617b      	str	r3, [r7, #20]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	18d1      	adds	r1, r2, r3
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c8:	f7ff ff04 	bl	80073d4 <prvInsertTimerInActiveList>
					break;
 80075cc:	e017      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075de:	f7fd fc41 	bl	8004e64 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075e2:	e00c      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ea:	f023 0301 	bic.w	r3, r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075f6:	e002      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <prvProcessReceivedCommands+0x1a6>
					break;
 80075fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075fe:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <prvProcessReceivedCommands+0x1c8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	1d39      	adds	r1, r7, #4
 8007604:	2200      	movs	r2, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fafa 	bl	8005c00 <xQueueReceive>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	f47f af26 	bne.w	8007460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	3730      	adds	r7, #48	@ 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	24004bbc 	.word	0x24004bbc

08007624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800762a:	e049      	b.n	80076c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800762c:	4b2e      	ldr	r3, [pc, #184]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007636:	4b2c      	ldr	r3, [pc, #176]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fdb7 	bl	80051b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d02f      	beq.n	80076c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	429a      	cmp	r2, r3
 8007670:	d90e      	bls.n	8007690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800767e:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fd fd5c 	bl	8005146 <vListInsert>
 800768e:	e017      	b.n	80076c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007690:	2300      	movs	r3, #0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	2100      	movs	r1, #0
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff fd58 	bl	8007150 <xTimerGenericCommand>
 80076a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	603b      	str	r3, [r7, #0]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c0:	4b09      	ldr	r3, [pc, #36]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1b0      	bne.n	800762c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076ca:	4b07      	ldr	r3, [pc, #28]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d0:	4b06      	ldr	r3, [pc, #24]	@ (80076ec <prvSwitchTimerLists+0xc8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a04      	ldr	r2, [pc, #16]	@ (80076e8 <prvSwitchTimerLists+0xc4>)
 80076d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076d8:	4a04      	ldr	r2, [pc, #16]	@ (80076ec <prvSwitchTimerLists+0xc8>)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6013      	str	r3, [r2, #0]
}
 80076de:	bf00      	nop
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	24004bb4 	.word	0x24004bb4
 80076ec:	24004bb8 	.word	0x24004bb8

080076f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076f6:	f7fd feb7 	bl	8005468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076fa:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <prvCheckForValidListAndQueue+0x60>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d120      	bne.n	8007744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007702:	4814      	ldr	r0, [pc, #80]	@ (8007754 <prvCheckForValidListAndQueue+0x64>)
 8007704:	f7fd fcce 	bl	80050a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007708:	4813      	ldr	r0, [pc, #76]	@ (8007758 <prvCheckForValidListAndQueue+0x68>)
 800770a:	f7fd fccb 	bl	80050a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800770e:	4b13      	ldr	r3, [pc, #76]	@ (800775c <prvCheckForValidListAndQueue+0x6c>)
 8007710:	4a10      	ldr	r2, [pc, #64]	@ (8007754 <prvCheckForValidListAndQueue+0x64>)
 8007712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007714:	4b12      	ldr	r3, [pc, #72]	@ (8007760 <prvCheckForValidListAndQueue+0x70>)
 8007716:	4a10      	ldr	r2, [pc, #64]	@ (8007758 <prvCheckForValidListAndQueue+0x68>)
 8007718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800771a:	2300      	movs	r3, #0
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4b11      	ldr	r3, [pc, #68]	@ (8007764 <prvCheckForValidListAndQueue+0x74>)
 8007720:	4a11      	ldr	r2, [pc, #68]	@ (8007768 <prvCheckForValidListAndQueue+0x78>)
 8007722:	2110      	movs	r1, #16
 8007724:	200a      	movs	r0, #10
 8007726:	f7fe f82b 	bl	8005780 <xQueueGenericCreateStatic>
 800772a:	4603      	mov	r3, r0
 800772c:	4a08      	ldr	r2, [pc, #32]	@ (8007750 <prvCheckForValidListAndQueue+0x60>)
 800772e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007730:	4b07      	ldr	r3, [pc, #28]	@ (8007750 <prvCheckForValidListAndQueue+0x60>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007738:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <prvCheckForValidListAndQueue+0x60>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	490b      	ldr	r1, [pc, #44]	@ (800776c <prvCheckForValidListAndQueue+0x7c>)
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fc50 	bl	8005fe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007744:	f7fd fec2 	bl	80054cc <vPortExitCritical>
}
 8007748:	bf00      	nop
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	24004bbc 	.word	0x24004bbc
 8007754:	24004b8c 	.word	0x24004b8c
 8007758:	24004ba0 	.word	0x24004ba0
 800775c:	24004bb4 	.word	0x24004bb4
 8007760:	24004bb8 	.word	0x24004bb8
 8007764:	24004c68 	.word	0x24004c68
 8007768:	24004bc8 	.word	0x24004bc8
 800776c:	0800eaac 	.word	0x0800eaac

08007770 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff ffdd 	bl	8007792 <metal_list_add_before>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6852      	ldr	r2, [r2, #4]
 80077f0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f002 f848 	bl	80098b8 <metal_machine_cache_flush>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 f846 	bl	80098ce <metal_machine_cache_invalidate>
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ffdd 	bl	8007816 <__metal_cache_flush>
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ffdd 	bl	8007830 <__metal_cache_invalidate>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <metal_bus_register+0x20>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d004      	beq.n	80078a0 <metal_bus_register+0x20>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <metal_bus_register+0x26>
		return -EINVAL;
 80078a0:	f06f 0315 	mvn.w	r3, #21
 80078a4:	e026      	b.n	80078f4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f855 	bl	800795c <metal_bus_find>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <metal_bus_register+0x3e>
		return -EEXIST;
 80078b8:	f06f 0310 	mvn.w	r3, #16
 80078bc:	e01a      	b.n	80078f4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	331c      	adds	r3, #28
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff ff54 	bl	8007770 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3324      	adds	r3, #36	@ 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	480b      	ldr	r0, [pc, #44]	@ (80078fc <metal_bus_register+0x7c>)
 80078d0:	f7ff ff79 	bl	80077c6 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80078d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007900 <metal_bus_register+0x80>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b06      	cmp	r3, #6
 80078da:	d90a      	bls.n	80078f2 <metal_bus_register+0x72>
 80078dc:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <metal_bus_register+0x80>)
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d006      	beq.n	80078f2 <metal_bus_register+0x72>
 80078e4:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <metal_bus_register+0x80>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6812      	ldr	r2, [r2, #0]
 80078ec:	4905      	ldr	r1, [pc, #20]	@ (8007904 <metal_bus_register+0x84>)
 80078ee:	2007      	movs	r0, #7
 80078f0:	4798      	blx	r3
	return 0;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	24004cc0 	.word	0x24004cc0
 8007900:	24004cb8 	.word	0x24004cb8
 8007904:	0800eab4 	.word	0x0800eab4

08007908 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3324      	adds	r3, #36	@ 0x24
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff ff63 	bl	80077e0 <metal_list_del>
	if (bus->ops.bus_close)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 800792a:	4b0a      	ldr	r3, [pc, #40]	@ (8007954 <metal_bus_unregister+0x4c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b06      	cmp	r3, #6
 8007930:	d90a      	bls.n	8007948 <metal_bus_unregister+0x40>
 8007932:	4b08      	ldr	r3, [pc, #32]	@ (8007954 <metal_bus_unregister+0x4c>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d006      	beq.n	8007948 <metal_bus_unregister+0x40>
 800793a:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <metal_bus_unregister+0x4c>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	4905      	ldr	r1, [pc, #20]	@ (8007958 <metal_bus_unregister+0x50>)
 8007944:	2007      	movs	r0, #7
 8007946:	4798      	blx	r3
	return 0;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	24004cb8 	.word	0x24004cb8
 8007958:	0800eac8 	.word	0x0800eac8

0800795c <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8007966:	4b13      	ldr	r3, [pc, #76]	@ (80079b4 <metal_bus_find+0x58>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e017      	b.n	800799e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3b24      	subs	r3, #36	@ 0x24
 8007972:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4618      	mov	r0, r3
 800797c:	f7f8 fcb0 	bl	80002e0 <strcmp>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d107      	bne.n	8007996 <metal_bus_find+0x3a>
			continue;
		if (result)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <metal_bus_find+0x36>
			*result = bus;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	601a      	str	r2, [r3, #0]
		return 0;
 8007992:	2300      	movs	r3, #0
 8007994:	e009      	b.n	80079aa <metal_bus_find+0x4e>
			continue;
 8007996:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a05      	ldr	r2, [pc, #20]	@ (80079b8 <metal_bus_find+0x5c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d1e3      	bne.n	800796e <metal_bus_find+0x12>
	}
	return -ENOENT;
 80079a6:	f06f 0301 	mvn.w	r3, #1
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	24004cb8 	.word	0x24004cb8
 80079b8:	24004cc0 	.word	0x24004cc0

080079bc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <metal_device_open+0x2e>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <metal_device_open+0x2e>
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d006      	beq.n	80079ea <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <metal_device_open+0x2e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80079ea:	f06f 0315 	mvn.w	r3, #21
 80079ee:	e01f      	b.n	8007a30 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80079f0:	f107 0310 	add.w	r3, r7, #16
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff ffb0 	bl	800795c <metal_bus_find>
 80079fc:	6178      	str	r0, [r7, #20]
	if (error)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <metal_device_open+0x4c>
		return error;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e013      	b.n	8007a30 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <metal_device_open+0x5a>
		return -ENODEV;
 8007a10:	f06f 0312 	mvn.w	r3, #18
 8007a14:	e00c      	b.n	8007a30 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	4798      	blx	r3
 8007a22:	6178      	str	r0, [r7, #20]
	if (error)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <metal_device_open+0x72>
		return error;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	e000      	b.n	8007a30 <metal_device_open+0x74>

	return 0;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d008      	beq.n	8007a5a <metal_register_generic_device+0x22>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d902      	bls.n	8007a60 <metal_register_generic_device+0x28>
		return -EINVAL;
 8007a5a:	f06f 0315 	mvn.w	r3, #21
 8007a5e:	e009      	b.n	8007a74 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a06      	ldr	r2, [pc, #24]	@ (8007a7c <metal_register_generic_device+0x44>)
 8007a64:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	336c      	adds	r3, #108	@ 0x6c
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4804      	ldr	r0, [pc, #16]	@ (8007a80 <metal_register_generic_device+0x48>)
 8007a6e:	f7ff feaa 	bl	80077c6 <metal_list_add_tail>
			    &device->node);
	return 0;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	24000014 	.word	0x24000014
 8007a80:	24004cd0 	.word	0x24004cd0

08007a84 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007a90:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <metal_generic_dev_open+0x58>)
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e017      	b.n	8007ac8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3b6c      	subs	r3, #108	@ 0x6c
 8007a9c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7f8 fc1b 	bl	80002e0 <strcmp>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d107      	bne.n	8007ac0 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8007ab6:	6938      	ldr	r0, [r7, #16]
 8007ab8:	f000 f890 	bl	8007bdc <metal_generic_dev_sys_open>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e009      	b.n	8007ad4 <metal_generic_dev_open+0x50>
			continue;
 8007ac0:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4a05      	ldr	r2, [pc, #20]	@ (8007ae0 <metal_generic_dev_open+0x5c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d1e3      	bne.n	8007a98 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8007ad0:	f06f 0312 	mvn.w	r3, #18
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	24004cb8 	.word	0x24004cb8
 8007ae0:	24004cd0 	.word	0x24004cd0

08007ae4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8007af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d009      	beq.n	8007b0e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	4613      	mov	r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	461a      	mov	r2, r3
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b0a:	f003 fe10 	bl	800b72e <memcpy>
	for (i = 0; i < nents_in; i++) {
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e02f      	b.n	8007b74 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d114      	bne.n	8007b44 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	461a      	mov	r2, r3
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	4413      	add	r3, r2
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	461a      	mov	r2, r3
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	4413      	add	r3, r2
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7ff fe83 	bl	800784a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	4413      	add	r3, r2
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	461a      	mov	r2, r3
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	4413      	add	r3, r2
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	f7ff fe7b 	bl	8007864 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	3301      	adds	r3, #1
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	dbcb      	blt.n	8007b14 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8007b94:	2300      	movs	r3, #0
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e017      	b.n	8007bca <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	4413      	add	r3, r2
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4413      	add	r3, r2
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f7ff fe50 	bl	8007864 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	dbe3      	blt.n	8007b9a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e013      	b.n	8007c12 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f000 f828 	bl	8007c5c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d3e6      	bcc.n	8007bea <metal_generic_dev_sys_open+0xe>
 8007c1c:	e000      	b.n	8007c20 <metal_generic_dev_sys_open+0x44>
			break;
 8007c1e:	bf00      	nop
	}

	return 0;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8007c34:	4803      	ldr	r0, [pc, #12]	@ (8007c44 <metal_sys_init+0x18>)
 8007c36:	f7ff fe23 	bl	8007880 <metal_bus_register>
	return 0;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	24000014 	.word	0x24000014

08007c48 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8007c4c:	4802      	ldr	r0, [pc, #8]	@ (8007c58 <metal_sys_finish+0x10>)
 8007c4e:	f7ff fe5b 	bl	8007908 <metal_bus_unregister>
}
 8007c52:	bf00      	nop
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	24000014 	.word	0x24000014

08007c5c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02c      	beq.n	8007cd0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e013      	b.n	8007cbe <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f001 fe1b 	bl	80098e4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d9e2      	bls.n	8007c96 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <metal_list_init>:
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	int error = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8007d08:	2220      	movs	r2, #32
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4810      	ldr	r0, [pc, #64]	@ (8007d50 <metal_init+0x54>)
 8007d0e:	f003 fc5a 	bl	800b5c6 <memset>

	_metal.common.log_handler   = params->log_handler;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a0e      	ldr	r2, [pc, #56]	@ (8007d50 <metal_init+0x54>)
 8007d18:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	791a      	ldrb	r2, [r3, #4]
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d50 <metal_init+0x54>)
 8007d20:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8007d22:	480c      	ldr	r0, [pc, #48]	@ (8007d54 <metal_init+0x58>)
 8007d24:	f7ff ffd8 	bl	8007cd8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8007d28:	480b      	ldr	r0, [pc, #44]	@ (8007d58 <metal_init+0x5c>)
 8007d2a:	f7ff ffd5 	bl	8007cd8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8007d2e:	480b      	ldr	r0, [pc, #44]	@ (8007d5c <metal_init+0x60>)
 8007d30:	f7ff ffd2 	bl	8007cd8 <metal_list_init>

	error = metal_sys_init(params);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff79 	bl	8007c2c <metal_sys_init>
 8007d3a:	60f8      	str	r0, [r7, #12]
	if (error)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <metal_init+0x4a>
		return error;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	e000      	b.n	8007d48 <metal_init+0x4c>

	return error;
 8007d46:	68fb      	ldr	r3, [r7, #12]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	24004cb8 	.word	0x24004cb8
 8007d54:	24004cc0 	.word	0x24004cc0
 8007d58:	24004cc8 	.word	0x24004cc8
 8007d5c:	24004cd0 	.word	0x24004cd0

08007d60 <metal_finish>:

void metal_finish(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8007d64:	f7ff ff70 	bl	8007c48 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8007d68:	2220      	movs	r2, #32
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4802      	ldr	r0, [pc, #8]	@ (8007d78 <metal_finish+0x18>)
 8007d6e:	f003 fc2a 	bl	800b5c6 <memset>
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	24004cb8 	.word	0x24004cb8

08007d7c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d009      	beq.n	8007da4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d804      	bhi.n	8007da4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	e000      	b.n	8007da6 <metal_io_virt+0x2a>
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8007db2:	b5b0      	push	{r4, r5, r7, lr}
 8007db4:	b08a      	sub	sp, #40	@ 0x28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	611a      	str	r2, [r3, #16]
 8007dd0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	605a      	str	r2, [r3, #4]
	io->size = size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007de8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	2b1f      	cmp	r3, #31
 8007dee:	d904      	bls.n	8007dfa <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f04f 32ff 	mov.w	r2, #4294967295
 8007df6:	611a      	str	r2, [r3, #16]
 8007df8:	e006      	b.n	8007e08 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	1e5a      	subs	r2, r3, #1
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e0c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8007e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <metal_io_init+0x7a>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e18:	f103 0418 	add.w	r4, r3, #24
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e26:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e2a:	e00a      	b.n	8007e42 <metal_io_init+0x90>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 0418 	add.w	r4, r3, #24
 8007e32:	f107 0510 	add.w	r5, r7, #16
 8007e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e3e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff ff0a 	bl	8007c5c <metal_sys_io_mem_map>
}
 8007e48:	bf00      	nop
 8007e4a:	3728      	adds	r7, #40	@ 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bdb0      	pop	{r4, r5, r7, pc}

08007e50 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b08b      	sub	sp, #44	@ 0x2c
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff ff8b 	bl	8007d7c <metal_io_virt>
 8007e66:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d902      	bls.n	8007e7c <metal_io_block_read+0x2c>
		return -ERANGE;
 8007e76:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8007e7a:	e05c      	b.n	8007f36 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d904      	bls.n	8007e94 <metal_io_block_read+0x44>
		len = io->size - offset;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1c      	ldr	r4, [r3, #32]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2305      	movs	r3, #5
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	47a0      	blx	r4
 8007eb2:	6178      	str	r0, [r7, #20]
 8007eb4:	e03e      	b.n	8007f34 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8007eb6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8007eba:	e00c      	b.n	8007ed6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	701a      	strb	r2, [r3, #0]
			dest++;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61bb      	str	r3, [r7, #24]
			ptr++;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
			len--;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d017      	beq.n	8007f0c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1ea      	bne.n	8007ebc <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007ef0:	e00c      	b.n	8007f0c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	3304      	adds	r3, #4
 8007efe:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3304      	adds	r3, #4
 8007f04:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	dcef      	bgt.n	8007ef2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8007f12:	e00c      	b.n	8007f2e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3301      	adds	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1ef      	bne.n	8007f14 <metal_io_block_read+0xc4>
	}
	return retlen;
 8007f34:	697b      	ldr	r3, [r7, #20]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3724      	adds	r7, #36	@ 0x24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}

08007f3e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b08b      	sub	sp, #44	@ 0x2c
 8007f42:	af02      	add	r7, sp, #8
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff ff14 	bl	8007d7c <metal_io_virt>
 8007f54:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d902      	bls.n	8007f6a <metal_io_block_write+0x2c>
		return -ERANGE;
 8007f64:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8007f68:	e05b      	b.n	8008022 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	441a      	add	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d904      	bls.n	8007f82 <metal_io_block_write+0x44>
		len = io->size - offset;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d017      	beq.n	8007fbe <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2305      	movs	r3, #5
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	47a0      	blx	r4
 8007fa0:	6178      	str	r0, [r7, #20]
 8007fa2:	e03d      	b.n	8008020 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	701a      	strb	r2, [r3, #0]
			ptr++;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
			source++;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	61bb      	str	r3, [r7, #24]
			len--;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1ea      	bne.n	8007fa4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007fd8:	e00c      	b.n	8007ff4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	3304      	adds	r3, #4
 8007fec:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	dcef      	bgt.n	8007fda <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8007ffa:	e00c      	b.n	8008016 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3301      	adds	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	3301      	adds	r3, #1
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	3b01      	subs	r3, #1
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1ef      	bne.n	8007ffc <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800801c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008020:	697b      	ldr	r3, [r7, #20]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3724      	adds	r7, #36	@ 0x24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd90      	pop	{r4, r7, pc}

0800802a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800802a:	b590      	push	{r4, r7, lr}
 800802c:	b08b      	sub	sp, #44	@ 0x2c
 800802e:	af02      	add	r7, sp, #8
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	603b      	str	r3, [r7, #0]
 8008036:	4613      	mov	r3, r2
 8008038:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fe9d 	bl	8007d7c <metal_io_virt>
 8008042:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	429a      	cmp	r2, r3
 8008050:	d902      	bls.n	8008058 <metal_io_block_set+0x2e>
		return -ERANGE;
 8008052:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008056:	e05d      	b.n	8008114 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	441a      	add	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	429a      	cmp	r2, r3
 8008064:	d904      	bls.n	8008070 <metal_io_block_set+0x46>
		len = io->size - offset;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008080:	79fa      	ldrb	r2, [r7, #7]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	2305      	movs	r3, #5
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	47a0      	blx	r4
 800808e:	e040      	b.n	8008112 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e00a      	b.n	80080b0 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800809a:	79fa      	ldrb	r2, [r7, #7]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	3301      	adds	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d9f1      	bls.n	800809a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80080b6:	e008      	b.n	80080ca <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	79fa      	ldrb	r2, [r7, #7]
 80080bc:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3301      	adds	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00e      	beq.n	80080ee <metal_io_block_set+0xc4>
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1ee      	bne.n	80080b8 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080da:	e008      	b.n	80080ee <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3304      	adds	r3, #4
 80080e6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	dcf3      	bgt.n	80080dc <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80080f4:	e008      	b.n	8008108 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	79fa      	ldrb	r2, [r7, #7]
 80080fa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	3b01      	subs	r3, #1
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f3      	bne.n	80080f6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800810e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008112:	693b      	ldr	r3, [r7, #16]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3724      	adds	r7, #36	@ 0x24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd90      	pop	{r4, r7, pc}

0800811c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800811c:	b40e      	push	{r1, r2, r3}
 800811e:	b480      	push	{r7}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	4603      	mov	r3, r0
 8008126:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	b003      	add	sp, #12
 8008134:	4770      	bx	lr

08008136 <metal_io_virt>:
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d009      	beq.n	800815e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d804      	bhi.n	800815e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	4413      	add	r3, r2
 800815c:	e000      	b.n	8008160 <metal_io_virt+0x2a>
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	429a      	cmp	r2, r3
 8008188:	d201      	bcs.n	800818e <metal_io_virt_to_offset+0x22>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	e001      	b.n	8008192 <metal_io_virt_to_offset+0x26>
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b08c      	sub	sp, #48	@ 0x30
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff ffbf 	bl	8008136 <metal_io_virt>
 80081b8:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	699c      	ldr	r4, [r3, #24]
 80081c6:	79fa      	ldrb	r2, [r7, #7]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	47a0      	blx	r4
 80081d0:	4604      	mov	r4, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	e059      	b.n	800828a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d012      	beq.n	8008202 <metal_io_read+0x62>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d10f      	bne.n	8008202 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80081e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	f3bf 8f5b 	dmb	ish
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f3bf 8f5b 	dmb	ish
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	76fb      	strb	r3, [r7, #27]
 80081f6:	7efb      	ldrb	r3, [r7, #27]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2200      	movs	r2, #0
 80081fc:	461c      	mov	r4, r3
 80081fe:	4615      	mov	r5, r2
 8008200:	e043      	b.n	800828a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d012      	beq.n	800822e <metal_io_read+0x8e>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d10f      	bne.n	800822e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	f3bf 8f5b 	dmb	ish
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	f3bf 8f5b 	dmb	ish
 800821e:	b29b      	uxth	r3, r3
 8008220:	833b      	strh	r3, [r7, #24]
 8008222:	8b3b      	ldrh	r3, [r7, #24]
 8008224:	b29b      	uxth	r3, r3
 8008226:	2200      	movs	r2, #0
 8008228:	461c      	mov	r4, r3
 800822a:	4615      	mov	r5, r2
 800822c:	e02d      	b.n	800828a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d010      	beq.n	8008256 <metal_io_read+0xb6>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d10d      	bne.n	8008256 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800823a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f3bf 8f5b 	dmb	ish
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f3bf 8f5b 	dmb	ish
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2200      	movs	r2, #0
 8008250:	461c      	mov	r4, r3
 8008252:	4615      	mov	r5, r2
 8008254:	e019      	b.n	800828a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d010      	beq.n	800827e <metal_io_read+0xde>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d10d      	bne.n	800827e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8008262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f3bf 8f5b 	dmb	ish
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f3bf 8f5b 	dmb	ish
 8008272:	613b      	str	r3, [r7, #16]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2200      	movs	r2, #0
 8008278:	461c      	mov	r4, r3
 800827a:	4615      	mov	r5, r2
 800827c:	e005      	b.n	800828a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800827e:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <metal_io_read+0xf8>)
 8008280:	4a06      	ldr	r2, [pc, #24]	@ (800829c <metal_io_read+0xfc>)
 8008282:	21f0      	movs	r1, #240	@ 0xf0
 8008284:	4806      	ldr	r0, [pc, #24]	@ (80082a0 <metal_io_read+0x100>)
 8008286:	f002 f949 	bl	800a51c <__assert_func>
	return 0; /* quiet compiler */
}
 800828a:	4622      	mov	r2, r4
 800828c:	462b      	mov	r3, r5
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	3730      	adds	r7, #48	@ 0x30
 8008294:	46bd      	mov	sp, r7
 8008296:	bdb0      	pop	{r4, r5, r7, pc}
 8008298:	0800eb68 	.word	0x0800eb68
 800829c:	0800ed44 	.word	0x0800ed44
 80082a0:	0800eb6c 	.word	0x0800eb6c

080082a4 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b08f      	sub	sp, #60	@ 0x3c
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ff3e 	bl	8008136 <metal_io_virt>
 80082ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	69dc      	ldr	r4, [r3, #28]
 80082c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80082dc:	e04e      	b.n	800837c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80082de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <metal_io_write+0x5e>
 80082e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d10b      	bne.n	8008302 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ee:	783b      	ldrb	r3, [r7, #0]
 80082f0:	76fb      	strb	r3, [r7, #27]
 80082f2:	7efa      	ldrb	r2, [r7, #27]
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	f3bf 8f5b 	dmb	ish
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	f3bf 8f5b 	dmb	ish
 8008300:	e03c      	b.n	800837c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <metal_io_write+0x82>
 8008308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830a:	2b02      	cmp	r3, #2
 800830c:	d10b      	bne.n	8008326 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800830e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	883b      	ldrh	r3, [r7, #0]
 8008314:	833b      	strh	r3, [r7, #24]
 8008316:	8b3a      	ldrh	r2, [r7, #24]
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	f3bf 8f5b 	dmb	ish
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	f3bf 8f5b 	dmb	ish
 8008324:	e02a      	b.n	800837c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00e      	beq.n	800834a <metal_io_write+0xa6>
 800832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832e:	2b04      	cmp	r3, #4
 8008330:	d10b      	bne.n	800834a <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	f3bf 8f5b 	dmb	ish
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	f3bf 8f5b 	dmb	ish
 8008348:	e018      	b.n	800837c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <metal_io_write+0xca>
 8008350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008352:	2b04      	cmp	r3, #4
 8008354:	d10b      	bne.n	800836e <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8008356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f3bf 8f5b 	dmb	ish
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	f3bf 8f5b 	dmb	ish
 800836c:	e006      	b.n	800837c <metal_io_write+0xd8>
		metal_assert (0);
 800836e:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <metal_io_write+0xe0>)
 8008370:	4a05      	ldr	r2, [pc, #20]	@ (8008388 <metal_io_write+0xe4>)
 8008372:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8008376:	4805      	ldr	r0, [pc, #20]	@ (800838c <metal_io_write+0xe8>)
 8008378:	f002 f8d0 	bl	800a51c <__assert_func>
}
 800837c:	bf00      	nop
 800837e:	3734      	adds	r7, #52	@ 0x34
 8008380:	46bd      	mov	sp, r7
 8008382:	bd90      	pop	{r4, r7, pc}
 8008384:	0800eb68 	.word	0x0800eb68
 8008388:	0800ed54 	.word	0x0800ed54
 800838c:	0800eb6c 	.word	0x0800eb6c

08008390 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 f8dd 	bl	800a558 <malloc>
 800839e:	4603      	mov	r3, r0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	free(ptr);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f002 f8d9 	bl	800a568 <free>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3307      	adds	r3, #7
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff ffde 	bl	8008390 <metal_allocate_memory>
 80083d4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	2100      	movs	r1, #0
 80083e0:	68b8      	ldr	r0, [r7, #8]
 80083e2:	f003 f8f0 	bl	800b5c6 <memset>
	}

	return vqs;
 80083e6:	68bb      	ldr	r3, [r7, #8]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	891b      	ldrh	r3, [r3, #8]
 80083fc:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	3b18      	subs	r3, #24
 8008408:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	429a      	cmp	r2, r3
 8008412:	d905      	bls.n	8008420 <rproc_virtio_virtqueue_notify+0x30>
 8008414:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <rproc_virtio_virtqueue_notify+0x5c>)
 8008416:	4a0e      	ldr	r2, [pc, #56]	@ (8008450 <rproc_virtio_virtqueue_notify+0x60>)
 8008418:	2133      	movs	r1, #51	@ 0x33
 800841a:	480e      	ldr	r0, [pc, #56]	@ (8008454 <rproc_virtio_virtqueue_notify+0x64>)
 800841c:	f002 f87e 	bl	800a51c <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4613      	mov	r3, r2
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4413      	add	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	440b      	add	r3, r1
 8008430:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	6810      	ldr	r0, [r2, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	6912      	ldr	r2, [r2, #16]
 800843e:	4611      	mov	r1, r2
 8008440:	4798      	blx	r3
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800ebb4 	.word	0x0800ebb4
 8008450:	0800ed24 	.word	0x0800ed24
 8008454:	0800ebd0 	.word	0x0800ebd0

08008458 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b18      	subs	r3, #24
 8008464:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3318      	adds	r3, #24
 8008476:	4619      	mov	r1, r3
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff fe77 	bl	800816c <metal_io_virt_to_offset>
 800847e:	4601      	mov	r1, r0
 8008480:	2301      	movs	r3, #1
 8008482:	2205      	movs	r2, #5
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fe8b 	bl	80081a0 <metal_io_read>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4613      	mov	r3, r2
 8008490:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8008492:	7afb      	ldrb	r3, [r7, #11]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800849c:	b5b0      	push	{r4, r5, r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b18      	subs	r3, #24
 80084ac:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3318      	adds	r3, #24
 80084be:	4619      	mov	r1, r3
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fe53 	bl	800816c <metal_io_virt_to_offset>
 80084c6:	4601      	mov	r1, r0
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	2200      	movs	r2, #0
 80084cc:	461c      	mov	r4, r3
 80084ce:	4615      	mov	r5, r2
 80084d0:	2301      	movs	r3, #1
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	2305      	movs	r3, #5
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4622      	mov	r2, r4
 80084da:	462b      	mov	r3, r5
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fee1 	bl	80082a4 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6810      	ldr	r0, [r2, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	4611      	mov	r1, r2
 80084f0:	4798      	blx	r3
}
 80084f2:	bf00      	nop
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}

080084fa <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3b18      	subs	r3, #24
 8008506:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	330c      	adds	r3, #12
 8008518:	4619      	mov	r1, r3
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fe26 	bl	800816c <metal_io_virt_to_offset>
 8008520:	4601      	mov	r1, r0
 8008522:	2304      	movs	r3, #4
 8008524:	2205      	movs	r2, #5
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fe3a 	bl	80081a0 <metal_io_read>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4613      	mov	r3, r2
 8008532:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8008534:	68bb      	ldr	r3, [r7, #8]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800853e:	b5b0      	push	{r4, r5, r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af02      	add	r7, sp, #8
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3b18      	subs	r3, #24
 800854c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	330c      	adds	r3, #12
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7ff fe03 	bl	800816c <metal_io_virt_to_offset>
 8008566:	4601      	mov	r1, r0
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	461c      	mov	r4, r3
 800856e:	4615      	mov	r5, r2
 8008570:	2304      	movs	r3, #4
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	2305      	movs	r3, #5
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	4622      	mov	r2, r4
 800857a:	462b      	mov	r3, r5
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fe91 	bl	80082a4 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	6810      	ldr	r0, [r2, #0]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	4611      	mov	r1, r2
 8008590:	4798      	blx	r3
}
 8008592:	bf00      	nop
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bdb0      	pop	{r4, r5, r7, pc}

0800859a <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80085c0:	bf00      	nop
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80085da:	bf00      	nop
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d103      	bne.n	80085fe <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80085f6:	2140      	movs	r1, #64	@ 0x40
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ff4f 	bl	800849c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08e      	sub	sp, #56	@ 0x38
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800861a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861c:	7e5b      	ldrb	r3, [r3, #25]
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8008620:	2050      	movs	r0, #80	@ 0x50
 8008622:	f7ff feb5 	bl	8008390 <metal_allocate_memory>
 8008626:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	e092      	b.n	8008758 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8008632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008634:	4613      	mov	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fea7 	bl	8008390 <metal_allocate_memory>
 8008642:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 8081 	beq.w	800874e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800864c:	2250      	movs	r2, #80	@ 0x50
 800864e:	2100      	movs	r1, #0
 8008650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008652:	f002 ffb8 	bl	800b5c6 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8008656:	2218      	movs	r2, #24
 8008658:	2100      	movs	r1, #0
 800865a:	6a38      	ldr	r0, [r7, #32]
 800865c:	f002 ffb3 	bl	800b5c6 <memset>
	vdev = &rpvdev->vdev;
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	3318      	adds	r3, #24
 8008664:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
 800866a:	e025      	b.n	80086b8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8008670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	3318      	adds	r3, #24
 800867c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800867e:	4413      	add	r3, r2
 8008680:	3304      	adds	r3, #4
 8008682:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8008690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008692:	f7ff fe94 	bl	80083be <virtqueue_allocate>
 8008696:	6178      	str	r0, [r7, #20]
		if (!vq)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d031      	beq.n	8008702 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800869e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	461a      	mov	r2, r3
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	4413      	add	r3, r2
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80086b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b4:	3301      	adds	r3, #1
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	429a      	cmp	r2, r3
 80086be:	d3d5      	bcc.n	800866c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c4:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ca:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086d6:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ee:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086f4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4a19      	ldr	r2, [pc, #100]	@ (8008760 <rproc_virtio_create_vdev+0x158>)
 80086fa:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	3318      	adds	r3, #24
 8008700:	e02a      	b.n	8008758 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8008702:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8008704:	2300      	movs	r3, #0
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	e019      	b.n	800873e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800870a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800870c:	4613      	mov	r3, r2
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	4413      	add	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	461a      	mov	r2, r3
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	4413      	add	r3, r2
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8008720:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008722:	4613      	mov	r3, r2
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4413      	add	r3, r2
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	461a      	mov	r2, r3
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	4413      	add	r3, r2
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fe38 	bl	80083a8 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8008738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873a:	3301      	adds	r3, #1
 800873c:	637b      	str	r3, [r7, #52]	@ 0x34
 800873e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	429a      	cmp	r2, r3
 8008744:	d3e1      	bcc.n	800870a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8008746:	6a38      	ldr	r0, [r7, #32]
 8008748:	f7ff fe2e 	bl	80083a8 <metal_free_memory>
 800874c:	e000      	b.n	8008750 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800874e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8008750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008752:	f7ff fe29 	bl	80083a8 <metal_free_memory>
	return NULL;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3738      	adds	r7, #56	@ 0x38
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	0800ed00 	.word	0x0800ed00

08008764 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008776:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	429a      	cmp	r2, r3
 800877e:	d302      	bcc.n	8008786 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8008780:	f06f 0301 	mvn.w	r3, #1
 8008784:	e019      	b.n	80087ba <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4613      	mov	r3, r2
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	4413      	add	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	440b      	add	r3, r1
 8008796:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087b6:	609a      	str	r2, [r3, #8]

	return 0;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d102      	bne.n	80087dc <rproc_virtio_notified+0x16>
		return -EINVAL;
 80087d6:	f06f 0315 	mvn.w	r3, #21
 80087da:	e02c      	b.n	8008836 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d101      	bne.n	80087ea <rproc_virtio_notified+0x24>
		return 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	e025      	b.n	8008836 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e01a      	b.n	800882c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4613      	mov	r3, r2
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d003      	beq.n	800881a <rproc_virtio_notified+0x54>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d105      	bne.n	8008826 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8008820:	68b8      	ldr	r0, [r7, #8]
 8008822:	f001 fbca 	bl	8009fba <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3301      	adds	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	429a      	cmp	r2, r3
 8008832:	d3e0      	bcc.n	80087f6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fe02 	bl	8008458 <rproc_virtio_get_status>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8008862:	e7f4      	b.n	800884e <rproc_virtio_wait_remote_ready+0x10>
		return;
 8008864:	bf00      	nop
 8008866:	e000      	b.n	800886a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8008868:	bf00      	nop
	}
}
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8008878:	bf00      	nop
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	4611      	mov	r1, r2
 8008880:	f3bf 8f5b 	dmb	ish
 8008884:	e8d3 2f4f 	ldrexb	r2, [r3]
 8008888:	e8c3 1f40 	strexb	r0, r1, [r3]
 800888c:	2800      	cmp	r0, #0
 800888e:	d1f9      	bne.n	8008884 <__metal_mutex_acquire+0x14>
 8008890:	f3bf 8f5b 	dmb	ish
 8008894:	b2d3      	uxtb	r3, r2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1ef      	bne.n	800887a <__metal_mutex_acquire+0xa>
		;
	}
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f3bf 8f5b 	dmb	ish
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	f3bf 8f5b 	dmb	ish
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff ffcc 	bl	8008870 <__metal_mutex_acquire>
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ffdd 	bl	80088a8 <__metal_mutex_release>
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <metal_list_add_before>:
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	601a      	str	r2, [r3, #0]
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <metal_list_add_tail>:
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff ffdd 	bl	80088f6 <metal_list_add_before>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <metal_list_del>:
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6852      	ldr	r2, [r2, #4]
 8008954:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	009a      	lsls	r2, r3, #2
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	440a      	add	r2, r1
 800898e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	f002 021f 	and.w	r2, r2, #31
 8008996:	2001      	movs	r0, #1
 8008998:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4403      	add	r3, r0
 80089a2:	430a      	orrs	r2, r1
 80089a4:	601a      	str	r2, [r3, #0]
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	4413      	add	r3, r2
 80089c6:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2101      	movs	r1, #1
 80089d0:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80089d4:	4013      	ands	r3, r2
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	009a      	lsls	r2, r3, #2
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	440a      	add	r2, r1
 80089f6:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	f002 021f 	and.w	r2, r2, #31
 80089fe:	2001      	movs	r0, #1
 8008a00:	fa00 f202 	lsl.w	r2, r0, r2
 8008a04:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4403      	add	r3, r0
 8008a0c:	400a      	ands	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff ffc2 	bl	80089b2 <metal_bitmap_is_bit_set>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bf0c      	ite	eq
 8008a34:	2301      	moveq	r3, #1
 8008a36:	2300      	movne	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	e002      	b.n	8008a5a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3301      	adds	r3, #1
 8008a58:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d207      	bcs.n	8008a72 <metal_bitmap_next_clear_bit+0x30>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4619      	mov	r1, r3
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff ffd8 	bl	8008a1c <metal_bitmap_is_bit_clear>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f0      	beq.n	8008a54 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8008a72:	697b      	ldr	r3, [r7, #20]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <rpmsg_init_ept>:
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 fdb2 	bl	800b5fa <strncpy>
	ept->addr = src;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac4:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2100      	movs	r1, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff ffb8 	bl	8008a42 <metal_bitmap_next_clear_bit>
 8008ad2:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d206      	bcs.n	8008aea <rpmsg_get_address+0x34>
		addr = nextbit;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff48 	bl	800897a <metal_bitmap_set_bit>
	}

	return addr;
 8008aea:	68fb      	ldr	r3, [r7, #12]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	da03      	bge.n	8008b10 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff ff69 	bl	80089e2 <metal_bitmap_clear_bit>
}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	da05      	bge.n	8008b38 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff ff3f 	bl	80089b2 <metal_bitmap_is_bit_set>
 8008b34:	4603      	mov	r3, r0
 8008b36:	e000      	b.n	8008b3a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8008b38:	4b02      	ldr	r3, [pc, #8]	@ (8008b44 <rpmsg_is_address_set+0x2c>)
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	fffff82d 	.word	0xfffff82d

08008b48 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	da05      	bge.n	8008b68 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff ff0b 	bl	800897a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e000      	b.n	8008b6a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <rpmsg_set_address+0x2c>)
	}
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	fffff82d 	.word	0xfffff82d

08008b78 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b089      	sub	sp, #36	@ 0x24
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00a      	beq.n	8008ba2 <rpmsg_send_offchannel_raw+0x2a>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d006      	beq.n	8008ba2 <rpmsg_send_offchannel_raw+0x2a>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <rpmsg_send_offchannel_raw+0x2a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d101      	bne.n	8008ba6 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd8 <rpmsg_send_offchannel_raw+0x60>)
 8008ba4:	e014      	b.n	8008bd0 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8008bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	6978      	ldr	r0, [r7, #20]
 8008bc8:	47a0      	blx	r4
 8008bca:	4603      	mov	r3, r0
 8008bcc:	e000      	b.n	8008bd0 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8008bce:	4b02      	ldr	r3, [pc, #8]	@ (8008bd8 <rpmsg_send_offchannel_raw+0x60>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	371c      	adds	r7, #28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd90      	pop	{r4, r7, pc}
 8008bd8:	fffff82d 	.word	0xfffff82d

08008bdc <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b090      	sub	sp, #64	@ 0x40
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	f107 030c 	add.w	r3, r7, #12
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 fcfe 	bl	800b5fa <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	2201      	movs	r2, #1
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	2228      	movs	r2, #40	@ 0x28
 8008c0c:	9200      	str	r2, [sp, #0]
 8008c0e:	2235      	movs	r2, #53	@ 0x35
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff ffb1 	bl	8008b78 <rpmsg_send_offchannel_raw>
 8008c16:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8008c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	da01      	bge.n	8008c22 <rpmsg_send_ns_message+0x46>
		return ret;
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c20:	e000      	b.n	8008c24 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3738      	adds	r7, #56	@ 0x38
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	e04b      	b.n	8008cda <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3b34      	subs	r3, #52	@ 0x34
 8008c4a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d006      	beq.n	8008c62 <rpmsg_get_endpoint+0x36>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d101      	bne.n	8008c62 <rpmsg_get_endpoint+0x36>
			return ept;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	e040      	b.n	8008ce4 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d106      	bne.n	8008c7a <rpmsg_get_endpoint+0x4e>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d101      	bne.n	8008c7a <rpmsg_get_endpoint+0x4e>
			return ept;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	e034      	b.n	8008ce4 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2220      	movs	r2, #32
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 fca5 	bl	800b5d6 <strncmp>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bf0c      	ite	eq
 8008c92:	2301      	moveq	r3, #1
 8008c94:	2300      	movne	r3, #0
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d018      	beq.n	8008cd2 <rpmsg_get_endpoint+0xa6>
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d015      	beq.n	8008cd2 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d006      	beq.n	8008cbc <rpmsg_get_endpoint+0x90>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d101      	bne.n	8008cbc <rpmsg_get_endpoint+0x90>
			return ept;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	e013      	b.n	8008ce4 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d107      	bne.n	8008cd4 <rpmsg_get_endpoint+0xa8>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d102      	bne.n	8008cd4 <rpmsg_get_endpoint+0xa8>
			return ept;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	e008      	b.n	8008ce4 <rpmsg_get_endpoint+0xb8>
			continue;
 8008cd2:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d1af      	bne.n	8008c42 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d016      	beq.n	8008d28 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d008      	beq.n	8008d1c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d14:	461a      	mov	r2, r3
 8008d16:	2180      	movs	r1, #128	@ 0x80
 8008d18:	f7ff feec 	bl	8008af4 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3334      	adds	r3, #52	@ 0x34
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fe0f 	bl	8008944 <metal_list_del>
 8008d26:	e000      	b.n	8008d2a <rpmsg_unregister_endpoint+0x3e>
		return;
 8008d28:	bf00      	nop
}
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	3334      	adds	r3, #52	@ 0x34
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7ff fdee 	bl	800892a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	613b      	str	r3, [r7, #16]

	if (!ept)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8008d70:	4b37      	ldr	r3, [pc, #220]	@ (8008e50 <rpmsg_create_ept+0xf8>)
 8008d72:	e068      	b.n	8008e46 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	3358      	adds	r3, #88	@ 0x58
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fda6 	bl	80088ca <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d84:	d018      	beq.n	8008db8 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3348      	adds	r3, #72	@ 0x48
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	2180      	movs	r1, #128	@ 0x80
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fec2 	bl	8008b18 <rpmsg_is_address_set>
 8008d94:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3348      	adds	r3, #72	@ 0x48
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	2180      	movs	r1, #128	@ 0x80
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fecf 	bl	8008b48 <rpmsg_set_address>
 8008daa:	e00c      	b.n	8008dc6 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dd40      	ble.n	8008e34 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8008db6:	e040      	b.n	8008e3a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3348      	adds	r3, #72	@ 0x48
 8008dbc:	2180      	movs	r1, #128	@ 0x80
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fe79 	bl	8008ab6 <rpmsg_get_address>
 8008dc4:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fe51 	bl	8008a7c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	68b8      	ldr	r0, [r7, #8]
 8008dde:	f7ff ffa7 	bl	8008d30 <rpmsg_register_endpoint>
 8008de2:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da06      	bge.n	8008df8 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	3348      	adds	r3, #72	@ 0x48
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	2180      	movs	r1, #128	@ 0x80
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fe7e 	bl	8008af4 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d11c      	bne.n	8008e38 <rpmsg_create_ept+0xe0>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d117      	bne.n	8008e38 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	3358      	adds	r3, #88	@ 0x58
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fd67 	bl	80088e0 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8008e12:	2100      	movs	r1, #0
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff fee1 	bl	8008bdc <rpmsg_send_ns_message>
 8008e1a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	3358      	adds	r3, #88	@ 0x58
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fd52 	bl	80088ca <metal_mutex_acquire>
		if (status)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff ff5d 	bl	8008cec <rpmsg_unregister_endpoint>
 8008e32:	e002      	b.n	8008e3a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8008e34:	bf00      	nop
 8008e36:	e000      	b.n	8008e3a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8008e38:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	3358      	adds	r3, #88	@ 0x58
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fd4e 	bl	80088e0 <metal_mutex_release>
	return status;
 8008e44:	697b      	ldr	r3, [r7, #20]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	fffff82d 	.word	0xfffff82d

08008e54 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d018      	beq.n	8008e94 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	2b35      	cmp	r3, #53	@ 0x35
 8008e6e:	d003      	beq.n	8008e78 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8008e70:	2101      	movs	r1, #1
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff feb2 	bl	8008bdc <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3358      	adds	r3, #88	@ 0x58
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fd24 	bl	80088ca <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff ff32 	bl	8008cec <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3358      	adds	r3, #88	@ 0x58
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fd27 	bl	80088e0 <metal_mutex_release>
 8008e92:	e000      	b.n	8008e96 <rpmsg_destroy_ept+0x42>
		return;
 8008e94:	bf00      	nop
}
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <__metal_cache_invalidate>:
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fd10 	bl	80098ce <metal_machine_cache_invalidate>
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <metal_cache_invalidate>:
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ffea 	bl	8008e9c <__metal_cache_invalidate>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff ffee 	bl	8008ed0 <__metal_sleep_usec>
 8008ef4:	4603      	mov	r3, r0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <metal_list_init>:
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <metal_list_is_empty>:
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	bf0c      	ite	eq
 8008f32:	2301      	moveq	r3, #1
 8008f34:	2300      	movne	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <metal_io_virt_to_offset>:
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d201      	bcs.n	8008f66 <metal_io_virt_to_offset+0x22>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	e001      	b.n	8008f6a <metal_io_virt_to_offset+0x26>
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <__metal_mutex_init>:
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f3bf 8f5b 	dmb	ish
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	f3bf 8f5b 	dmb	ish
}
 8008f96:	bf00      	nop
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <__metal_mutex_deinit>:
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <__metal_mutex_acquire>:
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8008fbe:	bf00      	nop
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	f3bf 8f5b 	dmb	ish
 8008fca:	e8d3 2f4f 	ldrexb	r2, [r3]
 8008fce:	e8c3 1f40 	strexb	r0, r1, [r3]
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d1f9      	bne.n	8008fca <__metal_mutex_acquire+0x14>
 8008fd6:	f3bf 8f5b 	dmb	ish
 8008fda:	b2d3      	uxtb	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1ef      	bne.n	8008fc0 <__metal_mutex_acquire+0xa>
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <__metal_mutex_release>:
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f3bf 8f5b 	dmb	ish
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	f3bf 8f5b 	dmb	ish
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <metal_mutex_init>:
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ffac 	bl	8008f76 <__metal_mutex_init>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <metal_mutex_deinit>:
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ffb7 	bl	8008fa2 <__metal_mutex_deinit>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <metal_mutex_acquire>:
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffb6 	bl	8008fb6 <__metal_mutex_acquire>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <metal_mutex_release>:
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff ffc7 	bl	8008fee <__metal_mutex_release>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <rpmsg_init_ept>:
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	4618      	mov	r0, r3
 800907e:	f002 fabc 	bl	800b5fa <strncpy>
	ept->addr = src;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ae:	699b      	ldr	r3, [r3, #24]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80090d4:	78f9      	ldrb	r1, [r7, #3]
 80090d6:	4610      	mov	r0, r2
 80090d8:	4798      	blx	r3
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ee:	6a1b      	ldr	r3, [r3, #32]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80090f6:	4610      	mov	r0, r2
 80090f8:	4798      	blx	r3
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	4603      	mov	r3, r0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af02      	add	r7, sp, #8
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	f000 fc19 	bl	8009978 <virtio_create_virtqueues>
 8009146:	4603      	mov	r3, r0
					callbacks);
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fd62 	bl	8008c2c <rpmsg_get_endpoint>
 8009168:	4603      	mov	r3, r0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d901      	bls.n	800918a <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	e00f      	b.n	80091aa <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6899      	ldr	r1, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	1acb      	subs	r3, r1, r3
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]

	return buffer;
 80091a8:	68fb      	ldr	r3, [r7, #12]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
	if (!shpool)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01d      	beq.n	8009204 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d004      	beq.n	80091e2 <rpmsg_virtio_init_shm_pool+0x2c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	3304      	adds	r3, #4
 80091e0:	e000      	b.n	80091e4 <rpmsg_virtio_init_shm_pool+0x2e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <rpmsg_virtio_init_shm_pool+0x46>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f023 0303 	bic.w	r3, r3, #3
 80091f8:	3304      	adds	r3, #4
 80091fa:	e000      	b.n	80091fe <rpmsg_virtio_init_shm_pool+0x48>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	e000      	b.n	8009206 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8009204:	bf00      	nop
}
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08a      	sub	sp, #40	@ 0x28
 8009214:	af02      	add	r7, sp, #8
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff ff3f 	bl	80090a2 <rpmsg_virtio_get_role>
 8009224:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10d      	bne.n	8009248 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009238:	f107 0114 	add.w	r1, r7, #20
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2301      	movs	r3, #1
 8009242:	2200      	movs	r2, #0
 8009244:	f000 fce7 	bl	8009c16 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8009248:	bf00      	nop
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	@ 0x28
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff ff1f 	bl	80090a2 <rpmsg_virtio_get_role>
 8009264:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10f      	bne.n	800928c <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009278:	f107 0114 	add.w	r1, r7, #20
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	2301      	movs	r3, #1
 8009282:	2200      	movs	r2, #0
 8009284:	f000 fcc7 	bl	8009c16 <virtqueue_add_buffer>
 8009288:	4603      	mov	r3, r0
 800928a:	e000      	b.n	800928e <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fefd 	bl	80090a2 <rpmsg_virtio_get_role>
 80092a8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d116      	bne.n	80092e2 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fcee 	bl	8009c9e <virtqueue_get_buffer>
 80092c2:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff ff4d 	bl	8009172 <rpmsg_virtio_shm_pool_get_buffer>
 80092d8:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092e0:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 80092e2:	697b      	ldr	r3, [r7, #20]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fed2 	bl	80090a2 <rpmsg_virtio_get_role>
 80092fe:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d107      	bne.n	800931a <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fcc3 	bl	8009c9e <virtqueue_get_buffer>
 8009318:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	6978      	ldr	r0, [r7, #20]
 8009328:	f7ff fdc5 	bl	8008eb6 <metal_cache_invalidate>
	}

	return data;
 800932c:	697b      	ldr	r3, [r7, #20]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff feaf 	bl	80090a2 <rpmsg_virtio_get_role>
 8009344:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8009350:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8009354:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b090      	sub	sp, #64	@ 0x40
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800937a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800937c:	f7ff feb1 	bl	80090e2 <rpmsg_virtio_get_status>
 8009380:	4603      	mov	r3, r0
 8009382:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800938e:	4b46      	ldr	r3, [pc, #280]	@ (80094a8 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8009390:	e086      	b.n	80094a0 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8009392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8009398:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800939c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800939e:	e001      	b.n	80093a4 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3358      	adds	r3, #88	@ 0x58
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fe47 	bl	800903c <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 80093ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80093b0:	f7ff ffc1 	bl	8009336 <_rpmsg_virtio_get_buffer_size>
 80093b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 80093b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	dc08      	bgt.n	80093d0 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 80093be:	f107 0216 	add.w	r2, r7, #22
 80093c2:	f107 0310 	add.w	r3, r7, #16
 80093c6:	4619      	mov	r1, r3
 80093c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80093ca:	f7ff ff64 	bl	8009296 <rpmsg_virtio_get_tx_buffer>
 80093ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3358      	adds	r3, #88	@ 0x58
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff fe3c 	bl	8009052 <metal_mutex_release>
		if (buffer || !tick_count)
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10e      	bne.n	80093fe <rpmsg_virtio_send_offchannel_raw+0x9e>
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 80093ec:	4b2f      	ldr	r3, [pc, #188]	@ (80094ac <rpmsg_virtio_send_offchannel_raw+0x14c>)
 80093ee:	e057      	b.n	80094a0 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 80093f0:	200a      	movs	r0, #10
 80093f2:	f7ff fd78 	bl	8008ee6 <metal_sleep_usec>
		tick_count--;
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	3b01      	subs	r3, #1
 80093fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 80093fc:	e7d2      	b.n	80093a4 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 80093fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8009404:	4b2a      	ldr	r3, [pc, #168]	@ (80094b0 <rpmsg_virtio_send_offchannel_raw+0x150>)
 8009406:	e04b      	b.n	80094a0 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8009410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009412:	b29b      	uxth	r3, r3
 8009414:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800941a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8009420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009424:	f7ff fd8e 	bl	8008f44 <metal_io_virt_to_offset>
 8009428:	4601      	mov	r1, r0
 800942a:	f107 0218 	add.w	r2, r7, #24
 800942e:	2310      	movs	r3, #16
 8009430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009432:	f7fe fd84 	bl	8007f3e <metal_io_block_write>
 8009436:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	2b10      	cmp	r3, #16
 800943c:	d001      	beq.n	8009442 <rpmsg_virtio_send_offchannel_raw+0xe2>
 800943e:	bf00      	nop
 8009440:	e7fd      	b.n	800943e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8009442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009444:	3310      	adds	r3, #16
 8009446:	4619      	mov	r1, r3
 8009448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944a:	f7ff fd7b 	bl	8008f44 <metal_io_virt_to_offset>
 800944e:	4601      	mov	r1, r0
 8009450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009456:	f7fe fd72 	bl	8007f3e <metal_io_block_write>
 800945a:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800945c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800945e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009460:	429a      	cmp	r2, r3
 8009462:	d001      	beq.n	8009468 <rpmsg_virtio_send_offchannel_raw+0x108>
 8009464:	bf00      	nop
 8009466:	e7fd      	b.n	8009464 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3358      	adds	r3, #88	@ 0x58
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fde5 	bl	800903c <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	8afb      	ldrh	r3, [r7, #22]
 8009476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009478:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800947a:	f7ff fee9 	bl	8009250 <rpmsg_virtio_enqueue_buffer>
 800947e:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <rpmsg_virtio_send_offchannel_raw+0x12a>
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fc7f 	bl	8009d92 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3358      	adds	r3, #88	@ 0x58
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fdda 	bl	8009052 <metal_mutex_release>

	return size;
 800949e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3740      	adds	r7, #64	@ 0x40
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	fffff82c 	.word	0xfffff82c
 80094ac:	fffff82b 	.word	0xfffff82b
 80094b0:	fffff82e 	.word	0xfffff82e

080094b4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b08d      	sub	sp, #52	@ 0x34
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	3358      	adds	r3, #88	@ 0x58
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fda9 	bl	800903c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 80094ea:	f107 020a 	add.w	r2, r7, #10
 80094ee:	f107 030c 	add.w	r3, r7, #12
 80094f2:	4619      	mov	r1, r3
 80094f4:	69f8      	ldr	r0, [r7, #28]
 80094f6:	f7ff fef9 	bl	80092ec <rpmsg_virtio_get_rx_buffer>
 80094fa:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	3358      	adds	r3, #88	@ 0x58
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fda6 	bl	8009052 <metal_mutex_release>

	while (rp_hdr) {
 8009506:	e04d      	b.n	80095a4 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	3358      	adds	r3, #88	@ 0x58
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff fd95 	bl	800903c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	4619      	mov	r1, r3
 8009518:	69b8      	ldr	r0, [r7, #24]
 800951a:	f7ff fe19 	bl	8009150 <rpmsg_get_ept_from_addr>
 800951e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	3358      	adds	r3, #88	@ 0x58
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fd94 	bl	8009052 <metal_mutex_release>

		if (!ept)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d03d      	beq.n	80095ac <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d103      	bne.n	8009542 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	899b      	ldrh	r3, [r3, #12]
 8009550:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009552:	4618      	mov	r0, r3
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4613      	mov	r3, r2
 8009560:	4602      	mov	r2, r0
 8009562:	6978      	ldr	r0, [r7, #20]
 8009564:	47a0      	blx	r4
 8009566:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <rpmsg_virtio_rx_callback+0xaa>
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	3358      	adds	r3, #88	@ 0x58
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fd60 	bl	800903c <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	897b      	ldrh	r3, [r7, #10]
 8009580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	f7ff fe44 	bl	8009210 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8009588:	f107 020a 	add.w	r2, r7, #10
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	4619      	mov	r1, r3
 8009592:	69f8      	ldr	r0, [r7, #28]
 8009594:	f7ff feaa 	bl	80092ec <rpmsg_virtio_get_rx_buffer>
 8009598:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3358      	adds	r3, #88	@ 0x58
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fd57 	bl	8009052 <metal_mutex_release>
	while (rp_hdr) {
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1ae      	bne.n	8009508 <rpmsg_virtio_rx_callback+0x40>
 80095aa:	e000      	b.n	80095ae <rpmsg_virtio_rx_callback+0xe6>
			return;
 80095ac:	bf00      	nop
	}
}
 80095ae:	372c      	adds	r7, #44	@ 0x2c
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd90      	pop	{r4, r7, pc}

080095b4 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b092      	sub	sp, #72	@ 0x48
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 80095c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ca:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 80095cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b28      	cmp	r3, #40	@ 0x28
 80095da:	d001      	beq.n	80095e0 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80095dc:	2300      	movs	r3, #0
 80095de:	e057      	b.n	8009690 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 80095e2:	4619      	mov	r1, r3
 80095e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80095e6:	f7ff fcad 	bl	8008f44 <metal_io_virt_to_offset>
 80095ea:	4601      	mov	r1, r0
 80095ec:	f107 0210 	add.w	r2, r7, #16
 80095f0:	2320      	movs	r3, #32
 80095f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80095f4:	f7fe fc2c 	bl	8007e50 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80095fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009600:	3358      	adds	r3, #88	@ 0x58
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fd1a 	bl	800903c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8009608:	f107 0110 	add.w	r1, r7, #16
 800960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009614:	f7ff fb0a 	bl	8008c2c <rpmsg_get_endpoint>
 8009618:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d017      	beq.n	8009656 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8009634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009636:	3358      	adds	r3, #88	@ 0x58
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fd0a 	bl	8009052 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	2b00      	cmp	r3, #0
 8009642:	d024      	beq.n	800968e <rpmsg_virtio_ns_callback+0xda>
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	2b00      	cmp	r3, #0
 800964a:	d020      	beq.n	800968e <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	4798      	blx	r3
 8009654:	e01b      	b.n	800968e <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2b00      	cmp	r3, #0
 800965a:	d110      	bne.n	800967e <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800965c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800965e:	3358      	adds	r3, #88	@ 0x58
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fcf6 	bl	8009052 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8009666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00f      	beq.n	800968e <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800966e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009672:	f107 0110 	add.w	r1, r7, #16
 8009676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009678:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800967a:	4798      	blx	r3
 800967c:	e007      	b.n	800968e <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009682:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8009684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009686:	3358      	adds	r3, #88	@ 0x58
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fce2 	bl	8009052 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3748      	adds	r7, #72	@ 0x48
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b094      	sub	sp, #80	@ 0x50
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 80096aa:	2264      	movs	r2, #100	@ 0x64
 80096ac:	2100      	movs	r1, #0
 80096ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096b0:	f001 ff89 	bl	800b5c6 <memset>
	metal_mutex_init(&rdev->lock);
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	3358      	adds	r3, #88	@ 0x58
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fca9 	bl	8009010 <metal_mutex_init>
	rvdev->vdev = vdev;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	4a5d      	ldr	r2, [pc, #372]	@ (8009848 <rpmsg_init_vdev+0x1b0>)
 80096d4:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fce3 	bl	80090a2 <rpmsg_virtio_get_role>
 80096dc:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80096de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d120      	bne.n	8009726 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 80096e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 80096ea:	4b58      	ldr	r3, [pc, #352]	@ (800984c <rpmsg_init_vdev+0x1b4>)
 80096ec:	e0a7      	b.n	800983e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 80096ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 80096f6:	4b56      	ldr	r3, [pc, #344]	@ (8009850 <rpmsg_init_vdev+0x1b8>)
 80096f8:	e0a1      	b.n	800983e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096fe:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 8009700:	4b54      	ldr	r3, [pc, #336]	@ (8009854 <rpmsg_init_vdev+0x1bc>)
 8009702:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8009704:	4b54      	ldr	r3, [pc, #336]	@ (8009858 <rpmsg_init_vdev+0x1c0>)
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8009708:	4b54      	ldr	r3, [pc, #336]	@ (800985c <rpmsg_init_vdev+0x1c4>)
 800970a:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800970c:	4b54      	ldr	r3, [pc, #336]	@ (8009860 <rpmsg_init_vdev+0x1c8>)
 800970e:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	3318      	adds	r3, #24
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800972c:	f107 0220 	add.w	r2, r7, #32
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	2202      	movs	r2, #2
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff fcf2 	bl	8009126 <rpmsg_virtio_create_virtqueues>
 8009742:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8009744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <rpmsg_init_vdev+0xb6>
		return status;
 800974a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800974c:	e077      	b.n	800983e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800974e:	2300      	movs	r3, #0
 8009750:	643b      	str	r3, [r7, #64]	@ 0x40
 8009752:	e00f      	b.n	8009774 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800975a:	4613      	mov	r3, r2
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4413      	add	r3, r2
 8009760:	00db      	lsls	r3, r3, #3
 8009762:	440b      	add	r3, r1
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 8009768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800976e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009770:	3301      	adds	r3, #1
 8009772:	643b      	str	r3, [r7, #64]	@ 0x40
 8009774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009776:	2b01      	cmp	r3, #1
 8009778:	d9ec      	bls.n	8009754 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800977a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977c:	2b00      	cmp	r3, #0
 800977e:	d137      	bne.n	80097f0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8009780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009784:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800978a:	e02a      	b.n	80097e2 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800978c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009790:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009792:	f7ff fcee 	bl	8009172 <rpmsg_virtio_shm_pool_get_buffer>
 8009796:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800979e:	4b2c      	ldr	r3, [pc, #176]	@ (8009850 <rpmsg_init_vdev+0x1b8>)
 80097a0:	e04d      	b.n	800983e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 80097a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097a8:	6838      	ldr	r0, [r7, #0]
 80097aa:	f7ff fbcb 	bl	8008f44 <metal_io_virt_to_offset>
 80097ae:	4601      	mov	r1, r0
 80097b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097b4:	2200      	movs	r2, #0
 80097b6:	6838      	ldr	r0, [r7, #0]
 80097b8:	f7fe fc37 	bl	800802a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80097c0:	f107 0110 	add.w	r1, r7, #16
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	2301      	movs	r3, #1
 80097ca:	2200      	movs	r2, #0
 80097cc:	f000 fa23 	bl	8009c16 <virtqueue_add_buffer>
 80097d0:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80097d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <rpmsg_init_vdev+0x144>
				return status;
 80097d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097da:	e030      	b.n	800983e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80097dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097de:	3301      	adds	r3, #1
 80097e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097e6:	895b      	ldrh	r3, [r3, #10]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d3cd      	bcc.n	800978c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fb83 	bl	8008efe <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff fc83 	bl	8009104 <rpmsg_virtio_get_features>
 80097fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8009800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d011      	beq.n	800982e <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	f103 0008 	add.w	r0, r3, #8
 8009810:	2300      	movs	r3, #0
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	4b13      	ldr	r3, [pc, #76]	@ (8009864 <rpmsg_init_vdev+0x1cc>)
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2335      	movs	r3, #53	@ 0x35
 800981a:	2235      	movs	r2, #53	@ 0x35
 800981c:	4912      	ldr	r1, [pc, #72]	@ (8009868 <rpmsg_init_vdev+0x1d0>)
 800981e:	f7ff fc23 	bl	8009068 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8009822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009824:	3308      	adds	r3, #8
 8009826:	4619      	mov	r1, r3
 8009828:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800982a:	f7ff fa81 	bl	8008d30 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800982e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8009834:	2104      	movs	r1, #4
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fc40 	bl	80090bc <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800983c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800983e:	4618      	mov	r0, r3
 8009840:	3748      	adds	r7, #72	@ 0x48
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08009361 	.word	0x08009361
 800984c:	fffff82d 	.word	0xfffff82d
 8009850:	fffff82e 	.word	0xfffff82e
 8009854:	0800ec50 	.word	0x0800ec50
 8009858:	0800ec58 	.word	0x0800ec58
 800985c:	080094c9 	.word	0x080094c9
 8009860:	080094b5 	.word	0x080094b5
 8009864:	080095b5 	.word	0x080095b5
 8009868:	0800ec60 	.word	0x0800ec60

0800986c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8009878:	e008      	b.n	800988c <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	3b34      	subs	r3, #52	@ 0x34
 8009884:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fae4 	bl	8008e54 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fb46 	bl	8008f20 <metal_list_is_empty>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ef      	beq.n	800987a <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	3358      	adds	r3, #88	@ 0x58
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff fbbb 	bl	8009026 <metal_mutex_deinit>
}
 80098b0:	bf00      	nop
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80098c2:	bf00      	nop
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 80098f2:	68fb      	ldr	r3, [r7, #12]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3303      	adds	r3, #3
 8009914:	005a      	lsls	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	4413      	add	r3, r2
 8009922:	1e5a      	subs	r2, r3, #1
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	425b      	negs	r3, r3
 8009928:	4013      	ands	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	3306      	adds	r3, #6
 8009936:	60fb      	str	r3, [r7, #12]

	return size;
 8009938:	68fb      	ldr	r3, [r7, #12]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <metal_io_virt_to_offset>:
{
 8009946:	b480      	push	{r7}
 8009948:	b085      	sub	sp, #20
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d201      	bcs.n	8009968 <metal_io_virt_to_offset+0x22>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	e001      	b.n	800996c <metal_io_virt_to_offset+0x26>
 8009968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b091      	sub	sp, #68	@ 0x44
 800997c:	af04      	add	r7, sp, #16
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009990:	429a      	cmp	r2, r3
 8009992:	d902      	bls.n	800999a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8009994:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8009998:	e053      	b.n	8009a42 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800999a:	2300      	movs	r3, #0
 800999c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800999e:	e04b      	b.n	8009a38 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80099a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a6:	4613      	mov	r3, r2
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	4413      	add	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	440b      	add	r3, r1
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	3304      	adds	r3, #4
 80099b6:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d118      	bne.n	80099f2 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4619      	mov	r1, r3
 80099cc:	69f8      	ldr	r0, [r7, #28]
 80099ce:	f7ff ffba 	bl	8009946 <metal_io_virt_to_offset>
 80099d2:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 80099d8:	461a      	mov	r2, r3
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7ff ff8d 	bl	8009900 <vring_size>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2200      	movs	r2, #0
 80099ea:	69b9      	ldr	r1, [r7, #24]
 80099ec:	69f8      	ldr	r0, [r7, #28]
 80099ee:	f7fe fb1c 	bl	800802a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	b298      	uxth	r0, r3
 80099f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4413      	add	r3, r2
 80099fe:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a06:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009a08:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	6a12      	ldr	r2, [r2, #32]
 8009a0e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a12:	6809      	ldr	r1, [r1, #0]
 8009a14:	9102      	str	r1, [sp, #8]
 8009a16:	9201      	str	r2, [sp, #4]
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4601      	mov	r1, r0
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f8c4 	bl	8009bae <virtqueue_create>
 8009a26:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <virtio_create_virtqueues+0xba>
			return ret;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	e007      	b.n	8009a42 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8009a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a34:	3301      	adds	r3, #1
 8009a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d3af      	bcc.n	80099a0 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3734      	adds	r7, #52	@ 0x34
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}

08009a4a <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	4413      	add	r3, r2
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	425b      	negs	r3, r3
 8009a88:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	60da      	str	r2, [r3, #12]
}
 8009a90:	bf00      	nop
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	80fb      	strh	r3, [r7, #6]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	80bb      	strh	r3, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8009aae:	88ba      	ldrh	r2, [r7, #4]
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8009aba:	88b9      	ldrh	r1, [r7, #4]
 8009abc:	887b      	ldrh	r3, [r7, #2]
 8009abe:	1acb      	subs	r3, r1, r3
 8009ac0:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bf34      	ite	cc
 8009ac6:	2301      	movcc	r3, #1
 8009ac8:	2300      	movcs	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <metal_io_virt_to_offset>:
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d201      	bcs.n	8009afa <metal_io_virt_to_offset+0x22>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	e001      	b.n	8009afe <metal_io_virt_to_offset+0x26>
 8009afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <metal_io_phys>:
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8009b18:	2b1f      	cmp	r3, #31
 8009b1a:	d805      	bhi.n	8009b28 <metal_io_phys+0x1e>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	fa22 f303 	lsr.w	r3, r2, r3
 8009b26:	e000      	b.n	8009b2a <metal_io_phys+0x20>
 8009b28:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8009b2a:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d010      	beq.n	8009b56 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d80b      	bhi.n	8009b56 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6919      	ldr	r1, [r3, #16]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8009b52:	4413      	add	r3, r2
 8009b54:	e001      	b.n	8009b5a <metal_io_phys+0x50>
 8009b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <metal_io_virt_to_phys>:
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff ffb0 	bl	8009ad8 <metal_io_virt_to_offset>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff ffc4 	bl	8009b0a <metal_io_phys>
 8009b82:	4603      	mov	r3, r0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff ffe1 	bl	8009b66 <metal_io_virt_to_phys>
 8009ba4:	4603      	mov	r3, r0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b086      	sub	sp, #24
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d121      	bne.n	8009c0c <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	897a      	ldrh	r2, [r7, #10]
 8009bd8:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	891a      	ldrh	r2, [r3, #8]
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	895a      	ldrh	r2, [r3, #10]
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf4:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6819      	ldr	r1, [r3, #0]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c02:	f000 f97a 	bl	8009efa <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8009c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c08:	f000 f899 	bl	8009d3e <virtqueue_disable_cb>
	}

	return (status);
 8009c0c:	697b      	ldr	r3, [r7, #20]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	@ 0x28
 8009c1a:	af02      	add	r7, sp, #8
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	4413      	add	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d12c      	bne.n	8009c94 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009c3e:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8009c40:	8a7b      	ldrh	r3, [r7, #18]
 8009c42:	3307      	adds	r3, #7
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c50:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	69d9      	ldr	r1, [r3, #28]
 8009c5e:	8a7a      	ldrh	r2, [r7, #18]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f8a7 	bl	8009dbe <vq_ring_add_buffer>
 8009c70:	4603      	mov	r3, r0
 8009c72:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8a3a      	ldrh	r2, [r7, #16]
 8009c78:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8009c8a:	8a7b      	ldrh	r3, [r7, #18]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f966 	bl	8009f60 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8009c94:	69bb      	ldr	r3, [r7, #24]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3720      	adds	r7, #32
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b088      	sub	sp, #32
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	60f8      	str	r0, [r7, #12]
 8009ca6:	60b9      	str	r1, [r7, #8]
 8009ca8:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <virtqueue_get_buffer+0x20>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d101      	bne.n	8009cc2 <virtqueue_get_buffer+0x24>
		return (NULL);
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e039      	b.n	8009d36 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	b291      	uxth	r1, r2
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	8651      	strh	r1, [r2, #50]	@ 0x32
 8009cce:	b21a      	sxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	895b      	ldrh	r3, [r3, #10]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	b21b      	sxth	r3, r3
 8009cda:	4013      	ands	r3, r2
 8009cdc:	b21b      	sxth	r3, r3
 8009cde:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ce4:	8bfb      	ldrh	r3, [r7, #30]
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4413      	add	r3, r2
 8009cea:	3304      	adds	r3, #4
 8009cec:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8009cee:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	82fb      	strh	r3, [r7, #22]
	if (len)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8009d06:	8afb      	ldrh	r3, [r7, #22]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f8ae 	bl	8009e6c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8009d10:	8afa      	ldrh	r2, [r7, #22]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3207      	adds	r2, #7
 8009d16:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009d1a:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8009d1c:	8afa      	ldrh	r2, [r7, #22]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3207      	adds	r2, #7
 8009d22:	2100      	movs	r1, #0
 8009d24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8bfa      	ldrh	r2, [r7, #30]
 8009d32:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8009d34:	693b      	ldr	r3, [r7, #16]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	895b      	ldrh	r3, [r3, #10]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1a      	ldr	r2, [r3, #32]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009d66:	3901      	subs	r1, #1
 8009d68:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	4413      	add	r3, r2
 8009d6e:	460a      	mov	r2, r1
 8009d70:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8009d72:	e008      	b.n	8009d86 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	b292      	uxth	r2, r2
 8009d84:	801a      	strh	r2, [r3, #0]
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8009d9a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f91d 	bl	8009fde <vq_ring_must_notify_host>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f94d 	bl	800a04a <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8009dbe:	b5b0      	push	{r4, r5, r7, lr}
 8009dc0:	b088      	sub	sp, #32
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	603b      	str	r3, [r7, #0]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8009dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd2:	4413      	add	r3, r2
 8009dd4:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	837b      	strh	r3, [r7, #26]
 8009dde:	e03c      	b.n	8009e5a <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8009de0:	8b7b      	ldrh	r3, [r7, #26]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	4413      	add	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4619      	mov	r1, r3
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7ff fec8 	bl	8009b8c <virtqueue_virt_to_phys>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2200      	movs	r2, #0
 8009e00:	461c      	mov	r4, r3
 8009e02:	4615      	mov	r5, r2
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4413      	add	r3, r2
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	461a      	mov	r2, r3
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	69fa      	ldr	r2, [r7, #28]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	da06      	bge.n	8009e38 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	899b      	ldrh	r3, [r3, #12]
 8009e2e:	f043 0301 	orr.w	r3, r3, #1
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	db06      	blt.n	8009e4e <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	899b      	ldrh	r3, [r3, #12]
 8009e44:	f043 0302 	orr.w	r3, r3, #2
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	3301      	adds	r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	89db      	ldrh	r3, [r3, #14]
 8009e58:	837b      	strh	r3, [r7, #26]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	dbbe      	blt.n	8009de0 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8009e62:	8b7b      	ldrh	r3, [r7, #26]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3720      	adds	r7, #32
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bdb0      	pop	{r4, r5, r7, pc}

08009e6c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	887b      	ldrh	r3, [r7, #2]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8009e84:	887b      	ldrh	r3, [r7, #2]
 8009e86:	3307      	adds	r3, #7
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	889b      	ldrh	r3, [r3, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	889b      	ldrh	r3, [r3, #4]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	899b      	ldrh	r3, [r3, #12]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d113      	bne.n	8009ee0 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009eb8:	e00c      	b.n	8009ed4 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	69da      	ldr	r2, [r3, #28]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	89db      	ldrh	r3, [r3, #14]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	889b      	ldrh	r3, [r3, #4]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	899b      	ldrh	r3, [r3, #12]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1ec      	bne.n	8009eba <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	887a      	ldrh	r2, [r7, #2]
 8009eec:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	895b      	ldrh	r3, [r3, #10]
 8009f0a:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3318      	adds	r3, #24
 8009f10:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8009f12:	69b9      	ldr	r1, [r7, #24]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f7ff fd96 	bl	8009a4a <vring_init>

	for (i = 0; i < size - 1; i++)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	e00c      	b.n	8009f3e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	6859      	ldr	r1, [r3, #4]
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	440b      	add	r3, r1
 8009f32:	3201      	adds	r2, #1
 8009f34:	b292      	uxth	r2, r2
 8009f36:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	dbed      	blt.n	8009f24 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009f56:	81da      	strh	r2, [r3, #14]
}
 8009f58:	bf00      	nop
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	885b      	ldrh	r3, [r3, #2]
 8009f72:	b21a      	sxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	895b      	ldrh	r3, [r3, #10]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	b21b      	sxth	r3, r3
 8009f7e:	4013      	ands	r3, r2
 8009f80:	b21b      	sxth	r3, r3
 8009f82:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1a      	ldr	r2, [r3, #32]
 8009f88:	89fb      	ldrh	r3, [r7, #14]
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	887a      	ldrh	r2, [r7, #2]
 8009f90:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8009f92:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	885a      	ldrh	r2, [r3, #2]
 8009f9c:	3201      	adds	r2, #1
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009fae:	bf00      	nop
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8009fc2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01d      	beq.n	800a02e <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	885b      	ldrh	r3, [r3, #2]
 8009ff8:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ffe:	89fa      	ldrh	r2, [r7, #14]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	4413      	add	r3, r2
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800a014:	89ba      	ldrh	r2, [r7, #12]
 800a016:	89f9      	ldrh	r1, [r7, #14]
 800a018:	897b      	ldrh	r3, [r7, #10]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff fd3e 	bl	8009a9c <vring_need_event>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	bf14      	ite	ne
 800a026:	2301      	movne	r3, #1
 800a028:	2300      	moveq	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	e009      	b.n	800a042 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bf0c      	ite	eq
 800a03c:	2301      	moveq	r3, #1
 800a03e:	2300      	movne	r3, #0
 800a040:	b2db      	uxtb	r3, r3
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800a074:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HAL_HSEM_FreeCallback+0x1c>)
 800a076:	2201      	movs	r2, #1
 800a078:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800a07a:	2002      	movs	r0, #2
 800a07c:	f7f7 fde0 	bl	8001c40 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	24004cd8 	.word	0x24004cd8

0800a08c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800a092:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c0 <MAILBOX_Init+0x34>)
 800a094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a098:	4a09      	ldr	r2, [pc, #36]	@ (800a0c0 <MAILBOX_Init+0x34>)
 800a09a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a09e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a0a2:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <MAILBOX_Init+0x34>)
 800a0a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0ac:	607b      	str	r3, [r7, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800a0b0:	2002      	movs	r0, #2
 800a0b2:	f7f7 fdc5 	bl	8001c40 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	58024400 	.word	0x58024400

0800a0c4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800a0cc:	4b09      	ldr	r3, [pc, #36]	@ (800a0f4 <MAILBOX_Poll+0x30>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d108      	bne.n	800a0e6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7fe fb75 	bl	80087c6 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800a0dc:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <MAILBOX_Poll+0x30>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
    return 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e001      	b.n	800a0ea <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800a0e6:	f06f 030a 	mvn.w	r3, #10
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	24004cd8 	.word	0x24004cd8

0800a0f8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800a102:	2000      	movs	r0, #0
 800a104:	f7f7 fd6e 	bl	8001be4 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800a108:	2100      	movs	r1, #0
 800a10a:	2000      	movs	r0, #0
 800a10c:	f7f7 fd84 	bl	8001c18 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d006      	beq.n	800a13a <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d001      	beq.n	800a13a <is_rpmsg_ept_ready+0x20>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <is_rpmsg_ept_ready+0x22>
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d209      	bcs.n	800a170 <metal_device_io_region+0x28>
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	4613      	mov	r3, r2
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	4413      	add	r3, r2
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	3308      	adds	r3, #8
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	4413      	add	r3, r2
 800a16c:	3304      	adds	r3, #4
 800a16e:	e000      	b.n	800a172 <metal_device_io_region+0x2a>
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
	...

0800a180 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800a180:	b590      	push	{r4, r7, lr}
 800a182:	b08d      	sub	sp, #52	@ 0x34
 800a184:	af04      	add	r7, sp, #16
 800a186:	6078      	str	r0, [r7, #4]
  int status = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800a190:	4a41      	ldr	r2, [pc, #260]	@ (800a298 <OPENAMP_shmem_init+0x118>)
 800a192:	f107 0310 	add.w	r3, r7, #16
 800a196:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a19a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800a1a6:	f107 0310 	add.w	r3, r7, #16
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fd fda6 	bl	8007cfc <metal_init>

  status = metal_register_generic_device(&shm_device);
 800a1b0:	483a      	ldr	r0, [pc, #232]	@ (800a29c <OPENAMP_shmem_init+0x11c>)
 800a1b2:	f7fd fc41 	bl	8007a38 <metal_register_generic_device>
 800a1b6:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <OPENAMP_shmem_init+0x42>
    return status;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	e066      	b.n	800a290 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800a1c2:	f107 0318 	add.w	r3, r7, #24
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4935      	ldr	r1, [pc, #212]	@ (800a2a0 <OPENAMP_shmem_init+0x120>)
 800a1ca:	4836      	ldr	r0, [pc, #216]	@ (800a2a4 <OPENAMP_shmem_init+0x124>)
 800a1cc:	f7fd fbf6 	bl	80079bc <metal_device_open>
 800a1d0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <OPENAMP_shmem_init+0x5c>
    return status;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	e059      	b.n	800a290 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800a1dc:	4a32      	ldr	r2, [pc, #200]	@ (800a2a8 <OPENAMP_shmem_init+0x128>)
 800a1de:	4b33      	ldr	r3, [pc, #204]	@ (800a2ac <OPENAMP_shmem_init+0x12c>)
 800a1e0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800a1e8:	4a31      	ldr	r2, [pc, #196]	@ (800a2b0 <OPENAMP_shmem_init+0x130>)
 800a1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a2a8 <OPENAMP_shmem_init+0x128>)
 800a1ec:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9302      	str	r3, [sp, #8]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4613      	mov	r3, r2
 800a200:	4a2a      	ldr	r2, [pc, #168]	@ (800a2ac <OPENAMP_shmem_init+0x12c>)
 800a202:	4929      	ldr	r1, [pc, #164]	@ (800a2a8 <OPENAMP_shmem_init+0x128>)
 800a204:	f7fd fdd5 	bl	8007db2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	2100      	movs	r1, #0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff ff9b 	bl	800a148 <metal_device_io_region>
 800a212:	4603      	mov	r3, r0
 800a214:	4a27      	ldr	r2, [pc, #156]	@ (800a2b4 <OPENAMP_shmem_init+0x134>)
 800a216:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800a218:	4b26      	ldr	r3, [pc, #152]	@ (800a2b4 <OPENAMP_shmem_init+0x134>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <OPENAMP_shmem_init+0xa6>
    return -1;
 800a220:	f04f 33ff 	mov.w	r3, #4294967295
 800a224:	e034      	b.n	800a290 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800a226:	f107 0208 	add.w	r2, r7, #8
 800a22a:	f107 030c 	add.w	r3, r7, #12
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f929 	bl	800a488 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b8 <OPENAMP_shmem_init+0x138>)
 800a23a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800a23c:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b8 <OPENAMP_shmem_init+0x138>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800a244:	f04f 33ff 	mov.w	r3, #4294967295
 800a248:	e022      	b.n	800a290 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800a250:	4b19      	ldr	r3, [pc, #100]	@ (800a2b8 <OPENAMP_shmem_init+0x138>)
 800a252:	6819      	ldr	r1, [r3, #0]
 800a254:	4b18      	ldr	r3, [pc, #96]	@ (800a2b8 <OPENAMP_shmem_init+0x138>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	461c      	mov	r4, r3
 800a25c:	2300      	movs	r3, #0
 800a25e:	9302      	str	r3, [sp, #8]
 800a260:	2300      	movs	r3, #0
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	f04f 33ff 	mov.w	r3, #4294967295
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	4623      	mov	r3, r4
 800a26c:	f7fd fda1 	bl	8007db2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2101      	movs	r1, #1
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ff67 	bl	800a148 <metal_device_io_region>
 800a27a:	4603      	mov	r3, r0
 800a27c:	4a0f      	ldr	r2, [pc, #60]	@ (800a2bc <OPENAMP_shmem_init+0x13c>)
 800a27e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800a280:	4b0e      	ldr	r3, [pc, #56]	@ (800a2bc <OPENAMP_shmem_init+0x13c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <OPENAMP_shmem_init+0x10e>
    return -1;
 800a288:	f04f 33ff 	mov.w	r3, #4294967295
 800a28c:	e000      	b.n	800a290 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3724      	adds	r7, #36	@ 0x24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}
 800a298:	0800ec78 	.word	0x0800ec78
 800a29c:	24000040 	.word	0x24000040
 800a2a0:	0800ec64 	.word	0x0800ec64
 800a2a4:	0800ec70 	.word	0x0800ec70
 800a2a8:	38000400 	.word	0x38000400
 800a2ac:	24004d6c 	.word	0x24004d6c
 800a2b0:	38010000 	.word	0x38010000
 800a2b4:	24004cdc 	.word	0x24004cdc
 800a2b8:	24004ce4 	.word	0x24004ce4
 800a2bc:	24004ce0 	.word	0x24004ce0

0800a2c0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b08b      	sub	sp, #44	@ 0x2c
 800a2c4:	af04      	add	r7, sp, #16
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	613b      	str	r3, [r7, #16]
  int status = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800a2d6:	f7ff fed9 	bl	800a08c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff ff50 	bl	800a180 <OPENAMP_shmem_init>
 800a2e0:	60f8      	str	r0, [r7, #12]
  if(status)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	e06a      	b.n	800a3c2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4b37      	ldr	r3, [pc, #220]	@ (800a3cc <MX_OPENAMP_Init+0x10c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f103 0218 	add.w	r2, r3, #24
 800a2f6:	4b36      	ldr	r3, [pc, #216]	@ (800a3d0 <MX_OPENAMP_Init+0x110>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	9102      	str	r1, [sp, #8]
 800a2fe:	4935      	ldr	r1, [pc, #212]	@ (800a3d4 <MX_OPENAMP_Init+0x114>)
 800a300:	9101      	str	r1, [sp, #4]
 800a302:	2100      	movs	r1, #0
 800a304:	9100      	str	r1, [sp, #0]
 800a306:	21ff      	movs	r1, #255	@ 0xff
 800a308:	f7fe f97e 	bl	8008608 <rproc_virtio_create_vdev>
 800a30c:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800a314:	f04f 33ff 	mov.w	r3, #4294967295
 800a318:	e053      	b.n	800a3c2 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f7fe fa8f 	bl	800883e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800a320:	4b2a      	ldr	r3, [pc, #168]	@ (800a3cc <MX_OPENAMP_Init+0x10c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3334      	adds	r3, #52	@ 0x34
 800a326:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a330:	461c      	mov	r4, r3
 800a332:	4b29      	ldr	r3, [pc, #164]	@ (800a3d8 <MX_OPENAMP_Init+0x118>)
 800a334:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	6892      	ldr	r2, [r2, #8]
 800a33a:	6979      	ldr	r1, [r7, #20]
 800a33c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a33e:	9102      	str	r1, [sp, #8]
 800a340:	9201      	str	r2, [sp, #4]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	4623      	mov	r3, r4
 800a346:	4602      	mov	r2, r0
 800a348:	2100      	movs	r1, #0
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f7fe fa0a 	bl	8008764 <rproc_virtio_init_vring>
 800a350:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	e032      	b.n	800a3c2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800a35c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3cc <MX_OPENAMP_Init+0x10c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3348      	adds	r3, #72	@ 0x48
 800a362:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a36c:	461c      	mov	r4, r3
 800a36e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d8 <MX_OPENAMP_Init+0x118>)
 800a370:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	6892      	ldr	r2, [r2, #8]
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a37a:	9102      	str	r1, [sp, #8]
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	4623      	mov	r3, r4
 800a382:	4602      	mov	r2, r0
 800a384:	2101      	movs	r1, #1
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f7fe f9ec 	bl	8008764 <rproc_virtio_init_vring>
 800a38c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	e014      	b.n	800a3c2 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a398:	4b10      	ldr	r3, [pc, #64]	@ (800a3dc <MX_OPENAMP_Init+0x11c>)
 800a39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a39e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800a3a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a3e0 <MX_OPENAMP_Init+0x120>)
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3dc <MX_OPENAMP_Init+0x11c>)
 800a3a4:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	480e      	ldr	r0, [pc, #56]	@ (800a3e4 <MX_OPENAMP_Init+0x124>)
 800a3aa:	f7fe ff04 	bl	80091b6 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <MX_OPENAMP_Init+0x118>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a3e4 <MX_OPENAMP_Init+0x124>)
 800a3b4:	9200      	str	r2, [sp, #0]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	6939      	ldr	r1, [r7, #16]
 800a3ba:	480b      	ldr	r0, [pc, #44]	@ (800a3e8 <MX_OPENAMP_Init+0x128>)
 800a3bc:	f7ff f96c 	bl	8009698 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd90      	pop	{r4, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	24004ce4 	.word	0x24004ce4
 800a3d0:	24004ce0 	.word	0x24004ce0
 800a3d4:	0800a0f9 	.word	0x0800a0f9
 800a3d8:	24004cdc 	.word	0x24004cdc
 800a3dc:	38000400 	.word	0x38000400
 800a3e0:	38010000 	.word	0x38010000
 800a3e4:	24004ce8 	.word	0x24004ce8
 800a3e8:	24004cf4 	.word	0x24004cf4

0800a3ec <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 800a3f0:	4803      	ldr	r0, [pc, #12]	@ (800a400 <OPENAMP_DeInit+0x14>)
 800a3f2:	f7ff fa3b 	bl	800986c <rpmsg_deinit_vdev>

  metal_finish();
 800a3f6:	f7fd fcb3 	bl	8007d60 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 800a3fa:	bf00      	nop
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	24004cf4 	.word	0x24004cf4

0800a404 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	@ 0x28
 800a408:	af04      	add	r7, sp, #16
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	9302      	str	r3, [sp, #8]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	4904      	ldr	r1, [pc, #16]	@ (800a43c <OPENAMP_create_endpoint+0x38>)
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7fe fc94 	bl	8008d58 <rpmsg_create_ept>
 800a430:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800a432:	697b      	ldr	r3, [r7, #20]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	24004cf4 	.word	0x24004cf4

0800a440 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800a444:	4b03      	ldr	r3, [pc, #12]	@ (800a454 <OPENAMP_check_for_message+0x14>)
 800a446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fe3b 	bl	800a0c4 <MAILBOX_Poll>
}
 800a44e:	bf00      	nop
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	24004cf4 	.word	0x24004cf4

0800a458 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800a460:	e004      	b.n	800a46c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800a462:	4b08      	ldr	r3, [pc, #32]	@ (800a484 <OPENAMP_Wait_EndPointready+0x2c>)
 800a464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fe2c 	bl	800a0c4 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fe54 	bl	800a11a <is_rpmsg_ept_ready>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0f4      	beq.n	800a462 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	24004cf4 	.word	0x24004cf4

0800a488 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800a494:	228c      	movs	r2, #140	@ 0x8c
 800a496:	2100      	movs	r1, #0
 800a498:	481e      	ldr	r0, [pc, #120]	@ (800a514 <resource_table_init+0x8c>)
 800a49a:	f001 f894 	bl	800b5c6 <memset>
	resource_table.num = 1;
 800a49e:	4b1d      	ldr	r3, [pc, #116]	@ (800a514 <resource_table_init+0x8c>)
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800a4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a514 <resource_table_init+0x8c>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800a4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a514 <resource_table_init+0x8c>)
 800a4ac:	2218      	movs	r2, #24
 800a4ae:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800a4b0:	4b19      	ldr	r3, [pc, #100]	@ (800a518 <resource_table_init+0x90>)
 800a4b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4b6:	4a17      	ldr	r2, [pc, #92]	@ (800a514 <resource_table_init+0x8c>)
 800a4b8:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800a4ba:	4b16      	ldr	r3, [pc, #88]	@ (800a514 <resource_table_init+0x8c>)
 800a4bc:	2204      	movs	r2, #4
 800a4be:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800a4c0:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <resource_table_init+0x8c>)
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <resource_table_init+0x8c>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800a4cc:	4a12      	ldr	r2, [pc, #72]	@ (800a518 <resource_table_init+0x90>)
 800a4ce:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <resource_table_init+0x8c>)
 800a4d0:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800a4d2:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <resource_table_init+0x8c>)
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <resource_table_init+0x8c>)
 800a4da:	2204      	movs	r2, #4
 800a4dc:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800a4de:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <resource_table_init+0x8c>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 800a4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a514 <resource_table_init+0x8c>)
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800a4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <resource_table_init+0x8c>)
 800a4ec:	2207      	movs	r2, #7
 800a4ee:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800a4f0:	4b08      	ldr	r3, [pc, #32]	@ (800a514 <resource_table_init+0x8c>)
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800a4f8:	4b06      	ldr	r3, [pc, #24]	@ (800a514 <resource_table_init+0x8c>)
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	228c      	movs	r2, #140	@ 0x8c
 800a502:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	4a03      	ldr	r2, [pc, #12]	@ (800a514 <resource_table_init+0x8c>)
 800a508:	601a      	str	r2, [r3, #0]
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	38000000 	.word	0x38000000
 800a518:	38000400 	.word	0x38000400

0800a51c <__assert_func>:
 800a51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a51e:	4614      	mov	r4, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4b09      	ldr	r3, [pc, #36]	@ (800a548 <__assert_func+0x2c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4605      	mov	r5, r0
 800a528:	68d8      	ldr	r0, [r3, #12]
 800a52a:	b954      	cbnz	r4, 800a542 <__assert_func+0x26>
 800a52c:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <__assert_func+0x30>)
 800a52e:	461c      	mov	r4, r3
 800a530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a534:	9100      	str	r1, [sp, #0]
 800a536:	462b      	mov	r3, r5
 800a538:	4905      	ldr	r1, [pc, #20]	@ (800a550 <__assert_func+0x34>)
 800a53a:	f000 ffb1 	bl	800b4a0 <fiprintf>
 800a53e:	f001 f90b 	bl	800b758 <abort>
 800a542:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <__assert_func+0x38>)
 800a544:	e7f4      	b.n	800a530 <__assert_func+0x14>
 800a546:	bf00      	nop
 800a548:	240000c8 	.word	0x240000c8
 800a54c:	0800ed9e 	.word	0x0800ed9e
 800a550:	0800ed70 	.word	0x0800ed70
 800a554:	0800ed63 	.word	0x0800ed63

0800a558 <malloc>:
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <malloc+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f000 b82d 	b.w	800a5bc <_malloc_r>
 800a562:	bf00      	nop
 800a564:	240000c8 	.word	0x240000c8

0800a568 <free>:
 800a568:	4b02      	ldr	r3, [pc, #8]	@ (800a574 <free+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f001 bed9 	b.w	800c324 <_free_r>
 800a572:	bf00      	nop
 800a574:	240000c8 	.word	0x240000c8

0800a578 <sbrk_aligned>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0f      	ldr	r6, [pc, #60]	@ (800a5b8 <sbrk_aligned+0x40>)
 800a57c:	460c      	mov	r4, r1
 800a57e:	6831      	ldr	r1, [r6, #0]
 800a580:	4605      	mov	r5, r0
 800a582:	b911      	cbnz	r1, 800a58a <sbrk_aligned+0x12>
 800a584:	f001 f884 	bl	800b690 <_sbrk_r>
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f001 f87f 	bl	800b690 <_sbrk_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d103      	bne.n	800a59e <sbrk_aligned+0x26>
 800a596:	f04f 34ff 	mov.w	r4, #4294967295
 800a59a:	4620      	mov	r0, r4
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	1cc4      	adds	r4, r0, #3
 800a5a0:	f024 0403 	bic.w	r4, r4, #3
 800a5a4:	42a0      	cmp	r0, r4
 800a5a6:	d0f8      	beq.n	800a59a <sbrk_aligned+0x22>
 800a5a8:	1a21      	subs	r1, r4, r0
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f001 f870 	bl	800b690 <_sbrk_r>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d1f2      	bne.n	800a59a <sbrk_aligned+0x22>
 800a5b4:	e7ef      	b.n	800a596 <sbrk_aligned+0x1e>
 800a5b6:	bf00      	nop
 800a5b8:	24004d70 	.word	0x24004d70

0800a5bc <_malloc_r>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	1ccd      	adds	r5, r1, #3
 800a5c2:	f025 0503 	bic.w	r5, r5, #3
 800a5c6:	3508      	adds	r5, #8
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	bf38      	it	cc
 800a5cc:	250c      	movcc	r5, #12
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	db01      	blt.n	800a5d8 <_malloc_r+0x1c>
 800a5d4:	42a9      	cmp	r1, r5
 800a5d6:	d904      	bls.n	800a5e2 <_malloc_r+0x26>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6b8 <_malloc_r+0xfc>
 800a5e6:	f000 f869 	bl	800a6bc <__malloc_lock>
 800a5ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ee:	461c      	mov	r4, r3
 800a5f0:	bb44      	cbnz	r4, 800a644 <_malloc_r+0x88>
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ffbf 	bl	800a578 <sbrk_aligned>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	d158      	bne.n	800a6b2 <_malloc_r+0xf6>
 800a600:	f8d8 4000 	ldr.w	r4, [r8]
 800a604:	4627      	mov	r7, r4
 800a606:	2f00      	cmp	r7, #0
 800a608:	d143      	bne.n	800a692 <_malloc_r+0xd6>
 800a60a:	2c00      	cmp	r4, #0
 800a60c:	d04b      	beq.n	800a6a6 <_malloc_r+0xea>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	4639      	mov	r1, r7
 800a612:	4630      	mov	r0, r6
 800a614:	eb04 0903 	add.w	r9, r4, r3
 800a618:	f001 f83a 	bl	800b690 <_sbrk_r>
 800a61c:	4581      	cmp	r9, r0
 800a61e:	d142      	bne.n	800a6a6 <_malloc_r+0xea>
 800a620:	6821      	ldr	r1, [r4, #0]
 800a622:	1a6d      	subs	r5, r5, r1
 800a624:	4629      	mov	r1, r5
 800a626:	4630      	mov	r0, r6
 800a628:	f7ff ffa6 	bl	800a578 <sbrk_aligned>
 800a62c:	3001      	adds	r0, #1
 800a62e:	d03a      	beq.n	800a6a6 <_malloc_r+0xea>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	442b      	add	r3, r5
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	f8d8 3000 	ldr.w	r3, [r8]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	bb62      	cbnz	r2, 800a698 <_malloc_r+0xdc>
 800a63e:	f8c8 7000 	str.w	r7, [r8]
 800a642:	e00f      	b.n	800a664 <_malloc_r+0xa8>
 800a644:	6822      	ldr	r2, [r4, #0]
 800a646:	1b52      	subs	r2, r2, r5
 800a648:	d420      	bmi.n	800a68c <_malloc_r+0xd0>
 800a64a:	2a0b      	cmp	r2, #11
 800a64c:	d917      	bls.n	800a67e <_malloc_r+0xc2>
 800a64e:	1961      	adds	r1, r4, r5
 800a650:	42a3      	cmp	r3, r4
 800a652:	6025      	str	r5, [r4, #0]
 800a654:	bf18      	it	ne
 800a656:	6059      	strne	r1, [r3, #4]
 800a658:	6863      	ldr	r3, [r4, #4]
 800a65a:	bf08      	it	eq
 800a65c:	f8c8 1000 	streq.w	r1, [r8]
 800a660:	5162      	str	r2, [r4, r5]
 800a662:	604b      	str	r3, [r1, #4]
 800a664:	4630      	mov	r0, r6
 800a666:	f000 f82f 	bl	800a6c8 <__malloc_unlock>
 800a66a:	f104 000b 	add.w	r0, r4, #11
 800a66e:	1d23      	adds	r3, r4, #4
 800a670:	f020 0007 	bic.w	r0, r0, #7
 800a674:	1ac2      	subs	r2, r0, r3
 800a676:	bf1c      	itt	ne
 800a678:	1a1b      	subne	r3, r3, r0
 800a67a:	50a3      	strne	r3, [r4, r2]
 800a67c:	e7af      	b.n	800a5de <_malloc_r+0x22>
 800a67e:	6862      	ldr	r2, [r4, #4]
 800a680:	42a3      	cmp	r3, r4
 800a682:	bf0c      	ite	eq
 800a684:	f8c8 2000 	streq.w	r2, [r8]
 800a688:	605a      	strne	r2, [r3, #4]
 800a68a:	e7eb      	b.n	800a664 <_malloc_r+0xa8>
 800a68c:	4623      	mov	r3, r4
 800a68e:	6864      	ldr	r4, [r4, #4]
 800a690:	e7ae      	b.n	800a5f0 <_malloc_r+0x34>
 800a692:	463c      	mov	r4, r7
 800a694:	687f      	ldr	r7, [r7, #4]
 800a696:	e7b6      	b.n	800a606 <_malloc_r+0x4a>
 800a698:	461a      	mov	r2, r3
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	42a3      	cmp	r3, r4
 800a69e:	d1fb      	bne.n	800a698 <_malloc_r+0xdc>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6053      	str	r3, [r2, #4]
 800a6a4:	e7de      	b.n	800a664 <_malloc_r+0xa8>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	6033      	str	r3, [r6, #0]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f000 f80c 	bl	800a6c8 <__malloc_unlock>
 800a6b0:	e794      	b.n	800a5dc <_malloc_r+0x20>
 800a6b2:	6005      	str	r5, [r0, #0]
 800a6b4:	e7d6      	b.n	800a664 <_malloc_r+0xa8>
 800a6b6:	bf00      	nop
 800a6b8:	24004d74 	.word	0x24004d74

0800a6bc <__malloc_lock>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	@ (800a6c4 <__malloc_lock+0x8>)
 800a6be:	f001 b834 	b.w	800b72a <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	24004eb8 	.word	0x24004eb8

0800a6c8 <__malloc_unlock>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	@ (800a6d0 <__malloc_unlock+0x8>)
 800a6ca:	f001 b82f 	b.w	800b72c <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	24004eb8 	.word	0x24004eb8

0800a6d4 <__cvt>:
 800a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d6:	ed2d 8b02 	vpush	{d8}
 800a6da:	eeb0 8b40 	vmov.f64	d8, d0
 800a6de:	b085      	sub	sp, #20
 800a6e0:	4617      	mov	r7, r2
 800a6e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a6e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6e6:	ee18 2a90 	vmov	r2, s17
 800a6ea:	f025 0520 	bic.w	r5, r5, #32
 800a6ee:	2a00      	cmp	r2, #0
 800a6f0:	bfb6      	itet	lt
 800a6f2:	222d      	movlt	r2, #45	@ 0x2d
 800a6f4:	2200      	movge	r2, #0
 800a6f6:	eeb1 8b40 	vneglt.f64	d8, d0
 800a6fa:	2d46      	cmp	r5, #70	@ 0x46
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	d004      	beq.n	800a70c <__cvt+0x38>
 800a702:	2d45      	cmp	r5, #69	@ 0x45
 800a704:	d100      	bne.n	800a708 <__cvt+0x34>
 800a706:	3401      	adds	r4, #1
 800a708:	2102      	movs	r1, #2
 800a70a:	e000      	b.n	800a70e <__cvt+0x3a>
 800a70c:	2103      	movs	r1, #3
 800a70e:	ab03      	add	r3, sp, #12
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	ab02      	add	r3, sp, #8
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4622      	mov	r2, r4
 800a718:	4633      	mov	r3, r6
 800a71a:	eeb0 0b48 	vmov.f64	d0, d8
 800a71e:	f001 f8ab 	bl	800b878 <_dtoa_r>
 800a722:	2d47      	cmp	r5, #71	@ 0x47
 800a724:	d114      	bne.n	800a750 <__cvt+0x7c>
 800a726:	07fb      	lsls	r3, r7, #31
 800a728:	d50a      	bpl.n	800a740 <__cvt+0x6c>
 800a72a:	1902      	adds	r2, r0, r4
 800a72c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	bf08      	it	eq
 800a736:	9203      	streq	r2, [sp, #12]
 800a738:	2130      	movs	r1, #48	@ 0x30
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d319      	bcc.n	800a774 <__cvt+0xa0>
 800a740:	9b03      	ldr	r3, [sp, #12]
 800a742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a744:	1a1b      	subs	r3, r3, r0
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	b005      	add	sp, #20
 800a74a:	ecbd 8b02 	vpop	{d8}
 800a74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a750:	2d46      	cmp	r5, #70	@ 0x46
 800a752:	eb00 0204 	add.w	r2, r0, r4
 800a756:	d1e9      	bne.n	800a72c <__cvt+0x58>
 800a758:	7803      	ldrb	r3, [r0, #0]
 800a75a:	2b30      	cmp	r3, #48	@ 0x30
 800a75c:	d107      	bne.n	800a76e <__cvt+0x9a>
 800a75e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a766:	bf1c      	itt	ne
 800a768:	f1c4 0401 	rsbne	r4, r4, #1
 800a76c:	6034      	strne	r4, [r6, #0]
 800a76e:	6833      	ldr	r3, [r6, #0]
 800a770:	441a      	add	r2, r3
 800a772:	e7db      	b.n	800a72c <__cvt+0x58>
 800a774:	1c5c      	adds	r4, r3, #1
 800a776:	9403      	str	r4, [sp, #12]
 800a778:	7019      	strb	r1, [r3, #0]
 800a77a:	e7de      	b.n	800a73a <__cvt+0x66>

0800a77c <__exponent>:
 800a77c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a77e:	2900      	cmp	r1, #0
 800a780:	bfba      	itte	lt
 800a782:	4249      	neglt	r1, r1
 800a784:	232d      	movlt	r3, #45	@ 0x2d
 800a786:	232b      	movge	r3, #43	@ 0x2b
 800a788:	2909      	cmp	r1, #9
 800a78a:	7002      	strb	r2, [r0, #0]
 800a78c:	7043      	strb	r3, [r0, #1]
 800a78e:	dd29      	ble.n	800a7e4 <__exponent+0x68>
 800a790:	f10d 0307 	add.w	r3, sp, #7
 800a794:	461d      	mov	r5, r3
 800a796:	270a      	movs	r7, #10
 800a798:	461a      	mov	r2, r3
 800a79a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a79e:	fb07 1416 	mls	r4, r7, r6, r1
 800a7a2:	3430      	adds	r4, #48	@ 0x30
 800a7a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	2c63      	cmp	r4, #99	@ 0x63
 800a7ac:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	dcf1      	bgt.n	800a798 <__exponent+0x1c>
 800a7b4:	3130      	adds	r1, #48	@ 0x30
 800a7b6:	1e94      	subs	r4, r2, #2
 800a7b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7bc:	1c41      	adds	r1, r0, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	42ab      	cmp	r3, r5
 800a7c2:	d30a      	bcc.n	800a7da <__exponent+0x5e>
 800a7c4:	f10d 0309 	add.w	r3, sp, #9
 800a7c8:	1a9b      	subs	r3, r3, r2
 800a7ca:	42ac      	cmp	r4, r5
 800a7cc:	bf88      	it	hi
 800a7ce:	2300      	movhi	r3, #0
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	4403      	add	r3, r0
 800a7d4:	1a18      	subs	r0, r3, r0
 800a7d6:	b003      	add	sp, #12
 800a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7da:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7de:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7e2:	e7ed      	b.n	800a7c0 <__exponent+0x44>
 800a7e4:	2330      	movs	r3, #48	@ 0x30
 800a7e6:	3130      	adds	r1, #48	@ 0x30
 800a7e8:	7083      	strb	r3, [r0, #2]
 800a7ea:	70c1      	strb	r1, [r0, #3]
 800a7ec:	1d03      	adds	r3, r0, #4
 800a7ee:	e7f1      	b.n	800a7d4 <__exponent+0x58>

0800a7f0 <_printf_float>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	b08d      	sub	sp, #52	@ 0x34
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	461f      	mov	r7, r3
 800a800:	4605      	mov	r5, r0
 800a802:	f000 ff0d 	bl	800b620 <_localeconv_r>
 800a806:	f8d0 b000 	ldr.w	fp, [r0]
 800a80a:	4658      	mov	r0, fp
 800a80c:	f7f5 fdc8 	bl	80003a0 <strlen>
 800a810:	2300      	movs	r3, #0
 800a812:	930a      	str	r3, [sp, #40]	@ 0x28
 800a814:	f8d8 3000 	ldr.w	r3, [r8]
 800a818:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	9005      	str	r0, [sp, #20]
 800a820:	3307      	adds	r3, #7
 800a822:	f023 0307 	bic.w	r3, r3, #7
 800a826:	f103 0108 	add.w	r1, r3, #8
 800a82a:	f8c8 1000 	str.w	r1, [r8]
 800a82e:	ed93 0b00 	vldr	d0, [r3]
 800a832:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aa90 <_printf_float+0x2a0>
 800a836:	eeb0 7bc0 	vabs.f64	d7, d0
 800a83a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a842:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a846:	dd24      	ble.n	800a892 <_printf_float+0xa2>
 800a848:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a850:	d502      	bpl.n	800a858 <_printf_float+0x68>
 800a852:	232d      	movs	r3, #45	@ 0x2d
 800a854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a858:	498f      	ldr	r1, [pc, #572]	@ (800aa98 <_printf_float+0x2a8>)
 800a85a:	4b90      	ldr	r3, [pc, #576]	@ (800aa9c <_printf_float+0x2ac>)
 800a85c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a860:	bf94      	ite	ls
 800a862:	4688      	movls	r8, r1
 800a864:	4698      	movhi	r8, r3
 800a866:	f022 0204 	bic.w	r2, r2, #4
 800a86a:	2303      	movs	r3, #3
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	6022      	str	r2, [r4, #0]
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	9700      	str	r7, [sp, #0]
 800a876:	4633      	mov	r3, r6
 800a878:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a87a:	4621      	mov	r1, r4
 800a87c:	4628      	mov	r0, r5
 800a87e:	f000 f9d1 	bl	800ac24 <_printf_common>
 800a882:	3001      	adds	r0, #1
 800a884:	f040 8089 	bne.w	800a99a <_printf_float+0x1aa>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	b00d      	add	sp, #52	@ 0x34
 800a88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a892:	eeb4 0b40 	vcmp.f64	d0, d0
 800a896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89a:	d709      	bvc.n	800a8b0 <_printf_float+0xc0>
 800a89c:	ee10 3a90 	vmov	r3, s1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bfbc      	itt	lt
 800a8a4:	232d      	movlt	r3, #45	@ 0x2d
 800a8a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8aa:	497d      	ldr	r1, [pc, #500]	@ (800aaa0 <_printf_float+0x2b0>)
 800a8ac:	4b7d      	ldr	r3, [pc, #500]	@ (800aaa4 <_printf_float+0x2b4>)
 800a8ae:	e7d5      	b.n	800a85c <_printf_float+0x6c>
 800a8b0:	6863      	ldr	r3, [r4, #4]
 800a8b2:	1c59      	adds	r1, r3, #1
 800a8b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a8b8:	d139      	bne.n	800a92e <_printf_float+0x13e>
 800a8ba:	2306      	movs	r3, #6
 800a8bc:	6063      	str	r3, [r4, #4]
 800a8be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6022      	str	r2, [r4, #0]
 800a8c6:	9303      	str	r3, [sp, #12]
 800a8c8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a8ce:	ab09      	add	r3, sp, #36	@ 0x24
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	6861      	ldr	r1, [r4, #4]
 800a8d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7ff fefb 	bl	800a6d4 <__cvt>
 800a8de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	d129      	bne.n	800a93c <_printf_float+0x14c>
 800a8e8:	1cc8      	adds	r0, r1, #3
 800a8ea:	db02      	blt.n	800a8f2 <_printf_float+0x102>
 800a8ec:	6863      	ldr	r3, [r4, #4]
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	dd41      	ble.n	800a976 <_printf_float+0x186>
 800a8f2:	f1a9 0902 	sub.w	r9, r9, #2
 800a8f6:	fa5f f989 	uxtb.w	r9, r9
 800a8fa:	3901      	subs	r1, #1
 800a8fc:	464a      	mov	r2, r9
 800a8fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a902:	9109      	str	r1, [sp, #36]	@ 0x24
 800a904:	f7ff ff3a 	bl	800a77c <__exponent>
 800a908:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a90a:	1813      	adds	r3, r2, r0
 800a90c:	2a01      	cmp	r2, #1
 800a90e:	4682      	mov	sl, r0
 800a910:	6123      	str	r3, [r4, #16]
 800a912:	dc02      	bgt.n	800a91a <_printf_float+0x12a>
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	07d2      	lsls	r2, r2, #31
 800a918:	d501      	bpl.n	800a91e <_printf_float+0x12e>
 800a91a:	3301      	adds	r3, #1
 800a91c:	6123      	str	r3, [r4, #16]
 800a91e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0a6      	beq.n	800a874 <_printf_float+0x84>
 800a926:	232d      	movs	r3, #45	@ 0x2d
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a92c:	e7a2      	b.n	800a874 <_printf_float+0x84>
 800a92e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a932:	d1c4      	bne.n	800a8be <_printf_float+0xce>
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1c2      	bne.n	800a8be <_printf_float+0xce>
 800a938:	2301      	movs	r3, #1
 800a93a:	e7bf      	b.n	800a8bc <_printf_float+0xcc>
 800a93c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a940:	d9db      	bls.n	800a8fa <_printf_float+0x10a>
 800a942:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a946:	d118      	bne.n	800a97a <_printf_float+0x18a>
 800a948:	2900      	cmp	r1, #0
 800a94a:	6863      	ldr	r3, [r4, #4]
 800a94c:	dd0b      	ble.n	800a966 <_printf_float+0x176>
 800a94e:	6121      	str	r1, [r4, #16]
 800a950:	b913      	cbnz	r3, 800a958 <_printf_float+0x168>
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	07d0      	lsls	r0, r2, #31
 800a956:	d502      	bpl.n	800a95e <_printf_float+0x16e>
 800a958:	3301      	adds	r3, #1
 800a95a:	440b      	add	r3, r1
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	e7db      	b.n	800a91e <_printf_float+0x12e>
 800a966:	b913      	cbnz	r3, 800a96e <_printf_float+0x17e>
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	07d2      	lsls	r2, r2, #31
 800a96c:	d501      	bpl.n	800a972 <_printf_float+0x182>
 800a96e:	3302      	adds	r3, #2
 800a970:	e7f4      	b.n	800a95c <_printf_float+0x16c>
 800a972:	2301      	movs	r3, #1
 800a974:	e7f2      	b.n	800a95c <_printf_float+0x16c>
 800a976:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a97a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a97c:	4299      	cmp	r1, r3
 800a97e:	db05      	blt.n	800a98c <_printf_float+0x19c>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	6121      	str	r1, [r4, #16]
 800a984:	07d8      	lsls	r0, r3, #31
 800a986:	d5ea      	bpl.n	800a95e <_printf_float+0x16e>
 800a988:	1c4b      	adds	r3, r1, #1
 800a98a:	e7e7      	b.n	800a95c <_printf_float+0x16c>
 800a98c:	2900      	cmp	r1, #0
 800a98e:	bfd4      	ite	le
 800a990:	f1c1 0202 	rsble	r2, r1, #2
 800a994:	2201      	movgt	r2, #1
 800a996:	4413      	add	r3, r2
 800a998:	e7e0      	b.n	800a95c <_printf_float+0x16c>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	055a      	lsls	r2, r3, #21
 800a99e:	d407      	bmi.n	800a9b0 <_printf_float+0x1c0>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	4642      	mov	r2, r8
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b8      	blx	r7
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	d12a      	bne.n	800aa04 <_printf_float+0x214>
 800a9ae:	e76b      	b.n	800a888 <_printf_float+0x98>
 800a9b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a9b4:	f240 80e0 	bls.w	800ab78 <_printf_float+0x388>
 800a9b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a9bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	d133      	bne.n	800aa2e <_printf_float+0x23e>
 800a9c6:	4a38      	ldr	r2, [pc, #224]	@ (800aaa8 <_printf_float+0x2b8>)
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f af59 	beq.w	800a888 <_printf_float+0x98>
 800a9d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9da:	4543      	cmp	r3, r8
 800a9dc:	db02      	blt.n	800a9e4 <_printf_float+0x1f4>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	07d8      	lsls	r0, r3, #31
 800a9e2:	d50f      	bpl.n	800aa04 <_printf_float+0x214>
 800a9e4:	9b05      	ldr	r3, [sp, #20]
 800a9e6:	465a      	mov	r2, fp
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b8      	blx	r7
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f43f af4a 	beq.w	800a888 <_printf_float+0x98>
 800a9f4:	f04f 0900 	mov.w	r9, #0
 800a9f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9fc:	f104 0a1a 	add.w	sl, r4, #26
 800aa00:	45c8      	cmp	r8, r9
 800aa02:	dc09      	bgt.n	800aa18 <_printf_float+0x228>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	079b      	lsls	r3, r3, #30
 800aa08:	f100 8107 	bmi.w	800ac1a <_printf_float+0x42a>
 800aa0c:	68e0      	ldr	r0, [r4, #12]
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa10:	4298      	cmp	r0, r3
 800aa12:	bfb8      	it	lt
 800aa14:	4618      	movlt	r0, r3
 800aa16:	e739      	b.n	800a88c <_printf_float+0x9c>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	f43f af30 	beq.w	800a888 <_printf_float+0x98>
 800aa28:	f109 0901 	add.w	r9, r9, #1
 800aa2c:	e7e8      	b.n	800aa00 <_printf_float+0x210>
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dc3b      	bgt.n	800aaac <_printf_float+0x2bc>
 800aa34:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa8 <_printf_float+0x2b8>)
 800aa36:	2301      	movs	r3, #1
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b8      	blx	r7
 800aa3e:	3001      	adds	r0, #1
 800aa40:	f43f af22 	beq.w	800a888 <_printf_float+0x98>
 800aa44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa48:	ea59 0303 	orrs.w	r3, r9, r3
 800aa4c:	d102      	bne.n	800aa54 <_printf_float+0x264>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	07d9      	lsls	r1, r3, #31
 800aa52:	d5d7      	bpl.n	800aa04 <_printf_float+0x214>
 800aa54:	9b05      	ldr	r3, [sp, #20]
 800aa56:	465a      	mov	r2, fp
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	f43f af12 	beq.w	800a888 <_printf_float+0x98>
 800aa64:	f04f 0a00 	mov.w	sl, #0
 800aa68:	f104 0b1a 	add.w	fp, r4, #26
 800aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6e:	425b      	negs	r3, r3
 800aa70:	4553      	cmp	r3, sl
 800aa72:	dc01      	bgt.n	800aa78 <_printf_float+0x288>
 800aa74:	464b      	mov	r3, r9
 800aa76:	e794      	b.n	800a9a2 <_printf_float+0x1b2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	465a      	mov	r2, fp
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af00 	beq.w	800a888 <_printf_float+0x98>
 800aa88:	f10a 0a01 	add.w	sl, sl, #1
 800aa8c:	e7ee      	b.n	800aa6c <_printf_float+0x27c>
 800aa8e:	bf00      	nop
 800aa90:	ffffffff 	.word	0xffffffff
 800aa94:	7fefffff 	.word	0x7fefffff
 800aa98:	0800ed9f 	.word	0x0800ed9f
 800aa9c:	0800eda3 	.word	0x0800eda3
 800aaa0:	0800eda7 	.word	0x0800eda7
 800aaa4:	0800edab 	.word	0x0800edab
 800aaa8:	0800edaf 	.word	0x0800edaf
 800aaac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aab2:	4553      	cmp	r3, sl
 800aab4:	bfa8      	it	ge
 800aab6:	4653      	movge	r3, sl
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	4699      	mov	r9, r3
 800aabc:	dc37      	bgt.n	800ab2e <_printf_float+0x33e>
 800aabe:	2300      	movs	r3, #0
 800aac0:	9307      	str	r3, [sp, #28]
 800aac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aac6:	f104 021a 	add.w	r2, r4, #26
 800aaca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aacc:	9907      	ldr	r1, [sp, #28]
 800aace:	9306      	str	r3, [sp, #24]
 800aad0:	eba3 0309 	sub.w	r3, r3, r9
 800aad4:	428b      	cmp	r3, r1
 800aad6:	dc31      	bgt.n	800ab3c <_printf_float+0x34c>
 800aad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aada:	459a      	cmp	sl, r3
 800aadc:	dc3b      	bgt.n	800ab56 <_printf_float+0x366>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	07da      	lsls	r2, r3, #31
 800aae2:	d438      	bmi.n	800ab56 <_printf_float+0x366>
 800aae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae6:	ebaa 0903 	sub.w	r9, sl, r3
 800aaea:	9b06      	ldr	r3, [sp, #24]
 800aaec:	ebaa 0303 	sub.w	r3, sl, r3
 800aaf0:	4599      	cmp	r9, r3
 800aaf2:	bfa8      	it	ge
 800aaf4:	4699      	movge	r9, r3
 800aaf6:	f1b9 0f00 	cmp.w	r9, #0
 800aafa:	dc34      	bgt.n	800ab66 <_printf_float+0x376>
 800aafc:	f04f 0800 	mov.w	r8, #0
 800ab00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab04:	f104 0b1a 	add.w	fp, r4, #26
 800ab08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0a:	ebaa 0303 	sub.w	r3, sl, r3
 800ab0e:	eba3 0309 	sub.w	r3, r3, r9
 800ab12:	4543      	cmp	r3, r8
 800ab14:	f77f af76 	ble.w	800aa04 <_printf_float+0x214>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	465a      	mov	r2, fp
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	f43f aeb0 	beq.w	800a888 <_printf_float+0x98>
 800ab28:	f108 0801 	add.w	r8, r8, #1
 800ab2c:	e7ec      	b.n	800ab08 <_printf_float+0x318>
 800ab2e:	4642      	mov	r2, r8
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	d1c1      	bne.n	800aabe <_printf_float+0x2ce>
 800ab3a:	e6a5      	b.n	800a888 <_printf_float+0x98>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4628      	mov	r0, r5
 800ab42:	9206      	str	r2, [sp, #24]
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	f43f ae9e 	beq.w	800a888 <_printf_float+0x98>
 800ab4c:	9b07      	ldr	r3, [sp, #28]
 800ab4e:	9a06      	ldr	r2, [sp, #24]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	e7b9      	b.n	800aaca <_printf_float+0x2da>
 800ab56:	9b05      	ldr	r3, [sp, #20]
 800ab58:	465a      	mov	r2, fp
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	d1bf      	bne.n	800aae4 <_printf_float+0x2f4>
 800ab64:	e690      	b.n	800a888 <_printf_float+0x98>
 800ab66:	9a06      	ldr	r2, [sp, #24]
 800ab68:	464b      	mov	r3, r9
 800ab6a:	4442      	add	r2, r8
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	d1c2      	bne.n	800aafc <_printf_float+0x30c>
 800ab76:	e687      	b.n	800a888 <_printf_float+0x98>
 800ab78:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ab7c:	f1b9 0f01 	cmp.w	r9, #1
 800ab80:	dc01      	bgt.n	800ab86 <_printf_float+0x396>
 800ab82:	07db      	lsls	r3, r3, #31
 800ab84:	d536      	bpl.n	800abf4 <_printf_float+0x404>
 800ab86:	2301      	movs	r3, #1
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	f43f ae79 	beq.w	800a888 <_printf_float+0x98>
 800ab96:	9b05      	ldr	r3, [sp, #20]
 800ab98:	465a      	mov	r2, fp
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	f43f ae71 	beq.w	800a888 <_printf_float+0x98>
 800aba6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800abaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb2:	f109 39ff 	add.w	r9, r9, #4294967295
 800abb6:	d018      	beq.n	800abea <_printf_float+0x3fa>
 800abb8:	464b      	mov	r3, r9
 800abba:	f108 0201 	add.w	r2, r8, #1
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	d10c      	bne.n	800abe2 <_printf_float+0x3f2>
 800abc8:	e65e      	b.n	800a888 <_printf_float+0x98>
 800abca:	2301      	movs	r3, #1
 800abcc:	465a      	mov	r2, fp
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b8      	blx	r7
 800abd4:	3001      	adds	r0, #1
 800abd6:	f43f ae57 	beq.w	800a888 <_printf_float+0x98>
 800abda:	f108 0801 	add.w	r8, r8, #1
 800abde:	45c8      	cmp	r8, r9
 800abe0:	dbf3      	blt.n	800abca <_printf_float+0x3da>
 800abe2:	4653      	mov	r3, sl
 800abe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800abe8:	e6dc      	b.n	800a9a4 <_printf_float+0x1b4>
 800abea:	f04f 0800 	mov.w	r8, #0
 800abee:	f104 0b1a 	add.w	fp, r4, #26
 800abf2:	e7f4      	b.n	800abde <_printf_float+0x3ee>
 800abf4:	2301      	movs	r3, #1
 800abf6:	4642      	mov	r2, r8
 800abf8:	e7e1      	b.n	800abbe <_printf_float+0x3ce>
 800abfa:	2301      	movs	r3, #1
 800abfc:	464a      	mov	r2, r9
 800abfe:	4631      	mov	r1, r6
 800ac00:	4628      	mov	r0, r5
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	f43f ae3f 	beq.w	800a888 <_printf_float+0x98>
 800ac0a:	f108 0801 	add.w	r8, r8, #1
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	4543      	cmp	r3, r8
 800ac16:	dcf0      	bgt.n	800abfa <_printf_float+0x40a>
 800ac18:	e6f8      	b.n	800aa0c <_printf_float+0x21c>
 800ac1a:	f04f 0800 	mov.w	r8, #0
 800ac1e:	f104 0919 	add.w	r9, r4, #25
 800ac22:	e7f4      	b.n	800ac0e <_printf_float+0x41e>

0800ac24 <_printf_common>:
 800ac24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac28:	4616      	mov	r6, r2
 800ac2a:	4698      	mov	r8, r3
 800ac2c:	688a      	ldr	r2, [r1, #8]
 800ac2e:	690b      	ldr	r3, [r1, #16]
 800ac30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac34:	4293      	cmp	r3, r2
 800ac36:	bfb8      	it	lt
 800ac38:	4613      	movlt	r3, r2
 800ac3a:	6033      	str	r3, [r6, #0]
 800ac3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac40:	4607      	mov	r7, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	b10a      	cbz	r2, 800ac4a <_printf_common+0x26>
 800ac46:	3301      	adds	r3, #1
 800ac48:	6033      	str	r3, [r6, #0]
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	0699      	lsls	r1, r3, #26
 800ac4e:	bf42      	ittt	mi
 800ac50:	6833      	ldrmi	r3, [r6, #0]
 800ac52:	3302      	addmi	r3, #2
 800ac54:	6033      	strmi	r3, [r6, #0]
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	f015 0506 	ands.w	r5, r5, #6
 800ac5c:	d106      	bne.n	800ac6c <_printf_common+0x48>
 800ac5e:	f104 0a19 	add.w	sl, r4, #25
 800ac62:	68e3      	ldr	r3, [r4, #12]
 800ac64:	6832      	ldr	r2, [r6, #0]
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	42ab      	cmp	r3, r5
 800ac6a:	dc26      	bgt.n	800acba <_printf_common+0x96>
 800ac6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac70:	6822      	ldr	r2, [r4, #0]
 800ac72:	3b00      	subs	r3, #0
 800ac74:	bf18      	it	ne
 800ac76:	2301      	movne	r3, #1
 800ac78:	0692      	lsls	r2, r2, #26
 800ac7a:	d42b      	bmi.n	800acd4 <_printf_common+0xb0>
 800ac7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac80:	4641      	mov	r1, r8
 800ac82:	4638      	mov	r0, r7
 800ac84:	47c8      	blx	r9
 800ac86:	3001      	adds	r0, #1
 800ac88:	d01e      	beq.n	800acc8 <_printf_common+0xa4>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	6922      	ldr	r2, [r4, #16]
 800ac8e:	f003 0306 	and.w	r3, r3, #6
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	bf02      	ittt	eq
 800ac96:	68e5      	ldreq	r5, [r4, #12]
 800ac98:	6833      	ldreq	r3, [r6, #0]
 800ac9a:	1aed      	subeq	r5, r5, r3
 800ac9c:	68a3      	ldr	r3, [r4, #8]
 800ac9e:	bf0c      	ite	eq
 800aca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aca4:	2500      	movne	r5, #0
 800aca6:	4293      	cmp	r3, r2
 800aca8:	bfc4      	itt	gt
 800acaa:	1a9b      	subgt	r3, r3, r2
 800acac:	18ed      	addgt	r5, r5, r3
 800acae:	2600      	movs	r6, #0
 800acb0:	341a      	adds	r4, #26
 800acb2:	42b5      	cmp	r5, r6
 800acb4:	d11a      	bne.n	800acec <_printf_common+0xc8>
 800acb6:	2000      	movs	r0, #0
 800acb8:	e008      	b.n	800accc <_printf_common+0xa8>
 800acba:	2301      	movs	r3, #1
 800acbc:	4652      	mov	r2, sl
 800acbe:	4641      	mov	r1, r8
 800acc0:	4638      	mov	r0, r7
 800acc2:	47c8      	blx	r9
 800acc4:	3001      	adds	r0, #1
 800acc6:	d103      	bne.n	800acd0 <_printf_common+0xac>
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd0:	3501      	adds	r5, #1
 800acd2:	e7c6      	b.n	800ac62 <_printf_common+0x3e>
 800acd4:	18e1      	adds	r1, r4, r3
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	2030      	movs	r0, #48	@ 0x30
 800acda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acde:	4422      	add	r2, r4
 800ace0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ace4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ace8:	3302      	adds	r3, #2
 800acea:	e7c7      	b.n	800ac7c <_printf_common+0x58>
 800acec:	2301      	movs	r3, #1
 800acee:	4622      	mov	r2, r4
 800acf0:	4641      	mov	r1, r8
 800acf2:	4638      	mov	r0, r7
 800acf4:	47c8      	blx	r9
 800acf6:	3001      	adds	r0, #1
 800acf8:	d0e6      	beq.n	800acc8 <_printf_common+0xa4>
 800acfa:	3601      	adds	r6, #1
 800acfc:	e7d9      	b.n	800acb2 <_printf_common+0x8e>
	...

0800ad00 <_printf_i>:
 800ad00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad04:	7e0f      	ldrb	r7, [r1, #24]
 800ad06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad08:	2f78      	cmp	r7, #120	@ 0x78
 800ad0a:	4691      	mov	r9, r2
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	469a      	mov	sl, r3
 800ad12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad16:	d807      	bhi.n	800ad28 <_printf_i+0x28>
 800ad18:	2f62      	cmp	r7, #98	@ 0x62
 800ad1a:	d80a      	bhi.n	800ad32 <_printf_i+0x32>
 800ad1c:	2f00      	cmp	r7, #0
 800ad1e:	f000 80d2 	beq.w	800aec6 <_printf_i+0x1c6>
 800ad22:	2f58      	cmp	r7, #88	@ 0x58
 800ad24:	f000 80b9 	beq.w	800ae9a <_printf_i+0x19a>
 800ad28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad30:	e03a      	b.n	800ada8 <_printf_i+0xa8>
 800ad32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad36:	2b15      	cmp	r3, #21
 800ad38:	d8f6      	bhi.n	800ad28 <_printf_i+0x28>
 800ad3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ad40 <_printf_i+0x40>)
 800ad3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad40:	0800ad99 	.word	0x0800ad99
 800ad44:	0800adad 	.word	0x0800adad
 800ad48:	0800ad29 	.word	0x0800ad29
 800ad4c:	0800ad29 	.word	0x0800ad29
 800ad50:	0800ad29 	.word	0x0800ad29
 800ad54:	0800ad29 	.word	0x0800ad29
 800ad58:	0800adad 	.word	0x0800adad
 800ad5c:	0800ad29 	.word	0x0800ad29
 800ad60:	0800ad29 	.word	0x0800ad29
 800ad64:	0800ad29 	.word	0x0800ad29
 800ad68:	0800ad29 	.word	0x0800ad29
 800ad6c:	0800aead 	.word	0x0800aead
 800ad70:	0800add7 	.word	0x0800add7
 800ad74:	0800ae67 	.word	0x0800ae67
 800ad78:	0800ad29 	.word	0x0800ad29
 800ad7c:	0800ad29 	.word	0x0800ad29
 800ad80:	0800aecf 	.word	0x0800aecf
 800ad84:	0800ad29 	.word	0x0800ad29
 800ad88:	0800add7 	.word	0x0800add7
 800ad8c:	0800ad29 	.word	0x0800ad29
 800ad90:	0800ad29 	.word	0x0800ad29
 800ad94:	0800ae6f 	.word	0x0800ae6f
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	1d1a      	adds	r2, r3, #4
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6032      	str	r2, [r6, #0]
 800ada0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ada4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ada8:	2301      	movs	r3, #1
 800adaa:	e09d      	b.n	800aee8 <_printf_i+0x1e8>
 800adac:	6833      	ldr	r3, [r6, #0]
 800adae:	6820      	ldr	r0, [r4, #0]
 800adb0:	1d19      	adds	r1, r3, #4
 800adb2:	6031      	str	r1, [r6, #0]
 800adb4:	0606      	lsls	r6, r0, #24
 800adb6:	d501      	bpl.n	800adbc <_printf_i+0xbc>
 800adb8:	681d      	ldr	r5, [r3, #0]
 800adba:	e003      	b.n	800adc4 <_printf_i+0xc4>
 800adbc:	0645      	lsls	r5, r0, #25
 800adbe:	d5fb      	bpl.n	800adb8 <_printf_i+0xb8>
 800adc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	da03      	bge.n	800add0 <_printf_i+0xd0>
 800adc8:	232d      	movs	r3, #45	@ 0x2d
 800adca:	426d      	negs	r5, r5
 800adcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800add0:	4859      	ldr	r0, [pc, #356]	@ (800af38 <_printf_i+0x238>)
 800add2:	230a      	movs	r3, #10
 800add4:	e011      	b.n	800adfa <_printf_i+0xfa>
 800add6:	6821      	ldr	r1, [r4, #0]
 800add8:	6833      	ldr	r3, [r6, #0]
 800adda:	0608      	lsls	r0, r1, #24
 800addc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ade0:	d402      	bmi.n	800ade8 <_printf_i+0xe8>
 800ade2:	0649      	lsls	r1, r1, #25
 800ade4:	bf48      	it	mi
 800ade6:	b2ad      	uxthmi	r5, r5
 800ade8:	2f6f      	cmp	r7, #111	@ 0x6f
 800adea:	4853      	ldr	r0, [pc, #332]	@ (800af38 <_printf_i+0x238>)
 800adec:	6033      	str	r3, [r6, #0]
 800adee:	bf14      	ite	ne
 800adf0:	230a      	movne	r3, #10
 800adf2:	2308      	moveq	r3, #8
 800adf4:	2100      	movs	r1, #0
 800adf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adfa:	6866      	ldr	r6, [r4, #4]
 800adfc:	60a6      	str	r6, [r4, #8]
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	bfa2      	ittt	ge
 800ae02:	6821      	ldrge	r1, [r4, #0]
 800ae04:	f021 0104 	bicge.w	r1, r1, #4
 800ae08:	6021      	strge	r1, [r4, #0]
 800ae0a:	b90d      	cbnz	r5, 800ae10 <_printf_i+0x110>
 800ae0c:	2e00      	cmp	r6, #0
 800ae0e:	d04b      	beq.n	800aea8 <_printf_i+0x1a8>
 800ae10:	4616      	mov	r6, r2
 800ae12:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae16:	fb03 5711 	mls	r7, r3, r1, r5
 800ae1a:	5dc7      	ldrb	r7, [r0, r7]
 800ae1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae20:	462f      	mov	r7, r5
 800ae22:	42bb      	cmp	r3, r7
 800ae24:	460d      	mov	r5, r1
 800ae26:	d9f4      	bls.n	800ae12 <_printf_i+0x112>
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d10b      	bne.n	800ae44 <_printf_i+0x144>
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	07df      	lsls	r7, r3, #31
 800ae30:	d508      	bpl.n	800ae44 <_printf_i+0x144>
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	6861      	ldr	r1, [r4, #4]
 800ae36:	4299      	cmp	r1, r3
 800ae38:	bfde      	ittt	le
 800ae3a:	2330      	movle	r3, #48	@ 0x30
 800ae3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae44:	1b92      	subs	r2, r2, r6
 800ae46:	6122      	str	r2, [r4, #16]
 800ae48:	f8cd a000 	str.w	sl, [sp]
 800ae4c:	464b      	mov	r3, r9
 800ae4e:	aa03      	add	r2, sp, #12
 800ae50:	4621      	mov	r1, r4
 800ae52:	4640      	mov	r0, r8
 800ae54:	f7ff fee6 	bl	800ac24 <_printf_common>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d14a      	bne.n	800aef2 <_printf_i+0x1f2>
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	b004      	add	sp, #16
 800ae62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	f043 0320 	orr.w	r3, r3, #32
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	4833      	ldr	r0, [pc, #204]	@ (800af3c <_printf_i+0x23c>)
 800ae70:	2778      	movs	r7, #120	@ 0x78
 800ae72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	6831      	ldr	r1, [r6, #0]
 800ae7a:	061f      	lsls	r7, r3, #24
 800ae7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae80:	d402      	bmi.n	800ae88 <_printf_i+0x188>
 800ae82:	065f      	lsls	r7, r3, #25
 800ae84:	bf48      	it	mi
 800ae86:	b2ad      	uxthmi	r5, r5
 800ae88:	6031      	str	r1, [r6, #0]
 800ae8a:	07d9      	lsls	r1, r3, #31
 800ae8c:	bf44      	itt	mi
 800ae8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae92:	6023      	strmi	r3, [r4, #0]
 800ae94:	b11d      	cbz	r5, 800ae9e <_printf_i+0x19e>
 800ae96:	2310      	movs	r3, #16
 800ae98:	e7ac      	b.n	800adf4 <_printf_i+0xf4>
 800ae9a:	4827      	ldr	r0, [pc, #156]	@ (800af38 <_printf_i+0x238>)
 800ae9c:	e7e9      	b.n	800ae72 <_printf_i+0x172>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	f023 0320 	bic.w	r3, r3, #32
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	e7f6      	b.n	800ae96 <_printf_i+0x196>
 800aea8:	4616      	mov	r6, r2
 800aeaa:	e7bd      	b.n	800ae28 <_printf_i+0x128>
 800aeac:	6833      	ldr	r3, [r6, #0]
 800aeae:	6825      	ldr	r5, [r4, #0]
 800aeb0:	6961      	ldr	r1, [r4, #20]
 800aeb2:	1d18      	adds	r0, r3, #4
 800aeb4:	6030      	str	r0, [r6, #0]
 800aeb6:	062e      	lsls	r6, r5, #24
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	d501      	bpl.n	800aec0 <_printf_i+0x1c0>
 800aebc:	6019      	str	r1, [r3, #0]
 800aebe:	e002      	b.n	800aec6 <_printf_i+0x1c6>
 800aec0:	0668      	lsls	r0, r5, #25
 800aec2:	d5fb      	bpl.n	800aebc <_printf_i+0x1bc>
 800aec4:	8019      	strh	r1, [r3, #0]
 800aec6:	2300      	movs	r3, #0
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	4616      	mov	r6, r2
 800aecc:	e7bc      	b.n	800ae48 <_printf_i+0x148>
 800aece:	6833      	ldr	r3, [r6, #0]
 800aed0:	1d1a      	adds	r2, r3, #4
 800aed2:	6032      	str	r2, [r6, #0]
 800aed4:	681e      	ldr	r6, [r3, #0]
 800aed6:	6862      	ldr	r2, [r4, #4]
 800aed8:	2100      	movs	r1, #0
 800aeda:	4630      	mov	r0, r6
 800aedc:	f7f5 fa10 	bl	8000300 <memchr>
 800aee0:	b108      	cbz	r0, 800aee6 <_printf_i+0x1e6>
 800aee2:	1b80      	subs	r0, r0, r6
 800aee4:	6060      	str	r0, [r4, #4]
 800aee6:	6863      	ldr	r3, [r4, #4]
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	2300      	movs	r3, #0
 800aeec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aef0:	e7aa      	b.n	800ae48 <_printf_i+0x148>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	4632      	mov	r2, r6
 800aef6:	4649      	mov	r1, r9
 800aef8:	4640      	mov	r0, r8
 800aefa:	47d0      	blx	sl
 800aefc:	3001      	adds	r0, #1
 800aefe:	d0ad      	beq.n	800ae5c <_printf_i+0x15c>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	079b      	lsls	r3, r3, #30
 800af04:	d413      	bmi.n	800af2e <_printf_i+0x22e>
 800af06:	68e0      	ldr	r0, [r4, #12]
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	4298      	cmp	r0, r3
 800af0c:	bfb8      	it	lt
 800af0e:	4618      	movlt	r0, r3
 800af10:	e7a6      	b.n	800ae60 <_printf_i+0x160>
 800af12:	2301      	movs	r3, #1
 800af14:	4632      	mov	r2, r6
 800af16:	4649      	mov	r1, r9
 800af18:	4640      	mov	r0, r8
 800af1a:	47d0      	blx	sl
 800af1c:	3001      	adds	r0, #1
 800af1e:	d09d      	beq.n	800ae5c <_printf_i+0x15c>
 800af20:	3501      	adds	r5, #1
 800af22:	68e3      	ldr	r3, [r4, #12]
 800af24:	9903      	ldr	r1, [sp, #12]
 800af26:	1a5b      	subs	r3, r3, r1
 800af28:	42ab      	cmp	r3, r5
 800af2a:	dcf2      	bgt.n	800af12 <_printf_i+0x212>
 800af2c:	e7eb      	b.n	800af06 <_printf_i+0x206>
 800af2e:	2500      	movs	r5, #0
 800af30:	f104 0619 	add.w	r6, r4, #25
 800af34:	e7f5      	b.n	800af22 <_printf_i+0x222>
 800af36:	bf00      	nop
 800af38:	0800edb1 	.word	0x0800edb1
 800af3c:	0800edc2 	.word	0x0800edc2

0800af40 <_scanf_float>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	b087      	sub	sp, #28
 800af46:	4617      	mov	r7, r2
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	688b      	ldr	r3, [r1, #8]
 800af4c:	1e5a      	subs	r2, r3, #1
 800af4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af52:	bf81      	itttt	hi
 800af54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af58:	eb03 0b05 	addhi.w	fp, r3, r5
 800af5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af60:	608b      	strhi	r3, [r1, #8]
 800af62:	680b      	ldr	r3, [r1, #0]
 800af64:	460a      	mov	r2, r1
 800af66:	f04f 0500 	mov.w	r5, #0
 800af6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af6e:	f842 3b1c 	str.w	r3, [r2], #28
 800af72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af76:	4680      	mov	r8, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	bf98      	it	ls
 800af7c:	f04f 0b00 	movls.w	fp, #0
 800af80:	9201      	str	r2, [sp, #4]
 800af82:	4616      	mov	r6, r2
 800af84:	46aa      	mov	sl, r5
 800af86:	46a9      	mov	r9, r5
 800af88:	9502      	str	r5, [sp, #8]
 800af8a:	68a2      	ldr	r2, [r4, #8]
 800af8c:	b152      	cbz	r2, 800afa4 <_scanf_float+0x64>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b4e      	cmp	r3, #78	@ 0x4e
 800af94:	d864      	bhi.n	800b060 <_scanf_float+0x120>
 800af96:	2b40      	cmp	r3, #64	@ 0x40
 800af98:	d83c      	bhi.n	800b014 <_scanf_float+0xd4>
 800af9a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af9e:	b2c8      	uxtb	r0, r1
 800afa0:	280e      	cmp	r0, #14
 800afa2:	d93a      	bls.n	800b01a <_scanf_float+0xda>
 800afa4:	f1b9 0f00 	cmp.w	r9, #0
 800afa8:	d003      	beq.n	800afb2 <_scanf_float+0x72>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb6:	f1ba 0f01 	cmp.w	sl, #1
 800afba:	f200 8117 	bhi.w	800b1ec <_scanf_float+0x2ac>
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	429e      	cmp	r6, r3
 800afc2:	f200 8108 	bhi.w	800b1d6 <_scanf_float+0x296>
 800afc6:	2001      	movs	r0, #1
 800afc8:	b007      	add	sp, #28
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afd2:	2a0d      	cmp	r2, #13
 800afd4:	d8e6      	bhi.n	800afa4 <_scanf_float+0x64>
 800afd6:	a101      	add	r1, pc, #4	@ (adr r1, 800afdc <_scanf_float+0x9c>)
 800afd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afdc:	0800b123 	.word	0x0800b123
 800afe0:	0800afa5 	.word	0x0800afa5
 800afe4:	0800afa5 	.word	0x0800afa5
 800afe8:	0800afa5 	.word	0x0800afa5
 800afec:	0800b183 	.word	0x0800b183
 800aff0:	0800b15b 	.word	0x0800b15b
 800aff4:	0800afa5 	.word	0x0800afa5
 800aff8:	0800afa5 	.word	0x0800afa5
 800affc:	0800b131 	.word	0x0800b131
 800b000:	0800afa5 	.word	0x0800afa5
 800b004:	0800afa5 	.word	0x0800afa5
 800b008:	0800afa5 	.word	0x0800afa5
 800b00c:	0800afa5 	.word	0x0800afa5
 800b010:	0800b0e9 	.word	0x0800b0e9
 800b014:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b018:	e7db      	b.n	800afd2 <_scanf_float+0x92>
 800b01a:	290e      	cmp	r1, #14
 800b01c:	d8c2      	bhi.n	800afa4 <_scanf_float+0x64>
 800b01e:	a001      	add	r0, pc, #4	@ (adr r0, 800b024 <_scanf_float+0xe4>)
 800b020:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b024:	0800b0d9 	.word	0x0800b0d9
 800b028:	0800afa5 	.word	0x0800afa5
 800b02c:	0800b0d9 	.word	0x0800b0d9
 800b030:	0800b16f 	.word	0x0800b16f
 800b034:	0800afa5 	.word	0x0800afa5
 800b038:	0800b081 	.word	0x0800b081
 800b03c:	0800b0bf 	.word	0x0800b0bf
 800b040:	0800b0bf 	.word	0x0800b0bf
 800b044:	0800b0bf 	.word	0x0800b0bf
 800b048:	0800b0bf 	.word	0x0800b0bf
 800b04c:	0800b0bf 	.word	0x0800b0bf
 800b050:	0800b0bf 	.word	0x0800b0bf
 800b054:	0800b0bf 	.word	0x0800b0bf
 800b058:	0800b0bf 	.word	0x0800b0bf
 800b05c:	0800b0bf 	.word	0x0800b0bf
 800b060:	2b6e      	cmp	r3, #110	@ 0x6e
 800b062:	d809      	bhi.n	800b078 <_scanf_float+0x138>
 800b064:	2b60      	cmp	r3, #96	@ 0x60
 800b066:	d8b2      	bhi.n	800afce <_scanf_float+0x8e>
 800b068:	2b54      	cmp	r3, #84	@ 0x54
 800b06a:	d07b      	beq.n	800b164 <_scanf_float+0x224>
 800b06c:	2b59      	cmp	r3, #89	@ 0x59
 800b06e:	d199      	bne.n	800afa4 <_scanf_float+0x64>
 800b070:	2d07      	cmp	r5, #7
 800b072:	d197      	bne.n	800afa4 <_scanf_float+0x64>
 800b074:	2508      	movs	r5, #8
 800b076:	e02c      	b.n	800b0d2 <_scanf_float+0x192>
 800b078:	2b74      	cmp	r3, #116	@ 0x74
 800b07a:	d073      	beq.n	800b164 <_scanf_float+0x224>
 800b07c:	2b79      	cmp	r3, #121	@ 0x79
 800b07e:	e7f6      	b.n	800b06e <_scanf_float+0x12e>
 800b080:	6821      	ldr	r1, [r4, #0]
 800b082:	05c8      	lsls	r0, r1, #23
 800b084:	d51b      	bpl.n	800b0be <_scanf_float+0x17e>
 800b086:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b08a:	6021      	str	r1, [r4, #0]
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	f1bb 0f00 	cmp.w	fp, #0
 800b094:	d003      	beq.n	800b09e <_scanf_float+0x15e>
 800b096:	3201      	adds	r2, #1
 800b098:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b09c:	60a2      	str	r2, [r4, #8]
 800b09e:	68a3      	ldr	r3, [r4, #8]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	60a3      	str	r3, [r4, #8]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	f340 8087 	ble.w	800b1c4 <_scanf_float+0x284>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	e765      	b.n	800af8a <_scanf_float+0x4a>
 800b0be:	eb1a 0105 	adds.w	r1, sl, r5
 800b0c2:	f47f af6f 	bne.w	800afa4 <_scanf_float+0x64>
 800b0c6:	6822      	ldr	r2, [r4, #0]
 800b0c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	468a      	mov	sl, r1
 800b0d2:	f806 3b01 	strb.w	r3, [r6], #1
 800b0d6:	e7e2      	b.n	800b09e <_scanf_float+0x15e>
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	0610      	lsls	r0, r2, #24
 800b0dc:	f57f af62 	bpl.w	800afa4 <_scanf_float+0x64>
 800b0e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0e4:	6022      	str	r2, [r4, #0]
 800b0e6:	e7f4      	b.n	800b0d2 <_scanf_float+0x192>
 800b0e8:	f1ba 0f00 	cmp.w	sl, #0
 800b0ec:	d10e      	bne.n	800b10c <_scanf_float+0x1cc>
 800b0ee:	f1b9 0f00 	cmp.w	r9, #0
 800b0f2:	d10e      	bne.n	800b112 <_scanf_float+0x1d2>
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0fa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0fe:	d108      	bne.n	800b112 <_scanf_float+0x1d2>
 800b100:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b104:	6022      	str	r2, [r4, #0]
 800b106:	f04f 0a01 	mov.w	sl, #1
 800b10a:	e7e2      	b.n	800b0d2 <_scanf_float+0x192>
 800b10c:	f1ba 0f02 	cmp.w	sl, #2
 800b110:	d055      	beq.n	800b1be <_scanf_float+0x27e>
 800b112:	2d01      	cmp	r5, #1
 800b114:	d002      	beq.n	800b11c <_scanf_float+0x1dc>
 800b116:	2d04      	cmp	r5, #4
 800b118:	f47f af44 	bne.w	800afa4 <_scanf_float+0x64>
 800b11c:	3501      	adds	r5, #1
 800b11e:	b2ed      	uxtb	r5, r5
 800b120:	e7d7      	b.n	800b0d2 <_scanf_float+0x192>
 800b122:	f1ba 0f01 	cmp.w	sl, #1
 800b126:	f47f af3d 	bne.w	800afa4 <_scanf_float+0x64>
 800b12a:	f04f 0a02 	mov.w	sl, #2
 800b12e:	e7d0      	b.n	800b0d2 <_scanf_float+0x192>
 800b130:	b97d      	cbnz	r5, 800b152 <_scanf_float+0x212>
 800b132:	f1b9 0f00 	cmp.w	r9, #0
 800b136:	f47f af38 	bne.w	800afaa <_scanf_float+0x6a>
 800b13a:	6822      	ldr	r2, [r4, #0]
 800b13c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b140:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b144:	f040 8101 	bne.w	800b34a <_scanf_float+0x40a>
 800b148:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	2501      	movs	r5, #1
 800b150:	e7bf      	b.n	800b0d2 <_scanf_float+0x192>
 800b152:	2d03      	cmp	r5, #3
 800b154:	d0e2      	beq.n	800b11c <_scanf_float+0x1dc>
 800b156:	2d05      	cmp	r5, #5
 800b158:	e7de      	b.n	800b118 <_scanf_float+0x1d8>
 800b15a:	2d02      	cmp	r5, #2
 800b15c:	f47f af22 	bne.w	800afa4 <_scanf_float+0x64>
 800b160:	2503      	movs	r5, #3
 800b162:	e7b6      	b.n	800b0d2 <_scanf_float+0x192>
 800b164:	2d06      	cmp	r5, #6
 800b166:	f47f af1d 	bne.w	800afa4 <_scanf_float+0x64>
 800b16a:	2507      	movs	r5, #7
 800b16c:	e7b1      	b.n	800b0d2 <_scanf_float+0x192>
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	0591      	lsls	r1, r2, #22
 800b172:	f57f af17 	bpl.w	800afa4 <_scanf_float+0x64>
 800b176:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b17a:	6022      	str	r2, [r4, #0]
 800b17c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b180:	e7a7      	b.n	800b0d2 <_scanf_float+0x192>
 800b182:	6822      	ldr	r2, [r4, #0]
 800b184:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b188:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b18c:	d006      	beq.n	800b19c <_scanf_float+0x25c>
 800b18e:	0550      	lsls	r0, r2, #21
 800b190:	f57f af08 	bpl.w	800afa4 <_scanf_float+0x64>
 800b194:	f1b9 0f00 	cmp.w	r9, #0
 800b198:	f000 80d7 	beq.w	800b34a <_scanf_float+0x40a>
 800b19c:	0591      	lsls	r1, r2, #22
 800b19e:	bf58      	it	pl
 800b1a0:	9902      	ldrpl	r1, [sp, #8]
 800b1a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1a6:	bf58      	it	pl
 800b1a8:	eba9 0101 	subpl.w	r1, r9, r1
 800b1ac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1b0:	bf58      	it	pl
 800b1b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	f04f 0900 	mov.w	r9, #0
 800b1bc:	e789      	b.n	800b0d2 <_scanf_float+0x192>
 800b1be:	f04f 0a03 	mov.w	sl, #3
 800b1c2:	e786      	b.n	800b0d2 <_scanf_float+0x192>
 800b1c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4798      	blx	r3
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f43f aedb 	beq.w	800af8a <_scanf_float+0x4a>
 800b1d4:	e6e6      	b.n	800afa4 <_scanf_float+0x64>
 800b1d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1de:	463a      	mov	r2, r7
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4798      	blx	r3
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	e6e8      	b.n	800afbe <_scanf_float+0x7e>
 800b1ec:	1e6b      	subs	r3, r5, #1
 800b1ee:	2b06      	cmp	r3, #6
 800b1f0:	d824      	bhi.n	800b23c <_scanf_float+0x2fc>
 800b1f2:	2d02      	cmp	r5, #2
 800b1f4:	d836      	bhi.n	800b264 <_scanf_float+0x324>
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	429e      	cmp	r6, r3
 800b1fa:	f67f aee4 	bls.w	800afc6 <_scanf_float+0x86>
 800b1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b206:	463a      	mov	r2, r7
 800b208:	4640      	mov	r0, r8
 800b20a:	4798      	blx	r3
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	3b01      	subs	r3, #1
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	e7f0      	b.n	800b1f6 <_scanf_float+0x2b6>
 800b214:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b218:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b21c:	463a      	mov	r2, r7
 800b21e:	4640      	mov	r0, r8
 800b220:	4798      	blx	r3
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	3b01      	subs	r3, #1
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b22c:	fa5f fa8a 	uxtb.w	sl, sl
 800b230:	f1ba 0f02 	cmp.w	sl, #2
 800b234:	d1ee      	bne.n	800b214 <_scanf_float+0x2d4>
 800b236:	3d03      	subs	r5, #3
 800b238:	b2ed      	uxtb	r5, r5
 800b23a:	1b76      	subs	r6, r6, r5
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	05da      	lsls	r2, r3, #23
 800b240:	d530      	bpl.n	800b2a4 <_scanf_float+0x364>
 800b242:	055b      	lsls	r3, r3, #21
 800b244:	d511      	bpl.n	800b26a <_scanf_float+0x32a>
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	429e      	cmp	r6, r3
 800b24a:	f67f aebc 	bls.w	800afc6 <_scanf_float+0x86>
 800b24e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b256:	463a      	mov	r2, r7
 800b258:	4640      	mov	r0, r8
 800b25a:	4798      	blx	r3
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	3b01      	subs	r3, #1
 800b260:	6123      	str	r3, [r4, #16]
 800b262:	e7f0      	b.n	800b246 <_scanf_float+0x306>
 800b264:	46aa      	mov	sl, r5
 800b266:	46b3      	mov	fp, r6
 800b268:	e7de      	b.n	800b228 <_scanf_float+0x2e8>
 800b26a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	2965      	cmp	r1, #101	@ 0x65
 800b272:	f103 33ff 	add.w	r3, r3, #4294967295
 800b276:	f106 35ff 	add.w	r5, r6, #4294967295
 800b27a:	6123      	str	r3, [r4, #16]
 800b27c:	d00c      	beq.n	800b298 <_scanf_float+0x358>
 800b27e:	2945      	cmp	r1, #69	@ 0x45
 800b280:	d00a      	beq.n	800b298 <_scanf_float+0x358>
 800b282:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b286:	463a      	mov	r2, r7
 800b288:	4640      	mov	r0, r8
 800b28a:	4798      	blx	r3
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b292:	3b01      	subs	r3, #1
 800b294:	1eb5      	subs	r5, r6, #2
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b29c:	463a      	mov	r2, r7
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4798      	blx	r3
 800b2a2:	462e      	mov	r6, r5
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	f012 0210 	ands.w	r2, r2, #16
 800b2aa:	d001      	beq.n	800b2b0 <_scanf_float+0x370>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e68b      	b.n	800afc8 <_scanf_float+0x88>
 800b2b0:	7032      	strb	r2, [r6, #0]
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2bc:	d11a      	bne.n	800b2f4 <_scanf_float+0x3b4>
 800b2be:	9b02      	ldr	r3, [sp, #8]
 800b2c0:	454b      	cmp	r3, r9
 800b2c2:	eba3 0209 	sub.w	r2, r3, r9
 800b2c6:	d121      	bne.n	800b30c <_scanf_float+0x3cc>
 800b2c8:	9901      	ldr	r1, [sp, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	f002 fad5 	bl	800d87c <_strtod_r>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f011 0f02 	tst.w	r1, #2
 800b2dc:	f103 0204 	add.w	r2, r3, #4
 800b2e0:	d01f      	beq.n	800b322 <_scanf_float+0x3e2>
 800b2e2:	9903      	ldr	r1, [sp, #12]
 800b2e4:	600a      	str	r2, [r1, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	ed83 0b00 	vstr	d0, [r3]
 800b2ec:	68e3      	ldr	r3, [r4, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60e3      	str	r3, [r4, #12]
 800b2f2:	e7db      	b.n	800b2ac <_scanf_float+0x36c>
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0e6      	beq.n	800b2c8 <_scanf_float+0x388>
 800b2fa:	9905      	ldr	r1, [sp, #20]
 800b2fc:	230a      	movs	r3, #10
 800b2fe:	3101      	adds	r1, #1
 800b300:	4640      	mov	r0, r8
 800b302:	f002 fb3b 	bl	800d97c <_strtol_r>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	9e05      	ldr	r6, [sp, #20]
 800b30a:	1ac2      	subs	r2, r0, r3
 800b30c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b310:	429e      	cmp	r6, r3
 800b312:	bf28      	it	cs
 800b314:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b318:	490d      	ldr	r1, [pc, #52]	@ (800b350 <_scanf_float+0x410>)
 800b31a:	4630      	mov	r0, r6
 800b31c:	f000 f8f0 	bl	800b500 <siprintf>
 800b320:	e7d2      	b.n	800b2c8 <_scanf_float+0x388>
 800b322:	f011 0f04 	tst.w	r1, #4
 800b326:	9903      	ldr	r1, [sp, #12]
 800b328:	600a      	str	r2, [r1, #0]
 800b32a:	d1dc      	bne.n	800b2e6 <_scanf_float+0x3a6>
 800b32c:	eeb4 0b40 	vcmp.f64	d0, d0
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	d705      	bvc.n	800b344 <_scanf_float+0x404>
 800b338:	4806      	ldr	r0, [pc, #24]	@ (800b354 <_scanf_float+0x414>)
 800b33a:	f000 fa07 	bl	800b74c <nanf>
 800b33e:	ed85 0a00 	vstr	s0, [r5]
 800b342:	e7d3      	b.n	800b2ec <_scanf_float+0x3ac>
 800b344:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b348:	e7f9      	b.n	800b33e <_scanf_float+0x3fe>
 800b34a:	f04f 0900 	mov.w	r9, #0
 800b34e:	e630      	b.n	800afb2 <_scanf_float+0x72>
 800b350:	0800edd3 	.word	0x0800edd3
 800b354:	0800ed9e 	.word	0x0800ed9e

0800b358 <std>:
 800b358:	2300      	movs	r3, #0
 800b35a:	b510      	push	{r4, lr}
 800b35c:	4604      	mov	r4, r0
 800b35e:	e9c0 3300 	strd	r3, r3, [r0]
 800b362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b366:	6083      	str	r3, [r0, #8]
 800b368:	8181      	strh	r1, [r0, #12]
 800b36a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b36c:	81c2      	strh	r2, [r0, #14]
 800b36e:	6183      	str	r3, [r0, #24]
 800b370:	4619      	mov	r1, r3
 800b372:	2208      	movs	r2, #8
 800b374:	305c      	adds	r0, #92	@ 0x5c
 800b376:	f000 f926 	bl	800b5c6 <memset>
 800b37a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b0 <std+0x58>)
 800b37c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b37e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <std+0x5c>)
 800b380:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b382:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <std+0x60>)
 800b384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b386:	4b0d      	ldr	r3, [pc, #52]	@ (800b3bc <std+0x64>)
 800b388:	6323      	str	r3, [r4, #48]	@ 0x30
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <std+0x68>)
 800b38c:	6224      	str	r4, [r4, #32]
 800b38e:	429c      	cmp	r4, r3
 800b390:	d006      	beq.n	800b3a0 <std+0x48>
 800b392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b396:	4294      	cmp	r4, r2
 800b398:	d002      	beq.n	800b3a0 <std+0x48>
 800b39a:	33d0      	adds	r3, #208	@ 0xd0
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d105      	bne.n	800b3ac <std+0x54>
 800b3a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a8:	f000 b9be 	b.w	800b728 <__retarget_lock_init_recursive>
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800b541 	.word	0x0800b541
 800b3b4:	0800b563 	.word	0x0800b563
 800b3b8:	0800b59b 	.word	0x0800b59b
 800b3bc:	0800b5bf 	.word	0x0800b5bf
 800b3c0:	24004d78 	.word	0x24004d78

0800b3c4 <stdio_exit_handler>:
 800b3c4:	4a02      	ldr	r2, [pc, #8]	@ (800b3d0 <stdio_exit_handler+0xc>)
 800b3c6:	4903      	ldr	r1, [pc, #12]	@ (800b3d4 <stdio_exit_handler+0x10>)
 800b3c8:	4803      	ldr	r0, [pc, #12]	@ (800b3d8 <stdio_exit_handler+0x14>)
 800b3ca:	f000 b87b 	b.w	800b4c4 <_fwalk_sglue>
 800b3ce:	bf00      	nop
 800b3d0:	240000bc 	.word	0x240000bc
 800b3d4:	0800dfbd 	.word	0x0800dfbd
 800b3d8:	240000cc 	.word	0x240000cc

0800b3dc <cleanup_stdio>:
 800b3dc:	6841      	ldr	r1, [r0, #4]
 800b3de:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <cleanup_stdio+0x34>)
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	d001      	beq.n	800b3ec <cleanup_stdio+0x10>
 800b3e8:	f002 fde8 	bl	800dfbc <_fflush_r>
 800b3ec:	68a1      	ldr	r1, [r4, #8]
 800b3ee:	4b09      	ldr	r3, [pc, #36]	@ (800b414 <cleanup_stdio+0x38>)
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	d002      	beq.n	800b3fa <cleanup_stdio+0x1e>
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f002 fde1 	bl	800dfbc <_fflush_r>
 800b3fa:	68e1      	ldr	r1, [r4, #12]
 800b3fc:	4b06      	ldr	r3, [pc, #24]	@ (800b418 <cleanup_stdio+0x3c>)
 800b3fe:	4299      	cmp	r1, r3
 800b400:	d004      	beq.n	800b40c <cleanup_stdio+0x30>
 800b402:	4620      	mov	r0, r4
 800b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b408:	f002 bdd8 	b.w	800dfbc <_fflush_r>
 800b40c:	bd10      	pop	{r4, pc}
 800b40e:	bf00      	nop
 800b410:	24004d78 	.word	0x24004d78
 800b414:	24004de0 	.word	0x24004de0
 800b418:	24004e48 	.word	0x24004e48

0800b41c <global_stdio_init.part.0>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	4b0b      	ldr	r3, [pc, #44]	@ (800b44c <global_stdio_init.part.0+0x30>)
 800b420:	4c0b      	ldr	r4, [pc, #44]	@ (800b450 <global_stdio_init.part.0+0x34>)
 800b422:	4a0c      	ldr	r2, [pc, #48]	@ (800b454 <global_stdio_init.part.0+0x38>)
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	4620      	mov	r0, r4
 800b428:	2200      	movs	r2, #0
 800b42a:	2104      	movs	r1, #4
 800b42c:	f7ff ff94 	bl	800b358 <std>
 800b430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b434:	2201      	movs	r2, #1
 800b436:	2109      	movs	r1, #9
 800b438:	f7ff ff8e 	bl	800b358 <std>
 800b43c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b440:	2202      	movs	r2, #2
 800b442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b446:	2112      	movs	r1, #18
 800b448:	f7ff bf86 	b.w	800b358 <std>
 800b44c:	24004eb0 	.word	0x24004eb0
 800b450:	24004d78 	.word	0x24004d78
 800b454:	0800b3c5 	.word	0x0800b3c5

0800b458 <__sfp_lock_acquire>:
 800b458:	4801      	ldr	r0, [pc, #4]	@ (800b460 <__sfp_lock_acquire+0x8>)
 800b45a:	f000 b966 	b.w	800b72a <__retarget_lock_acquire_recursive>
 800b45e:	bf00      	nop
 800b460:	24004eb9 	.word	0x24004eb9

0800b464 <__sfp_lock_release>:
 800b464:	4801      	ldr	r0, [pc, #4]	@ (800b46c <__sfp_lock_release+0x8>)
 800b466:	f000 b961 	b.w	800b72c <__retarget_lock_release_recursive>
 800b46a:	bf00      	nop
 800b46c:	24004eb9 	.word	0x24004eb9

0800b470 <__sinit>:
 800b470:	b510      	push	{r4, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	f7ff fff0 	bl	800b458 <__sfp_lock_acquire>
 800b478:	6a23      	ldr	r3, [r4, #32]
 800b47a:	b11b      	cbz	r3, 800b484 <__sinit+0x14>
 800b47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b480:	f7ff bff0 	b.w	800b464 <__sfp_lock_release>
 800b484:	4b04      	ldr	r3, [pc, #16]	@ (800b498 <__sinit+0x28>)
 800b486:	6223      	str	r3, [r4, #32]
 800b488:	4b04      	ldr	r3, [pc, #16]	@ (800b49c <__sinit+0x2c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1f5      	bne.n	800b47c <__sinit+0xc>
 800b490:	f7ff ffc4 	bl	800b41c <global_stdio_init.part.0>
 800b494:	e7f2      	b.n	800b47c <__sinit+0xc>
 800b496:	bf00      	nop
 800b498:	0800b3dd 	.word	0x0800b3dd
 800b49c:	24004eb0 	.word	0x24004eb0

0800b4a0 <fiprintf>:
 800b4a0:	b40e      	push	{r1, r2, r3}
 800b4a2:	b503      	push	{r0, r1, lr}
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	ab03      	add	r3, sp, #12
 800b4a8:	4805      	ldr	r0, [pc, #20]	@ (800b4c0 <fiprintf+0x20>)
 800b4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ae:	6800      	ldr	r0, [r0, #0]
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	f002 fbe7 	bl	800dc84 <_vfiprintf_r>
 800b4b6:	b002      	add	sp, #8
 800b4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4bc:	b003      	add	sp, #12
 800b4be:	4770      	bx	lr
 800b4c0:	240000c8 	.word	0x240000c8

0800b4c4 <_fwalk_sglue>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	4688      	mov	r8, r1
 800b4cc:	4614      	mov	r4, r2
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4d8:	d505      	bpl.n	800b4e6 <_fwalk_sglue+0x22>
 800b4da:	6824      	ldr	r4, [r4, #0]
 800b4dc:	2c00      	cmp	r4, #0
 800b4de:	d1f7      	bne.n	800b4d0 <_fwalk_sglue+0xc>
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d907      	bls.n	800b4fc <_fwalk_sglue+0x38>
 800b4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	d003      	beq.n	800b4fc <_fwalk_sglue+0x38>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	47c0      	blx	r8
 800b4fa:	4306      	orrs	r6, r0
 800b4fc:	3568      	adds	r5, #104	@ 0x68
 800b4fe:	e7e9      	b.n	800b4d4 <_fwalk_sglue+0x10>

0800b500 <siprintf>:
 800b500:	b40e      	push	{r1, r2, r3}
 800b502:	b500      	push	{lr}
 800b504:	b09c      	sub	sp, #112	@ 0x70
 800b506:	ab1d      	add	r3, sp, #116	@ 0x74
 800b508:	9002      	str	r0, [sp, #8]
 800b50a:	9006      	str	r0, [sp, #24]
 800b50c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b510:	4809      	ldr	r0, [pc, #36]	@ (800b538 <siprintf+0x38>)
 800b512:	9107      	str	r1, [sp, #28]
 800b514:	9104      	str	r1, [sp, #16]
 800b516:	4909      	ldr	r1, [pc, #36]	@ (800b53c <siprintf+0x3c>)
 800b518:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51c:	9105      	str	r1, [sp, #20]
 800b51e:	6800      	ldr	r0, [r0, #0]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	a902      	add	r1, sp, #8
 800b524:	f002 fa88 	bl	800da38 <_svfiprintf_r>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	b01c      	add	sp, #112	@ 0x70
 800b530:	f85d eb04 	ldr.w	lr, [sp], #4
 800b534:	b003      	add	sp, #12
 800b536:	4770      	bx	lr
 800b538:	240000c8 	.word	0x240000c8
 800b53c:	ffff0208 	.word	0xffff0208

0800b540 <__sread>:
 800b540:	b510      	push	{r4, lr}
 800b542:	460c      	mov	r4, r1
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	f000 f890 	bl	800b66c <_read_r>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	bfab      	itete	ge
 800b550:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b552:	89a3      	ldrhlt	r3, [r4, #12]
 800b554:	181b      	addge	r3, r3, r0
 800b556:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b55a:	bfac      	ite	ge
 800b55c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b55e:	81a3      	strhlt	r3, [r4, #12]
 800b560:	bd10      	pop	{r4, pc}

0800b562 <__swrite>:
 800b562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b566:	461f      	mov	r7, r3
 800b568:	898b      	ldrh	r3, [r1, #12]
 800b56a:	05db      	lsls	r3, r3, #23
 800b56c:	4605      	mov	r5, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4616      	mov	r6, r2
 800b572:	d505      	bpl.n	800b580 <__swrite+0x1e>
 800b574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b578:	2302      	movs	r3, #2
 800b57a:	2200      	movs	r2, #0
 800b57c:	f000 f864 	bl	800b648 <_lseek_r>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b58a:	81a3      	strh	r3, [r4, #12]
 800b58c:	4632      	mov	r2, r6
 800b58e:	463b      	mov	r3, r7
 800b590:	4628      	mov	r0, r5
 800b592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	f000 b88b 	b.w	800b6b0 <_write_r>

0800b59a <__sseek>:
 800b59a:	b510      	push	{r4, lr}
 800b59c:	460c      	mov	r4, r1
 800b59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a2:	f000 f851 	bl	800b648 <_lseek_r>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	bf15      	itete	ne
 800b5ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5b6:	81a3      	strheq	r3, [r4, #12]
 800b5b8:	bf18      	it	ne
 800b5ba:	81a3      	strhne	r3, [r4, #12]
 800b5bc:	bd10      	pop	{r4, pc}

0800b5be <__sclose>:
 800b5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c2:	f000 b831 	b.w	800b628 <_close_r>

0800b5c6 <memset>:
 800b5c6:	4402      	add	r2, r0
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d100      	bne.n	800b5d0 <memset+0xa>
 800b5ce:	4770      	bx	lr
 800b5d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d4:	e7f9      	b.n	800b5ca <memset+0x4>

0800b5d6 <strncmp>:
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	b16a      	cbz	r2, 800b5f6 <strncmp+0x20>
 800b5da:	3901      	subs	r1, #1
 800b5dc:	1884      	adds	r4, r0, r2
 800b5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d103      	bne.n	800b5f2 <strncmp+0x1c>
 800b5ea:	42a0      	cmp	r0, r4
 800b5ec:	d001      	beq.n	800b5f2 <strncmp+0x1c>
 800b5ee:	2a00      	cmp	r2, #0
 800b5f0:	d1f5      	bne.n	800b5de <strncmp+0x8>
 800b5f2:	1ad0      	subs	r0, r2, r3
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	e7fc      	b.n	800b5f4 <strncmp+0x1e>

0800b5fa <strncpy>:
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	3901      	subs	r1, #1
 800b5fe:	4603      	mov	r3, r0
 800b600:	b132      	cbz	r2, 800b610 <strncpy+0x16>
 800b602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b606:	f803 4b01 	strb.w	r4, [r3], #1
 800b60a:	3a01      	subs	r2, #1
 800b60c:	2c00      	cmp	r4, #0
 800b60e:	d1f7      	bne.n	800b600 <strncpy+0x6>
 800b610:	441a      	add	r2, r3
 800b612:	2100      	movs	r1, #0
 800b614:	4293      	cmp	r3, r2
 800b616:	d100      	bne.n	800b61a <strncpy+0x20>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	f803 1b01 	strb.w	r1, [r3], #1
 800b61e:	e7f9      	b.n	800b614 <strncpy+0x1a>

0800b620 <_localeconv_r>:
 800b620:	4800      	ldr	r0, [pc, #0]	@ (800b624 <_localeconv_r+0x4>)
 800b622:	4770      	bx	lr
 800b624:	24000208 	.word	0x24000208

0800b628 <_close_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d06      	ldr	r5, [pc, #24]	@ (800b644 <_close_r+0x1c>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f7f5 fe9e 	bl	8001374 <_close>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_close_r+0x1a>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_close_r+0x1a>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	24004eb4 	.word	0x24004eb4

0800b648 <_lseek_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	@ (800b668 <_lseek_r+0x20>)
 800b64c:	4604      	mov	r4, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	2200      	movs	r2, #0
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7f5 feb3 	bl	80013c2 <_lseek>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_lseek_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_lseek_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	24004eb4 	.word	0x24004eb4

0800b66c <_read_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	@ (800b68c <_read_r+0x20>)
 800b670:	4604      	mov	r4, r0
 800b672:	4608      	mov	r0, r1
 800b674:	4611      	mov	r1, r2
 800b676:	2200      	movs	r2, #0
 800b678:	602a      	str	r2, [r5, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f7f5 fe41 	bl	8001302 <_read>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_read_r+0x1e>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_read_r+0x1e>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	24004eb4 	.word	0x24004eb4

0800b690 <_sbrk_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d06      	ldr	r5, [pc, #24]	@ (800b6ac <_sbrk_r+0x1c>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f5 fe9e 	bl	80013dc <_sbrk>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_sbrk_r+0x1a>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_sbrk_r+0x1a>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	24004eb4 	.word	0x24004eb4

0800b6b0 <_write_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	@ (800b6d0 <_write_r+0x20>)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	602a      	str	r2, [r5, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f7f5 fe3c 	bl	800133c <_write>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_write_r+0x1e>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_write_r+0x1e>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	24004eb4 	.word	0x24004eb4

0800b6d4 <__errno>:
 800b6d4:	4b01      	ldr	r3, [pc, #4]	@ (800b6dc <__errno+0x8>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	240000c8 	.word	0x240000c8

0800b6e0 <__libc_init_array>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b718 <__libc_init_array+0x38>)
 800b6e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b71c <__libc_init_array+0x3c>)
 800b6e6:	1b64      	subs	r4, r4, r5
 800b6e8:	10a4      	asrs	r4, r4, #2
 800b6ea:	2600      	movs	r6, #0
 800b6ec:	42a6      	cmp	r6, r4
 800b6ee:	d109      	bne.n	800b704 <__libc_init_array+0x24>
 800b6f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b720 <__libc_init_array+0x40>)
 800b6f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b724 <__libc_init_array+0x44>)
 800b6f4:	f003 f9aa 	bl	800ea4c <_init>
 800b6f8:	1b64      	subs	r4, r4, r5
 800b6fa:	10a4      	asrs	r4, r4, #2
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	42a6      	cmp	r6, r4
 800b700:	d105      	bne.n	800b70e <__libc_init_array+0x2e>
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	f855 3b04 	ldr.w	r3, [r5], #4
 800b708:	4798      	blx	r3
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7ee      	b.n	800b6ec <__libc_init_array+0xc>
 800b70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b712:	4798      	blx	r3
 800b714:	3601      	adds	r6, #1
 800b716:	e7f2      	b.n	800b6fe <__libc_init_array+0x1e>
 800b718:	0800f19c 	.word	0x0800f19c
 800b71c:	0800f19c 	.word	0x0800f19c
 800b720:	0800f19c 	.word	0x0800f19c
 800b724:	0800f1a0 	.word	0x0800f1a0

0800b728 <__retarget_lock_init_recursive>:
 800b728:	4770      	bx	lr

0800b72a <__retarget_lock_acquire_recursive>:
 800b72a:	4770      	bx	lr

0800b72c <__retarget_lock_release_recursive>:
 800b72c:	4770      	bx	lr

0800b72e <memcpy>:
 800b72e:	440a      	add	r2, r1
 800b730:	4291      	cmp	r1, r2
 800b732:	f100 33ff 	add.w	r3, r0, #4294967295
 800b736:	d100      	bne.n	800b73a <memcpy+0xc>
 800b738:	4770      	bx	lr
 800b73a:	b510      	push	{r4, lr}
 800b73c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b740:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b744:	4291      	cmp	r1, r2
 800b746:	d1f9      	bne.n	800b73c <memcpy+0xe>
 800b748:	bd10      	pop	{r4, pc}
	...

0800b74c <nanf>:
 800b74c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b754 <nanf+0x8>
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	7fc00000 	.word	0x7fc00000

0800b758 <abort>:
 800b758:	b508      	push	{r3, lr}
 800b75a:	2006      	movs	r0, #6
 800b75c:	f002 fd2c 	bl	800e1b8 <raise>
 800b760:	2001      	movs	r0, #1
 800b762:	f7f5 fdc3 	bl	80012ec <_exit>

0800b766 <quorem>:
 800b766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	6903      	ldr	r3, [r0, #16]
 800b76c:	690c      	ldr	r4, [r1, #16]
 800b76e:	42a3      	cmp	r3, r4
 800b770:	4607      	mov	r7, r0
 800b772:	db7e      	blt.n	800b872 <quorem+0x10c>
 800b774:	3c01      	subs	r4, #1
 800b776:	f101 0814 	add.w	r8, r1, #20
 800b77a:	00a3      	lsls	r3, r4, #2
 800b77c:	f100 0514 	add.w	r5, r0, #20
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b78c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b790:	3301      	adds	r3, #1
 800b792:	429a      	cmp	r2, r3
 800b794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b798:	fbb2 f6f3 	udiv	r6, r2, r3
 800b79c:	d32e      	bcc.n	800b7fc <quorem+0x96>
 800b79e:	f04f 0a00 	mov.w	sl, #0
 800b7a2:	46c4      	mov	ip, r8
 800b7a4:	46ae      	mov	lr, r5
 800b7a6:	46d3      	mov	fp, sl
 800b7a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7ac:	b298      	uxth	r0, r3
 800b7ae:	fb06 a000 	mla	r0, r6, r0, sl
 800b7b2:	0c02      	lsrs	r2, r0, #16
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	fb06 2303 	mla	r3, r6, r3, r2
 800b7ba:	f8de 2000 	ldr.w	r2, [lr]
 800b7be:	b280      	uxth	r0, r0
 800b7c0:	b292      	uxth	r2, r2
 800b7c2:	1a12      	subs	r2, r2, r0
 800b7c4:	445a      	add	r2, fp
 800b7c6:	f8de 0000 	ldr.w	r0, [lr]
 800b7ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7de:	45e1      	cmp	r9, ip
 800b7e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7e8:	d2de      	bcs.n	800b7a8 <quorem+0x42>
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	58eb      	ldr	r3, [r5, r3]
 800b7ee:	b92b      	cbnz	r3, 800b7fc <quorem+0x96>
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	3b04      	subs	r3, #4
 800b7f4:	429d      	cmp	r5, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	d32f      	bcc.n	800b85a <quorem+0xf4>
 800b7fa:	613c      	str	r4, [r7, #16]
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f001 f89f 	bl	800c940 <__mcmp>
 800b802:	2800      	cmp	r0, #0
 800b804:	db25      	blt.n	800b852 <quorem+0xec>
 800b806:	4629      	mov	r1, r5
 800b808:	2000      	movs	r0, #0
 800b80a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b80e:	f8d1 c000 	ldr.w	ip, [r1]
 800b812:	fa1f fe82 	uxth.w	lr, r2
 800b816:	fa1f f38c 	uxth.w	r3, ip
 800b81a:	eba3 030e 	sub.w	r3, r3, lr
 800b81e:	4403      	add	r3, r0
 800b820:	0c12      	lsrs	r2, r2, #16
 800b822:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b826:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b830:	45c1      	cmp	r9, r8
 800b832:	f841 3b04 	str.w	r3, [r1], #4
 800b836:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b83a:	d2e6      	bcs.n	800b80a <quorem+0xa4>
 800b83c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b840:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b844:	b922      	cbnz	r2, 800b850 <quorem+0xea>
 800b846:	3b04      	subs	r3, #4
 800b848:	429d      	cmp	r5, r3
 800b84a:	461a      	mov	r2, r3
 800b84c:	d30b      	bcc.n	800b866 <quorem+0x100>
 800b84e:	613c      	str	r4, [r7, #16]
 800b850:	3601      	adds	r6, #1
 800b852:	4630      	mov	r0, r6
 800b854:	b003      	add	sp, #12
 800b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85a:	6812      	ldr	r2, [r2, #0]
 800b85c:	3b04      	subs	r3, #4
 800b85e:	2a00      	cmp	r2, #0
 800b860:	d1cb      	bne.n	800b7fa <quorem+0x94>
 800b862:	3c01      	subs	r4, #1
 800b864:	e7c6      	b.n	800b7f4 <quorem+0x8e>
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	3b04      	subs	r3, #4
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	d1ef      	bne.n	800b84e <quorem+0xe8>
 800b86e:	3c01      	subs	r4, #1
 800b870:	e7ea      	b.n	800b848 <quorem+0xe2>
 800b872:	2000      	movs	r0, #0
 800b874:	e7ee      	b.n	800b854 <quorem+0xee>
	...

0800b878 <_dtoa_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	ed2d 8b02 	vpush	{d8}
 800b880:	69c7      	ldr	r7, [r0, #28]
 800b882:	b091      	sub	sp, #68	@ 0x44
 800b884:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b888:	ec55 4b10 	vmov	r4, r5, d0
 800b88c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b88e:	9107      	str	r1, [sp, #28]
 800b890:	4681      	mov	r9, r0
 800b892:	9209      	str	r2, [sp, #36]	@ 0x24
 800b894:	930d      	str	r3, [sp, #52]	@ 0x34
 800b896:	b97f      	cbnz	r7, 800b8b8 <_dtoa_r+0x40>
 800b898:	2010      	movs	r0, #16
 800b89a:	f7fe fe5d 	bl	800a558 <malloc>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f8c9 001c 	str.w	r0, [r9, #28]
 800b8a4:	b920      	cbnz	r0, 800b8b0 <_dtoa_r+0x38>
 800b8a6:	4ba0      	ldr	r3, [pc, #640]	@ (800bb28 <_dtoa_r+0x2b0>)
 800b8a8:	21ef      	movs	r1, #239	@ 0xef
 800b8aa:	48a0      	ldr	r0, [pc, #640]	@ (800bb2c <_dtoa_r+0x2b4>)
 800b8ac:	f7fe fe36 	bl	800a51c <__assert_func>
 800b8b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8b4:	6007      	str	r7, [r0, #0]
 800b8b6:	60c7      	str	r7, [r0, #12]
 800b8b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8bc:	6819      	ldr	r1, [r3, #0]
 800b8be:	b159      	cbz	r1, 800b8d8 <_dtoa_r+0x60>
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	604a      	str	r2, [r1, #4]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	4093      	lsls	r3, r2
 800b8c8:	608b      	str	r3, [r1, #8]
 800b8ca:	4648      	mov	r0, r9
 800b8cc:	f000 fdb4 	bl	800c438 <_Bfree>
 800b8d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	1e2b      	subs	r3, r5, #0
 800b8da:	bfbb      	ittet	lt
 800b8dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8e0:	9303      	strlt	r3, [sp, #12]
 800b8e2:	2300      	movge	r3, #0
 800b8e4:	2201      	movlt	r2, #1
 800b8e6:	bfac      	ite	ge
 800b8e8:	6033      	strge	r3, [r6, #0]
 800b8ea:	6032      	strlt	r2, [r6, #0]
 800b8ec:	4b90      	ldr	r3, [pc, #576]	@ (800bb30 <_dtoa_r+0x2b8>)
 800b8ee:	9e03      	ldr	r6, [sp, #12]
 800b8f0:	43b3      	bics	r3, r6
 800b8f2:	d110      	bne.n	800b916 <_dtoa_r+0x9e>
 800b8f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b900:	4323      	orrs	r3, r4
 800b902:	f000 84de 	beq.w	800c2c2 <_dtoa_r+0xa4a>
 800b906:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b908:	4f8a      	ldr	r7, [pc, #552]	@ (800bb34 <_dtoa_r+0x2bc>)
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 84e0 	beq.w	800c2d0 <_dtoa_r+0xa58>
 800b910:	1cfb      	adds	r3, r7, #3
 800b912:	f000 bcdb 	b.w	800c2cc <_dtoa_r+0xa54>
 800b916:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b91a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	d10a      	bne.n	800b93a <_dtoa_r+0xc2>
 800b924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b926:	2301      	movs	r3, #1
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b92c:	b113      	cbz	r3, 800b934 <_dtoa_r+0xbc>
 800b92e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b930:	4b81      	ldr	r3, [pc, #516]	@ (800bb38 <_dtoa_r+0x2c0>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	4f81      	ldr	r7, [pc, #516]	@ (800bb3c <_dtoa_r+0x2c4>)
 800b936:	f000 bccb 	b.w	800c2d0 <_dtoa_r+0xa58>
 800b93a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b93c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b93e:	4648      	mov	r0, r9
 800b940:	eeb0 0b48 	vmov.f64	d0, d8
 800b944:	f001 f91c 	bl	800cb80 <__d2b>
 800b948:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b94c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b94e:	9001      	str	r0, [sp, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d045      	beq.n	800b9e0 <_dtoa_r+0x168>
 800b954:	eeb0 7b48 	vmov.f64	d7, d8
 800b958:	ee18 1a90 	vmov	r1, s17
 800b95c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b960:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b964:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b968:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b96c:	2500      	movs	r5, #0
 800b96e:	ee07 1a90 	vmov	s15, r1
 800b972:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b976:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb10 <_dtoa_r+0x298>
 800b97a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b97e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bb18 <_dtoa_r+0x2a0>
 800b982:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b986:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb20 <_dtoa_r+0x2a8>
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b992:	eeb0 7b46 	vmov.f64	d7, d6
 800b996:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b99a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b99e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a6:	ee16 8a90 	vmov	r8, s13
 800b9aa:	d508      	bpl.n	800b9be <_dtoa_r+0x146>
 800b9ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b9b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b8:	bf18      	it	ne
 800b9ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b9be:	f1b8 0f16 	cmp.w	r8, #22
 800b9c2:	d82b      	bhi.n	800ba1c <_dtoa_r+0x1a4>
 800b9c4:	495e      	ldr	r1, [pc, #376]	@ (800bb40 <_dtoa_r+0x2c8>)
 800b9c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b9ca:	ed91 7b00 	vldr	d7, [r1]
 800b9ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d6:	d501      	bpl.n	800b9dc <_dtoa_r+0x164>
 800b9d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9dc:	2100      	movs	r1, #0
 800b9de:	e01e      	b.n	800ba1e <_dtoa_r+0x1a6>
 800b9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b9e8:	2920      	cmp	r1, #32
 800b9ea:	bfc1      	itttt	gt
 800b9ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b9f0:	408e      	lslgt	r6, r1
 800b9f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b9f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b9fa:	bfd6      	itet	le
 800b9fc:	f1c1 0120 	rsble	r1, r1, #32
 800ba00:	4331      	orrgt	r1, r6
 800ba02:	fa04 f101 	lslle.w	r1, r4, r1
 800ba06:	ee07 1a90 	vmov	s15, r1
 800ba0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	ee17 1a90 	vmov	r1, s15
 800ba14:	2501      	movs	r5, #1
 800ba16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ba1a:	e7a8      	b.n	800b96e <_dtoa_r+0xf6>
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	1e53      	subs	r3, r2, #1
 800ba22:	9306      	str	r3, [sp, #24]
 800ba24:	bf45      	ittet	mi
 800ba26:	f1c2 0301 	rsbmi	r3, r2, #1
 800ba2a:	9305      	strmi	r3, [sp, #20]
 800ba2c:	2300      	movpl	r3, #0
 800ba2e:	2300      	movmi	r3, #0
 800ba30:	bf4c      	ite	mi
 800ba32:	9306      	strmi	r3, [sp, #24]
 800ba34:	9305      	strpl	r3, [sp, #20]
 800ba36:	f1b8 0f00 	cmp.w	r8, #0
 800ba3a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ba3c:	db18      	blt.n	800ba70 <_dtoa_r+0x1f8>
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba44:	4443      	add	r3, r8
 800ba46:	9306      	str	r3, [sp, #24]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9a07      	ldr	r2, [sp, #28]
 800ba4c:	2a09      	cmp	r2, #9
 800ba4e:	d849      	bhi.n	800bae4 <_dtoa_r+0x26c>
 800ba50:	2a05      	cmp	r2, #5
 800ba52:	bfc4      	itt	gt
 800ba54:	3a04      	subgt	r2, #4
 800ba56:	9207      	strgt	r2, [sp, #28]
 800ba58:	9a07      	ldr	r2, [sp, #28]
 800ba5a:	f1a2 0202 	sub.w	r2, r2, #2
 800ba5e:	bfcc      	ite	gt
 800ba60:	2400      	movgt	r4, #0
 800ba62:	2401      	movle	r4, #1
 800ba64:	2a03      	cmp	r2, #3
 800ba66:	d848      	bhi.n	800bafa <_dtoa_r+0x282>
 800ba68:	e8df f002 	tbb	[pc, r2]
 800ba6c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	2200      	movs	r2, #0
 800ba74:	eba3 0308 	sub.w	r3, r3, r8
 800ba78:	9305      	str	r3, [sp, #20]
 800ba7a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba7c:	f1c8 0300 	rsb	r3, r8, #0
 800ba80:	e7e3      	b.n	800ba4a <_dtoa_r+0x1d2>
 800ba82:	2200      	movs	r2, #0
 800ba84:	9208      	str	r2, [sp, #32]
 800ba86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	dc39      	bgt.n	800bb00 <_dtoa_r+0x288>
 800ba8c:	f04f 0b01 	mov.w	fp, #1
 800ba90:	46da      	mov	sl, fp
 800ba92:	465a      	mov	r2, fp
 800ba94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ba98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	2004      	movs	r0, #4
 800baa0:	f100 0614 	add.w	r6, r0, #20
 800baa4:	4296      	cmp	r6, r2
 800baa6:	d930      	bls.n	800bb0a <_dtoa_r+0x292>
 800baa8:	6079      	str	r1, [r7, #4]
 800baaa:	4648      	mov	r0, r9
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	f000 fc83 	bl	800c3b8 <_Balloc>
 800bab2:	9b04      	ldr	r3, [sp, #16]
 800bab4:	4607      	mov	r7, r0
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d146      	bne.n	800bb48 <_dtoa_r+0x2d0>
 800baba:	4b22      	ldr	r3, [pc, #136]	@ (800bb44 <_dtoa_r+0x2cc>)
 800babc:	4602      	mov	r2, r0
 800babe:	f240 11af 	movw	r1, #431	@ 0x1af
 800bac2:	e6f2      	b.n	800b8aa <_dtoa_r+0x32>
 800bac4:	2201      	movs	r2, #1
 800bac6:	e7dd      	b.n	800ba84 <_dtoa_r+0x20c>
 800bac8:	2200      	movs	r2, #0
 800baca:	9208      	str	r2, [sp, #32]
 800bacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bace:	eb08 0b02 	add.w	fp, r8, r2
 800bad2:	f10b 0a01 	add.w	sl, fp, #1
 800bad6:	4652      	mov	r2, sl
 800bad8:	2a01      	cmp	r2, #1
 800bada:	bfb8      	it	lt
 800badc:	2201      	movlt	r2, #1
 800bade:	e7db      	b.n	800ba98 <_dtoa_r+0x220>
 800bae0:	2201      	movs	r2, #1
 800bae2:	e7f2      	b.n	800baca <_dtoa_r+0x252>
 800bae4:	2401      	movs	r4, #1
 800bae6:	2200      	movs	r2, #0
 800bae8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800baec:	f04f 3bff 	mov.w	fp, #4294967295
 800baf0:	2100      	movs	r1, #0
 800baf2:	46da      	mov	sl, fp
 800baf4:	2212      	movs	r2, #18
 800baf6:	9109      	str	r1, [sp, #36]	@ 0x24
 800baf8:	e7ce      	b.n	800ba98 <_dtoa_r+0x220>
 800bafa:	2201      	movs	r2, #1
 800bafc:	9208      	str	r2, [sp, #32]
 800bafe:	e7f5      	b.n	800baec <_dtoa_r+0x274>
 800bb00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bb04:	46da      	mov	sl, fp
 800bb06:	465a      	mov	r2, fp
 800bb08:	e7c6      	b.n	800ba98 <_dtoa_r+0x220>
 800bb0a:	3101      	adds	r1, #1
 800bb0c:	0040      	lsls	r0, r0, #1
 800bb0e:	e7c7      	b.n	800baa0 <_dtoa_r+0x228>
 800bb10:	636f4361 	.word	0x636f4361
 800bb14:	3fd287a7 	.word	0x3fd287a7
 800bb18:	8b60c8b3 	.word	0x8b60c8b3
 800bb1c:	3fc68a28 	.word	0x3fc68a28
 800bb20:	509f79fb 	.word	0x509f79fb
 800bb24:	3fd34413 	.word	0x3fd34413
 800bb28:	0800ede5 	.word	0x0800ede5
 800bb2c:	0800edfc 	.word	0x0800edfc
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	0800ede1 	.word	0x0800ede1
 800bb38:	0800edb0 	.word	0x0800edb0
 800bb3c:	0800edaf 	.word	0x0800edaf
 800bb40:	0800eef8 	.word	0x0800eef8
 800bb44:	0800ee54 	.word	0x0800ee54
 800bb48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bb4c:	f1ba 0f0e 	cmp.w	sl, #14
 800bb50:	6010      	str	r0, [r2, #0]
 800bb52:	d86f      	bhi.n	800bc34 <_dtoa_r+0x3bc>
 800bb54:	2c00      	cmp	r4, #0
 800bb56:	d06d      	beq.n	800bc34 <_dtoa_r+0x3bc>
 800bb58:	f1b8 0f00 	cmp.w	r8, #0
 800bb5c:	f340 80c2 	ble.w	800bce4 <_dtoa_r+0x46c>
 800bb60:	4aca      	ldr	r2, [pc, #808]	@ (800be8c <_dtoa_r+0x614>)
 800bb62:	f008 010f 	and.w	r1, r8, #15
 800bb66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bb6e:	ed92 7b00 	vldr	d7, [r2]
 800bb72:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bb76:	f000 80a9 	beq.w	800bccc <_dtoa_r+0x454>
 800bb7a:	4ac5      	ldr	r2, [pc, #788]	@ (800be90 <_dtoa_r+0x618>)
 800bb7c:	ed92 6b08 	vldr	d6, [r2, #32]
 800bb80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bb84:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bb88:	f001 010f 	and.w	r1, r1, #15
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	48c0      	ldr	r0, [pc, #768]	@ (800be90 <_dtoa_r+0x618>)
 800bb90:	2900      	cmp	r1, #0
 800bb92:	f040 809d 	bne.w	800bcd0 <_dtoa_r+0x458>
 800bb96:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bba2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bba4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	f000 80c1 	beq.w	800bd30 <_dtoa_r+0x4b8>
 800bbae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bbb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	f140 80b9 	bpl.w	800bd30 <_dtoa_r+0x4b8>
 800bbbe:	f1ba 0f00 	cmp.w	sl, #0
 800bbc2:	f000 80b5 	beq.w	800bd30 <_dtoa_r+0x4b8>
 800bbc6:	f1bb 0f00 	cmp.w	fp, #0
 800bbca:	dd31      	ble.n	800bc30 <_dtoa_r+0x3b8>
 800bbcc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bbd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbd8:	f108 31ff 	add.w	r1, r8, #4294967295
 800bbdc:	9104      	str	r1, [sp, #16]
 800bbde:	3201      	adds	r2, #1
 800bbe0:	465c      	mov	r4, fp
 800bbe2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbe6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bbea:	ee07 2a90 	vmov	s15, r2
 800bbee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bbf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bbf6:	ee15 2a90 	vmov	r2, s11
 800bbfa:	ec51 0b15 	vmov	r0, r1, d5
 800bbfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bc02:	2c00      	cmp	r4, #0
 800bc04:	f040 8098 	bne.w	800bd38 <_dtoa_r+0x4c0>
 800bc08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bc0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc10:	ec41 0b17 	vmov	d7, r0, r1
 800bc14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1c:	f300 8261 	bgt.w	800c0e2 <_dtoa_r+0x86a>
 800bc20:	eeb1 7b47 	vneg.f64	d7, d7
 800bc24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2c:	f100 80f5 	bmi.w	800be1a <_dtoa_r+0x5a2>
 800bc30:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	f2c0 812c 	blt.w	800be94 <_dtoa_r+0x61c>
 800bc3c:	f1b8 0f0e 	cmp.w	r8, #14
 800bc40:	f300 8128 	bgt.w	800be94 <_dtoa_r+0x61c>
 800bc44:	4b91      	ldr	r3, [pc, #580]	@ (800be8c <_dtoa_r+0x614>)
 800bc46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc4a:	ed93 6b00 	vldr	d6, [r3]
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da03      	bge.n	800bc5c <_dtoa_r+0x3e4>
 800bc54:	f1ba 0f00 	cmp.w	sl, #0
 800bc58:	f340 80d2 	ble.w	800be00 <_dtoa_r+0x588>
 800bc5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bc60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc64:	463e      	mov	r6, r7
 800bc66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc6e:	ee15 3a10 	vmov	r3, s10
 800bc72:	3330      	adds	r3, #48	@ 0x30
 800bc74:	f806 3b01 	strb.w	r3, [r6], #1
 800bc78:	1bf3      	subs	r3, r6, r7
 800bc7a:	459a      	cmp	sl, r3
 800bc7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc80:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc84:	f040 80f8 	bne.w	800be78 <_dtoa_r+0x600>
 800bc88:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	f300 80dd 	bgt.w	800be52 <_dtoa_r+0x5da>
 800bc98:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca0:	d104      	bne.n	800bcac <_dtoa_r+0x434>
 800bca2:	ee15 3a10 	vmov	r3, s10
 800bca6:	07db      	lsls	r3, r3, #31
 800bca8:	f100 80d3 	bmi.w	800be52 <_dtoa_r+0x5da>
 800bcac:	9901      	ldr	r1, [sp, #4]
 800bcae:	4648      	mov	r0, r9
 800bcb0:	f000 fbc2 	bl	800c438 <_Bfree>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcb8:	7033      	strb	r3, [r6, #0]
 800bcba:	f108 0301 	add.w	r3, r8, #1
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8304 	beq.w	800c2d0 <_dtoa_r+0xa58>
 800bcc8:	601e      	str	r6, [r3, #0]
 800bcca:	e301      	b.n	800c2d0 <_dtoa_r+0xa58>
 800bccc:	2202      	movs	r2, #2
 800bcce:	e75e      	b.n	800bb8e <_dtoa_r+0x316>
 800bcd0:	07cc      	lsls	r4, r1, #31
 800bcd2:	d504      	bpl.n	800bcde <_dtoa_r+0x466>
 800bcd4:	ed90 6b00 	vldr	d6, [r0]
 800bcd8:	3201      	adds	r2, #1
 800bcda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcde:	1049      	asrs	r1, r1, #1
 800bce0:	3008      	adds	r0, #8
 800bce2:	e755      	b.n	800bb90 <_dtoa_r+0x318>
 800bce4:	d022      	beq.n	800bd2c <_dtoa_r+0x4b4>
 800bce6:	f1c8 0100 	rsb	r1, r8, #0
 800bcea:	4a68      	ldr	r2, [pc, #416]	@ (800be8c <_dtoa_r+0x614>)
 800bcec:	f001 000f 	and.w	r0, r1, #15
 800bcf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bcf4:	ed92 7b00 	vldr	d7, [r2]
 800bcf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bcfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd00:	4863      	ldr	r0, [pc, #396]	@ (800be90 <_dtoa_r+0x618>)
 800bd02:	1109      	asrs	r1, r1, #4
 800bd04:	2400      	movs	r4, #0
 800bd06:	2202      	movs	r2, #2
 800bd08:	b929      	cbnz	r1, 800bd16 <_dtoa_r+0x49e>
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	f43f af49 	beq.w	800bba2 <_dtoa_r+0x32a>
 800bd10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd14:	e745      	b.n	800bba2 <_dtoa_r+0x32a>
 800bd16:	07ce      	lsls	r6, r1, #31
 800bd18:	d505      	bpl.n	800bd26 <_dtoa_r+0x4ae>
 800bd1a:	ed90 6b00 	vldr	d6, [r0]
 800bd1e:	3201      	adds	r2, #1
 800bd20:	2401      	movs	r4, #1
 800bd22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd26:	1049      	asrs	r1, r1, #1
 800bd28:	3008      	adds	r0, #8
 800bd2a:	e7ed      	b.n	800bd08 <_dtoa_r+0x490>
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	e738      	b.n	800bba2 <_dtoa_r+0x32a>
 800bd30:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd34:	4654      	mov	r4, sl
 800bd36:	e754      	b.n	800bbe2 <_dtoa_r+0x36a>
 800bd38:	4a54      	ldr	r2, [pc, #336]	@ (800be8c <_dtoa_r+0x614>)
 800bd3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bd3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bd42:	9a08      	ldr	r2, [sp, #32]
 800bd44:	ec41 0b17 	vmov	d7, r0, r1
 800bd48:	443c      	add	r4, r7
 800bd4a:	b34a      	cbz	r2, 800bda0 <_dtoa_r+0x528>
 800bd4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bd50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bd54:	463e      	mov	r6, r7
 800bd56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bd5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bd5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd66:	ee14 2a90 	vmov	r2, s9
 800bd6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd6e:	3230      	adds	r2, #48	@ 0x30
 800bd70:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7c:	f806 2b01 	strb.w	r2, [r6], #1
 800bd80:	d438      	bmi.n	800bdf4 <_dtoa_r+0x57c>
 800bd82:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bd86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8e:	d462      	bmi.n	800be56 <_dtoa_r+0x5de>
 800bd90:	42a6      	cmp	r6, r4
 800bd92:	f43f af4d 	beq.w	800bc30 <_dtoa_r+0x3b8>
 800bd96:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bd9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd9e:	e7e0      	b.n	800bd62 <_dtoa_r+0x4ea>
 800bda0:	4621      	mov	r1, r4
 800bda2:	463e      	mov	r6, r7
 800bda4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bda8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bdac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bdb0:	ee14 2a90 	vmov	r2, s9
 800bdb4:	3230      	adds	r2, #48	@ 0x30
 800bdb6:	f806 2b01 	strb.w	r2, [r6], #1
 800bdba:	42a6      	cmp	r6, r4
 800bdbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bdc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bdc4:	d119      	bne.n	800bdfa <_dtoa_r+0x582>
 800bdc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bdca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bdce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd6:	dc3e      	bgt.n	800be56 <_dtoa_r+0x5de>
 800bdd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bddc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	f57f af24 	bpl.w	800bc30 <_dtoa_r+0x3b8>
 800bde8:	460e      	mov	r6, r1
 800bdea:	3901      	subs	r1, #1
 800bdec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdf0:	2b30      	cmp	r3, #48	@ 0x30
 800bdf2:	d0f9      	beq.n	800bde8 <_dtoa_r+0x570>
 800bdf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bdf8:	e758      	b.n	800bcac <_dtoa_r+0x434>
 800bdfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bdfe:	e7d5      	b.n	800bdac <_dtoa_r+0x534>
 800be00:	d10b      	bne.n	800be1a <_dtoa_r+0x5a2>
 800be02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be06:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be16:	f2c0 8161 	blt.w	800c0dc <_dtoa_r+0x864>
 800be1a:	2400      	movs	r4, #0
 800be1c:	4625      	mov	r5, r4
 800be1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be20:	43db      	mvns	r3, r3
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	463e      	mov	r6, r7
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	4621      	mov	r1, r4
 800be2c:	4648      	mov	r0, r9
 800be2e:	f000 fb03 	bl	800c438 <_Bfree>
 800be32:	2d00      	cmp	r5, #0
 800be34:	d0de      	beq.n	800bdf4 <_dtoa_r+0x57c>
 800be36:	f1b8 0f00 	cmp.w	r8, #0
 800be3a:	d005      	beq.n	800be48 <_dtoa_r+0x5d0>
 800be3c:	45a8      	cmp	r8, r5
 800be3e:	d003      	beq.n	800be48 <_dtoa_r+0x5d0>
 800be40:	4641      	mov	r1, r8
 800be42:	4648      	mov	r0, r9
 800be44:	f000 faf8 	bl	800c438 <_Bfree>
 800be48:	4629      	mov	r1, r5
 800be4a:	4648      	mov	r0, r9
 800be4c:	f000 faf4 	bl	800c438 <_Bfree>
 800be50:	e7d0      	b.n	800bdf4 <_dtoa_r+0x57c>
 800be52:	f8cd 8010 	str.w	r8, [sp, #16]
 800be56:	4633      	mov	r3, r6
 800be58:	461e      	mov	r6, r3
 800be5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be5e:	2a39      	cmp	r2, #57	@ 0x39
 800be60:	d106      	bne.n	800be70 <_dtoa_r+0x5f8>
 800be62:	429f      	cmp	r7, r3
 800be64:	d1f8      	bne.n	800be58 <_dtoa_r+0x5e0>
 800be66:	9a04      	ldr	r2, [sp, #16]
 800be68:	3201      	adds	r2, #1
 800be6a:	9204      	str	r2, [sp, #16]
 800be6c:	2230      	movs	r2, #48	@ 0x30
 800be6e:	703a      	strb	r2, [r7, #0]
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	3201      	adds	r2, #1
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	e7bd      	b.n	800bdf4 <_dtoa_r+0x57c>
 800be78:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be84:	f47f aeef 	bne.w	800bc66 <_dtoa_r+0x3ee>
 800be88:	e710      	b.n	800bcac <_dtoa_r+0x434>
 800be8a:	bf00      	nop
 800be8c:	0800eef8 	.word	0x0800eef8
 800be90:	0800eed0 	.word	0x0800eed0
 800be94:	9908      	ldr	r1, [sp, #32]
 800be96:	2900      	cmp	r1, #0
 800be98:	f000 80e3 	beq.w	800c062 <_dtoa_r+0x7ea>
 800be9c:	9907      	ldr	r1, [sp, #28]
 800be9e:	2901      	cmp	r1, #1
 800bea0:	f300 80c8 	bgt.w	800c034 <_dtoa_r+0x7bc>
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	f000 80c1 	beq.w	800c02c <_dtoa_r+0x7b4>
 800beaa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800beae:	9e05      	ldr	r6, [sp, #20]
 800beb0:	461c      	mov	r4, r3
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	9b05      	ldr	r3, [sp, #20]
 800beb6:	4413      	add	r3, r2
 800beb8:	9305      	str	r3, [sp, #20]
 800beba:	9b06      	ldr	r3, [sp, #24]
 800bebc:	2101      	movs	r1, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	4648      	mov	r0, r9
 800bec2:	9306      	str	r3, [sp, #24]
 800bec4:	f000 fbb6 	bl	800c634 <__i2b>
 800bec8:	9b04      	ldr	r3, [sp, #16]
 800beca:	4605      	mov	r5, r0
 800becc:	b166      	cbz	r6, 800bee8 <_dtoa_r+0x670>
 800bece:	9a06      	ldr	r2, [sp, #24]
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	dd09      	ble.n	800bee8 <_dtoa_r+0x670>
 800bed4:	42b2      	cmp	r2, r6
 800bed6:	9905      	ldr	r1, [sp, #20]
 800bed8:	bfa8      	it	ge
 800beda:	4632      	movge	r2, r6
 800bedc:	1a89      	subs	r1, r1, r2
 800bede:	9105      	str	r1, [sp, #20]
 800bee0:	9906      	ldr	r1, [sp, #24]
 800bee2:	1ab6      	subs	r6, r6, r2
 800bee4:	1a8a      	subs	r2, r1, r2
 800bee6:	9206      	str	r2, [sp, #24]
 800bee8:	b1fb      	cbz	r3, 800bf2a <_dtoa_r+0x6b2>
 800beea:	9a08      	ldr	r2, [sp, #32]
 800beec:	2a00      	cmp	r2, #0
 800beee:	f000 80bc 	beq.w	800c06a <_dtoa_r+0x7f2>
 800bef2:	b19c      	cbz	r4, 800bf1c <_dtoa_r+0x6a4>
 800bef4:	4629      	mov	r1, r5
 800bef6:	4622      	mov	r2, r4
 800bef8:	4648      	mov	r0, r9
 800befa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800befc:	f000 fc5a 	bl	800c7b4 <__pow5mult>
 800bf00:	9a01      	ldr	r2, [sp, #4]
 800bf02:	4601      	mov	r1, r0
 800bf04:	4605      	mov	r5, r0
 800bf06:	4648      	mov	r0, r9
 800bf08:	f000 fbaa 	bl	800c660 <__multiply>
 800bf0c:	9901      	ldr	r1, [sp, #4]
 800bf0e:	9004      	str	r0, [sp, #16]
 800bf10:	4648      	mov	r0, r9
 800bf12:	f000 fa91 	bl	800c438 <_Bfree>
 800bf16:	9a04      	ldr	r2, [sp, #16]
 800bf18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf1a:	9201      	str	r2, [sp, #4]
 800bf1c:	1b1a      	subs	r2, r3, r4
 800bf1e:	d004      	beq.n	800bf2a <_dtoa_r+0x6b2>
 800bf20:	9901      	ldr	r1, [sp, #4]
 800bf22:	4648      	mov	r0, r9
 800bf24:	f000 fc46 	bl	800c7b4 <__pow5mult>
 800bf28:	9001      	str	r0, [sp, #4]
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4648      	mov	r0, r9
 800bf2e:	f000 fb81 	bl	800c634 <__i2b>
 800bf32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf34:	4604      	mov	r4, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 81d0 	beq.w	800c2dc <_dtoa_r+0xa64>
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	4601      	mov	r1, r0
 800bf40:	4648      	mov	r0, r9
 800bf42:	f000 fc37 	bl	800c7b4 <__pow5mult>
 800bf46:	9b07      	ldr	r3, [sp, #28]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	f300 8095 	bgt.w	800c07a <_dtoa_r+0x802>
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f040 808b 	bne.w	800c06e <_dtoa_r+0x7f6>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	f040 8087 	bne.w	800c072 <_dtoa_r+0x7fa>
 800bf64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf68:	0d12      	lsrs	r2, r2, #20
 800bf6a:	0512      	lsls	r2, r2, #20
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	f000 8082 	beq.w	800c076 <_dtoa_r+0x7fe>
 800bf72:	9b05      	ldr	r3, [sp, #20]
 800bf74:	3301      	adds	r3, #1
 800bf76:	9305      	str	r3, [sp, #20]
 800bf78:	9b06      	ldr	r3, [sp, #24]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	9306      	str	r3, [sp, #24]
 800bf7e:	2301      	movs	r3, #1
 800bf80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 81af 	beq.w	800c2e8 <_dtoa_r+0xa70>
 800bf8a:	6922      	ldr	r2, [r4, #16]
 800bf8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf90:	6910      	ldr	r0, [r2, #16]
 800bf92:	f000 fb03 	bl	800c59c <__hi0bits>
 800bf96:	f1c0 0020 	rsb	r0, r0, #32
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	4418      	add	r0, r3
 800bf9e:	f010 001f 	ands.w	r0, r0, #31
 800bfa2:	d076      	beq.n	800c092 <_dtoa_r+0x81a>
 800bfa4:	f1c0 0220 	rsb	r2, r0, #32
 800bfa8:	2a04      	cmp	r2, #4
 800bfaa:	dd69      	ble.n	800c080 <_dtoa_r+0x808>
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	f1c0 001c 	rsb	r0, r0, #28
 800bfb2:	4403      	add	r3, r0
 800bfb4:	9305      	str	r3, [sp, #20]
 800bfb6:	9b06      	ldr	r3, [sp, #24]
 800bfb8:	4406      	add	r6, r0
 800bfba:	4403      	add	r3, r0
 800bfbc:	9306      	str	r3, [sp, #24]
 800bfbe:	9b05      	ldr	r3, [sp, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dd05      	ble.n	800bfd0 <_dtoa_r+0x758>
 800bfc4:	9901      	ldr	r1, [sp, #4]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	4648      	mov	r0, r9
 800bfca:	f000 fc4d 	bl	800c868 <__lshift>
 800bfce:	9001      	str	r0, [sp, #4]
 800bfd0:	9b06      	ldr	r3, [sp, #24]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd05      	ble.n	800bfe2 <_dtoa_r+0x76a>
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	461a      	mov	r2, r3
 800bfda:	4648      	mov	r0, r9
 800bfdc:	f000 fc44 	bl	800c868 <__lshift>
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d056      	beq.n	800c096 <_dtoa_r+0x81e>
 800bfe8:	9801      	ldr	r0, [sp, #4]
 800bfea:	4621      	mov	r1, r4
 800bfec:	f000 fca8 	bl	800c940 <__mcmp>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	da50      	bge.n	800c096 <_dtoa_r+0x81e>
 800bff4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	9901      	ldr	r1, [sp, #4]
 800bffc:	2300      	movs	r3, #0
 800bffe:	220a      	movs	r2, #10
 800c000:	4648      	mov	r0, r9
 800c002:	f000 fa3b 	bl	800c47c <__multadd>
 800c006:	9b08      	ldr	r3, [sp, #32]
 800c008:	9001      	str	r0, [sp, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 816e 	beq.w	800c2ec <_dtoa_r+0xa74>
 800c010:	4629      	mov	r1, r5
 800c012:	2300      	movs	r3, #0
 800c014:	220a      	movs	r2, #10
 800c016:	4648      	mov	r0, r9
 800c018:	f000 fa30 	bl	800c47c <__multadd>
 800c01c:	f1bb 0f00 	cmp.w	fp, #0
 800c020:	4605      	mov	r5, r0
 800c022:	dc64      	bgt.n	800c0ee <_dtoa_r+0x876>
 800c024:	9b07      	ldr	r3, [sp, #28]
 800c026:	2b02      	cmp	r3, #2
 800c028:	dc3e      	bgt.n	800c0a8 <_dtoa_r+0x830>
 800c02a:	e060      	b.n	800c0ee <_dtoa_r+0x876>
 800c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c02e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c032:	e73c      	b.n	800beae <_dtoa_r+0x636>
 800c034:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c038:	42a3      	cmp	r3, r4
 800c03a:	bfbf      	itttt	lt
 800c03c:	1ae2      	sublt	r2, r4, r3
 800c03e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c040:	189b      	addlt	r3, r3, r2
 800c042:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c044:	bfae      	itee	ge
 800c046:	1b1c      	subge	r4, r3, r4
 800c048:	4623      	movlt	r3, r4
 800c04a:	2400      	movlt	r4, #0
 800c04c:	f1ba 0f00 	cmp.w	sl, #0
 800c050:	bfb5      	itete	lt
 800c052:	9a05      	ldrlt	r2, [sp, #20]
 800c054:	9e05      	ldrge	r6, [sp, #20]
 800c056:	eba2 060a 	sublt.w	r6, r2, sl
 800c05a:	4652      	movge	r2, sl
 800c05c:	bfb8      	it	lt
 800c05e:	2200      	movlt	r2, #0
 800c060:	e727      	b.n	800beb2 <_dtoa_r+0x63a>
 800c062:	9e05      	ldr	r6, [sp, #20]
 800c064:	9d08      	ldr	r5, [sp, #32]
 800c066:	461c      	mov	r4, r3
 800c068:	e730      	b.n	800becc <_dtoa_r+0x654>
 800c06a:	461a      	mov	r2, r3
 800c06c:	e758      	b.n	800bf20 <_dtoa_r+0x6a8>
 800c06e:	2300      	movs	r3, #0
 800c070:	e786      	b.n	800bf80 <_dtoa_r+0x708>
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	e784      	b.n	800bf80 <_dtoa_r+0x708>
 800c076:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c078:	e783      	b.n	800bf82 <_dtoa_r+0x70a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c07e:	e784      	b.n	800bf8a <_dtoa_r+0x712>
 800c080:	d09d      	beq.n	800bfbe <_dtoa_r+0x746>
 800c082:	9b05      	ldr	r3, [sp, #20]
 800c084:	321c      	adds	r2, #28
 800c086:	4413      	add	r3, r2
 800c088:	9305      	str	r3, [sp, #20]
 800c08a:	9b06      	ldr	r3, [sp, #24]
 800c08c:	4416      	add	r6, r2
 800c08e:	4413      	add	r3, r2
 800c090:	e794      	b.n	800bfbc <_dtoa_r+0x744>
 800c092:	4602      	mov	r2, r0
 800c094:	e7f5      	b.n	800c082 <_dtoa_r+0x80a>
 800c096:	f1ba 0f00 	cmp.w	sl, #0
 800c09a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c09e:	46d3      	mov	fp, sl
 800c0a0:	dc21      	bgt.n	800c0e6 <_dtoa_r+0x86e>
 800c0a2:	9b07      	ldr	r3, [sp, #28]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	dd1e      	ble.n	800c0e6 <_dtoa_r+0x86e>
 800c0a8:	f1bb 0f00 	cmp.w	fp, #0
 800c0ac:	f47f aeb7 	bne.w	800be1e <_dtoa_r+0x5a6>
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	465b      	mov	r3, fp
 800c0b4:	2205      	movs	r2, #5
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	f000 f9e0 	bl	800c47c <__multadd>
 800c0bc:	4601      	mov	r1, r0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	9801      	ldr	r0, [sp, #4]
 800c0c2:	f000 fc3d 	bl	800c940 <__mcmp>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f77f aea9 	ble.w	800be1e <_dtoa_r+0x5a6>
 800c0cc:	463e      	mov	r6, r7
 800c0ce:	2331      	movs	r3, #49	@ 0x31
 800c0d0:	f806 3b01 	strb.w	r3, [r6], #1
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	e6a4      	b.n	800be26 <_dtoa_r+0x5ae>
 800c0dc:	f8cd 8010 	str.w	r8, [sp, #16]
 800c0e0:	4654      	mov	r4, sl
 800c0e2:	4625      	mov	r5, r4
 800c0e4:	e7f2      	b.n	800c0cc <_dtoa_r+0x854>
 800c0e6:	9b08      	ldr	r3, [sp, #32]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 8103 	beq.w	800c2f4 <_dtoa_r+0xa7c>
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	dd05      	ble.n	800c0fe <_dtoa_r+0x886>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f000 fbb6 	bl	800c868 <__lshift>
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c100:	2b00      	cmp	r3, #0
 800c102:	d058      	beq.n	800c1b6 <_dtoa_r+0x93e>
 800c104:	6869      	ldr	r1, [r5, #4]
 800c106:	4648      	mov	r0, r9
 800c108:	f000 f956 	bl	800c3b8 <_Balloc>
 800c10c:	4606      	mov	r6, r0
 800c10e:	b928      	cbnz	r0, 800c11c <_dtoa_r+0x8a4>
 800c110:	4b82      	ldr	r3, [pc, #520]	@ (800c31c <_dtoa_r+0xaa4>)
 800c112:	4602      	mov	r2, r0
 800c114:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c118:	f7ff bbc7 	b.w	800b8aa <_dtoa_r+0x32>
 800c11c:	692a      	ldr	r2, [r5, #16]
 800c11e:	3202      	adds	r2, #2
 800c120:	0092      	lsls	r2, r2, #2
 800c122:	f105 010c 	add.w	r1, r5, #12
 800c126:	300c      	adds	r0, #12
 800c128:	f7ff fb01 	bl	800b72e <memcpy>
 800c12c:	2201      	movs	r2, #1
 800c12e:	4631      	mov	r1, r6
 800c130:	4648      	mov	r0, r9
 800c132:	f000 fb99 	bl	800c868 <__lshift>
 800c136:	1c7b      	adds	r3, r7, #1
 800c138:	9305      	str	r3, [sp, #20]
 800c13a:	eb07 030b 	add.w	r3, r7, fp
 800c13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c140:	9b02      	ldr	r3, [sp, #8]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	46a8      	mov	r8, r5
 800c148:	9308      	str	r3, [sp, #32]
 800c14a:	4605      	mov	r5, r0
 800c14c:	9b05      	ldr	r3, [sp, #20]
 800c14e:	9801      	ldr	r0, [sp, #4]
 800c150:	4621      	mov	r1, r4
 800c152:	f103 3bff 	add.w	fp, r3, #4294967295
 800c156:	f7ff fb06 	bl	800b766 <quorem>
 800c15a:	4641      	mov	r1, r8
 800c15c:	9002      	str	r0, [sp, #8]
 800c15e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c162:	9801      	ldr	r0, [sp, #4]
 800c164:	f000 fbec 	bl	800c940 <__mcmp>
 800c168:	462a      	mov	r2, r5
 800c16a:	9006      	str	r0, [sp, #24]
 800c16c:	4621      	mov	r1, r4
 800c16e:	4648      	mov	r0, r9
 800c170:	f000 fc02 	bl	800c978 <__mdiff>
 800c174:	68c2      	ldr	r2, [r0, #12]
 800c176:	4606      	mov	r6, r0
 800c178:	b9fa      	cbnz	r2, 800c1ba <_dtoa_r+0x942>
 800c17a:	4601      	mov	r1, r0
 800c17c:	9801      	ldr	r0, [sp, #4]
 800c17e:	f000 fbdf 	bl	800c940 <__mcmp>
 800c182:	4602      	mov	r2, r0
 800c184:	4631      	mov	r1, r6
 800c186:	4648      	mov	r0, r9
 800c188:	920a      	str	r2, [sp, #40]	@ 0x28
 800c18a:	f000 f955 	bl	800c438 <_Bfree>
 800c18e:	9b07      	ldr	r3, [sp, #28]
 800c190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c192:	9e05      	ldr	r6, [sp, #20]
 800c194:	ea43 0102 	orr.w	r1, r3, r2
 800c198:	9b08      	ldr	r3, [sp, #32]
 800c19a:	4319      	orrs	r1, r3
 800c19c:	d10f      	bne.n	800c1be <_dtoa_r+0x946>
 800c19e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c1a2:	d028      	beq.n	800c1f6 <_dtoa_r+0x97e>
 800c1a4:	9b06      	ldr	r3, [sp, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd02      	ble.n	800c1b0 <_dtoa_r+0x938>
 800c1aa:	9b02      	ldr	r3, [sp, #8]
 800c1ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c1b0:	f88b a000 	strb.w	sl, [fp]
 800c1b4:	e639      	b.n	800be2a <_dtoa_r+0x5b2>
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	e7bd      	b.n	800c136 <_dtoa_r+0x8be>
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	e7e2      	b.n	800c184 <_dtoa_r+0x90c>
 800c1be:	9b06      	ldr	r3, [sp, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	db04      	blt.n	800c1ce <_dtoa_r+0x956>
 800c1c4:	9907      	ldr	r1, [sp, #28]
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	9908      	ldr	r1, [sp, #32]
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	d120      	bne.n	800c210 <_dtoa_r+0x998>
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	ddee      	ble.n	800c1b0 <_dtoa_r+0x938>
 800c1d2:	9901      	ldr	r1, [sp, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	4648      	mov	r0, r9
 800c1d8:	f000 fb46 	bl	800c868 <__lshift>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	9001      	str	r0, [sp, #4]
 800c1e0:	f000 fbae 	bl	800c940 <__mcmp>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	dc03      	bgt.n	800c1f0 <_dtoa_r+0x978>
 800c1e8:	d1e2      	bne.n	800c1b0 <_dtoa_r+0x938>
 800c1ea:	f01a 0f01 	tst.w	sl, #1
 800c1ee:	d0df      	beq.n	800c1b0 <_dtoa_r+0x938>
 800c1f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c1f4:	d1d9      	bne.n	800c1aa <_dtoa_r+0x932>
 800c1f6:	2339      	movs	r3, #57	@ 0x39
 800c1f8:	f88b 3000 	strb.w	r3, [fp]
 800c1fc:	4633      	mov	r3, r6
 800c1fe:	461e      	mov	r6, r3
 800c200:	3b01      	subs	r3, #1
 800c202:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c206:	2a39      	cmp	r2, #57	@ 0x39
 800c208:	d053      	beq.n	800c2b2 <_dtoa_r+0xa3a>
 800c20a:	3201      	adds	r2, #1
 800c20c:	701a      	strb	r2, [r3, #0]
 800c20e:	e60c      	b.n	800be2a <_dtoa_r+0x5b2>
 800c210:	2a00      	cmp	r2, #0
 800c212:	dd07      	ble.n	800c224 <_dtoa_r+0x9ac>
 800c214:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c218:	d0ed      	beq.n	800c1f6 <_dtoa_r+0x97e>
 800c21a:	f10a 0301 	add.w	r3, sl, #1
 800c21e:	f88b 3000 	strb.w	r3, [fp]
 800c222:	e602      	b.n	800be2a <_dtoa_r+0x5b2>
 800c224:	9b05      	ldr	r3, [sp, #20]
 800c226:	9a05      	ldr	r2, [sp, #20]
 800c228:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c22e:	4293      	cmp	r3, r2
 800c230:	d029      	beq.n	800c286 <_dtoa_r+0xa0e>
 800c232:	9901      	ldr	r1, [sp, #4]
 800c234:	2300      	movs	r3, #0
 800c236:	220a      	movs	r2, #10
 800c238:	4648      	mov	r0, r9
 800c23a:	f000 f91f 	bl	800c47c <__multadd>
 800c23e:	45a8      	cmp	r8, r5
 800c240:	9001      	str	r0, [sp, #4]
 800c242:	f04f 0300 	mov.w	r3, #0
 800c246:	f04f 020a 	mov.w	r2, #10
 800c24a:	4641      	mov	r1, r8
 800c24c:	4648      	mov	r0, r9
 800c24e:	d107      	bne.n	800c260 <_dtoa_r+0x9e8>
 800c250:	f000 f914 	bl	800c47c <__multadd>
 800c254:	4680      	mov	r8, r0
 800c256:	4605      	mov	r5, r0
 800c258:	9b05      	ldr	r3, [sp, #20]
 800c25a:	3301      	adds	r3, #1
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	e775      	b.n	800c14c <_dtoa_r+0x8d4>
 800c260:	f000 f90c 	bl	800c47c <__multadd>
 800c264:	4629      	mov	r1, r5
 800c266:	4680      	mov	r8, r0
 800c268:	2300      	movs	r3, #0
 800c26a:	220a      	movs	r2, #10
 800c26c:	4648      	mov	r0, r9
 800c26e:	f000 f905 	bl	800c47c <__multadd>
 800c272:	4605      	mov	r5, r0
 800c274:	e7f0      	b.n	800c258 <_dtoa_r+0x9e0>
 800c276:	f1bb 0f00 	cmp.w	fp, #0
 800c27a:	bfcc      	ite	gt
 800c27c:	465e      	movgt	r6, fp
 800c27e:	2601      	movle	r6, #1
 800c280:	443e      	add	r6, r7
 800c282:	f04f 0800 	mov.w	r8, #0
 800c286:	9901      	ldr	r1, [sp, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	4648      	mov	r0, r9
 800c28c:	f000 faec 	bl	800c868 <__lshift>
 800c290:	4621      	mov	r1, r4
 800c292:	9001      	str	r0, [sp, #4]
 800c294:	f000 fb54 	bl	800c940 <__mcmp>
 800c298:	2800      	cmp	r0, #0
 800c29a:	dcaf      	bgt.n	800c1fc <_dtoa_r+0x984>
 800c29c:	d102      	bne.n	800c2a4 <_dtoa_r+0xa2c>
 800c29e:	f01a 0f01 	tst.w	sl, #1
 800c2a2:	d1ab      	bne.n	800c1fc <_dtoa_r+0x984>
 800c2a4:	4633      	mov	r3, r6
 800c2a6:	461e      	mov	r6, r3
 800c2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2ac:	2a30      	cmp	r2, #48	@ 0x30
 800c2ae:	d0fa      	beq.n	800c2a6 <_dtoa_r+0xa2e>
 800c2b0:	e5bb      	b.n	800be2a <_dtoa_r+0x5b2>
 800c2b2:	429f      	cmp	r7, r3
 800c2b4:	d1a3      	bne.n	800c1fe <_dtoa_r+0x986>
 800c2b6:	9b04      	ldr	r3, [sp, #16]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	2331      	movs	r3, #49	@ 0x31
 800c2be:	703b      	strb	r3, [r7, #0]
 800c2c0:	e5b3      	b.n	800be2a <_dtoa_r+0x5b2>
 800c2c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2c4:	4f16      	ldr	r7, [pc, #88]	@ (800c320 <_dtoa_r+0xaa8>)
 800c2c6:	b11b      	cbz	r3, 800c2d0 <_dtoa_r+0xa58>
 800c2c8:	f107 0308 	add.w	r3, r7, #8
 800c2cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	b011      	add	sp, #68	@ 0x44
 800c2d4:	ecbd 8b02 	vpop	{d8}
 800c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2dc:	9b07      	ldr	r3, [sp, #28]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	f77f ae36 	ble.w	800bf50 <_dtoa_r+0x6d8>
 800c2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	e656      	b.n	800bf9a <_dtoa_r+0x722>
 800c2ec:	f1bb 0f00 	cmp.w	fp, #0
 800c2f0:	f77f aed7 	ble.w	800c0a2 <_dtoa_r+0x82a>
 800c2f4:	463e      	mov	r6, r7
 800c2f6:	9801      	ldr	r0, [sp, #4]
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f7ff fa34 	bl	800b766 <quorem>
 800c2fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c302:	f806 ab01 	strb.w	sl, [r6], #1
 800c306:	1bf2      	subs	r2, r6, r7
 800c308:	4593      	cmp	fp, r2
 800c30a:	ddb4      	ble.n	800c276 <_dtoa_r+0x9fe>
 800c30c:	9901      	ldr	r1, [sp, #4]
 800c30e:	2300      	movs	r3, #0
 800c310:	220a      	movs	r2, #10
 800c312:	4648      	mov	r0, r9
 800c314:	f000 f8b2 	bl	800c47c <__multadd>
 800c318:	9001      	str	r0, [sp, #4]
 800c31a:	e7ec      	b.n	800c2f6 <_dtoa_r+0xa7e>
 800c31c:	0800ee54 	.word	0x0800ee54
 800c320:	0800edd8 	.word	0x0800edd8

0800c324 <_free_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4605      	mov	r5, r0
 800c328:	2900      	cmp	r1, #0
 800c32a:	d041      	beq.n	800c3b0 <_free_r+0x8c>
 800c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c330:	1f0c      	subs	r4, r1, #4
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfb8      	it	lt
 800c336:	18e4      	addlt	r4, r4, r3
 800c338:	f7fe f9c0 	bl	800a6bc <__malloc_lock>
 800c33c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3b4 <_free_r+0x90>)
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	b933      	cbnz	r3, 800c350 <_free_r+0x2c>
 800c342:	6063      	str	r3, [r4, #4]
 800c344:	6014      	str	r4, [r2, #0]
 800c346:	4628      	mov	r0, r5
 800c348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c34c:	f7fe b9bc 	b.w	800a6c8 <__malloc_unlock>
 800c350:	42a3      	cmp	r3, r4
 800c352:	d908      	bls.n	800c366 <_free_r+0x42>
 800c354:	6820      	ldr	r0, [r4, #0]
 800c356:	1821      	adds	r1, r4, r0
 800c358:	428b      	cmp	r3, r1
 800c35a:	bf01      	itttt	eq
 800c35c:	6819      	ldreq	r1, [r3, #0]
 800c35e:	685b      	ldreq	r3, [r3, #4]
 800c360:	1809      	addeq	r1, r1, r0
 800c362:	6021      	streq	r1, [r4, #0]
 800c364:	e7ed      	b.n	800c342 <_free_r+0x1e>
 800c366:	461a      	mov	r2, r3
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	b10b      	cbz	r3, 800c370 <_free_r+0x4c>
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	d9fa      	bls.n	800c366 <_free_r+0x42>
 800c370:	6811      	ldr	r1, [r2, #0]
 800c372:	1850      	adds	r0, r2, r1
 800c374:	42a0      	cmp	r0, r4
 800c376:	d10b      	bne.n	800c390 <_free_r+0x6c>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	4401      	add	r1, r0
 800c37c:	1850      	adds	r0, r2, r1
 800c37e:	4283      	cmp	r3, r0
 800c380:	6011      	str	r1, [r2, #0]
 800c382:	d1e0      	bne.n	800c346 <_free_r+0x22>
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	6053      	str	r3, [r2, #4]
 800c38a:	4408      	add	r0, r1
 800c38c:	6010      	str	r0, [r2, #0]
 800c38e:	e7da      	b.n	800c346 <_free_r+0x22>
 800c390:	d902      	bls.n	800c398 <_free_r+0x74>
 800c392:	230c      	movs	r3, #12
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	e7d6      	b.n	800c346 <_free_r+0x22>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	1821      	adds	r1, r4, r0
 800c39c:	428b      	cmp	r3, r1
 800c39e:	bf04      	itt	eq
 800c3a0:	6819      	ldreq	r1, [r3, #0]
 800c3a2:	685b      	ldreq	r3, [r3, #4]
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	bf04      	itt	eq
 800c3a8:	1809      	addeq	r1, r1, r0
 800c3aa:	6021      	streq	r1, [r4, #0]
 800c3ac:	6054      	str	r4, [r2, #4]
 800c3ae:	e7ca      	b.n	800c346 <_free_r+0x22>
 800c3b0:	bd38      	pop	{r3, r4, r5, pc}
 800c3b2:	bf00      	nop
 800c3b4:	24004d74 	.word	0x24004d74

0800c3b8 <_Balloc>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	69c6      	ldr	r6, [r0, #28]
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	b976      	cbnz	r6, 800c3e0 <_Balloc+0x28>
 800c3c2:	2010      	movs	r0, #16
 800c3c4:	f7fe f8c8 	bl	800a558 <malloc>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	61e0      	str	r0, [r4, #28]
 800c3cc:	b920      	cbnz	r0, 800c3d8 <_Balloc+0x20>
 800c3ce:	4b18      	ldr	r3, [pc, #96]	@ (800c430 <_Balloc+0x78>)
 800c3d0:	4818      	ldr	r0, [pc, #96]	@ (800c434 <_Balloc+0x7c>)
 800c3d2:	216b      	movs	r1, #107	@ 0x6b
 800c3d4:	f7fe f8a2 	bl	800a51c <__assert_func>
 800c3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3dc:	6006      	str	r6, [r0, #0]
 800c3de:	60c6      	str	r6, [r0, #12]
 800c3e0:	69e6      	ldr	r6, [r4, #28]
 800c3e2:	68f3      	ldr	r3, [r6, #12]
 800c3e4:	b183      	cbz	r3, 800c408 <_Balloc+0x50>
 800c3e6:	69e3      	ldr	r3, [r4, #28]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ee:	b9b8      	cbnz	r0, 800c420 <_Balloc+0x68>
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3f6:	1d72      	adds	r2, r6, #5
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f001 ff00 	bl	800e200 <_calloc_r>
 800c400:	b160      	cbz	r0, 800c41c <_Balloc+0x64>
 800c402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c406:	e00e      	b.n	800c426 <_Balloc+0x6e>
 800c408:	2221      	movs	r2, #33	@ 0x21
 800c40a:	2104      	movs	r1, #4
 800c40c:	4620      	mov	r0, r4
 800c40e:	f001 fef7 	bl	800e200 <_calloc_r>
 800c412:	69e3      	ldr	r3, [r4, #28]
 800c414:	60f0      	str	r0, [r6, #12]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e4      	bne.n	800c3e6 <_Balloc+0x2e>
 800c41c:	2000      	movs	r0, #0
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	6802      	ldr	r2, [r0, #0]
 800c422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c426:	2300      	movs	r3, #0
 800c428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c42c:	e7f7      	b.n	800c41e <_Balloc+0x66>
 800c42e:	bf00      	nop
 800c430:	0800ede5 	.word	0x0800ede5
 800c434:	0800ee65 	.word	0x0800ee65

0800c438 <_Bfree>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	69c6      	ldr	r6, [r0, #28]
 800c43c:	4605      	mov	r5, r0
 800c43e:	460c      	mov	r4, r1
 800c440:	b976      	cbnz	r6, 800c460 <_Bfree+0x28>
 800c442:	2010      	movs	r0, #16
 800c444:	f7fe f888 	bl	800a558 <malloc>
 800c448:	4602      	mov	r2, r0
 800c44a:	61e8      	str	r0, [r5, #28]
 800c44c:	b920      	cbnz	r0, 800c458 <_Bfree+0x20>
 800c44e:	4b09      	ldr	r3, [pc, #36]	@ (800c474 <_Bfree+0x3c>)
 800c450:	4809      	ldr	r0, [pc, #36]	@ (800c478 <_Bfree+0x40>)
 800c452:	218f      	movs	r1, #143	@ 0x8f
 800c454:	f7fe f862 	bl	800a51c <__assert_func>
 800c458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c45c:	6006      	str	r6, [r0, #0]
 800c45e:	60c6      	str	r6, [r0, #12]
 800c460:	b13c      	cbz	r4, 800c472 <_Bfree+0x3a>
 800c462:	69eb      	ldr	r3, [r5, #28]
 800c464:	6862      	ldr	r2, [r4, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c46c:	6021      	str	r1, [r4, #0]
 800c46e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	0800ede5 	.word	0x0800ede5
 800c478:	0800ee65 	.word	0x0800ee65

0800c47c <__multadd>:
 800c47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c480:	690d      	ldr	r5, [r1, #16]
 800c482:	4607      	mov	r7, r0
 800c484:	460c      	mov	r4, r1
 800c486:	461e      	mov	r6, r3
 800c488:	f101 0c14 	add.w	ip, r1, #20
 800c48c:	2000      	movs	r0, #0
 800c48e:	f8dc 3000 	ldr.w	r3, [ip]
 800c492:	b299      	uxth	r1, r3
 800c494:	fb02 6101 	mla	r1, r2, r1, r6
 800c498:	0c1e      	lsrs	r6, r3, #16
 800c49a:	0c0b      	lsrs	r3, r1, #16
 800c49c:	fb02 3306 	mla	r3, r2, r6, r3
 800c4a0:	b289      	uxth	r1, r1
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4a8:	4285      	cmp	r5, r0
 800c4aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4b2:	dcec      	bgt.n	800c48e <__multadd+0x12>
 800c4b4:	b30e      	cbz	r6, 800c4fa <__multadd+0x7e>
 800c4b6:	68a3      	ldr	r3, [r4, #8]
 800c4b8:	42ab      	cmp	r3, r5
 800c4ba:	dc19      	bgt.n	800c4f0 <__multadd+0x74>
 800c4bc:	6861      	ldr	r1, [r4, #4]
 800c4be:	4638      	mov	r0, r7
 800c4c0:	3101      	adds	r1, #1
 800c4c2:	f7ff ff79 	bl	800c3b8 <_Balloc>
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	b928      	cbnz	r0, 800c4d6 <__multadd+0x5a>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <__multadd+0x84>)
 800c4ce:	480d      	ldr	r0, [pc, #52]	@ (800c504 <__multadd+0x88>)
 800c4d0:	21ba      	movs	r1, #186	@ 0xba
 800c4d2:	f7fe f823 	bl	800a51c <__assert_func>
 800c4d6:	6922      	ldr	r2, [r4, #16]
 800c4d8:	3202      	adds	r2, #2
 800c4da:	f104 010c 	add.w	r1, r4, #12
 800c4de:	0092      	lsls	r2, r2, #2
 800c4e0:	300c      	adds	r0, #12
 800c4e2:	f7ff f924 	bl	800b72e <memcpy>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7ff ffa5 	bl	800c438 <_Bfree>
 800c4ee:	4644      	mov	r4, r8
 800c4f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	615e      	str	r6, [r3, #20]
 800c4f8:	6125      	str	r5, [r4, #16]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	0800ee54 	.word	0x0800ee54
 800c504:	0800ee65 	.word	0x0800ee65

0800c508 <__s2b>:
 800c508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c50c:	460c      	mov	r4, r1
 800c50e:	4615      	mov	r5, r2
 800c510:	461f      	mov	r7, r3
 800c512:	2209      	movs	r2, #9
 800c514:	3308      	adds	r3, #8
 800c516:	4606      	mov	r6, r0
 800c518:	fb93 f3f2 	sdiv	r3, r3, r2
 800c51c:	2100      	movs	r1, #0
 800c51e:	2201      	movs	r2, #1
 800c520:	429a      	cmp	r2, r3
 800c522:	db09      	blt.n	800c538 <__s2b+0x30>
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff ff47 	bl	800c3b8 <_Balloc>
 800c52a:	b940      	cbnz	r0, 800c53e <__s2b+0x36>
 800c52c:	4602      	mov	r2, r0
 800c52e:	4b19      	ldr	r3, [pc, #100]	@ (800c594 <__s2b+0x8c>)
 800c530:	4819      	ldr	r0, [pc, #100]	@ (800c598 <__s2b+0x90>)
 800c532:	21d3      	movs	r1, #211	@ 0xd3
 800c534:	f7fd fff2 	bl	800a51c <__assert_func>
 800c538:	0052      	lsls	r2, r2, #1
 800c53a:	3101      	adds	r1, #1
 800c53c:	e7f0      	b.n	800c520 <__s2b+0x18>
 800c53e:	9b08      	ldr	r3, [sp, #32]
 800c540:	6143      	str	r3, [r0, #20]
 800c542:	2d09      	cmp	r5, #9
 800c544:	f04f 0301 	mov.w	r3, #1
 800c548:	6103      	str	r3, [r0, #16]
 800c54a:	dd16      	ble.n	800c57a <__s2b+0x72>
 800c54c:	f104 0909 	add.w	r9, r4, #9
 800c550:	46c8      	mov	r8, r9
 800c552:	442c      	add	r4, r5
 800c554:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c558:	4601      	mov	r1, r0
 800c55a:	3b30      	subs	r3, #48	@ 0x30
 800c55c:	220a      	movs	r2, #10
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff ff8c 	bl	800c47c <__multadd>
 800c564:	45a0      	cmp	r8, r4
 800c566:	d1f5      	bne.n	800c554 <__s2b+0x4c>
 800c568:	f1a5 0408 	sub.w	r4, r5, #8
 800c56c:	444c      	add	r4, r9
 800c56e:	1b2d      	subs	r5, r5, r4
 800c570:	1963      	adds	r3, r4, r5
 800c572:	42bb      	cmp	r3, r7
 800c574:	db04      	blt.n	800c580 <__s2b+0x78>
 800c576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57a:	340a      	adds	r4, #10
 800c57c:	2509      	movs	r5, #9
 800c57e:	e7f6      	b.n	800c56e <__s2b+0x66>
 800c580:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c584:	4601      	mov	r1, r0
 800c586:	3b30      	subs	r3, #48	@ 0x30
 800c588:	220a      	movs	r2, #10
 800c58a:	4630      	mov	r0, r6
 800c58c:	f7ff ff76 	bl	800c47c <__multadd>
 800c590:	e7ee      	b.n	800c570 <__s2b+0x68>
 800c592:	bf00      	nop
 800c594:	0800ee54 	.word	0x0800ee54
 800c598:	0800ee65 	.word	0x0800ee65

0800c59c <__hi0bits>:
 800c59c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	bf36      	itet	cc
 800c5a4:	0403      	lslcc	r3, r0, #16
 800c5a6:	2000      	movcs	r0, #0
 800c5a8:	2010      	movcc	r0, #16
 800c5aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5ae:	bf3c      	itt	cc
 800c5b0:	021b      	lslcc	r3, r3, #8
 800c5b2:	3008      	addcc	r0, #8
 800c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5b8:	bf3c      	itt	cc
 800c5ba:	011b      	lslcc	r3, r3, #4
 800c5bc:	3004      	addcc	r0, #4
 800c5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c2:	bf3c      	itt	cc
 800c5c4:	009b      	lslcc	r3, r3, #2
 800c5c6:	3002      	addcc	r0, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	db05      	blt.n	800c5d8 <__hi0bits+0x3c>
 800c5cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5d0:	f100 0001 	add.w	r0, r0, #1
 800c5d4:	bf08      	it	eq
 800c5d6:	2020      	moveq	r0, #32
 800c5d8:	4770      	bx	lr

0800c5da <__lo0bits>:
 800c5da:	6803      	ldr	r3, [r0, #0]
 800c5dc:	4602      	mov	r2, r0
 800c5de:	f013 0007 	ands.w	r0, r3, #7
 800c5e2:	d00b      	beq.n	800c5fc <__lo0bits+0x22>
 800c5e4:	07d9      	lsls	r1, r3, #31
 800c5e6:	d421      	bmi.n	800c62c <__lo0bits+0x52>
 800c5e8:	0798      	lsls	r0, r3, #30
 800c5ea:	bf49      	itett	mi
 800c5ec:	085b      	lsrmi	r3, r3, #1
 800c5ee:	089b      	lsrpl	r3, r3, #2
 800c5f0:	2001      	movmi	r0, #1
 800c5f2:	6013      	strmi	r3, [r2, #0]
 800c5f4:	bf5c      	itt	pl
 800c5f6:	6013      	strpl	r3, [r2, #0]
 800c5f8:	2002      	movpl	r0, #2
 800c5fa:	4770      	bx	lr
 800c5fc:	b299      	uxth	r1, r3
 800c5fe:	b909      	cbnz	r1, 800c604 <__lo0bits+0x2a>
 800c600:	0c1b      	lsrs	r3, r3, #16
 800c602:	2010      	movs	r0, #16
 800c604:	b2d9      	uxtb	r1, r3
 800c606:	b909      	cbnz	r1, 800c60c <__lo0bits+0x32>
 800c608:	3008      	adds	r0, #8
 800c60a:	0a1b      	lsrs	r3, r3, #8
 800c60c:	0719      	lsls	r1, r3, #28
 800c60e:	bf04      	itt	eq
 800c610:	091b      	lsreq	r3, r3, #4
 800c612:	3004      	addeq	r0, #4
 800c614:	0799      	lsls	r1, r3, #30
 800c616:	bf04      	itt	eq
 800c618:	089b      	lsreq	r3, r3, #2
 800c61a:	3002      	addeq	r0, #2
 800c61c:	07d9      	lsls	r1, r3, #31
 800c61e:	d403      	bmi.n	800c628 <__lo0bits+0x4e>
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	f100 0001 	add.w	r0, r0, #1
 800c626:	d003      	beq.n	800c630 <__lo0bits+0x56>
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	4770      	bx	lr
 800c62c:	2000      	movs	r0, #0
 800c62e:	4770      	bx	lr
 800c630:	2020      	movs	r0, #32
 800c632:	4770      	bx	lr

0800c634 <__i2b>:
 800c634:	b510      	push	{r4, lr}
 800c636:	460c      	mov	r4, r1
 800c638:	2101      	movs	r1, #1
 800c63a:	f7ff febd 	bl	800c3b8 <_Balloc>
 800c63e:	4602      	mov	r2, r0
 800c640:	b928      	cbnz	r0, 800c64e <__i2b+0x1a>
 800c642:	4b05      	ldr	r3, [pc, #20]	@ (800c658 <__i2b+0x24>)
 800c644:	4805      	ldr	r0, [pc, #20]	@ (800c65c <__i2b+0x28>)
 800c646:	f240 1145 	movw	r1, #325	@ 0x145
 800c64a:	f7fd ff67 	bl	800a51c <__assert_func>
 800c64e:	2301      	movs	r3, #1
 800c650:	6144      	str	r4, [r0, #20]
 800c652:	6103      	str	r3, [r0, #16]
 800c654:	bd10      	pop	{r4, pc}
 800c656:	bf00      	nop
 800c658:	0800ee54 	.word	0x0800ee54
 800c65c:	0800ee65 	.word	0x0800ee65

0800c660 <__multiply>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	4614      	mov	r4, r2
 800c666:	690a      	ldr	r2, [r1, #16]
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	bfa8      	it	ge
 800c66e:	4623      	movge	r3, r4
 800c670:	460f      	mov	r7, r1
 800c672:	bfa4      	itt	ge
 800c674:	460c      	movge	r4, r1
 800c676:	461f      	movge	r7, r3
 800c678:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c67c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	6861      	ldr	r1, [r4, #4]
 800c684:	eb0a 0609 	add.w	r6, sl, r9
 800c688:	42b3      	cmp	r3, r6
 800c68a:	b085      	sub	sp, #20
 800c68c:	bfb8      	it	lt
 800c68e:	3101      	addlt	r1, #1
 800c690:	f7ff fe92 	bl	800c3b8 <_Balloc>
 800c694:	b930      	cbnz	r0, 800c6a4 <__multiply+0x44>
 800c696:	4602      	mov	r2, r0
 800c698:	4b44      	ldr	r3, [pc, #272]	@ (800c7ac <__multiply+0x14c>)
 800c69a:	4845      	ldr	r0, [pc, #276]	@ (800c7b0 <__multiply+0x150>)
 800c69c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6a0:	f7fd ff3c 	bl	800a51c <__assert_func>
 800c6a4:	f100 0514 	add.w	r5, r0, #20
 800c6a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4543      	cmp	r3, r8
 800c6b2:	d321      	bcc.n	800c6f8 <__multiply+0x98>
 800c6b4:	f107 0114 	add.w	r1, r7, #20
 800c6b8:	f104 0214 	add.w	r2, r4, #20
 800c6bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	1b13      	subs	r3, r2, r4
 800c6c8:	3b15      	subs	r3, #21
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	f104 0715 	add.w	r7, r4, #21
 800c6d4:	42ba      	cmp	r2, r7
 800c6d6:	bf38      	it	cc
 800c6d8:	2304      	movcc	r3, #4
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	9103      	str	r1, [sp, #12]
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	d80c      	bhi.n	800c6fe <__multiply+0x9e>
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	dd03      	ble.n	800c6f0 <__multiply+0x90>
 800c6e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d05b      	beq.n	800c7a8 <__multiply+0x148>
 800c6f0:	6106      	str	r6, [r0, #16]
 800c6f2:	b005      	add	sp, #20
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	f843 2b04 	str.w	r2, [r3], #4
 800c6fc:	e7d8      	b.n	800c6b0 <__multiply+0x50>
 800c6fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800c702:	f1ba 0f00 	cmp.w	sl, #0
 800c706:	d024      	beq.n	800c752 <__multiply+0xf2>
 800c708:	f104 0e14 	add.w	lr, r4, #20
 800c70c:	46a9      	mov	r9, r5
 800c70e:	f04f 0c00 	mov.w	ip, #0
 800c712:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c716:	f8d9 3000 	ldr.w	r3, [r9]
 800c71a:	fa1f fb87 	uxth.w	fp, r7
 800c71e:	b29b      	uxth	r3, r3
 800c720:	fb0a 330b 	mla	r3, sl, fp, r3
 800c724:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c728:	f8d9 7000 	ldr.w	r7, [r9]
 800c72c:	4463      	add	r3, ip
 800c72e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c732:	fb0a c70b 	mla	r7, sl, fp, ip
 800c736:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c740:	4572      	cmp	r2, lr
 800c742:	f849 3b04 	str.w	r3, [r9], #4
 800c746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c74a:	d8e2      	bhi.n	800c712 <__multiply+0xb2>
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	f845 c003 	str.w	ip, [r5, r3]
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c758:	3104      	adds	r1, #4
 800c75a:	f1b9 0f00 	cmp.w	r9, #0
 800c75e:	d021      	beq.n	800c7a4 <__multiply+0x144>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	f104 0c14 	add.w	ip, r4, #20
 800c766:	46ae      	mov	lr, r5
 800c768:	f04f 0a00 	mov.w	sl, #0
 800c76c:	f8bc b000 	ldrh.w	fp, [ip]
 800c770:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c774:	fb09 770b 	mla	r7, r9, fp, r7
 800c778:	4457      	add	r7, sl
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c780:	f84e 3b04 	str.w	r3, [lr], #4
 800c784:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c78c:	f8be 3000 	ldrh.w	r3, [lr]
 800c790:	fb09 330a 	mla	r3, r9, sl, r3
 800c794:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c798:	4562      	cmp	r2, ip
 800c79a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c79e:	d8e5      	bhi.n	800c76c <__multiply+0x10c>
 800c7a0:	9f01      	ldr	r7, [sp, #4]
 800c7a2:	51eb      	str	r3, [r5, r7]
 800c7a4:	3504      	adds	r5, #4
 800c7a6:	e799      	b.n	800c6dc <__multiply+0x7c>
 800c7a8:	3e01      	subs	r6, #1
 800c7aa:	e79b      	b.n	800c6e4 <__multiply+0x84>
 800c7ac:	0800ee54 	.word	0x0800ee54
 800c7b0:	0800ee65 	.word	0x0800ee65

0800c7b4 <__pow5mult>:
 800c7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b8:	4615      	mov	r5, r2
 800c7ba:	f012 0203 	ands.w	r2, r2, #3
 800c7be:	4607      	mov	r7, r0
 800c7c0:	460e      	mov	r6, r1
 800c7c2:	d007      	beq.n	800c7d4 <__pow5mult+0x20>
 800c7c4:	4c25      	ldr	r4, [pc, #148]	@ (800c85c <__pow5mult+0xa8>)
 800c7c6:	3a01      	subs	r2, #1
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ce:	f7ff fe55 	bl	800c47c <__multadd>
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	10ad      	asrs	r5, r5, #2
 800c7d6:	d03d      	beq.n	800c854 <__pow5mult+0xa0>
 800c7d8:	69fc      	ldr	r4, [r7, #28]
 800c7da:	b97c      	cbnz	r4, 800c7fc <__pow5mult+0x48>
 800c7dc:	2010      	movs	r0, #16
 800c7de:	f7fd febb 	bl	800a558 <malloc>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	61f8      	str	r0, [r7, #28]
 800c7e6:	b928      	cbnz	r0, 800c7f4 <__pow5mult+0x40>
 800c7e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c860 <__pow5mult+0xac>)
 800c7ea:	481e      	ldr	r0, [pc, #120]	@ (800c864 <__pow5mult+0xb0>)
 800c7ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7f0:	f7fd fe94 	bl	800a51c <__assert_func>
 800c7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7f8:	6004      	str	r4, [r0, #0]
 800c7fa:	60c4      	str	r4, [r0, #12]
 800c7fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c804:	b94c      	cbnz	r4, 800c81a <__pow5mult+0x66>
 800c806:	f240 2171 	movw	r1, #625	@ 0x271
 800c80a:	4638      	mov	r0, r7
 800c80c:	f7ff ff12 	bl	800c634 <__i2b>
 800c810:	2300      	movs	r3, #0
 800c812:	f8c8 0008 	str.w	r0, [r8, #8]
 800c816:	4604      	mov	r4, r0
 800c818:	6003      	str	r3, [r0, #0]
 800c81a:	f04f 0900 	mov.w	r9, #0
 800c81e:	07eb      	lsls	r3, r5, #31
 800c820:	d50a      	bpl.n	800c838 <__pow5mult+0x84>
 800c822:	4631      	mov	r1, r6
 800c824:	4622      	mov	r2, r4
 800c826:	4638      	mov	r0, r7
 800c828:	f7ff ff1a 	bl	800c660 <__multiply>
 800c82c:	4631      	mov	r1, r6
 800c82e:	4680      	mov	r8, r0
 800c830:	4638      	mov	r0, r7
 800c832:	f7ff fe01 	bl	800c438 <_Bfree>
 800c836:	4646      	mov	r6, r8
 800c838:	106d      	asrs	r5, r5, #1
 800c83a:	d00b      	beq.n	800c854 <__pow5mult+0xa0>
 800c83c:	6820      	ldr	r0, [r4, #0]
 800c83e:	b938      	cbnz	r0, 800c850 <__pow5mult+0x9c>
 800c840:	4622      	mov	r2, r4
 800c842:	4621      	mov	r1, r4
 800c844:	4638      	mov	r0, r7
 800c846:	f7ff ff0b 	bl	800c660 <__multiply>
 800c84a:	6020      	str	r0, [r4, #0]
 800c84c:	f8c0 9000 	str.w	r9, [r0]
 800c850:	4604      	mov	r4, r0
 800c852:	e7e4      	b.n	800c81e <__pow5mult+0x6a>
 800c854:	4630      	mov	r0, r6
 800c856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85a:	bf00      	nop
 800c85c:	0800eec0 	.word	0x0800eec0
 800c860:	0800ede5 	.word	0x0800ede5
 800c864:	0800ee65 	.word	0x0800ee65

0800c868 <__lshift>:
 800c868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	6849      	ldr	r1, [r1, #4]
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c876:	68a3      	ldr	r3, [r4, #8]
 800c878:	4607      	mov	r7, r0
 800c87a:	4691      	mov	r9, r2
 800c87c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c880:	f108 0601 	add.w	r6, r8, #1
 800c884:	42b3      	cmp	r3, r6
 800c886:	db0b      	blt.n	800c8a0 <__lshift+0x38>
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff fd95 	bl	800c3b8 <_Balloc>
 800c88e:	4605      	mov	r5, r0
 800c890:	b948      	cbnz	r0, 800c8a6 <__lshift+0x3e>
 800c892:	4602      	mov	r2, r0
 800c894:	4b28      	ldr	r3, [pc, #160]	@ (800c938 <__lshift+0xd0>)
 800c896:	4829      	ldr	r0, [pc, #164]	@ (800c93c <__lshift+0xd4>)
 800c898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c89c:	f7fd fe3e 	bl	800a51c <__assert_func>
 800c8a0:	3101      	adds	r1, #1
 800c8a2:	005b      	lsls	r3, r3, #1
 800c8a4:	e7ee      	b.n	800c884 <__lshift+0x1c>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f100 0114 	add.w	r1, r0, #20
 800c8ac:	f100 0210 	add.w	r2, r0, #16
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	4553      	cmp	r3, sl
 800c8b4:	db33      	blt.n	800c91e <__lshift+0xb6>
 800c8b6:	6920      	ldr	r0, [r4, #16]
 800c8b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8bc:	f104 0314 	add.w	r3, r4, #20
 800c8c0:	f019 091f 	ands.w	r9, r9, #31
 800c8c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8cc:	d02b      	beq.n	800c926 <__lshift+0xbe>
 800c8ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c8d2:	468a      	mov	sl, r1
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	fa00 f009 	lsl.w	r0, r0, r9
 800c8dc:	4310      	orrs	r0, r2
 800c8de:	f84a 0b04 	str.w	r0, [sl], #4
 800c8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e6:	459c      	cmp	ip, r3
 800c8e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8ec:	d8f3      	bhi.n	800c8d6 <__lshift+0x6e>
 800c8ee:	ebac 0304 	sub.w	r3, ip, r4
 800c8f2:	3b15      	subs	r3, #21
 800c8f4:	f023 0303 	bic.w	r3, r3, #3
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	f104 0015 	add.w	r0, r4, #21
 800c8fe:	4584      	cmp	ip, r0
 800c900:	bf38      	it	cc
 800c902:	2304      	movcc	r3, #4
 800c904:	50ca      	str	r2, [r1, r3]
 800c906:	b10a      	cbz	r2, 800c90c <__lshift+0xa4>
 800c908:	f108 0602 	add.w	r6, r8, #2
 800c90c:	3e01      	subs	r6, #1
 800c90e:	4638      	mov	r0, r7
 800c910:	612e      	str	r6, [r5, #16]
 800c912:	4621      	mov	r1, r4
 800c914:	f7ff fd90 	bl	800c438 <_Bfree>
 800c918:	4628      	mov	r0, r5
 800c91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c922:	3301      	adds	r3, #1
 800c924:	e7c5      	b.n	800c8b2 <__lshift+0x4a>
 800c926:	3904      	subs	r1, #4
 800c928:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c930:	459c      	cmp	ip, r3
 800c932:	d8f9      	bhi.n	800c928 <__lshift+0xc0>
 800c934:	e7ea      	b.n	800c90c <__lshift+0xa4>
 800c936:	bf00      	nop
 800c938:	0800ee54 	.word	0x0800ee54
 800c93c:	0800ee65 	.word	0x0800ee65

0800c940 <__mcmp>:
 800c940:	690a      	ldr	r2, [r1, #16]
 800c942:	4603      	mov	r3, r0
 800c944:	6900      	ldr	r0, [r0, #16]
 800c946:	1a80      	subs	r0, r0, r2
 800c948:	b530      	push	{r4, r5, lr}
 800c94a:	d10e      	bne.n	800c96a <__mcmp+0x2a>
 800c94c:	3314      	adds	r3, #20
 800c94e:	3114      	adds	r1, #20
 800c950:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c954:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c958:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c95c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c960:	4295      	cmp	r5, r2
 800c962:	d003      	beq.n	800c96c <__mcmp+0x2c>
 800c964:	d205      	bcs.n	800c972 <__mcmp+0x32>
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	bd30      	pop	{r4, r5, pc}
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	d3f3      	bcc.n	800c958 <__mcmp+0x18>
 800c970:	e7fb      	b.n	800c96a <__mcmp+0x2a>
 800c972:	2001      	movs	r0, #1
 800c974:	e7f9      	b.n	800c96a <__mcmp+0x2a>
	...

0800c978 <__mdiff>:
 800c978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	4689      	mov	r9, r1
 800c97e:	4606      	mov	r6, r0
 800c980:	4611      	mov	r1, r2
 800c982:	4648      	mov	r0, r9
 800c984:	4614      	mov	r4, r2
 800c986:	f7ff ffdb 	bl	800c940 <__mcmp>
 800c98a:	1e05      	subs	r5, r0, #0
 800c98c:	d112      	bne.n	800c9b4 <__mdiff+0x3c>
 800c98e:	4629      	mov	r1, r5
 800c990:	4630      	mov	r0, r6
 800c992:	f7ff fd11 	bl	800c3b8 <_Balloc>
 800c996:	4602      	mov	r2, r0
 800c998:	b928      	cbnz	r0, 800c9a6 <__mdiff+0x2e>
 800c99a:	4b3f      	ldr	r3, [pc, #252]	@ (800ca98 <__mdiff+0x120>)
 800c99c:	f240 2137 	movw	r1, #567	@ 0x237
 800c9a0:	483e      	ldr	r0, [pc, #248]	@ (800ca9c <__mdiff+0x124>)
 800c9a2:	f7fd fdbb 	bl	800a51c <__assert_func>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	b003      	add	sp, #12
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b4:	bfbc      	itt	lt
 800c9b6:	464b      	movlt	r3, r9
 800c9b8:	46a1      	movlt	r9, r4
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9c0:	bfba      	itte	lt
 800c9c2:	461c      	movlt	r4, r3
 800c9c4:	2501      	movlt	r5, #1
 800c9c6:	2500      	movge	r5, #0
 800c9c8:	f7ff fcf6 	bl	800c3b8 <_Balloc>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	b918      	cbnz	r0, 800c9d8 <__mdiff+0x60>
 800c9d0:	4b31      	ldr	r3, [pc, #196]	@ (800ca98 <__mdiff+0x120>)
 800c9d2:	f240 2145 	movw	r1, #581	@ 0x245
 800c9d6:	e7e3      	b.n	800c9a0 <__mdiff+0x28>
 800c9d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9dc:	6926      	ldr	r6, [r4, #16]
 800c9de:	60c5      	str	r5, [r0, #12]
 800c9e0:	f109 0310 	add.w	r3, r9, #16
 800c9e4:	f109 0514 	add.w	r5, r9, #20
 800c9e8:	f104 0e14 	add.w	lr, r4, #20
 800c9ec:	f100 0b14 	add.w	fp, r0, #20
 800c9f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	46d9      	mov	r9, fp
 800c9fc:	f04f 0c00 	mov.w	ip, #0
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	fa1f f38a 	uxth.w	r3, sl
 800ca10:	4619      	mov	r1, r3
 800ca12:	b283      	uxth	r3, r0
 800ca14:	1acb      	subs	r3, r1, r3
 800ca16:	0c00      	lsrs	r0, r0, #16
 800ca18:	4463      	add	r3, ip
 800ca1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca28:	4576      	cmp	r6, lr
 800ca2a:	f849 3b04 	str.w	r3, [r9], #4
 800ca2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca32:	d8e5      	bhi.n	800ca00 <__mdiff+0x88>
 800ca34:	1b33      	subs	r3, r6, r4
 800ca36:	3b15      	subs	r3, #21
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	3415      	adds	r4, #21
 800ca3e:	3304      	adds	r3, #4
 800ca40:	42a6      	cmp	r6, r4
 800ca42:	bf38      	it	cc
 800ca44:	2304      	movcc	r3, #4
 800ca46:	441d      	add	r5, r3
 800ca48:	445b      	add	r3, fp
 800ca4a:	461e      	mov	r6, r3
 800ca4c:	462c      	mov	r4, r5
 800ca4e:	4544      	cmp	r4, r8
 800ca50:	d30e      	bcc.n	800ca70 <__mdiff+0xf8>
 800ca52:	f108 0103 	add.w	r1, r8, #3
 800ca56:	1b49      	subs	r1, r1, r5
 800ca58:	f021 0103 	bic.w	r1, r1, #3
 800ca5c:	3d03      	subs	r5, #3
 800ca5e:	45a8      	cmp	r8, r5
 800ca60:	bf38      	it	cc
 800ca62:	2100      	movcc	r1, #0
 800ca64:	440b      	add	r3, r1
 800ca66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca6a:	b191      	cbz	r1, 800ca92 <__mdiff+0x11a>
 800ca6c:	6117      	str	r7, [r2, #16]
 800ca6e:	e79d      	b.n	800c9ac <__mdiff+0x34>
 800ca70:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca74:	46e6      	mov	lr, ip
 800ca76:	0c08      	lsrs	r0, r1, #16
 800ca78:	fa1c fc81 	uxtah	ip, ip, r1
 800ca7c:	4471      	add	r1, lr
 800ca7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca82:	b289      	uxth	r1, r1
 800ca84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca88:	f846 1b04 	str.w	r1, [r6], #4
 800ca8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca90:	e7dd      	b.n	800ca4e <__mdiff+0xd6>
 800ca92:	3f01      	subs	r7, #1
 800ca94:	e7e7      	b.n	800ca66 <__mdiff+0xee>
 800ca96:	bf00      	nop
 800ca98:	0800ee54 	.word	0x0800ee54
 800ca9c:	0800ee65 	.word	0x0800ee65

0800caa0 <__ulp>:
 800caa0:	b082      	sub	sp, #8
 800caa2:	ed8d 0b00 	vstr	d0, [sp]
 800caa6:	9a01      	ldr	r2, [sp, #4]
 800caa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cae8 <__ulp+0x48>)
 800caaa:	4013      	ands	r3, r2
 800caac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dc08      	bgt.n	800cac6 <__ulp+0x26>
 800cab4:	425b      	negs	r3, r3
 800cab6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800caba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cabe:	da04      	bge.n	800caca <__ulp+0x2a>
 800cac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cac4:	4113      	asrs	r3, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	e008      	b.n	800cadc <__ulp+0x3c>
 800caca:	f1a2 0314 	sub.w	r3, r2, #20
 800cace:	2b1e      	cmp	r3, #30
 800cad0:	bfda      	itte	le
 800cad2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cad6:	40da      	lsrle	r2, r3
 800cad8:	2201      	movgt	r2, #1
 800cada:	2300      	movs	r3, #0
 800cadc:	4619      	mov	r1, r3
 800cade:	4610      	mov	r0, r2
 800cae0:	ec41 0b10 	vmov	d0, r0, r1
 800cae4:	b002      	add	sp, #8
 800cae6:	4770      	bx	lr
 800cae8:	7ff00000 	.word	0x7ff00000

0800caec <__b2d>:
 800caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf0:	6906      	ldr	r6, [r0, #16]
 800caf2:	f100 0814 	add.w	r8, r0, #20
 800caf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cafa:	1f37      	subs	r7, r6, #4
 800cafc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb00:	4610      	mov	r0, r2
 800cb02:	f7ff fd4b 	bl	800c59c <__hi0bits>
 800cb06:	f1c0 0320 	rsb	r3, r0, #32
 800cb0a:	280a      	cmp	r0, #10
 800cb0c:	600b      	str	r3, [r1, #0]
 800cb0e:	491b      	ldr	r1, [pc, #108]	@ (800cb7c <__b2d+0x90>)
 800cb10:	dc15      	bgt.n	800cb3e <__b2d+0x52>
 800cb12:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb16:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb1a:	45b8      	cmp	r8, r7
 800cb1c:	ea43 0501 	orr.w	r5, r3, r1
 800cb20:	bf34      	ite	cc
 800cb22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb26:	2300      	movcs	r3, #0
 800cb28:	3015      	adds	r0, #21
 800cb2a:	fa02 f000 	lsl.w	r0, r2, r0
 800cb2e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb32:	4303      	orrs	r3, r0
 800cb34:	461c      	mov	r4, r3
 800cb36:	ec45 4b10 	vmov	d0, r4, r5
 800cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3e:	45b8      	cmp	r8, r7
 800cb40:	bf3a      	itte	cc
 800cb42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb46:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb4a:	2300      	movcs	r3, #0
 800cb4c:	380b      	subs	r0, #11
 800cb4e:	d012      	beq.n	800cb76 <__b2d+0x8a>
 800cb50:	f1c0 0120 	rsb	r1, r0, #32
 800cb54:	fa23 f401 	lsr.w	r4, r3, r1
 800cb58:	4082      	lsls	r2, r0
 800cb5a:	4322      	orrs	r2, r4
 800cb5c:	4547      	cmp	r7, r8
 800cb5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb62:	bf8c      	ite	hi
 800cb64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb68:	2200      	movls	r2, #0
 800cb6a:	4083      	lsls	r3, r0
 800cb6c:	40ca      	lsrs	r2, r1
 800cb6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb72:	4313      	orrs	r3, r2
 800cb74:	e7de      	b.n	800cb34 <__b2d+0x48>
 800cb76:	ea42 0501 	orr.w	r5, r2, r1
 800cb7a:	e7db      	b.n	800cb34 <__b2d+0x48>
 800cb7c:	3ff00000 	.word	0x3ff00000

0800cb80 <__d2b>:
 800cb80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb84:	460f      	mov	r7, r1
 800cb86:	2101      	movs	r1, #1
 800cb88:	ec59 8b10 	vmov	r8, r9, d0
 800cb8c:	4616      	mov	r6, r2
 800cb8e:	f7ff fc13 	bl	800c3b8 <_Balloc>
 800cb92:	4604      	mov	r4, r0
 800cb94:	b930      	cbnz	r0, 800cba4 <__d2b+0x24>
 800cb96:	4602      	mov	r2, r0
 800cb98:	4b23      	ldr	r3, [pc, #140]	@ (800cc28 <__d2b+0xa8>)
 800cb9a:	4824      	ldr	r0, [pc, #144]	@ (800cc2c <__d2b+0xac>)
 800cb9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cba0:	f7fd fcbc 	bl	800a51c <__assert_func>
 800cba4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbac:	b10d      	cbz	r5, 800cbb2 <__d2b+0x32>
 800cbae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	f1b8 0300 	subs.w	r3, r8, #0
 800cbb8:	d023      	beq.n	800cc02 <__d2b+0x82>
 800cbba:	4668      	mov	r0, sp
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	f7ff fd0c 	bl	800c5da <__lo0bits>
 800cbc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbc6:	b1d0      	cbz	r0, 800cbfe <__d2b+0x7e>
 800cbc8:	f1c0 0320 	rsb	r3, r0, #32
 800cbcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd0:	430b      	orrs	r3, r1
 800cbd2:	40c2      	lsrs	r2, r0
 800cbd4:	6163      	str	r3, [r4, #20]
 800cbd6:	9201      	str	r2, [sp, #4]
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	61a3      	str	r3, [r4, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	bf0c      	ite	eq
 800cbe0:	2201      	moveq	r2, #1
 800cbe2:	2202      	movne	r2, #2
 800cbe4:	6122      	str	r2, [r4, #16]
 800cbe6:	b1a5      	cbz	r5, 800cc12 <__d2b+0x92>
 800cbe8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbec:	4405      	add	r5, r0
 800cbee:	603d      	str	r5, [r7, #0]
 800cbf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbf4:	6030      	str	r0, [r6, #0]
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	b003      	add	sp, #12
 800cbfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbfe:	6161      	str	r1, [r4, #20]
 800cc00:	e7ea      	b.n	800cbd8 <__d2b+0x58>
 800cc02:	a801      	add	r0, sp, #4
 800cc04:	f7ff fce9 	bl	800c5da <__lo0bits>
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	6163      	str	r3, [r4, #20]
 800cc0c:	3020      	adds	r0, #32
 800cc0e:	2201      	movs	r2, #1
 800cc10:	e7e8      	b.n	800cbe4 <__d2b+0x64>
 800cc12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc1a:	6038      	str	r0, [r7, #0]
 800cc1c:	6918      	ldr	r0, [r3, #16]
 800cc1e:	f7ff fcbd 	bl	800c59c <__hi0bits>
 800cc22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc26:	e7e5      	b.n	800cbf4 <__d2b+0x74>
 800cc28:	0800ee54 	.word	0x0800ee54
 800cc2c:	0800ee65 	.word	0x0800ee65

0800cc30 <__ratio>:
 800cc30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc34:	4688      	mov	r8, r1
 800cc36:	4669      	mov	r1, sp
 800cc38:	4681      	mov	r9, r0
 800cc3a:	f7ff ff57 	bl	800caec <__b2d>
 800cc3e:	a901      	add	r1, sp, #4
 800cc40:	4640      	mov	r0, r8
 800cc42:	ec55 4b10 	vmov	r4, r5, d0
 800cc46:	f7ff ff51 	bl	800caec <__b2d>
 800cc4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cc4e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cc52:	1ad2      	subs	r2, r2, r3
 800cc54:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cc58:	1a5b      	subs	r3, r3, r1
 800cc5a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800cc5e:	ec57 6b10 	vmov	r6, r7, d0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	bfd6      	itet	le
 800cc66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc6a:	462a      	movgt	r2, r5
 800cc6c:	463a      	movle	r2, r7
 800cc6e:	46ab      	mov	fp, r5
 800cc70:	46a2      	mov	sl, r4
 800cc72:	bfce      	itee	gt
 800cc74:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cc78:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800cc7c:	ee00 3a90 	vmovle	s1, r3
 800cc80:	ec4b ab17 	vmov	d7, sl, fp
 800cc84:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800cc88:	b003      	add	sp, #12
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc8e <__copybits>:
 800cc8e:	3901      	subs	r1, #1
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	1149      	asrs	r1, r1, #5
 800cc94:	6914      	ldr	r4, [r2, #16]
 800cc96:	3101      	adds	r1, #1
 800cc98:	f102 0314 	add.w	r3, r2, #20
 800cc9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cca4:	1f05      	subs	r5, r0, #4
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	d30c      	bcc.n	800ccc4 <__copybits+0x36>
 800ccaa:	1aa3      	subs	r3, r4, r2
 800ccac:	3b11      	subs	r3, #17
 800ccae:	f023 0303 	bic.w	r3, r3, #3
 800ccb2:	3211      	adds	r2, #17
 800ccb4:	42a2      	cmp	r2, r4
 800ccb6:	bf88      	it	hi
 800ccb8:	2300      	movhi	r3, #0
 800ccba:	4418      	add	r0, r3
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4288      	cmp	r0, r1
 800ccc0:	d305      	bcc.n	800ccce <__copybits+0x40>
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccc8:	f845 6f04 	str.w	r6, [r5, #4]!
 800cccc:	e7eb      	b.n	800cca6 <__copybits+0x18>
 800ccce:	f840 3b04 	str.w	r3, [r0], #4
 800ccd2:	e7f4      	b.n	800ccbe <__copybits+0x30>

0800ccd4 <__any_on>:
 800ccd4:	f100 0214 	add.w	r2, r0, #20
 800ccd8:	6900      	ldr	r0, [r0, #16]
 800ccda:	114b      	asrs	r3, r1, #5
 800ccdc:	4298      	cmp	r0, r3
 800ccde:	b510      	push	{r4, lr}
 800cce0:	db11      	blt.n	800cd06 <__any_on+0x32>
 800cce2:	dd0a      	ble.n	800ccfa <__any_on+0x26>
 800cce4:	f011 011f 	ands.w	r1, r1, #31
 800cce8:	d007      	beq.n	800ccfa <__any_on+0x26>
 800ccea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccee:	fa24 f001 	lsr.w	r0, r4, r1
 800ccf2:	fa00 f101 	lsl.w	r1, r0, r1
 800ccf6:	428c      	cmp	r4, r1
 800ccf8:	d10b      	bne.n	800cd12 <__any_on+0x3e>
 800ccfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d803      	bhi.n	800cd0a <__any_on+0x36>
 800cd02:	2000      	movs	r0, #0
 800cd04:	bd10      	pop	{r4, pc}
 800cd06:	4603      	mov	r3, r0
 800cd08:	e7f7      	b.n	800ccfa <__any_on+0x26>
 800cd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	d0f5      	beq.n	800ccfe <__any_on+0x2a>
 800cd12:	2001      	movs	r0, #1
 800cd14:	e7f6      	b.n	800cd04 <__any_on+0x30>

0800cd16 <sulp>:
 800cd16:	b570      	push	{r4, r5, r6, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	ec45 4b10 	vmov	d0, r4, r5
 800cd22:	f7ff febd 	bl	800caa0 <__ulp>
 800cd26:	b17e      	cbz	r6, 800cd48 <sulp+0x32>
 800cd28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd2c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	dd09      	ble.n	800cd48 <sulp+0x32>
 800cd34:	051b      	lsls	r3, r3, #20
 800cd36:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cd40:	ec41 0b17 	vmov	d7, r0, r1
 800cd44:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
 800cd4a:	0000      	movs	r0, r0
 800cd4c:	0000      	movs	r0, r0
	...

0800cd50 <_strtod_l>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	ed2d 8b0a 	vpush	{d8-d12}
 800cd58:	b097      	sub	sp, #92	@ 0x5c
 800cd5a:	4688      	mov	r8, r1
 800cd5c:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd5e:	2200      	movs	r2, #0
 800cd60:	9212      	str	r2, [sp, #72]	@ 0x48
 800cd62:	9005      	str	r0, [sp, #20]
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	f04f 0b00 	mov.w	fp, #0
 800cd6c:	460a      	mov	r2, r1
 800cd6e:	9211      	str	r2, [sp, #68]	@ 0x44
 800cd70:	7811      	ldrb	r1, [r2, #0]
 800cd72:	292b      	cmp	r1, #43	@ 0x2b
 800cd74:	d04c      	beq.n	800ce10 <_strtod_l+0xc0>
 800cd76:	d839      	bhi.n	800cdec <_strtod_l+0x9c>
 800cd78:	290d      	cmp	r1, #13
 800cd7a:	d833      	bhi.n	800cde4 <_strtod_l+0x94>
 800cd7c:	2908      	cmp	r1, #8
 800cd7e:	d833      	bhi.n	800cde8 <_strtod_l+0x98>
 800cd80:	2900      	cmp	r1, #0
 800cd82:	d03c      	beq.n	800cdfe <_strtod_l+0xae>
 800cd84:	2200      	movs	r2, #0
 800cd86:	9208      	str	r2, [sp, #32]
 800cd88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800cd8a:	782a      	ldrb	r2, [r5, #0]
 800cd8c:	2a30      	cmp	r2, #48	@ 0x30
 800cd8e:	f040 80b5 	bne.w	800cefc <_strtod_l+0x1ac>
 800cd92:	786a      	ldrb	r2, [r5, #1]
 800cd94:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd98:	2a58      	cmp	r2, #88	@ 0x58
 800cd9a:	d170      	bne.n	800ce7e <_strtod_l+0x12e>
 800cd9c:	9302      	str	r3, [sp, #8]
 800cd9e:	9b08      	ldr	r3, [sp, #32]
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	ab12      	add	r3, sp, #72	@ 0x48
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	4a8b      	ldr	r2, [pc, #556]	@ (800cfd4 <_strtod_l+0x284>)
 800cda8:	9805      	ldr	r0, [sp, #20]
 800cdaa:	ab13      	add	r3, sp, #76	@ 0x4c
 800cdac:	a911      	add	r1, sp, #68	@ 0x44
 800cdae:	f001 faa3 	bl	800e2f8 <__gethex>
 800cdb2:	f010 060f 	ands.w	r6, r0, #15
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	d005      	beq.n	800cdc6 <_strtod_l+0x76>
 800cdba:	2e06      	cmp	r6, #6
 800cdbc:	d12a      	bne.n	800ce14 <_strtod_l+0xc4>
 800cdbe:	3501      	adds	r5, #1
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9511      	str	r5, [sp, #68]	@ 0x44
 800cdc4:	9308      	str	r3, [sp, #32]
 800cdc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f040 852f 	bne.w	800d82c <_strtod_l+0xadc>
 800cdce:	9b08      	ldr	r3, [sp, #32]
 800cdd0:	ec4b ab10 	vmov	d0, sl, fp
 800cdd4:	b1cb      	cbz	r3, 800ce0a <_strtod_l+0xba>
 800cdd6:	eeb1 0b40 	vneg.f64	d0, d0
 800cdda:	b017      	add	sp, #92	@ 0x5c
 800cddc:	ecbd 8b0a 	vpop	{d8-d12}
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	2920      	cmp	r1, #32
 800cde6:	d1cd      	bne.n	800cd84 <_strtod_l+0x34>
 800cde8:	3201      	adds	r2, #1
 800cdea:	e7c0      	b.n	800cd6e <_strtod_l+0x1e>
 800cdec:	292d      	cmp	r1, #45	@ 0x2d
 800cdee:	d1c9      	bne.n	800cd84 <_strtod_l+0x34>
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	9108      	str	r1, [sp, #32]
 800cdf4:	1c51      	adds	r1, r2, #1
 800cdf6:	9111      	str	r1, [sp, #68]	@ 0x44
 800cdf8:	7852      	ldrb	r2, [r2, #1]
 800cdfa:	2a00      	cmp	r2, #0
 800cdfc:	d1c4      	bne.n	800cd88 <_strtod_l+0x38>
 800cdfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f040 850f 	bne.w	800d828 <_strtod_l+0xad8>
 800ce0a:	ec4b ab10 	vmov	d0, sl, fp
 800ce0e:	e7e4      	b.n	800cdda <_strtod_l+0x8a>
 800ce10:	2100      	movs	r1, #0
 800ce12:	e7ee      	b.n	800cdf2 <_strtod_l+0xa2>
 800ce14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ce16:	b13a      	cbz	r2, 800ce28 <_strtod_l+0xd8>
 800ce18:	2135      	movs	r1, #53	@ 0x35
 800ce1a:	a814      	add	r0, sp, #80	@ 0x50
 800ce1c:	f7ff ff37 	bl	800cc8e <__copybits>
 800ce20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ce22:	9805      	ldr	r0, [sp, #20]
 800ce24:	f7ff fb08 	bl	800c438 <_Bfree>
 800ce28:	1e73      	subs	r3, r6, #1
 800ce2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d806      	bhi.n	800ce3e <_strtod_l+0xee>
 800ce30:	e8df f003 	tbb	[pc, r3]
 800ce34:	201d0314 	.word	0x201d0314
 800ce38:	14          	.byte	0x14
 800ce39:	00          	.byte	0x00
 800ce3a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ce3e:	05e3      	lsls	r3, r4, #23
 800ce40:	bf48      	it	mi
 800ce42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ce46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce4a:	0d1b      	lsrs	r3, r3, #20
 800ce4c:	051b      	lsls	r3, r3, #20
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1b9      	bne.n	800cdc6 <_strtod_l+0x76>
 800ce52:	f7fe fc3f 	bl	800b6d4 <__errno>
 800ce56:	2322      	movs	r3, #34	@ 0x22
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	e7b4      	b.n	800cdc6 <_strtod_l+0x76>
 800ce5c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ce60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ce64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ce68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce6c:	e7e7      	b.n	800ce3e <_strtod_l+0xee>
 800ce6e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800cfdc <_strtod_l+0x28c>
 800ce72:	e7e4      	b.n	800ce3e <_strtod_l+0xee>
 800ce74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ce78:	f04f 3aff 	mov.w	sl, #4294967295
 800ce7c:	e7df      	b.n	800ce3e <_strtod_l+0xee>
 800ce7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	9211      	str	r2, [sp, #68]	@ 0x44
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	2b30      	cmp	r3, #48	@ 0x30
 800ce88:	d0f9      	beq.n	800ce7e <_strtod_l+0x12e>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d09b      	beq.n	800cdc6 <_strtod_l+0x76>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	2600      	movs	r6, #0
 800ce92:	9307      	str	r3, [sp, #28]
 800ce94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce98:	46b1      	mov	r9, r6
 800ce9a:	4635      	mov	r5, r6
 800ce9c:	220a      	movs	r2, #10
 800ce9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800cea0:	7804      	ldrb	r4, [r0, #0]
 800cea2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800cea6:	b2d9      	uxtb	r1, r3
 800cea8:	2909      	cmp	r1, #9
 800ceaa:	d929      	bls.n	800cf00 <_strtod_l+0x1b0>
 800ceac:	494a      	ldr	r1, [pc, #296]	@ (800cfd8 <_strtod_l+0x288>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f7fe fb91 	bl	800b5d6 <strncmp>
 800ceb4:	b378      	cbz	r0, 800cf16 <_strtod_l+0x1c6>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	4622      	mov	r2, r4
 800ceba:	462b      	mov	r3, r5
 800cebc:	4607      	mov	r7, r0
 800cebe:	9006      	str	r0, [sp, #24]
 800cec0:	2a65      	cmp	r2, #101	@ 0x65
 800cec2:	d001      	beq.n	800cec8 <_strtod_l+0x178>
 800cec4:	2a45      	cmp	r2, #69	@ 0x45
 800cec6:	d117      	bne.n	800cef8 <_strtod_l+0x1a8>
 800cec8:	b91b      	cbnz	r3, 800ced2 <_strtod_l+0x182>
 800ceca:	9b07      	ldr	r3, [sp, #28]
 800cecc:	4303      	orrs	r3, r0
 800cece:	d096      	beq.n	800cdfe <_strtod_l+0xae>
 800ced0:	2300      	movs	r3, #0
 800ced2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ced6:	f108 0201 	add.w	r2, r8, #1
 800ceda:	9211      	str	r2, [sp, #68]	@ 0x44
 800cedc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cee0:	2a2b      	cmp	r2, #43	@ 0x2b
 800cee2:	d06b      	beq.n	800cfbc <_strtod_l+0x26c>
 800cee4:	2a2d      	cmp	r2, #45	@ 0x2d
 800cee6:	d071      	beq.n	800cfcc <_strtod_l+0x27c>
 800cee8:	f04f 0e00 	mov.w	lr, #0
 800ceec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cef0:	2c09      	cmp	r4, #9
 800cef2:	d979      	bls.n	800cfe8 <_strtod_l+0x298>
 800cef4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cef8:	2400      	movs	r4, #0
 800cefa:	e094      	b.n	800d026 <_strtod_l+0x2d6>
 800cefc:	2300      	movs	r3, #0
 800cefe:	e7c7      	b.n	800ce90 <_strtod_l+0x140>
 800cf00:	2d08      	cmp	r5, #8
 800cf02:	f100 0001 	add.w	r0, r0, #1
 800cf06:	bfd4      	ite	le
 800cf08:	fb02 3909 	mlale	r9, r2, r9, r3
 800cf0c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800cf10:	3501      	adds	r5, #1
 800cf12:	9011      	str	r0, [sp, #68]	@ 0x44
 800cf14:	e7c3      	b.n	800ce9e <_strtod_l+0x14e>
 800cf16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf1c:	785a      	ldrb	r2, [r3, #1]
 800cf1e:	b375      	cbz	r5, 800cf7e <_strtod_l+0x22e>
 800cf20:	4607      	mov	r7, r0
 800cf22:	462b      	mov	r3, r5
 800cf24:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cf28:	2909      	cmp	r1, #9
 800cf2a:	d913      	bls.n	800cf54 <_strtod_l+0x204>
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	9106      	str	r1, [sp, #24]
 800cf30:	e7c6      	b.n	800cec0 <_strtod_l+0x170>
 800cf32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf34:	1c5a      	adds	r2, r3, #1
 800cf36:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf38:	785a      	ldrb	r2, [r3, #1]
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	2a30      	cmp	r2, #48	@ 0x30
 800cf3e:	d0f8      	beq.n	800cf32 <_strtod_l+0x1e2>
 800cf40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cf44:	2b08      	cmp	r3, #8
 800cf46:	f200 8476 	bhi.w	800d836 <_strtod_l+0xae6>
 800cf4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf4e:	4607      	mov	r7, r0
 800cf50:	2000      	movs	r0, #0
 800cf52:	4603      	mov	r3, r0
 800cf54:	3a30      	subs	r2, #48	@ 0x30
 800cf56:	f100 0101 	add.w	r1, r0, #1
 800cf5a:	d023      	beq.n	800cfa4 <_strtod_l+0x254>
 800cf5c:	440f      	add	r7, r1
 800cf5e:	eb00 0c03 	add.w	ip, r0, r3
 800cf62:	4619      	mov	r1, r3
 800cf64:	240a      	movs	r4, #10
 800cf66:	4561      	cmp	r1, ip
 800cf68:	d10b      	bne.n	800cf82 <_strtod_l+0x232>
 800cf6a:	1c5c      	adds	r4, r3, #1
 800cf6c:	4403      	add	r3, r0
 800cf6e:	2b08      	cmp	r3, #8
 800cf70:	4404      	add	r4, r0
 800cf72:	dc11      	bgt.n	800cf98 <_strtod_l+0x248>
 800cf74:	230a      	movs	r3, #10
 800cf76:	fb03 2909 	mla	r9, r3, r9, r2
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	e013      	b.n	800cfa6 <_strtod_l+0x256>
 800cf7e:	4628      	mov	r0, r5
 800cf80:	e7dc      	b.n	800cf3c <_strtod_l+0x1ec>
 800cf82:	2908      	cmp	r1, #8
 800cf84:	f101 0101 	add.w	r1, r1, #1
 800cf88:	dc02      	bgt.n	800cf90 <_strtod_l+0x240>
 800cf8a:	fb04 f909 	mul.w	r9, r4, r9
 800cf8e:	e7ea      	b.n	800cf66 <_strtod_l+0x216>
 800cf90:	2910      	cmp	r1, #16
 800cf92:	bfd8      	it	le
 800cf94:	4366      	mulle	r6, r4
 800cf96:	e7e6      	b.n	800cf66 <_strtod_l+0x216>
 800cf98:	2b0f      	cmp	r3, #15
 800cf9a:	dcee      	bgt.n	800cf7a <_strtod_l+0x22a>
 800cf9c:	230a      	movs	r3, #10
 800cf9e:	fb03 2606 	mla	r6, r3, r6, r2
 800cfa2:	e7ea      	b.n	800cf7a <_strtod_l+0x22a>
 800cfa4:	461c      	mov	r4, r3
 800cfa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	9211      	str	r2, [sp, #68]	@ 0x44
 800cfac:	785a      	ldrb	r2, [r3, #1]
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	e7b7      	b.n	800cf24 <_strtod_l+0x1d4>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	2700      	movs	r7, #0
 800cfb8:	9306      	str	r3, [sp, #24]
 800cfba:	e786      	b.n	800ceca <_strtod_l+0x17a>
 800cfbc:	f04f 0e00 	mov.w	lr, #0
 800cfc0:	f108 0202 	add.w	r2, r8, #2
 800cfc4:	9211      	str	r2, [sp, #68]	@ 0x44
 800cfc6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cfca:	e78f      	b.n	800ceec <_strtod_l+0x19c>
 800cfcc:	f04f 0e01 	mov.w	lr, #1
 800cfd0:	e7f6      	b.n	800cfc0 <_strtod_l+0x270>
 800cfd2:	bf00      	nop
 800cfd4:	0800efd8 	.word	0x0800efd8
 800cfd8:	0800efc0 	.word	0x0800efc0
 800cfdc:	7ff00000 	.word	0x7ff00000
 800cfe0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfe2:	1c54      	adds	r4, r2, #1
 800cfe4:	9411      	str	r4, [sp, #68]	@ 0x44
 800cfe6:	7852      	ldrb	r2, [r2, #1]
 800cfe8:	2a30      	cmp	r2, #48	@ 0x30
 800cfea:	d0f9      	beq.n	800cfe0 <_strtod_l+0x290>
 800cfec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800cff0:	2c08      	cmp	r4, #8
 800cff2:	d881      	bhi.n	800cef8 <_strtod_l+0x1a8>
 800cff4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800cff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cffa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cffc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cffe:	1c51      	adds	r1, r2, #1
 800d000:	9111      	str	r1, [sp, #68]	@ 0x44
 800d002:	7852      	ldrb	r2, [r2, #1]
 800d004:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d008:	2c09      	cmp	r4, #9
 800d00a:	d938      	bls.n	800d07e <_strtod_l+0x32e>
 800d00c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d00e:	1b0c      	subs	r4, r1, r4
 800d010:	2c08      	cmp	r4, #8
 800d012:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d016:	dc02      	bgt.n	800d01e <_strtod_l+0x2ce>
 800d018:	4564      	cmp	r4, ip
 800d01a:	bfa8      	it	ge
 800d01c:	4664      	movge	r4, ip
 800d01e:	f1be 0f00 	cmp.w	lr, #0
 800d022:	d000      	beq.n	800d026 <_strtod_l+0x2d6>
 800d024:	4264      	negs	r4, r4
 800d026:	2b00      	cmp	r3, #0
 800d028:	d14e      	bne.n	800d0c8 <_strtod_l+0x378>
 800d02a:	9b07      	ldr	r3, [sp, #28]
 800d02c:	4318      	orrs	r0, r3
 800d02e:	f47f aeca 	bne.w	800cdc6 <_strtod_l+0x76>
 800d032:	9b06      	ldr	r3, [sp, #24]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f47f aee2 	bne.w	800cdfe <_strtod_l+0xae>
 800d03a:	2a69      	cmp	r2, #105	@ 0x69
 800d03c:	d027      	beq.n	800d08e <_strtod_l+0x33e>
 800d03e:	dc24      	bgt.n	800d08a <_strtod_l+0x33a>
 800d040:	2a49      	cmp	r2, #73	@ 0x49
 800d042:	d024      	beq.n	800d08e <_strtod_l+0x33e>
 800d044:	2a4e      	cmp	r2, #78	@ 0x4e
 800d046:	f47f aeda 	bne.w	800cdfe <_strtod_l+0xae>
 800d04a:	4997      	ldr	r1, [pc, #604]	@ (800d2a8 <_strtod_l+0x558>)
 800d04c:	a811      	add	r0, sp, #68	@ 0x44
 800d04e:	f001 fb75 	bl	800e73c <__match>
 800d052:	2800      	cmp	r0, #0
 800d054:	f43f aed3 	beq.w	800cdfe <_strtod_l+0xae>
 800d058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b28      	cmp	r3, #40	@ 0x28
 800d05e:	d12d      	bne.n	800d0bc <_strtod_l+0x36c>
 800d060:	4992      	ldr	r1, [pc, #584]	@ (800d2ac <_strtod_l+0x55c>)
 800d062:	aa14      	add	r2, sp, #80	@ 0x50
 800d064:	a811      	add	r0, sp, #68	@ 0x44
 800d066:	f001 fb7d 	bl	800e764 <__hexnan>
 800d06a:	2805      	cmp	r0, #5
 800d06c:	d126      	bne.n	800d0bc <_strtod_l+0x36c>
 800d06e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d070:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d074:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d078:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d07c:	e6a3      	b.n	800cdc6 <_strtod_l+0x76>
 800d07e:	240a      	movs	r4, #10
 800d080:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d084:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d088:	e7b8      	b.n	800cffc <_strtod_l+0x2ac>
 800d08a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d08c:	e7db      	b.n	800d046 <_strtod_l+0x2f6>
 800d08e:	4988      	ldr	r1, [pc, #544]	@ (800d2b0 <_strtod_l+0x560>)
 800d090:	a811      	add	r0, sp, #68	@ 0x44
 800d092:	f001 fb53 	bl	800e73c <__match>
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aeb1 	beq.w	800cdfe <_strtod_l+0xae>
 800d09c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d09e:	4985      	ldr	r1, [pc, #532]	@ (800d2b4 <_strtod_l+0x564>)
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	a811      	add	r0, sp, #68	@ 0x44
 800d0a4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0a6:	f001 fb49 	bl	800e73c <__match>
 800d0aa:	b910      	cbnz	r0, 800d0b2 <_strtod_l+0x362>
 800d0ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d2c8 <_strtod_l+0x578>
 800d0b6:	f04f 0a00 	mov.w	sl, #0
 800d0ba:	e684      	b.n	800cdc6 <_strtod_l+0x76>
 800d0bc:	487e      	ldr	r0, [pc, #504]	@ (800d2b8 <_strtod_l+0x568>)
 800d0be:	f001 f897 	bl	800e1f0 <nan>
 800d0c2:	ec5b ab10 	vmov	sl, fp, d0
 800d0c6:	e67e      	b.n	800cdc6 <_strtod_l+0x76>
 800d0c8:	ee07 9a90 	vmov	s15, r9
 800d0cc:	1be2      	subs	r2, r4, r7
 800d0ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0d2:	2d00      	cmp	r5, #0
 800d0d4:	bf08      	it	eq
 800d0d6:	461d      	moveq	r5, r3
 800d0d8:	2b10      	cmp	r3, #16
 800d0da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0dc:	461a      	mov	r2, r3
 800d0de:	bfa8      	it	ge
 800d0e0:	2210      	movge	r2, #16
 800d0e2:	2b09      	cmp	r3, #9
 800d0e4:	ec5b ab17 	vmov	sl, fp, d7
 800d0e8:	dc15      	bgt.n	800d116 <_strtod_l+0x3c6>
 800d0ea:	1be1      	subs	r1, r4, r7
 800d0ec:	2900      	cmp	r1, #0
 800d0ee:	f43f ae6a 	beq.w	800cdc6 <_strtod_l+0x76>
 800d0f2:	eba4 0107 	sub.w	r1, r4, r7
 800d0f6:	dd72      	ble.n	800d1de <_strtod_l+0x48e>
 800d0f8:	2916      	cmp	r1, #22
 800d0fa:	dc59      	bgt.n	800d1b0 <_strtod_l+0x460>
 800d0fc:	4b6f      	ldr	r3, [pc, #444]	@ (800d2bc <_strtod_l+0x56c>)
 800d0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d104:	ed93 7b00 	vldr	d7, [r3]
 800d108:	ec4b ab16 	vmov	d6, sl, fp
 800d10c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d110:	ec5b ab17 	vmov	sl, fp, d7
 800d114:	e657      	b.n	800cdc6 <_strtod_l+0x76>
 800d116:	4969      	ldr	r1, [pc, #420]	@ (800d2bc <_strtod_l+0x56c>)
 800d118:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d11c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d120:	ee06 6a90 	vmov	s13, r6
 800d124:	2b0f      	cmp	r3, #15
 800d126:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d12a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d12e:	ec5b ab16 	vmov	sl, fp, d6
 800d132:	ddda      	ble.n	800d0ea <_strtod_l+0x39a>
 800d134:	1a9a      	subs	r2, r3, r2
 800d136:	1be1      	subs	r1, r4, r7
 800d138:	440a      	add	r2, r1
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	f340 8094 	ble.w	800d268 <_strtod_l+0x518>
 800d140:	f012 000f 	ands.w	r0, r2, #15
 800d144:	d00a      	beq.n	800d15c <_strtod_l+0x40c>
 800d146:	495d      	ldr	r1, [pc, #372]	@ (800d2bc <_strtod_l+0x56c>)
 800d148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d14c:	ed91 7b00 	vldr	d7, [r1]
 800d150:	ec4b ab16 	vmov	d6, sl, fp
 800d154:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d158:	ec5b ab17 	vmov	sl, fp, d7
 800d15c:	f032 020f 	bics.w	r2, r2, #15
 800d160:	d073      	beq.n	800d24a <_strtod_l+0x4fa>
 800d162:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d166:	dd47      	ble.n	800d1f8 <_strtod_l+0x4a8>
 800d168:	2400      	movs	r4, #0
 800d16a:	4625      	mov	r5, r4
 800d16c:	9407      	str	r4, [sp, #28]
 800d16e:	4626      	mov	r6, r4
 800d170:	9a05      	ldr	r2, [sp, #20]
 800d172:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d2c8 <_strtod_l+0x578>
 800d176:	2322      	movs	r3, #34	@ 0x22
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	f04f 0a00 	mov.w	sl, #0
 800d17e:	9b07      	ldr	r3, [sp, #28]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f43f ae20 	beq.w	800cdc6 <_strtod_l+0x76>
 800d186:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d188:	9805      	ldr	r0, [sp, #20]
 800d18a:	f7ff f955 	bl	800c438 <_Bfree>
 800d18e:	9805      	ldr	r0, [sp, #20]
 800d190:	4631      	mov	r1, r6
 800d192:	f7ff f951 	bl	800c438 <_Bfree>
 800d196:	9805      	ldr	r0, [sp, #20]
 800d198:	4629      	mov	r1, r5
 800d19a:	f7ff f94d 	bl	800c438 <_Bfree>
 800d19e:	9907      	ldr	r1, [sp, #28]
 800d1a0:	9805      	ldr	r0, [sp, #20]
 800d1a2:	f7ff f949 	bl	800c438 <_Bfree>
 800d1a6:	9805      	ldr	r0, [sp, #20]
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	f7ff f945 	bl	800c438 <_Bfree>
 800d1ae:	e60a      	b.n	800cdc6 <_strtod_l+0x76>
 800d1b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d1b4:	1be0      	subs	r0, r4, r7
 800d1b6:	4281      	cmp	r1, r0
 800d1b8:	dbbc      	blt.n	800d134 <_strtod_l+0x3e4>
 800d1ba:	4a40      	ldr	r2, [pc, #256]	@ (800d2bc <_strtod_l+0x56c>)
 800d1bc:	f1c3 030f 	rsb	r3, r3, #15
 800d1c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d1c4:	ed91 7b00 	vldr	d7, [r1]
 800d1c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1ca:	ec4b ab16 	vmov	d6, sl, fp
 800d1ce:	1acb      	subs	r3, r1, r3
 800d1d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d1d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1d8:	ed92 6b00 	vldr	d6, [r2]
 800d1dc:	e796      	b.n	800d10c <_strtod_l+0x3bc>
 800d1de:	3116      	adds	r1, #22
 800d1e0:	dba8      	blt.n	800d134 <_strtod_l+0x3e4>
 800d1e2:	4b36      	ldr	r3, [pc, #216]	@ (800d2bc <_strtod_l+0x56c>)
 800d1e4:	1b3c      	subs	r4, r7, r4
 800d1e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d1ea:	ed94 7b00 	vldr	d7, [r4]
 800d1ee:	ec4b ab16 	vmov	d6, sl, fp
 800d1f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1f6:	e78b      	b.n	800d110 <_strtod_l+0x3c0>
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	ec4b ab17 	vmov	d7, sl, fp
 800d1fe:	4e30      	ldr	r6, [pc, #192]	@ (800d2c0 <_strtod_l+0x570>)
 800d200:	1112      	asrs	r2, r2, #4
 800d202:	4601      	mov	r1, r0
 800d204:	2a01      	cmp	r2, #1
 800d206:	dc23      	bgt.n	800d250 <_strtod_l+0x500>
 800d208:	b108      	cbz	r0, 800d20e <_strtod_l+0x4be>
 800d20a:	ec5b ab17 	vmov	sl, fp, d7
 800d20e:	4a2c      	ldr	r2, [pc, #176]	@ (800d2c0 <_strtod_l+0x570>)
 800d210:	482c      	ldr	r0, [pc, #176]	@ (800d2c4 <_strtod_l+0x574>)
 800d212:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d216:	ed92 7b00 	vldr	d7, [r2]
 800d21a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d21e:	ec4b ab16 	vmov	d6, sl, fp
 800d222:	4a29      	ldr	r2, [pc, #164]	@ (800d2c8 <_strtod_l+0x578>)
 800d224:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d228:	ee17 1a90 	vmov	r1, s15
 800d22c:	400a      	ands	r2, r1
 800d22e:	4282      	cmp	r2, r0
 800d230:	ec5b ab17 	vmov	sl, fp, d7
 800d234:	d898      	bhi.n	800d168 <_strtod_l+0x418>
 800d236:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d23a:	4282      	cmp	r2, r0
 800d23c:	bf86      	itte	hi
 800d23e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d2cc <_strtod_l+0x57c>
 800d242:	f04f 3aff 	movhi.w	sl, #4294967295
 800d246:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d24a:	2200      	movs	r2, #0
 800d24c:	9206      	str	r2, [sp, #24]
 800d24e:	e076      	b.n	800d33e <_strtod_l+0x5ee>
 800d250:	f012 0f01 	tst.w	r2, #1
 800d254:	d004      	beq.n	800d260 <_strtod_l+0x510>
 800d256:	ed96 6b00 	vldr	d6, [r6]
 800d25a:	2001      	movs	r0, #1
 800d25c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d260:	3101      	adds	r1, #1
 800d262:	1052      	asrs	r2, r2, #1
 800d264:	3608      	adds	r6, #8
 800d266:	e7cd      	b.n	800d204 <_strtod_l+0x4b4>
 800d268:	d0ef      	beq.n	800d24a <_strtod_l+0x4fa>
 800d26a:	4252      	negs	r2, r2
 800d26c:	f012 000f 	ands.w	r0, r2, #15
 800d270:	d00a      	beq.n	800d288 <_strtod_l+0x538>
 800d272:	4912      	ldr	r1, [pc, #72]	@ (800d2bc <_strtod_l+0x56c>)
 800d274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d278:	ed91 7b00 	vldr	d7, [r1]
 800d27c:	ec4b ab16 	vmov	d6, sl, fp
 800d280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d284:	ec5b ab17 	vmov	sl, fp, d7
 800d288:	1112      	asrs	r2, r2, #4
 800d28a:	d0de      	beq.n	800d24a <_strtod_l+0x4fa>
 800d28c:	2a1f      	cmp	r2, #31
 800d28e:	dd1f      	ble.n	800d2d0 <_strtod_l+0x580>
 800d290:	2400      	movs	r4, #0
 800d292:	4625      	mov	r5, r4
 800d294:	9407      	str	r4, [sp, #28]
 800d296:	4626      	mov	r6, r4
 800d298:	9a05      	ldr	r2, [sp, #20]
 800d29a:	2322      	movs	r3, #34	@ 0x22
 800d29c:	f04f 0a00 	mov.w	sl, #0
 800d2a0:	f04f 0b00 	mov.w	fp, #0
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	e76a      	b.n	800d17e <_strtod_l+0x42e>
 800d2a8:	0800edac 	.word	0x0800edac
 800d2ac:	0800efc4 	.word	0x0800efc4
 800d2b0:	0800eda4 	.word	0x0800eda4
 800d2b4:	0800eddb 	.word	0x0800eddb
 800d2b8:	0800ed9e 	.word	0x0800ed9e
 800d2bc:	0800eef8 	.word	0x0800eef8
 800d2c0:	0800eed0 	.word	0x0800eed0
 800d2c4:	7ca00000 	.word	0x7ca00000
 800d2c8:	7ff00000 	.word	0x7ff00000
 800d2cc:	7fefffff 	.word	0x7fefffff
 800d2d0:	f012 0110 	ands.w	r1, r2, #16
 800d2d4:	bf18      	it	ne
 800d2d6:	216a      	movne	r1, #106	@ 0x6a
 800d2d8:	9106      	str	r1, [sp, #24]
 800d2da:	ec4b ab17 	vmov	d7, sl, fp
 800d2de:	49b0      	ldr	r1, [pc, #704]	@ (800d5a0 <_strtod_l+0x850>)
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	07d6      	lsls	r6, r2, #31
 800d2e4:	d504      	bpl.n	800d2f0 <_strtod_l+0x5a0>
 800d2e6:	ed91 6b00 	vldr	d6, [r1]
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2f0:	1052      	asrs	r2, r2, #1
 800d2f2:	f101 0108 	add.w	r1, r1, #8
 800d2f6:	d1f4      	bne.n	800d2e2 <_strtod_l+0x592>
 800d2f8:	b108      	cbz	r0, 800d2fe <_strtod_l+0x5ae>
 800d2fa:	ec5b ab17 	vmov	sl, fp, d7
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	b1b2      	cbz	r2, 800d330 <_strtod_l+0x5e0>
 800d302:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d306:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d30a:	2a00      	cmp	r2, #0
 800d30c:	4658      	mov	r0, fp
 800d30e:	dd0f      	ble.n	800d330 <_strtod_l+0x5e0>
 800d310:	2a1f      	cmp	r2, #31
 800d312:	dd55      	ble.n	800d3c0 <_strtod_l+0x670>
 800d314:	2a34      	cmp	r2, #52	@ 0x34
 800d316:	bfde      	ittt	le
 800d318:	f04f 32ff 	movle.w	r2, #4294967295
 800d31c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d320:	408a      	lslle	r2, r1
 800d322:	f04f 0a00 	mov.w	sl, #0
 800d326:	bfcc      	ite	gt
 800d328:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d32c:	ea02 0b00 	andle.w	fp, r2, r0
 800d330:	ec4b ab17 	vmov	d7, sl, fp
 800d334:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33c:	d0a8      	beq.n	800d290 <_strtod_l+0x540>
 800d33e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d340:	9805      	ldr	r0, [sp, #20]
 800d342:	f8cd 9000 	str.w	r9, [sp]
 800d346:	462a      	mov	r2, r5
 800d348:	f7ff f8de 	bl	800c508 <__s2b>
 800d34c:	9007      	str	r0, [sp, #28]
 800d34e:	2800      	cmp	r0, #0
 800d350:	f43f af0a 	beq.w	800d168 <_strtod_l+0x418>
 800d354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d356:	1b3f      	subs	r7, r7, r4
 800d358:	2b00      	cmp	r3, #0
 800d35a:	bfb4      	ite	lt
 800d35c:	463b      	movlt	r3, r7
 800d35e:	2300      	movge	r3, #0
 800d360:	930a      	str	r3, [sp, #40]	@ 0x28
 800d362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d364:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d590 <_strtod_l+0x840>
 800d368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d36c:	2400      	movs	r4, #0
 800d36e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d370:	4625      	mov	r5, r4
 800d372:	9b07      	ldr	r3, [sp, #28]
 800d374:	9805      	ldr	r0, [sp, #20]
 800d376:	6859      	ldr	r1, [r3, #4]
 800d378:	f7ff f81e 	bl	800c3b8 <_Balloc>
 800d37c:	4606      	mov	r6, r0
 800d37e:	2800      	cmp	r0, #0
 800d380:	f43f aef6 	beq.w	800d170 <_strtod_l+0x420>
 800d384:	9b07      	ldr	r3, [sp, #28]
 800d386:	691a      	ldr	r2, [r3, #16]
 800d388:	ec4b ab19 	vmov	d9, sl, fp
 800d38c:	3202      	adds	r2, #2
 800d38e:	f103 010c 	add.w	r1, r3, #12
 800d392:	0092      	lsls	r2, r2, #2
 800d394:	300c      	adds	r0, #12
 800d396:	f7fe f9ca 	bl	800b72e <memcpy>
 800d39a:	eeb0 0b49 	vmov.f64	d0, d9
 800d39e:	9805      	ldr	r0, [sp, #20]
 800d3a0:	aa14      	add	r2, sp, #80	@ 0x50
 800d3a2:	a913      	add	r1, sp, #76	@ 0x4c
 800d3a4:	f7ff fbec 	bl	800cb80 <__d2b>
 800d3a8:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	f43f aee0 	beq.w	800d170 <_strtod_l+0x420>
 800d3b0:	9805      	ldr	r0, [sp, #20]
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	f7ff f93e 	bl	800c634 <__i2b>
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	b940      	cbnz	r0, 800d3ce <_strtod_l+0x67e>
 800d3bc:	2500      	movs	r5, #0
 800d3be:	e6d7      	b.n	800d170 <_strtod_l+0x420>
 800d3c0:	f04f 31ff 	mov.w	r1, #4294967295
 800d3c4:	fa01 f202 	lsl.w	r2, r1, r2
 800d3c8:	ea02 0a0a 	and.w	sl, r2, sl
 800d3cc:	e7b0      	b.n	800d330 <_strtod_l+0x5e0>
 800d3ce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d3d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d3d2:	2f00      	cmp	r7, #0
 800d3d4:	bfab      	itete	ge
 800d3d6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d3d8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d3da:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d3de:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d3e2:	bfac      	ite	ge
 800d3e4:	eb07 0903 	addge.w	r9, r7, r3
 800d3e8:	eba3 0807 	sublt.w	r8, r3, r7
 800d3ec:	9b06      	ldr	r3, [sp, #24]
 800d3ee:	1aff      	subs	r7, r7, r3
 800d3f0:	4417      	add	r7, r2
 800d3f2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d3f6:	4a6b      	ldr	r2, [pc, #428]	@ (800d5a4 <_strtod_l+0x854>)
 800d3f8:	3f01      	subs	r7, #1
 800d3fa:	4297      	cmp	r7, r2
 800d3fc:	da51      	bge.n	800d4a2 <_strtod_l+0x752>
 800d3fe:	1bd1      	subs	r1, r2, r7
 800d400:	291f      	cmp	r1, #31
 800d402:	eba3 0301 	sub.w	r3, r3, r1
 800d406:	f04f 0201 	mov.w	r2, #1
 800d40a:	dc3e      	bgt.n	800d48a <_strtod_l+0x73a>
 800d40c:	408a      	lsls	r2, r1
 800d40e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d410:	2200      	movs	r2, #0
 800d412:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d414:	eb09 0703 	add.w	r7, r9, r3
 800d418:	4498      	add	r8, r3
 800d41a:	9b06      	ldr	r3, [sp, #24]
 800d41c:	45b9      	cmp	r9, r7
 800d41e:	4498      	add	r8, r3
 800d420:	464b      	mov	r3, r9
 800d422:	bfa8      	it	ge
 800d424:	463b      	movge	r3, r7
 800d426:	4543      	cmp	r3, r8
 800d428:	bfa8      	it	ge
 800d42a:	4643      	movge	r3, r8
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	bfc2      	ittt	gt
 800d430:	1aff      	subgt	r7, r7, r3
 800d432:	eba8 0803 	subgt.w	r8, r8, r3
 800d436:	eba9 0903 	subgt.w	r9, r9, r3
 800d43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dd16      	ble.n	800d46e <_strtod_l+0x71e>
 800d440:	4629      	mov	r1, r5
 800d442:	9805      	ldr	r0, [sp, #20]
 800d444:	461a      	mov	r2, r3
 800d446:	f7ff f9b5 	bl	800c7b4 <__pow5mult>
 800d44a:	4605      	mov	r5, r0
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d0b5      	beq.n	800d3bc <_strtod_l+0x66c>
 800d450:	4601      	mov	r1, r0
 800d452:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d454:	9805      	ldr	r0, [sp, #20]
 800d456:	f7ff f903 	bl	800c660 <__multiply>
 800d45a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d45c:	2800      	cmp	r0, #0
 800d45e:	f43f ae87 	beq.w	800d170 <_strtod_l+0x420>
 800d462:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d464:	9805      	ldr	r0, [sp, #20]
 800d466:	f7fe ffe7 	bl	800c438 <_Bfree>
 800d46a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d46c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d46e:	2f00      	cmp	r7, #0
 800d470:	dc1b      	bgt.n	800d4aa <_strtod_l+0x75a>
 800d472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	dd21      	ble.n	800d4bc <_strtod_l+0x76c>
 800d478:	4631      	mov	r1, r6
 800d47a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d47c:	9805      	ldr	r0, [sp, #20]
 800d47e:	f7ff f999 	bl	800c7b4 <__pow5mult>
 800d482:	4606      	mov	r6, r0
 800d484:	b9d0      	cbnz	r0, 800d4bc <_strtod_l+0x76c>
 800d486:	2600      	movs	r6, #0
 800d488:	e672      	b.n	800d170 <_strtod_l+0x420>
 800d48a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d48e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d492:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d496:	37e2      	adds	r7, #226	@ 0xe2
 800d498:	fa02 f107 	lsl.w	r1, r2, r7
 800d49c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d49e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d4a0:	e7b8      	b.n	800d414 <_strtod_l+0x6c4>
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	e7f9      	b.n	800d49e <_strtod_l+0x74e>
 800d4aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d4ac:	9805      	ldr	r0, [sp, #20]
 800d4ae:	463a      	mov	r2, r7
 800d4b0:	f7ff f9da 	bl	800c868 <__lshift>
 800d4b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d1db      	bne.n	800d472 <_strtod_l+0x722>
 800d4ba:	e659      	b.n	800d170 <_strtod_l+0x420>
 800d4bc:	f1b8 0f00 	cmp.w	r8, #0
 800d4c0:	dd07      	ble.n	800d4d2 <_strtod_l+0x782>
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	9805      	ldr	r0, [sp, #20]
 800d4c6:	4642      	mov	r2, r8
 800d4c8:	f7ff f9ce 	bl	800c868 <__lshift>
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d0d9      	beq.n	800d486 <_strtod_l+0x736>
 800d4d2:	f1b9 0f00 	cmp.w	r9, #0
 800d4d6:	dd08      	ble.n	800d4ea <_strtod_l+0x79a>
 800d4d8:	4629      	mov	r1, r5
 800d4da:	9805      	ldr	r0, [sp, #20]
 800d4dc:	464a      	mov	r2, r9
 800d4de:	f7ff f9c3 	bl	800c868 <__lshift>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	f43f ae43 	beq.w	800d170 <_strtod_l+0x420>
 800d4ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d4ec:	9805      	ldr	r0, [sp, #20]
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	f7ff fa42 	bl	800c978 <__mdiff>
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f43f ae3a 	beq.w	800d170 <_strtod_l+0x420>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d502:	60c3      	str	r3, [r0, #12]
 800d504:	4629      	mov	r1, r5
 800d506:	f7ff fa1b 	bl	800c940 <__mcmp>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	da4e      	bge.n	800d5ac <_strtod_l+0x85c>
 800d50e:	ea58 080a 	orrs.w	r8, r8, sl
 800d512:	d174      	bne.n	800d5fe <_strtod_l+0x8ae>
 800d514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d170      	bne.n	800d5fe <_strtod_l+0x8ae>
 800d51c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d520:	0d1b      	lsrs	r3, r3, #20
 800d522:	051b      	lsls	r3, r3, #20
 800d524:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d528:	d969      	bls.n	800d5fe <_strtod_l+0x8ae>
 800d52a:	6963      	ldr	r3, [r4, #20]
 800d52c:	b913      	cbnz	r3, 800d534 <_strtod_l+0x7e4>
 800d52e:	6923      	ldr	r3, [r4, #16]
 800d530:	2b01      	cmp	r3, #1
 800d532:	dd64      	ble.n	800d5fe <_strtod_l+0x8ae>
 800d534:	4621      	mov	r1, r4
 800d536:	2201      	movs	r2, #1
 800d538:	9805      	ldr	r0, [sp, #20]
 800d53a:	f7ff f995 	bl	800c868 <__lshift>
 800d53e:	4629      	mov	r1, r5
 800d540:	4604      	mov	r4, r0
 800d542:	f7ff f9fd 	bl	800c940 <__mcmp>
 800d546:	2800      	cmp	r0, #0
 800d548:	dd59      	ble.n	800d5fe <_strtod_l+0x8ae>
 800d54a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d54e:	9a06      	ldr	r2, [sp, #24]
 800d550:	0d1b      	lsrs	r3, r3, #20
 800d552:	051b      	lsls	r3, r3, #20
 800d554:	2a00      	cmp	r2, #0
 800d556:	d070      	beq.n	800d63a <_strtod_l+0x8ea>
 800d558:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d55c:	d86d      	bhi.n	800d63a <_strtod_l+0x8ea>
 800d55e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d562:	f67f ae99 	bls.w	800d298 <_strtod_l+0x548>
 800d566:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d598 <_strtod_l+0x848>
 800d56a:	ec4b ab16 	vmov	d6, sl, fp
 800d56e:	4b0e      	ldr	r3, [pc, #56]	@ (800d5a8 <_strtod_l+0x858>)
 800d570:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d574:	ee17 2a90 	vmov	r2, s15
 800d578:	4013      	ands	r3, r2
 800d57a:	ec5b ab17 	vmov	sl, fp, d7
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f47f ae01 	bne.w	800d186 <_strtod_l+0x436>
 800d584:	9a05      	ldr	r2, [sp, #20]
 800d586:	2322      	movs	r3, #34	@ 0x22
 800d588:	6013      	str	r3, [r2, #0]
 800d58a:	e5fc      	b.n	800d186 <_strtod_l+0x436>
 800d58c:	f3af 8000 	nop.w
 800d590:	ffc00000 	.word	0xffc00000
 800d594:	41dfffff 	.word	0x41dfffff
 800d598:	00000000 	.word	0x00000000
 800d59c:	39500000 	.word	0x39500000
 800d5a0:	0800eff0 	.word	0x0800eff0
 800d5a4:	fffffc02 	.word	0xfffffc02
 800d5a8:	7ff00000 	.word	0x7ff00000
 800d5ac:	46d9      	mov	r9, fp
 800d5ae:	d15d      	bne.n	800d66c <_strtod_l+0x91c>
 800d5b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5b4:	f1b8 0f00 	cmp.w	r8, #0
 800d5b8:	d02a      	beq.n	800d610 <_strtod_l+0x8c0>
 800d5ba:	4aab      	ldr	r2, [pc, #684]	@ (800d868 <_strtod_l+0xb18>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d12a      	bne.n	800d616 <_strtod_l+0x8c6>
 800d5c0:	9b06      	ldr	r3, [sp, #24]
 800d5c2:	4652      	mov	r2, sl
 800d5c4:	b1fb      	cbz	r3, 800d606 <_strtod_l+0x8b6>
 800d5c6:	4ba9      	ldr	r3, [pc, #676]	@ (800d86c <_strtod_l+0xb1c>)
 800d5c8:	ea0b 0303 	and.w	r3, fp, r3
 800d5cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d5d0:	f04f 31ff 	mov.w	r1, #4294967295
 800d5d4:	d81a      	bhi.n	800d60c <_strtod_l+0x8bc>
 800d5d6:	0d1b      	lsrs	r3, r3, #20
 800d5d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d118      	bne.n	800d616 <_strtod_l+0x8c6>
 800d5e4:	4ba2      	ldr	r3, [pc, #648]	@ (800d870 <_strtod_l+0xb20>)
 800d5e6:	4599      	cmp	r9, r3
 800d5e8:	d102      	bne.n	800d5f0 <_strtod_l+0x8a0>
 800d5ea:	3201      	adds	r2, #1
 800d5ec:	f43f adc0 	beq.w	800d170 <_strtod_l+0x420>
 800d5f0:	4b9e      	ldr	r3, [pc, #632]	@ (800d86c <_strtod_l+0xb1c>)
 800d5f2:	ea09 0303 	and.w	r3, r9, r3
 800d5f6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d5fa:	f04f 0a00 	mov.w	sl, #0
 800d5fe:	9b06      	ldr	r3, [sp, #24]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1b0      	bne.n	800d566 <_strtod_l+0x816>
 800d604:	e5bf      	b.n	800d186 <_strtod_l+0x436>
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	e7e9      	b.n	800d5e0 <_strtod_l+0x890>
 800d60c:	460b      	mov	r3, r1
 800d60e:	e7e7      	b.n	800d5e0 <_strtod_l+0x890>
 800d610:	ea53 030a 	orrs.w	r3, r3, sl
 800d614:	d099      	beq.n	800d54a <_strtod_l+0x7fa>
 800d616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d618:	b1c3      	cbz	r3, 800d64c <_strtod_l+0x8fc>
 800d61a:	ea13 0f09 	tst.w	r3, r9
 800d61e:	d0ee      	beq.n	800d5fe <_strtod_l+0x8ae>
 800d620:	9a06      	ldr	r2, [sp, #24]
 800d622:	4650      	mov	r0, sl
 800d624:	4659      	mov	r1, fp
 800d626:	f1b8 0f00 	cmp.w	r8, #0
 800d62a:	d013      	beq.n	800d654 <_strtod_l+0x904>
 800d62c:	f7ff fb73 	bl	800cd16 <sulp>
 800d630:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d634:	ec5b ab17 	vmov	sl, fp, d7
 800d638:	e7e1      	b.n	800d5fe <_strtod_l+0x8ae>
 800d63a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d63e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d646:	f04f 3aff 	mov.w	sl, #4294967295
 800d64a:	e7d8      	b.n	800d5fe <_strtod_l+0x8ae>
 800d64c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d64e:	ea13 0f0a 	tst.w	r3, sl
 800d652:	e7e4      	b.n	800d61e <_strtod_l+0x8ce>
 800d654:	f7ff fb5f 	bl	800cd16 <sulp>
 800d658:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d65c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d664:	ec5b ab10 	vmov	sl, fp, d0
 800d668:	d1c9      	bne.n	800d5fe <_strtod_l+0x8ae>
 800d66a:	e615      	b.n	800d298 <_strtod_l+0x548>
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff fade 	bl	800cc30 <__ratio>
 800d674:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d678:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d680:	d85d      	bhi.n	800d73e <_strtod_l+0x9ee>
 800d682:	f1b8 0f00 	cmp.w	r8, #0
 800d686:	d164      	bne.n	800d752 <_strtod_l+0xa02>
 800d688:	f1ba 0f00 	cmp.w	sl, #0
 800d68c:	d14b      	bne.n	800d726 <_strtod_l+0x9d6>
 800d68e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d692:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d160      	bne.n	800d75c <_strtod_l+0xa0c>
 800d69a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d69e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	d401      	bmi.n	800d6ac <_strtod_l+0x95c>
 800d6a8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d6ac:	eeb1 ab48 	vneg.f64	d10, d8
 800d6b0:	486e      	ldr	r0, [pc, #440]	@ (800d86c <_strtod_l+0xb1c>)
 800d6b2:	4970      	ldr	r1, [pc, #448]	@ (800d874 <_strtod_l+0xb24>)
 800d6b4:	ea09 0700 	and.w	r7, r9, r0
 800d6b8:	428f      	cmp	r7, r1
 800d6ba:	ec53 2b1a 	vmov	r2, r3, d10
 800d6be:	d17d      	bne.n	800d7bc <_strtod_l+0xa6c>
 800d6c0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d6c4:	ec4b ab1c 	vmov	d12, sl, fp
 800d6c8:	eeb0 0b4c 	vmov.f64	d0, d12
 800d6cc:	f7ff f9e8 	bl	800caa0 <__ulp>
 800d6d0:	4866      	ldr	r0, [pc, #408]	@ (800d86c <_strtod_l+0xb1c>)
 800d6d2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d6d6:	ee1c 3a90 	vmov	r3, s25
 800d6da:	4a67      	ldr	r2, [pc, #412]	@ (800d878 <_strtod_l+0xb28>)
 800d6dc:	ea03 0100 	and.w	r1, r3, r0
 800d6e0:	4291      	cmp	r1, r2
 800d6e2:	ec5b ab1c 	vmov	sl, fp, d12
 800d6e6:	d93c      	bls.n	800d762 <_strtod_l+0xa12>
 800d6e8:	ee19 2a90 	vmov	r2, s19
 800d6ec:	4b60      	ldr	r3, [pc, #384]	@ (800d870 <_strtod_l+0xb20>)
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d104      	bne.n	800d6fc <_strtod_l+0x9ac>
 800d6f2:	ee19 3a10 	vmov	r3, s18
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	f43f ad3a 	beq.w	800d170 <_strtod_l+0x420>
 800d6fc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d870 <_strtod_l+0xb20>
 800d700:	f04f 3aff 	mov.w	sl, #4294967295
 800d704:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d706:	9805      	ldr	r0, [sp, #20]
 800d708:	f7fe fe96 	bl	800c438 <_Bfree>
 800d70c:	9805      	ldr	r0, [sp, #20]
 800d70e:	4631      	mov	r1, r6
 800d710:	f7fe fe92 	bl	800c438 <_Bfree>
 800d714:	9805      	ldr	r0, [sp, #20]
 800d716:	4629      	mov	r1, r5
 800d718:	f7fe fe8e 	bl	800c438 <_Bfree>
 800d71c:	9805      	ldr	r0, [sp, #20]
 800d71e:	4621      	mov	r1, r4
 800d720:	f7fe fe8a 	bl	800c438 <_Bfree>
 800d724:	e625      	b.n	800d372 <_strtod_l+0x622>
 800d726:	f1ba 0f01 	cmp.w	sl, #1
 800d72a:	d103      	bne.n	800d734 <_strtod_l+0x9e4>
 800d72c:	f1bb 0f00 	cmp.w	fp, #0
 800d730:	f43f adb2 	beq.w	800d298 <_strtod_l+0x548>
 800d734:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d738:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d73c:	e7b8      	b.n	800d6b0 <_strtod_l+0x960>
 800d73e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d742:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d746:	f1b8 0f00 	cmp.w	r8, #0
 800d74a:	d0af      	beq.n	800d6ac <_strtod_l+0x95c>
 800d74c:	eeb0 ab48 	vmov.f64	d10, d8
 800d750:	e7ae      	b.n	800d6b0 <_strtod_l+0x960>
 800d752:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d756:	eeb0 8b4a 	vmov.f64	d8, d10
 800d75a:	e7a9      	b.n	800d6b0 <_strtod_l+0x960>
 800d75c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d760:	e7a6      	b.n	800d6b0 <_strtod_l+0x960>
 800d762:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d766:	9b06      	ldr	r3, [sp, #24]
 800d768:	46d9      	mov	r9, fp
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1ca      	bne.n	800d704 <_strtod_l+0x9b4>
 800d76e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d772:	0d1b      	lsrs	r3, r3, #20
 800d774:	051b      	lsls	r3, r3, #20
 800d776:	429f      	cmp	r7, r3
 800d778:	d1c4      	bne.n	800d704 <_strtod_l+0x9b4>
 800d77a:	ec51 0b18 	vmov	r0, r1, d8
 800d77e:	f7f2 ffd3 	bl	8000728 <__aeabi_d2lz>
 800d782:	f7f2 ffa3 	bl	80006cc <__aeabi_l2d>
 800d786:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d78a:	ec41 0b17 	vmov	d7, r0, r1
 800d78e:	ea49 090a 	orr.w	r9, r9, sl
 800d792:	ea59 0908 	orrs.w	r9, r9, r8
 800d796:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d79a:	d03c      	beq.n	800d816 <_strtod_l+0xac6>
 800d79c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d850 <_strtod_l+0xb00>
 800d7a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	f53f aced 	bmi.w	800d186 <_strtod_l+0x436>
 800d7ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d858 <_strtod_l+0xb08>
 800d7b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b8:	dda4      	ble.n	800d704 <_strtod_l+0x9b4>
 800d7ba:	e4e4      	b.n	800d186 <_strtod_l+0x436>
 800d7bc:	9906      	ldr	r1, [sp, #24]
 800d7be:	b1e1      	cbz	r1, 800d7fa <_strtod_l+0xaaa>
 800d7c0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d7c4:	d819      	bhi.n	800d7fa <_strtod_l+0xaaa>
 800d7c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	d811      	bhi.n	800d7f4 <_strtod_l+0xaa4>
 800d7d0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d7d4:	ee18 3a10 	vmov	r3, s16
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	bf38      	it	cc
 800d7dc:	2301      	movcc	r3, #1
 800d7de:	ee08 3a10 	vmov	s16, r3
 800d7e2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d7e6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ea:	d111      	bne.n	800d810 <_strtod_l+0xac0>
 800d7ec:	eeb1 7b48 	vneg.f64	d7, d8
 800d7f0:	ec53 2b17 	vmov	r2, r3, d7
 800d7f4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d7f8:	1bcb      	subs	r3, r1, r7
 800d7fa:	eeb0 0b49 	vmov.f64	d0, d9
 800d7fe:	ec43 2b1a 	vmov	d10, r2, r3
 800d802:	f7ff f94d 	bl	800caa0 <__ulp>
 800d806:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d80a:	ec5b ab19 	vmov	sl, fp, d9
 800d80e:	e7aa      	b.n	800d766 <_strtod_l+0xa16>
 800d810:	eeb0 7b48 	vmov.f64	d7, d8
 800d814:	e7ec      	b.n	800d7f0 <_strtod_l+0xaa0>
 800d816:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d860 <_strtod_l+0xb10>
 800d81a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d822:	f57f af6f 	bpl.w	800d704 <_strtod_l+0x9b4>
 800d826:	e4ae      	b.n	800d186 <_strtod_l+0x436>
 800d828:	2300      	movs	r3, #0
 800d82a:	9308      	str	r3, [sp, #32]
 800d82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d82e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d830:	6013      	str	r3, [r2, #0]
 800d832:	f7ff bacc 	b.w	800cdce <_strtod_l+0x7e>
 800d836:	2a65      	cmp	r2, #101	@ 0x65
 800d838:	f43f abbc 	beq.w	800cfb4 <_strtod_l+0x264>
 800d83c:	2a45      	cmp	r2, #69	@ 0x45
 800d83e:	f43f abb9 	beq.w	800cfb4 <_strtod_l+0x264>
 800d842:	2301      	movs	r3, #1
 800d844:	9306      	str	r3, [sp, #24]
 800d846:	f7ff bbf0 	b.w	800d02a <_strtod_l+0x2da>
 800d84a:	bf00      	nop
 800d84c:	f3af 8000 	nop.w
 800d850:	94a03595 	.word	0x94a03595
 800d854:	3fdfffff 	.word	0x3fdfffff
 800d858:	35afe535 	.word	0x35afe535
 800d85c:	3fe00000 	.word	0x3fe00000
 800d860:	94a03595 	.word	0x94a03595
 800d864:	3fcfffff 	.word	0x3fcfffff
 800d868:	000fffff 	.word	0x000fffff
 800d86c:	7ff00000 	.word	0x7ff00000
 800d870:	7fefffff 	.word	0x7fefffff
 800d874:	7fe00000 	.word	0x7fe00000
 800d878:	7c9fffff 	.word	0x7c9fffff

0800d87c <_strtod_r>:
 800d87c:	4b01      	ldr	r3, [pc, #4]	@ (800d884 <_strtod_r+0x8>)
 800d87e:	f7ff ba67 	b.w	800cd50 <_strtod_l>
 800d882:	bf00      	nop
 800d884:	24000118 	.word	0x24000118

0800d888 <_strtol_l.constprop.0>:
 800d888:	2b24      	cmp	r3, #36	@ 0x24
 800d88a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d88e:	4686      	mov	lr, r0
 800d890:	4690      	mov	r8, r2
 800d892:	d801      	bhi.n	800d898 <_strtol_l.constprop.0+0x10>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d106      	bne.n	800d8a6 <_strtol_l.constprop.0+0x1e>
 800d898:	f7fd ff1c 	bl	800b6d4 <__errno>
 800d89c:	2316      	movs	r3, #22
 800d89e:	6003      	str	r3, [r0, #0]
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a6:	4834      	ldr	r0, [pc, #208]	@ (800d978 <_strtol_l.constprop.0+0xf0>)
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8b0:	5d06      	ldrb	r6, [r0, r4]
 800d8b2:	f016 0608 	ands.w	r6, r6, #8
 800d8b6:	d1f8      	bne.n	800d8aa <_strtol_l.constprop.0+0x22>
 800d8b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8ba:	d12d      	bne.n	800d918 <_strtol_l.constprop.0+0x90>
 800d8bc:	782c      	ldrb	r4, [r5, #0]
 800d8be:	2601      	movs	r6, #1
 800d8c0:	1c95      	adds	r5, r2, #2
 800d8c2:	f033 0210 	bics.w	r2, r3, #16
 800d8c6:	d109      	bne.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d8c8:	2c30      	cmp	r4, #48	@ 0x30
 800d8ca:	d12a      	bne.n	800d922 <_strtol_l.constprop.0+0x9a>
 800d8cc:	782a      	ldrb	r2, [r5, #0]
 800d8ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8d2:	2a58      	cmp	r2, #88	@ 0x58
 800d8d4:	d125      	bne.n	800d922 <_strtol_l.constprop.0+0x9a>
 800d8d6:	786c      	ldrb	r4, [r5, #1]
 800d8d8:	2310      	movs	r3, #16
 800d8da:	3502      	adds	r5, #2
 800d8dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	fbbc f9f3 	udiv	r9, ip, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8f4:	2f09      	cmp	r7, #9
 800d8f6:	d81b      	bhi.n	800d930 <_strtol_l.constprop.0+0xa8>
 800d8f8:	463c      	mov	r4, r7
 800d8fa:	42a3      	cmp	r3, r4
 800d8fc:	dd27      	ble.n	800d94e <_strtol_l.constprop.0+0xc6>
 800d8fe:	1c57      	adds	r7, r2, #1
 800d900:	d007      	beq.n	800d912 <_strtol_l.constprop.0+0x8a>
 800d902:	4581      	cmp	r9, r0
 800d904:	d320      	bcc.n	800d948 <_strtol_l.constprop.0+0xc0>
 800d906:	d101      	bne.n	800d90c <_strtol_l.constprop.0+0x84>
 800d908:	45a2      	cmp	sl, r4
 800d90a:	db1d      	blt.n	800d948 <_strtol_l.constprop.0+0xc0>
 800d90c:	fb00 4003 	mla	r0, r0, r3, r4
 800d910:	2201      	movs	r2, #1
 800d912:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d916:	e7eb      	b.n	800d8f0 <_strtol_l.constprop.0+0x68>
 800d918:	2c2b      	cmp	r4, #43	@ 0x2b
 800d91a:	bf04      	itt	eq
 800d91c:	782c      	ldrbeq	r4, [r5, #0]
 800d91e:	1c95      	addeq	r5, r2, #2
 800d920:	e7cf      	b.n	800d8c2 <_strtol_l.constprop.0+0x3a>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1da      	bne.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d926:	2c30      	cmp	r4, #48	@ 0x30
 800d928:	bf0c      	ite	eq
 800d92a:	2308      	moveq	r3, #8
 800d92c:	230a      	movne	r3, #10
 800d92e:	e7d5      	b.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d930:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d934:	2f19      	cmp	r7, #25
 800d936:	d801      	bhi.n	800d93c <_strtol_l.constprop.0+0xb4>
 800d938:	3c37      	subs	r4, #55	@ 0x37
 800d93a:	e7de      	b.n	800d8fa <_strtol_l.constprop.0+0x72>
 800d93c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d940:	2f19      	cmp	r7, #25
 800d942:	d804      	bhi.n	800d94e <_strtol_l.constprop.0+0xc6>
 800d944:	3c57      	subs	r4, #87	@ 0x57
 800d946:	e7d8      	b.n	800d8fa <_strtol_l.constprop.0+0x72>
 800d948:	f04f 32ff 	mov.w	r2, #4294967295
 800d94c:	e7e1      	b.n	800d912 <_strtol_l.constprop.0+0x8a>
 800d94e:	1c53      	adds	r3, r2, #1
 800d950:	d108      	bne.n	800d964 <_strtol_l.constprop.0+0xdc>
 800d952:	2322      	movs	r3, #34	@ 0x22
 800d954:	f8ce 3000 	str.w	r3, [lr]
 800d958:	4660      	mov	r0, ip
 800d95a:	f1b8 0f00 	cmp.w	r8, #0
 800d95e:	d0a0      	beq.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d960:	1e69      	subs	r1, r5, #1
 800d962:	e006      	b.n	800d972 <_strtol_l.constprop.0+0xea>
 800d964:	b106      	cbz	r6, 800d968 <_strtol_l.constprop.0+0xe0>
 800d966:	4240      	negs	r0, r0
 800d968:	f1b8 0f00 	cmp.w	r8, #0
 800d96c:	d099      	beq.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d1f6      	bne.n	800d960 <_strtol_l.constprop.0+0xd8>
 800d972:	f8c8 1000 	str.w	r1, [r8]
 800d976:	e794      	b.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d978:	0800f019 	.word	0x0800f019

0800d97c <_strtol_r>:
 800d97c:	f7ff bf84 	b.w	800d888 <_strtol_l.constprop.0>

0800d980 <__ssputs_r>:
 800d980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d984:	688e      	ldr	r6, [r1, #8]
 800d986:	461f      	mov	r7, r3
 800d988:	42be      	cmp	r6, r7
 800d98a:	680b      	ldr	r3, [r1, #0]
 800d98c:	4682      	mov	sl, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	4690      	mov	r8, r2
 800d992:	d82d      	bhi.n	800d9f0 <__ssputs_r+0x70>
 800d994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d99c:	d026      	beq.n	800d9ec <__ssputs_r+0x6c>
 800d99e:	6965      	ldr	r5, [r4, #20]
 800d9a0:	6909      	ldr	r1, [r1, #16]
 800d9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a6:	eba3 0901 	sub.w	r9, r3, r1
 800d9aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ae:	1c7b      	adds	r3, r7, #1
 800d9b0:	444b      	add	r3, r9
 800d9b2:	106d      	asrs	r5, r5, #1
 800d9b4:	429d      	cmp	r5, r3
 800d9b6:	bf38      	it	cc
 800d9b8:	461d      	movcc	r5, r3
 800d9ba:	0553      	lsls	r3, r2, #21
 800d9bc:	d527      	bpl.n	800da0e <__ssputs_r+0x8e>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7fc fdfc 	bl	800a5bc <_malloc_r>
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	b360      	cbz	r0, 800da22 <__ssputs_r+0xa2>
 800d9c8:	6921      	ldr	r1, [r4, #16]
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	f7fd feaf 	bl	800b72e <memcpy>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	6126      	str	r6, [r4, #16]
 800d9de:	6165      	str	r5, [r4, #20]
 800d9e0:	444e      	add	r6, r9
 800d9e2:	eba5 0509 	sub.w	r5, r5, r9
 800d9e6:	6026      	str	r6, [r4, #0]
 800d9e8:	60a5      	str	r5, [r4, #8]
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	42be      	cmp	r6, r7
 800d9ee:	d900      	bls.n	800d9f2 <__ssputs_r+0x72>
 800d9f0:	463e      	mov	r6, r7
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	f000 fb9c 	bl	800e134 <memmove>
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	1b9b      	subs	r3, r3, r6
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	4433      	add	r3, r6
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0e:	462a      	mov	r2, r5
 800da10:	f000 ff55 	bl	800e8be <_realloc_r>
 800da14:	4606      	mov	r6, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d1e0      	bne.n	800d9dc <__ssputs_r+0x5c>
 800da1a:	6921      	ldr	r1, [r4, #16]
 800da1c:	4650      	mov	r0, sl
 800da1e:	f7fe fc81 	bl	800c324 <_free_r>
 800da22:	230c      	movs	r3, #12
 800da24:	f8ca 3000 	str.w	r3, [sl]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	e7e9      	b.n	800da0a <__ssputs_r+0x8a>
	...

0800da38 <_svfiprintf_r>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4698      	mov	r8, r3
 800da3e:	898b      	ldrh	r3, [r1, #12]
 800da40:	061b      	lsls	r3, r3, #24
 800da42:	b09d      	sub	sp, #116	@ 0x74
 800da44:	4607      	mov	r7, r0
 800da46:	460d      	mov	r5, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	d510      	bpl.n	800da6e <_svfiprintf_r+0x36>
 800da4c:	690b      	ldr	r3, [r1, #16]
 800da4e:	b973      	cbnz	r3, 800da6e <_svfiprintf_r+0x36>
 800da50:	2140      	movs	r1, #64	@ 0x40
 800da52:	f7fc fdb3 	bl	800a5bc <_malloc_r>
 800da56:	6028      	str	r0, [r5, #0]
 800da58:	6128      	str	r0, [r5, #16]
 800da5a:	b930      	cbnz	r0, 800da6a <_svfiprintf_r+0x32>
 800da5c:	230c      	movs	r3, #12
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	b01d      	add	sp, #116	@ 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	2340      	movs	r3, #64	@ 0x40
 800da6c:	616b      	str	r3, [r5, #20]
 800da6e:	2300      	movs	r3, #0
 800da70:	9309      	str	r3, [sp, #36]	@ 0x24
 800da72:	2320      	movs	r3, #32
 800da74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da78:	f8cd 800c 	str.w	r8, [sp, #12]
 800da7c:	2330      	movs	r3, #48	@ 0x30
 800da7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc1c <_svfiprintf_r+0x1e4>
 800da82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da86:	f04f 0901 	mov.w	r9, #1
 800da8a:	4623      	mov	r3, r4
 800da8c:	469a      	mov	sl, r3
 800da8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da92:	b10a      	cbz	r2, 800da98 <_svfiprintf_r+0x60>
 800da94:	2a25      	cmp	r2, #37	@ 0x25
 800da96:	d1f9      	bne.n	800da8c <_svfiprintf_r+0x54>
 800da98:	ebba 0b04 	subs.w	fp, sl, r4
 800da9c:	d00b      	beq.n	800dab6 <_svfiprintf_r+0x7e>
 800da9e:	465b      	mov	r3, fp
 800daa0:	4622      	mov	r2, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff ff6b 	bl	800d980 <__ssputs_r>
 800daaa:	3001      	adds	r0, #1
 800daac:	f000 80a7 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab2:	445a      	add	r2, fp
 800dab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dab6:	f89a 3000 	ldrb.w	r3, [sl]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 809f 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dac0:	2300      	movs	r3, #0
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daca:	f10a 0a01 	add.w	sl, sl, #1
 800dace:	9304      	str	r3, [sp, #16]
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dad6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dad8:	4654      	mov	r4, sl
 800dada:	2205      	movs	r2, #5
 800dadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae0:	484e      	ldr	r0, [pc, #312]	@ (800dc1c <_svfiprintf_r+0x1e4>)
 800dae2:	f7f2 fc0d 	bl	8000300 <memchr>
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	b9d8      	cbnz	r0, 800db22 <_svfiprintf_r+0xea>
 800daea:	06d0      	lsls	r0, r2, #27
 800daec:	bf44      	itt	mi
 800daee:	2320      	movmi	r3, #32
 800daf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daf4:	0711      	lsls	r1, r2, #28
 800daf6:	bf44      	itt	mi
 800daf8:	232b      	movmi	r3, #43	@ 0x2b
 800dafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	2b2a      	cmp	r3, #42	@ 0x2a
 800db04:	d015      	beq.n	800db32 <_svfiprintf_r+0xfa>
 800db06:	9a07      	ldr	r2, [sp, #28]
 800db08:	4654      	mov	r4, sl
 800db0a:	2000      	movs	r0, #0
 800db0c:	f04f 0c0a 	mov.w	ip, #10
 800db10:	4621      	mov	r1, r4
 800db12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db16:	3b30      	subs	r3, #48	@ 0x30
 800db18:	2b09      	cmp	r3, #9
 800db1a:	d94b      	bls.n	800dbb4 <_svfiprintf_r+0x17c>
 800db1c:	b1b0      	cbz	r0, 800db4c <_svfiprintf_r+0x114>
 800db1e:	9207      	str	r2, [sp, #28]
 800db20:	e014      	b.n	800db4c <_svfiprintf_r+0x114>
 800db22:	eba0 0308 	sub.w	r3, r0, r8
 800db26:	fa09 f303 	lsl.w	r3, r9, r3
 800db2a:	4313      	orrs	r3, r2
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	46a2      	mov	sl, r4
 800db30:	e7d2      	b.n	800dad8 <_svfiprintf_r+0xa0>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	1d19      	adds	r1, r3, #4
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	9103      	str	r1, [sp, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	bfbb      	ittet	lt
 800db3e:	425b      	neglt	r3, r3
 800db40:	f042 0202 	orrlt.w	r2, r2, #2
 800db44:	9307      	strge	r3, [sp, #28]
 800db46:	9307      	strlt	r3, [sp, #28]
 800db48:	bfb8      	it	lt
 800db4a:	9204      	strlt	r2, [sp, #16]
 800db4c:	7823      	ldrb	r3, [r4, #0]
 800db4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800db50:	d10a      	bne.n	800db68 <_svfiprintf_r+0x130>
 800db52:	7863      	ldrb	r3, [r4, #1]
 800db54:	2b2a      	cmp	r3, #42	@ 0x2a
 800db56:	d132      	bne.n	800dbbe <_svfiprintf_r+0x186>
 800db58:	9b03      	ldr	r3, [sp, #12]
 800db5a:	1d1a      	adds	r2, r3, #4
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	9203      	str	r2, [sp, #12]
 800db60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db64:	3402      	adds	r4, #2
 800db66:	9305      	str	r3, [sp, #20]
 800db68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc2c <_svfiprintf_r+0x1f4>
 800db6c:	7821      	ldrb	r1, [r4, #0]
 800db6e:	2203      	movs	r2, #3
 800db70:	4650      	mov	r0, sl
 800db72:	f7f2 fbc5 	bl	8000300 <memchr>
 800db76:	b138      	cbz	r0, 800db88 <_svfiprintf_r+0x150>
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	eba0 000a 	sub.w	r0, r0, sl
 800db7e:	2240      	movs	r2, #64	@ 0x40
 800db80:	4082      	lsls	r2, r0
 800db82:	4313      	orrs	r3, r2
 800db84:	3401      	adds	r4, #1
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8c:	4824      	ldr	r0, [pc, #144]	@ (800dc20 <_svfiprintf_r+0x1e8>)
 800db8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db92:	2206      	movs	r2, #6
 800db94:	f7f2 fbb4 	bl	8000300 <memchr>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d036      	beq.n	800dc0a <_svfiprintf_r+0x1d2>
 800db9c:	4b21      	ldr	r3, [pc, #132]	@ (800dc24 <_svfiprintf_r+0x1ec>)
 800db9e:	bb1b      	cbnz	r3, 800dbe8 <_svfiprintf_r+0x1b0>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3307      	adds	r3, #7
 800dba4:	f023 0307 	bic.w	r3, r3, #7
 800dba8:	3308      	adds	r3, #8
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbae:	4433      	add	r3, r6
 800dbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb2:	e76a      	b.n	800da8a <_svfiprintf_r+0x52>
 800dbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb8:	460c      	mov	r4, r1
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7a8      	b.n	800db10 <_svfiprintf_r+0xd8>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbd0:	3a30      	subs	r2, #48	@ 0x30
 800dbd2:	2a09      	cmp	r2, #9
 800dbd4:	d903      	bls.n	800dbde <_svfiprintf_r+0x1a6>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0c6      	beq.n	800db68 <_svfiprintf_r+0x130>
 800dbda:	9105      	str	r1, [sp, #20]
 800dbdc:	e7c4      	b.n	800db68 <_svfiprintf_r+0x130>
 800dbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7f0      	b.n	800dbca <_svfiprintf_r+0x192>
 800dbe8:	ab03      	add	r3, sp, #12
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	462a      	mov	r2, r5
 800dbee:	4b0e      	ldr	r3, [pc, #56]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	f7fc fdfc 	bl	800a7f0 <_printf_float>
 800dbf8:	1c42      	adds	r2, r0, #1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	d1d6      	bne.n	800dbac <_svfiprintf_r+0x174>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	065b      	lsls	r3, r3, #25
 800dc02:	f53f af2d 	bmi.w	800da60 <_svfiprintf_r+0x28>
 800dc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc08:	e72c      	b.n	800da64 <_svfiprintf_r+0x2c>
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462a      	mov	r2, r5
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7fd f873 	bl	800ad00 <_printf_i>
 800dc1a:	e7ed      	b.n	800dbf8 <_svfiprintf_r+0x1c0>
 800dc1c:	0800f119 	.word	0x0800f119
 800dc20:	0800f123 	.word	0x0800f123
 800dc24:	0800a7f1 	.word	0x0800a7f1
 800dc28:	0800d981 	.word	0x0800d981
 800dc2c:	0800f11f 	.word	0x0800f11f

0800dc30 <__sfputc_r>:
 800dc30:	6893      	ldr	r3, [r2, #8]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	b410      	push	{r4}
 800dc38:	6093      	str	r3, [r2, #8]
 800dc3a:	da08      	bge.n	800dc4e <__sfputc_r+0x1e>
 800dc3c:	6994      	ldr	r4, [r2, #24]
 800dc3e:	42a3      	cmp	r3, r4
 800dc40:	db01      	blt.n	800dc46 <__sfputc_r+0x16>
 800dc42:	290a      	cmp	r1, #10
 800dc44:	d103      	bne.n	800dc4e <__sfputc_r+0x1e>
 800dc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc4a:	f000 b9df 	b.w	800e00c <__swbuf_r>
 800dc4e:	6813      	ldr	r3, [r2, #0]
 800dc50:	1c58      	adds	r0, r3, #1
 800dc52:	6010      	str	r0, [r2, #0]
 800dc54:	7019      	strb	r1, [r3, #0]
 800dc56:	4608      	mov	r0, r1
 800dc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <__sfputs_r>:
 800dc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc60:	4606      	mov	r6, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	4614      	mov	r4, r2
 800dc66:	18d5      	adds	r5, r2, r3
 800dc68:	42ac      	cmp	r4, r5
 800dc6a:	d101      	bne.n	800dc70 <__sfputs_r+0x12>
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e007      	b.n	800dc80 <__sfputs_r+0x22>
 800dc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc74:	463a      	mov	r2, r7
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7ff ffda 	bl	800dc30 <__sfputc_r>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d1f3      	bne.n	800dc68 <__sfputs_r+0xa>
 800dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc84 <_vfiprintf_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	460d      	mov	r5, r1
 800dc8a:	b09d      	sub	sp, #116	@ 0x74
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	4698      	mov	r8, r3
 800dc90:	4606      	mov	r6, r0
 800dc92:	b118      	cbz	r0, 800dc9c <_vfiprintf_r+0x18>
 800dc94:	6a03      	ldr	r3, [r0, #32]
 800dc96:	b90b      	cbnz	r3, 800dc9c <_vfiprintf_r+0x18>
 800dc98:	f7fd fbea 	bl	800b470 <__sinit>
 800dc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc9e:	07d9      	lsls	r1, r3, #31
 800dca0:	d405      	bmi.n	800dcae <_vfiprintf_r+0x2a>
 800dca2:	89ab      	ldrh	r3, [r5, #12]
 800dca4:	059a      	lsls	r2, r3, #22
 800dca6:	d402      	bmi.n	800dcae <_vfiprintf_r+0x2a>
 800dca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcaa:	f7fd fd3e 	bl	800b72a <__retarget_lock_acquire_recursive>
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	071b      	lsls	r3, r3, #28
 800dcb2:	d501      	bpl.n	800dcb8 <_vfiprintf_r+0x34>
 800dcb4:	692b      	ldr	r3, [r5, #16]
 800dcb6:	b99b      	cbnz	r3, 800dce0 <_vfiprintf_r+0x5c>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f000 f9e4 	bl	800e088 <__swsetup_r>
 800dcc0:	b170      	cbz	r0, 800dce0 <_vfiprintf_r+0x5c>
 800dcc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc4:	07dc      	lsls	r4, r3, #31
 800dcc6:	d504      	bpl.n	800dcd2 <_vfiprintf_r+0x4e>
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dccc:	b01d      	add	sp, #116	@ 0x74
 800dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd2:	89ab      	ldrh	r3, [r5, #12]
 800dcd4:	0598      	lsls	r0, r3, #22
 800dcd6:	d4f7      	bmi.n	800dcc8 <_vfiprintf_r+0x44>
 800dcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcda:	f7fd fd27 	bl	800b72c <__retarget_lock_release_recursive>
 800dcde:	e7f3      	b.n	800dcc8 <_vfiprintf_r+0x44>
 800dce0:	2300      	movs	r3, #0
 800dce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce4:	2320      	movs	r3, #32
 800dce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcea:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcee:	2330      	movs	r3, #48	@ 0x30
 800dcf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dea0 <_vfiprintf_r+0x21c>
 800dcf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcf8:	f04f 0901 	mov.w	r9, #1
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	469a      	mov	sl, r3
 800dd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd04:	b10a      	cbz	r2, 800dd0a <_vfiprintf_r+0x86>
 800dd06:	2a25      	cmp	r2, #37	@ 0x25
 800dd08:	d1f9      	bne.n	800dcfe <_vfiprintf_r+0x7a>
 800dd0a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd0e:	d00b      	beq.n	800dd28 <_vfiprintf_r+0xa4>
 800dd10:	465b      	mov	r3, fp
 800dd12:	4622      	mov	r2, r4
 800dd14:	4629      	mov	r1, r5
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff ffa1 	bl	800dc5e <__sfputs_r>
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	f000 80a7 	beq.w	800de70 <_vfiprintf_r+0x1ec>
 800dd22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd24:	445a      	add	r2, fp
 800dd26:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd28:	f89a 3000 	ldrb.w	r3, [sl]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 809f 	beq.w	800de70 <_vfiprintf_r+0x1ec>
 800dd32:	2300      	movs	r3, #0
 800dd34:	f04f 32ff 	mov.w	r2, #4294967295
 800dd38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd3c:	f10a 0a01 	add.w	sl, sl, #1
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	9307      	str	r3, [sp, #28]
 800dd44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd48:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd4a:	4654      	mov	r4, sl
 800dd4c:	2205      	movs	r2, #5
 800dd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd52:	4853      	ldr	r0, [pc, #332]	@ (800dea0 <_vfiprintf_r+0x21c>)
 800dd54:	f7f2 fad4 	bl	8000300 <memchr>
 800dd58:	9a04      	ldr	r2, [sp, #16]
 800dd5a:	b9d8      	cbnz	r0, 800dd94 <_vfiprintf_r+0x110>
 800dd5c:	06d1      	lsls	r1, r2, #27
 800dd5e:	bf44      	itt	mi
 800dd60:	2320      	movmi	r3, #32
 800dd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd66:	0713      	lsls	r3, r2, #28
 800dd68:	bf44      	itt	mi
 800dd6a:	232b      	movmi	r3, #43	@ 0x2b
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd70:	f89a 3000 	ldrb.w	r3, [sl]
 800dd74:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd76:	d015      	beq.n	800dda4 <_vfiprintf_r+0x120>
 800dd78:	9a07      	ldr	r2, [sp, #28]
 800dd7a:	4654      	mov	r4, sl
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	f04f 0c0a 	mov.w	ip, #10
 800dd82:	4621      	mov	r1, r4
 800dd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd88:	3b30      	subs	r3, #48	@ 0x30
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d94b      	bls.n	800de26 <_vfiprintf_r+0x1a2>
 800dd8e:	b1b0      	cbz	r0, 800ddbe <_vfiprintf_r+0x13a>
 800dd90:	9207      	str	r2, [sp, #28]
 800dd92:	e014      	b.n	800ddbe <_vfiprintf_r+0x13a>
 800dd94:	eba0 0308 	sub.w	r3, r0, r8
 800dd98:	fa09 f303 	lsl.w	r3, r9, r3
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	9304      	str	r3, [sp, #16]
 800dda0:	46a2      	mov	sl, r4
 800dda2:	e7d2      	b.n	800dd4a <_vfiprintf_r+0xc6>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	1d19      	adds	r1, r3, #4
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	9103      	str	r1, [sp, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	bfbb      	ittet	lt
 800ddb0:	425b      	neglt	r3, r3
 800ddb2:	f042 0202 	orrlt.w	r2, r2, #2
 800ddb6:	9307      	strge	r3, [sp, #28]
 800ddb8:	9307      	strlt	r3, [sp, #28]
 800ddba:	bfb8      	it	lt
 800ddbc:	9204      	strlt	r2, [sp, #16]
 800ddbe:	7823      	ldrb	r3, [r4, #0]
 800ddc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddc2:	d10a      	bne.n	800ddda <_vfiprintf_r+0x156>
 800ddc4:	7863      	ldrb	r3, [r4, #1]
 800ddc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc8:	d132      	bne.n	800de30 <_vfiprintf_r+0x1ac>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	1d1a      	adds	r2, r3, #4
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	9203      	str	r2, [sp, #12]
 800ddd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddd6:	3402      	adds	r4, #2
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800deb0 <_vfiprintf_r+0x22c>
 800ddde:	7821      	ldrb	r1, [r4, #0]
 800dde0:	2203      	movs	r2, #3
 800dde2:	4650      	mov	r0, sl
 800dde4:	f7f2 fa8c 	bl	8000300 <memchr>
 800dde8:	b138      	cbz	r0, 800ddfa <_vfiprintf_r+0x176>
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	eba0 000a 	sub.w	r0, r0, sl
 800ddf0:	2240      	movs	r2, #64	@ 0x40
 800ddf2:	4082      	lsls	r2, r0
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	3401      	adds	r4, #1
 800ddf8:	9304      	str	r3, [sp, #16]
 800ddfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfe:	4829      	ldr	r0, [pc, #164]	@ (800dea4 <_vfiprintf_r+0x220>)
 800de00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de04:	2206      	movs	r2, #6
 800de06:	f7f2 fa7b 	bl	8000300 <memchr>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d03f      	beq.n	800de8e <_vfiprintf_r+0x20a>
 800de0e:	4b26      	ldr	r3, [pc, #152]	@ (800dea8 <_vfiprintf_r+0x224>)
 800de10:	bb1b      	cbnz	r3, 800de5a <_vfiprintf_r+0x1d6>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	3307      	adds	r3, #7
 800de16:	f023 0307 	bic.w	r3, r3, #7
 800de1a:	3308      	adds	r3, #8
 800de1c:	9303      	str	r3, [sp, #12]
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	443b      	add	r3, r7
 800de22:	9309      	str	r3, [sp, #36]	@ 0x24
 800de24:	e76a      	b.n	800dcfc <_vfiprintf_r+0x78>
 800de26:	fb0c 3202 	mla	r2, ip, r2, r3
 800de2a:	460c      	mov	r4, r1
 800de2c:	2001      	movs	r0, #1
 800de2e:	e7a8      	b.n	800dd82 <_vfiprintf_r+0xfe>
 800de30:	2300      	movs	r3, #0
 800de32:	3401      	adds	r4, #1
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	4619      	mov	r1, r3
 800de38:	f04f 0c0a 	mov.w	ip, #10
 800de3c:	4620      	mov	r0, r4
 800de3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de42:	3a30      	subs	r2, #48	@ 0x30
 800de44:	2a09      	cmp	r2, #9
 800de46:	d903      	bls.n	800de50 <_vfiprintf_r+0x1cc>
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0c6      	beq.n	800ddda <_vfiprintf_r+0x156>
 800de4c:	9105      	str	r1, [sp, #20]
 800de4e:	e7c4      	b.n	800ddda <_vfiprintf_r+0x156>
 800de50:	fb0c 2101 	mla	r1, ip, r1, r2
 800de54:	4604      	mov	r4, r0
 800de56:	2301      	movs	r3, #1
 800de58:	e7f0      	b.n	800de3c <_vfiprintf_r+0x1b8>
 800de5a:	ab03      	add	r3, sp, #12
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	462a      	mov	r2, r5
 800de60:	4b12      	ldr	r3, [pc, #72]	@ (800deac <_vfiprintf_r+0x228>)
 800de62:	a904      	add	r1, sp, #16
 800de64:	4630      	mov	r0, r6
 800de66:	f7fc fcc3 	bl	800a7f0 <_printf_float>
 800de6a:	4607      	mov	r7, r0
 800de6c:	1c78      	adds	r0, r7, #1
 800de6e:	d1d6      	bne.n	800de1e <_vfiprintf_r+0x19a>
 800de70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de72:	07d9      	lsls	r1, r3, #31
 800de74:	d405      	bmi.n	800de82 <_vfiprintf_r+0x1fe>
 800de76:	89ab      	ldrh	r3, [r5, #12]
 800de78:	059a      	lsls	r2, r3, #22
 800de7a:	d402      	bmi.n	800de82 <_vfiprintf_r+0x1fe>
 800de7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7e:	f7fd fc55 	bl	800b72c <__retarget_lock_release_recursive>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	065b      	lsls	r3, r3, #25
 800de86:	f53f af1f 	bmi.w	800dcc8 <_vfiprintf_r+0x44>
 800de8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de8c:	e71e      	b.n	800dccc <_vfiprintf_r+0x48>
 800de8e:	ab03      	add	r3, sp, #12
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	462a      	mov	r2, r5
 800de94:	4b05      	ldr	r3, [pc, #20]	@ (800deac <_vfiprintf_r+0x228>)
 800de96:	a904      	add	r1, sp, #16
 800de98:	4630      	mov	r0, r6
 800de9a:	f7fc ff31 	bl	800ad00 <_printf_i>
 800de9e:	e7e4      	b.n	800de6a <_vfiprintf_r+0x1e6>
 800dea0:	0800f119 	.word	0x0800f119
 800dea4:	0800f123 	.word	0x0800f123
 800dea8:	0800a7f1 	.word	0x0800a7f1
 800deac:	0800dc5f 	.word	0x0800dc5f
 800deb0:	0800f11f 	.word	0x0800f11f

0800deb4 <__sflush_r>:
 800deb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	0716      	lsls	r6, r2, #28
 800debe:	4605      	mov	r5, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	d454      	bmi.n	800df6e <__sflush_r+0xba>
 800dec4:	684b      	ldr	r3, [r1, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dc02      	bgt.n	800ded0 <__sflush_r+0x1c>
 800deca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800decc:	2b00      	cmp	r3, #0
 800dece:	dd48      	ble.n	800df62 <__sflush_r+0xae>
 800ded0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	d045      	beq.n	800df62 <__sflush_r+0xae>
 800ded6:	2300      	movs	r3, #0
 800ded8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dedc:	682f      	ldr	r7, [r5, #0]
 800dede:	6a21      	ldr	r1, [r4, #32]
 800dee0:	602b      	str	r3, [r5, #0]
 800dee2:	d030      	beq.n	800df46 <__sflush_r+0x92>
 800dee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	0759      	lsls	r1, r3, #29
 800deea:	d505      	bpl.n	800def8 <__sflush_r+0x44>
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800def2:	b10b      	cbz	r3, 800def8 <__sflush_r+0x44>
 800def4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800def6:	1ad2      	subs	r2, r2, r3
 800def8:	2300      	movs	r3, #0
 800defa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800defc:	6a21      	ldr	r1, [r4, #32]
 800defe:	4628      	mov	r0, r5
 800df00:	47b0      	blx	r6
 800df02:	1c43      	adds	r3, r0, #1
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	d106      	bne.n	800df16 <__sflush_r+0x62>
 800df08:	6829      	ldr	r1, [r5, #0]
 800df0a:	291d      	cmp	r1, #29
 800df0c:	d82b      	bhi.n	800df66 <__sflush_r+0xb2>
 800df0e:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb8 <__sflush_r+0x104>)
 800df10:	410a      	asrs	r2, r1
 800df12:	07d6      	lsls	r6, r2, #31
 800df14:	d427      	bmi.n	800df66 <__sflush_r+0xb2>
 800df16:	2200      	movs	r2, #0
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	04d9      	lsls	r1, r3, #19
 800df1c:	6922      	ldr	r2, [r4, #16]
 800df1e:	6022      	str	r2, [r4, #0]
 800df20:	d504      	bpl.n	800df2c <__sflush_r+0x78>
 800df22:	1c42      	adds	r2, r0, #1
 800df24:	d101      	bne.n	800df2a <__sflush_r+0x76>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	b903      	cbnz	r3, 800df2c <__sflush_r+0x78>
 800df2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df2e:	602f      	str	r7, [r5, #0]
 800df30:	b1b9      	cbz	r1, 800df62 <__sflush_r+0xae>
 800df32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df36:	4299      	cmp	r1, r3
 800df38:	d002      	beq.n	800df40 <__sflush_r+0x8c>
 800df3a:	4628      	mov	r0, r5
 800df3c:	f7fe f9f2 	bl	800c324 <_free_r>
 800df40:	2300      	movs	r3, #0
 800df42:	6363      	str	r3, [r4, #52]	@ 0x34
 800df44:	e00d      	b.n	800df62 <__sflush_r+0xae>
 800df46:	2301      	movs	r3, #1
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	4602      	mov	r2, r0
 800df4e:	1c50      	adds	r0, r2, #1
 800df50:	d1c9      	bne.n	800dee6 <__sflush_r+0x32>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0c6      	beq.n	800dee6 <__sflush_r+0x32>
 800df58:	2b1d      	cmp	r3, #29
 800df5a:	d001      	beq.n	800df60 <__sflush_r+0xac>
 800df5c:	2b16      	cmp	r3, #22
 800df5e:	d11e      	bne.n	800df9e <__sflush_r+0xea>
 800df60:	602f      	str	r7, [r5, #0]
 800df62:	2000      	movs	r0, #0
 800df64:	e022      	b.n	800dfac <__sflush_r+0xf8>
 800df66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df6a:	b21b      	sxth	r3, r3
 800df6c:	e01b      	b.n	800dfa6 <__sflush_r+0xf2>
 800df6e:	690f      	ldr	r7, [r1, #16]
 800df70:	2f00      	cmp	r7, #0
 800df72:	d0f6      	beq.n	800df62 <__sflush_r+0xae>
 800df74:	0793      	lsls	r3, r2, #30
 800df76:	680e      	ldr	r6, [r1, #0]
 800df78:	bf08      	it	eq
 800df7a:	694b      	ldreq	r3, [r1, #20]
 800df7c:	600f      	str	r7, [r1, #0]
 800df7e:	bf18      	it	ne
 800df80:	2300      	movne	r3, #0
 800df82:	eba6 0807 	sub.w	r8, r6, r7
 800df86:	608b      	str	r3, [r1, #8]
 800df88:	f1b8 0f00 	cmp.w	r8, #0
 800df8c:	dde9      	ble.n	800df62 <__sflush_r+0xae>
 800df8e:	6a21      	ldr	r1, [r4, #32]
 800df90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df92:	4643      	mov	r3, r8
 800df94:	463a      	mov	r2, r7
 800df96:	4628      	mov	r0, r5
 800df98:	47b0      	blx	r6
 800df9a:	2800      	cmp	r0, #0
 800df9c:	dc08      	bgt.n	800dfb0 <__sflush_r+0xfc>
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa6:	81a3      	strh	r3, [r4, #12]
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	4407      	add	r7, r0
 800dfb2:	eba8 0800 	sub.w	r8, r8, r0
 800dfb6:	e7e7      	b.n	800df88 <__sflush_r+0xd4>
 800dfb8:	dfbffffe 	.word	0xdfbffffe

0800dfbc <_fflush_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	690b      	ldr	r3, [r1, #16]
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	b913      	cbnz	r3, 800dfcc <_fflush_r+0x10>
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	b118      	cbz	r0, 800dfd6 <_fflush_r+0x1a>
 800dfce:	6a03      	ldr	r3, [r0, #32]
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <_fflush_r+0x1a>
 800dfd2:	f7fd fa4d 	bl	800b470 <__sinit>
 800dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0f3      	beq.n	800dfc6 <_fflush_r+0xa>
 800dfde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfe0:	07d0      	lsls	r0, r2, #31
 800dfe2:	d404      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe4:	0599      	lsls	r1, r3, #22
 800dfe6:	d402      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfea:	f7fd fb9e 	bl	800b72a <__retarget_lock_acquire_recursive>
 800dfee:	4628      	mov	r0, r5
 800dff0:	4621      	mov	r1, r4
 800dff2:	f7ff ff5f 	bl	800deb4 <__sflush_r>
 800dff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff8:	07da      	lsls	r2, r3, #31
 800dffa:	4605      	mov	r5, r0
 800dffc:	d4e4      	bmi.n	800dfc8 <_fflush_r+0xc>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	059b      	lsls	r3, r3, #22
 800e002:	d4e1      	bmi.n	800dfc8 <_fflush_r+0xc>
 800e004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e006:	f7fd fb91 	bl	800b72c <__retarget_lock_release_recursive>
 800e00a:	e7dd      	b.n	800dfc8 <_fflush_r+0xc>

0800e00c <__swbuf_r>:
 800e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00e:	460e      	mov	r6, r1
 800e010:	4614      	mov	r4, r2
 800e012:	4605      	mov	r5, r0
 800e014:	b118      	cbz	r0, 800e01e <__swbuf_r+0x12>
 800e016:	6a03      	ldr	r3, [r0, #32]
 800e018:	b90b      	cbnz	r3, 800e01e <__swbuf_r+0x12>
 800e01a:	f7fd fa29 	bl	800b470 <__sinit>
 800e01e:	69a3      	ldr	r3, [r4, #24]
 800e020:	60a3      	str	r3, [r4, #8]
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	071a      	lsls	r2, r3, #28
 800e026:	d501      	bpl.n	800e02c <__swbuf_r+0x20>
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	b943      	cbnz	r3, 800e03e <__swbuf_r+0x32>
 800e02c:	4621      	mov	r1, r4
 800e02e:	4628      	mov	r0, r5
 800e030:	f000 f82a 	bl	800e088 <__swsetup_r>
 800e034:	b118      	cbz	r0, 800e03e <__swbuf_r+0x32>
 800e036:	f04f 37ff 	mov.w	r7, #4294967295
 800e03a:	4638      	mov	r0, r7
 800e03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	6922      	ldr	r2, [r4, #16]
 800e042:	1a98      	subs	r0, r3, r2
 800e044:	6963      	ldr	r3, [r4, #20]
 800e046:	b2f6      	uxtb	r6, r6
 800e048:	4283      	cmp	r3, r0
 800e04a:	4637      	mov	r7, r6
 800e04c:	dc05      	bgt.n	800e05a <__swbuf_r+0x4e>
 800e04e:	4621      	mov	r1, r4
 800e050:	4628      	mov	r0, r5
 800e052:	f7ff ffb3 	bl	800dfbc <_fflush_r>
 800e056:	2800      	cmp	r0, #0
 800e058:	d1ed      	bne.n	800e036 <__swbuf_r+0x2a>
 800e05a:	68a3      	ldr	r3, [r4, #8]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	60a3      	str	r3, [r4, #8]
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	6022      	str	r2, [r4, #0]
 800e066:	701e      	strb	r6, [r3, #0]
 800e068:	6962      	ldr	r2, [r4, #20]
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d004      	beq.n	800e07a <__swbuf_r+0x6e>
 800e070:	89a3      	ldrh	r3, [r4, #12]
 800e072:	07db      	lsls	r3, r3, #31
 800e074:	d5e1      	bpl.n	800e03a <__swbuf_r+0x2e>
 800e076:	2e0a      	cmp	r6, #10
 800e078:	d1df      	bne.n	800e03a <__swbuf_r+0x2e>
 800e07a:	4621      	mov	r1, r4
 800e07c:	4628      	mov	r0, r5
 800e07e:	f7ff ff9d 	bl	800dfbc <_fflush_r>
 800e082:	2800      	cmp	r0, #0
 800e084:	d0d9      	beq.n	800e03a <__swbuf_r+0x2e>
 800e086:	e7d6      	b.n	800e036 <__swbuf_r+0x2a>

0800e088 <__swsetup_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4b29      	ldr	r3, [pc, #164]	@ (800e130 <__swsetup_r+0xa8>)
 800e08c:	4605      	mov	r5, r0
 800e08e:	6818      	ldr	r0, [r3, #0]
 800e090:	460c      	mov	r4, r1
 800e092:	b118      	cbz	r0, 800e09c <__swsetup_r+0x14>
 800e094:	6a03      	ldr	r3, [r0, #32]
 800e096:	b90b      	cbnz	r3, 800e09c <__swsetup_r+0x14>
 800e098:	f7fd f9ea 	bl	800b470 <__sinit>
 800e09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0a0:	0719      	lsls	r1, r3, #28
 800e0a2:	d422      	bmi.n	800e0ea <__swsetup_r+0x62>
 800e0a4:	06da      	lsls	r2, r3, #27
 800e0a6:	d407      	bmi.n	800e0b8 <__swsetup_r+0x30>
 800e0a8:	2209      	movs	r2, #9
 800e0aa:	602a      	str	r2, [r5, #0]
 800e0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0b0:	81a3      	strh	r3, [r4, #12]
 800e0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b6:	e033      	b.n	800e120 <__swsetup_r+0x98>
 800e0b8:	0758      	lsls	r0, r3, #29
 800e0ba:	d512      	bpl.n	800e0e2 <__swsetup_r+0x5a>
 800e0bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0be:	b141      	cbz	r1, 800e0d2 <__swsetup_r+0x4a>
 800e0c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0c4:	4299      	cmp	r1, r3
 800e0c6:	d002      	beq.n	800e0ce <__swsetup_r+0x46>
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f7fe f92b 	bl	800c324 <_free_r>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6063      	str	r3, [r4, #4]
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	89a3      	ldrh	r3, [r4, #12]
 800e0e4:	f043 0308 	orr.w	r3, r3, #8
 800e0e8:	81a3      	strh	r3, [r4, #12]
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	b94b      	cbnz	r3, 800e102 <__swsetup_r+0x7a>
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0f8:	d003      	beq.n	800e102 <__swsetup_r+0x7a>
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f000 fc3f 	bl	800e980 <__smakebuf_r>
 800e102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e106:	f013 0201 	ands.w	r2, r3, #1
 800e10a:	d00a      	beq.n	800e122 <__swsetup_r+0x9a>
 800e10c:	2200      	movs	r2, #0
 800e10e:	60a2      	str	r2, [r4, #8]
 800e110:	6962      	ldr	r2, [r4, #20]
 800e112:	4252      	negs	r2, r2
 800e114:	61a2      	str	r2, [r4, #24]
 800e116:	6922      	ldr	r2, [r4, #16]
 800e118:	b942      	cbnz	r2, 800e12c <__swsetup_r+0xa4>
 800e11a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e11e:	d1c5      	bne.n	800e0ac <__swsetup_r+0x24>
 800e120:	bd38      	pop	{r3, r4, r5, pc}
 800e122:	0799      	lsls	r1, r3, #30
 800e124:	bf58      	it	pl
 800e126:	6962      	ldrpl	r2, [r4, #20]
 800e128:	60a2      	str	r2, [r4, #8]
 800e12a:	e7f4      	b.n	800e116 <__swsetup_r+0x8e>
 800e12c:	2000      	movs	r0, #0
 800e12e:	e7f7      	b.n	800e120 <__swsetup_r+0x98>
 800e130:	240000c8 	.word	0x240000c8

0800e134 <memmove>:
 800e134:	4288      	cmp	r0, r1
 800e136:	b510      	push	{r4, lr}
 800e138:	eb01 0402 	add.w	r4, r1, r2
 800e13c:	d902      	bls.n	800e144 <memmove+0x10>
 800e13e:	4284      	cmp	r4, r0
 800e140:	4623      	mov	r3, r4
 800e142:	d807      	bhi.n	800e154 <memmove+0x20>
 800e144:	1e43      	subs	r3, r0, #1
 800e146:	42a1      	cmp	r1, r4
 800e148:	d008      	beq.n	800e15c <memmove+0x28>
 800e14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e152:	e7f8      	b.n	800e146 <memmove+0x12>
 800e154:	4402      	add	r2, r0
 800e156:	4601      	mov	r1, r0
 800e158:	428a      	cmp	r2, r1
 800e15a:	d100      	bne.n	800e15e <memmove+0x2a>
 800e15c:	bd10      	pop	{r4, pc}
 800e15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e166:	e7f7      	b.n	800e158 <memmove+0x24>

0800e168 <_raise_r>:
 800e168:	291f      	cmp	r1, #31
 800e16a:	b538      	push	{r3, r4, r5, lr}
 800e16c:	4605      	mov	r5, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	d904      	bls.n	800e17c <_raise_r+0x14>
 800e172:	2316      	movs	r3, #22
 800e174:	6003      	str	r3, [r0, #0]
 800e176:	f04f 30ff 	mov.w	r0, #4294967295
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e17e:	b112      	cbz	r2, 800e186 <_raise_r+0x1e>
 800e180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e184:	b94b      	cbnz	r3, 800e19a <_raise_r+0x32>
 800e186:	4628      	mov	r0, r5
 800e188:	f000 f830 	bl	800e1ec <_getpid_r>
 800e18c:	4622      	mov	r2, r4
 800e18e:	4601      	mov	r1, r0
 800e190:	4628      	mov	r0, r5
 800e192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e196:	f000 b817 	b.w	800e1c8 <_kill_r>
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d00a      	beq.n	800e1b4 <_raise_r+0x4c>
 800e19e:	1c59      	adds	r1, r3, #1
 800e1a0:	d103      	bne.n	800e1aa <_raise_r+0x42>
 800e1a2:	2316      	movs	r3, #22
 800e1a4:	6003      	str	r3, [r0, #0]
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	e7e7      	b.n	800e17a <_raise_r+0x12>
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	4798      	blx	r3
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	e7e0      	b.n	800e17a <_raise_r+0x12>

0800e1b8 <raise>:
 800e1b8:	4b02      	ldr	r3, [pc, #8]	@ (800e1c4 <raise+0xc>)
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	6818      	ldr	r0, [r3, #0]
 800e1be:	f7ff bfd3 	b.w	800e168 <_raise_r>
 800e1c2:	bf00      	nop
 800e1c4:	240000c8 	.word	0x240000c8

0800e1c8 <_kill_r>:
 800e1c8:	b538      	push	{r3, r4, r5, lr}
 800e1ca:	4d07      	ldr	r5, [pc, #28]	@ (800e1e8 <_kill_r+0x20>)
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	4608      	mov	r0, r1
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	602b      	str	r3, [r5, #0]
 800e1d6:	f7f3 f879 	bl	80012cc <_kill>
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	d102      	bne.n	800e1e4 <_kill_r+0x1c>
 800e1de:	682b      	ldr	r3, [r5, #0]
 800e1e0:	b103      	cbz	r3, 800e1e4 <_kill_r+0x1c>
 800e1e2:	6023      	str	r3, [r4, #0]
 800e1e4:	bd38      	pop	{r3, r4, r5, pc}
 800e1e6:	bf00      	nop
 800e1e8:	24004eb4 	.word	0x24004eb4

0800e1ec <_getpid_r>:
 800e1ec:	f7f3 b866 	b.w	80012bc <_getpid>

0800e1f0 <nan>:
 800e1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1f8 <nan+0x8>
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	7ff80000 	.word	0x7ff80000

0800e200 <_calloc_r>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	fba1 5402 	umull	r5, r4, r1, r2
 800e206:	b93c      	cbnz	r4, 800e218 <_calloc_r+0x18>
 800e208:	4629      	mov	r1, r5
 800e20a:	f7fc f9d7 	bl	800a5bc <_malloc_r>
 800e20e:	4606      	mov	r6, r0
 800e210:	b928      	cbnz	r0, 800e21e <_calloc_r+0x1e>
 800e212:	2600      	movs	r6, #0
 800e214:	4630      	mov	r0, r6
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	220c      	movs	r2, #12
 800e21a:	6002      	str	r2, [r0, #0]
 800e21c:	e7f9      	b.n	800e212 <_calloc_r+0x12>
 800e21e:	462a      	mov	r2, r5
 800e220:	4621      	mov	r1, r4
 800e222:	f7fd f9d0 	bl	800b5c6 <memset>
 800e226:	e7f5      	b.n	800e214 <_calloc_r+0x14>

0800e228 <rshift>:
 800e228:	6903      	ldr	r3, [r0, #16]
 800e22a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e22e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e232:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e236:	f100 0414 	add.w	r4, r0, #20
 800e23a:	dd45      	ble.n	800e2c8 <rshift+0xa0>
 800e23c:	f011 011f 	ands.w	r1, r1, #31
 800e240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e248:	d10c      	bne.n	800e264 <rshift+0x3c>
 800e24a:	f100 0710 	add.w	r7, r0, #16
 800e24e:	4629      	mov	r1, r5
 800e250:	42b1      	cmp	r1, r6
 800e252:	d334      	bcc.n	800e2be <rshift+0x96>
 800e254:	1a9b      	subs	r3, r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	1eea      	subs	r2, r5, #3
 800e25a:	4296      	cmp	r6, r2
 800e25c:	bf38      	it	cc
 800e25e:	2300      	movcc	r3, #0
 800e260:	4423      	add	r3, r4
 800e262:	e015      	b.n	800e290 <rshift+0x68>
 800e264:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e268:	f1c1 0820 	rsb	r8, r1, #32
 800e26c:	40cf      	lsrs	r7, r1
 800e26e:	f105 0e04 	add.w	lr, r5, #4
 800e272:	46a1      	mov	r9, r4
 800e274:	4576      	cmp	r6, lr
 800e276:	46f4      	mov	ip, lr
 800e278:	d815      	bhi.n	800e2a6 <rshift+0x7e>
 800e27a:	1a9a      	subs	r2, r3, r2
 800e27c:	0092      	lsls	r2, r2, #2
 800e27e:	3a04      	subs	r2, #4
 800e280:	3501      	adds	r5, #1
 800e282:	42ae      	cmp	r6, r5
 800e284:	bf38      	it	cc
 800e286:	2200      	movcc	r2, #0
 800e288:	18a3      	adds	r3, r4, r2
 800e28a:	50a7      	str	r7, [r4, r2]
 800e28c:	b107      	cbz	r7, 800e290 <rshift+0x68>
 800e28e:	3304      	adds	r3, #4
 800e290:	1b1a      	subs	r2, r3, r4
 800e292:	42a3      	cmp	r3, r4
 800e294:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e298:	bf08      	it	eq
 800e29a:	2300      	moveq	r3, #0
 800e29c:	6102      	str	r2, [r0, #16]
 800e29e:	bf08      	it	eq
 800e2a0:	6143      	streq	r3, [r0, #20]
 800e2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a6:	f8dc c000 	ldr.w	ip, [ip]
 800e2aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800e2ae:	ea4c 0707 	orr.w	r7, ip, r7
 800e2b2:	f849 7b04 	str.w	r7, [r9], #4
 800e2b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2ba:	40cf      	lsrs	r7, r1
 800e2bc:	e7da      	b.n	800e274 <rshift+0x4c>
 800e2be:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2c6:	e7c3      	b.n	800e250 <rshift+0x28>
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	e7e1      	b.n	800e290 <rshift+0x68>

0800e2cc <__hexdig_fun>:
 800e2cc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e2d0:	2b09      	cmp	r3, #9
 800e2d2:	d802      	bhi.n	800e2da <__hexdig_fun+0xe>
 800e2d4:	3820      	subs	r0, #32
 800e2d6:	b2c0      	uxtb	r0, r0
 800e2d8:	4770      	bx	lr
 800e2da:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e2de:	2b05      	cmp	r3, #5
 800e2e0:	d801      	bhi.n	800e2e6 <__hexdig_fun+0x1a>
 800e2e2:	3847      	subs	r0, #71	@ 0x47
 800e2e4:	e7f7      	b.n	800e2d6 <__hexdig_fun+0xa>
 800e2e6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e2ea:	2b05      	cmp	r3, #5
 800e2ec:	d801      	bhi.n	800e2f2 <__hexdig_fun+0x26>
 800e2ee:	3827      	subs	r0, #39	@ 0x27
 800e2f0:	e7f1      	b.n	800e2d6 <__hexdig_fun+0xa>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	4770      	bx	lr
	...

0800e2f8 <__gethex>:
 800e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	b085      	sub	sp, #20
 800e2fe:	468a      	mov	sl, r1
 800e300:	9302      	str	r3, [sp, #8]
 800e302:	680b      	ldr	r3, [r1, #0]
 800e304:	9001      	str	r0, [sp, #4]
 800e306:	4690      	mov	r8, r2
 800e308:	1c9c      	adds	r4, r3, #2
 800e30a:	46a1      	mov	r9, r4
 800e30c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e310:	2830      	cmp	r0, #48	@ 0x30
 800e312:	d0fa      	beq.n	800e30a <__gethex+0x12>
 800e314:	eba9 0303 	sub.w	r3, r9, r3
 800e318:	f1a3 0b02 	sub.w	fp, r3, #2
 800e31c:	f7ff ffd6 	bl	800e2cc <__hexdig_fun>
 800e320:	4605      	mov	r5, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	d168      	bne.n	800e3f8 <__gethex+0x100>
 800e326:	49a0      	ldr	r1, [pc, #640]	@ (800e5a8 <__gethex+0x2b0>)
 800e328:	2201      	movs	r2, #1
 800e32a:	4648      	mov	r0, r9
 800e32c:	f7fd f953 	bl	800b5d6 <strncmp>
 800e330:	4607      	mov	r7, r0
 800e332:	2800      	cmp	r0, #0
 800e334:	d167      	bne.n	800e406 <__gethex+0x10e>
 800e336:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e33a:	4626      	mov	r6, r4
 800e33c:	f7ff ffc6 	bl	800e2cc <__hexdig_fun>
 800e340:	2800      	cmp	r0, #0
 800e342:	d062      	beq.n	800e40a <__gethex+0x112>
 800e344:	4623      	mov	r3, r4
 800e346:	7818      	ldrb	r0, [r3, #0]
 800e348:	2830      	cmp	r0, #48	@ 0x30
 800e34a:	4699      	mov	r9, r3
 800e34c:	f103 0301 	add.w	r3, r3, #1
 800e350:	d0f9      	beq.n	800e346 <__gethex+0x4e>
 800e352:	f7ff ffbb 	bl	800e2cc <__hexdig_fun>
 800e356:	fab0 f580 	clz	r5, r0
 800e35a:	096d      	lsrs	r5, r5, #5
 800e35c:	f04f 0b01 	mov.w	fp, #1
 800e360:	464a      	mov	r2, r9
 800e362:	4616      	mov	r6, r2
 800e364:	3201      	adds	r2, #1
 800e366:	7830      	ldrb	r0, [r6, #0]
 800e368:	f7ff ffb0 	bl	800e2cc <__hexdig_fun>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d1f8      	bne.n	800e362 <__gethex+0x6a>
 800e370:	498d      	ldr	r1, [pc, #564]	@ (800e5a8 <__gethex+0x2b0>)
 800e372:	2201      	movs	r2, #1
 800e374:	4630      	mov	r0, r6
 800e376:	f7fd f92e 	bl	800b5d6 <strncmp>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d13f      	bne.n	800e3fe <__gethex+0x106>
 800e37e:	b944      	cbnz	r4, 800e392 <__gethex+0x9a>
 800e380:	1c74      	adds	r4, r6, #1
 800e382:	4622      	mov	r2, r4
 800e384:	4616      	mov	r6, r2
 800e386:	3201      	adds	r2, #1
 800e388:	7830      	ldrb	r0, [r6, #0]
 800e38a:	f7ff ff9f 	bl	800e2cc <__hexdig_fun>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d1f8      	bne.n	800e384 <__gethex+0x8c>
 800e392:	1ba4      	subs	r4, r4, r6
 800e394:	00a7      	lsls	r7, r4, #2
 800e396:	7833      	ldrb	r3, [r6, #0]
 800e398:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e39c:	2b50      	cmp	r3, #80	@ 0x50
 800e39e:	d13e      	bne.n	800e41e <__gethex+0x126>
 800e3a0:	7873      	ldrb	r3, [r6, #1]
 800e3a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3a4:	d033      	beq.n	800e40e <__gethex+0x116>
 800e3a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3a8:	d034      	beq.n	800e414 <__gethex+0x11c>
 800e3aa:	1c71      	adds	r1, r6, #1
 800e3ac:	2400      	movs	r4, #0
 800e3ae:	7808      	ldrb	r0, [r1, #0]
 800e3b0:	f7ff ff8c 	bl	800e2cc <__hexdig_fun>
 800e3b4:	1e43      	subs	r3, r0, #1
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	2b18      	cmp	r3, #24
 800e3ba:	d830      	bhi.n	800e41e <__gethex+0x126>
 800e3bc:	f1a0 0210 	sub.w	r2, r0, #16
 800e3c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3c4:	f7ff ff82 	bl	800e2cc <__hexdig_fun>
 800e3c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800e3cc:	fa5f fc8c 	uxtb.w	ip, ip
 800e3d0:	f1bc 0f18 	cmp.w	ip, #24
 800e3d4:	f04f 030a 	mov.w	r3, #10
 800e3d8:	d91e      	bls.n	800e418 <__gethex+0x120>
 800e3da:	b104      	cbz	r4, 800e3de <__gethex+0xe6>
 800e3dc:	4252      	negs	r2, r2
 800e3de:	4417      	add	r7, r2
 800e3e0:	f8ca 1000 	str.w	r1, [sl]
 800e3e4:	b1ed      	cbz	r5, 800e422 <__gethex+0x12a>
 800e3e6:	f1bb 0f00 	cmp.w	fp, #0
 800e3ea:	bf0c      	ite	eq
 800e3ec:	2506      	moveq	r5, #6
 800e3ee:	2500      	movne	r5, #0
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	b005      	add	sp, #20
 800e3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	462c      	mov	r4, r5
 800e3fc:	e7b0      	b.n	800e360 <__gethex+0x68>
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	d1c7      	bne.n	800e392 <__gethex+0x9a>
 800e402:	4627      	mov	r7, r4
 800e404:	e7c7      	b.n	800e396 <__gethex+0x9e>
 800e406:	464e      	mov	r6, r9
 800e408:	462f      	mov	r7, r5
 800e40a:	2501      	movs	r5, #1
 800e40c:	e7c3      	b.n	800e396 <__gethex+0x9e>
 800e40e:	2400      	movs	r4, #0
 800e410:	1cb1      	adds	r1, r6, #2
 800e412:	e7cc      	b.n	800e3ae <__gethex+0xb6>
 800e414:	2401      	movs	r4, #1
 800e416:	e7fb      	b.n	800e410 <__gethex+0x118>
 800e418:	fb03 0002 	mla	r0, r3, r2, r0
 800e41c:	e7ce      	b.n	800e3bc <__gethex+0xc4>
 800e41e:	4631      	mov	r1, r6
 800e420:	e7de      	b.n	800e3e0 <__gethex+0xe8>
 800e422:	eba6 0309 	sub.w	r3, r6, r9
 800e426:	3b01      	subs	r3, #1
 800e428:	4629      	mov	r1, r5
 800e42a:	2b07      	cmp	r3, #7
 800e42c:	dc0a      	bgt.n	800e444 <__gethex+0x14c>
 800e42e:	9801      	ldr	r0, [sp, #4]
 800e430:	f7fd ffc2 	bl	800c3b8 <_Balloc>
 800e434:	4604      	mov	r4, r0
 800e436:	b940      	cbnz	r0, 800e44a <__gethex+0x152>
 800e438:	4b5c      	ldr	r3, [pc, #368]	@ (800e5ac <__gethex+0x2b4>)
 800e43a:	4602      	mov	r2, r0
 800e43c:	21e4      	movs	r1, #228	@ 0xe4
 800e43e:	485c      	ldr	r0, [pc, #368]	@ (800e5b0 <__gethex+0x2b8>)
 800e440:	f7fc f86c 	bl	800a51c <__assert_func>
 800e444:	3101      	adds	r1, #1
 800e446:	105b      	asrs	r3, r3, #1
 800e448:	e7ef      	b.n	800e42a <__gethex+0x132>
 800e44a:	f100 0a14 	add.w	sl, r0, #20
 800e44e:	2300      	movs	r3, #0
 800e450:	4655      	mov	r5, sl
 800e452:	469b      	mov	fp, r3
 800e454:	45b1      	cmp	r9, r6
 800e456:	d337      	bcc.n	800e4c8 <__gethex+0x1d0>
 800e458:	f845 bb04 	str.w	fp, [r5], #4
 800e45c:	eba5 050a 	sub.w	r5, r5, sl
 800e460:	10ad      	asrs	r5, r5, #2
 800e462:	6125      	str	r5, [r4, #16]
 800e464:	4658      	mov	r0, fp
 800e466:	f7fe f899 	bl	800c59c <__hi0bits>
 800e46a:	016d      	lsls	r5, r5, #5
 800e46c:	f8d8 6000 	ldr.w	r6, [r8]
 800e470:	1a2d      	subs	r5, r5, r0
 800e472:	42b5      	cmp	r5, r6
 800e474:	dd54      	ble.n	800e520 <__gethex+0x228>
 800e476:	1bad      	subs	r5, r5, r6
 800e478:	4629      	mov	r1, r5
 800e47a:	4620      	mov	r0, r4
 800e47c:	f7fe fc2a 	bl	800ccd4 <__any_on>
 800e480:	4681      	mov	r9, r0
 800e482:	b178      	cbz	r0, 800e4a4 <__gethex+0x1ac>
 800e484:	1e6b      	subs	r3, r5, #1
 800e486:	1159      	asrs	r1, r3, #5
 800e488:	f003 021f 	and.w	r2, r3, #31
 800e48c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e490:	f04f 0901 	mov.w	r9, #1
 800e494:	fa09 f202 	lsl.w	r2, r9, r2
 800e498:	420a      	tst	r2, r1
 800e49a:	d003      	beq.n	800e4a4 <__gethex+0x1ac>
 800e49c:	454b      	cmp	r3, r9
 800e49e:	dc36      	bgt.n	800e50e <__gethex+0x216>
 800e4a0:	f04f 0902 	mov.w	r9, #2
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7ff febe 	bl	800e228 <rshift>
 800e4ac:	442f      	add	r7, r5
 800e4ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4b2:	42bb      	cmp	r3, r7
 800e4b4:	da42      	bge.n	800e53c <__gethex+0x244>
 800e4b6:	9801      	ldr	r0, [sp, #4]
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	f7fd ffbd 	bl	800c438 <_Bfree>
 800e4be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	25a3      	movs	r5, #163	@ 0xa3
 800e4c6:	e793      	b.n	800e3f0 <__gethex+0xf8>
 800e4c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e4cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800e4ce:	d012      	beq.n	800e4f6 <__gethex+0x1fe>
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d104      	bne.n	800e4de <__gethex+0x1e6>
 800e4d4:	f845 bb04 	str.w	fp, [r5], #4
 800e4d8:	f04f 0b00 	mov.w	fp, #0
 800e4dc:	465b      	mov	r3, fp
 800e4de:	7830      	ldrb	r0, [r6, #0]
 800e4e0:	9303      	str	r3, [sp, #12]
 800e4e2:	f7ff fef3 	bl	800e2cc <__hexdig_fun>
 800e4e6:	9b03      	ldr	r3, [sp, #12]
 800e4e8:	f000 000f 	and.w	r0, r0, #15
 800e4ec:	4098      	lsls	r0, r3
 800e4ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	e7ae      	b.n	800e454 <__gethex+0x15c>
 800e4f6:	45b1      	cmp	r9, r6
 800e4f8:	d8ea      	bhi.n	800e4d0 <__gethex+0x1d8>
 800e4fa:	492b      	ldr	r1, [pc, #172]	@ (800e5a8 <__gethex+0x2b0>)
 800e4fc:	9303      	str	r3, [sp, #12]
 800e4fe:	2201      	movs	r2, #1
 800e500:	4630      	mov	r0, r6
 800e502:	f7fd f868 	bl	800b5d6 <strncmp>
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	2800      	cmp	r0, #0
 800e50a:	d1e1      	bne.n	800e4d0 <__gethex+0x1d8>
 800e50c:	e7a2      	b.n	800e454 <__gethex+0x15c>
 800e50e:	1ea9      	subs	r1, r5, #2
 800e510:	4620      	mov	r0, r4
 800e512:	f7fe fbdf 	bl	800ccd4 <__any_on>
 800e516:	2800      	cmp	r0, #0
 800e518:	d0c2      	beq.n	800e4a0 <__gethex+0x1a8>
 800e51a:	f04f 0903 	mov.w	r9, #3
 800e51e:	e7c1      	b.n	800e4a4 <__gethex+0x1ac>
 800e520:	da09      	bge.n	800e536 <__gethex+0x23e>
 800e522:	1b75      	subs	r5, r6, r5
 800e524:	4621      	mov	r1, r4
 800e526:	9801      	ldr	r0, [sp, #4]
 800e528:	462a      	mov	r2, r5
 800e52a:	f7fe f99d 	bl	800c868 <__lshift>
 800e52e:	1b7f      	subs	r7, r7, r5
 800e530:	4604      	mov	r4, r0
 800e532:	f100 0a14 	add.w	sl, r0, #20
 800e536:	f04f 0900 	mov.w	r9, #0
 800e53a:	e7b8      	b.n	800e4ae <__gethex+0x1b6>
 800e53c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e540:	42bd      	cmp	r5, r7
 800e542:	dd6f      	ble.n	800e624 <__gethex+0x32c>
 800e544:	1bed      	subs	r5, r5, r7
 800e546:	42ae      	cmp	r6, r5
 800e548:	dc34      	bgt.n	800e5b4 <__gethex+0x2bc>
 800e54a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d022      	beq.n	800e598 <__gethex+0x2a0>
 800e552:	2b03      	cmp	r3, #3
 800e554:	d024      	beq.n	800e5a0 <__gethex+0x2a8>
 800e556:	2b01      	cmp	r3, #1
 800e558:	d115      	bne.n	800e586 <__gethex+0x28e>
 800e55a:	42ae      	cmp	r6, r5
 800e55c:	d113      	bne.n	800e586 <__gethex+0x28e>
 800e55e:	2e01      	cmp	r6, #1
 800e560:	d10b      	bne.n	800e57a <__gethex+0x282>
 800e562:	9a02      	ldr	r2, [sp, #8]
 800e564:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	2301      	movs	r3, #1
 800e56c:	6123      	str	r3, [r4, #16]
 800e56e:	f8ca 3000 	str.w	r3, [sl]
 800e572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e574:	2562      	movs	r5, #98	@ 0x62
 800e576:	601c      	str	r4, [r3, #0]
 800e578:	e73a      	b.n	800e3f0 <__gethex+0xf8>
 800e57a:	1e71      	subs	r1, r6, #1
 800e57c:	4620      	mov	r0, r4
 800e57e:	f7fe fba9 	bl	800ccd4 <__any_on>
 800e582:	2800      	cmp	r0, #0
 800e584:	d1ed      	bne.n	800e562 <__gethex+0x26a>
 800e586:	9801      	ldr	r0, [sp, #4]
 800e588:	4621      	mov	r1, r4
 800e58a:	f7fd ff55 	bl	800c438 <_Bfree>
 800e58e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e590:	2300      	movs	r3, #0
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	2550      	movs	r5, #80	@ 0x50
 800e596:	e72b      	b.n	800e3f0 <__gethex+0xf8>
 800e598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1f3      	bne.n	800e586 <__gethex+0x28e>
 800e59e:	e7e0      	b.n	800e562 <__gethex+0x26a>
 800e5a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1dd      	bne.n	800e562 <__gethex+0x26a>
 800e5a6:	e7ee      	b.n	800e586 <__gethex+0x28e>
 800e5a8:	0800efc0 	.word	0x0800efc0
 800e5ac:	0800ee54 	.word	0x0800ee54
 800e5b0:	0800f132 	.word	0x0800f132
 800e5b4:	1e6f      	subs	r7, r5, #1
 800e5b6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ba:	d130      	bne.n	800e61e <__gethex+0x326>
 800e5bc:	b127      	cbz	r7, 800e5c8 <__gethex+0x2d0>
 800e5be:	4639      	mov	r1, r7
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7fe fb87 	bl	800ccd4 <__any_on>
 800e5c6:	4681      	mov	r9, r0
 800e5c8:	117a      	asrs	r2, r7, #5
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e5d0:	f007 071f 	and.w	r7, r7, #31
 800e5d4:	40bb      	lsls	r3, r7
 800e5d6:	4213      	tst	r3, r2
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4620      	mov	r0, r4
 800e5dc:	bf18      	it	ne
 800e5de:	f049 0902 	orrne.w	r9, r9, #2
 800e5e2:	f7ff fe21 	bl	800e228 <rshift>
 800e5e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e5ea:	1b76      	subs	r6, r6, r5
 800e5ec:	2502      	movs	r5, #2
 800e5ee:	f1b9 0f00 	cmp.w	r9, #0
 800e5f2:	d047      	beq.n	800e684 <__gethex+0x38c>
 800e5f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d015      	beq.n	800e628 <__gethex+0x330>
 800e5fc:	2b03      	cmp	r3, #3
 800e5fe:	d017      	beq.n	800e630 <__gethex+0x338>
 800e600:	2b01      	cmp	r3, #1
 800e602:	d109      	bne.n	800e618 <__gethex+0x320>
 800e604:	f019 0f02 	tst.w	r9, #2
 800e608:	d006      	beq.n	800e618 <__gethex+0x320>
 800e60a:	f8da 3000 	ldr.w	r3, [sl]
 800e60e:	ea49 0903 	orr.w	r9, r9, r3
 800e612:	f019 0f01 	tst.w	r9, #1
 800e616:	d10e      	bne.n	800e636 <__gethex+0x33e>
 800e618:	f045 0510 	orr.w	r5, r5, #16
 800e61c:	e032      	b.n	800e684 <__gethex+0x38c>
 800e61e:	f04f 0901 	mov.w	r9, #1
 800e622:	e7d1      	b.n	800e5c8 <__gethex+0x2d0>
 800e624:	2501      	movs	r5, #1
 800e626:	e7e2      	b.n	800e5ee <__gethex+0x2f6>
 800e628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e62a:	f1c3 0301 	rsb	r3, r3, #1
 800e62e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0f0      	beq.n	800e618 <__gethex+0x320>
 800e636:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e63a:	f104 0314 	add.w	r3, r4, #20
 800e63e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e642:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e646:	f04f 0c00 	mov.w	ip, #0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e650:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e654:	d01b      	beq.n	800e68e <__gethex+0x396>
 800e656:	3201      	adds	r2, #1
 800e658:	6002      	str	r2, [r0, #0]
 800e65a:	2d02      	cmp	r5, #2
 800e65c:	f104 0314 	add.w	r3, r4, #20
 800e660:	d13c      	bne.n	800e6dc <__gethex+0x3e4>
 800e662:	f8d8 2000 	ldr.w	r2, [r8]
 800e666:	3a01      	subs	r2, #1
 800e668:	42b2      	cmp	r2, r6
 800e66a:	d109      	bne.n	800e680 <__gethex+0x388>
 800e66c:	1171      	asrs	r1, r6, #5
 800e66e:	2201      	movs	r2, #1
 800e670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e674:	f006 061f 	and.w	r6, r6, #31
 800e678:	fa02 f606 	lsl.w	r6, r2, r6
 800e67c:	421e      	tst	r6, r3
 800e67e:	d13a      	bne.n	800e6f6 <__gethex+0x3fe>
 800e680:	f045 0520 	orr.w	r5, r5, #32
 800e684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e686:	601c      	str	r4, [r3, #0]
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	601f      	str	r7, [r3, #0]
 800e68c:	e6b0      	b.n	800e3f0 <__gethex+0xf8>
 800e68e:	4299      	cmp	r1, r3
 800e690:	f843 cc04 	str.w	ip, [r3, #-4]
 800e694:	d8d9      	bhi.n	800e64a <__gethex+0x352>
 800e696:	68a3      	ldr	r3, [r4, #8]
 800e698:	459b      	cmp	fp, r3
 800e69a:	db17      	blt.n	800e6cc <__gethex+0x3d4>
 800e69c:	6861      	ldr	r1, [r4, #4]
 800e69e:	9801      	ldr	r0, [sp, #4]
 800e6a0:	3101      	adds	r1, #1
 800e6a2:	f7fd fe89 	bl	800c3b8 <_Balloc>
 800e6a6:	4681      	mov	r9, r0
 800e6a8:	b918      	cbnz	r0, 800e6b2 <__gethex+0x3ba>
 800e6aa:	4b1a      	ldr	r3, [pc, #104]	@ (800e714 <__gethex+0x41c>)
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	2184      	movs	r1, #132	@ 0x84
 800e6b0:	e6c5      	b.n	800e43e <__gethex+0x146>
 800e6b2:	6922      	ldr	r2, [r4, #16]
 800e6b4:	3202      	adds	r2, #2
 800e6b6:	f104 010c 	add.w	r1, r4, #12
 800e6ba:	0092      	lsls	r2, r2, #2
 800e6bc:	300c      	adds	r0, #12
 800e6be:	f7fd f836 	bl	800b72e <memcpy>
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	9801      	ldr	r0, [sp, #4]
 800e6c6:	f7fd feb7 	bl	800c438 <_Bfree>
 800e6ca:	464c      	mov	r4, r9
 800e6cc:	6923      	ldr	r3, [r4, #16]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6d4:	6122      	str	r2, [r4, #16]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	615a      	str	r2, [r3, #20]
 800e6da:	e7be      	b.n	800e65a <__gethex+0x362>
 800e6dc:	6922      	ldr	r2, [r4, #16]
 800e6de:	455a      	cmp	r2, fp
 800e6e0:	dd0b      	ble.n	800e6fa <__gethex+0x402>
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7ff fd9f 	bl	800e228 <rshift>
 800e6ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6ee:	3701      	adds	r7, #1
 800e6f0:	42bb      	cmp	r3, r7
 800e6f2:	f6ff aee0 	blt.w	800e4b6 <__gethex+0x1be>
 800e6f6:	2501      	movs	r5, #1
 800e6f8:	e7c2      	b.n	800e680 <__gethex+0x388>
 800e6fa:	f016 061f 	ands.w	r6, r6, #31
 800e6fe:	d0fa      	beq.n	800e6f6 <__gethex+0x3fe>
 800e700:	4453      	add	r3, sl
 800e702:	f1c6 0620 	rsb	r6, r6, #32
 800e706:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e70a:	f7fd ff47 	bl	800c59c <__hi0bits>
 800e70e:	42b0      	cmp	r0, r6
 800e710:	dbe7      	blt.n	800e6e2 <__gethex+0x3ea>
 800e712:	e7f0      	b.n	800e6f6 <__gethex+0x3fe>
 800e714:	0800ee54 	.word	0x0800ee54

0800e718 <L_shift>:
 800e718:	f1c2 0208 	rsb	r2, r2, #8
 800e71c:	0092      	lsls	r2, r2, #2
 800e71e:	b570      	push	{r4, r5, r6, lr}
 800e720:	f1c2 0620 	rsb	r6, r2, #32
 800e724:	6843      	ldr	r3, [r0, #4]
 800e726:	6804      	ldr	r4, [r0, #0]
 800e728:	fa03 f506 	lsl.w	r5, r3, r6
 800e72c:	432c      	orrs	r4, r5
 800e72e:	40d3      	lsrs	r3, r2
 800e730:	6004      	str	r4, [r0, #0]
 800e732:	f840 3f04 	str.w	r3, [r0, #4]!
 800e736:	4288      	cmp	r0, r1
 800e738:	d3f4      	bcc.n	800e724 <L_shift+0xc>
 800e73a:	bd70      	pop	{r4, r5, r6, pc}

0800e73c <__match>:
 800e73c:	b530      	push	{r4, r5, lr}
 800e73e:	6803      	ldr	r3, [r0, #0]
 800e740:	3301      	adds	r3, #1
 800e742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e746:	b914      	cbnz	r4, 800e74e <__match+0x12>
 800e748:	6003      	str	r3, [r0, #0]
 800e74a:	2001      	movs	r0, #1
 800e74c:	bd30      	pop	{r4, r5, pc}
 800e74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e752:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e756:	2d19      	cmp	r5, #25
 800e758:	bf98      	it	ls
 800e75a:	3220      	addls	r2, #32
 800e75c:	42a2      	cmp	r2, r4
 800e75e:	d0f0      	beq.n	800e742 <__match+0x6>
 800e760:	2000      	movs	r0, #0
 800e762:	e7f3      	b.n	800e74c <__match+0x10>

0800e764 <__hexnan>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	680b      	ldr	r3, [r1, #0]
 800e76a:	6801      	ldr	r1, [r0, #0]
 800e76c:	115e      	asrs	r6, r3, #5
 800e76e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e772:	f013 031f 	ands.w	r3, r3, #31
 800e776:	b087      	sub	sp, #28
 800e778:	bf18      	it	ne
 800e77a:	3604      	addne	r6, #4
 800e77c:	2500      	movs	r5, #0
 800e77e:	1f37      	subs	r7, r6, #4
 800e780:	4682      	mov	sl, r0
 800e782:	4690      	mov	r8, r2
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	f846 5c04 	str.w	r5, [r6, #-4]
 800e78a:	46b9      	mov	r9, r7
 800e78c:	463c      	mov	r4, r7
 800e78e:	9502      	str	r5, [sp, #8]
 800e790:	46ab      	mov	fp, r5
 800e792:	784a      	ldrb	r2, [r1, #1]
 800e794:	1c4b      	adds	r3, r1, #1
 800e796:	9303      	str	r3, [sp, #12]
 800e798:	b342      	cbz	r2, 800e7ec <__hexnan+0x88>
 800e79a:	4610      	mov	r0, r2
 800e79c:	9105      	str	r1, [sp, #20]
 800e79e:	9204      	str	r2, [sp, #16]
 800e7a0:	f7ff fd94 	bl	800e2cc <__hexdig_fun>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d151      	bne.n	800e84c <__hexnan+0xe8>
 800e7a8:	9a04      	ldr	r2, [sp, #16]
 800e7aa:	9905      	ldr	r1, [sp, #20]
 800e7ac:	2a20      	cmp	r2, #32
 800e7ae:	d818      	bhi.n	800e7e2 <__hexnan+0x7e>
 800e7b0:	9b02      	ldr	r3, [sp, #8]
 800e7b2:	459b      	cmp	fp, r3
 800e7b4:	dd13      	ble.n	800e7de <__hexnan+0x7a>
 800e7b6:	454c      	cmp	r4, r9
 800e7b8:	d206      	bcs.n	800e7c8 <__hexnan+0x64>
 800e7ba:	2d07      	cmp	r5, #7
 800e7bc:	dc04      	bgt.n	800e7c8 <__hexnan+0x64>
 800e7be:	462a      	mov	r2, r5
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f7ff ffa8 	bl	800e718 <L_shift>
 800e7c8:	4544      	cmp	r4, r8
 800e7ca:	d952      	bls.n	800e872 <__hexnan+0x10e>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f1a4 0904 	sub.w	r9, r4, #4
 800e7d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7d6:	f8cd b008 	str.w	fp, [sp, #8]
 800e7da:	464c      	mov	r4, r9
 800e7dc:	461d      	mov	r5, r3
 800e7de:	9903      	ldr	r1, [sp, #12]
 800e7e0:	e7d7      	b.n	800e792 <__hexnan+0x2e>
 800e7e2:	2a29      	cmp	r2, #41	@ 0x29
 800e7e4:	d157      	bne.n	800e896 <__hexnan+0x132>
 800e7e6:	3102      	adds	r1, #2
 800e7e8:	f8ca 1000 	str.w	r1, [sl]
 800e7ec:	f1bb 0f00 	cmp.w	fp, #0
 800e7f0:	d051      	beq.n	800e896 <__hexnan+0x132>
 800e7f2:	454c      	cmp	r4, r9
 800e7f4:	d206      	bcs.n	800e804 <__hexnan+0xa0>
 800e7f6:	2d07      	cmp	r5, #7
 800e7f8:	dc04      	bgt.n	800e804 <__hexnan+0xa0>
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	4649      	mov	r1, r9
 800e7fe:	4620      	mov	r0, r4
 800e800:	f7ff ff8a 	bl	800e718 <L_shift>
 800e804:	4544      	cmp	r4, r8
 800e806:	d936      	bls.n	800e876 <__hexnan+0x112>
 800e808:	f1a8 0204 	sub.w	r2, r8, #4
 800e80c:	4623      	mov	r3, r4
 800e80e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e812:	f842 1f04 	str.w	r1, [r2, #4]!
 800e816:	429f      	cmp	r7, r3
 800e818:	d2f9      	bcs.n	800e80e <__hexnan+0xaa>
 800e81a:	1b3b      	subs	r3, r7, r4
 800e81c:	f023 0303 	bic.w	r3, r3, #3
 800e820:	3304      	adds	r3, #4
 800e822:	3401      	adds	r4, #1
 800e824:	3e03      	subs	r6, #3
 800e826:	42b4      	cmp	r4, r6
 800e828:	bf88      	it	hi
 800e82a:	2304      	movhi	r3, #4
 800e82c:	4443      	add	r3, r8
 800e82e:	2200      	movs	r2, #0
 800e830:	f843 2b04 	str.w	r2, [r3], #4
 800e834:	429f      	cmp	r7, r3
 800e836:	d2fb      	bcs.n	800e830 <__hexnan+0xcc>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	b91b      	cbnz	r3, 800e844 <__hexnan+0xe0>
 800e83c:	4547      	cmp	r7, r8
 800e83e:	d128      	bne.n	800e892 <__hexnan+0x12e>
 800e840:	2301      	movs	r3, #1
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	2005      	movs	r0, #5
 800e846:	b007      	add	sp, #28
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	3501      	adds	r5, #1
 800e84e:	2d08      	cmp	r5, #8
 800e850:	f10b 0b01 	add.w	fp, fp, #1
 800e854:	dd06      	ble.n	800e864 <__hexnan+0x100>
 800e856:	4544      	cmp	r4, r8
 800e858:	d9c1      	bls.n	800e7de <__hexnan+0x7a>
 800e85a:	2300      	movs	r3, #0
 800e85c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e860:	2501      	movs	r5, #1
 800e862:	3c04      	subs	r4, #4
 800e864:	6822      	ldr	r2, [r4, #0]
 800e866:	f000 000f 	and.w	r0, r0, #15
 800e86a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e86e:	6020      	str	r0, [r4, #0]
 800e870:	e7b5      	b.n	800e7de <__hexnan+0x7a>
 800e872:	2508      	movs	r5, #8
 800e874:	e7b3      	b.n	800e7de <__hexnan+0x7a>
 800e876:	9b01      	ldr	r3, [sp, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d0dd      	beq.n	800e838 <__hexnan+0xd4>
 800e87c:	f1c3 0320 	rsb	r3, r3, #32
 800e880:	f04f 32ff 	mov.w	r2, #4294967295
 800e884:	40da      	lsrs	r2, r3
 800e886:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e88a:	4013      	ands	r3, r2
 800e88c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e890:	e7d2      	b.n	800e838 <__hexnan+0xd4>
 800e892:	3f04      	subs	r7, #4
 800e894:	e7d0      	b.n	800e838 <__hexnan+0xd4>
 800e896:	2004      	movs	r0, #4
 800e898:	e7d5      	b.n	800e846 <__hexnan+0xe2>

0800e89a <__ascii_mbtowc>:
 800e89a:	b082      	sub	sp, #8
 800e89c:	b901      	cbnz	r1, 800e8a0 <__ascii_mbtowc+0x6>
 800e89e:	a901      	add	r1, sp, #4
 800e8a0:	b142      	cbz	r2, 800e8b4 <__ascii_mbtowc+0x1a>
 800e8a2:	b14b      	cbz	r3, 800e8b8 <__ascii_mbtowc+0x1e>
 800e8a4:	7813      	ldrb	r3, [r2, #0]
 800e8a6:	600b      	str	r3, [r1, #0]
 800e8a8:	7812      	ldrb	r2, [r2, #0]
 800e8aa:	1e10      	subs	r0, r2, #0
 800e8ac:	bf18      	it	ne
 800e8ae:	2001      	movne	r0, #1
 800e8b0:	b002      	add	sp, #8
 800e8b2:	4770      	bx	lr
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	e7fb      	b.n	800e8b0 <__ascii_mbtowc+0x16>
 800e8b8:	f06f 0001 	mvn.w	r0, #1
 800e8bc:	e7f8      	b.n	800e8b0 <__ascii_mbtowc+0x16>

0800e8be <_realloc_r>:
 800e8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	4615      	mov	r5, r2
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	b921      	cbnz	r1, 800e8d4 <_realloc_r+0x16>
 800e8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	f7fb be74 	b.w	800a5bc <_malloc_r>
 800e8d4:	b92a      	cbnz	r2, 800e8e2 <_realloc_r+0x24>
 800e8d6:	f7fd fd25 	bl	800c324 <_free_r>
 800e8da:	2400      	movs	r4, #0
 800e8dc:	4620      	mov	r0, r4
 800e8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e2:	f000 f8ab 	bl	800ea3c <_malloc_usable_size_r>
 800e8e6:	4285      	cmp	r5, r0
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	d802      	bhi.n	800e8f2 <_realloc_r+0x34>
 800e8ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8f0:	d8f4      	bhi.n	800e8dc <_realloc_r+0x1e>
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	4640      	mov	r0, r8
 800e8f6:	f7fb fe61 	bl	800a5bc <_malloc_r>
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d0ec      	beq.n	800e8da <_realloc_r+0x1c>
 800e900:	42b5      	cmp	r5, r6
 800e902:	462a      	mov	r2, r5
 800e904:	4621      	mov	r1, r4
 800e906:	bf28      	it	cs
 800e908:	4632      	movcs	r2, r6
 800e90a:	f7fc ff10 	bl	800b72e <memcpy>
 800e90e:	4621      	mov	r1, r4
 800e910:	4640      	mov	r0, r8
 800e912:	f7fd fd07 	bl	800c324 <_free_r>
 800e916:	463c      	mov	r4, r7
 800e918:	e7e0      	b.n	800e8dc <_realloc_r+0x1e>

0800e91a <__ascii_wctomb>:
 800e91a:	4603      	mov	r3, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	b141      	cbz	r1, 800e932 <__ascii_wctomb+0x18>
 800e920:	2aff      	cmp	r2, #255	@ 0xff
 800e922:	d904      	bls.n	800e92e <__ascii_wctomb+0x14>
 800e924:	228a      	movs	r2, #138	@ 0x8a
 800e926:	601a      	str	r2, [r3, #0]
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
 800e92c:	4770      	bx	lr
 800e92e:	700a      	strb	r2, [r1, #0]
 800e930:	2001      	movs	r0, #1
 800e932:	4770      	bx	lr

0800e934 <__swhatbuf_r>:
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	460c      	mov	r4, r1
 800e938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e93c:	2900      	cmp	r1, #0
 800e93e:	b096      	sub	sp, #88	@ 0x58
 800e940:	4615      	mov	r5, r2
 800e942:	461e      	mov	r6, r3
 800e944:	da0d      	bge.n	800e962 <__swhatbuf_r+0x2e>
 800e946:	89a3      	ldrh	r3, [r4, #12]
 800e948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e94c:	f04f 0100 	mov.w	r1, #0
 800e950:	bf14      	ite	ne
 800e952:	2340      	movne	r3, #64	@ 0x40
 800e954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e958:	2000      	movs	r0, #0
 800e95a:	6031      	str	r1, [r6, #0]
 800e95c:	602b      	str	r3, [r5, #0]
 800e95e:	b016      	add	sp, #88	@ 0x58
 800e960:	bd70      	pop	{r4, r5, r6, pc}
 800e962:	466a      	mov	r2, sp
 800e964:	f000 f848 	bl	800e9f8 <_fstat_r>
 800e968:	2800      	cmp	r0, #0
 800e96a:	dbec      	blt.n	800e946 <__swhatbuf_r+0x12>
 800e96c:	9901      	ldr	r1, [sp, #4]
 800e96e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e976:	4259      	negs	r1, r3
 800e978:	4159      	adcs	r1, r3
 800e97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e97e:	e7eb      	b.n	800e958 <__swhatbuf_r+0x24>

0800e980 <__smakebuf_r>:
 800e980:	898b      	ldrh	r3, [r1, #12]
 800e982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e984:	079d      	lsls	r5, r3, #30
 800e986:	4606      	mov	r6, r0
 800e988:	460c      	mov	r4, r1
 800e98a:	d507      	bpl.n	800e99c <__smakebuf_r+0x1c>
 800e98c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	6123      	str	r3, [r4, #16]
 800e994:	2301      	movs	r3, #1
 800e996:	6163      	str	r3, [r4, #20]
 800e998:	b003      	add	sp, #12
 800e99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e99c:	ab01      	add	r3, sp, #4
 800e99e:	466a      	mov	r2, sp
 800e9a0:	f7ff ffc8 	bl	800e934 <__swhatbuf_r>
 800e9a4:	9f00      	ldr	r7, [sp, #0]
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7fb fe06 	bl	800a5bc <_malloc_r>
 800e9b0:	b948      	cbnz	r0, 800e9c6 <__smakebuf_r+0x46>
 800e9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b6:	059a      	lsls	r2, r3, #22
 800e9b8:	d4ee      	bmi.n	800e998 <__smakebuf_r+0x18>
 800e9ba:	f023 0303 	bic.w	r3, r3, #3
 800e9be:	f043 0302 	orr.w	r3, r3, #2
 800e9c2:	81a3      	strh	r3, [r4, #12]
 800e9c4:	e7e2      	b.n	800e98c <__smakebuf_r+0xc>
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	6020      	str	r0, [r4, #0]
 800e9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9ce:	81a3      	strh	r3, [r4, #12]
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e9d6:	b15b      	cbz	r3, 800e9f0 <__smakebuf_r+0x70>
 800e9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f000 f81d 	bl	800ea1c <_isatty_r>
 800e9e2:	b128      	cbz	r0, 800e9f0 <__smakebuf_r+0x70>
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	f023 0303 	bic.w	r3, r3, #3
 800e9ea:	f043 0301 	orr.w	r3, r3, #1
 800e9ee:	81a3      	strh	r3, [r4, #12]
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	431d      	orrs	r5, r3
 800e9f4:	81a5      	strh	r5, [r4, #12]
 800e9f6:	e7cf      	b.n	800e998 <__smakebuf_r+0x18>

0800e9f8 <_fstat_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ea18 <_fstat_r+0x20>)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4604      	mov	r4, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	4611      	mov	r1, r2
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	f7f2 fcc1 	bl	800138c <_fstat>
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	d102      	bne.n	800ea14 <_fstat_r+0x1c>
 800ea0e:	682b      	ldr	r3, [r5, #0]
 800ea10:	b103      	cbz	r3, 800ea14 <_fstat_r+0x1c>
 800ea12:	6023      	str	r3, [r4, #0]
 800ea14:	bd38      	pop	{r3, r4, r5, pc}
 800ea16:	bf00      	nop
 800ea18:	24004eb4 	.word	0x24004eb4

0800ea1c <_isatty_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d06      	ldr	r5, [pc, #24]	@ (800ea38 <_isatty_r+0x1c>)
 800ea20:	2300      	movs	r3, #0
 800ea22:	4604      	mov	r4, r0
 800ea24:	4608      	mov	r0, r1
 800ea26:	602b      	str	r3, [r5, #0]
 800ea28:	f7f2 fcc0 	bl	80013ac <_isatty>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	d102      	bne.n	800ea36 <_isatty_r+0x1a>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	b103      	cbz	r3, 800ea36 <_isatty_r+0x1a>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd38      	pop	{r3, r4, r5, pc}
 800ea38:	24004eb4 	.word	0x24004eb4

0800ea3c <_malloc_usable_size_r>:
 800ea3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea40:	1f18      	subs	r0, r3, #4
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	bfbc      	itt	lt
 800ea46:	580b      	ldrlt	r3, [r1, r0]
 800ea48:	18c0      	addlt	r0, r0, r3
 800ea4a:	4770      	bx	lr

0800ea4c <_init>:
 800ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4e:	bf00      	nop
 800ea50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea52:	bc08      	pop	{r3}
 800ea54:	469e      	mov	lr, r3
 800ea56:	4770      	bx	lr

0800ea58 <_fini>:
 800ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5a:	bf00      	nop
 800ea5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5e:	bc08      	pop	{r3}
 800ea60:	469e      	mov	lr, r3
 800ea62:	4770      	bx	lr
