
SpeeedFreeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dac  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08117050  08117050  00018050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081179b8  081179b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081179c0  081179c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081179c4  081179c4  000189c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000298  10000000  081179c8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004eb4  10000298  08117c60  00019298  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000514c  08117c60  0001a14c  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  08117c60  0001a000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00019298  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003418c  00000000  00000000  000192c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006c29  00000000  00000000  0004d454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000028c8  00000000  00000000  00054080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f59  00000000  00000000  00056948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043833  00000000  00000000  000588a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035922  00000000  00000000  0009c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b6765  00000000  00000000  000d19f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028815b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c610  00000000  00000000  002881a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  002947b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000298 	.word	0x10000298
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08117034 	.word	0x08117034

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000029c 	.word	0x1000029c
 81002dc:	08117034 	.word	0x08117034

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <strlen>:
 81003a0:	4603      	mov	r3, r0
 81003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81003a6:	2a00      	cmp	r2, #0
 81003a8:	d1fb      	bne.n	81003a2 <strlen+0x2>
 81003aa:	1a18      	subs	r0, r3, r0
 81003ac:	3801      	subs	r0, #1
 81003ae:	4770      	bx	lr

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	@ 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_uldivmod>:
 8100db8:	b953      	cbnz	r3, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dba:	b94a      	cbnz	r2, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dbc:	2900      	cmp	r1, #0
 8100dbe:	bf08      	it	eq
 8100dc0:	2800      	cmpeq	r0, #0
 8100dc2:	bf1c      	itt	ne
 8100dc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100dc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dcc:	f000 b9a0 	b.w	8101110 <__aeabi_idiv0>
 8100dd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100dd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100dd8:	f000 f83c 	bl	8100e54 <__udivmoddi4>
 8100ddc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100de4:	b004      	add	sp, #16
 8100de6:	4770      	bx	lr

08100de8 <__aeabi_d2lz>:
 8100de8:	b538      	push	{r3, r4, r5, lr}
 8100dea:	2200      	movs	r2, #0
 8100dec:	2300      	movs	r3, #0
 8100dee:	4604      	mov	r4, r0
 8100df0:	460d      	mov	r5, r1
 8100df2:	f7ff ff0b 	bl	8100c0c <__aeabi_dcmplt>
 8100df6:	b928      	cbnz	r0, 8100e04 <__aeabi_d2lz+0x1c>
 8100df8:	4620      	mov	r0, r4
 8100dfa:	4629      	mov	r1, r5
 8100dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100e00:	f000 b80a 	b.w	8100e18 <__aeabi_d2ulz>
 8100e04:	4620      	mov	r0, r4
 8100e06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100e0a:	f000 f805 	bl	8100e18 <__aeabi_d2ulz>
 8100e0e:	4240      	negs	r0, r0
 8100e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e14:	bd38      	pop	{r3, r4, r5, pc}
 8100e16:	bf00      	nop

08100e18 <__aeabi_d2ulz>:
 8100e18:	b5d0      	push	{r4, r6, r7, lr}
 8100e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8100e4c <__aeabi_d2ulz+0x34>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	4606      	mov	r6, r0
 8100e20:	460f      	mov	r7, r1
 8100e22:	f7ff fc81 	bl	8100728 <__aeabi_dmul>
 8100e26:	f7ff ff57 	bl	8100cd8 <__aeabi_d2uiz>
 8100e2a:	4604      	mov	r4, r0
 8100e2c:	f7ff fc02 	bl	8100634 <__aeabi_ui2d>
 8100e30:	4b07      	ldr	r3, [pc, #28]	@ (8100e50 <__aeabi_d2ulz+0x38>)
 8100e32:	2200      	movs	r2, #0
 8100e34:	f7ff fc78 	bl	8100728 <__aeabi_dmul>
 8100e38:	4602      	mov	r2, r0
 8100e3a:	460b      	mov	r3, r1
 8100e3c:	4630      	mov	r0, r6
 8100e3e:	4639      	mov	r1, r7
 8100e40:	f7ff faba 	bl	81003b8 <__aeabi_dsub>
 8100e44:	f7ff ff48 	bl	8100cd8 <__aeabi_d2uiz>
 8100e48:	4621      	mov	r1, r4
 8100e4a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e4c:	3df00000 	.word	0x3df00000
 8100e50:	41f00000 	.word	0x41f00000

08100e54 <__udivmoddi4>:
 8100e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e58:	9d08      	ldr	r5, [sp, #32]
 8100e5a:	460c      	mov	r4, r1
 8100e5c:	2b00      	cmp	r3, #0
 8100e5e:	d14e      	bne.n	8100efe <__udivmoddi4+0xaa>
 8100e60:	4694      	mov	ip, r2
 8100e62:	458c      	cmp	ip, r1
 8100e64:	4686      	mov	lr, r0
 8100e66:	fab2 f282 	clz	r2, r2
 8100e6a:	d962      	bls.n	8100f32 <__udivmoddi4+0xde>
 8100e6c:	b14a      	cbz	r2, 8100e82 <__udivmoddi4+0x2e>
 8100e6e:	f1c2 0320 	rsb	r3, r2, #32
 8100e72:	4091      	lsls	r1, r2
 8100e74:	fa20 f303 	lsr.w	r3, r0, r3
 8100e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e7c:	4319      	orrs	r1, r3
 8100e7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e86:	fa1f f68c 	uxth.w	r6, ip
 8100e8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e92:	fb07 1114 	mls	r1, r7, r4, r1
 8100e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e9a:	fb04 f106 	mul.w	r1, r4, r6
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	d90a      	bls.n	8100eb8 <__udivmoddi4+0x64>
 8100ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8100ea6:	f104 30ff 	add.w	r0, r4, #4294967295
 8100eaa:	f080 8112 	bcs.w	81010d2 <__udivmoddi4+0x27e>
 8100eae:	4299      	cmp	r1, r3
 8100eb0:	f240 810f 	bls.w	81010d2 <__udivmoddi4+0x27e>
 8100eb4:	3c02      	subs	r4, #2
 8100eb6:	4463      	add	r3, ip
 8100eb8:	1a59      	subs	r1, r3, r1
 8100eba:	fa1f f38e 	uxth.w	r3, lr
 8100ebe:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ec2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eca:	fb00 f606 	mul.w	r6, r0, r6
 8100ece:	429e      	cmp	r6, r3
 8100ed0:	d90a      	bls.n	8100ee8 <__udivmoddi4+0x94>
 8100ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8100ed6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eda:	f080 80fc 	bcs.w	81010d6 <__udivmoddi4+0x282>
 8100ede:	429e      	cmp	r6, r3
 8100ee0:	f240 80f9 	bls.w	81010d6 <__udivmoddi4+0x282>
 8100ee4:	4463      	add	r3, ip
 8100ee6:	3802      	subs	r0, #2
 8100ee8:	1b9b      	subs	r3, r3, r6
 8100eea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100eee:	2100      	movs	r1, #0
 8100ef0:	b11d      	cbz	r5, 8100efa <__udivmoddi4+0xa6>
 8100ef2:	40d3      	lsrs	r3, r2
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	e9c5 3200 	strd	r3, r2, [r5]
 8100efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d905      	bls.n	8100f0e <__udivmoddi4+0xba>
 8100f02:	b10d      	cbz	r5, 8100f08 <__udivmoddi4+0xb4>
 8100f04:	e9c5 0100 	strd	r0, r1, [r5]
 8100f08:	2100      	movs	r1, #0
 8100f0a:	4608      	mov	r0, r1
 8100f0c:	e7f5      	b.n	8100efa <__udivmoddi4+0xa6>
 8100f0e:	fab3 f183 	clz	r1, r3
 8100f12:	2900      	cmp	r1, #0
 8100f14:	d146      	bne.n	8100fa4 <__udivmoddi4+0x150>
 8100f16:	42a3      	cmp	r3, r4
 8100f18:	d302      	bcc.n	8100f20 <__udivmoddi4+0xcc>
 8100f1a:	4290      	cmp	r0, r2
 8100f1c:	f0c0 80f0 	bcc.w	8101100 <__udivmoddi4+0x2ac>
 8100f20:	1a86      	subs	r6, r0, r2
 8100f22:	eb64 0303 	sbc.w	r3, r4, r3
 8100f26:	2001      	movs	r0, #1
 8100f28:	2d00      	cmp	r5, #0
 8100f2a:	d0e6      	beq.n	8100efa <__udivmoddi4+0xa6>
 8100f2c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f30:	e7e3      	b.n	8100efa <__udivmoddi4+0xa6>
 8100f32:	2a00      	cmp	r2, #0
 8100f34:	f040 8090 	bne.w	8101058 <__udivmoddi4+0x204>
 8100f38:	eba1 040c 	sub.w	r4, r1, ip
 8100f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f40:	fa1f f78c 	uxth.w	r7, ip
 8100f44:	2101      	movs	r1, #1
 8100f46:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f4e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f56:	fb07 f006 	mul.w	r0, r7, r6
 8100f5a:	4298      	cmp	r0, r3
 8100f5c:	d908      	bls.n	8100f70 <__udivmoddi4+0x11c>
 8100f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f62:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f66:	d202      	bcs.n	8100f6e <__udivmoddi4+0x11a>
 8100f68:	4298      	cmp	r0, r3
 8100f6a:	f200 80cd 	bhi.w	8101108 <__udivmoddi4+0x2b4>
 8100f6e:	4626      	mov	r6, r4
 8100f70:	1a1c      	subs	r4, r3, r0
 8100f72:	fa1f f38e 	uxth.w	r3, lr
 8100f76:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f7a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f82:	fb00 f707 	mul.w	r7, r0, r7
 8100f86:	429f      	cmp	r7, r3
 8100f88:	d908      	bls.n	8100f9c <__udivmoddi4+0x148>
 8100f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f92:	d202      	bcs.n	8100f9a <__udivmoddi4+0x146>
 8100f94:	429f      	cmp	r7, r3
 8100f96:	f200 80b0 	bhi.w	81010fa <__udivmoddi4+0x2a6>
 8100f9a:	4620      	mov	r0, r4
 8100f9c:	1bdb      	subs	r3, r3, r7
 8100f9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fa2:	e7a5      	b.n	8100ef0 <__udivmoddi4+0x9c>
 8100fa4:	f1c1 0620 	rsb	r6, r1, #32
 8100fa8:	408b      	lsls	r3, r1
 8100faa:	fa22 f706 	lsr.w	r7, r2, r6
 8100fae:	431f      	orrs	r7, r3
 8100fb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8100fb4:	fa04 f301 	lsl.w	r3, r4, r1
 8100fb8:	ea43 030c 	orr.w	r3, r3, ip
 8100fbc:	40f4      	lsrs	r4, r6
 8100fbe:	fa00 f801 	lsl.w	r8, r0, r1
 8100fc2:	0c38      	lsrs	r0, r7, #16
 8100fc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fc8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fcc:	fa1f fc87 	uxth.w	ip, r7
 8100fd0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fd8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fdc:	45a1      	cmp	r9, r4
 8100fde:	fa02 f201 	lsl.w	r2, r2, r1
 8100fe2:	d90a      	bls.n	8100ffa <__udivmoddi4+0x1a6>
 8100fe4:	193c      	adds	r4, r7, r4
 8100fe6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fea:	f080 8084 	bcs.w	81010f6 <__udivmoddi4+0x2a2>
 8100fee:	45a1      	cmp	r9, r4
 8100ff0:	f240 8081 	bls.w	81010f6 <__udivmoddi4+0x2a2>
 8100ff4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100ff8:	443c      	add	r4, r7
 8100ffa:	eba4 0409 	sub.w	r4, r4, r9
 8100ffe:	fa1f f983 	uxth.w	r9, r3
 8101002:	fbb4 f3f0 	udiv	r3, r4, r0
 8101006:	fb00 4413 	mls	r4, r0, r3, r4
 810100a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810100e:	fb03 fc0c 	mul.w	ip, r3, ip
 8101012:	45a4      	cmp	ip, r4
 8101014:	d907      	bls.n	8101026 <__udivmoddi4+0x1d2>
 8101016:	193c      	adds	r4, r7, r4
 8101018:	f103 30ff 	add.w	r0, r3, #4294967295
 810101c:	d267      	bcs.n	81010ee <__udivmoddi4+0x29a>
 810101e:	45a4      	cmp	ip, r4
 8101020:	d965      	bls.n	81010ee <__udivmoddi4+0x29a>
 8101022:	3b02      	subs	r3, #2
 8101024:	443c      	add	r4, r7
 8101026:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810102a:	fba0 9302 	umull	r9, r3, r0, r2
 810102e:	eba4 040c 	sub.w	r4, r4, ip
 8101032:	429c      	cmp	r4, r3
 8101034:	46ce      	mov	lr, r9
 8101036:	469c      	mov	ip, r3
 8101038:	d351      	bcc.n	81010de <__udivmoddi4+0x28a>
 810103a:	d04e      	beq.n	81010da <__udivmoddi4+0x286>
 810103c:	b155      	cbz	r5, 8101054 <__udivmoddi4+0x200>
 810103e:	ebb8 030e 	subs.w	r3, r8, lr
 8101042:	eb64 040c 	sbc.w	r4, r4, ip
 8101046:	fa04 f606 	lsl.w	r6, r4, r6
 810104a:	40cb      	lsrs	r3, r1
 810104c:	431e      	orrs	r6, r3
 810104e:	40cc      	lsrs	r4, r1
 8101050:	e9c5 6400 	strd	r6, r4, [r5]
 8101054:	2100      	movs	r1, #0
 8101056:	e750      	b.n	8100efa <__udivmoddi4+0xa6>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f103 	lsr.w	r1, r0, r3
 8101060:	fa0c fc02 	lsl.w	ip, ip, r2
 8101064:	fa24 f303 	lsr.w	r3, r4, r3
 8101068:	4094      	lsls	r4, r2
 810106a:	430c      	orrs	r4, r1
 810106c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101070:	fa00 fe02 	lsl.w	lr, r0, r2
 8101074:	fa1f f78c 	uxth.w	r7, ip
 8101078:	fbb3 f0f8 	udiv	r0, r3, r8
 810107c:	fb08 3110 	mls	r1, r8, r0, r3
 8101080:	0c23      	lsrs	r3, r4, #16
 8101082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101086:	fb00 f107 	mul.w	r1, r0, r7
 810108a:	4299      	cmp	r1, r3
 810108c:	d908      	bls.n	81010a0 <__udivmoddi4+0x24c>
 810108e:	eb1c 0303 	adds.w	r3, ip, r3
 8101092:	f100 36ff 	add.w	r6, r0, #4294967295
 8101096:	d22c      	bcs.n	81010f2 <__udivmoddi4+0x29e>
 8101098:	4299      	cmp	r1, r3
 810109a:	d92a      	bls.n	81010f2 <__udivmoddi4+0x29e>
 810109c:	3802      	subs	r0, #2
 810109e:	4463      	add	r3, ip
 81010a0:	1a5b      	subs	r3, r3, r1
 81010a2:	b2a4      	uxth	r4, r4
 81010a4:	fbb3 f1f8 	udiv	r1, r3, r8
 81010a8:	fb08 3311 	mls	r3, r8, r1, r3
 81010ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 81010b0:	fb01 f307 	mul.w	r3, r1, r7
 81010b4:	42a3      	cmp	r3, r4
 81010b6:	d908      	bls.n	81010ca <__udivmoddi4+0x276>
 81010b8:	eb1c 0404 	adds.w	r4, ip, r4
 81010bc:	f101 36ff 	add.w	r6, r1, #4294967295
 81010c0:	d213      	bcs.n	81010ea <__udivmoddi4+0x296>
 81010c2:	42a3      	cmp	r3, r4
 81010c4:	d911      	bls.n	81010ea <__udivmoddi4+0x296>
 81010c6:	3902      	subs	r1, #2
 81010c8:	4464      	add	r4, ip
 81010ca:	1ae4      	subs	r4, r4, r3
 81010cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010d0:	e739      	b.n	8100f46 <__udivmoddi4+0xf2>
 81010d2:	4604      	mov	r4, r0
 81010d4:	e6f0      	b.n	8100eb8 <__udivmoddi4+0x64>
 81010d6:	4608      	mov	r0, r1
 81010d8:	e706      	b.n	8100ee8 <__udivmoddi4+0x94>
 81010da:	45c8      	cmp	r8, r9
 81010dc:	d2ae      	bcs.n	810103c <__udivmoddi4+0x1e8>
 81010de:	ebb9 0e02 	subs.w	lr, r9, r2
 81010e2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010e6:	3801      	subs	r0, #1
 81010e8:	e7a8      	b.n	810103c <__udivmoddi4+0x1e8>
 81010ea:	4631      	mov	r1, r6
 81010ec:	e7ed      	b.n	81010ca <__udivmoddi4+0x276>
 81010ee:	4603      	mov	r3, r0
 81010f0:	e799      	b.n	8101026 <__udivmoddi4+0x1d2>
 81010f2:	4630      	mov	r0, r6
 81010f4:	e7d4      	b.n	81010a0 <__udivmoddi4+0x24c>
 81010f6:	46d6      	mov	lr, sl
 81010f8:	e77f      	b.n	8100ffa <__udivmoddi4+0x1a6>
 81010fa:	4463      	add	r3, ip
 81010fc:	3802      	subs	r0, #2
 81010fe:	e74d      	b.n	8100f9c <__udivmoddi4+0x148>
 8101100:	4606      	mov	r6, r0
 8101102:	4623      	mov	r3, r4
 8101104:	4608      	mov	r0, r1
 8101106:	e70f      	b.n	8100f28 <__udivmoddi4+0xd4>
 8101108:	3e02      	subs	r6, #2
 810110a:	4463      	add	r3, ip
 810110c:	e730      	b.n	8100f70 <__udivmoddi4+0x11c>
 810110e:	bf00      	nop

08101110 <__aeabi_idiv0>:
 8101110:	4770      	bx	lr
 8101112:	bf00      	nop

08101114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101114:	b480      	push	{r7}
 8101116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101118:	4b09      	ldr	r3, [pc, #36]	@ (8101140 <SystemInit+0x2c>)
 810111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810111e:	4a08      	ldr	r2, [pc, #32]	@ (8101140 <SystemInit+0x2c>)
 8101120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101128:	4b05      	ldr	r3, [pc, #20]	@ (8101140 <SystemInit+0x2c>)
 810112a:	691b      	ldr	r3, [r3, #16]
 810112c:	4a04      	ldr	r2, [pc, #16]	@ (8101140 <SystemInit+0x2c>)
 810112e:	f043 0310 	orr.w	r3, r3, #16
 8101132:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101134:	bf00      	nop
 8101136:	46bd      	mov	sp, r7
 8101138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810113c:	4770      	bx	lr
 810113e:	bf00      	nop
 8101140:	e000ed00 	.word	0xe000ed00

08101144 <bufferPut>:
int readIndx  = 0;
uint32_t buffer[BUFFER_SIZE];


int bufferPut(uint32_t item)
{
 8101144:	b480      	push	{r7}
 8101146:	b083      	sub	sp, #12
 8101148:	af00      	add	r7, sp, #0
 810114a:	6078      	str	r0, [r7, #4]
	if ((writeIndx + 1) % BUFFER_SIZE == readIndx)
 810114c:	4b18      	ldr	r3, [pc, #96]	@ (81011b0 <bufferPut+0x6c>)
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	1c59      	adds	r1, r3, #1
 8101152:	4b18      	ldr	r3, [pc, #96]	@ (81011b4 <bufferPut+0x70>)
 8101154:	fb83 2301 	smull	r2, r3, r3, r1
 8101158:	109a      	asrs	r2, r3, #2
 810115a:	17cb      	asrs	r3, r1, #31
 810115c:	1ad2      	subs	r2, r2, r3
 810115e:	4613      	mov	r3, r2
 8101160:	009b      	lsls	r3, r3, #2
 8101162:	4413      	add	r3, r2
 8101164:	005b      	lsls	r3, r3, #1
 8101166:	1aca      	subs	r2, r1, r3
 8101168:	4b13      	ldr	r3, [pc, #76]	@ (81011b8 <bufferPut+0x74>)
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	429a      	cmp	r2, r3
 810116e:	d101      	bne.n	8101174 <bufferPut+0x30>
	{
		// buffer is full, avoid overflow
		return 0;
 8101170:	2300      	movs	r3, #0
 8101172:	e016      	b.n	81011a2 <bufferPut+0x5e>
	}
	buffer[writeIndx] = item;
 8101174:	4b0e      	ldr	r3, [pc, #56]	@ (81011b0 <bufferPut+0x6c>)
 8101176:	681b      	ldr	r3, [r3, #0]
 8101178:	4910      	ldr	r1, [pc, #64]	@ (81011bc <bufferPut+0x78>)
 810117a:	687a      	ldr	r2, [r7, #4]
 810117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeIndx = (writeIndx + 1) % BUFFER_SIZE;
 8101180:	4b0b      	ldr	r3, [pc, #44]	@ (81011b0 <bufferPut+0x6c>)
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	1c59      	adds	r1, r3, #1
 8101186:	4b0b      	ldr	r3, [pc, #44]	@ (81011b4 <bufferPut+0x70>)
 8101188:	fb83 2301 	smull	r2, r3, r3, r1
 810118c:	109a      	asrs	r2, r3, #2
 810118e:	17cb      	asrs	r3, r1, #31
 8101190:	1ad2      	subs	r2, r2, r3
 8101192:	4613      	mov	r3, r2
 8101194:	009b      	lsls	r3, r3, #2
 8101196:	4413      	add	r3, r2
 8101198:	005b      	lsls	r3, r3, #1
 810119a:	1aca      	subs	r2, r1, r3
 810119c:	4b04      	ldr	r3, [pc, #16]	@ (81011b0 <bufferPut+0x6c>)
 810119e:	601a      	str	r2, [r3, #0]
	return 1;
 81011a0:	2301      	movs	r3, #1
}
 81011a2:	4618      	mov	r0, r3
 81011a4:	370c      	adds	r7, #12
 81011a6:	46bd      	mov	sp, r7
 81011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ac:	4770      	bx	lr
 81011ae:	bf00      	nop
 81011b0:	100002b4 	.word	0x100002b4
 81011b4:	66666667 	.word	0x66666667
 81011b8:	100002b8 	.word	0x100002b8
 81011bc:	100002bc 	.word	0x100002bc

081011c0 <bufferGet>:
int bufferGet(uint32_t * value)
{
 81011c0:	b480      	push	{r7}
 81011c2:	b083      	sub	sp, #12
 81011c4:	af00      	add	r7, sp, #0
 81011c6:	6078      	str	r0, [r7, #4]
	if (readIndx == writeIndx)
 81011c8:	4b12      	ldr	r3, [pc, #72]	@ (8101214 <bufferGet+0x54>)
 81011ca:	681a      	ldr	r2, [r3, #0]
 81011cc:	4b12      	ldr	r3, [pc, #72]	@ (8101218 <bufferGet+0x58>)
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	429a      	cmp	r2, r3
 81011d2:	d101      	bne.n	81011d8 <bufferGet+0x18>
	{
		// buffer is empty
		return 0;
 81011d4:	2300      	movs	r3, #0
 81011d6:	e017      	b.n	8101208 <bufferGet+0x48>
	}

	*value = buffer[readIndx];
 81011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8101214 <bufferGet+0x54>)
 81011da:	681b      	ldr	r3, [r3, #0]
 81011dc:	4a0f      	ldr	r2, [pc, #60]	@ (810121c <bufferGet+0x5c>)
 81011de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	601a      	str	r2, [r3, #0]
	readIndx = (readIndx + 1) % BUFFER_SIZE;
 81011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8101214 <bufferGet+0x54>)
 81011e8:	681b      	ldr	r3, [r3, #0]
 81011ea:	1c59      	adds	r1, r3, #1
 81011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8101220 <bufferGet+0x60>)
 81011ee:	fb83 2301 	smull	r2, r3, r3, r1
 81011f2:	109a      	asrs	r2, r3, #2
 81011f4:	17cb      	asrs	r3, r1, #31
 81011f6:	1ad2      	subs	r2, r2, r3
 81011f8:	4613      	mov	r3, r2
 81011fa:	009b      	lsls	r3, r3, #2
 81011fc:	4413      	add	r3, r2
 81011fe:	005b      	lsls	r3, r3, #1
 8101200:	1aca      	subs	r2, r1, r3
 8101202:	4b04      	ldr	r3, [pc, #16]	@ (8101214 <bufferGet+0x54>)
 8101204:	601a      	str	r2, [r3, #0]
	return 1;
 8101206:	2301      	movs	r3, #1
}
 8101208:	4618      	mov	r0, r3
 810120a:	370c      	adds	r7, #12
 810120c:	46bd      	mov	sp, r7
 810120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101212:	4770      	bx	lr
 8101214:	100002b8 	.word	0x100002b8
 8101218:	100002b4 	.word	0x100002b4
 810121c:	100002bc 	.word	0x100002bc
 8101220:	66666667 	.word	0x66666667

08101224 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8101224:	b580      	push	{r7, lr}
 8101226:	b086      	sub	sp, #24
 8101228:	af02      	add	r7, sp, #8
 810122a:	60f8      	str	r0, [r7, #12]
 810122c:	60b9      	str	r1, [r7, #8]
 810122e:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8101230:	68fb      	ldr	r3, [r7, #12]
 8101232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101238:	d101      	bne.n	810123e <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 810123a:	4b09      	ldr	r3, [pc, #36]	@ (8101260 <rpmsg_send+0x3c>)
 810123c:	e00c      	b.n	8101258 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 810123e:	68fb      	ldr	r3, [r7, #12]
 8101240:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101246:	2301      	movs	r3, #1
 8101248:	9301      	str	r3, [sp, #4]
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	9300      	str	r3, [sp, #0]
 810124e:	68bb      	ldr	r3, [r7, #8]
 8101250:	68f8      	ldr	r0, [r7, #12]
 8101252:	f00f f8af 	bl	81103b4 <rpmsg_send_offchannel_raw>
 8101256:	4603      	mov	r3, r0
					 len, true);
}
 8101258:	4618      	mov	r0, r3
 810125a:	3710      	adds	r7, #16
 810125c:	46bd      	mov	sp, r7
 810125e:	bd80      	pop	{r7, pc}
 8101260:	fffff829 	.word	0xfffff829

08101264 <HAL_FDCAN_RxFifo0Callback>:
FDCAN_RxHeaderTypeDef rxHeader;
uint8_t txData[8];
uint8_t rxData[8];
uint32_t count = 0;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8101264:	b580      	push	{r7, lr}
 8101266:	b082      	sub	sp, #8
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
 810126c:	6039      	str	r1, [r7, #0]

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) //if new data
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	f003 0301 	and.w	r3, r3, #1
 8101274:	2b00      	cmp	r3, #0
 8101276:	d019      	beq.n	81012ac <HAL_FDCAN_RxFifo0Callback+0x48>
	{
		count++;
 8101278:	4b0e      	ldr	r3, [pc, #56]	@ (81012b4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 810127a:	681b      	ldr	r3, [r3, #0]
 810127c:	3301      	adds	r3, #1
 810127e:	4a0d      	ldr	r2, [pc, #52]	@ (81012b4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8101280:	6013      	str	r3, [r2, #0]
		if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8101282:	4b0d      	ldr	r3, [pc, #52]	@ (81012b8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8101284:	4a0d      	ldr	r2, [pc, #52]	@ (81012bc <HAL_FDCAN_RxFifo0Callback+0x58>)
 8101286:	2140      	movs	r1, #64	@ 0x40
 8101288:	6878      	ldr	r0, [r7, #4]
 810128a:	f003 fb8b 	bl	81049a4 <HAL_FDCAN_GetRxMessage>
 810128e:	4603      	mov	r3, r0
 8101290:	2b00      	cmp	r3, #0
 8101292:	d001      	beq.n	8101298 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
			Error_Handler();
 8101294:	f000 fe0f 	bl	8101eb6 <Error_Handler>
		}


		if(HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8101298:	2200      	movs	r2, #0
 810129a:	2101      	movs	r1, #1
 810129c:	6878      	ldr	r0, [r7, #4]
 810129e:	f003 fd3d 	bl	8104d1c <HAL_FDCAN_ActivateNotification>
 81012a2:	4603      	mov	r3, r0
 81012a4:	2b00      	cmp	r3, #0
 81012a6:	d001      	beq.n	81012ac <HAL_FDCAN_RxFifo0Callback+0x48>
		{
			Error_Handler();
 81012a8:	f000 fe05 	bl	8101eb6 <Error_Handler>
		}
	}
}
 81012ac:	bf00      	nop
 81012ae:	3708      	adds	r7, #8
 81012b0:	46bd      	mov	sp, r7
 81012b2:	bd80      	pop	{r7, pc}
 81012b4:	100004f4 	.word	0x100004f4
 81012b8:	100004ec 	.word	0x100004ec
 81012bc:	100004bc 	.word	0x100004bc

081012c0 <rpmsg_recv_callback>:

static struct rpmsg_endpoint rp_endpoint;
uint32_t message = 0;

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *prv)
{
 81012c0:	b580      	push	{r7, lr}
 81012c2:	b086      	sub	sp, #24
 81012c4:	af00      	add	r7, sp, #0
 81012c6:	60f8      	str	r0, [r7, #12]
 81012c8:	60b9      	str	r1, [r7, #8]
 81012ca:	607a      	str	r2, [r7, #4]
 81012cc:	603b      	str	r3, [r7, #0]
	DataIdentifier *id = (DataIdentifier *)data;
 81012ce:	68bb      	ldr	r3, [r7, #8]
 81012d0:	617b      	str	r3, [r7, #20]
	if(*id == TORQUE_SENSOR)
 81012d2:	697b      	ldr	r3, [r7, #20]
 81012d4:	781b      	ldrb	r3, [r3, #0]
 81012d6:	2b00      	cmp	r3, #0
 81012d8:	d102      	bne.n	81012e0 <rpmsg_recv_callback+0x20>
	{
		test = (TorqueEncoder *)data;
 81012da:	4a0c      	ldr	r2, [pc, #48]	@ (810130c <rpmsg_recv_callback+0x4c>)
 81012dc:	68bb      	ldr	r3, [r7, #8]
 81012de:	6013      	str	r3, [r2, #0]
	}

//	received_data = test->valueInt; //testing struct(it works)

	if(osSemaphoreRelease(txSemaphoreHandle) != osOK) Error_Handler();	//free semaphore whenever there is a msg received
 81012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8101310 <rpmsg_recv_callback+0x50>)
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	4618      	mov	r0, r3
 81012e6:	f00a fd93 	bl	810be10 <osSemaphoreRelease>
 81012ea:	4603      	mov	r3, r0
 81012ec:	2b00      	cmp	r3, #0
 81012ee:	d001      	beq.n	81012f4 <rpmsg_recv_callback+0x34>
 81012f0:	f000 fde1 	bl	8101eb6 <Error_Handler>
	xTaskNotifyGive(sendCANTaskHandle); // Notify sendCANTask to start
 81012f4:	4b07      	ldr	r3, [pc, #28]	@ (8101314 <rpmsg_recv_callback+0x54>)
 81012f6:	6818      	ldr	r0, [r3, #0]
 81012f8:	2300      	movs	r3, #0
 81012fa:	2202      	movs	r2, #2
 81012fc:	2100      	movs	r1, #0
 81012fe:	f00d fb21 	bl	810e944 <xTaskGenericNotify>

	return 0;
 8101302:	2300      	movs	r3, #0
}
 8101304:	4618      	mov	r0, r3
 8101306:	3718      	adds	r7, #24
 8101308:	46bd      	mov	sp, r7
 810130a:	bd80      	pop	{r7, pc}
 810130c:	100004f8 	.word	0x100004f8
 8101310:	10000490 	.word	0x10000490
 8101314:	10000488 	.word	0x10000488

08101318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101318:	b580      	push	{r7, lr}
 810131a:	b082      	sub	sp, #8
 810131c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810131e:	4b3f      	ldr	r3, [pc, #252]	@ (810141c <main+0x104>)
 8101320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101324:	4a3d      	ldr	r2, [pc, #244]	@ (810141c <main+0x104>)
 8101326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810132a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810132e:	4b3b      	ldr	r3, [pc, #236]	@ (810141c <main+0x104>)
 8101330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101338:	607b      	str	r3, [r7, #4]
 810133a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810133c:	2001      	movs	r0, #1
 810133e:	f004 fc87 	bl	8105c50 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101342:	f004 fd2b 	bl	8105d9c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101346:	2201      	movs	r2, #1
 8101348:	2102      	movs	r1, #2
 810134a:	2000      	movs	r0, #0
 810134c:	f004 fcac 	bl	8105ca8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101350:	4b33      	ldr	r3, [pc, #204]	@ (8101420 <main+0x108>)
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	091b      	lsrs	r3, r3, #4
 8101356:	f003 030f 	and.w	r3, r3, #15
 810135a:	2b07      	cmp	r3, #7
 810135c:	d108      	bne.n	8101370 <main+0x58>
 810135e:	4b31      	ldr	r3, [pc, #196]	@ (8101424 <main+0x10c>)
 8101360:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101364:	4a2f      	ldr	r2, [pc, #188]	@ (8101424 <main+0x10c>)
 8101366:	f043 0301 	orr.w	r3, r3, #1
 810136a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810136e:	e007      	b.n	8101380 <main+0x68>
 8101370:	4b2c      	ldr	r3, [pc, #176]	@ (8101424 <main+0x10c>)
 8101372:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101376:	4a2b      	ldr	r2, [pc, #172]	@ (8101424 <main+0x10c>)
 8101378:	f043 0301 	orr.w	r3, r3, #1
 810137c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101380:	f001 f8b6 	bl	81024f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101384:	f000 f9ca 	bl	810171c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101388:	f000 f97c 	bl	8101684 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 810138c:	f000 f876 	bl	810147c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8101390:	f000 f8f8 	bl	8101584 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));	// wait for next data
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8101394:	2264      	movs	r2, #100	@ 0x64
 8101396:	4924      	ldr	r1, [pc, #144]	@ (8101428 <main+0x110>)
 8101398:	4824      	ldr	r0, [pc, #144]	@ (810142c <main+0x114>)
 810139a:	f00a fa84 	bl	810b8a6 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810139e:	f00a fb65 	bl	810ba6c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txSemaphore */
  txSemaphoreHandle = osSemaphoreNew(1, 1, &txSemaphore_attributes);
 81013a2:	4a23      	ldr	r2, [pc, #140]	@ (8101430 <main+0x118>)
 81013a4:	2101      	movs	r1, #1
 81013a6:	2001      	movs	r0, #1
 81013a8:	f00a fc57 	bl	810bc5a <osSemaphoreNew>
 81013ac:	4603      	mov	r3, r0
 81013ae:	4a21      	ldr	r2, [pc, #132]	@ (8101434 <main+0x11c>)
 81013b0:	6013      	str	r3, [r2, #0]

  /* creation of readSensorSemaphore */
  readSensorSemaphoreHandle = osSemaphoreNew(1, 1, &readSensorSemaphore_attributes);
 81013b2:	4a21      	ldr	r2, [pc, #132]	@ (8101438 <main+0x120>)
 81013b4:	2101      	movs	r1, #1
 81013b6:	2001      	movs	r0, #1
 81013b8:	f00a fc4f 	bl	810bc5a <osSemaphoreNew>
 81013bc:	4603      	mov	r3, r0
 81013be:	4a1f      	ldr	r2, [pc, #124]	@ (810143c <main+0x124>)
 81013c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8101440 <main+0x128>)
 81013c4:	2100      	movs	r1, #0
 81013c6:	481f      	ldr	r0, [pc, #124]	@ (8101444 <main+0x12c>)
 81013c8:	f00a fb9a 	bl	810bb00 <osThreadNew>
 81013cc:	4603      	mov	r3, r0
 81013ce:	4a1e      	ldr	r2, [pc, #120]	@ (8101448 <main+0x130>)
 81013d0:	6013      	str	r3, [r2, #0]

  /* creation of txTask */
  txTaskHandle = osThreadNew(startTxTask, NULL, &txTask_attributes);
 81013d2:	4a1e      	ldr	r2, [pc, #120]	@ (810144c <main+0x134>)
 81013d4:	2100      	movs	r1, #0
 81013d6:	481e      	ldr	r0, [pc, #120]	@ (8101450 <main+0x138>)
 81013d8:	f00a fb92 	bl	810bb00 <osThreadNew>
 81013dc:	4603      	mov	r3, r0
 81013de:	4a1d      	ldr	r2, [pc, #116]	@ (8101454 <main+0x13c>)
 81013e0:	6013      	str	r3, [r2, #0]

  /* creation of readSensors */
  readSensorsHandle = osThreadNew(startReadSensor, NULL, &readSensors_attributes);
 81013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8101458 <main+0x140>)
 81013e4:	2100      	movs	r1, #0
 81013e6:	481d      	ldr	r0, [pc, #116]	@ (810145c <main+0x144>)
 81013e8:	f00a fb8a 	bl	810bb00 <osThreadNew>
 81013ec:	4603      	mov	r3, r0
 81013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8101460 <main+0x148>)
 81013f0:	6013      	str	r3, [r2, #0]

  /* creation of sendCANTask */
  sendCANTaskHandle = osThreadNew(startSendCAN, NULL, &sendCANTask_attributes);
 81013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8101464 <main+0x14c>)
 81013f4:	2100      	movs	r1, #0
 81013f6:	481c      	ldr	r0, [pc, #112]	@ (8101468 <main+0x150>)
 81013f8:	f00a fb82 	bl	810bb00 <osThreadNew>
 81013fc:	4603      	mov	r3, r0
 81013fe:	4a1b      	ldr	r2, [pc, #108]	@ (810146c <main+0x154>)
 8101400:	6013      	str	r3, [r2, #0]

  /* creation of canTestTask */
  canTestTaskHandle = osThreadNew(startCanTest, NULL, &canTestTask_attributes);
 8101402:	4a1b      	ldr	r2, [pc, #108]	@ (8101470 <main+0x158>)
 8101404:	2100      	movs	r1, #0
 8101406:	481b      	ldr	r0, [pc, #108]	@ (8101474 <main+0x15c>)
 8101408:	f00a fb7a 	bl	810bb00 <osThreadNew>
 810140c:	4603      	mov	r3, r0
 810140e:	4a1a      	ldr	r2, [pc, #104]	@ (8101478 <main+0x160>)
 8101410:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8101412:	f00a fb4f 	bl	810bab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101416:	bf00      	nop
 8101418:	e7fd      	b.n	8101416 <main+0xfe>
 810141a:	bf00      	nop
 810141c:	58024400 	.word	0x58024400
 8101420:	e000ed00 	.word	0xe000ed00
 8101424:	58026400 	.word	0x58026400
 8101428:	100004fc 	.word	0x100004fc
 810142c:	100003e8 	.word	0x100003e8
 8101430:	08117450 	.word	0x08117450
 8101434:	10000490 	.word	0x10000490
 8101438:	08117460 	.word	0x08117460
 810143c:	10000494 	.word	0x10000494
 8101440:	0811739c 	.word	0x0811739c
 8101444:	081018cd 	.word	0x081018cd
 8101448:	1000047c 	.word	0x1000047c
 810144c:	081173c0 	.word	0x081173c0
 8101450:	08101941 	.word	0x08101941
 8101454:	10000480 	.word	0x10000480
 8101458:	081173e4 	.word	0x081173e4
 810145c:	08101a41 	.word	0x08101a41
 8101460:	10000484 	.word	0x10000484
 8101464:	08117408 	.word	0x08117408
 8101468:	08101af9 	.word	0x08101af9
 810146c:	10000488 	.word	0x10000488
 8101470:	0811742c 	.word	0x0811742c
 8101474:	08101bdd 	.word	0x08101bdd
 8101478:	1000048c 	.word	0x1000048c

0810147c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810147c:	b580      	push	{r7, lr}
 810147e:	b08a      	sub	sp, #40	@ 0x28
 8101480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101482:	f107 031c 	add.w	r3, r7, #28
 8101486:	2200      	movs	r2, #0
 8101488:	601a      	str	r2, [r3, #0]
 810148a:	605a      	str	r2, [r3, #4]
 810148c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810148e:	463b      	mov	r3, r7
 8101490:	2200      	movs	r2, #0
 8101492:	601a      	str	r2, [r3, #0]
 8101494:	605a      	str	r2, [r3, #4]
 8101496:	609a      	str	r2, [r3, #8]
 8101498:	60da      	str	r2, [r3, #12]
 810149a:	611a      	str	r2, [r3, #16]
 810149c:	615a      	str	r2, [r3, #20]
 810149e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81014a0:	4b35      	ldr	r3, [pc, #212]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014a2:	4a36      	ldr	r2, [pc, #216]	@ (810157c <MX_ADC1_Init+0x100>)
 81014a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81014a6:	4b34      	ldr	r3, [pc, #208]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014a8:	2200      	movs	r2, #0
 81014aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81014ac:	4b32      	ldr	r3, [pc, #200]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014ae:	2204      	movs	r2, #4
 81014b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81014b2:	4b31      	ldr	r3, [pc, #196]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014b4:	2200      	movs	r2, #0
 81014b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 81014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014ba:	2201      	movs	r2, #1
 81014bc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81014be:	4b2e      	ldr	r3, [pc, #184]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014c0:	2201      	movs	r2, #1
 81014c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014c6:	2200      	movs	r2, #0
 81014c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014cc:	2200      	movs	r2, #0
 81014ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81014d0:	4b29      	ldr	r3, [pc, #164]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014d2:	2200      	movs	r2, #0
 81014d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81014d6:	4b28      	ldr	r3, [pc, #160]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014d8:	2200      	movs	r2, #0
 81014da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81014dc:	4b26      	ldr	r3, [pc, #152]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014de:	2200      	movs	r2, #0
 81014e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81014e2:	4b25      	ldr	r3, [pc, #148]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014e4:	2200      	movs	r2, #0
 81014e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81014e8:	4b23      	ldr	r3, [pc, #140]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014ea:	2200      	movs	r2, #0
 81014ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81014f0:	4b21      	ldr	r3, [pc, #132]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014f2:	2201      	movs	r2, #1
 81014f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81014f6:	4820      	ldr	r0, [pc, #128]	@ (8101578 <MX_ADC1_Init+0xfc>)
 81014f8:	f001 fa10 	bl	810291c <HAL_ADC_Init>
 81014fc:	4603      	mov	r3, r0
 81014fe:	2b00      	cmp	r3, #0
 8101500:	d001      	beq.n	8101506 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8101502:	f000 fcd8 	bl	8101eb6 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101506:	4b1c      	ldr	r3, [pc, #112]	@ (8101578 <MX_ADC1_Init+0xfc>)
 8101508:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 810150c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 810150e:	4b1a      	ldr	r3, [pc, #104]	@ (8101578 <MX_ADC1_Init+0xfc>)
 8101510:	2208      	movs	r2, #8
 8101512:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101514:	4818      	ldr	r0, [pc, #96]	@ (8101578 <MX_ADC1_Init+0xfc>)
 8101516:	f001 fa01 	bl	810291c <HAL_ADC_Init>
 810151a:	4603      	mov	r3, r0
 810151c:	2b00      	cmp	r3, #0
 810151e:	d001      	beq.n	8101524 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8101520:	f000 fcc9 	bl	8101eb6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101524:	2300      	movs	r3, #0
 8101526:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101528:	f107 031c 	add.w	r3, r7, #28
 810152c:	4619      	mov	r1, r3
 810152e:	4812      	ldr	r0, [pc, #72]	@ (8101578 <MX_ADC1_Init+0xfc>)
 8101530:	f002 f824 	bl	810357c <HAL_ADCEx_MultiModeConfigChannel>
 8101534:	4603      	mov	r3, r0
 8101536:	2b00      	cmp	r3, #0
 8101538:	d001      	beq.n	810153e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 810153a:	f000 fcbc 	bl	8101eb6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 810153e:	4b10      	ldr	r3, [pc, #64]	@ (8101580 <MX_ADC1_Init+0x104>)
 8101540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101542:	2306      	movs	r3, #6
 8101544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101546:	2300      	movs	r3, #0
 8101548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810154a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 810154e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101550:	2304      	movs	r3, #4
 8101552:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101554:	2300      	movs	r3, #0
 8101556:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101558:	2300      	movs	r3, #0
 810155a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810155c:	463b      	mov	r3, r7
 810155e:	4619      	mov	r1, r3
 8101560:	4805      	ldr	r0, [pc, #20]	@ (8101578 <MX_ADC1_Init+0xfc>)
 8101562:	f001 fb7d 	bl	8102c60 <HAL_ADC_ConfigChannel>
 8101566:	4603      	mov	r3, r0
 8101568:	2b00      	cmp	r3, #0
 810156a:	d001      	beq.n	8101570 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 810156c:	f000 fca3 	bl	8101eb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101570:	bf00      	nop
 8101572:	3728      	adds	r7, #40	@ 0x28
 8101574:	46bd      	mov	sp, r7
 8101576:	bd80      	pop	{r7, pc}
 8101578:	100002e4 	.word	0x100002e4
 810157c:	40022000 	.word	0x40022000
 8101580:	3ef08000 	.word	0x3ef08000

08101584 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8101584:	b580      	push	{r7, lr}
 8101586:	b088      	sub	sp, #32
 8101588:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 810158a:	4b3c      	ldr	r3, [pc, #240]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 810158c:	4a3c      	ldr	r2, [pc, #240]	@ (8101680 <MX_FDCAN1_Init+0xfc>)
 810158e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8101590:	4b3a      	ldr	r3, [pc, #232]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101592:	2200      	movs	r2, #0
 8101594:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8101596:	4b39      	ldr	r3, [pc, #228]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101598:	2200      	movs	r2, #0
 810159a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 810159c:	4b37      	ldr	r3, [pc, #220]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 810159e:	2200      	movs	r2, #0
 81015a0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 81015a2:	4b36      	ldr	r3, [pc, #216]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015a4:	2201      	movs	r2, #1
 81015a6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 81015a8:	4b34      	ldr	r3, [pc, #208]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015aa:	2200      	movs	r2, #0
 81015ac:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 81015ae:	4b33      	ldr	r3, [pc, #204]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015b0:	2202      	movs	r2, #2
 81015b2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 81015b4:	4b31      	ldr	r3, [pc, #196]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015b6:	2201      	movs	r2, #1
 81015b8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 81015ba:	4b30      	ldr	r3, [pc, #192]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015bc:	220a      	movs	r2, #10
 81015be:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 81015c0:	4b2e      	ldr	r3, [pc, #184]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015c2:	2202      	movs	r2, #2
 81015c4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 81015c6:	4b2d      	ldr	r3, [pc, #180]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015c8:	2205      	movs	r2, #5
 81015ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 81015cc:	4b2b      	ldr	r3, [pc, #172]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015ce:	2201      	movs	r2, #1
 81015d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 81015d2:	4b2a      	ldr	r3, [pc, #168]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015d4:	220d      	movs	r2, #13
 81015d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 81015d8:	4b28      	ldr	r3, [pc, #160]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015da:	2202      	movs	r2, #2
 81015dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 81015de:	4b27      	ldr	r3, [pc, #156]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015e0:	2200      	movs	r2, #0
 81015e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 81015e4:	4b25      	ldr	r3, [pc, #148]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015e6:	2201      	movs	r2, #1
 81015e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 81015ea:	4b24      	ldr	r3, [pc, #144]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015ec:	2200      	movs	r2, #0
 81015ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 81015f0:	4b22      	ldr	r3, [pc, #136]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015f2:	2240      	movs	r2, #64	@ 0x40
 81015f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81015f6:	4b21      	ldr	r3, [pc, #132]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015f8:	2204      	movs	r2, #4
 81015fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 81015fc:	4b1f      	ldr	r3, [pc, #124]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 81015fe:	2200      	movs	r2, #0
 8101600:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8101602:	4b1e      	ldr	r3, [pc, #120]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101604:	2204      	movs	r2, #4
 8101606:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8101608:	4b1c      	ldr	r3, [pc, #112]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 810160a:	2200      	movs	r2, #0
 810160c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 810160e:	4b1b      	ldr	r3, [pc, #108]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101610:	2204      	movs	r2, #4
 8101612:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8101614:	4b19      	ldr	r3, [pc, #100]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101616:	2200      	movs	r2, #0
 8101618:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 810161a:	4b18      	ldr	r3, [pc, #96]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 810161c:	2200      	movs	r2, #0
 810161e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8101620:	4b16      	ldr	r3, [pc, #88]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101622:	2220      	movs	r2, #32
 8101624:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8101626:	4b15      	ldr	r3, [pc, #84]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101628:	2200      	movs	r2, #0
 810162a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810162c:	4b13      	ldr	r3, [pc, #76]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 810162e:	2204      	movs	r2, #4
 8101630:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8101632:	4812      	ldr	r0, [pc, #72]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101634:	f002 fedc 	bl	81043f0 <HAL_FDCAN_Init>
 8101638:	4603      	mov	r3, r0
 810163a:	2b00      	cmp	r3, #0
 810163c:	d001      	beq.n	8101642 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 810163e:	f000 fc3a 	bl	8101eb6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID; //standard CAN
 8101642:	2300      	movs	r3, #0
 8101644:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0; //FILTER BANK
 8101646:	2300      	movs	r3, #0
 8101648:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_MASK; // SAME AS FILTER MODE FDCAN_FILTER_MASK
 810164a:	2302      	movs	r3, #2
 810164c:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //SAME AS FIFO ASSIGNMENT
 810164e:	2301      	movs	r3, #1
 8101650:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;	//accept from given id
 8101652:	2300      	movs	r3, #0
 8101654:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x000;
 8101656:	2300      	movs	r3, #0
 8101658:	617b      	str	r3, [r7, #20]
  canFilterConfig.RxBufferIndex = 0;
 810165a:	2300      	movs	r3, #0
 810165c:	61bb      	str	r3, [r7, #24]

  if(HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 810165e:	463b      	mov	r3, r7
 8101660:	4619      	mov	r1, r3
 8101662:	4806      	ldr	r0, [pc, #24]	@ (810167c <MX_FDCAN1_Init+0xf8>)
 8101664:	f003 f8a2 	bl	81047ac <HAL_FDCAN_ConfigFilter>
 8101668:	4603      	mov	r3, r0
 810166a:	2b00      	cmp	r3, #0
 810166c:	d001      	beq.n	8101672 <MX_FDCAN1_Init+0xee>
  {
	  Error_Handler();
 810166e:	f000 fc22 	bl	8101eb6 <Error_Handler>
  }


  /* USER CODE END FDCAN1_Init 2 */

}
 8101672:	bf00      	nop
 8101674:	3720      	adds	r7, #32
 8101676:	46bd      	mov	sp, r7
 8101678:	bd80      	pop	{r7, pc}
 810167a:	bf00      	nop
 810167c:	10000348 	.word	0x10000348
 8101680:	4000a000 	.word	0x4000a000

08101684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101688:	4b22      	ldr	r3, [pc, #136]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 810168a:	4a23      	ldr	r2, [pc, #140]	@ (8101718 <MX_USART3_UART_Init+0x94>)
 810168c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810168e:	4b21      	ldr	r3, [pc, #132]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 8101690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101696:	4b1f      	ldr	r3, [pc, #124]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 8101698:	2200      	movs	r2, #0
 810169a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810169c:	4b1d      	ldr	r3, [pc, #116]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 810169e:	2200      	movs	r2, #0
 81016a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016a4:	2200      	movs	r2, #0
 81016a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016aa:	220c      	movs	r2, #12
 81016ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81016ae:	4b19      	ldr	r3, [pc, #100]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016b0:	2200      	movs	r2, #0
 81016b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81016b4:	4b17      	ldr	r3, [pc, #92]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016b6:	2200      	movs	r2, #0
 81016b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81016ba:	4b16      	ldr	r3, [pc, #88]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016bc:	2200      	movs	r2, #0
 81016be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81016c0:	4b14      	ldr	r3, [pc, #80]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016c2:	2200      	movs	r2, #0
 81016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81016c6:	4b13      	ldr	r3, [pc, #76]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016c8:	2200      	movs	r2, #0
 81016ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81016cc:	4811      	ldr	r0, [pc, #68]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016ce:	f007 fd59 	bl	8109184 <HAL_UART_Init>
 81016d2:	4603      	mov	r3, r0
 81016d4:	2b00      	cmp	r3, #0
 81016d6:	d001      	beq.n	81016dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81016d8:	f000 fbed 	bl	8101eb6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81016dc:	2100      	movs	r1, #0
 81016de:	480d      	ldr	r0, [pc, #52]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016e0:	f00a f865 	bl	810b7ae <HAL_UARTEx_SetTxFifoThreshold>
 81016e4:	4603      	mov	r3, r0
 81016e6:	2b00      	cmp	r3, #0
 81016e8:	d001      	beq.n	81016ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81016ea:	f000 fbe4 	bl	8101eb6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81016ee:	2100      	movs	r1, #0
 81016f0:	4808      	ldr	r0, [pc, #32]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 81016f2:	f00a f89a 	bl	810b82a <HAL_UARTEx_SetRxFifoThreshold>
 81016f6:	4603      	mov	r3, r0
 81016f8:	2b00      	cmp	r3, #0
 81016fa:	d001      	beq.n	8101700 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81016fc:	f000 fbdb 	bl	8101eb6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101700:	4804      	ldr	r0, [pc, #16]	@ (8101714 <MX_USART3_UART_Init+0x90>)
 8101702:	f00a f81b 	bl	810b73c <HAL_UARTEx_DisableFifoMode>
 8101706:	4603      	mov	r3, r0
 8101708:	2b00      	cmp	r3, #0
 810170a:	d001      	beq.n	8101710 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810170c:	f000 fbd3 	bl	8101eb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101710:	bf00      	nop
 8101712:	bd80      	pop	{r7, pc}
 8101714:	100003e8 	.word	0x100003e8
 8101718:	40004800 	.word	0x40004800

0810171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810171c:	b580      	push	{r7, lr}
 810171e:	b08a      	sub	sp, #40	@ 0x28
 8101720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101722:	f107 0314 	add.w	r3, r7, #20
 8101726:	2200      	movs	r2, #0
 8101728:	601a      	str	r2, [r3, #0]
 810172a:	605a      	str	r2, [r3, #4]
 810172c:	609a      	str	r2, [r3, #8]
 810172e:	60da      	str	r2, [r3, #12]
 8101730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101732:	4b35      	ldr	r3, [pc, #212]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101738:	4a33      	ldr	r2, [pc, #204]	@ (8101808 <MX_GPIO_Init+0xec>)
 810173a:	f043 0320 	orr.w	r3, r3, #32
 810173e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101742:	4b31      	ldr	r3, [pc, #196]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101748:	f003 0320 	and.w	r3, r3, #32
 810174c:	613b      	str	r3, [r7, #16]
 810174e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101750:	4b2d      	ldr	r3, [pc, #180]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101756:	4a2c      	ldr	r2, [pc, #176]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101758:	f043 0301 	orr.w	r3, r3, #1
 810175c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101760:	4b29      	ldr	r3, [pc, #164]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101766:	f003 0301 	and.w	r3, r3, #1
 810176a:	60fb      	str	r3, [r7, #12]
 810176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810176e:	4b26      	ldr	r3, [pc, #152]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101774:	4a24      	ldr	r2, [pc, #144]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101776:	f043 0302 	orr.w	r3, r3, #2
 810177a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810177e:	4b22      	ldr	r3, [pc, #136]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101784:	f003 0302 	and.w	r3, r3, #2
 8101788:	60bb      	str	r3, [r7, #8]
 810178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810178c:	4b1e      	ldr	r3, [pc, #120]	@ (8101808 <MX_GPIO_Init+0xec>)
 810178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101792:	4a1d      	ldr	r2, [pc, #116]	@ (8101808 <MX_GPIO_Init+0xec>)
 8101794:	f043 0308 	orr.w	r3, r3, #8
 8101798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810179c:	4b1a      	ldr	r3, [pc, #104]	@ (8101808 <MX_GPIO_Init+0xec>)
 810179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017a2:	f003 0308 	and.w	r3, r3, #8
 81017a6:	607b      	str	r3, [r7, #4]
 81017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 81017aa:	2200      	movs	r2, #0
 81017ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81017b0:	4816      	ldr	r0, [pc, #88]	@ (810180c <MX_GPIO_Init+0xf0>)
 81017b2:	f004 f9eb 	bl	8105b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 81017b6:	2200      	movs	r2, #0
 81017b8:	f244 0101 	movw	r1, #16385	@ 0x4001
 81017bc:	4814      	ldr	r0, [pc, #80]	@ (8101810 <MX_GPIO_Init+0xf4>)
 81017be:	f004 f9e5 	bl	8105b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 81017c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81017c8:	2301      	movs	r3, #1
 81017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017cc:	2300      	movs	r3, #0
 81017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017d0:	2300      	movs	r3, #0
 81017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81017d4:	f107 0314 	add.w	r3, r7, #20
 81017d8:	4619      	mov	r1, r3
 81017da:	480c      	ldr	r0, [pc, #48]	@ (810180c <MX_GPIO_Init+0xf0>)
 81017dc:	f004 f826 	bl	810582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 81017e0:	f244 0301 	movw	r3, #16385	@ 0x4001
 81017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81017e6:	2301      	movs	r3, #1
 81017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017ea:	2300      	movs	r3, #0
 81017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017ee:	2300      	movs	r3, #0
 81017f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81017f2:	f107 0314 	add.w	r3, r7, #20
 81017f6:	4619      	mov	r1, r3
 81017f8:	4805      	ldr	r0, [pc, #20]	@ (8101810 <MX_GPIO_Init+0xf4>)
 81017fa:	f004 f817 	bl	810582c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81017fe:	bf00      	nop
 8101800:	3728      	adds	r7, #40	@ 0x28
 8101802:	46bd      	mov	sp, r7
 8101804:	bd80      	pop	{r7, pc}
 8101806:	bf00      	nop
 8101808:	58024400 	.word	0x58024400
 810180c:	58021400 	.word	0x58021400
 8101810:	58020400 	.word	0x58020400

08101814 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8101814:	b580      	push	{r7, lr}
 8101816:	b084      	sub	sp, #16
 8101818:	af00      	add	r7, sp, #0
 810181a:	6078      	str	r0, [r7, #4]
 810181c:	460b      	mov	r3, r1
 810181e:	807b      	strh	r3, [r7, #2]
	indx = Size;
 8101820:	887b      	ldrh	r3, [r7, #2]
 8101822:	4a10      	ldr	r2, [pc, #64]	@ (8101864 <HAL_UARTEx_RxEventCallback+0x50>)
 8101824:	6013      	str	r3, [r2, #0]
	if (huart->Instance == USART3) {
 8101826:	687b      	ldr	r3, [r7, #4]
 8101828:	681b      	ldr	r3, [r3, #0]
 810182a:	4a0f      	ldr	r2, [pc, #60]	@ (8101868 <HAL_UARTEx_RxEventCallback+0x54>)
 810182c:	4293      	cmp	r3, r2
 810182e:	d114      	bne.n	810185a <HAL_UARTEx_RxEventCallback+0x46>
		// Notify the UART task when data is received
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8101830:	2300      	movs	r3, #0
 8101832:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(readSensorsHandle, &xHigherPriorityTaskWoken);	//notify given task from ISR, cant use xTaskNotify
 8101834:	4b0d      	ldr	r3, [pc, #52]	@ (810186c <HAL_UARTEx_RxEventCallback+0x58>)
 8101836:	681b      	ldr	r3, [r3, #0]
 8101838:	f107 020c 	add.w	r2, r7, #12
 810183c:	4611      	mov	r1, r2
 810183e:	4618      	mov	r0, r3
 8101840:	f00d f93a 	bl	810eab8 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8101844:	68fb      	ldr	r3, [r7, #12]
 8101846:	2b00      	cmp	r3, #0
 8101848:	d007      	beq.n	810185a <HAL_UARTEx_RxEventCallback+0x46>
 810184a:	4b09      	ldr	r3, [pc, #36]	@ (8101870 <HAL_UARTEx_RxEventCallback+0x5c>)
 810184c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101850:	601a      	str	r2, [r3, #0]
 8101852:	f3bf 8f4f 	dsb	sy
 8101856:	f3bf 8f6f 	isb	sy
	}
}
 810185a:	bf00      	nop
 810185c:	3710      	adds	r7, #16
 810185e:	46bd      	mov	sp, r7
 8101860:	bd80      	pop	{r7, pc}
 8101862:	bf00      	nop
 8101864:	10000560 	.word	0x10000560
 8101868:	40004800 	.word	0x40004800
 810186c:	10000484 	.word	0x10000484
 8101870:	e000ed04 	.word	0xe000ed04

08101874 <parseCSV>:


uint32_t *parseCSV(char* data)	//data should be coming in as "sensor1, sensor2"
{
 8101874:	b580      	push	{r7, lr}
 8101876:	b086      	sub	sp, #24
 8101878:	af00      	add	r7, sp, #0
 810187a:	6078      	str	r0, [r7, #4]
	char *token;
	//malloc array size 20 (at most 20 character input)
	uint32_t *valueArray = (uint32_t *) pvPortMalloc(20 * sizeof(uint32_t));
 810187c:	2050      	movs	r0, #80	@ 0x50
 810187e:	f00a fb3f 	bl	810bf00 <pvPortMalloc>
 8101882:	60f8      	str	r0, [r7, #12]
	uint32_t i = 0;
 8101884:	2300      	movs	r3, #0
 8101886:	613b      	str	r3, [r7, #16]

	token = strtok(data, ","); //take token
 8101888:	490f      	ldr	r1, [pc, #60]	@ (81018c8 <parseCSV+0x54>)
 810188a:	6878      	ldr	r0, [r7, #4]
 810188c:	f011 f980 	bl	8112b90 <strtok>
 8101890:	6178      	str	r0, [r7, #20]
	while(token != NULL) //loop through
 8101892:	e011      	b.n	81018b8 <parseCSV+0x44>
	{
		valueArray[i] = atol(token);
 8101894:	6978      	ldr	r0, [r7, #20]
 8101896:	f010 f863 	bl	8111960 <atol>
 810189a:	4601      	mov	r1, r0
 810189c:	693b      	ldr	r3, [r7, #16]
 810189e:	009b      	lsls	r3, r3, #2
 81018a0:	68fa      	ldr	r2, [r7, #12]
 81018a2:	4413      	add	r3, r2
 81018a4:	460a      	mov	r2, r1
 81018a6:	601a      	str	r2, [r3, #0]
		i++;
 81018a8:	693b      	ldr	r3, [r7, #16]
 81018aa:	3301      	adds	r3, #1
 81018ac:	613b      	str	r3, [r7, #16]
		token = strtok(NULL, ",");	//next token
 81018ae:	4906      	ldr	r1, [pc, #24]	@ (81018c8 <parseCSV+0x54>)
 81018b0:	2000      	movs	r0, #0
 81018b2:	f011 f96d 	bl	8112b90 <strtok>
 81018b6:	6178      	str	r0, [r7, #20]
	while(token != NULL) //loop through
 81018b8:	697b      	ldr	r3, [r7, #20]
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d1ea      	bne.n	8101894 <parseCSV+0x20>
	}
	return valueArray;
 81018be:	68fb      	ldr	r3, [r7, #12]
}
 81018c0:	4618      	mov	r0, r3
 81018c2:	3718      	adds	r7, #24
 81018c4:	46bd      	mov	sp, r7
 81018c6:	bd80      	pop	{r7, pc}
 81018c8:	081170a8 	.word	0x081170a8

081018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81018cc:	b580      	push	{r7, lr}
 81018ce:	b086      	sub	sp, #24
 81018d0:	af02      	add	r7, sp, #8
 81018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Receive data from m7 IPC OpenAMP task
	//INIT OPEN AMP ENDPOINT SLAVE
	MAILBOX_Init();
 81018d4:	f00f fe48 	bl	8111568 <MAILBOX_Init>

	if(MX_OPENAMP_Init(RPMSG_REMOTE, NULL) != HAL_OK) Error_Handler();
 81018d8:	2100      	movs	r1, #0
 81018da:	2001      	movs	r0, #1
 81018dc:	f00f ff46 	bl	811176c <MX_OPENAMP_Init>
 81018e0:	4603      	mov	r3, r0
 81018e2:	2b00      	cmp	r3, #0
 81018e4:	d001      	beq.n	81018ea <StartDefaultTask+0x1e>
 81018e6:	f000 fae6 	bl	8101eb6 <Error_Handler>

	int32_t status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME,
 81018ea:	2300      	movs	r3, #0
 81018ec:	9300      	str	r3, [sp, #0]
 81018ee:	4b10      	ldr	r3, [pc, #64]	@ (8101930 <StartDefaultTask+0x64>)
 81018f0:	f04f 32ff 	mov.w	r2, #4294967295
 81018f4:	490f      	ldr	r1, [pc, #60]	@ (8101934 <StartDefaultTask+0x68>)
 81018f6:	4810      	ldr	r0, [pc, #64]	@ (8101938 <StartDefaultTask+0x6c>)
 81018f8:	f00f ffce 	bl	8111898 <OPENAMP_create_endpoint>
 81018fc:	60f8      	str	r0, [r7, #12]
		  RPMSG_ADDR_ANY, rpmsg_recv_callback,
		  NULL);
	if(status < 0) Error_Handler();
 81018fe:	68fb      	ldr	r3, [r7, #12]
 8101900:	2b00      	cmp	r3, #0
 8101902:	da01      	bge.n	8101908 <StartDefaultTask+0x3c>
 8101904:	f000 fad7 	bl	8101eb6 <Error_Handler>

	if(osSemaphoreAcquire(txSemaphoreHandle, osWaitForever) != osOK) Error_Handler(); //acquire semaphore so that Nothing is transmitted yet
 8101908:	4b0c      	ldr	r3, [pc, #48]	@ (810193c <StartDefaultTask+0x70>)
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	f04f 31ff 	mov.w	r1, #4294967295
 8101910:	4618      	mov	r0, r3
 8101912:	f00a fa2b 	bl	810bd6c <osSemaphoreAcquire>
 8101916:	4603      	mov	r3, r0
 8101918:	2b00      	cmp	r3, #0
 810191a:	d001      	beq.n	8101920 <StartDefaultTask+0x54>
 810191c:	f000 facb 	bl	8101eb6 <Error_Handler>
  /* Infinite loop */
  for(;;)
  {
	  OPENAMP_check_for_message();
 8101920:	f00f ffd8 	bl	81118d4 <OPENAMP_check_for_message>

      osDelay(1);
 8101924:	2001      	movs	r0, #1
 8101926:	f00a f97d 	bl	810bc24 <osDelay>
	  OPENAMP_check_for_message();
 810192a:	bf00      	nop
 810192c:	e7f8      	b.n	8101920 <StartDefaultTask+0x54>
 810192e:	bf00      	nop
 8101930:	081012c1 	.word	0x081012c1
 8101934:	081170ac 	.word	0x081170ac
 8101938:	10000564 	.word	0x10000564
 810193c:	10000490 	.word	0x10000490

08101940 <startTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxTask */
void startTxTask(void *argument)
{
 8101940:	b580      	push	{r7, lr}
 8101942:	b084      	sub	sp, #16
 8101944:	af00      	add	r7, sp, #0
 8101946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxTask */
	uint32_t bufferData = 0;
 8101948:	2300      	movs	r3, #0
 810194a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read sensor task)
 810194c:	f04f 31ff 	mov.w	r1, #4294967295
 8101950:	2001      	movs	r0, #1
 8101952:	f00c ffaf 	bl	810e8b4 <ulTaskNotifyTake>
	  TorqueEncoder *test = (TorqueEncoder*)pvPortMalloc(sizeof(struct TorqueEncoder));	//testing only
 8101956:	2020      	movs	r0, #32
 8101958:	f00a fad2 	bl	810bf00 <pvPortMalloc>
 810195c:	60f8      	str	r0, [r7, #12]
	  	test -> id = TORQUE_SENSOR;
 810195e:	68fb      	ldr	r3, [r7, #12]
 8101960:	2200      	movs	r2, #0
 8101962:	701a      	strb	r2, [r3, #0]
	  	test -> valueFloat = 0;
 8101964:	68fb      	ldr	r3, [r7, #12]
 8101966:	f04f 0200 	mov.w	r2, #0
 810196a:	619a      	str	r2, [r3, #24]
	  	test -> valueInt = 0;
 810196c:	68fb      	ldr	r3, [r7, #12]
 810196e:	2200      	movs	r2, #0
 8101970:	605a      	str	r2, [r3, #4]
	  	test -> sensor1 = 0;
 8101972:	68fb      	ldr	r3, [r7, #12]
 8101974:	2200      	movs	r2, #0
 8101976:	609a      	str	r2, [r3, #8]
	  	test -> sensorPercent0 = 0;
 8101978:	68fb      	ldr	r3, [r7, #12]
 810197a:	f04f 0200 	mov.w	r2, #0
 810197e:	60da      	str	r2, [r3, #12]
	  	test -> sensorPercent1 = 0;
 8101980:	68fb      	ldr	r3, [r7, #12]
 8101982:	f04f 0200 	mov.w	r2, #0
 8101986:	611a      	str	r2, [r3, #16]
	  	test -> travelPercent = 0;
 8101988:	68fb      	ldr	r3, [r7, #12]
 810198a:	f04f 0200 	mov.w	r2, #0
 810198e:	615a      	str	r2, [r3, #20]
	  	test -> valueBool = false;
 8101990:	68fb      	ldr	r3, [r7, #12]
 8101992:	2200      	movs	r2, #0
 8101994:	771a      	strb	r2, [r3, #28]

	  if(osSemaphoreAcquire(readSensorSemaphoreHandle, osWaitForever) != osOK) Error_Handler();	//acquire semaphore for buffer read
 8101996:	4b26      	ldr	r3, [pc, #152]	@ (8101a30 <startTxTask+0xf0>)
 8101998:	681b      	ldr	r3, [r3, #0]
 810199a:	f04f 31ff 	mov.w	r1, #4294967295
 810199e:	4618      	mov	r0, r3
 81019a0:	f00a f9e4 	bl	810bd6c <osSemaphoreAcquire>
 81019a4:	4603      	mov	r3, r0
 81019a6:	2b00      	cmp	r3, #0
 81019a8:	d001      	beq.n	81019ae <startTxTask+0x6e>
 81019aa:	f000 fa84 	bl	8101eb6 <Error_Handler>

	  if(bufferGet(&bufferData)) //get data from buffer if not empty
 81019ae:	f107 0308 	add.w	r3, r7, #8
 81019b2:	4618      	mov	r0, r3
 81019b4:	f7ff fc04 	bl	81011c0 <bufferGet>
 81019b8:	4603      	mov	r3, r0
 81019ba:	2b00      	cmp	r3, #0
 81019bc:	d027      	beq.n	8101a0e <startTxTask+0xce>
	  {
		  test-> valueInt = bufferData;
 81019be:	68ba      	ldr	r2, [r7, #8]
 81019c0:	68fb      	ldr	r3, [r7, #12]
 81019c2:	605a      	str	r2, [r3, #4]
		  if(bufferGet(&bufferData)) test->sensor1 = bufferData;
 81019c4:	f107 0308 	add.w	r3, r7, #8
 81019c8:	4618      	mov	r0, r3
 81019ca:	f7ff fbf9 	bl	81011c0 <bufferGet>
 81019ce:	4603      	mov	r3, r0
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d002      	beq.n	81019da <startTxTask+0x9a>
 81019d4:	68ba      	ldr	r2, [r7, #8]
 81019d6:	68fb      	ldr	r3, [r7, #12]
 81019d8:	609a      	str	r2, [r3, #8]

		  if(osSemaphoreAcquire(txSemaphoreHandle, osWaitForever) != osOK) Error_Handler(); //SYNC with receiving data task from C7 core
 81019da:	4b16      	ldr	r3, [pc, #88]	@ (8101a34 <startTxTask+0xf4>)
 81019dc:	681b      	ldr	r3, [r3, #0]
 81019de:	f04f 31ff 	mov.w	r1, #4294967295
 81019e2:	4618      	mov	r0, r3
 81019e4:	f00a f9c2 	bl	810bd6c <osSemaphoreAcquire>
 81019e8:	4603      	mov	r3, r0
 81019ea:	2b00      	cmp	r3, #0
 81019ec:	d001      	beq.n	81019f2 <startTxTask+0xb2>
 81019ee:	f000 fa62 	bl	8101eb6 <Error_Handler>

		  if(OPENAMP_send(&rp_endpoint, test, sizeof(struct TorqueEncoder)) < 0)  Error_Handler(); //Send data to m7 core
 81019f2:	2220      	movs	r2, #32
 81019f4:	68f9      	ldr	r1, [r7, #12]
 81019f6:	4810      	ldr	r0, [pc, #64]	@ (8101a38 <startTxTask+0xf8>)
 81019f8:	f7ff fc14 	bl	8101224 <rpmsg_send>
 81019fc:	4603      	mov	r3, r0
 81019fe:	2b00      	cmp	r3, #0
 8101a00:	da01      	bge.n	8101a06 <startTxTask+0xc6>
 8101a02:	f000 fa58 	bl	8101eb6 <Error_Handler>

		  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8101a06:	2101      	movs	r1, #1
 8101a08:	480c      	ldr	r0, [pc, #48]	@ (8101a3c <startTxTask+0xfc>)
 8101a0a:	f004 f8d8 	bl	8105bbe <HAL_GPIO_TogglePin>
	  }
	  if(osSemaphoreRelease(readSensorSemaphoreHandle) != osOK) Error_Handler();	//free semaphore, done with buffer read
 8101a0e:	4b08      	ldr	r3, [pc, #32]	@ (8101a30 <startTxTask+0xf0>)
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	4618      	mov	r0, r3
 8101a14:	f00a f9fc 	bl	810be10 <osSemaphoreRelease>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d001      	beq.n	8101a22 <startTxTask+0xe2>
 8101a1e:	f000 fa4a 	bl	8101eb6 <Error_Handler>

	  vPortFree(test);
 8101a22:	68f8      	ldr	r0, [r7, #12]
 8101a24:	f00a fb3a 	bl	810c09c <vPortFree>
      osDelay(1);
 8101a28:	2001      	movs	r0, #1
 8101a2a:	f00a f8fb 	bl	810bc24 <osDelay>
  {
 8101a2e:	e78d      	b.n	810194c <startTxTask+0xc>
 8101a30:	10000494 	.word	0x10000494
 8101a34:	10000490 	.word	0x10000490
 8101a38:	10000564 	.word	0x10000564
 8101a3c:	58020400 	.word	0x58020400

08101a40 <startReadSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensor */
void startReadSensor(void *argument)
{
 8101a40:	b580      	push	{r7, lr}
 8101a42:	b084      	sub	sp, #16
 8101a44:	af00      	add	r7, sp, #0
 8101a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensor */
  uint32_t i = 0;
 8101a48:	2300      	movs	r3, #0
 8101a4a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);	//blocks until notified, Used for testing (simulation)
 8101a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8101a50:	2001      	movs	r0, #1
 8101a52:	f00c ff2f 	bl	810e8b4 <ulTaskNotifyTake>

	  uint32_t* valueArray = parseCSV((char*) rx_buffer);	//TESTING ONLY READ 2 SENSOR VALUES AND BUT INTO BUFFER
 8101a56:	4823      	ldr	r0, [pc, #140]	@ (8101ae4 <startReadSensor+0xa4>)
 8101a58:	f7ff ff0c 	bl	8101874 <parseCSV>
 8101a5c:	60b8      	str	r0, [r7, #8]
	  for(i = 0; i < 2; i++)
 8101a5e:	2300      	movs	r3, #0
 8101a60:	60fb      	str	r3, [r7, #12]
 8101a62:	e023      	b.n	8101aac <startReadSensor+0x6c>
	  {
		  if(osSemaphoreAcquire(readSensorSemaphoreHandle, osWaitForever) != osOK) Error_Handler();	//acquire semaphore for buffer write
 8101a64:	4b20      	ldr	r3, [pc, #128]	@ (8101ae8 <startReadSensor+0xa8>)
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	f04f 31ff 	mov.w	r1, #4294967295
 8101a6c:	4618      	mov	r0, r3
 8101a6e:	f00a f97d 	bl	810bd6c <osSemaphoreAcquire>
 8101a72:	4603      	mov	r3, r0
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d001      	beq.n	8101a7c <startReadSensor+0x3c>
 8101a78:	f000 fa1d 	bl	8101eb6 <Error_Handler>
		  bufferPut(valueArray[i]);	//read data and put into buffer
 8101a7c:	68fb      	ldr	r3, [r7, #12]
 8101a7e:	009b      	lsls	r3, r3, #2
 8101a80:	68ba      	ldr	r2, [r7, #8]
 8101a82:	4413      	add	r3, r2
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	4618      	mov	r0, r3
 8101a88:	f7ff fb5c 	bl	8101144 <bufferPut>
		  if(osSemaphoreRelease(readSensorSemaphoreHandle) != osOK) Error_Handler();
 8101a8c:	4b16      	ldr	r3, [pc, #88]	@ (8101ae8 <startReadSensor+0xa8>)
 8101a8e:	681b      	ldr	r3, [r3, #0]
 8101a90:	4618      	mov	r0, r3
 8101a92:	f00a f9bd 	bl	810be10 <osSemaphoreRelease>
 8101a96:	4603      	mov	r3, r0
 8101a98:	2b00      	cmp	r3, #0
 8101a9a:	d001      	beq.n	8101aa0 <startReadSensor+0x60>
 8101a9c:	f000 fa0b 	bl	8101eb6 <Error_Handler>
		  osDelay(10);
 8101aa0:	200a      	movs	r0, #10
 8101aa2:	f00a f8bf 	bl	810bc24 <osDelay>
	  for(i = 0; i < 2; i++)
 8101aa6:	68fb      	ldr	r3, [r7, #12]
 8101aa8:	3301      	adds	r3, #1
 8101aaa:	60fb      	str	r3, [r7, #12]
 8101aac:	68fb      	ldr	r3, [r7, #12]
 8101aae:	2b01      	cmp	r3, #1
 8101ab0:	d9d8      	bls.n	8101a64 <startReadSensor+0x24>
	  }
	  xTaskNotifyGive(txTaskHandle); // Notify txTask to start
 8101ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8101aec <startReadSensor+0xac>)
 8101ab4:	6818      	ldr	r0, [r3, #0]
 8101ab6:	2300      	movs	r3, #0
 8101ab8:	2202      	movs	r2, #2
 8101aba:	2100      	movs	r1, #0
 8101abc:	f00c ff42 	bl	810e944 <xTaskGenericNotify>

	  memset(rx_buffer, 0, sizeof(rx_buffer)); //free buffer for next data from uart
 8101ac0:	2264      	movs	r2, #100	@ 0x64
 8101ac2:	2100      	movs	r1, #0
 8101ac4:	4807      	ldr	r0, [pc, #28]	@ (8101ae4 <startReadSensor+0xa4>)
 8101ac6:	f011 f836 	bl	8112b36 <memset>
	  vPortFree(valueArray);
 8101aca:	68b8      	ldr	r0, [r7, #8]
 8101acc:	f00a fae6 	bl	810c09c <vPortFree>

	  HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_buffer, sizeof(rx_buffer)); //get next data from uart
 8101ad0:	2264      	movs	r2, #100	@ 0x64
 8101ad2:	4904      	ldr	r1, [pc, #16]	@ (8101ae4 <startReadSensor+0xa4>)
 8101ad4:	4806      	ldr	r0, [pc, #24]	@ (8101af0 <startReadSensor+0xb0>)
 8101ad6:	f009 fee6 	bl	810b8a6 <HAL_UARTEx_ReceiveToIdle_IT>
	  osDelay(1);
 8101ada:	2001      	movs	r0, #1
 8101adc:	f00a f8a2 	bl	810bc24 <osDelay>
  {
 8101ae0:	e7b4      	b.n	8101a4c <startReadSensor+0xc>
 8101ae2:	bf00      	nop
 8101ae4:	100004fc 	.word	0x100004fc
 8101ae8:	10000494 	.word	0x10000494
 8101aec:	10000480 	.word	0x10000480
 8101af0:	100003e8 	.word	0x100003e8
 8101af4:	00000000 	.word	0x00000000

08101af8 <startSendCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSendCAN */
void startSendCAN(void *argument)
{
 8101af8:	b5b0      	push	{r4, r5, r7, lr}
 8101afa:	b088      	sub	sp, #32
 8101afc:	af00      	add	r7, sp, #0
 8101afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendCAN */

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8101b00:	f04f 31ff 	mov.w	r1, #4294967295
 8101b04:	2001      	movs	r0, #1
 8101b06:	f00c fed5 	bl	810e8b4 <ulTaskNotifyTake>
	  char *data = pvPortMalloc(100); //Malloc 100 char array
 8101b0a:	2064      	movs	r0, #100	@ 0x64
 8101b0c:	f00a f9f8 	bl	810bf00 <pvPortMalloc>
 8101b10:	61f8      	str	r0, [r7, #28]

	  int intPart = test->travelPercent;
 8101b12:	4b2f      	ldr	r3, [pc, #188]	@ (8101bd0 <startSendCAN+0xd8>)
 8101b14:	681b      	ldr	r3, [r3, #0]
 8101b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8101b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101b1e:	ee17 3a90 	vmov	r3, s15
 8101b22:	61bb      	str	r3, [r7, #24]
	  float fracPart = test->travelPercent - intPart;
 8101b24:	4b2a      	ldr	r3, [pc, #168]	@ (8101bd0 <startSendCAN+0xd8>)
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	ed93 7a05 	vldr	s14, [r3, #20]
 8101b2c:	69bb      	ldr	r3, [r7, #24]
 8101b2e:	ee07 3a90 	vmov	s15, r3
 8101b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101b3a:	edc7 7a05 	vstr	s15, [r7, #20]
	  int decimals = 4;
 8101b3e:	2304      	movs	r3, #4
 8101b40:	613b      	str	r3, [r7, #16]
	  int fracToInt = trunc(fracPart * pow(10, decimals));
 8101b42:	6978      	ldr	r0, [r7, #20]
 8101b44:	f7fe fd98 	bl	8100678 <__aeabi_f2d>
 8101b48:	4604      	mov	r4, r0
 8101b4a:	460d      	mov	r5, r1
 8101b4c:	6938      	ldr	r0, [r7, #16]
 8101b4e:	f7fe fd81 	bl	8100654 <__aeabi_i2d>
 8101b52:	4602      	mov	r2, r0
 8101b54:	460b      	mov	r3, r1
 8101b56:	ec43 2b11 	vmov	d1, r2, r3
 8101b5a:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8101bc8 <startSendCAN+0xd0>
 8101b5e:	f014 fad1 	bl	8116104 <pow>
 8101b62:	ec53 2b10 	vmov	r2, r3, d0
 8101b66:	4620      	mov	r0, r4
 8101b68:	4629      	mov	r1, r5
 8101b6a:	f7fe fddd 	bl	8100728 <__aeabi_dmul>
 8101b6e:	4602      	mov	r2, r0
 8101b70:	460b      	mov	r3, r1
 8101b72:	ec43 2b17 	vmov	d7, r2, r3
 8101b76:	eeb0 0a47 	vmov.f32	s0, s14
 8101b7a:	eef0 0a67 	vmov.f32	s1, s15
 8101b7e:	f014 fb3d 	bl	81161fc <trunc>
 8101b82:	ec53 2b10 	vmov	r2, r3, d0
 8101b86:	4610      	mov	r0, r2
 8101b88:	4619      	mov	r1, r3
 8101b8a:	f7ff f87d 	bl	8100c88 <__aeabi_d2iz>
 8101b8e:	4603      	mov	r3, r0
 8101b90:	60fb      	str	r3, [r7, #12]
	  sprintf(data, "%d.%04d\n", intPart,fracToInt);
 8101b92:	68fb      	ldr	r3, [r7, #12]
 8101b94:	69ba      	ldr	r2, [r7, #24]
 8101b96:	490f      	ldr	r1, [pc, #60]	@ (8101bd4 <startSendCAN+0xdc>)
 8101b98:	69f8      	ldr	r0, [r7, #28]
 8101b9a:	f010 ff69 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101b9e:	69f8      	ldr	r0, [r7, #28]
 8101ba0:	f7fe fbfe 	bl	81003a0 <strlen>
 8101ba4:	4603      	mov	r3, r0
 8101ba6:	b29a      	uxth	r2, r3
 8101ba8:	2364      	movs	r3, #100	@ 0x64
 8101baa:	69f9      	ldr	r1, [r7, #28]
 8101bac:	480a      	ldr	r0, [pc, #40]	@ (8101bd8 <startSendCAN+0xe0>)
 8101bae:	f007 fb39 	bl	8109224 <HAL_UART_Transmit>

//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		uint32_t raw = HAL_ADC_GetValue(&hadc1);
	  vPortFree(data);
 8101bb2:	69f8      	ldr	r0, [r7, #28]
 8101bb4:	f00a fa72 	bl	810c09c <vPortFree>
	  osDelay(1);
 8101bb8:	2001      	movs	r0, #1
 8101bba:	f00a f833 	bl	810bc24 <osDelay>
  {
 8101bbe:	bf00      	nop
 8101bc0:	e79e      	b.n	8101b00 <startSendCAN+0x8>
 8101bc2:	bf00      	nop
 8101bc4:	f3af 8000 	nop.w
 8101bc8:	00000000 	.word	0x00000000
 8101bcc:	40240000 	.word	0x40240000
 8101bd0:	100004f8 	.word	0x100004f8
 8101bd4:	081170bc 	.word	0x081170bc
 8101bd8:	100003e8 	.word	0x100003e8

08101bdc <startCanTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCanTest */
void startCanTest(void *argument)
{
 8101bdc:	b580      	push	{r7, lr}
 8101bde:	b092      	sub	sp, #72	@ 0x48
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCanTest */
  /* Infinite loop */
	uint32_t Notifications = FDCAN_IT_RX_FIFO0_NEW_MESSAGE;
 8101be4:	2301      	movs	r3, #1
 8101be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8101be8:	4898      	ldr	r0, [pc, #608]	@ (8101e4c <startCanTest+0x270>)
 8101bea:	f002 fe55 	bl	8104898 <HAL_FDCAN_Start>
 8101bee:	4603      	mov	r3, r0
 8101bf0:	2b00      	cmp	r3, #0
 8101bf2:	d001      	beq.n	8101bf8 <startCanTest+0x1c>
	{
		Error_Handler();
 8101bf4:	f000 f95f 	bl	8101eb6 <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, Notifications, 0) != HAL_OK)
 8101bf8:	2200      	movs	r2, #0
 8101bfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8101bfc:	4893      	ldr	r0, [pc, #588]	@ (8101e4c <startCanTest+0x270>)
 8101bfe:	f003 f88d 	bl	8104d1c <HAL_FDCAN_ActivateNotification>
 8101c02:	4603      	mov	r3, r0
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d001      	beq.n	8101c0c <startCanTest+0x30>
	{
		Error_Handler();
 8101c08:	f000 f955 	bl	8101eb6 <Error_Handler>
	}

	txHeader.Identifier = 0xC0; //id of transmitter, from filters
 8101c0c:	4b90      	ldr	r3, [pc, #576]	@ (8101e50 <startCanTest+0x274>)
 8101c0e:	22c0      	movs	r2, #192	@ 0xc0
 8101c10:	601a      	str	r2, [r3, #0]
	txHeader.IdType = FDCAN_STANDARD_ID;
 8101c12:	4b8f      	ldr	r3, [pc, #572]	@ (8101e50 <startCanTest+0x274>)
 8101c14:	2200      	movs	r2, #0
 8101c16:	605a      	str	r2, [r3, #4]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8101c18:	4b8d      	ldr	r3, [pc, #564]	@ (8101e50 <startCanTest+0x274>)
 8101c1a:	2200      	movs	r2, #0
 8101c1c:	609a      	str	r2, [r3, #8]
	txHeader.DataLength = FDCAN_DLC_BYTES_8; //only 8 byte of data send
 8101c1e:	4b8c      	ldr	r3, [pc, #560]	@ (8101e50 <startCanTest+0x274>)
 8101c20:	2208      	movs	r2, #8
 8101c22:	60da      	str	r2, [r3, #12]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8101c24:	4b8a      	ldr	r3, [pc, #552]	@ (8101e50 <startCanTest+0x274>)
 8101c26:	2200      	movs	r2, #0
 8101c28:	611a      	str	r2, [r3, #16]
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8101c2a:	4b89      	ldr	r3, [pc, #548]	@ (8101e50 <startCanTest+0x274>)
 8101c2c:	2200      	movs	r2, #0
 8101c2e:	615a      	str	r2, [r3, #20]
	txHeader.FDFormat = FDCAN_CLASSIC_CAN; //normal CAN, not FDCAN
 8101c30:	4b87      	ldr	r3, [pc, #540]	@ (8101e50 <startCanTest+0x274>)
 8101c32:	2200      	movs	r2, #0
 8101c34:	619a      	str	r2, [r3, #24]
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8101c36:	4b86      	ldr	r3, [pc, #536]	@ (8101e50 <startCanTest+0x274>)
 8101c38:	2200      	movs	r2, #0
 8101c3a:	61da      	str	r2, [r3, #28]
	txHeader.MessageMarker = 0;
 8101c3c:	4b84      	ldr	r3, [pc, #528]	@ (8101e50 <startCanTest+0x274>)
 8101c3e:	2200      	movs	r2, #0
 8101c40:	621a      	str	r2, [r3, #32]
	FDCAN_ProtocolStatusTypeDef protocolStatus;




	txData[0] = 0x11;
 8101c42:	4b84      	ldr	r3, [pc, #528]	@ (8101e54 <startCanTest+0x278>)
 8101c44:	2211      	movs	r2, #17
 8101c46:	701a      	strb	r2, [r3, #0]
	txData[1] = 0x22;
 8101c48:	4b82      	ldr	r3, [pc, #520]	@ (8101e54 <startCanTest+0x278>)
 8101c4a:	2222      	movs	r2, #34	@ 0x22
 8101c4c:	705a      	strb	r2, [r3, #1]
	txData[2] = 0x33;
 8101c4e:	4b81      	ldr	r3, [pc, #516]	@ (8101e54 <startCanTest+0x278>)
 8101c50:	2233      	movs	r2, #51	@ 0x33
 8101c52:	709a      	strb	r2, [r3, #2]
	txData[3] = 0x44;
 8101c54:	4b7f      	ldr	r3, [pc, #508]	@ (8101e54 <startCanTest+0x278>)
 8101c56:	2244      	movs	r2, #68	@ 0x44
 8101c58:	70da      	strb	r2, [r3, #3]
	txData[4] = 0x55;
 8101c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8101e54 <startCanTest+0x278>)
 8101c5c:	2255      	movs	r2, #85	@ 0x55
 8101c5e:	711a      	strb	r2, [r3, #4]
	txData[5] = 0x66;
 8101c60:	4b7c      	ldr	r3, [pc, #496]	@ (8101e54 <startCanTest+0x278>)
 8101c62:	2266      	movs	r2, #102	@ 0x66
 8101c64:	715a      	strb	r2, [r3, #5]
	txData[6] = 10;
 8101c66:	4b7b      	ldr	r3, [pc, #492]	@ (8101e54 <startCanTest+0x278>)
 8101c68:	220a      	movs	r2, #10
 8101c6a:	719a      	strb	r2, [r3, #6]
	txData[7] = 10 >> 8;
 8101c6c:	4b79      	ldr	r3, [pc, #484]	@ (8101e54 <startCanTest+0x278>)
 8101c6e:	2200      	movs	r2, #0
 8101c70:	71da      	strb	r2, [r3, #7]
	uint32_t errorS = 0;
 8101c72:	2300      	movs	r3, #0
 8101c74:	647b      	str	r3, [r7, #68]	@ 0x44


  for(;;)
  {
	  HAL_FDCAN_GetProtocolStatus(&hfdcan1, &protocolStatus);
 8101c76:	f107 030c 	add.w	r3, r7, #12
 8101c7a:	4619      	mov	r1, r3
 8101c7c:	4873      	ldr	r0, [pc, #460]	@ (8101e4c <startCanTest+0x270>)
 8101c7e:	f002 fffd 	bl	8104c7c <HAL_FDCAN_GetProtocolStatus>
	  if(protocolStatus.BusOff){
 8101c82:	6a3b      	ldr	r3, [r7, #32]
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d007      	beq.n	8101c98 <startCanTest+0xbc>
		  CLEAR_BIT(hfdcan1.Instance->CCCR, FDCAN_CCCR_INIT);
 8101c88:	4b70      	ldr	r3, [pc, #448]	@ (8101e4c <startCanTest+0x270>)
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	699a      	ldr	r2, [r3, #24]
 8101c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8101e4c <startCanTest+0x270>)
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	f022 0201 	bic.w	r2, r2, #1
 8101c96:	619a      	str	r2, [r3, #24]
	  }
	  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) //send data to CAN bus
 8101c98:	4a6e      	ldr	r2, [pc, #440]	@ (8101e54 <startCanTest+0x278>)
 8101c9a:	496d      	ldr	r1, [pc, #436]	@ (8101e50 <startCanTest+0x274>)
 8101c9c:	486b      	ldr	r0, [pc, #428]	@ (8101e4c <startCanTest+0x270>)
 8101c9e:	f002 fe26 	bl	81048ee <HAL_FDCAN_AddMessageToTxFifoQ>
 8101ca2:	4603      	mov	r3, r0
 8101ca4:	2b00      	cmp	r3, #0
 8101ca6:	d001      	beq.n	8101cac <startCanTest+0xd0>
	  {
		  Error_Handler();
 8101ca8:	f000 f905 	bl	8101eb6 <Error_Handler>
	  }
	  HAL_GPIO_TogglePin (GPIOF, GPIO_PIN_9);
 8101cac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8101cb0:	4869      	ldr	r0, [pc, #420]	@ (8101e58 <startCanTest+0x27c>)
 8101cb2:	f003 ff84 	bl	8105bbe <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8101cb6:	2101      	movs	r1, #1
 8101cb8:	4868      	ldr	r0, [pc, #416]	@ (8101e5c <startCanTest+0x280>)
 8101cba:	f003 ff80 	bl	8105bbe <HAL_GPIO_TogglePin>
	  char *data = pvPortMalloc(100);
 8101cbe:	2064      	movs	r0, #100	@ 0x64
 8101cc0:	f00a f91e 	bl	810bf00 <pvPortMalloc>
 8101cc4:	63b8      	str	r0, [r7, #56]	@ 0x38
	  sprintf(data, "%lu\n", count);
 8101cc6:	4b66      	ldr	r3, [pc, #408]	@ (8101e60 <startCanTest+0x284>)
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	461a      	mov	r2, r3
 8101ccc:	4965      	ldr	r1, [pc, #404]	@ (8101e64 <startCanTest+0x288>)
 8101cce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101cd0:	f010 fece 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101cd6:	f7fe fb63 	bl	81003a0 <strlen>
 8101cda:	4603      	mov	r3, r0
 8101cdc:	b29a      	uxth	r2, r3
 8101cde:	2364      	movs	r3, #100	@ 0x64
 8101ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101ce2:	4861      	ldr	r0, [pc, #388]	@ (8101e68 <startCanTest+0x28c>)
 8101ce4:	f007 fa9e 	bl	8109224 <HAL_UART_Transmit>

	  if(count > 0)
 8101ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8101e60 <startCanTest+0x284>)
 8101cea:	681b      	ldr	r3, [r3, #0]
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d054      	beq.n	8101d9a <startCanTest+0x1be>
	  {
		  sprintf(data, "Received ID: 0x%X\n", rxHeader.Identifier);
 8101cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8101e6c <startCanTest+0x290>)
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	461a      	mov	r2, r3
 8101cf6:	495e      	ldr	r1, [pc, #376]	@ (8101e70 <startCanTest+0x294>)
 8101cf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101cfa:	f010 feb9 	bl	8112a70 <siprintf>
		  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101cfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d00:	f7fe fb4e 	bl	81003a0 <strlen>
 8101d04:	4603      	mov	r3, r0
 8101d06:	b29a      	uxth	r2, r3
 8101d08:	2364      	movs	r3, #100	@ 0x64
 8101d0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101d0c:	4856      	ldr	r0, [pc, #344]	@ (8101e68 <startCanTest+0x28c>)
 8101d0e:	f007 fa89 	bl	8109224 <HAL_UART_Transmit>

		  sprintf(data, "DLC: %d\n", rxHeader.DataLength);
 8101d12:	4b56      	ldr	r3, [pc, #344]	@ (8101e6c <startCanTest+0x290>)
 8101d14:	68db      	ldr	r3, [r3, #12]
 8101d16:	461a      	mov	r2, r3
 8101d18:	4956      	ldr	r1, [pc, #344]	@ (8101e74 <startCanTest+0x298>)
 8101d1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d1c:	f010 fea8 	bl	8112a70 <siprintf>
		  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101d20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d22:	f7fe fb3d 	bl	81003a0 <strlen>
 8101d26:	4603      	mov	r3, r0
 8101d28:	b29a      	uxth	r2, r3
 8101d2a:	2364      	movs	r3, #100	@ 0x64
 8101d2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101d2e:	484e      	ldr	r0, [pc, #312]	@ (8101e68 <startCanTest+0x28c>)
 8101d30:	f007 fa78 	bl	8109224 <HAL_UART_Transmit>

		  sprintf(data, "Data: ");
 8101d34:	4950      	ldr	r1, [pc, #320]	@ (8101e78 <startCanTest+0x29c>)
 8101d36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d38:	f010 fe9a 	bl	8112a70 <siprintf>
		  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101d3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d3e:	f7fe fb2f 	bl	81003a0 <strlen>
 8101d42:	4603      	mov	r3, r0
 8101d44:	b29a      	uxth	r2, r3
 8101d46:	2364      	movs	r3, #100	@ 0x64
 8101d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101d4a:	4847      	ldr	r0, [pc, #284]	@ (8101e68 <startCanTest+0x28c>)
 8101d4c:	f007 fa6a 	bl	8109224 <HAL_UART_Transmit>

		  for (uint8_t i = 0; i < 8; i++) {
 8101d50:	2300      	movs	r3, #0
 8101d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8101d56:	e017      	b.n	8101d88 <startCanTest+0x1ac>
			  sprintf(data, "0x%X ", rxData[i]);
 8101d58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8101d5c:	4a47      	ldr	r2, [pc, #284]	@ (8101e7c <startCanTest+0x2a0>)
 8101d5e:	5cd3      	ldrb	r3, [r2, r3]
 8101d60:	461a      	mov	r2, r3
 8101d62:	4947      	ldr	r1, [pc, #284]	@ (8101e80 <startCanTest+0x2a4>)
 8101d64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d66:	f010 fe83 	bl	8112a70 <siprintf>
			  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101d6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d6c:	f7fe fb18 	bl	81003a0 <strlen>
 8101d70:	4603      	mov	r3, r0
 8101d72:	b29a      	uxth	r2, r3
 8101d74:	2364      	movs	r3, #100	@ 0x64
 8101d76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101d78:	483b      	ldr	r0, [pc, #236]	@ (8101e68 <startCanTest+0x28c>)
 8101d7a:	f007 fa53 	bl	8109224 <HAL_UART_Transmit>
		  for (uint8_t i = 0; i < 8; i++) {
 8101d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8101d82:	3301      	adds	r3, #1
 8101d84:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8101d88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8101d8c:	2b07      	cmp	r3, #7
 8101d8e:	d9e3      	bls.n	8101d58 <startCanTest+0x17c>
		  }
		  count--;
 8101d90:	4b33      	ldr	r3, [pc, #204]	@ (8101e60 <startCanTest+0x284>)
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	3b01      	subs	r3, #1
 8101d96:	4a32      	ldr	r2, [pc, #200]	@ (8101e60 <startCanTest+0x284>)
 8101d98:	6013      	str	r3, [r2, #0]
	  }
	  errorS ++;
 8101d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101d9c:	3301      	adds	r3, #1
 8101d9e:	647b      	str	r3, [r7, #68]	@ 0x44
	  sprintf(data, "ERRORS %d\n", errorS);
 8101da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8101da2:	4938      	ldr	r1, [pc, #224]	@ (8101e84 <startCanTest+0x2a8>)
 8101da4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101da6:	f010 fe63 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101daa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101dac:	f7fe faf8 	bl	81003a0 <strlen>
 8101db0:	4603      	mov	r3, r0
 8101db2:	b29a      	uxth	r2, r3
 8101db4:	2364      	movs	r3, #100	@ 0x64
 8101db6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101db8:	482b      	ldr	r0, [pc, #172]	@ (8101e68 <startCanTest+0x28c>)
 8101dba:	f007 fa33 	bl	8109224 <HAL_UART_Transmit>

	  sprintf(data, "Last Error Code: %d\n", protocolStatus.LastErrorCode);
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	461a      	mov	r2, r3
 8101dc2:	4931      	ldr	r1, [pc, #196]	@ (8101e88 <startCanTest+0x2ac>)
 8101dc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101dc6:	f010 fe53 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101dca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101dcc:	f7fe fae8 	bl	81003a0 <strlen>
 8101dd0:	4603      	mov	r3, r0
 8101dd2:	b29a      	uxth	r2, r3
 8101dd4:	2364      	movs	r3, #100	@ 0x64
 8101dd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101dd8:	4823      	ldr	r0, [pc, #140]	@ (8101e68 <startCanTest+0x28c>)
 8101dda:	f007 fa23 	bl	8109224 <HAL_UART_Transmit>
	  sprintf(data, "Error Passive: %d\n", protocolStatus.ErrorPassive);
 8101dde:	69bb      	ldr	r3, [r7, #24]
 8101de0:	461a      	mov	r2, r3
 8101de2:	492a      	ldr	r1, [pc, #168]	@ (8101e8c <startCanTest+0x2b0>)
 8101de4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101de6:	f010 fe43 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101dea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101dec:	f7fe fad8 	bl	81003a0 <strlen>
 8101df0:	4603      	mov	r3, r0
 8101df2:	b29a      	uxth	r2, r3
 8101df4:	2364      	movs	r3, #100	@ 0x64
 8101df6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101df8:	481b      	ldr	r0, [pc, #108]	@ (8101e68 <startCanTest+0x28c>)
 8101dfa:	f007 fa13 	bl	8109224 <HAL_UART_Transmit>
	  sprintf(data, "Bus Off: %d\n", protocolStatus.BusOff);
 8101dfe:	6a3b      	ldr	r3, [r7, #32]
 8101e00:	461a      	mov	r2, r3
 8101e02:	4923      	ldr	r1, [pc, #140]	@ (8101e90 <startCanTest+0x2b4>)
 8101e04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e06:	f010 fe33 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101e0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e0c:	f7fe fac8 	bl	81003a0 <strlen>
 8101e10:	4603      	mov	r3, r0
 8101e12:	b29a      	uxth	r2, r3
 8101e14:	2364      	movs	r3, #100	@ 0x64
 8101e16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101e18:	4813      	ldr	r0, [pc, #76]	@ (8101e68 <startCanTest+0x28c>)
 8101e1a:	f007 fa03 	bl	8109224 <HAL_UART_Transmit>
	  sprintf(data, "Activity: %d\n", protocolStatus.Activity);
 8101e1e:	697b      	ldr	r3, [r7, #20]
 8101e20:	461a      	mov	r2, r3
 8101e22:	491c      	ldr	r1, [pc, #112]	@ (8101e94 <startCanTest+0x2b8>)
 8101e24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e26:	f010 fe23 	bl	8112a70 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t*)data, strlen(data), 100);
 8101e2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e2c:	f7fe fab8 	bl	81003a0 <strlen>
 8101e30:	4603      	mov	r3, r0
 8101e32:	b29a      	uxth	r2, r3
 8101e34:	2364      	movs	r3, #100	@ 0x64
 8101e36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101e38:	480b      	ldr	r0, [pc, #44]	@ (8101e68 <startCanTest+0x28c>)
 8101e3a:	f007 f9f3 	bl	8109224 <HAL_UART_Transmit>
	  vPortFree(data);
 8101e3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e40:	f00a f92c 	bl	810c09c <vPortFree>

    osDelay(10);
 8101e44:	200a      	movs	r0, #10
 8101e46:	f009 feed 	bl	810bc24 <osDelay>
  {
 8101e4a:	e714      	b.n	8101c76 <startCanTest+0x9a>
 8101e4c:	10000348 	.word	0x10000348
 8101e50:	10000498 	.word	0x10000498
 8101e54:	100004e4 	.word	0x100004e4
 8101e58:	58021400 	.word	0x58021400
 8101e5c:	58020400 	.word	0x58020400
 8101e60:	100004f4 	.word	0x100004f4
 8101e64:	081170c8 	.word	0x081170c8
 8101e68:	100003e8 	.word	0x100003e8
 8101e6c:	100004bc 	.word	0x100004bc
 8101e70:	081170d0 	.word	0x081170d0
 8101e74:	081170e4 	.word	0x081170e4
 8101e78:	081170f0 	.word	0x081170f0
 8101e7c:	100004ec 	.word	0x100004ec
 8101e80:	081170f8 	.word	0x081170f8
 8101e84:	08117100 	.word	0x08117100
 8101e88:	0811710c 	.word	0x0811710c
 8101e8c:	08117124 	.word	0x08117124
 8101e90:	08117138 	.word	0x08117138
 8101e94:	08117148 	.word	0x08117148

08101e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101e98:	b580      	push	{r7, lr}
 8101e9a:	b082      	sub	sp, #8
 8101e9c:	af00      	add	r7, sp, #0
 8101e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ea8:	d101      	bne.n	8101eae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101eaa:	f000 fb7f 	bl	81025ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101eae:	bf00      	nop
 8101eb0:	3708      	adds	r7, #8
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	bd80      	pop	{r7, pc}

08101eb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101eb6:	b480      	push	{r7}
 8101eb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101eba:	b672      	cpsid	i
}
 8101ebc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101ebe:	bf00      	nop
 8101ec0:	e7fd      	b.n	8101ebe <Error_Handler+0x8>
	...

08101ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101ec4:	b580      	push	{r7, lr}
 8101ec6:	b082      	sub	sp, #8
 8101ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101eca:	4b10      	ldr	r3, [pc, #64]	@ (8101f0c <HAL_MspInit+0x48>)
 8101ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8101f0c <HAL_MspInit+0x48>)
 8101ed2:	f043 0302 	orr.w	r3, r3, #2
 8101ed6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101eda:	4b0c      	ldr	r3, [pc, #48]	@ (8101f0c <HAL_MspInit+0x48>)
 8101edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101ee0:	f003 0302 	and.w	r3, r3, #2
 8101ee4:	607b      	str	r3, [r7, #4]
 8101ee6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101ee8:	2200      	movs	r2, #0
 8101eea:	210f      	movs	r1, #15
 8101eec:	f06f 0001 	mvn.w	r0, #1
 8101ef0:	f001 fcde 	bl	81038b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101ef4:	2200      	movs	r2, #0
 8101ef6:	2105      	movs	r1, #5
 8101ef8:	207e      	movs	r0, #126	@ 0x7e
 8101efa:	f001 fcd9 	bl	81038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101efe:	207e      	movs	r0, #126	@ 0x7e
 8101f00:	f001 fcf0 	bl	81038e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101f04:	bf00      	nop
 8101f06:	3708      	adds	r7, #8
 8101f08:	46bd      	mov	sp, r7
 8101f0a:	bd80      	pop	{r7, pc}
 8101f0c:	58024400 	.word	0x58024400

08101f10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101f10:	b580      	push	{r7, lr}
 8101f12:	b0ba      	sub	sp, #232	@ 0xe8
 8101f14:	af00      	add	r7, sp, #0
 8101f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101f1c:	2200      	movs	r2, #0
 8101f1e:	601a      	str	r2, [r3, #0]
 8101f20:	605a      	str	r2, [r3, #4]
 8101f22:	609a      	str	r2, [r3, #8]
 8101f24:	60da      	str	r2, [r3, #12]
 8101f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f28:	f107 0310 	add.w	r3, r7, #16
 8101f2c:	22c0      	movs	r2, #192	@ 0xc0
 8101f2e:	2100      	movs	r1, #0
 8101f30:	4618      	mov	r0, r3
 8101f32:	f010 fe00 	bl	8112b36 <memset>
  if(hadc->Instance==ADC1)
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8101fe8 <HAL_ADC_MspInit+0xd8>)
 8101f3c:	4293      	cmp	r3, r2
 8101f3e:	d14f      	bne.n	8101fe0 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101f40:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8101f44:	f04f 0300 	mov.w	r3, #0
 8101f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8101f4c:	2302      	movs	r3, #2
 8101f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8101f50:	230c      	movs	r3, #12
 8101f52:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8101f54:	2302      	movs	r3, #2
 8101f56:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101f58:	2302      	movs	r3, #2
 8101f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101f5c:	2302      	movs	r3, #2
 8101f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101f60:	23c0      	movs	r3, #192	@ 0xc0
 8101f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101f64:	2320      	movs	r3, #32
 8101f66:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101f68:	2300      	movs	r3, #0
 8101f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101f6c:	2300      	movs	r3, #0
 8101f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f72:	f107 0310 	add.w	r3, r7, #16
 8101f76:	4618      	mov	r0, r3
 8101f78:	f004 f938 	bl	81061ec <HAL_RCCEx_PeriphCLKConfig>
 8101f7c:	4603      	mov	r3, r0
 8101f7e:	2b00      	cmp	r3, #0
 8101f80:	d001      	beq.n	8101f86 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8101f82:	f7ff ff98 	bl	8101eb6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101f86:	4b19      	ldr	r3, [pc, #100]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101f8c:	4a17      	ldr	r2, [pc, #92]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101f8e:	f043 0320 	orr.w	r3, r3, #32
 8101f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101f96:	4b15      	ldr	r3, [pc, #84]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101f9c:	f003 0320 	and.w	r3, r3, #32
 8101fa0:	60fb      	str	r3, [r7, #12]
 8101fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fa4:	4b11      	ldr	r3, [pc, #68]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101faa:	4a10      	ldr	r2, [pc, #64]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101fac:	f043 0301 	orr.w	r3, r3, #1
 8101fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8101fec <HAL_ADC_MspInit+0xdc>)
 8101fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fba:	f003 0301 	and.w	r3, r3, #1
 8101fbe:	60bb      	str	r3, [r7, #8]
 8101fc0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101fc2:	2308      	movs	r3, #8
 8101fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101fc8:	2303      	movs	r3, #3
 8101fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fce:	2300      	movs	r3, #0
 8101fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101fd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101fd8:	4619      	mov	r1, r3
 8101fda:	4805      	ldr	r0, [pc, #20]	@ (8101ff0 <HAL_ADC_MspInit+0xe0>)
 8101fdc:	f003 fc26 	bl	810582c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8101fe0:	bf00      	nop
 8101fe2:	37e8      	adds	r7, #232	@ 0xe8
 8101fe4:	46bd      	mov	sp, r7
 8101fe6:	bd80      	pop	{r7, pc}
 8101fe8:	40022000 	.word	0x40022000
 8101fec:	58024400 	.word	0x58024400
 8101ff0:	58020000 	.word	0x58020000

08101ff4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8101ff4:	b580      	push	{r7, lr}
 8101ff6:	b0ba      	sub	sp, #232	@ 0xe8
 8101ff8:	af00      	add	r7, sp, #0
 8101ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ffc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102000:	2200      	movs	r2, #0
 8102002:	601a      	str	r2, [r3, #0]
 8102004:	605a      	str	r2, [r3, #4]
 8102006:	609a      	str	r2, [r3, #8]
 8102008:	60da      	str	r2, [r3, #12]
 810200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810200c:	f107 0310 	add.w	r3, r7, #16
 8102010:	22c0      	movs	r2, #192	@ 0xc0
 8102012:	2100      	movs	r1, #0
 8102014:	4618      	mov	r0, r3
 8102016:	f010 fd8e 	bl	8112b36 <memset>
  if(hfdcan->Instance==FDCAN1)
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	4a2b      	ldr	r2, [pc, #172]	@ (81020cc <HAL_FDCAN_MspInit+0xd8>)
 8102020:	4293      	cmp	r3, r2
 8102022:	d14e      	bne.n	81020c2 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8102024:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8102028:	f04f 0300 	mov.w	r3, #0
 810202c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8102030:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8102034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102038:	f107 0310 	add.w	r3, r7, #16
 810203c:	4618      	mov	r0, r3
 810203e:	f004 f8d5 	bl	81061ec <HAL_RCCEx_PeriphCLKConfig>
 8102042:	4603      	mov	r3, r0
 8102044:	2b00      	cmp	r3, #0
 8102046:	d001      	beq.n	810204c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8102048:	f7ff ff35 	bl	8101eb6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 810204c:	4b20      	ldr	r3, [pc, #128]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 810204e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8102052:	4a1f      	ldr	r2, [pc, #124]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 8102054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102058:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 810205c:	4b1c      	ldr	r3, [pc, #112]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 810205e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8102062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102066:	60fb      	str	r3, [r7, #12]
 8102068:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810206a:	4b19      	ldr	r3, [pc, #100]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 810206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102070:	4a17      	ldr	r2, [pc, #92]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 8102072:	f043 0308 	orr.w	r3, r3, #8
 8102076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810207a:	4b15      	ldr	r3, [pc, #84]	@ (81020d0 <HAL_FDCAN_MspInit+0xdc>)
 810207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102080:	f003 0308 	and.w	r3, r3, #8
 8102084:	60bb      	str	r3, [r7, #8]
 8102086:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8102088:	2303      	movs	r3, #3
 810208a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810208e:	2302      	movs	r3, #2
 8102090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102094:	2300      	movs	r3, #0
 8102096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810209a:	2300      	movs	r3, #0
 810209c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 81020a0:	2309      	movs	r3, #9
 81020a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81020a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81020aa:	4619      	mov	r1, r3
 81020ac:	4809      	ldr	r0, [pc, #36]	@ (81020d4 <HAL_FDCAN_MspInit+0xe0>)
 81020ae:	f003 fbbd 	bl	810582c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 81020b2:	2200      	movs	r2, #0
 81020b4:	2105      	movs	r1, #5
 81020b6:	2013      	movs	r0, #19
 81020b8:	f001 fbfa 	bl	81038b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 81020bc:	2013      	movs	r0, #19
 81020be:	f001 fc11 	bl	81038e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 81020c2:	bf00      	nop
 81020c4:	37e8      	adds	r7, #232	@ 0xe8
 81020c6:	46bd      	mov	sp, r7
 81020c8:	bd80      	pop	{r7, pc}
 81020ca:	bf00      	nop
 81020cc:	4000a000 	.word	0x4000a000
 81020d0:	58024400 	.word	0x58024400
 81020d4:	58020c00 	.word	0x58020c00

081020d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81020d8:	b580      	push	{r7, lr}
 81020da:	b0ba      	sub	sp, #232	@ 0xe8
 81020dc:	af00      	add	r7, sp, #0
 81020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81020e4:	2200      	movs	r2, #0
 81020e6:	601a      	str	r2, [r3, #0]
 81020e8:	605a      	str	r2, [r3, #4]
 81020ea:	609a      	str	r2, [r3, #8]
 81020ec:	60da      	str	r2, [r3, #12]
 81020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020f0:	f107 0310 	add.w	r3, r7, #16
 81020f4:	22c0      	movs	r2, #192	@ 0xc0
 81020f6:	2100      	movs	r1, #0
 81020f8:	4618      	mov	r0, r3
 81020fa:	f010 fd1c 	bl	8112b36 <memset>
  if(huart->Instance==USART3)
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	4a2b      	ldr	r2, [pc, #172]	@ (81021b0 <HAL_UART_MspInit+0xd8>)
 8102104:	4293      	cmp	r3, r2
 8102106:	d14e      	bne.n	81021a6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102108:	f04f 0202 	mov.w	r2, #2
 810210c:	f04f 0300 	mov.w	r3, #0
 8102110:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8102114:	2303      	movs	r3, #3
 8102116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810211a:	f107 0310 	add.w	r3, r7, #16
 810211e:	4618      	mov	r0, r3
 8102120:	f004 f864 	bl	81061ec <HAL_RCCEx_PeriphCLKConfig>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810212a:	f7ff fec4 	bl	8101eb6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810212e:	4b21      	ldr	r3, [pc, #132]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 8102130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102134:	4a1f      	ldr	r2, [pc, #124]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 8102136:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810213a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810213e:	4b1d      	ldr	r3, [pc, #116]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 8102140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102148:	60fb      	str	r3, [r7, #12]
 810214a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810214c:	4b19      	ldr	r3, [pc, #100]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 810214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102152:	4a18      	ldr	r2, [pc, #96]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 8102154:	f043 0308 	orr.w	r3, r3, #8
 8102158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810215c:	4b15      	ldr	r3, [pc, #84]	@ (81021b4 <HAL_UART_MspInit+0xdc>)
 810215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102162:	f003 0308 	and.w	r3, r3, #8
 8102166:	60bb      	str	r3, [r7, #8]
 8102168:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810216a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810216e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102172:	2302      	movs	r3, #2
 8102174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102178:	2300      	movs	r3, #0
 810217a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810217e:	2300      	movs	r3, #0
 8102180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102184:	2307      	movs	r3, #7
 8102186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810218a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810218e:	4619      	mov	r1, r3
 8102190:	4809      	ldr	r0, [pc, #36]	@ (81021b8 <HAL_UART_MspInit+0xe0>)
 8102192:	f003 fb4b 	bl	810582c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102196:	2200      	movs	r2, #0
 8102198:	2105      	movs	r1, #5
 810219a:	2027      	movs	r0, #39	@ 0x27
 810219c:	f001 fb88 	bl	81038b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 81021a0:	2027      	movs	r0, #39	@ 0x27
 81021a2:	f001 fb9f 	bl	81038e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 81021a6:	bf00      	nop
 81021a8:	37e8      	adds	r7, #232	@ 0xe8
 81021aa:	46bd      	mov	sp, r7
 81021ac:	bd80      	pop	{r7, pc}
 81021ae:	bf00      	nop
 81021b0:	40004800 	.word	0x40004800
 81021b4:	58024400 	.word	0x58024400
 81021b8:	58020c00 	.word	0x58020c00

081021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81021bc:	b580      	push	{r7, lr}
 81021be:	b090      	sub	sp, #64	@ 0x40
 81021c0:	af00      	add	r7, sp, #0
 81021c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	2b0f      	cmp	r3, #15
 81021c8:	d827      	bhi.n	810221a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 81021ca:	2200      	movs	r2, #0
 81021cc:	6879      	ldr	r1, [r7, #4]
 81021ce:	201c      	movs	r0, #28
 81021d0:	f001 fb6e 	bl	81038b0 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81021d4:	201c      	movs	r0, #28
 81021d6:	f001 fb85 	bl	81038e4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81021da:	4a29      	ldr	r2, [pc, #164]	@ (8102280 <HAL_InitTick+0xc4>)
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81021e0:	4b28      	ldr	r3, [pc, #160]	@ (8102284 <HAL_InitTick+0xc8>)
 81021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81021e6:	4a27      	ldr	r2, [pc, #156]	@ (8102284 <HAL_InitTick+0xc8>)
 81021e8:	f043 0301 	orr.w	r3, r3, #1
 81021ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81021f0:	4b24      	ldr	r3, [pc, #144]	@ (8102284 <HAL_InitTick+0xc8>)
 81021f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81021f6:	f003 0301 	and.w	r3, r3, #1
 81021fa:	60fb      	str	r3, [r7, #12]
 81021fc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81021fe:	f107 0210 	add.w	r2, r7, #16
 8102202:	f107 0314 	add.w	r3, r7, #20
 8102206:	4611      	mov	r1, r2
 8102208:	4618      	mov	r0, r3
 810220a:	f003 ffad 	bl	8106168 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102210:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102214:	2b00      	cmp	r3, #0
 8102216:	d106      	bne.n	8102226 <HAL_InitTick+0x6a>
 8102218:	e001      	b.n	810221e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810221a:	2301      	movs	r3, #1
 810221c:	e02c      	b.n	8102278 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810221e:	f003 ff77 	bl	8106110 <HAL_RCC_GetPCLK1Freq>
 8102222:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102224:	e004      	b.n	8102230 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102226:	f003 ff73 	bl	8106110 <HAL_RCC_GetPCLK1Freq>
 810222a:	4603      	mov	r3, r0
 810222c:	005b      	lsls	r3, r3, #1
 810222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102232:	4a15      	ldr	r2, [pc, #84]	@ (8102288 <HAL_InitTick+0xcc>)
 8102234:	fba2 2303 	umull	r2, r3, r2, r3
 8102238:	0c9b      	lsrs	r3, r3, #18
 810223a:	3b01      	subs	r3, #1
 810223c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810223e:	4b13      	ldr	r3, [pc, #76]	@ (810228c <HAL_InitTick+0xd0>)
 8102240:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8102246:	4b11      	ldr	r3, [pc, #68]	@ (810228c <HAL_InitTick+0xd0>)
 8102248:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810224c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810224e:	4a0f      	ldr	r2, [pc, #60]	@ (810228c <HAL_InitTick+0xd0>)
 8102250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102252:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8102254:	4b0d      	ldr	r3, [pc, #52]	@ (810228c <HAL_InitTick+0xd0>)
 8102256:	2200      	movs	r2, #0
 8102258:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810225a:	4b0c      	ldr	r3, [pc, #48]	@ (810228c <HAL_InitTick+0xd0>)
 810225c:	2200      	movs	r2, #0
 810225e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8102260:	480a      	ldr	r0, [pc, #40]	@ (810228c <HAL_InitTick+0xd0>)
 8102262:	f006 fcc1 	bl	8108be8 <HAL_TIM_Base_Init>
 8102266:	4603      	mov	r3, r0
 8102268:	2b00      	cmp	r3, #0
 810226a:	d104      	bne.n	8102276 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 810226c:	4807      	ldr	r0, [pc, #28]	@ (810228c <HAL_InitTick+0xd0>)
 810226e:	f006 fd1d 	bl	8108cac <HAL_TIM_Base_Start_IT>
 8102272:	4603      	mov	r3, r0
 8102274:	e000      	b.n	8102278 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8102276:	2301      	movs	r3, #1
}
 8102278:	4618      	mov	r0, r3
 810227a:	3740      	adds	r7, #64	@ 0x40
 810227c:	46bd      	mov	sp, r7
 810227e:	bd80      	pop	{r7, pc}
 8102280:	10000008 	.word	0x10000008
 8102284:	58024400 	.word	0x58024400
 8102288:	431bde83 	.word	0x431bde83
 810228c:	100005a4 	.word	0x100005a4

08102290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102290:	b480      	push	{r7}
 8102292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102294:	bf00      	nop
 8102296:	e7fd      	b.n	8102294 <NMI_Handler+0x4>

08102298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810229c:	bf00      	nop
 810229e:	e7fd      	b.n	810229c <HardFault_Handler+0x4>

081022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81022a0:	b480      	push	{r7}
 81022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81022a4:	bf00      	nop
 81022a6:	e7fd      	b.n	81022a4 <MemManage_Handler+0x4>

081022a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81022a8:	b480      	push	{r7}
 81022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81022ac:	bf00      	nop
 81022ae:	e7fd      	b.n	81022ac <BusFault_Handler+0x4>

081022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81022b0:	b480      	push	{r7}
 81022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81022b4:	bf00      	nop
 81022b6:	e7fd      	b.n	81022b4 <UsageFault_Handler+0x4>

081022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81022b8:	b480      	push	{r7}
 81022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81022bc:	bf00      	nop
 81022be:	46bd      	mov	sp, r7
 81022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c4:	4770      	bx	lr
	...

081022c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 81022c8:	b580      	push	{r7, lr}
 81022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 81022cc:	4802      	ldr	r0, [pc, #8]	@ (81022d8 <FDCAN1_IT0_IRQHandler+0x10>)
 81022ce:	f002 fd9f 	bl	8104e10 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 81022d2:	bf00      	nop
 81022d4:	bd80      	pop	{r7, pc}
 81022d6:	bf00      	nop
 81022d8:	10000348 	.word	0x10000348

081022dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81022dc:	b580      	push	{r7, lr}
 81022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81022e0:	4802      	ldr	r0, [pc, #8]	@ (81022ec <TIM2_IRQHandler+0x10>)
 81022e2:	f006 fd5b 	bl	8108d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81022e6:	bf00      	nop
 81022e8:	bd80      	pop	{r7, pc}
 81022ea:	bf00      	nop
 81022ec:	100005a4 	.word	0x100005a4

081022f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 81022f0:	b580      	push	{r7, lr}
 81022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 81022f4:	4802      	ldr	r0, [pc, #8]	@ (8102300 <USART3_IRQHandler+0x10>)
 81022f6:	f007 f823 	bl	8109340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 81022fa:	bf00      	nop
 81022fc:	bd80      	pop	{r7, pc}
 81022fe:	bf00      	nop
 8102300:	100003e8 	.word	0x100003e8

08102304 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102304:	b580      	push	{r7, lr}
 8102306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102308:	f003 fcb4 	bl	8105c74 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810230c:	bf00      	nop
 810230e:	bd80      	pop	{r7, pc}

08102310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102310:	b480      	push	{r7}
 8102312:	af00      	add	r7, sp, #0
  return 1;
 8102314:	2301      	movs	r3, #1
}
 8102316:	4618      	mov	r0, r3
 8102318:	46bd      	mov	sp, r7
 810231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810231e:	4770      	bx	lr

08102320 <_kill>:

int _kill(int pid, int sig)
{
 8102320:	b580      	push	{r7, lr}
 8102322:	b082      	sub	sp, #8
 8102324:	af00      	add	r7, sp, #0
 8102326:	6078      	str	r0, [r7, #4]
 8102328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810232a:	f010 fce7 	bl	8112cfc <__errno>
 810232e:	4603      	mov	r3, r0
 8102330:	2216      	movs	r2, #22
 8102332:	601a      	str	r2, [r3, #0]
  return -1;
 8102334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102338:	4618      	mov	r0, r3
 810233a:	3708      	adds	r7, #8
 810233c:	46bd      	mov	sp, r7
 810233e:	bd80      	pop	{r7, pc}

08102340 <_exit>:

void _exit (int status)
{
 8102340:	b580      	push	{r7, lr}
 8102342:	b082      	sub	sp, #8
 8102344:	af00      	add	r7, sp, #0
 8102346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102348:	f04f 31ff 	mov.w	r1, #4294967295
 810234c:	6878      	ldr	r0, [r7, #4]
 810234e:	f7ff ffe7 	bl	8102320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102352:	bf00      	nop
 8102354:	e7fd      	b.n	8102352 <_exit+0x12>

08102356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102356:	b580      	push	{r7, lr}
 8102358:	b086      	sub	sp, #24
 810235a:	af00      	add	r7, sp, #0
 810235c:	60f8      	str	r0, [r7, #12]
 810235e:	60b9      	str	r1, [r7, #8]
 8102360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102362:	2300      	movs	r3, #0
 8102364:	617b      	str	r3, [r7, #20]
 8102366:	e00a      	b.n	810237e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102368:	f3af 8000 	nop.w
 810236c:	4601      	mov	r1, r0
 810236e:	68bb      	ldr	r3, [r7, #8]
 8102370:	1c5a      	adds	r2, r3, #1
 8102372:	60ba      	str	r2, [r7, #8]
 8102374:	b2ca      	uxtb	r2, r1
 8102376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102378:	697b      	ldr	r3, [r7, #20]
 810237a:	3301      	adds	r3, #1
 810237c:	617b      	str	r3, [r7, #20]
 810237e:	697a      	ldr	r2, [r7, #20]
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	429a      	cmp	r2, r3
 8102384:	dbf0      	blt.n	8102368 <_read+0x12>
  }

  return len;
 8102386:	687b      	ldr	r3, [r7, #4]
}
 8102388:	4618      	mov	r0, r3
 810238a:	3718      	adds	r7, #24
 810238c:	46bd      	mov	sp, r7
 810238e:	bd80      	pop	{r7, pc}

08102390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102390:	b580      	push	{r7, lr}
 8102392:	b086      	sub	sp, #24
 8102394:	af00      	add	r7, sp, #0
 8102396:	60f8      	str	r0, [r7, #12]
 8102398:	60b9      	str	r1, [r7, #8]
 810239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810239c:	2300      	movs	r3, #0
 810239e:	617b      	str	r3, [r7, #20]
 81023a0:	e009      	b.n	81023b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81023a2:	68bb      	ldr	r3, [r7, #8]
 81023a4:	1c5a      	adds	r2, r3, #1
 81023a6:	60ba      	str	r2, [r7, #8]
 81023a8:	781b      	ldrb	r3, [r3, #0]
 81023aa:	4618      	mov	r0, r3
 81023ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81023b0:	697b      	ldr	r3, [r7, #20]
 81023b2:	3301      	adds	r3, #1
 81023b4:	617b      	str	r3, [r7, #20]
 81023b6:	697a      	ldr	r2, [r7, #20]
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	429a      	cmp	r2, r3
 81023bc:	dbf1      	blt.n	81023a2 <_write+0x12>
  }
  return len;
 81023be:	687b      	ldr	r3, [r7, #4]
}
 81023c0:	4618      	mov	r0, r3
 81023c2:	3718      	adds	r7, #24
 81023c4:	46bd      	mov	sp, r7
 81023c6:	bd80      	pop	{r7, pc}

081023c8 <_close>:

int _close(int file)
{
 81023c8:	b480      	push	{r7}
 81023ca:	b083      	sub	sp, #12
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81023d4:	4618      	mov	r0, r3
 81023d6:	370c      	adds	r7, #12
 81023d8:	46bd      	mov	sp, r7
 81023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023de:	4770      	bx	lr

081023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81023e0:	b480      	push	{r7}
 81023e2:	b083      	sub	sp, #12
 81023e4:	af00      	add	r7, sp, #0
 81023e6:	6078      	str	r0, [r7, #4]
 81023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81023ea:	683b      	ldr	r3, [r7, #0]
 81023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81023f0:	605a      	str	r2, [r3, #4]
  return 0;
 81023f2:	2300      	movs	r3, #0
}
 81023f4:	4618      	mov	r0, r3
 81023f6:	370c      	adds	r7, #12
 81023f8:	46bd      	mov	sp, r7
 81023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fe:	4770      	bx	lr

08102400 <_isatty>:

int _isatty(int file)
{
 8102400:	b480      	push	{r7}
 8102402:	b083      	sub	sp, #12
 8102404:	af00      	add	r7, sp, #0
 8102406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102408:	2301      	movs	r3, #1
}
 810240a:	4618      	mov	r0, r3
 810240c:	370c      	adds	r7, #12
 810240e:	46bd      	mov	sp, r7
 8102410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102414:	4770      	bx	lr

08102416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102416:	b480      	push	{r7}
 8102418:	b085      	sub	sp, #20
 810241a:	af00      	add	r7, sp, #0
 810241c:	60f8      	str	r0, [r7, #12]
 810241e:	60b9      	str	r1, [r7, #8]
 8102420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102422:	2300      	movs	r3, #0
}
 8102424:	4618      	mov	r0, r3
 8102426:	3714      	adds	r7, #20
 8102428:	46bd      	mov	sp, r7
 810242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810242e:	4770      	bx	lr

08102430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102430:	b580      	push	{r7, lr}
 8102432:	b086      	sub	sp, #24
 8102434:	af00      	add	r7, sp, #0
 8102436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102438:	4a14      	ldr	r2, [pc, #80]	@ (810248c <_sbrk+0x5c>)
 810243a:	4b15      	ldr	r3, [pc, #84]	@ (8102490 <_sbrk+0x60>)
 810243c:	1ad3      	subs	r3, r2, r3
 810243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102440:	697b      	ldr	r3, [r7, #20]
 8102442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102444:	4b13      	ldr	r3, [pc, #76]	@ (8102494 <_sbrk+0x64>)
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	2b00      	cmp	r3, #0
 810244a:	d102      	bne.n	8102452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810244c:	4b11      	ldr	r3, [pc, #68]	@ (8102494 <_sbrk+0x64>)
 810244e:	4a12      	ldr	r2, [pc, #72]	@ (8102498 <_sbrk+0x68>)
 8102450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102452:	4b10      	ldr	r3, [pc, #64]	@ (8102494 <_sbrk+0x64>)
 8102454:	681a      	ldr	r2, [r3, #0]
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	4413      	add	r3, r2
 810245a:	693a      	ldr	r2, [r7, #16]
 810245c:	429a      	cmp	r2, r3
 810245e:	d207      	bcs.n	8102470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102460:	f010 fc4c 	bl	8112cfc <__errno>
 8102464:	4603      	mov	r3, r0
 8102466:	220c      	movs	r2, #12
 8102468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810246a:	f04f 33ff 	mov.w	r3, #4294967295
 810246e:	e009      	b.n	8102484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102470:	4b08      	ldr	r3, [pc, #32]	@ (8102494 <_sbrk+0x64>)
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102476:	4b07      	ldr	r3, [pc, #28]	@ (8102494 <_sbrk+0x64>)
 8102478:	681a      	ldr	r2, [r3, #0]
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	4413      	add	r3, r2
 810247e:	4a05      	ldr	r2, [pc, #20]	@ (8102494 <_sbrk+0x64>)
 8102480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102482:	68fb      	ldr	r3, [r7, #12]
}
 8102484:	4618      	mov	r0, r3
 8102486:	3718      	adds	r7, #24
 8102488:	46bd      	mov	sp, r7
 810248a:	bd80      	pop	{r7, pc}
 810248c:	10048000 	.word	0x10048000
 8102490:	00000400 	.word	0x00000400
 8102494:	100005f0 	.word	0x100005f0
 8102498:	10005150 	.word	0x10005150

0810249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810249c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81024d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81024a0:	f7fe fe38 	bl	8101114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81024a4:	480c      	ldr	r0, [pc, #48]	@ (81024d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81024a6:	490d      	ldr	r1, [pc, #52]	@ (81024dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81024a8:	4a0d      	ldr	r2, [pc, #52]	@ (81024e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81024ac:	e002      	b.n	81024b4 <LoopCopyDataInit>

081024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81024b2:	3304      	adds	r3, #4

081024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81024b8:	d3f9      	bcc.n	81024ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81024ba:	4a0a      	ldr	r2, [pc, #40]	@ (81024e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81024bc:	4c0a      	ldr	r4, [pc, #40]	@ (81024e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 81024c0:	e001      	b.n	81024c6 <LoopFillZerobss>

081024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81024c4:	3204      	adds	r2, #4

081024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81024c8:	d3fb      	bcc.n	81024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81024ca:	f010 fc1d 	bl	8112d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81024ce:	f7fe ff23 	bl	8101318 <main>
  bx  lr
 81024d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81024d4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81024d8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81024dc:	10000298 	.word	0x10000298
  ldr r2, =_sidata
 81024e0:	081179c8 	.word	0x081179c8
  ldr r2, =_sbss
 81024e4:	10000298 	.word	0x10000298
  ldr r4, =_ebss
 81024e8:	1000514c 	.word	0x1000514c

081024ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81024ec:	e7fe      	b.n	81024ec <ADC3_IRQHandler>
	...

081024f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81024f0:	b580      	push	{r7, lr}
 81024f2:	b082      	sub	sp, #8
 81024f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81024f6:	4b28      	ldr	r3, [pc, #160]	@ (8102598 <HAL_Init+0xa8>)
 81024f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81024fc:	4a26      	ldr	r2, [pc, #152]	@ (8102598 <HAL_Init+0xa8>)
 81024fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102502:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102506:	4b24      	ldr	r3, [pc, #144]	@ (8102598 <HAL_Init+0xa8>)
 8102508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810250c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102510:	603b      	str	r3, [r7, #0]
 8102512:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102514:	4b21      	ldr	r3, [pc, #132]	@ (810259c <HAL_Init+0xac>)
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810251c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102520:	4a1e      	ldr	r2, [pc, #120]	@ (810259c <HAL_Init+0xac>)
 8102522:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102526:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102528:	4b1c      	ldr	r3, [pc, #112]	@ (810259c <HAL_Init+0xac>)
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4a1b      	ldr	r2, [pc, #108]	@ (810259c <HAL_Init+0xac>)
 810252e:	f043 0301 	orr.w	r3, r3, #1
 8102532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102534:	2003      	movs	r0, #3
 8102536:	f001 f9b0 	bl	810389a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810253a:	f003 fc3d 	bl	8105db8 <HAL_RCC_GetSysClockFreq>
 810253e:	4602      	mov	r2, r0
 8102540:	4b15      	ldr	r3, [pc, #84]	@ (8102598 <HAL_Init+0xa8>)
 8102542:	699b      	ldr	r3, [r3, #24]
 8102544:	0a1b      	lsrs	r3, r3, #8
 8102546:	f003 030f 	and.w	r3, r3, #15
 810254a:	4915      	ldr	r1, [pc, #84]	@ (81025a0 <HAL_Init+0xb0>)
 810254c:	5ccb      	ldrb	r3, [r1, r3]
 810254e:	f003 031f 	and.w	r3, r3, #31
 8102552:	fa22 f303 	lsr.w	r3, r2, r3
 8102556:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102558:	4b0f      	ldr	r3, [pc, #60]	@ (8102598 <HAL_Init+0xa8>)
 810255a:	699b      	ldr	r3, [r3, #24]
 810255c:	f003 030f 	and.w	r3, r3, #15
 8102560:	4a0f      	ldr	r2, [pc, #60]	@ (81025a0 <HAL_Init+0xb0>)
 8102562:	5cd3      	ldrb	r3, [r2, r3]
 8102564:	f003 031f 	and.w	r3, r3, #31
 8102568:	687a      	ldr	r2, [r7, #4]
 810256a:	fa22 f303 	lsr.w	r3, r2, r3
 810256e:	4a0d      	ldr	r2, [pc, #52]	@ (81025a4 <HAL_Init+0xb4>)
 8102570:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102572:	4b0c      	ldr	r3, [pc, #48]	@ (81025a4 <HAL_Init+0xb4>)
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a0c      	ldr	r2, [pc, #48]	@ (81025a8 <HAL_Init+0xb8>)
 8102578:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810257a:	200f      	movs	r0, #15
 810257c:	f7ff fe1e 	bl	81021bc <HAL_InitTick>
 8102580:	4603      	mov	r3, r0
 8102582:	2b00      	cmp	r3, #0
 8102584:	d001      	beq.n	810258a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102586:	2301      	movs	r3, #1
 8102588:	e002      	b.n	8102590 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810258a:	f7ff fc9b 	bl	8101ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810258e:	2300      	movs	r3, #0
}
 8102590:	4618      	mov	r0, r3
 8102592:	3708      	adds	r7, #8
 8102594:	46bd      	mov	sp, r7
 8102596:	bd80      	pop	{r7, pc}
 8102598:	58024400 	.word	0x58024400
 810259c:	40024400 	.word	0x40024400
 81025a0:	0811738c 	.word	0x0811738c
 81025a4:	10000004 	.word	0x10000004
 81025a8:	10000000 	.word	0x10000000

081025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81025ac:	b480      	push	{r7}
 81025ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81025b0:	4b06      	ldr	r3, [pc, #24]	@ (81025cc <HAL_IncTick+0x20>)
 81025b2:	781b      	ldrb	r3, [r3, #0]
 81025b4:	461a      	mov	r2, r3
 81025b6:	4b06      	ldr	r3, [pc, #24]	@ (81025d0 <HAL_IncTick+0x24>)
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	4413      	add	r3, r2
 81025bc:	4a04      	ldr	r2, [pc, #16]	@ (81025d0 <HAL_IncTick+0x24>)
 81025be:	6013      	str	r3, [r2, #0]
}
 81025c0:	bf00      	nop
 81025c2:	46bd      	mov	sp, r7
 81025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c8:	4770      	bx	lr
 81025ca:	bf00      	nop
 81025cc:	1000000c 	.word	0x1000000c
 81025d0:	100005f4 	.word	0x100005f4

081025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81025d4:	b480      	push	{r7}
 81025d6:	af00      	add	r7, sp, #0
  return uwTick;
 81025d8:	4b03      	ldr	r3, [pc, #12]	@ (81025e8 <HAL_GetTick+0x14>)
 81025da:	681b      	ldr	r3, [r3, #0]
}
 81025dc:	4618      	mov	r0, r3
 81025de:	46bd      	mov	sp, r7
 81025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025e4:	4770      	bx	lr
 81025e6:	bf00      	nop
 81025e8:	100005f4 	.word	0x100005f4

081025ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81025ec:	b480      	push	{r7}
 81025ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81025f0:	4b03      	ldr	r3, [pc, #12]	@ (8102600 <HAL_GetREVID+0x14>)
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	0c1b      	lsrs	r3, r3, #16
}
 81025f6:	4618      	mov	r0, r3
 81025f8:	46bd      	mov	sp, r7
 81025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025fe:	4770      	bx	lr
 8102600:	5c001000 	.word	0x5c001000

08102604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102604:	b480      	push	{r7}
 8102606:	b083      	sub	sp, #12
 8102608:	af00      	add	r7, sp, #0
 810260a:	6078      	str	r0, [r7, #4]
 810260c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	689b      	ldr	r3, [r3, #8]
 8102612:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102616:	683b      	ldr	r3, [r7, #0]
 8102618:	431a      	orrs	r2, r3
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	609a      	str	r2, [r3, #8]
}
 810261e:	bf00      	nop
 8102620:	370c      	adds	r7, #12
 8102622:	46bd      	mov	sp, r7
 8102624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102628:	4770      	bx	lr

0810262a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810262a:	b480      	push	{r7}
 810262c:	b083      	sub	sp, #12
 810262e:	af00      	add	r7, sp, #0
 8102630:	6078      	str	r0, [r7, #4]
 8102632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	689b      	ldr	r3, [r3, #8]
 8102638:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 810263c:	683b      	ldr	r3, [r7, #0]
 810263e:	431a      	orrs	r2, r3
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	609a      	str	r2, [r3, #8]
}
 8102644:	bf00      	nop
 8102646:	370c      	adds	r7, #12
 8102648:	46bd      	mov	sp, r7
 810264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264e:	4770      	bx	lr

08102650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102650:	b480      	push	{r7}
 8102652:	b083      	sub	sp, #12
 8102654:	af00      	add	r7, sp, #0
 8102656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	689b      	ldr	r3, [r3, #8]
 810265c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102660:	4618      	mov	r0, r3
 8102662:	370c      	adds	r7, #12
 8102664:	46bd      	mov	sp, r7
 8102666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810266a:	4770      	bx	lr

0810266c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810266c:	b480      	push	{r7}
 810266e:	b087      	sub	sp, #28
 8102670:	af00      	add	r7, sp, #0
 8102672:	60f8      	str	r0, [r7, #12]
 8102674:	60b9      	str	r1, [r7, #8]
 8102676:	607a      	str	r2, [r7, #4]
 8102678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	3360      	adds	r3, #96	@ 0x60
 810267e:	461a      	mov	r2, r3
 8102680:	68bb      	ldr	r3, [r7, #8]
 8102682:	009b      	lsls	r3, r3, #2
 8102684:	4413      	add	r3, r2
 8102686:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102688:	697b      	ldr	r3, [r7, #20]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102696:	683b      	ldr	r3, [r7, #0]
 8102698:	430b      	orrs	r3, r1
 810269a:	431a      	orrs	r2, r3
 810269c:	697b      	ldr	r3, [r7, #20]
 810269e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81026a0:	bf00      	nop
 81026a2:	371c      	adds	r7, #28
 81026a4:	46bd      	mov	sp, r7
 81026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026aa:	4770      	bx	lr

081026ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81026ac:	b480      	push	{r7}
 81026ae:	b085      	sub	sp, #20
 81026b0:	af00      	add	r7, sp, #0
 81026b2:	60f8      	str	r0, [r7, #12]
 81026b4:	60b9      	str	r1, [r7, #8]
 81026b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81026b8:	68fb      	ldr	r3, [r7, #12]
 81026ba:	691b      	ldr	r3, [r3, #16]
 81026bc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 81026c0:	68bb      	ldr	r3, [r7, #8]
 81026c2:	f003 031f 	and.w	r3, r3, #31
 81026c6:	6879      	ldr	r1, [r7, #4]
 81026c8:	fa01 f303 	lsl.w	r3, r1, r3
 81026cc:	431a      	orrs	r2, r3
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	611a      	str	r2, [r3, #16]
}
 81026d2:	bf00      	nop
 81026d4:	3714      	adds	r7, #20
 81026d6:	46bd      	mov	sp, r7
 81026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026dc:	4770      	bx	lr

081026de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81026de:	b480      	push	{r7}
 81026e0:	b087      	sub	sp, #28
 81026e2:	af00      	add	r7, sp, #0
 81026e4:	60f8      	str	r0, [r7, #12]
 81026e6:	60b9      	str	r1, [r7, #8]
 81026e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	3360      	adds	r3, #96	@ 0x60
 81026ee:	461a      	mov	r2, r3
 81026f0:	68bb      	ldr	r3, [r7, #8]
 81026f2:	009b      	lsls	r3, r3, #2
 81026f4:	4413      	add	r3, r2
 81026f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81026f8:	697b      	ldr	r3, [r7, #20]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	431a      	orrs	r2, r3
 8102704:	697b      	ldr	r3, [r7, #20]
 8102706:	601a      	str	r2, [r3, #0]
  }
}
 8102708:	bf00      	nop
 810270a:	371c      	adds	r7, #28
 810270c:	46bd      	mov	sp, r7
 810270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102712:	4770      	bx	lr

08102714 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102714:	b480      	push	{r7}
 8102716:	b087      	sub	sp, #28
 8102718:	af00      	add	r7, sp, #0
 810271a:	60f8      	str	r0, [r7, #12]
 810271c:	60b9      	str	r1, [r7, #8]
 810271e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	3330      	adds	r3, #48	@ 0x30
 8102724:	461a      	mov	r2, r3
 8102726:	68bb      	ldr	r3, [r7, #8]
 8102728:	0a1b      	lsrs	r3, r3, #8
 810272a:	009b      	lsls	r3, r3, #2
 810272c:	f003 030c 	and.w	r3, r3, #12
 8102730:	4413      	add	r3, r2
 8102732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102734:	697b      	ldr	r3, [r7, #20]
 8102736:	681a      	ldr	r2, [r3, #0]
 8102738:	68bb      	ldr	r3, [r7, #8]
 810273a:	f003 031f 	and.w	r3, r3, #31
 810273e:	211f      	movs	r1, #31
 8102740:	fa01 f303 	lsl.w	r3, r1, r3
 8102744:	43db      	mvns	r3, r3
 8102746:	401a      	ands	r2, r3
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	0e9b      	lsrs	r3, r3, #26
 810274c:	f003 011f 	and.w	r1, r3, #31
 8102750:	68bb      	ldr	r3, [r7, #8]
 8102752:	f003 031f 	and.w	r3, r3, #31
 8102756:	fa01 f303 	lsl.w	r3, r1, r3
 810275a:	431a      	orrs	r2, r3
 810275c:	697b      	ldr	r3, [r7, #20]
 810275e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102760:	bf00      	nop
 8102762:	371c      	adds	r7, #28
 8102764:	46bd      	mov	sp, r7
 8102766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810276a:	4770      	bx	lr

0810276c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810276c:	b480      	push	{r7}
 810276e:	b087      	sub	sp, #28
 8102770:	af00      	add	r7, sp, #0
 8102772:	60f8      	str	r0, [r7, #12]
 8102774:	60b9      	str	r1, [r7, #8]
 8102776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	3314      	adds	r3, #20
 810277c:	461a      	mov	r2, r3
 810277e:	68bb      	ldr	r3, [r7, #8]
 8102780:	0e5b      	lsrs	r3, r3, #25
 8102782:	009b      	lsls	r3, r3, #2
 8102784:	f003 0304 	and.w	r3, r3, #4
 8102788:	4413      	add	r3, r2
 810278a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810278c:	697b      	ldr	r3, [r7, #20]
 810278e:	681a      	ldr	r2, [r3, #0]
 8102790:	68bb      	ldr	r3, [r7, #8]
 8102792:	0d1b      	lsrs	r3, r3, #20
 8102794:	f003 031f 	and.w	r3, r3, #31
 8102798:	2107      	movs	r1, #7
 810279a:	fa01 f303 	lsl.w	r3, r1, r3
 810279e:	43db      	mvns	r3, r3
 81027a0:	401a      	ands	r2, r3
 81027a2:	68bb      	ldr	r3, [r7, #8]
 81027a4:	0d1b      	lsrs	r3, r3, #20
 81027a6:	f003 031f 	and.w	r3, r3, #31
 81027aa:	6879      	ldr	r1, [r7, #4]
 81027ac:	fa01 f303 	lsl.w	r3, r1, r3
 81027b0:	431a      	orrs	r2, r3
 81027b2:	697b      	ldr	r3, [r7, #20]
 81027b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81027b6:	bf00      	nop
 81027b8:	371c      	adds	r7, #28
 81027ba:	46bd      	mov	sp, r7
 81027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c0:	4770      	bx	lr
	...

081027c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81027c4:	b480      	push	{r7}
 81027c6:	b085      	sub	sp, #20
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	60f8      	str	r0, [r7, #12]
 81027cc:	60b9      	str	r1, [r7, #8]
 81027ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81027d6:	68bb      	ldr	r3, [r7, #8]
 81027d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81027dc:	43db      	mvns	r3, r3
 81027de:	401a      	ands	r2, r3
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	f003 0318 	and.w	r3, r3, #24
 81027e6:	4908      	ldr	r1, [pc, #32]	@ (8102808 <LL_ADC_SetChannelSingleDiff+0x44>)
 81027e8:	40d9      	lsrs	r1, r3
 81027ea:	68bb      	ldr	r3, [r7, #8]
 81027ec:	400b      	ands	r3, r1
 81027ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81027f2:	431a      	orrs	r2, r3
 81027f4:	68fb      	ldr	r3, [r7, #12]
 81027f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81027fa:	bf00      	nop
 81027fc:	3714      	adds	r7, #20
 81027fe:	46bd      	mov	sp, r7
 8102800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102804:	4770      	bx	lr
 8102806:	bf00      	nop
 8102808:	000fffff 	.word	0x000fffff

0810280c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 810280c:	b480      	push	{r7}
 810280e:	b083      	sub	sp, #12
 8102810:	af00      	add	r7, sp, #0
 8102812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	689b      	ldr	r3, [r3, #8]
 8102818:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 810281c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102820:	687a      	ldr	r2, [r7, #4]
 8102822:	6093      	str	r3, [r2, #8]
}
 8102824:	bf00      	nop
 8102826:	370c      	adds	r7, #12
 8102828:	46bd      	mov	sp, r7
 810282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282e:	4770      	bx	lr

08102830 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102830:	b480      	push	{r7}
 8102832:	b083      	sub	sp, #12
 8102834:	af00      	add	r7, sp, #0
 8102836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	689b      	ldr	r3, [r3, #8]
 810283c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102844:	d101      	bne.n	810284a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102846:	2301      	movs	r3, #1
 8102848:	e000      	b.n	810284c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810284a:	2300      	movs	r3, #0
}
 810284c:	4618      	mov	r0, r3
 810284e:	370c      	adds	r7, #12
 8102850:	46bd      	mov	sp, r7
 8102852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102856:	4770      	bx	lr

08102858 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102858:	b480      	push	{r7}
 810285a:	b083      	sub	sp, #12
 810285c:	af00      	add	r7, sp, #0
 810285e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	689b      	ldr	r3, [r3, #8]
 8102864:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102868:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810286c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102874:	bf00      	nop
 8102876:	370c      	adds	r7, #12
 8102878:	46bd      	mov	sp, r7
 810287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810287e:	4770      	bx	lr

08102880 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102880:	b480      	push	{r7}
 8102882:	b083      	sub	sp, #12
 8102884:	af00      	add	r7, sp, #0
 8102886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	689b      	ldr	r3, [r3, #8]
 810288c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102894:	d101      	bne.n	810289a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102896:	2301      	movs	r3, #1
 8102898:	e000      	b.n	810289c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810289a:	2300      	movs	r3, #0
}
 810289c:	4618      	mov	r0, r3
 810289e:	370c      	adds	r7, #12
 81028a0:	46bd      	mov	sp, r7
 81028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028a6:	4770      	bx	lr

081028a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81028a8:	b480      	push	{r7}
 81028aa:	b083      	sub	sp, #12
 81028ac:	af00      	add	r7, sp, #0
 81028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	689b      	ldr	r3, [r3, #8]
 81028b4:	f003 0301 	and.w	r3, r3, #1
 81028b8:	2b01      	cmp	r3, #1
 81028ba:	d101      	bne.n	81028c0 <LL_ADC_IsEnabled+0x18>
 81028bc:	2301      	movs	r3, #1
 81028be:	e000      	b.n	81028c2 <LL_ADC_IsEnabled+0x1a>
 81028c0:	2300      	movs	r3, #0
}
 81028c2:	4618      	mov	r0, r3
 81028c4:	370c      	adds	r7, #12
 81028c6:	46bd      	mov	sp, r7
 81028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028cc:	4770      	bx	lr

081028ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81028ce:	b480      	push	{r7}
 81028d0:	b083      	sub	sp, #12
 81028d2:	af00      	add	r7, sp, #0
 81028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	689b      	ldr	r3, [r3, #8]
 81028da:	f003 0304 	and.w	r3, r3, #4
 81028de:	2b04      	cmp	r3, #4
 81028e0:	d101      	bne.n	81028e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 81028e2:	2301      	movs	r3, #1
 81028e4:	e000      	b.n	81028e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81028e6:	2300      	movs	r3, #0
}
 81028e8:	4618      	mov	r0, r3
 81028ea:	370c      	adds	r7, #12
 81028ec:	46bd      	mov	sp, r7
 81028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028f2:	4770      	bx	lr

081028f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81028f4:	b480      	push	{r7}
 81028f6:	b083      	sub	sp, #12
 81028f8:	af00      	add	r7, sp, #0
 81028fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	689b      	ldr	r3, [r3, #8]
 8102900:	f003 0308 	and.w	r3, r3, #8
 8102904:	2b08      	cmp	r3, #8
 8102906:	d101      	bne.n	810290c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102908:	2301      	movs	r3, #1
 810290a:	e000      	b.n	810290e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810290c:	2300      	movs	r3, #0
}
 810290e:	4618      	mov	r0, r3
 8102910:	370c      	adds	r7, #12
 8102912:	46bd      	mov	sp, r7
 8102914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102918:	4770      	bx	lr
	...

0810291c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 810291c:	b590      	push	{r4, r7, lr}
 810291e:	b089      	sub	sp, #36	@ 0x24
 8102920:	af00      	add	r7, sp, #0
 8102922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102924:	2300      	movs	r3, #0
 8102926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102928:	2300      	movs	r3, #0
 810292a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	2b00      	cmp	r3, #0
 8102930:	d101      	bne.n	8102936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102932:	2301      	movs	r3, #1
 8102934:	e18f      	b.n	8102c56 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	68db      	ldr	r3, [r3, #12]
 810293a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102940:	2b00      	cmp	r3, #0
 8102942:	d109      	bne.n	8102958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102944:	6878      	ldr	r0, [r7, #4]
 8102946:	f7ff fae3 	bl	8101f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	2200      	movs	r2, #0
 810294e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	2200      	movs	r2, #0
 8102954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4618      	mov	r0, r3
 810295e:	f7ff ff67 	bl	8102830 <LL_ADC_IsDeepPowerDownEnabled>
 8102962:	4603      	mov	r3, r0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d004      	beq.n	8102972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	4618      	mov	r0, r3
 810296e:	f7ff ff4d 	bl	810280c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	4618      	mov	r0, r3
 8102978:	f7ff ff82 	bl	8102880 <LL_ADC_IsInternalRegulatorEnabled>
 810297c:	4603      	mov	r3, r0
 810297e:	2b00      	cmp	r3, #0
 8102980:	d114      	bne.n	81029ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	4618      	mov	r0, r3
 8102988:	f7ff ff66 	bl	8102858 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810298c:	4b88      	ldr	r3, [pc, #544]	@ (8102bb0 <HAL_ADC_Init+0x294>)
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	099b      	lsrs	r3, r3, #6
 8102992:	4a88      	ldr	r2, [pc, #544]	@ (8102bb4 <HAL_ADC_Init+0x298>)
 8102994:	fba2 2303 	umull	r2, r3, r2, r3
 8102998:	099b      	lsrs	r3, r3, #6
 810299a:	3301      	adds	r3, #1
 810299c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810299e:	e002      	b.n	81029a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81029a0:	68bb      	ldr	r3, [r7, #8]
 81029a2:	3b01      	subs	r3, #1
 81029a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81029a6:	68bb      	ldr	r3, [r7, #8]
 81029a8:	2b00      	cmp	r3, #0
 81029aa:	d1f9      	bne.n	81029a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4618      	mov	r0, r3
 81029b2:	f7ff ff65 	bl	8102880 <LL_ADC_IsInternalRegulatorEnabled>
 81029b6:	4603      	mov	r3, r0
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d10d      	bne.n	81029d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029c0:	f043 0210 	orr.w	r2, r3, #16
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81029cc:	f043 0201 	orr.w	r2, r3, #1
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81029d4:	2301      	movs	r3, #1
 81029d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	4618      	mov	r0, r3
 81029de:	f7ff ff76 	bl	81028ce <LL_ADC_REG_IsConversionOngoing>
 81029e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029e8:	f003 0310 	and.w	r3, r3, #16
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	f040 8129 	bne.w	8102c44 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81029f2:	697b      	ldr	r3, [r7, #20]
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	f040 8125 	bne.w	8102c44 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8102a02:	f043 0202 	orr.w	r2, r3, #2
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4618      	mov	r0, r3
 8102a10:	f7ff ff4a 	bl	81028a8 <LL_ADC_IsEnabled>
 8102a14:	4603      	mov	r3, r0
 8102a16:	2b00      	cmp	r3, #0
 8102a18:	d136      	bne.n	8102a88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a66      	ldr	r2, [pc, #408]	@ (8102bb8 <HAL_ADC_Init+0x29c>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d004      	beq.n	8102a2e <HAL_ADC_Init+0x112>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a64      	ldr	r2, [pc, #400]	@ (8102bbc <HAL_ADC_Init+0x2a0>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d10e      	bne.n	8102a4c <HAL_ADC_Init+0x130>
 8102a2e:	4862      	ldr	r0, [pc, #392]	@ (8102bb8 <HAL_ADC_Init+0x29c>)
 8102a30:	f7ff ff3a 	bl	81028a8 <LL_ADC_IsEnabled>
 8102a34:	4604      	mov	r4, r0
 8102a36:	4861      	ldr	r0, [pc, #388]	@ (8102bbc <HAL_ADC_Init+0x2a0>)
 8102a38:	f7ff ff36 	bl	81028a8 <LL_ADC_IsEnabled>
 8102a3c:	4603      	mov	r3, r0
 8102a3e:	4323      	orrs	r3, r4
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	bf0c      	ite	eq
 8102a44:	2301      	moveq	r3, #1
 8102a46:	2300      	movne	r3, #0
 8102a48:	b2db      	uxtb	r3, r3
 8102a4a:	e008      	b.n	8102a5e <HAL_ADC_Init+0x142>
 8102a4c:	485c      	ldr	r0, [pc, #368]	@ (8102bc0 <HAL_ADC_Init+0x2a4>)
 8102a4e:	f7ff ff2b 	bl	81028a8 <LL_ADC_IsEnabled>
 8102a52:	4603      	mov	r3, r0
 8102a54:	2b00      	cmp	r3, #0
 8102a56:	bf0c      	ite	eq
 8102a58:	2301      	moveq	r3, #1
 8102a5a:	2300      	movne	r3, #0
 8102a5c:	b2db      	uxtb	r3, r3
 8102a5e:	2b00      	cmp	r3, #0
 8102a60:	d012      	beq.n	8102a88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	4a54      	ldr	r2, [pc, #336]	@ (8102bb8 <HAL_ADC_Init+0x29c>)
 8102a68:	4293      	cmp	r3, r2
 8102a6a:	d004      	beq.n	8102a76 <HAL_ADC_Init+0x15a>
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	4a52      	ldr	r2, [pc, #328]	@ (8102bbc <HAL_ADC_Init+0x2a0>)
 8102a72:	4293      	cmp	r3, r2
 8102a74:	d101      	bne.n	8102a7a <HAL_ADC_Init+0x15e>
 8102a76:	4a53      	ldr	r2, [pc, #332]	@ (8102bc4 <HAL_ADC_Init+0x2a8>)
 8102a78:	e000      	b.n	8102a7c <HAL_ADC_Init+0x160>
 8102a7a:	4a53      	ldr	r2, [pc, #332]	@ (8102bc8 <HAL_ADC_Init+0x2ac>)
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	685b      	ldr	r3, [r3, #4]
 8102a80:	4619      	mov	r1, r3
 8102a82:	4610      	mov	r0, r2
 8102a84:	f7ff fdbe 	bl	8102604 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102a88:	f7ff fdb0 	bl	81025ec <HAL_GetREVID>
 8102a8c:	4603      	mov	r3, r0
 8102a8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102a92:	4293      	cmp	r3, r2
 8102a94:	d914      	bls.n	8102ac0 <HAL_ADC_Init+0x1a4>
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	689b      	ldr	r3, [r3, #8]
 8102a9a:	2b10      	cmp	r3, #16
 8102a9c:	d110      	bne.n	8102ac0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	7d5b      	ldrb	r3, [r3, #21]
 8102aa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102aa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102aae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	7f1b      	ldrb	r3, [r3, #28]
 8102ab4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102ab6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ab8:	f043 030c 	orr.w	r3, r3, #12
 8102abc:	61bb      	str	r3, [r7, #24]
 8102abe:	e00d      	b.n	8102adc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	7d5b      	ldrb	r3, [r3, #21]
 8102ac4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102aca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102ad0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	7f1b      	ldrb	r3, [r3, #28]
 8102ad6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ad8:	4313      	orrs	r3, r2
 8102ada:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	7f1b      	ldrb	r3, [r3, #28]
 8102ae0:	2b01      	cmp	r3, #1
 8102ae2:	d106      	bne.n	8102af2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	6a1b      	ldr	r3, [r3, #32]
 8102ae8:	3b01      	subs	r3, #1
 8102aea:	045b      	lsls	r3, r3, #17
 8102aec:	69ba      	ldr	r2, [r7, #24]
 8102aee:	4313      	orrs	r3, r2
 8102af0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102af6:	2b00      	cmp	r3, #0
 8102af8:	d009      	beq.n	8102b0e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102afe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102b06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102b08:	69ba      	ldr	r2, [r7, #24]
 8102b0a:	4313      	orrs	r3, r2
 8102b0c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	68da      	ldr	r2, [r3, #12]
 8102b14:	4b2d      	ldr	r3, [pc, #180]	@ (8102bcc <HAL_ADC_Init+0x2b0>)
 8102b16:	4013      	ands	r3, r2
 8102b18:	687a      	ldr	r2, [r7, #4]
 8102b1a:	6812      	ldr	r2, [r2, #0]
 8102b1c:	69b9      	ldr	r1, [r7, #24]
 8102b1e:	430b      	orrs	r3, r1
 8102b20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4618      	mov	r0, r3
 8102b28:	f7ff fed1 	bl	81028ce <LL_ADC_REG_IsConversionOngoing>
 8102b2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	4618      	mov	r0, r3
 8102b34:	f7ff fede 	bl	81028f4 <LL_ADC_INJ_IsConversionOngoing>
 8102b38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102b3a:	693b      	ldr	r3, [r7, #16]
 8102b3c:	2b00      	cmp	r3, #0
 8102b3e:	d15f      	bne.n	8102c00 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	2b00      	cmp	r3, #0
 8102b44:	d15c      	bne.n	8102c00 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	7d1b      	ldrb	r3, [r3, #20]
 8102b4a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8102b50:	4313      	orrs	r3, r2
 8102b52:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	68db      	ldr	r3, [r3, #12]
 8102b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8102b5e:	f023 0303 	bic.w	r3, r3, #3
 8102b62:	687a      	ldr	r2, [r7, #4]
 8102b64:	6812      	ldr	r2, [r2, #0]
 8102b66:	69b9      	ldr	r1, [r7, #24]
 8102b68:	430b      	orrs	r3, r1
 8102b6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102b72:	2b01      	cmp	r3, #1
 8102b74:	d12e      	bne.n	8102bd4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b7a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	691a      	ldr	r2, [r3, #16]
 8102b82:	4b13      	ldr	r3, [pc, #76]	@ (8102bd0 <HAL_ADC_Init+0x2b4>)
 8102b84:	4013      	ands	r3, r2
 8102b86:	687a      	ldr	r2, [r7, #4]
 8102b88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8102b8a:	3a01      	subs	r2, #1
 8102b8c:	0411      	lsls	r1, r2, #16
 8102b8e:	687a      	ldr	r2, [r7, #4]
 8102b90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8102b92:	4311      	orrs	r1, r2
 8102b94:	687a      	ldr	r2, [r7, #4]
 8102b96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102b98:	4311      	orrs	r1, r2
 8102b9a:	687a      	ldr	r2, [r7, #4]
 8102b9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8102b9e:	430a      	orrs	r2, r1
 8102ba0:	431a      	orrs	r2, r3
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	f042 0201 	orr.w	r2, r2, #1
 8102baa:	611a      	str	r2, [r3, #16]
 8102bac:	e01a      	b.n	8102be4 <HAL_ADC_Init+0x2c8>
 8102bae:	bf00      	nop
 8102bb0:	10000000 	.word	0x10000000
 8102bb4:	053e2d63 	.word	0x053e2d63
 8102bb8:	40022000 	.word	0x40022000
 8102bbc:	40022100 	.word	0x40022100
 8102bc0:	58026000 	.word	0x58026000
 8102bc4:	40022300 	.word	0x40022300
 8102bc8:	58026300 	.word	0x58026300
 8102bcc:	fff0c003 	.word	0xfff0c003
 8102bd0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	691a      	ldr	r2, [r3, #16]
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	f022 0201 	bic.w	r2, r2, #1
 8102be2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	691b      	ldr	r3, [r3, #16]
 8102bea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	430a      	orrs	r2, r1
 8102bf8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102bfa:	6878      	ldr	r0, [r7, #4]
 8102bfc:	f000 fb8c 	bl	8103318 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	68db      	ldr	r3, [r3, #12]
 8102c04:	2b01      	cmp	r3, #1
 8102c06:	d10c      	bne.n	8102c22 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102c0e:	f023 010f 	bic.w	r1, r3, #15
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	699b      	ldr	r3, [r3, #24]
 8102c16:	1e5a      	subs	r2, r3, #1
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	430a      	orrs	r2, r1
 8102c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8102c20:	e007      	b.n	8102c32 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	f022 020f 	bic.w	r2, r2, #15
 8102c30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c36:	f023 0303 	bic.w	r3, r3, #3
 8102c3a:	f043 0201 	orr.w	r2, r3, #1
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	655a      	str	r2, [r3, #84]	@ 0x54
 8102c42:	e007      	b.n	8102c54 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c48:	f043 0210 	orr.w	r2, r3, #16
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102c50:	2301      	movs	r3, #1
 8102c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8102c56:	4618      	mov	r0, r3
 8102c58:	3724      	adds	r7, #36	@ 0x24
 8102c5a:	46bd      	mov	sp, r7
 8102c5c:	bd90      	pop	{r4, r7, pc}
 8102c5e:	bf00      	nop

08102c60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102c60:	b590      	push	{r4, r7, lr}
 8102c62:	b0a1      	sub	sp, #132	@ 0x84
 8102c64:	af00      	add	r7, sp, #0
 8102c66:	6078      	str	r0, [r7, #4]
 8102c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c6a:	2300      	movs	r3, #0
 8102c6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102c70:	2300      	movs	r3, #0
 8102c72:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102c74:	683b      	ldr	r3, [r7, #0]
 8102c76:	68db      	ldr	r3, [r3, #12]
 8102c78:	4a65      	ldr	r2, [pc, #404]	@ (8102e10 <HAL_ADC_ConfigChannel+0x1b0>)
 8102c7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8102c82:	2b01      	cmp	r3, #1
 8102c84:	d101      	bne.n	8102c8a <HAL_ADC_ConfigChannel+0x2a>
 8102c86:	2302      	movs	r3, #2
 8102c88:	e32e      	b.n	81032e8 <HAL_ADC_ConfigChannel+0x688>
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	2201      	movs	r2, #1
 8102c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	4618      	mov	r0, r3
 8102c98:	f7ff fe19 	bl	81028ce <LL_ADC_REG_IsConversionOngoing>
 8102c9c:	4603      	mov	r3, r0
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	f040 8313 	bne.w	81032ca <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8102ca4:	683b      	ldr	r3, [r7, #0]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	db2c      	blt.n	8102d06 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102cac:	683b      	ldr	r3, [r7, #0]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d108      	bne.n	8102cca <HAL_ADC_ConfigChannel+0x6a>
 8102cb8:	683b      	ldr	r3, [r7, #0]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	0e9b      	lsrs	r3, r3, #26
 8102cbe:	f003 031f 	and.w	r3, r3, #31
 8102cc2:	2201      	movs	r2, #1
 8102cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8102cc8:	e016      	b.n	8102cf8 <HAL_ADC_ConfigChannel+0x98>
 8102cca:	683b      	ldr	r3, [r7, #0]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8102cd2:	fa93 f3a3 	rbit	r3, r3
 8102cd6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102cd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8102cda:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d101      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8102ce2:	2320      	movs	r3, #32
 8102ce4:	e003      	b.n	8102cee <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8102ce6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8102ce8:	fab3 f383 	clz	r3, r3
 8102cec:	b2db      	uxtb	r3, r3
 8102cee:	f003 031f 	and.w	r3, r3, #31
 8102cf2:	2201      	movs	r2, #1
 8102cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8102cf8:	687a      	ldr	r2, [r7, #4]
 8102cfa:	6812      	ldr	r2, [r2, #0]
 8102cfc:	69d1      	ldr	r1, [r2, #28]
 8102cfe:	687a      	ldr	r2, [r7, #4]
 8102d00:	6812      	ldr	r2, [r2, #0]
 8102d02:	430b      	orrs	r3, r1
 8102d04:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	6818      	ldr	r0, [r3, #0]
 8102d0a:	683b      	ldr	r3, [r7, #0]
 8102d0c:	6859      	ldr	r1, [r3, #4]
 8102d0e:	683b      	ldr	r3, [r7, #0]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	461a      	mov	r2, r3
 8102d14:	f7ff fcfe 	bl	8102714 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4618      	mov	r0, r3
 8102d1e:	f7ff fdd6 	bl	81028ce <LL_ADC_REG_IsConversionOngoing>
 8102d22:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	4618      	mov	r0, r3
 8102d2a:	f7ff fde3 	bl	81028f4 <LL_ADC_INJ_IsConversionOngoing>
 8102d2e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	f040 80b8 	bne.w	8102ea8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	f040 80b4 	bne.w	8102ea8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	6818      	ldr	r0, [r3, #0]
 8102d44:	683b      	ldr	r3, [r7, #0]
 8102d46:	6819      	ldr	r1, [r3, #0]
 8102d48:	683b      	ldr	r3, [r7, #0]
 8102d4a:	689b      	ldr	r3, [r3, #8]
 8102d4c:	461a      	mov	r2, r3
 8102d4e:	f7ff fd0d 	bl	810276c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d52:	4b30      	ldr	r3, [pc, #192]	@ (8102e14 <HAL_ADC_ConfigChannel+0x1b4>)
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8102d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102d5e:	d10b      	bne.n	8102d78 <HAL_ADC_ConfigChannel+0x118>
 8102d60:	683b      	ldr	r3, [r7, #0]
 8102d62:	695a      	ldr	r2, [r3, #20]
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	68db      	ldr	r3, [r3, #12]
 8102d6a:	089b      	lsrs	r3, r3, #2
 8102d6c:	f003 0307 	and.w	r3, r3, #7
 8102d70:	005b      	lsls	r3, r3, #1
 8102d72:	fa02 f303 	lsl.w	r3, r2, r3
 8102d76:	e01d      	b.n	8102db4 <HAL_ADC_ConfigChannel+0x154>
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	68db      	ldr	r3, [r3, #12]
 8102d7e:	f003 0310 	and.w	r3, r3, #16
 8102d82:	2b00      	cmp	r3, #0
 8102d84:	d10b      	bne.n	8102d9e <HAL_ADC_ConfigChannel+0x13e>
 8102d86:	683b      	ldr	r3, [r7, #0]
 8102d88:	695a      	ldr	r2, [r3, #20]
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	68db      	ldr	r3, [r3, #12]
 8102d90:	089b      	lsrs	r3, r3, #2
 8102d92:	f003 0307 	and.w	r3, r3, #7
 8102d96:	005b      	lsls	r3, r3, #1
 8102d98:	fa02 f303 	lsl.w	r3, r2, r3
 8102d9c:	e00a      	b.n	8102db4 <HAL_ADC_ConfigChannel+0x154>
 8102d9e:	683b      	ldr	r3, [r7, #0]
 8102da0:	695a      	ldr	r2, [r3, #20]
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	68db      	ldr	r3, [r3, #12]
 8102da8:	089b      	lsrs	r3, r3, #2
 8102daa:	f003 0304 	and.w	r3, r3, #4
 8102dae:	005b      	lsls	r3, r3, #1
 8102db0:	fa02 f303 	lsl.w	r3, r2, r3
 8102db4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102db6:	683b      	ldr	r3, [r7, #0]
 8102db8:	691b      	ldr	r3, [r3, #16]
 8102dba:	2b04      	cmp	r3, #4
 8102dbc:	d02c      	beq.n	8102e18 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	6818      	ldr	r0, [r3, #0]
 8102dc2:	683b      	ldr	r3, [r7, #0]
 8102dc4:	6919      	ldr	r1, [r3, #16]
 8102dc6:	683b      	ldr	r3, [r7, #0]
 8102dc8:	681a      	ldr	r2, [r3, #0]
 8102dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8102dcc:	f7ff fc4e 	bl	810266c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	6818      	ldr	r0, [r3, #0]
 8102dd4:	683b      	ldr	r3, [r7, #0]
 8102dd6:	6919      	ldr	r1, [r3, #16]
 8102dd8:	683b      	ldr	r3, [r7, #0]
 8102dda:	7e5b      	ldrb	r3, [r3, #25]
 8102ddc:	2b01      	cmp	r3, #1
 8102dde:	d102      	bne.n	8102de6 <HAL_ADC_ConfigChannel+0x186>
 8102de0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8102de4:	e000      	b.n	8102de8 <HAL_ADC_ConfigChannel+0x188>
 8102de6:	2300      	movs	r3, #0
 8102de8:	461a      	mov	r2, r3
 8102dea:	f7ff fc78 	bl	81026de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	6818      	ldr	r0, [r3, #0]
 8102df2:	683b      	ldr	r3, [r7, #0]
 8102df4:	6919      	ldr	r1, [r3, #16]
 8102df6:	683b      	ldr	r3, [r7, #0]
 8102df8:	7e1b      	ldrb	r3, [r3, #24]
 8102dfa:	2b01      	cmp	r3, #1
 8102dfc:	d102      	bne.n	8102e04 <HAL_ADC_ConfigChannel+0x1a4>
 8102dfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102e02:	e000      	b.n	8102e06 <HAL_ADC_ConfigChannel+0x1a6>
 8102e04:	2300      	movs	r3, #0
 8102e06:	461a      	mov	r2, r3
 8102e08:	f7ff fc50 	bl	81026ac <LL_ADC_SetDataRightShift>
 8102e0c:	e04c      	b.n	8102ea8 <HAL_ADC_ConfigChannel+0x248>
 8102e0e:	bf00      	nop
 8102e10:	47ff0000 	.word	0x47ff0000
 8102e14:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e22:	683b      	ldr	r3, [r7, #0]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	069b      	lsls	r3, r3, #26
 8102e28:	429a      	cmp	r2, r3
 8102e2a:	d107      	bne.n	8102e3c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e3a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e46:	683b      	ldr	r3, [r7, #0]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	069b      	lsls	r3, r3, #26
 8102e4c:	429a      	cmp	r2, r3
 8102e4e:	d107      	bne.n	8102e60 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e5e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102e66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e6a:	683b      	ldr	r3, [r7, #0]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	069b      	lsls	r3, r3, #26
 8102e70:	429a      	cmp	r2, r3
 8102e72:	d107      	bne.n	8102e84 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e82:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e8e:	683b      	ldr	r3, [r7, #0]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	069b      	lsls	r3, r3, #26
 8102e94:	429a      	cmp	r2, r3
 8102e96:	d107      	bne.n	8102ea8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4618      	mov	r0, r3
 8102eae:	f7ff fcfb 	bl	81028a8 <LL_ADC_IsEnabled>
 8102eb2:	4603      	mov	r3, r0
 8102eb4:	2b00      	cmp	r3, #0
 8102eb6:	f040 8211 	bne.w	81032dc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	6818      	ldr	r0, [r3, #0]
 8102ebe:	683b      	ldr	r3, [r7, #0]
 8102ec0:	6819      	ldr	r1, [r3, #0]
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	68db      	ldr	r3, [r3, #12]
 8102ec6:	461a      	mov	r2, r3
 8102ec8:	f7ff fc7c 	bl	81027c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102ecc:	683b      	ldr	r3, [r7, #0]
 8102ece:	68db      	ldr	r3, [r3, #12]
 8102ed0:	4aa1      	ldr	r2, [pc, #644]	@ (8103158 <HAL_ADC_ConfigChannel+0x4f8>)
 8102ed2:	4293      	cmp	r3, r2
 8102ed4:	f040 812e 	bne.w	8103134 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d10b      	bne.n	8102f00 <HAL_ADC_ConfigChannel+0x2a0>
 8102ee8:	683b      	ldr	r3, [r7, #0]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	0e9b      	lsrs	r3, r3, #26
 8102eee:	3301      	adds	r3, #1
 8102ef0:	f003 031f 	and.w	r3, r3, #31
 8102ef4:	2b09      	cmp	r3, #9
 8102ef6:	bf94      	ite	ls
 8102ef8:	2301      	movls	r3, #1
 8102efa:	2300      	movhi	r3, #0
 8102efc:	b2db      	uxtb	r3, r3
 8102efe:	e019      	b.n	8102f34 <HAL_ADC_ConfigChannel+0x2d4>
 8102f00:	683b      	ldr	r3, [r7, #0]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8102f08:	fa93 f3a3 	rbit	r3, r3
 8102f0c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8102f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8102f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	d101      	bne.n	8102f1c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8102f18:	2320      	movs	r3, #32
 8102f1a:	e003      	b.n	8102f24 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8102f1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102f1e:	fab3 f383 	clz	r3, r3
 8102f22:	b2db      	uxtb	r3, r3
 8102f24:	3301      	adds	r3, #1
 8102f26:	f003 031f 	and.w	r3, r3, #31
 8102f2a:	2b09      	cmp	r3, #9
 8102f2c:	bf94      	ite	ls
 8102f2e:	2301      	movls	r3, #1
 8102f30:	2300      	movhi	r3, #0
 8102f32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d079      	beq.n	810302c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102f38:	683b      	ldr	r3, [r7, #0]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d107      	bne.n	8102f54 <HAL_ADC_ConfigChannel+0x2f4>
 8102f44:	683b      	ldr	r3, [r7, #0]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	0e9b      	lsrs	r3, r3, #26
 8102f4a:	3301      	adds	r3, #1
 8102f4c:	069b      	lsls	r3, r3, #26
 8102f4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102f52:	e015      	b.n	8102f80 <HAL_ADC_ConfigChannel+0x320>
 8102f54:	683b      	ldr	r3, [r7, #0]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102f5c:	fa93 f3a3 	rbit	r3, r3
 8102f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8102f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8102f64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8102f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d101      	bne.n	8102f70 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8102f6c:	2320      	movs	r3, #32
 8102f6e:	e003      	b.n	8102f78 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8102f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102f72:	fab3 f383 	clz	r3, r3
 8102f76:	b2db      	uxtb	r3, r3
 8102f78:	3301      	adds	r3, #1
 8102f7a:	069b      	lsls	r3, r3, #26
 8102f7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102f80:	683b      	ldr	r3, [r7, #0]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d109      	bne.n	8102fa0 <HAL_ADC_ConfigChannel+0x340>
 8102f8c:	683b      	ldr	r3, [r7, #0]
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	0e9b      	lsrs	r3, r3, #26
 8102f92:	3301      	adds	r3, #1
 8102f94:	f003 031f 	and.w	r3, r3, #31
 8102f98:	2101      	movs	r1, #1
 8102f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8102f9e:	e017      	b.n	8102fd0 <HAL_ADC_ConfigChannel+0x370>
 8102fa0:	683b      	ldr	r3, [r7, #0]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102fa8:	fa93 f3a3 	rbit	r3, r3
 8102fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8102fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8102fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d101      	bne.n	8102fbc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8102fb8:	2320      	movs	r3, #32
 8102fba:	e003      	b.n	8102fc4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8102fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102fbe:	fab3 f383 	clz	r3, r3
 8102fc2:	b2db      	uxtb	r3, r3
 8102fc4:	3301      	adds	r3, #1
 8102fc6:	f003 031f 	and.w	r3, r3, #31
 8102fca:	2101      	movs	r1, #1
 8102fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8102fd0:	ea42 0103 	orr.w	r1, r2, r3
 8102fd4:	683b      	ldr	r3, [r7, #0]
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d10a      	bne.n	8102ff6 <HAL_ADC_ConfigChannel+0x396>
 8102fe0:	683b      	ldr	r3, [r7, #0]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	0e9b      	lsrs	r3, r3, #26
 8102fe6:	3301      	adds	r3, #1
 8102fe8:	f003 021f 	and.w	r2, r3, #31
 8102fec:	4613      	mov	r3, r2
 8102fee:	005b      	lsls	r3, r3, #1
 8102ff0:	4413      	add	r3, r2
 8102ff2:	051b      	lsls	r3, r3, #20
 8102ff4:	e018      	b.n	8103028 <HAL_ADC_ConfigChannel+0x3c8>
 8102ff6:	683b      	ldr	r3, [r7, #0]
 8102ff8:	681b      	ldr	r3, [r3, #0]
 8102ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102ffe:	fa93 f3a3 	rbit	r3, r3
 8103002:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8103004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103006:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8103008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810300a:	2b00      	cmp	r3, #0
 810300c:	d101      	bne.n	8103012 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 810300e:	2320      	movs	r3, #32
 8103010:	e003      	b.n	810301a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8103012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103014:	fab3 f383 	clz	r3, r3
 8103018:	b2db      	uxtb	r3, r3
 810301a:	3301      	adds	r3, #1
 810301c:	f003 021f 	and.w	r2, r3, #31
 8103020:	4613      	mov	r3, r2
 8103022:	005b      	lsls	r3, r3, #1
 8103024:	4413      	add	r3, r2
 8103026:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103028:	430b      	orrs	r3, r1
 810302a:	e07e      	b.n	810312a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810302c:	683b      	ldr	r3, [r7, #0]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103034:	2b00      	cmp	r3, #0
 8103036:	d107      	bne.n	8103048 <HAL_ADC_ConfigChannel+0x3e8>
 8103038:	683b      	ldr	r3, [r7, #0]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	0e9b      	lsrs	r3, r3, #26
 810303e:	3301      	adds	r3, #1
 8103040:	069b      	lsls	r3, r3, #26
 8103042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103046:	e015      	b.n	8103074 <HAL_ADC_ConfigChannel+0x414>
 8103048:	683b      	ldr	r3, [r7, #0]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103050:	fa93 f3a3 	rbit	r3, r3
 8103054:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8103056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 810305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810305c:	2b00      	cmp	r3, #0
 810305e:	d101      	bne.n	8103064 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8103060:	2320      	movs	r3, #32
 8103062:	e003      	b.n	810306c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8103064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103066:	fab3 f383 	clz	r3, r3
 810306a:	b2db      	uxtb	r3, r3
 810306c:	3301      	adds	r3, #1
 810306e:	069b      	lsls	r3, r3, #26
 8103070:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103074:	683b      	ldr	r3, [r7, #0]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810307c:	2b00      	cmp	r3, #0
 810307e:	d109      	bne.n	8103094 <HAL_ADC_ConfigChannel+0x434>
 8103080:	683b      	ldr	r3, [r7, #0]
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	0e9b      	lsrs	r3, r3, #26
 8103086:	3301      	adds	r3, #1
 8103088:	f003 031f 	and.w	r3, r3, #31
 810308c:	2101      	movs	r1, #1
 810308e:	fa01 f303 	lsl.w	r3, r1, r3
 8103092:	e017      	b.n	81030c4 <HAL_ADC_ConfigChannel+0x464>
 8103094:	683b      	ldr	r3, [r7, #0]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810309a:	69fb      	ldr	r3, [r7, #28]
 810309c:	fa93 f3a3 	rbit	r3, r3
 81030a0:	61bb      	str	r3, [r7, #24]
  return result;
 81030a2:	69bb      	ldr	r3, [r7, #24]
 81030a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81030a6:	6a3b      	ldr	r3, [r7, #32]
 81030a8:	2b00      	cmp	r3, #0
 81030aa:	d101      	bne.n	81030b0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81030ac:	2320      	movs	r3, #32
 81030ae:	e003      	b.n	81030b8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81030b0:	6a3b      	ldr	r3, [r7, #32]
 81030b2:	fab3 f383 	clz	r3, r3
 81030b6:	b2db      	uxtb	r3, r3
 81030b8:	3301      	adds	r3, #1
 81030ba:	f003 031f 	and.w	r3, r3, #31
 81030be:	2101      	movs	r1, #1
 81030c0:	fa01 f303 	lsl.w	r3, r1, r3
 81030c4:	ea42 0103 	orr.w	r1, r2, r3
 81030c8:	683b      	ldr	r3, [r7, #0]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d10d      	bne.n	81030f0 <HAL_ADC_ConfigChannel+0x490>
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	0e9b      	lsrs	r3, r3, #26
 81030da:	3301      	adds	r3, #1
 81030dc:	f003 021f 	and.w	r2, r3, #31
 81030e0:	4613      	mov	r3, r2
 81030e2:	005b      	lsls	r3, r3, #1
 81030e4:	4413      	add	r3, r2
 81030e6:	3b1e      	subs	r3, #30
 81030e8:	051b      	lsls	r3, r3, #20
 81030ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81030ee:	e01b      	b.n	8103128 <HAL_ADC_ConfigChannel+0x4c8>
 81030f0:	683b      	ldr	r3, [r7, #0]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81030f6:	693b      	ldr	r3, [r7, #16]
 81030f8:	fa93 f3a3 	rbit	r3, r3
 81030fc:	60fb      	str	r3, [r7, #12]
  return result;
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103102:	697b      	ldr	r3, [r7, #20]
 8103104:	2b00      	cmp	r3, #0
 8103106:	d101      	bne.n	810310c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8103108:	2320      	movs	r3, #32
 810310a:	e003      	b.n	8103114 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 810310c:	697b      	ldr	r3, [r7, #20]
 810310e:	fab3 f383 	clz	r3, r3
 8103112:	b2db      	uxtb	r3, r3
 8103114:	3301      	adds	r3, #1
 8103116:	f003 021f 	and.w	r2, r3, #31
 810311a:	4613      	mov	r3, r2
 810311c:	005b      	lsls	r3, r3, #1
 810311e:	4413      	add	r3, r2
 8103120:	3b1e      	subs	r3, #30
 8103122:	051b      	lsls	r3, r3, #20
 8103124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103128:	430b      	orrs	r3, r1
 810312a:	683a      	ldr	r2, [r7, #0]
 810312c:	6892      	ldr	r2, [r2, #8]
 810312e:	4619      	mov	r1, r3
 8103130:	f7ff fb1c 	bl	810276c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103134:	683b      	ldr	r3, [r7, #0]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	2b00      	cmp	r3, #0
 810313a:	f280 80cf 	bge.w	81032dc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	4a06      	ldr	r2, [pc, #24]	@ (810315c <HAL_ADC_ConfigChannel+0x4fc>)
 8103144:	4293      	cmp	r3, r2
 8103146:	d004      	beq.n	8103152 <HAL_ADC_ConfigChannel+0x4f2>
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a04      	ldr	r2, [pc, #16]	@ (8103160 <HAL_ADC_ConfigChannel+0x500>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d10a      	bne.n	8103168 <HAL_ADC_ConfigChannel+0x508>
 8103152:	4b04      	ldr	r3, [pc, #16]	@ (8103164 <HAL_ADC_ConfigChannel+0x504>)
 8103154:	e009      	b.n	810316a <HAL_ADC_ConfigChannel+0x50a>
 8103156:	bf00      	nop
 8103158:	47ff0000 	.word	0x47ff0000
 810315c:	40022000 	.word	0x40022000
 8103160:	40022100 	.word	0x40022100
 8103164:	40022300 	.word	0x40022300
 8103168:	4b61      	ldr	r3, [pc, #388]	@ (81032f0 <HAL_ADC_ConfigChannel+0x690>)
 810316a:	4618      	mov	r0, r3
 810316c:	f7ff fa70 	bl	8102650 <LL_ADC_GetCommonPathInternalCh>
 8103170:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4a5f      	ldr	r2, [pc, #380]	@ (81032f4 <HAL_ADC_ConfigChannel+0x694>)
 8103178:	4293      	cmp	r3, r2
 810317a:	d004      	beq.n	8103186 <HAL_ADC_ConfigChannel+0x526>
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	4a5d      	ldr	r2, [pc, #372]	@ (81032f8 <HAL_ADC_ConfigChannel+0x698>)
 8103182:	4293      	cmp	r3, r2
 8103184:	d10e      	bne.n	81031a4 <HAL_ADC_ConfigChannel+0x544>
 8103186:	485b      	ldr	r0, [pc, #364]	@ (81032f4 <HAL_ADC_ConfigChannel+0x694>)
 8103188:	f7ff fb8e 	bl	81028a8 <LL_ADC_IsEnabled>
 810318c:	4604      	mov	r4, r0
 810318e:	485a      	ldr	r0, [pc, #360]	@ (81032f8 <HAL_ADC_ConfigChannel+0x698>)
 8103190:	f7ff fb8a 	bl	81028a8 <LL_ADC_IsEnabled>
 8103194:	4603      	mov	r3, r0
 8103196:	4323      	orrs	r3, r4
 8103198:	2b00      	cmp	r3, #0
 810319a:	bf0c      	ite	eq
 810319c:	2301      	moveq	r3, #1
 810319e:	2300      	movne	r3, #0
 81031a0:	b2db      	uxtb	r3, r3
 81031a2:	e008      	b.n	81031b6 <HAL_ADC_ConfigChannel+0x556>
 81031a4:	4855      	ldr	r0, [pc, #340]	@ (81032fc <HAL_ADC_ConfigChannel+0x69c>)
 81031a6:	f7ff fb7f 	bl	81028a8 <LL_ADC_IsEnabled>
 81031aa:	4603      	mov	r3, r0
 81031ac:	2b00      	cmp	r3, #0
 81031ae:	bf0c      	ite	eq
 81031b0:	2301      	moveq	r3, #1
 81031b2:	2300      	movne	r3, #0
 81031b4:	b2db      	uxtb	r3, r3
 81031b6:	2b00      	cmp	r3, #0
 81031b8:	d07d      	beq.n	81032b6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81031ba:	683b      	ldr	r3, [r7, #0]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	4a50      	ldr	r2, [pc, #320]	@ (8103300 <HAL_ADC_ConfigChannel+0x6a0>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d130      	bne.n	8103226 <HAL_ADC_ConfigChannel+0x5c6>
 81031c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81031c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d12b      	bne.n	8103226 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	4a4a      	ldr	r2, [pc, #296]	@ (81032fc <HAL_ADC_ConfigChannel+0x69c>)
 81031d4:	4293      	cmp	r3, r2
 81031d6:	f040 8081 	bne.w	81032dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	4a45      	ldr	r2, [pc, #276]	@ (81032f4 <HAL_ADC_ConfigChannel+0x694>)
 81031e0:	4293      	cmp	r3, r2
 81031e2:	d004      	beq.n	81031ee <HAL_ADC_ConfigChannel+0x58e>
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	681b      	ldr	r3, [r3, #0]
 81031e8:	4a43      	ldr	r2, [pc, #268]	@ (81032f8 <HAL_ADC_ConfigChannel+0x698>)
 81031ea:	4293      	cmp	r3, r2
 81031ec:	d101      	bne.n	81031f2 <HAL_ADC_ConfigChannel+0x592>
 81031ee:	4a45      	ldr	r2, [pc, #276]	@ (8103304 <HAL_ADC_ConfigChannel+0x6a4>)
 81031f0:	e000      	b.n	81031f4 <HAL_ADC_ConfigChannel+0x594>
 81031f2:	4a3f      	ldr	r2, [pc, #252]	@ (81032f0 <HAL_ADC_ConfigChannel+0x690>)
 81031f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81031f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81031fa:	4619      	mov	r1, r3
 81031fc:	4610      	mov	r0, r2
 81031fe:	f7ff fa14 	bl	810262a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103202:	4b41      	ldr	r3, [pc, #260]	@ (8103308 <HAL_ADC_ConfigChannel+0x6a8>)
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	099b      	lsrs	r3, r3, #6
 8103208:	4a40      	ldr	r2, [pc, #256]	@ (810330c <HAL_ADC_ConfigChannel+0x6ac>)
 810320a:	fba2 2303 	umull	r2, r3, r2, r3
 810320e:	099b      	lsrs	r3, r3, #6
 8103210:	3301      	adds	r3, #1
 8103212:	005b      	lsls	r3, r3, #1
 8103214:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103216:	e002      	b.n	810321e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8103218:	68bb      	ldr	r3, [r7, #8]
 810321a:	3b01      	subs	r3, #1
 810321c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810321e:	68bb      	ldr	r3, [r7, #8]
 8103220:	2b00      	cmp	r3, #0
 8103222:	d1f9      	bne.n	8103218 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103224:	e05a      	b.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103226:	683b      	ldr	r3, [r7, #0]
 8103228:	681b      	ldr	r3, [r3, #0]
 810322a:	4a39      	ldr	r2, [pc, #228]	@ (8103310 <HAL_ADC_ConfigChannel+0x6b0>)
 810322c:	4293      	cmp	r3, r2
 810322e:	d11e      	bne.n	810326e <HAL_ADC_ConfigChannel+0x60e>
 8103230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8103236:	2b00      	cmp	r3, #0
 8103238:	d119      	bne.n	810326e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	4a2f      	ldr	r2, [pc, #188]	@ (81032fc <HAL_ADC_ConfigChannel+0x69c>)
 8103240:	4293      	cmp	r3, r2
 8103242:	d14b      	bne.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	4a2a      	ldr	r2, [pc, #168]	@ (81032f4 <HAL_ADC_ConfigChannel+0x694>)
 810324a:	4293      	cmp	r3, r2
 810324c:	d004      	beq.n	8103258 <HAL_ADC_ConfigChannel+0x5f8>
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4a29      	ldr	r2, [pc, #164]	@ (81032f8 <HAL_ADC_ConfigChannel+0x698>)
 8103254:	4293      	cmp	r3, r2
 8103256:	d101      	bne.n	810325c <HAL_ADC_ConfigChannel+0x5fc>
 8103258:	4a2a      	ldr	r2, [pc, #168]	@ (8103304 <HAL_ADC_ConfigChannel+0x6a4>)
 810325a:	e000      	b.n	810325e <HAL_ADC_ConfigChannel+0x5fe>
 810325c:	4a24      	ldr	r2, [pc, #144]	@ (81032f0 <HAL_ADC_ConfigChannel+0x690>)
 810325e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103260:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103264:	4619      	mov	r1, r3
 8103266:	4610      	mov	r0, r2
 8103268:	f7ff f9df 	bl	810262a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810326c:	e036      	b.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810326e:	683b      	ldr	r3, [r7, #0]
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	4a28      	ldr	r2, [pc, #160]	@ (8103314 <HAL_ADC_ConfigChannel+0x6b4>)
 8103274:	4293      	cmp	r3, r2
 8103276:	d131      	bne.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
 8103278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810327a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810327e:	2b00      	cmp	r3, #0
 8103280:	d12c      	bne.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4a1d      	ldr	r2, [pc, #116]	@ (81032fc <HAL_ADC_ConfigChannel+0x69c>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d127      	bne.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	4a18      	ldr	r2, [pc, #96]	@ (81032f4 <HAL_ADC_ConfigChannel+0x694>)
 8103292:	4293      	cmp	r3, r2
 8103294:	d004      	beq.n	81032a0 <HAL_ADC_ConfigChannel+0x640>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4a17      	ldr	r2, [pc, #92]	@ (81032f8 <HAL_ADC_ConfigChannel+0x698>)
 810329c:	4293      	cmp	r3, r2
 810329e:	d101      	bne.n	81032a4 <HAL_ADC_ConfigChannel+0x644>
 81032a0:	4a18      	ldr	r2, [pc, #96]	@ (8103304 <HAL_ADC_ConfigChannel+0x6a4>)
 81032a2:	e000      	b.n	81032a6 <HAL_ADC_ConfigChannel+0x646>
 81032a4:	4a12      	ldr	r2, [pc, #72]	@ (81032f0 <HAL_ADC_ConfigChannel+0x690>)
 81032a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81032a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81032ac:	4619      	mov	r1, r3
 81032ae:	4610      	mov	r0, r2
 81032b0:	f7ff f9bb 	bl	810262a <LL_ADC_SetCommonPathInternalCh>
 81032b4:	e012      	b.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032ba:	f043 0220 	orr.w	r2, r3, #32
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81032c2:	2301      	movs	r3, #1
 81032c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 81032c8:	e008      	b.n	81032dc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032ce:	f043 0220 	orr.w	r2, r3, #32
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81032d6:	2301      	movs	r3, #1
 81032d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	2200      	movs	r2, #0
 81032e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81032e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 81032e8:	4618      	mov	r0, r3
 81032ea:	3784      	adds	r7, #132	@ 0x84
 81032ec:	46bd      	mov	sp, r7
 81032ee:	bd90      	pop	{r4, r7, pc}
 81032f0:	58026300 	.word	0x58026300
 81032f4:	40022000 	.word	0x40022000
 81032f8:	40022100 	.word	0x40022100
 81032fc:	58026000 	.word	0x58026000
 8103300:	cb840000 	.word	0xcb840000
 8103304:	40022300 	.word	0x40022300
 8103308:	10000000 	.word	0x10000000
 810330c:	053e2d63 	.word	0x053e2d63
 8103310:	c7520000 	.word	0xc7520000
 8103314:	cfb80000 	.word	0xcfb80000

08103318 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103318:	b580      	push	{r7, lr}
 810331a:	b084      	sub	sp, #16
 810331c:	af00      	add	r7, sp, #0
 810331e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	4a7a      	ldr	r2, [pc, #488]	@ (8103510 <ADC_ConfigureBoostMode+0x1f8>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d004      	beq.n	8103334 <ADC_ConfigureBoostMode+0x1c>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	4a79      	ldr	r2, [pc, #484]	@ (8103514 <ADC_ConfigureBoostMode+0x1fc>)
 8103330:	4293      	cmp	r3, r2
 8103332:	d109      	bne.n	8103348 <ADC_ConfigureBoostMode+0x30>
 8103334:	4b78      	ldr	r3, [pc, #480]	@ (8103518 <ADC_ConfigureBoostMode+0x200>)
 8103336:	689b      	ldr	r3, [r3, #8]
 8103338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810333c:	2b00      	cmp	r3, #0
 810333e:	bf14      	ite	ne
 8103340:	2301      	movne	r3, #1
 8103342:	2300      	moveq	r3, #0
 8103344:	b2db      	uxtb	r3, r3
 8103346:	e008      	b.n	810335a <ADC_ConfigureBoostMode+0x42>
 8103348:	4b74      	ldr	r3, [pc, #464]	@ (810351c <ADC_ConfigureBoostMode+0x204>)
 810334a:	689b      	ldr	r3, [r3, #8]
 810334c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103350:	2b00      	cmp	r3, #0
 8103352:	bf14      	ite	ne
 8103354:	2301      	movne	r3, #1
 8103356:	2300      	moveq	r3, #0
 8103358:	b2db      	uxtb	r3, r3
 810335a:	2b00      	cmp	r3, #0
 810335c:	d01c      	beq.n	8103398 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810335e:	f002 fea5 	bl	81060ac <HAL_RCC_GetHCLKFreq>
 8103362:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	685b      	ldr	r3, [r3, #4]
 8103368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810336c:	d010      	beq.n	8103390 <ADC_ConfigureBoostMode+0x78>
 810336e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103372:	d873      	bhi.n	810345c <ADC_ConfigureBoostMode+0x144>
 8103374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103378:	d002      	beq.n	8103380 <ADC_ConfigureBoostMode+0x68>
 810337a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810337e:	d16d      	bne.n	810345c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	685b      	ldr	r3, [r3, #4]
 8103384:	0c1b      	lsrs	r3, r3, #16
 8103386:	68fa      	ldr	r2, [r7, #12]
 8103388:	fbb2 f3f3 	udiv	r3, r2, r3
 810338c:	60fb      	str	r3, [r7, #12]
        break;
 810338e:	e068      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	089b      	lsrs	r3, r3, #2
 8103394:	60fb      	str	r3, [r7, #12]
        break;
 8103396:	e064      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103398:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 810339c:	f04f 0100 	mov.w	r1, #0
 81033a0:	f004 f92e 	bl	8107600 <HAL_RCCEx_GetPeriphCLKFreq>
 81033a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	685b      	ldr	r3, [r3, #4]
 81033aa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81033ae:	d051      	beq.n	8103454 <ADC_ConfigureBoostMode+0x13c>
 81033b0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81033b4:	d854      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81033ba:	d047      	beq.n	810344c <ADC_ConfigureBoostMode+0x134>
 81033bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81033c0:	d84e      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81033c6:	d03d      	beq.n	8103444 <ADC_ConfigureBoostMode+0x12c>
 81033c8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81033cc:	d848      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81033d2:	d033      	beq.n	810343c <ADC_ConfigureBoostMode+0x124>
 81033d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81033d8:	d842      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033da:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81033de:	d029      	beq.n	8103434 <ADC_ConfigureBoostMode+0x11c>
 81033e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81033e4:	d83c      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81033ea:	d01a      	beq.n	8103422 <ADC_ConfigureBoostMode+0x10a>
 81033ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81033f0:	d836      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81033f6:	d014      	beq.n	8103422 <ADC_ConfigureBoostMode+0x10a>
 81033f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81033fc:	d830      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 81033fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103402:	d00e      	beq.n	8103422 <ADC_ConfigureBoostMode+0x10a>
 8103404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103408:	d82a      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 810340a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810340e:	d008      	beq.n	8103422 <ADC_ConfigureBoostMode+0x10a>
 8103410:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103414:	d824      	bhi.n	8103460 <ADC_ConfigureBoostMode+0x148>
 8103416:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810341a:	d002      	beq.n	8103422 <ADC_ConfigureBoostMode+0x10a>
 810341c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103420:	d11e      	bne.n	8103460 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	685b      	ldr	r3, [r3, #4]
 8103426:	0c9b      	lsrs	r3, r3, #18
 8103428:	005b      	lsls	r3, r3, #1
 810342a:	68fa      	ldr	r2, [r7, #12]
 810342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103430:	60fb      	str	r3, [r7, #12]
        break;
 8103432:	e016      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103434:	68fb      	ldr	r3, [r7, #12]
 8103436:	091b      	lsrs	r3, r3, #4
 8103438:	60fb      	str	r3, [r7, #12]
        break;
 810343a:	e012      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810343c:	68fb      	ldr	r3, [r7, #12]
 810343e:	095b      	lsrs	r3, r3, #5
 8103440:	60fb      	str	r3, [r7, #12]
        break;
 8103442:	e00e      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103444:	68fb      	ldr	r3, [r7, #12]
 8103446:	099b      	lsrs	r3, r3, #6
 8103448:	60fb      	str	r3, [r7, #12]
        break;
 810344a:	e00a      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	09db      	lsrs	r3, r3, #7
 8103450:	60fb      	str	r3, [r7, #12]
        break;
 8103452:	e006      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	0a1b      	lsrs	r3, r3, #8
 8103458:	60fb      	str	r3, [r7, #12]
        break;
 810345a:	e002      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
        break;
 810345c:	bf00      	nop
 810345e:	e000      	b.n	8103462 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103460:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103462:	f7ff f8c3 	bl	81025ec <HAL_GetREVID>
 8103466:	4603      	mov	r3, r0
 8103468:	f241 0203 	movw	r2, #4099	@ 0x1003
 810346c:	4293      	cmp	r3, r2
 810346e:	d815      	bhi.n	810349c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103470:	68fb      	ldr	r3, [r7, #12]
 8103472:	4a2b      	ldr	r2, [pc, #172]	@ (8103520 <ADC_ConfigureBoostMode+0x208>)
 8103474:	4293      	cmp	r3, r2
 8103476:	d908      	bls.n	810348a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	689a      	ldr	r2, [r3, #8]
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103486:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103488:	e03e      	b.n	8103508 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	681b      	ldr	r3, [r3, #0]
 810348e:	689a      	ldr	r2, [r3, #8]
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103498:	609a      	str	r2, [r3, #8]
}
 810349a:	e035      	b.n	8103508 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 810349c:	68fb      	ldr	r3, [r7, #12]
 810349e:	085b      	lsrs	r3, r3, #1
 81034a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81034a2:	68fb      	ldr	r3, [r7, #12]
 81034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8103524 <ADC_ConfigureBoostMode+0x20c>)
 81034a6:	4293      	cmp	r3, r2
 81034a8:	d808      	bhi.n	81034bc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	689a      	ldr	r2, [r3, #8]
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81034b8:	609a      	str	r2, [r3, #8]
}
 81034ba:	e025      	b.n	8103508 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81034bc:	68fb      	ldr	r3, [r7, #12]
 81034be:	4a1a      	ldr	r2, [pc, #104]	@ (8103528 <ADC_ConfigureBoostMode+0x210>)
 81034c0:	4293      	cmp	r3, r2
 81034c2:	d80a      	bhi.n	81034da <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	689b      	ldr	r3, [r3, #8]
 81034ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81034d6:	609a      	str	r2, [r3, #8]
}
 81034d8:	e016      	b.n	8103508 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81034da:	68fb      	ldr	r3, [r7, #12]
 81034dc:	4a13      	ldr	r2, [pc, #76]	@ (810352c <ADC_ConfigureBoostMode+0x214>)
 81034de:	4293      	cmp	r3, r2
 81034e0:	d80a      	bhi.n	81034f8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	689b      	ldr	r3, [r3, #8]
 81034e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81034f4:	609a      	str	r2, [r3, #8]
}
 81034f6:	e007      	b.n	8103508 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	689a      	ldr	r2, [r3, #8]
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8103506:	609a      	str	r2, [r3, #8]
}
 8103508:	bf00      	nop
 810350a:	3710      	adds	r7, #16
 810350c:	46bd      	mov	sp, r7
 810350e:	bd80      	pop	{r7, pc}
 8103510:	40022000 	.word	0x40022000
 8103514:	40022100 	.word	0x40022100
 8103518:	40022300 	.word	0x40022300
 810351c:	58026300 	.word	0x58026300
 8103520:	01312d00 	.word	0x01312d00
 8103524:	005f5e10 	.word	0x005f5e10
 8103528:	00bebc20 	.word	0x00bebc20
 810352c:	017d7840 	.word	0x017d7840

08103530 <LL_ADC_IsEnabled>:
{
 8103530:	b480      	push	{r7}
 8103532:	b083      	sub	sp, #12
 8103534:	af00      	add	r7, sp, #0
 8103536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	689b      	ldr	r3, [r3, #8]
 810353c:	f003 0301 	and.w	r3, r3, #1
 8103540:	2b01      	cmp	r3, #1
 8103542:	d101      	bne.n	8103548 <LL_ADC_IsEnabled+0x18>
 8103544:	2301      	movs	r3, #1
 8103546:	e000      	b.n	810354a <LL_ADC_IsEnabled+0x1a>
 8103548:	2300      	movs	r3, #0
}
 810354a:	4618      	mov	r0, r3
 810354c:	370c      	adds	r7, #12
 810354e:	46bd      	mov	sp, r7
 8103550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103554:	4770      	bx	lr

08103556 <LL_ADC_REG_IsConversionOngoing>:
{
 8103556:	b480      	push	{r7}
 8103558:	b083      	sub	sp, #12
 810355a:	af00      	add	r7, sp, #0
 810355c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	689b      	ldr	r3, [r3, #8]
 8103562:	f003 0304 	and.w	r3, r3, #4
 8103566:	2b04      	cmp	r3, #4
 8103568:	d101      	bne.n	810356e <LL_ADC_REG_IsConversionOngoing+0x18>
 810356a:	2301      	movs	r3, #1
 810356c:	e000      	b.n	8103570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810356e:	2300      	movs	r3, #0
}
 8103570:	4618      	mov	r0, r3
 8103572:	370c      	adds	r7, #12
 8103574:	46bd      	mov	sp, r7
 8103576:	f85d 7b04 	ldr.w	r7, [sp], #4
 810357a:	4770      	bx	lr

0810357c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 810357c:	b590      	push	{r4, r7, lr}
 810357e:	b09f      	sub	sp, #124	@ 0x7c
 8103580:	af00      	add	r7, sp, #0
 8103582:	6078      	str	r0, [r7, #4]
 8103584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103586:	2300      	movs	r3, #0
 8103588:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103592:	2b01      	cmp	r3, #1
 8103594:	d101      	bne.n	810359a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103596:	2302      	movs	r3, #2
 8103598:	e0c4      	b.n	8103724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	2201      	movs	r2, #1
 810359e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81035a2:	2300      	movs	r3, #0
 81035a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81035a6:	2300      	movs	r3, #0
 81035a8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	681b      	ldr	r3, [r3, #0]
 81035ae:	4a5f      	ldr	r2, [pc, #380]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81035b0:	4293      	cmp	r3, r2
 81035b2:	d102      	bne.n	81035ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81035b4:	4b5e      	ldr	r3, [pc, #376]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81035b6:	60bb      	str	r3, [r7, #8]
 81035b8:	e001      	b.n	81035be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81035ba:	2300      	movs	r3, #0
 81035bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81035be:	68bb      	ldr	r3, [r7, #8]
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d10b      	bne.n	81035dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035c8:	f043 0220 	orr.w	r2, r3, #32
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	2200      	movs	r2, #0
 81035d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81035d8:	2301      	movs	r3, #1
 81035da:	e0a3      	b.n	8103724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81035dc:	68bb      	ldr	r3, [r7, #8]
 81035de:	4618      	mov	r0, r3
 81035e0:	f7ff ffb9 	bl	8103556 <LL_ADC_REG_IsConversionOngoing>
 81035e4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	681b      	ldr	r3, [r3, #0]
 81035ea:	4618      	mov	r0, r3
 81035ec:	f7ff ffb3 	bl	8103556 <LL_ADC_REG_IsConversionOngoing>
 81035f0:	4603      	mov	r3, r0
 81035f2:	2b00      	cmp	r3, #0
 81035f4:	f040 8085 	bne.w	8103702 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81035f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81035fa:	2b00      	cmp	r3, #0
 81035fc:	f040 8081 	bne.w	8103702 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a49      	ldr	r2, [pc, #292]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d004      	beq.n	8103614 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a48      	ldr	r2, [pc, #288]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103610:	4293      	cmp	r3, r2
 8103612:	d101      	bne.n	8103618 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103614:	4b47      	ldr	r3, [pc, #284]	@ (8103734 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103616:	e000      	b.n	810361a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103618:	4b47      	ldr	r3, [pc, #284]	@ (8103738 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810361a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810361c:	683b      	ldr	r3, [r7, #0]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d03b      	beq.n	810369c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103626:	689b      	ldr	r3, [r3, #8]
 8103628:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810362c:	683b      	ldr	r3, [r7, #0]
 810362e:	685b      	ldr	r3, [r3, #4]
 8103630:	431a      	orrs	r2, r3
 8103632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103634:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	4a3c      	ldr	r2, [pc, #240]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810363c:	4293      	cmp	r3, r2
 810363e:	d004      	beq.n	810364a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4a3a      	ldr	r2, [pc, #232]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103646:	4293      	cmp	r3, r2
 8103648:	d10e      	bne.n	8103668 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810364a:	4838      	ldr	r0, [pc, #224]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810364c:	f7ff ff70 	bl	8103530 <LL_ADC_IsEnabled>
 8103650:	4604      	mov	r4, r0
 8103652:	4837      	ldr	r0, [pc, #220]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103654:	f7ff ff6c 	bl	8103530 <LL_ADC_IsEnabled>
 8103658:	4603      	mov	r3, r0
 810365a:	4323      	orrs	r3, r4
 810365c:	2b00      	cmp	r3, #0
 810365e:	bf0c      	ite	eq
 8103660:	2301      	moveq	r3, #1
 8103662:	2300      	movne	r3, #0
 8103664:	b2db      	uxtb	r3, r3
 8103666:	e008      	b.n	810367a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103668:	4834      	ldr	r0, [pc, #208]	@ (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810366a:	f7ff ff61 	bl	8103530 <LL_ADC_IsEnabled>
 810366e:	4603      	mov	r3, r0
 8103670:	2b00      	cmp	r3, #0
 8103672:	bf0c      	ite	eq
 8103674:	2301      	moveq	r3, #1
 8103676:	2300      	movne	r3, #0
 8103678:	b2db      	uxtb	r3, r3
 810367a:	2b00      	cmp	r3, #0
 810367c:	d04b      	beq.n	8103716 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810367e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103680:	689b      	ldr	r3, [r3, #8]
 8103682:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103686:	f023 030f 	bic.w	r3, r3, #15
 810368a:	683a      	ldr	r2, [r7, #0]
 810368c:	6811      	ldr	r1, [r2, #0]
 810368e:	683a      	ldr	r2, [r7, #0]
 8103690:	6892      	ldr	r2, [r2, #8]
 8103692:	430a      	orrs	r2, r1
 8103694:	431a      	orrs	r2, r3
 8103696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103698:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810369a:	e03c      	b.n	8103716 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810369c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810369e:	689b      	ldr	r3, [r3, #8]
 81036a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81036a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81036a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a1f      	ldr	r2, [pc, #124]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d004      	beq.n	81036bc <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	4a1e      	ldr	r2, [pc, #120]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81036b8:	4293      	cmp	r3, r2
 81036ba:	d10e      	bne.n	81036da <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81036bc:	481b      	ldr	r0, [pc, #108]	@ (810372c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81036be:	f7ff ff37 	bl	8103530 <LL_ADC_IsEnabled>
 81036c2:	4604      	mov	r4, r0
 81036c4:	481a      	ldr	r0, [pc, #104]	@ (8103730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81036c6:	f7ff ff33 	bl	8103530 <LL_ADC_IsEnabled>
 81036ca:	4603      	mov	r3, r0
 81036cc:	4323      	orrs	r3, r4
 81036ce:	2b00      	cmp	r3, #0
 81036d0:	bf0c      	ite	eq
 81036d2:	2301      	moveq	r3, #1
 81036d4:	2300      	movne	r3, #0
 81036d6:	b2db      	uxtb	r3, r3
 81036d8:	e008      	b.n	81036ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81036da:	4818      	ldr	r0, [pc, #96]	@ (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81036dc:	f7ff ff28 	bl	8103530 <LL_ADC_IsEnabled>
 81036e0:	4603      	mov	r3, r0
 81036e2:	2b00      	cmp	r3, #0
 81036e4:	bf0c      	ite	eq
 81036e6:	2301      	moveq	r3, #1
 81036e8:	2300      	movne	r3, #0
 81036ea:	b2db      	uxtb	r3, r3
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d012      	beq.n	8103716 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81036f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81036f2:	689b      	ldr	r3, [r3, #8]
 81036f4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81036f8:	f023 030f 	bic.w	r3, r3, #15
 81036fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 81036fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103700:	e009      	b.n	8103716 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103706:	f043 0220 	orr.w	r2, r3, #32
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810370e:	2301      	movs	r3, #1
 8103710:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103714:	e000      	b.n	8103718 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103716:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103718:	687b      	ldr	r3, [r7, #4]
 810371a:	2200      	movs	r2, #0
 810371c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103720:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103724:	4618      	mov	r0, r3
 8103726:	377c      	adds	r7, #124	@ 0x7c
 8103728:	46bd      	mov	sp, r7
 810372a:	bd90      	pop	{r4, r7, pc}
 810372c:	40022000 	.word	0x40022000
 8103730:	40022100 	.word	0x40022100
 8103734:	40022300 	.word	0x40022300
 8103738:	58026300 	.word	0x58026300
 810373c:	58026000 	.word	0x58026000

08103740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103740:	b480      	push	{r7}
 8103742:	b085      	sub	sp, #20
 8103744:	af00      	add	r7, sp, #0
 8103746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	f003 0307 	and.w	r3, r3, #7
 810374e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103750:	4b0c      	ldr	r3, [pc, #48]	@ (8103784 <__NVIC_SetPriorityGrouping+0x44>)
 8103752:	68db      	ldr	r3, [r3, #12]
 8103754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103756:	68ba      	ldr	r2, [r7, #8]
 8103758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810375c:	4013      	ands	r3, r2
 810375e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103760:	68fb      	ldr	r3, [r7, #12]
 8103762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103764:	68bb      	ldr	r3, [r7, #8]
 8103766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103772:	4a04      	ldr	r2, [pc, #16]	@ (8103784 <__NVIC_SetPriorityGrouping+0x44>)
 8103774:	68bb      	ldr	r3, [r7, #8]
 8103776:	60d3      	str	r3, [r2, #12]
}
 8103778:	bf00      	nop
 810377a:	3714      	adds	r7, #20
 810377c:	46bd      	mov	sp, r7
 810377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103782:	4770      	bx	lr
 8103784:	e000ed00 	.word	0xe000ed00

08103788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103788:	b480      	push	{r7}
 810378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810378c:	4b04      	ldr	r3, [pc, #16]	@ (81037a0 <__NVIC_GetPriorityGrouping+0x18>)
 810378e:	68db      	ldr	r3, [r3, #12]
 8103790:	0a1b      	lsrs	r3, r3, #8
 8103792:	f003 0307 	and.w	r3, r3, #7
}
 8103796:	4618      	mov	r0, r3
 8103798:	46bd      	mov	sp, r7
 810379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810379e:	4770      	bx	lr
 81037a0:	e000ed00 	.word	0xe000ed00

081037a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81037a4:	b480      	push	{r7}
 81037a6:	b083      	sub	sp, #12
 81037a8:	af00      	add	r7, sp, #0
 81037aa:	4603      	mov	r3, r0
 81037ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81037ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037b2:	2b00      	cmp	r3, #0
 81037b4:	db0b      	blt.n	81037ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81037b6:	88fb      	ldrh	r3, [r7, #6]
 81037b8:	f003 021f 	and.w	r2, r3, #31
 81037bc:	4907      	ldr	r1, [pc, #28]	@ (81037dc <__NVIC_EnableIRQ+0x38>)
 81037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037c2:	095b      	lsrs	r3, r3, #5
 81037c4:	2001      	movs	r0, #1
 81037c6:	fa00 f202 	lsl.w	r2, r0, r2
 81037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81037ce:	bf00      	nop
 81037d0:	370c      	adds	r7, #12
 81037d2:	46bd      	mov	sp, r7
 81037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037d8:	4770      	bx	lr
 81037da:	bf00      	nop
 81037dc:	e000e100 	.word	0xe000e100

081037e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81037e0:	b480      	push	{r7}
 81037e2:	b083      	sub	sp, #12
 81037e4:	af00      	add	r7, sp, #0
 81037e6:	4603      	mov	r3, r0
 81037e8:	6039      	str	r1, [r7, #0]
 81037ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81037ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037f0:	2b00      	cmp	r3, #0
 81037f2:	db0a      	blt.n	810380a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81037f4:	683b      	ldr	r3, [r7, #0]
 81037f6:	b2da      	uxtb	r2, r3
 81037f8:	490c      	ldr	r1, [pc, #48]	@ (810382c <__NVIC_SetPriority+0x4c>)
 81037fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037fe:	0112      	lsls	r2, r2, #4
 8103800:	b2d2      	uxtb	r2, r2
 8103802:	440b      	add	r3, r1
 8103804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103808:	e00a      	b.n	8103820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810380a:	683b      	ldr	r3, [r7, #0]
 810380c:	b2da      	uxtb	r2, r3
 810380e:	4908      	ldr	r1, [pc, #32]	@ (8103830 <__NVIC_SetPriority+0x50>)
 8103810:	88fb      	ldrh	r3, [r7, #6]
 8103812:	f003 030f 	and.w	r3, r3, #15
 8103816:	3b04      	subs	r3, #4
 8103818:	0112      	lsls	r2, r2, #4
 810381a:	b2d2      	uxtb	r2, r2
 810381c:	440b      	add	r3, r1
 810381e:	761a      	strb	r2, [r3, #24]
}
 8103820:	bf00      	nop
 8103822:	370c      	adds	r7, #12
 8103824:	46bd      	mov	sp, r7
 8103826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382a:	4770      	bx	lr
 810382c:	e000e100 	.word	0xe000e100
 8103830:	e000ed00 	.word	0xe000ed00

08103834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103834:	b480      	push	{r7}
 8103836:	b089      	sub	sp, #36	@ 0x24
 8103838:	af00      	add	r7, sp, #0
 810383a:	60f8      	str	r0, [r7, #12]
 810383c:	60b9      	str	r1, [r7, #8]
 810383e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103840:	68fb      	ldr	r3, [r7, #12]
 8103842:	f003 0307 	and.w	r3, r3, #7
 8103846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103848:	69fb      	ldr	r3, [r7, #28]
 810384a:	f1c3 0307 	rsb	r3, r3, #7
 810384e:	2b04      	cmp	r3, #4
 8103850:	bf28      	it	cs
 8103852:	2304      	movcs	r3, #4
 8103854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103856:	69fb      	ldr	r3, [r7, #28]
 8103858:	3304      	adds	r3, #4
 810385a:	2b06      	cmp	r3, #6
 810385c:	d902      	bls.n	8103864 <NVIC_EncodePriority+0x30>
 810385e:	69fb      	ldr	r3, [r7, #28]
 8103860:	3b03      	subs	r3, #3
 8103862:	e000      	b.n	8103866 <NVIC_EncodePriority+0x32>
 8103864:	2300      	movs	r3, #0
 8103866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103868:	f04f 32ff 	mov.w	r2, #4294967295
 810386c:	69bb      	ldr	r3, [r7, #24]
 810386e:	fa02 f303 	lsl.w	r3, r2, r3
 8103872:	43da      	mvns	r2, r3
 8103874:	68bb      	ldr	r3, [r7, #8]
 8103876:	401a      	ands	r2, r3
 8103878:	697b      	ldr	r3, [r7, #20]
 810387a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810387c:	f04f 31ff 	mov.w	r1, #4294967295
 8103880:	697b      	ldr	r3, [r7, #20]
 8103882:	fa01 f303 	lsl.w	r3, r1, r3
 8103886:	43d9      	mvns	r1, r3
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810388c:	4313      	orrs	r3, r2
         );
}
 810388e:	4618      	mov	r0, r3
 8103890:	3724      	adds	r7, #36	@ 0x24
 8103892:	46bd      	mov	sp, r7
 8103894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103898:	4770      	bx	lr

0810389a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810389a:	b580      	push	{r7, lr}
 810389c:	b082      	sub	sp, #8
 810389e:	af00      	add	r7, sp, #0
 81038a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81038a2:	6878      	ldr	r0, [r7, #4]
 81038a4:	f7ff ff4c 	bl	8103740 <__NVIC_SetPriorityGrouping>
}
 81038a8:	bf00      	nop
 81038aa:	3708      	adds	r7, #8
 81038ac:	46bd      	mov	sp, r7
 81038ae:	bd80      	pop	{r7, pc}

081038b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81038b0:	b580      	push	{r7, lr}
 81038b2:	b086      	sub	sp, #24
 81038b4:	af00      	add	r7, sp, #0
 81038b6:	4603      	mov	r3, r0
 81038b8:	60b9      	str	r1, [r7, #8]
 81038ba:	607a      	str	r2, [r7, #4]
 81038bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81038be:	f7ff ff63 	bl	8103788 <__NVIC_GetPriorityGrouping>
 81038c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81038c4:	687a      	ldr	r2, [r7, #4]
 81038c6:	68b9      	ldr	r1, [r7, #8]
 81038c8:	6978      	ldr	r0, [r7, #20]
 81038ca:	f7ff ffb3 	bl	8103834 <NVIC_EncodePriority>
 81038ce:	4602      	mov	r2, r0
 81038d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81038d4:	4611      	mov	r1, r2
 81038d6:	4618      	mov	r0, r3
 81038d8:	f7ff ff82 	bl	81037e0 <__NVIC_SetPriority>
}
 81038dc:	bf00      	nop
 81038de:	3718      	adds	r7, #24
 81038e0:	46bd      	mov	sp, r7
 81038e2:	bd80      	pop	{r7, pc}

081038e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038e4:	b580      	push	{r7, lr}
 81038e6:	b082      	sub	sp, #8
 81038e8:	af00      	add	r7, sp, #0
 81038ea:	4603      	mov	r3, r0
 81038ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81038ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038f2:	4618      	mov	r0, r3
 81038f4:	f7ff ff56 	bl	81037a4 <__NVIC_EnableIRQ>
}
 81038f8:	bf00      	nop
 81038fa:	3708      	adds	r7, #8
 81038fc:	46bd      	mov	sp, r7
 81038fe:	bd80      	pop	{r7, pc}

08103900 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103900:	b480      	push	{r7}
 8103902:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103904:	4b07      	ldr	r3, [pc, #28]	@ (8103924 <HAL_GetCurrentCPUID+0x24>)
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	091b      	lsrs	r3, r3, #4
 810390a:	f003 030f 	and.w	r3, r3, #15
 810390e:	2b07      	cmp	r3, #7
 8103910:	d101      	bne.n	8103916 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103912:	2303      	movs	r3, #3
 8103914:	e000      	b.n	8103918 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103916:	2301      	movs	r3, #1
  }
}
 8103918:	4618      	mov	r0, r3
 810391a:	46bd      	mov	sp, r7
 810391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103920:	4770      	bx	lr
 8103922:	bf00      	nop
 8103924:	e000ed00 	.word	0xe000ed00

08103928 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8103928:	b580      	push	{r7, lr}
 810392a:	b086      	sub	sp, #24
 810392c:	af00      	add	r7, sp, #0
 810392e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8103930:	f7fe fe50 	bl	81025d4 <HAL_GetTick>
 8103934:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	2b00      	cmp	r3, #0
 810393a:	d101      	bne.n	8103940 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 810393c:	2301      	movs	r3, #1
 810393e:	e2dc      	b.n	8103efa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103946:	b2db      	uxtb	r3, r3
 8103948:	2b02      	cmp	r3, #2
 810394a:	d008      	beq.n	810395e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	2280      	movs	r2, #128	@ 0x80
 8103950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	2200      	movs	r2, #0
 8103956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 810395a:	2301      	movs	r3, #1
 810395c:	e2cd      	b.n	8103efa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	4a76      	ldr	r2, [pc, #472]	@ (8103b3c <HAL_DMA_Abort+0x214>)
 8103964:	4293      	cmp	r3, r2
 8103966:	d04a      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	4a74      	ldr	r2, [pc, #464]	@ (8103b40 <HAL_DMA_Abort+0x218>)
 810396e:	4293      	cmp	r3, r2
 8103970:	d045      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	4a73      	ldr	r2, [pc, #460]	@ (8103b44 <HAL_DMA_Abort+0x21c>)
 8103978:	4293      	cmp	r3, r2
 810397a:	d040      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	4a71      	ldr	r2, [pc, #452]	@ (8103b48 <HAL_DMA_Abort+0x220>)
 8103982:	4293      	cmp	r3, r2
 8103984:	d03b      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	4a70      	ldr	r2, [pc, #448]	@ (8103b4c <HAL_DMA_Abort+0x224>)
 810398c:	4293      	cmp	r3, r2
 810398e:	d036      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	4a6e      	ldr	r2, [pc, #440]	@ (8103b50 <HAL_DMA_Abort+0x228>)
 8103996:	4293      	cmp	r3, r2
 8103998:	d031      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4a6d      	ldr	r2, [pc, #436]	@ (8103b54 <HAL_DMA_Abort+0x22c>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d02c      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4a6b      	ldr	r2, [pc, #428]	@ (8103b58 <HAL_DMA_Abort+0x230>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d027      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	4a6a      	ldr	r2, [pc, #424]	@ (8103b5c <HAL_DMA_Abort+0x234>)
 81039b4:	4293      	cmp	r3, r2
 81039b6:	d022      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	4a68      	ldr	r2, [pc, #416]	@ (8103b60 <HAL_DMA_Abort+0x238>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d01d      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a67      	ldr	r2, [pc, #412]	@ (8103b64 <HAL_DMA_Abort+0x23c>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d018      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a65      	ldr	r2, [pc, #404]	@ (8103b68 <HAL_DMA_Abort+0x240>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d013      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a64      	ldr	r2, [pc, #400]	@ (8103b6c <HAL_DMA_Abort+0x244>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d00e      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a62      	ldr	r2, [pc, #392]	@ (8103b70 <HAL_DMA_Abort+0x248>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d009      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a61      	ldr	r2, [pc, #388]	@ (8103b74 <HAL_DMA_Abort+0x24c>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d004      	beq.n	81039fe <HAL_DMA_Abort+0xd6>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4a5f      	ldr	r2, [pc, #380]	@ (8103b78 <HAL_DMA_Abort+0x250>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d101      	bne.n	8103a02 <HAL_DMA_Abort+0xda>
 81039fe:	2301      	movs	r3, #1
 8103a00:	e000      	b.n	8103a04 <HAL_DMA_Abort+0xdc>
 8103a02:	2300      	movs	r3, #0
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	d013      	beq.n	8103a30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	681a      	ldr	r2, [r3, #0]
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	f022 021e 	bic.w	r2, r2, #30
 8103a16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	695a      	ldr	r2, [r3, #20]
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8103a26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	617b      	str	r3, [r7, #20]
 8103a2e:	e00a      	b.n	8103a46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	681a      	ldr	r2, [r3, #0]
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	f022 020e 	bic.w	r2, r2, #14
 8103a3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8103b3c <HAL_DMA_Abort+0x214>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d072      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	4a3a      	ldr	r2, [pc, #232]	@ (8103b40 <HAL_DMA_Abort+0x218>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d06d      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a39      	ldr	r2, [pc, #228]	@ (8103b44 <HAL_DMA_Abort+0x21c>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d068      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a37      	ldr	r2, [pc, #220]	@ (8103b48 <HAL_DMA_Abort+0x220>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d063      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a36      	ldr	r2, [pc, #216]	@ (8103b4c <HAL_DMA_Abort+0x224>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d05e      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a34      	ldr	r2, [pc, #208]	@ (8103b50 <HAL_DMA_Abort+0x228>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d059      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a33      	ldr	r2, [pc, #204]	@ (8103b54 <HAL_DMA_Abort+0x22c>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d054      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a31      	ldr	r2, [pc, #196]	@ (8103b58 <HAL_DMA_Abort+0x230>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d04f      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a30      	ldr	r2, [pc, #192]	@ (8103b5c <HAL_DMA_Abort+0x234>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d04a      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8103b60 <HAL_DMA_Abort+0x238>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d045      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a2d      	ldr	r2, [pc, #180]	@ (8103b64 <HAL_DMA_Abort+0x23c>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d040      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8103b68 <HAL_DMA_Abort+0x240>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d03b      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8103b6c <HAL_DMA_Abort+0x244>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d036      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a28      	ldr	r2, [pc, #160]	@ (8103b70 <HAL_DMA_Abort+0x248>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d031      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a27      	ldr	r2, [pc, #156]	@ (8103b74 <HAL_DMA_Abort+0x24c>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d02c      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a25      	ldr	r2, [pc, #148]	@ (8103b78 <HAL_DMA_Abort+0x250>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d027      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a24      	ldr	r2, [pc, #144]	@ (8103b7c <HAL_DMA_Abort+0x254>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d022      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a22      	ldr	r2, [pc, #136]	@ (8103b80 <HAL_DMA_Abort+0x258>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d01d      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a21      	ldr	r2, [pc, #132]	@ (8103b84 <HAL_DMA_Abort+0x25c>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d018      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a1f      	ldr	r2, [pc, #124]	@ (8103b88 <HAL_DMA_Abort+0x260>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d013      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a1e      	ldr	r2, [pc, #120]	@ (8103b8c <HAL_DMA_Abort+0x264>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d00e      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8103b90 <HAL_DMA_Abort+0x268>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d009      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	4a1b      	ldr	r2, [pc, #108]	@ (8103b94 <HAL_DMA_Abort+0x26c>)
 8103b28:	4293      	cmp	r3, r2
 8103b2a:	d004      	beq.n	8103b36 <HAL_DMA_Abort+0x20e>
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a19      	ldr	r2, [pc, #100]	@ (8103b98 <HAL_DMA_Abort+0x270>)
 8103b32:	4293      	cmp	r3, r2
 8103b34:	d132      	bne.n	8103b9c <HAL_DMA_Abort+0x274>
 8103b36:	2301      	movs	r3, #1
 8103b38:	e031      	b.n	8103b9e <HAL_DMA_Abort+0x276>
 8103b3a:	bf00      	nop
 8103b3c:	40020010 	.word	0x40020010
 8103b40:	40020028 	.word	0x40020028
 8103b44:	40020040 	.word	0x40020040
 8103b48:	40020058 	.word	0x40020058
 8103b4c:	40020070 	.word	0x40020070
 8103b50:	40020088 	.word	0x40020088
 8103b54:	400200a0 	.word	0x400200a0
 8103b58:	400200b8 	.word	0x400200b8
 8103b5c:	40020410 	.word	0x40020410
 8103b60:	40020428 	.word	0x40020428
 8103b64:	40020440 	.word	0x40020440
 8103b68:	40020458 	.word	0x40020458
 8103b6c:	40020470 	.word	0x40020470
 8103b70:	40020488 	.word	0x40020488
 8103b74:	400204a0 	.word	0x400204a0
 8103b78:	400204b8 	.word	0x400204b8
 8103b7c:	58025408 	.word	0x58025408
 8103b80:	5802541c 	.word	0x5802541c
 8103b84:	58025430 	.word	0x58025430
 8103b88:	58025444 	.word	0x58025444
 8103b8c:	58025458 	.word	0x58025458
 8103b90:	5802546c 	.word	0x5802546c
 8103b94:	58025480 	.word	0x58025480
 8103b98:	58025494 	.word	0x58025494
 8103b9c:	2300      	movs	r3, #0
 8103b9e:	2b00      	cmp	r3, #0
 8103ba0:	d007      	beq.n	8103bb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103ba6:	681a      	ldr	r2, [r3, #0]
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8103d6c <HAL_DMA_Abort+0x444>)
 8103bb8:	4293      	cmp	r3, r2
 8103bba:	d04a      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8103d70 <HAL_DMA_Abort+0x448>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d045      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a6a      	ldr	r2, [pc, #424]	@ (8103d74 <HAL_DMA_Abort+0x44c>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d040      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a68      	ldr	r2, [pc, #416]	@ (8103d78 <HAL_DMA_Abort+0x450>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d03b      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	4a67      	ldr	r2, [pc, #412]	@ (8103d7c <HAL_DMA_Abort+0x454>)
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d036      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a65      	ldr	r2, [pc, #404]	@ (8103d80 <HAL_DMA_Abort+0x458>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d031      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	4a64      	ldr	r2, [pc, #400]	@ (8103d84 <HAL_DMA_Abort+0x45c>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d02c      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a62      	ldr	r2, [pc, #392]	@ (8103d88 <HAL_DMA_Abort+0x460>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d027      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4a61      	ldr	r2, [pc, #388]	@ (8103d8c <HAL_DMA_Abort+0x464>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d022      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	4a5f      	ldr	r2, [pc, #380]	@ (8103d90 <HAL_DMA_Abort+0x468>)
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d01d      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8103d94 <HAL_DMA_Abort+0x46c>)
 8103c1c:	4293      	cmp	r3, r2
 8103c1e:	d018      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	4a5c      	ldr	r2, [pc, #368]	@ (8103d98 <HAL_DMA_Abort+0x470>)
 8103c26:	4293      	cmp	r3, r2
 8103c28:	d013      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8103d9c <HAL_DMA_Abort+0x474>)
 8103c30:	4293      	cmp	r3, r2
 8103c32:	d00e      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	681b      	ldr	r3, [r3, #0]
 8103c38:	4a59      	ldr	r2, [pc, #356]	@ (8103da0 <HAL_DMA_Abort+0x478>)
 8103c3a:	4293      	cmp	r3, r2
 8103c3c:	d009      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	4a58      	ldr	r2, [pc, #352]	@ (8103da4 <HAL_DMA_Abort+0x47c>)
 8103c44:	4293      	cmp	r3, r2
 8103c46:	d004      	beq.n	8103c52 <HAL_DMA_Abort+0x32a>
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	4a56      	ldr	r2, [pc, #344]	@ (8103da8 <HAL_DMA_Abort+0x480>)
 8103c4e:	4293      	cmp	r3, r2
 8103c50:	d108      	bne.n	8103c64 <HAL_DMA_Abort+0x33c>
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	681a      	ldr	r2, [r3, #0]
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f022 0201 	bic.w	r2, r2, #1
 8103c60:	601a      	str	r2, [r3, #0]
 8103c62:	e007      	b.n	8103c74 <HAL_DMA_Abort+0x34c>
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	681a      	ldr	r2, [r3, #0]
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	f022 0201 	bic.w	r2, r2, #1
 8103c72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103c74:	e013      	b.n	8103c9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103c76:	f7fe fcad 	bl	81025d4 <HAL_GetTick>
 8103c7a:	4602      	mov	r2, r0
 8103c7c:	693b      	ldr	r3, [r7, #16]
 8103c7e:	1ad3      	subs	r3, r2, r3
 8103c80:	2b05      	cmp	r3, #5
 8103c82:	d90c      	bls.n	8103c9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	2220      	movs	r2, #32
 8103c88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	2203      	movs	r2, #3
 8103c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	2200      	movs	r2, #0
 8103c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8103c9a:	2301      	movs	r3, #1
 8103c9c:	e12d      	b.n	8103efa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103c9e:	697b      	ldr	r3, [r7, #20]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	f003 0301 	and.w	r3, r3, #1
 8103ca6:	2b00      	cmp	r3, #0
 8103ca8:	d1e5      	bne.n	8103c76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	4a2f      	ldr	r2, [pc, #188]	@ (8103d6c <HAL_DMA_Abort+0x444>)
 8103cb0:	4293      	cmp	r3, r2
 8103cb2:	d04a      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8103d70 <HAL_DMA_Abort+0x448>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d045      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8103d74 <HAL_DMA_Abort+0x44c>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d040      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8103d78 <HAL_DMA_Abort+0x450>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d03b      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a29      	ldr	r2, [pc, #164]	@ (8103d7c <HAL_DMA_Abort+0x454>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d036      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a27      	ldr	r2, [pc, #156]	@ (8103d80 <HAL_DMA_Abort+0x458>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d031      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a26      	ldr	r2, [pc, #152]	@ (8103d84 <HAL_DMA_Abort+0x45c>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d02c      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a24      	ldr	r2, [pc, #144]	@ (8103d88 <HAL_DMA_Abort+0x460>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d027      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	4a23      	ldr	r2, [pc, #140]	@ (8103d8c <HAL_DMA_Abort+0x464>)
 8103d00:	4293      	cmp	r3, r2
 8103d02:	d022      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a21      	ldr	r2, [pc, #132]	@ (8103d90 <HAL_DMA_Abort+0x468>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d01d      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	4a20      	ldr	r2, [pc, #128]	@ (8103d94 <HAL_DMA_Abort+0x46c>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d018      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8103d98 <HAL_DMA_Abort+0x470>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d013      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	4a1d      	ldr	r2, [pc, #116]	@ (8103d9c <HAL_DMA_Abort+0x474>)
 8103d28:	4293      	cmp	r3, r2
 8103d2a:	d00e      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	4a1b      	ldr	r2, [pc, #108]	@ (8103da0 <HAL_DMA_Abort+0x478>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d009      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8103da4 <HAL_DMA_Abort+0x47c>)
 8103d3c:	4293      	cmp	r3, r2
 8103d3e:	d004      	beq.n	8103d4a <HAL_DMA_Abort+0x422>
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	4a18      	ldr	r2, [pc, #96]	@ (8103da8 <HAL_DMA_Abort+0x480>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	d101      	bne.n	8103d4e <HAL_DMA_Abort+0x426>
 8103d4a:	2301      	movs	r3, #1
 8103d4c:	e000      	b.n	8103d50 <HAL_DMA_Abort+0x428>
 8103d4e:	2300      	movs	r3, #0
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d02b      	beq.n	8103dac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103d5e:	f003 031f 	and.w	r3, r3, #31
 8103d62:	223f      	movs	r2, #63	@ 0x3f
 8103d64:	409a      	lsls	r2, r3
 8103d66:	68bb      	ldr	r3, [r7, #8]
 8103d68:	609a      	str	r2, [r3, #8]
 8103d6a:	e02a      	b.n	8103dc2 <HAL_DMA_Abort+0x49a>
 8103d6c:	40020010 	.word	0x40020010
 8103d70:	40020028 	.word	0x40020028
 8103d74:	40020040 	.word	0x40020040
 8103d78:	40020058 	.word	0x40020058
 8103d7c:	40020070 	.word	0x40020070
 8103d80:	40020088 	.word	0x40020088
 8103d84:	400200a0 	.word	0x400200a0
 8103d88:	400200b8 	.word	0x400200b8
 8103d8c:	40020410 	.word	0x40020410
 8103d90:	40020428 	.word	0x40020428
 8103d94:	40020440 	.word	0x40020440
 8103d98:	40020458 	.word	0x40020458
 8103d9c:	40020470 	.word	0x40020470
 8103da0:	40020488 	.word	0x40020488
 8103da4:	400204a0 	.word	0x400204a0
 8103da8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103db0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103db6:	f003 031f 	and.w	r3, r3, #31
 8103dba:	2201      	movs	r2, #1
 8103dbc:	409a      	lsls	r2, r3
 8103dbe:	68fb      	ldr	r3, [r7, #12]
 8103dc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8103f04 <HAL_DMA_Abort+0x5dc>)
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	d072      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8103f08 <HAL_DMA_Abort+0x5e0>)
 8103dd2:	4293      	cmp	r3, r2
 8103dd4:	d06d      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a4c      	ldr	r2, [pc, #304]	@ (8103f0c <HAL_DMA_Abort+0x5e4>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d068      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a4a      	ldr	r2, [pc, #296]	@ (8103f10 <HAL_DMA_Abort+0x5e8>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d063      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	4a49      	ldr	r2, [pc, #292]	@ (8103f14 <HAL_DMA_Abort+0x5ec>)
 8103df0:	4293      	cmp	r3, r2
 8103df2:	d05e      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	4a47      	ldr	r2, [pc, #284]	@ (8103f18 <HAL_DMA_Abort+0x5f0>)
 8103dfa:	4293      	cmp	r3, r2
 8103dfc:	d059      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	4a46      	ldr	r2, [pc, #280]	@ (8103f1c <HAL_DMA_Abort+0x5f4>)
 8103e04:	4293      	cmp	r3, r2
 8103e06:	d054      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	4a44      	ldr	r2, [pc, #272]	@ (8103f20 <HAL_DMA_Abort+0x5f8>)
 8103e0e:	4293      	cmp	r3, r2
 8103e10:	d04f      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	4a43      	ldr	r2, [pc, #268]	@ (8103f24 <HAL_DMA_Abort+0x5fc>)
 8103e18:	4293      	cmp	r3, r2
 8103e1a:	d04a      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	4a41      	ldr	r2, [pc, #260]	@ (8103f28 <HAL_DMA_Abort+0x600>)
 8103e22:	4293      	cmp	r3, r2
 8103e24:	d045      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	4a40      	ldr	r2, [pc, #256]	@ (8103f2c <HAL_DMA_Abort+0x604>)
 8103e2c:	4293      	cmp	r3, r2
 8103e2e:	d040      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	4a3e      	ldr	r2, [pc, #248]	@ (8103f30 <HAL_DMA_Abort+0x608>)
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d03b      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8103f34 <HAL_DMA_Abort+0x60c>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d036      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	4a3b      	ldr	r2, [pc, #236]	@ (8103f38 <HAL_DMA_Abort+0x610>)
 8103e4a:	4293      	cmp	r3, r2
 8103e4c:	d031      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	4a3a      	ldr	r2, [pc, #232]	@ (8103f3c <HAL_DMA_Abort+0x614>)
 8103e54:	4293      	cmp	r3, r2
 8103e56:	d02c      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a38      	ldr	r2, [pc, #224]	@ (8103f40 <HAL_DMA_Abort+0x618>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d027      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a37      	ldr	r2, [pc, #220]	@ (8103f44 <HAL_DMA_Abort+0x61c>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d022      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a35      	ldr	r2, [pc, #212]	@ (8103f48 <HAL_DMA_Abort+0x620>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d01d      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a34      	ldr	r2, [pc, #208]	@ (8103f4c <HAL_DMA_Abort+0x624>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d018      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a32      	ldr	r2, [pc, #200]	@ (8103f50 <HAL_DMA_Abort+0x628>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d013      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a31      	ldr	r2, [pc, #196]	@ (8103f54 <HAL_DMA_Abort+0x62c>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d00e      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a2f      	ldr	r2, [pc, #188]	@ (8103f58 <HAL_DMA_Abort+0x630>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d009      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8103f5c <HAL_DMA_Abort+0x634>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d004      	beq.n	8103eb2 <HAL_DMA_Abort+0x58a>
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a2c      	ldr	r2, [pc, #176]	@ (8103f60 <HAL_DMA_Abort+0x638>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d101      	bne.n	8103eb6 <HAL_DMA_Abort+0x58e>
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	e000      	b.n	8103eb8 <HAL_DMA_Abort+0x590>
 8103eb6:	2300      	movs	r3, #0
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d015      	beq.n	8103ee8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103ec0:	687a      	ldr	r2, [r7, #4]
 8103ec2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103ec4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d00c      	beq.n	8103ee8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103ed2:	681a      	ldr	r2, [r3, #0]
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103edc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103ee2:	687a      	ldr	r2, [r7, #4]
 8103ee4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103ee6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	2201      	movs	r2, #1
 8103eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	2200      	movs	r2, #0
 8103ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8103ef8:	2300      	movs	r3, #0
}
 8103efa:	4618      	mov	r0, r3
 8103efc:	3718      	adds	r7, #24
 8103efe:	46bd      	mov	sp, r7
 8103f00:	bd80      	pop	{r7, pc}
 8103f02:	bf00      	nop
 8103f04:	40020010 	.word	0x40020010
 8103f08:	40020028 	.word	0x40020028
 8103f0c:	40020040 	.word	0x40020040
 8103f10:	40020058 	.word	0x40020058
 8103f14:	40020070 	.word	0x40020070
 8103f18:	40020088 	.word	0x40020088
 8103f1c:	400200a0 	.word	0x400200a0
 8103f20:	400200b8 	.word	0x400200b8
 8103f24:	40020410 	.word	0x40020410
 8103f28:	40020428 	.word	0x40020428
 8103f2c:	40020440 	.word	0x40020440
 8103f30:	40020458 	.word	0x40020458
 8103f34:	40020470 	.word	0x40020470
 8103f38:	40020488 	.word	0x40020488
 8103f3c:	400204a0 	.word	0x400204a0
 8103f40:	400204b8 	.word	0x400204b8
 8103f44:	58025408 	.word	0x58025408
 8103f48:	5802541c 	.word	0x5802541c
 8103f4c:	58025430 	.word	0x58025430
 8103f50:	58025444 	.word	0x58025444
 8103f54:	58025458 	.word	0x58025458
 8103f58:	5802546c 	.word	0x5802546c
 8103f5c:	58025480 	.word	0x58025480
 8103f60:	58025494 	.word	0x58025494

08103f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103f64:	b580      	push	{r7, lr}
 8103f66:	b084      	sub	sp, #16
 8103f68:	af00      	add	r7, sp, #0
 8103f6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d101      	bne.n	8103f76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103f72:	2301      	movs	r3, #1
 8103f74:	e237      	b.n	81043e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103f7c:	b2db      	uxtb	r3, r3
 8103f7e:	2b02      	cmp	r3, #2
 8103f80:	d004      	beq.n	8103f8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	2280      	movs	r2, #128	@ 0x80
 8103f86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8103f88:	2301      	movs	r3, #1
 8103f8a:	e22c      	b.n	81043e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a5c      	ldr	r2, [pc, #368]	@ (8104104 <HAL_DMA_Abort_IT+0x1a0>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d04a      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8104108 <HAL_DMA_Abort_IT+0x1a4>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d045      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	4a59      	ldr	r2, [pc, #356]	@ (810410c <HAL_DMA_Abort_IT+0x1a8>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d040      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	4a58      	ldr	r2, [pc, #352]	@ (8104110 <HAL_DMA_Abort_IT+0x1ac>)
 8103fb0:	4293      	cmp	r3, r2
 8103fb2:	d03b      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	4a56      	ldr	r2, [pc, #344]	@ (8104114 <HAL_DMA_Abort_IT+0x1b0>)
 8103fba:	4293      	cmp	r3, r2
 8103fbc:	d036      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	4a55      	ldr	r2, [pc, #340]	@ (8104118 <HAL_DMA_Abort_IT+0x1b4>)
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d031      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	4a53      	ldr	r2, [pc, #332]	@ (810411c <HAL_DMA_Abort_IT+0x1b8>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d02c      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	4a52      	ldr	r2, [pc, #328]	@ (8104120 <HAL_DMA_Abort_IT+0x1bc>)
 8103fd8:	4293      	cmp	r3, r2
 8103fda:	d027      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	4a50      	ldr	r2, [pc, #320]	@ (8104124 <HAL_DMA_Abort_IT+0x1c0>)
 8103fe2:	4293      	cmp	r3, r2
 8103fe4:	d022      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	4a4f      	ldr	r2, [pc, #316]	@ (8104128 <HAL_DMA_Abort_IT+0x1c4>)
 8103fec:	4293      	cmp	r3, r2
 8103fee:	d01d      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	681b      	ldr	r3, [r3, #0]
 8103ff4:	4a4d      	ldr	r2, [pc, #308]	@ (810412c <HAL_DMA_Abort_IT+0x1c8>)
 8103ff6:	4293      	cmp	r3, r2
 8103ff8:	d018      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8104130 <HAL_DMA_Abort_IT+0x1cc>)
 8104000:	4293      	cmp	r3, r2
 8104002:	d013      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	4a4a      	ldr	r2, [pc, #296]	@ (8104134 <HAL_DMA_Abort_IT+0x1d0>)
 810400a:	4293      	cmp	r3, r2
 810400c:	d00e      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 810400e:	687b      	ldr	r3, [r7, #4]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	4a49      	ldr	r2, [pc, #292]	@ (8104138 <HAL_DMA_Abort_IT+0x1d4>)
 8104014:	4293      	cmp	r3, r2
 8104016:	d009      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	4a47      	ldr	r2, [pc, #284]	@ (810413c <HAL_DMA_Abort_IT+0x1d8>)
 810401e:	4293      	cmp	r3, r2
 8104020:	d004      	beq.n	810402c <HAL_DMA_Abort_IT+0xc8>
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	4a46      	ldr	r2, [pc, #280]	@ (8104140 <HAL_DMA_Abort_IT+0x1dc>)
 8104028:	4293      	cmp	r3, r2
 810402a:	d101      	bne.n	8104030 <HAL_DMA_Abort_IT+0xcc>
 810402c:	2301      	movs	r3, #1
 810402e:	e000      	b.n	8104032 <HAL_DMA_Abort_IT+0xce>
 8104030:	2300      	movs	r3, #0
 8104032:	2b00      	cmp	r3, #0
 8104034:	f000 8086 	beq.w	8104144 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	2204      	movs	r2, #4
 810403c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	4a2f      	ldr	r2, [pc, #188]	@ (8104104 <HAL_DMA_Abort_IT+0x1a0>)
 8104046:	4293      	cmp	r3, r2
 8104048:	d04a      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	4a2e      	ldr	r2, [pc, #184]	@ (8104108 <HAL_DMA_Abort_IT+0x1a4>)
 8104050:	4293      	cmp	r3, r2
 8104052:	d045      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	4a2c      	ldr	r2, [pc, #176]	@ (810410c <HAL_DMA_Abort_IT+0x1a8>)
 810405a:	4293      	cmp	r3, r2
 810405c:	d040      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	4a2b      	ldr	r2, [pc, #172]	@ (8104110 <HAL_DMA_Abort_IT+0x1ac>)
 8104064:	4293      	cmp	r3, r2
 8104066:	d03b      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	681b      	ldr	r3, [r3, #0]
 810406c:	4a29      	ldr	r2, [pc, #164]	@ (8104114 <HAL_DMA_Abort_IT+0x1b0>)
 810406e:	4293      	cmp	r3, r2
 8104070:	d036      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	4a28      	ldr	r2, [pc, #160]	@ (8104118 <HAL_DMA_Abort_IT+0x1b4>)
 8104078:	4293      	cmp	r3, r2
 810407a:	d031      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	681b      	ldr	r3, [r3, #0]
 8104080:	4a26      	ldr	r2, [pc, #152]	@ (810411c <HAL_DMA_Abort_IT+0x1b8>)
 8104082:	4293      	cmp	r3, r2
 8104084:	d02c      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	4a25      	ldr	r2, [pc, #148]	@ (8104120 <HAL_DMA_Abort_IT+0x1bc>)
 810408c:	4293      	cmp	r3, r2
 810408e:	d027      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	4a23      	ldr	r2, [pc, #140]	@ (8104124 <HAL_DMA_Abort_IT+0x1c0>)
 8104096:	4293      	cmp	r3, r2
 8104098:	d022      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4a22      	ldr	r2, [pc, #136]	@ (8104128 <HAL_DMA_Abort_IT+0x1c4>)
 81040a0:	4293      	cmp	r3, r2
 81040a2:	d01d      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	4a20      	ldr	r2, [pc, #128]	@ (810412c <HAL_DMA_Abort_IT+0x1c8>)
 81040aa:	4293      	cmp	r3, r2
 81040ac:	d018      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	4a1f      	ldr	r2, [pc, #124]	@ (8104130 <HAL_DMA_Abort_IT+0x1cc>)
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d013      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8104134 <HAL_DMA_Abort_IT+0x1d0>)
 81040be:	4293      	cmp	r3, r2
 81040c0:	d00e      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	4a1c      	ldr	r2, [pc, #112]	@ (8104138 <HAL_DMA_Abort_IT+0x1d4>)
 81040c8:	4293      	cmp	r3, r2
 81040ca:	d009      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	4a1a      	ldr	r2, [pc, #104]	@ (810413c <HAL_DMA_Abort_IT+0x1d8>)
 81040d2:	4293      	cmp	r3, r2
 81040d4:	d004      	beq.n	81040e0 <HAL_DMA_Abort_IT+0x17c>
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	4a19      	ldr	r2, [pc, #100]	@ (8104140 <HAL_DMA_Abort_IT+0x1dc>)
 81040dc:	4293      	cmp	r3, r2
 81040de:	d108      	bne.n	81040f2 <HAL_DMA_Abort_IT+0x18e>
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	681a      	ldr	r2, [r3, #0]
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	f022 0201 	bic.w	r2, r2, #1
 81040ee:	601a      	str	r2, [r3, #0]
 81040f0:	e178      	b.n	81043e4 <HAL_DMA_Abort_IT+0x480>
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	681a      	ldr	r2, [r3, #0]
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	f022 0201 	bic.w	r2, r2, #1
 8104100:	601a      	str	r2, [r3, #0]
 8104102:	e16f      	b.n	81043e4 <HAL_DMA_Abort_IT+0x480>
 8104104:	40020010 	.word	0x40020010
 8104108:	40020028 	.word	0x40020028
 810410c:	40020040 	.word	0x40020040
 8104110:	40020058 	.word	0x40020058
 8104114:	40020070 	.word	0x40020070
 8104118:	40020088 	.word	0x40020088
 810411c:	400200a0 	.word	0x400200a0
 8104120:	400200b8 	.word	0x400200b8
 8104124:	40020410 	.word	0x40020410
 8104128:	40020428 	.word	0x40020428
 810412c:	40020440 	.word	0x40020440
 8104130:	40020458 	.word	0x40020458
 8104134:	40020470 	.word	0x40020470
 8104138:	40020488 	.word	0x40020488
 810413c:	400204a0 	.word	0x400204a0
 8104140:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	681a      	ldr	r2, [r3, #0]
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	f022 020e 	bic.w	r2, r2, #14
 8104152:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	4a6c      	ldr	r2, [pc, #432]	@ (810430c <HAL_DMA_Abort_IT+0x3a8>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d04a      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a6b      	ldr	r2, [pc, #428]	@ (8104310 <HAL_DMA_Abort_IT+0x3ac>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d045      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a69      	ldr	r2, [pc, #420]	@ (8104314 <HAL_DMA_Abort_IT+0x3b0>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d040      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a68      	ldr	r2, [pc, #416]	@ (8104318 <HAL_DMA_Abort_IT+0x3b4>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d03b      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a66      	ldr	r2, [pc, #408]	@ (810431c <HAL_DMA_Abort_IT+0x3b8>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d036      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a65      	ldr	r2, [pc, #404]	@ (8104320 <HAL_DMA_Abort_IT+0x3bc>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d031      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a63      	ldr	r2, [pc, #396]	@ (8104324 <HAL_DMA_Abort_IT+0x3c0>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d02c      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a62      	ldr	r2, [pc, #392]	@ (8104328 <HAL_DMA_Abort_IT+0x3c4>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d027      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a60      	ldr	r2, [pc, #384]	@ (810432c <HAL_DMA_Abort_IT+0x3c8>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d022      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a5f      	ldr	r2, [pc, #380]	@ (8104330 <HAL_DMA_Abort_IT+0x3cc>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d01d      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	4a5d      	ldr	r2, [pc, #372]	@ (8104334 <HAL_DMA_Abort_IT+0x3d0>)
 81041be:	4293      	cmp	r3, r2
 81041c0:	d018      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a5c      	ldr	r2, [pc, #368]	@ (8104338 <HAL_DMA_Abort_IT+0x3d4>)
 81041c8:	4293      	cmp	r3, r2
 81041ca:	d013      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a5a      	ldr	r2, [pc, #360]	@ (810433c <HAL_DMA_Abort_IT+0x3d8>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d00e      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	4a59      	ldr	r2, [pc, #356]	@ (8104340 <HAL_DMA_Abort_IT+0x3dc>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d009      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a57      	ldr	r2, [pc, #348]	@ (8104344 <HAL_DMA_Abort_IT+0x3e0>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d004      	beq.n	81041f4 <HAL_DMA_Abort_IT+0x290>
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a56      	ldr	r2, [pc, #344]	@ (8104348 <HAL_DMA_Abort_IT+0x3e4>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d108      	bne.n	8104206 <HAL_DMA_Abort_IT+0x2a2>
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	681a      	ldr	r2, [r3, #0]
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	f022 0201 	bic.w	r2, r2, #1
 8104202:	601a      	str	r2, [r3, #0]
 8104204:	e007      	b.n	8104216 <HAL_DMA_Abort_IT+0x2b2>
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	681a      	ldr	r2, [r3, #0]
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f022 0201 	bic.w	r2, r2, #1
 8104214:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	4a3c      	ldr	r2, [pc, #240]	@ (810430c <HAL_DMA_Abort_IT+0x3a8>)
 810421c:	4293      	cmp	r3, r2
 810421e:	d072      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	4a3a      	ldr	r2, [pc, #232]	@ (8104310 <HAL_DMA_Abort_IT+0x3ac>)
 8104226:	4293      	cmp	r3, r2
 8104228:	d06d      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	4a39      	ldr	r2, [pc, #228]	@ (8104314 <HAL_DMA_Abort_IT+0x3b0>)
 8104230:	4293      	cmp	r3, r2
 8104232:	d068      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	4a37      	ldr	r2, [pc, #220]	@ (8104318 <HAL_DMA_Abort_IT+0x3b4>)
 810423a:	4293      	cmp	r3, r2
 810423c:	d063      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	4a36      	ldr	r2, [pc, #216]	@ (810431c <HAL_DMA_Abort_IT+0x3b8>)
 8104244:	4293      	cmp	r3, r2
 8104246:	d05e      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	4a34      	ldr	r2, [pc, #208]	@ (8104320 <HAL_DMA_Abort_IT+0x3bc>)
 810424e:	4293      	cmp	r3, r2
 8104250:	d059      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4a33      	ldr	r2, [pc, #204]	@ (8104324 <HAL_DMA_Abort_IT+0x3c0>)
 8104258:	4293      	cmp	r3, r2
 810425a:	d054      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	4a31      	ldr	r2, [pc, #196]	@ (8104328 <HAL_DMA_Abort_IT+0x3c4>)
 8104262:	4293      	cmp	r3, r2
 8104264:	d04f      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	4a30      	ldr	r2, [pc, #192]	@ (810432c <HAL_DMA_Abort_IT+0x3c8>)
 810426c:	4293      	cmp	r3, r2
 810426e:	d04a      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	4a2e      	ldr	r2, [pc, #184]	@ (8104330 <HAL_DMA_Abort_IT+0x3cc>)
 8104276:	4293      	cmp	r3, r2
 8104278:	d045      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	4a2d      	ldr	r2, [pc, #180]	@ (8104334 <HAL_DMA_Abort_IT+0x3d0>)
 8104280:	4293      	cmp	r3, r2
 8104282:	d040      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	4a2b      	ldr	r2, [pc, #172]	@ (8104338 <HAL_DMA_Abort_IT+0x3d4>)
 810428a:	4293      	cmp	r3, r2
 810428c:	d03b      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	681b      	ldr	r3, [r3, #0]
 8104292:	4a2a      	ldr	r2, [pc, #168]	@ (810433c <HAL_DMA_Abort_IT+0x3d8>)
 8104294:	4293      	cmp	r3, r2
 8104296:	d036      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	4a28      	ldr	r2, [pc, #160]	@ (8104340 <HAL_DMA_Abort_IT+0x3dc>)
 810429e:	4293      	cmp	r3, r2
 81042a0:	d031      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	4a27      	ldr	r2, [pc, #156]	@ (8104344 <HAL_DMA_Abort_IT+0x3e0>)
 81042a8:	4293      	cmp	r3, r2
 81042aa:	d02c      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	4a25      	ldr	r2, [pc, #148]	@ (8104348 <HAL_DMA_Abort_IT+0x3e4>)
 81042b2:	4293      	cmp	r3, r2
 81042b4:	d027      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	4a24      	ldr	r2, [pc, #144]	@ (810434c <HAL_DMA_Abort_IT+0x3e8>)
 81042bc:	4293      	cmp	r3, r2
 81042be:	d022      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	4a22      	ldr	r2, [pc, #136]	@ (8104350 <HAL_DMA_Abort_IT+0x3ec>)
 81042c6:	4293      	cmp	r3, r2
 81042c8:	d01d      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	4a21      	ldr	r2, [pc, #132]	@ (8104354 <HAL_DMA_Abort_IT+0x3f0>)
 81042d0:	4293      	cmp	r3, r2
 81042d2:	d018      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	4a1f      	ldr	r2, [pc, #124]	@ (8104358 <HAL_DMA_Abort_IT+0x3f4>)
 81042da:	4293      	cmp	r3, r2
 81042dc:	d013      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	4a1e      	ldr	r2, [pc, #120]	@ (810435c <HAL_DMA_Abort_IT+0x3f8>)
 81042e4:	4293      	cmp	r3, r2
 81042e6:	d00e      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	4a1c      	ldr	r2, [pc, #112]	@ (8104360 <HAL_DMA_Abort_IT+0x3fc>)
 81042ee:	4293      	cmp	r3, r2
 81042f0:	d009      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8104364 <HAL_DMA_Abort_IT+0x400>)
 81042f8:	4293      	cmp	r3, r2
 81042fa:	d004      	beq.n	8104306 <HAL_DMA_Abort_IT+0x3a2>
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	4a19      	ldr	r2, [pc, #100]	@ (8104368 <HAL_DMA_Abort_IT+0x404>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d132      	bne.n	810436c <HAL_DMA_Abort_IT+0x408>
 8104306:	2301      	movs	r3, #1
 8104308:	e031      	b.n	810436e <HAL_DMA_Abort_IT+0x40a>
 810430a:	bf00      	nop
 810430c:	40020010 	.word	0x40020010
 8104310:	40020028 	.word	0x40020028
 8104314:	40020040 	.word	0x40020040
 8104318:	40020058 	.word	0x40020058
 810431c:	40020070 	.word	0x40020070
 8104320:	40020088 	.word	0x40020088
 8104324:	400200a0 	.word	0x400200a0
 8104328:	400200b8 	.word	0x400200b8
 810432c:	40020410 	.word	0x40020410
 8104330:	40020428 	.word	0x40020428
 8104334:	40020440 	.word	0x40020440
 8104338:	40020458 	.word	0x40020458
 810433c:	40020470 	.word	0x40020470
 8104340:	40020488 	.word	0x40020488
 8104344:	400204a0 	.word	0x400204a0
 8104348:	400204b8 	.word	0x400204b8
 810434c:	58025408 	.word	0x58025408
 8104350:	5802541c 	.word	0x5802541c
 8104354:	58025430 	.word	0x58025430
 8104358:	58025444 	.word	0x58025444
 810435c:	58025458 	.word	0x58025458
 8104360:	5802546c 	.word	0x5802546c
 8104364:	58025480 	.word	0x58025480
 8104368:	58025494 	.word	0x58025494
 810436c:	2300      	movs	r3, #0
 810436e:	2b00      	cmp	r3, #0
 8104370:	d028      	beq.n	81043c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104376:	681a      	ldr	r2, [r3, #0]
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810437c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104380:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104386:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810438c:	f003 031f 	and.w	r3, r3, #31
 8104390:	2201      	movs	r2, #1
 8104392:	409a      	lsls	r2, r3
 8104394:	68fb      	ldr	r3, [r7, #12]
 8104396:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810439c:	687a      	ldr	r2, [r7, #4]
 810439e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 81043a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81043a6:	2b00      	cmp	r3, #0
 81043a8:	d00c      	beq.n	81043c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81043ae:	681a      	ldr	r2, [r3, #0]
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81043b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81043b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81043be:	687a      	ldr	r2, [r7, #4]
 81043c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81043c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	2201      	movs	r2, #1
 81043c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	2200      	movs	r2, #0
 81043d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81043d8:	2b00      	cmp	r3, #0
 81043da:	d003      	beq.n	81043e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81043e0:	6878      	ldr	r0, [r7, #4]
 81043e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81043e4:	2300      	movs	r3, #0
}
 81043e6:	4618      	mov	r0, r3
 81043e8:	3710      	adds	r7, #16
 81043ea:	46bd      	mov	sp, r7
 81043ec:	bd80      	pop	{r7, pc}
 81043ee:	bf00      	nop

081043f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 81043f0:	b580      	push	{r7, lr}
 81043f2:	b098      	sub	sp, #96	@ 0x60
 81043f4:	af00      	add	r7, sp, #0
 81043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 81043f8:	4a84      	ldr	r2, [pc, #528]	@ (810460c <HAL_FDCAN_Init+0x21c>)
 81043fa:	f107 030c 	add.w	r3, r7, #12
 81043fe:	4611      	mov	r1, r2
 8104400:	224c      	movs	r2, #76	@ 0x4c
 8104402:	4618      	mov	r0, r3
 8104404:	f00e fca7 	bl	8112d56 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	2b00      	cmp	r3, #0
 810440c:	d101      	bne.n	8104412 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 810440e:	2301      	movs	r3, #1
 8104410:	e1c6      	b.n	81047a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a7e      	ldr	r2, [pc, #504]	@ (8104610 <HAL_FDCAN_Init+0x220>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d106      	bne.n	810442a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8104424:	461a      	mov	r2, r3
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104430:	b2db      	uxtb	r3, r3
 8104432:	2b00      	cmp	r3, #0
 8104434:	d106      	bne.n	8104444 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	2200      	movs	r2, #0
 810443a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 810443e:	6878      	ldr	r0, [r7, #4]
 8104440:	f7fd fdd8 	bl	8101ff4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	699a      	ldr	r2, [r3, #24]
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	f022 0210 	bic.w	r2, r2, #16
 8104452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104454:	f7fe f8be 	bl	81025d4 <HAL_GetTick>
 8104458:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 810445a:	e014      	b.n	8104486 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 810445c:	f7fe f8ba 	bl	81025d4 <HAL_GetTick>
 8104460:	4602      	mov	r2, r0
 8104462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104464:	1ad3      	subs	r3, r2, r3
 8104466:	2b0a      	cmp	r3, #10
 8104468:	d90d      	bls.n	8104486 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104470:	f043 0201 	orr.w	r2, r3, #1
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	2203      	movs	r2, #3
 810447e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8104482:	2301      	movs	r3, #1
 8104484:	e18c      	b.n	81047a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	699b      	ldr	r3, [r3, #24]
 810448c:	f003 0308 	and.w	r3, r3, #8
 8104490:	2b08      	cmp	r3, #8
 8104492:	d0e3      	beq.n	810445c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	699a      	ldr	r2, [r3, #24]
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	f042 0201 	orr.w	r2, r2, #1
 81044a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81044a4:	f7fe f896 	bl	81025d4 <HAL_GetTick>
 81044a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81044aa:	e014      	b.n	81044d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81044ac:	f7fe f892 	bl	81025d4 <HAL_GetTick>
 81044b0:	4602      	mov	r2, r0
 81044b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81044b4:	1ad3      	subs	r3, r2, r3
 81044b6:	2b0a      	cmp	r3, #10
 81044b8:	d90d      	bls.n	81044d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81044c0:	f043 0201 	orr.w	r2, r3, #1
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	2203      	movs	r2, #3
 81044ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 81044d2:	2301      	movs	r3, #1
 81044d4:	e164      	b.n	81047a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	699b      	ldr	r3, [r3, #24]
 81044dc:	f003 0301 	and.w	r3, r3, #1
 81044e0:	2b00      	cmp	r3, #0
 81044e2:	d0e3      	beq.n	81044ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	699a      	ldr	r2, [r3, #24]
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	f042 0202 	orr.w	r2, r2, #2
 81044f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	7c1b      	ldrb	r3, [r3, #16]
 81044f8:	2b01      	cmp	r3, #1
 81044fa:	d108      	bne.n	810450e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	699a      	ldr	r2, [r3, #24]
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 810450a:	619a      	str	r2, [r3, #24]
 810450c:	e007      	b.n	810451e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	699a      	ldr	r2, [r3, #24]
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810451c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	7c5b      	ldrb	r3, [r3, #17]
 8104522:	2b01      	cmp	r3, #1
 8104524:	d108      	bne.n	8104538 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	699a      	ldr	r2, [r3, #24]
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8104534:	619a      	str	r2, [r3, #24]
 8104536:	e007      	b.n	8104548 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	699a      	ldr	r2, [r3, #24]
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8104546:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	7c9b      	ldrb	r3, [r3, #18]
 810454c:	2b01      	cmp	r3, #1
 810454e:	d108      	bne.n	8104562 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	699a      	ldr	r2, [r3, #24]
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810455e:	619a      	str	r2, [r3, #24]
 8104560:	e007      	b.n	8104572 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	681b      	ldr	r3, [r3, #0]
 8104566:	699a      	ldr	r2, [r3, #24]
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104570:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	699b      	ldr	r3, [r3, #24]
 8104578:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	689a      	ldr	r2, [r3, #8]
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	430a      	orrs	r2, r1
 8104586:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	699a      	ldr	r2, [r3, #24]
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	681b      	ldr	r3, [r3, #0]
 8104592:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8104596:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	691a      	ldr	r2, [r3, #16]
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	f022 0210 	bic.w	r2, r2, #16
 81045a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	68db      	ldr	r3, [r3, #12]
 81045ac:	2b01      	cmp	r3, #1
 81045ae:	d108      	bne.n	81045c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	699a      	ldr	r2, [r3, #24]
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	f042 0204 	orr.w	r2, r2, #4
 81045be:	619a      	str	r2, [r3, #24]
 81045c0:	e030      	b.n	8104624 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	68db      	ldr	r3, [r3, #12]
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	d02c      	beq.n	8104624 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	68db      	ldr	r3, [r3, #12]
 81045ce:	2b02      	cmp	r3, #2
 81045d0:	d020      	beq.n	8104614 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	699a      	ldr	r2, [r3, #24]
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 81045e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	691a      	ldr	r2, [r3, #16]
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	f042 0210 	orr.w	r2, r2, #16
 81045f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	68db      	ldr	r3, [r3, #12]
 81045f6:	2b03      	cmp	r3, #3
 81045f8:	d114      	bne.n	8104624 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	699a      	ldr	r2, [r3, #24]
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	f042 0220 	orr.w	r2, r2, #32
 8104608:	619a      	str	r2, [r3, #24]
 810460a:	e00b      	b.n	8104624 <HAL_FDCAN_Init+0x234>
 810460c:	08117158 	.word	0x08117158
 8104610:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	699a      	ldr	r2, [r3, #24]
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	f042 0220 	orr.w	r2, r2, #32
 8104622:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	699b      	ldr	r3, [r3, #24]
 8104628:	3b01      	subs	r3, #1
 810462a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	69db      	ldr	r3, [r3, #28]
 8104630:	3b01      	subs	r3, #1
 8104632:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104634:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	6a1b      	ldr	r3, [r3, #32]
 810463a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 810463c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	695b      	ldr	r3, [r3, #20]
 8104644:	3b01      	subs	r3, #1
 8104646:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810464c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810464e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	689b      	ldr	r3, [r3, #8]
 8104654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104658:	d115      	bne.n	8104686 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810465e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104664:	3b01      	subs	r3, #1
 8104666:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104668:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810466e:	3b01      	subs	r3, #1
 8104670:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8104672:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810467a:	3b01      	subs	r3, #1
 810467c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8104682:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104684:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810468a:	2b00      	cmp	r3, #0
 810468c:	d00a      	beq.n	81046a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	430a      	orrs	r2, r1
 81046a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81046ac:	4413      	add	r3, r2
 81046ae:	2b00      	cmp	r3, #0
 81046b0:	d011      	beq.n	81046d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 81046ba:	f023 0107 	bic.w	r1, r3, #7
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81046c2:	009b      	lsls	r3, r3, #2
 81046c4:	3360      	adds	r3, #96	@ 0x60
 81046c6:	443b      	add	r3, r7
 81046c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	430a      	orrs	r2, r1
 81046d2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d011      	beq.n	8104702 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81046e6:	f023 0107 	bic.w	r1, r3, #7
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81046ee:	009b      	lsls	r3, r3, #2
 81046f0:	3360      	adds	r3, #96	@ 0x60
 81046f2:	443b      	add	r3, r7
 81046f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	681b      	ldr	r3, [r3, #0]
 81046fc:	430a      	orrs	r2, r1
 81046fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104706:	2b00      	cmp	r3, #0
 8104708:	d012      	beq.n	8104730 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104712:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810471a:	009b      	lsls	r3, r3, #2
 810471c:	3360      	adds	r3, #96	@ 0x60
 810471e:	443b      	add	r3, r7
 8104720:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104724:	011a      	lsls	r2, r3, #4
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	430a      	orrs	r2, r1
 810472c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104734:	2b00      	cmp	r3, #0
 8104736:	d012      	beq.n	810475e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104740:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104748:	009b      	lsls	r3, r3, #2
 810474a:	3360      	adds	r3, #96	@ 0x60
 810474c:	443b      	add	r3, r7
 810474e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104752:	021a      	lsls	r2, r3, #8
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	430a      	orrs	r2, r1
 810475a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	4a11      	ldr	r2, [pc, #68]	@ (81047a8 <HAL_FDCAN_Init+0x3b8>)
 8104764:	4293      	cmp	r3, r2
 8104766:	d107      	bne.n	8104778 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	685b      	ldr	r3, [r3, #4]
 810476c:	689a      	ldr	r2, [r3, #8]
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	685b      	ldr	r3, [r3, #4]
 8104772:	f022 0203 	bic.w	r2, r2, #3
 8104776:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	2200      	movs	r2, #0
 810477c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	2200      	movs	r2, #0
 8104784:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	2201      	movs	r2, #1
 810478c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8104790:	6878      	ldr	r0, [r7, #4]
 8104792:	f000 fe3d 	bl	8105410 <FDCAN_CalcultateRamBlockAddresses>
 8104796:	4603      	mov	r3, r0
 8104798:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 810479c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 81047a0:	4618      	mov	r0, r3
 81047a2:	3760      	adds	r7, #96	@ 0x60
 81047a4:	46bd      	mov	sp, r7
 81047a6:	bd80      	pop	{r7, pc}
 81047a8:	4000a000 	.word	0x4000a000

081047ac <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 81047ac:	b480      	push	{r7}
 81047ae:	b087      	sub	sp, #28
 81047b0:	af00      	add	r7, sp, #0
 81047b2:	6078      	str	r0, [r7, #4]
 81047b4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81047bc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 81047be:	7bfb      	ldrb	r3, [r7, #15]
 81047c0:	2b01      	cmp	r3, #1
 81047c2:	d002      	beq.n	81047ca <HAL_FDCAN_ConfigFilter+0x1e>
 81047c4:	7bfb      	ldrb	r3, [r7, #15]
 81047c6:	2b02      	cmp	r3, #2
 81047c8:	d157      	bne.n	810487a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 81047ca:	683b      	ldr	r3, [r7, #0]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	d12b      	bne.n	810482a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 81047d2:	683b      	ldr	r3, [r7, #0]
 81047d4:	68db      	ldr	r3, [r3, #12]
 81047d6:	2b07      	cmp	r3, #7
 81047d8:	d10d      	bne.n	81047f6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 81047da:	683b      	ldr	r3, [r7, #0]
 81047dc:	691b      	ldr	r3, [r3, #16]
 81047de:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 81047e0:	683b      	ldr	r3, [r7, #0]
 81047e2:	69db      	ldr	r3, [r3, #28]
 81047e4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 81047e6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 81047e8:	683b      	ldr	r3, [r7, #0]
 81047ea:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 81047ec:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 81047ee:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 81047f2:	617b      	str	r3, [r7, #20]
 81047f4:	e00e      	b.n	8104814 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 81047f6:	683b      	ldr	r3, [r7, #0]
 81047f8:	689b      	ldr	r3, [r3, #8]
 81047fa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 81047fc:	683b      	ldr	r3, [r7, #0]
 81047fe:	68db      	ldr	r3, [r3, #12]
 8104800:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8104802:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8104804:	683b      	ldr	r3, [r7, #0]
 8104806:	691b      	ldr	r3, [r3, #16]
 8104808:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 810480a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 810480c:	683b      	ldr	r3, [r7, #0]
 810480e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8104810:	4313      	orrs	r3, r2
 8104812:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104818:	683b      	ldr	r3, [r7, #0]
 810481a:	685b      	ldr	r3, [r3, #4]
 810481c:	009b      	lsls	r3, r3, #2
 810481e:	4413      	add	r3, r2
 8104820:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8104822:	68bb      	ldr	r3, [r7, #8]
 8104824:	697a      	ldr	r2, [r7, #20]
 8104826:	601a      	str	r2, [r3, #0]
 8104828:	e025      	b.n	8104876 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 810482a:	683b      	ldr	r3, [r7, #0]
 810482c:	68db      	ldr	r3, [r3, #12]
 810482e:	075a      	lsls	r2, r3, #29
 8104830:	683b      	ldr	r3, [r7, #0]
 8104832:	691b      	ldr	r3, [r3, #16]
 8104834:	4313      	orrs	r3, r2
 8104836:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8104838:	683b      	ldr	r3, [r7, #0]
 810483a:	68db      	ldr	r3, [r3, #12]
 810483c:	2b07      	cmp	r3, #7
 810483e:	d103      	bne.n	8104848 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8104840:	683b      	ldr	r3, [r7, #0]
 8104842:	699b      	ldr	r3, [r3, #24]
 8104844:	613b      	str	r3, [r7, #16]
 8104846:	e006      	b.n	8104856 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8104848:	683b      	ldr	r3, [r7, #0]
 810484a:	689b      	ldr	r3, [r3, #8]
 810484c:	079a      	lsls	r2, r3, #30
 810484e:	683b      	ldr	r3, [r7, #0]
 8104850:	695b      	ldr	r3, [r3, #20]
 8104852:	4313      	orrs	r3, r2
 8104854:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810485a:	683b      	ldr	r3, [r7, #0]
 810485c:	685b      	ldr	r3, [r3, #4]
 810485e:	00db      	lsls	r3, r3, #3
 8104860:	4413      	add	r3, r2
 8104862:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8104864:	68bb      	ldr	r3, [r7, #8]
 8104866:	697a      	ldr	r2, [r7, #20]
 8104868:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 810486a:	68bb      	ldr	r3, [r7, #8]
 810486c:	3304      	adds	r3, #4
 810486e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8104870:	68bb      	ldr	r3, [r7, #8]
 8104872:	693a      	ldr	r2, [r7, #16]
 8104874:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8104876:	2300      	movs	r3, #0
 8104878:	e008      	b.n	810488c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104880:	f043 0202 	orr.w	r2, r3, #2
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 810488a:	2301      	movs	r3, #1
  }
}
 810488c:	4618      	mov	r0, r3
 810488e:	371c      	adds	r7, #28
 8104890:	46bd      	mov	sp, r7
 8104892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104896:	4770      	bx	lr

08104898 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8104898:	b480      	push	{r7}
 810489a:	b083      	sub	sp, #12
 810489c:	af00      	add	r7, sp, #0
 810489e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81048a6:	b2db      	uxtb	r3, r3
 81048a8:	2b01      	cmp	r3, #1
 81048aa:	d111      	bne.n	81048d0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	2202      	movs	r2, #2
 81048b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	699a      	ldr	r2, [r3, #24]
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	f022 0201 	bic.w	r2, r2, #1
 81048c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	2200      	movs	r2, #0
 81048c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 81048cc:	2300      	movs	r3, #0
 81048ce:	e008      	b.n	81048e2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81048d6:	f043 0204 	orr.w	r2, r3, #4
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 81048e0:	2301      	movs	r3, #1
  }
}
 81048e2:	4618      	mov	r0, r3
 81048e4:	370c      	adds	r7, #12
 81048e6:	46bd      	mov	sp, r7
 81048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048ec:	4770      	bx	lr

081048ee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 81048ee:	b580      	push	{r7, lr}
 81048f0:	b086      	sub	sp, #24
 81048f2:	af00      	add	r7, sp, #0
 81048f4:	60f8      	str	r0, [r7, #12]
 81048f6:	60b9      	str	r1, [r7, #8]
 81048f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 81048fa:	68fb      	ldr	r3, [r7, #12]
 81048fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104900:	b2db      	uxtb	r3, r3
 8104902:	2b02      	cmp	r3, #2
 8104904:	d141      	bne.n	810498a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8104906:	68fb      	ldr	r3, [r7, #12]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810490e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8104912:	2b00      	cmp	r3, #0
 8104914:	d109      	bne.n	810492a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810491c:	f043 0220 	orr.w	r2, r3, #32
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8104926:	2301      	movs	r3, #1
 8104928:	e038      	b.n	810499c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 810492a:	68fb      	ldr	r3, [r7, #12]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8104932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104936:	2b00      	cmp	r3, #0
 8104938:	d009      	beq.n	810494e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 810493a:	68fb      	ldr	r3, [r7, #12]
 810493c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 810494a:	2301      	movs	r3, #1
 810494c:	e026      	b.n	810499c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 810494e:	68fb      	ldr	r3, [r7, #12]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8104956:	0c1b      	lsrs	r3, r3, #16
 8104958:	f003 031f 	and.w	r3, r3, #31
 810495c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 810495e:	697b      	ldr	r3, [r7, #20]
 8104960:	687a      	ldr	r2, [r7, #4]
 8104962:	68b9      	ldr	r1, [r7, #8]
 8104964:	68f8      	ldr	r0, [r7, #12]
 8104966:	f000 fee3 	bl	8105730 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 810496a:	68fb      	ldr	r3, [r7, #12]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	2101      	movs	r1, #1
 8104970:	697a      	ldr	r2, [r7, #20]
 8104972:	fa01 f202 	lsl.w	r2, r1, r2
 8104976:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 810497a:	2201      	movs	r2, #1
 810497c:	697b      	ldr	r3, [r7, #20]
 810497e:	409a      	lsls	r2, r3
 8104980:	68fb      	ldr	r3, [r7, #12]
 8104982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8104986:	2300      	movs	r3, #0
 8104988:	e008      	b.n	810499c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104990:	f043 0208 	orr.w	r2, r3, #8
 8104994:	68fb      	ldr	r3, [r7, #12]
 8104996:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 810499a:	2301      	movs	r3, #1
  }
}
 810499c:	4618      	mov	r0, r3
 810499e:	3718      	adds	r7, #24
 81049a0:	46bd      	mov	sp, r7
 81049a2:	bd80      	pop	{r7, pc}

081049a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 81049a4:	b480      	push	{r7}
 81049a6:	b08b      	sub	sp, #44	@ 0x2c
 81049a8:	af00      	add	r7, sp, #0
 81049aa:	60f8      	str	r0, [r7, #12]
 81049ac:	60b9      	str	r1, [r7, #8]
 81049ae:	607a      	str	r2, [r7, #4]
 81049b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 81049b2:	2300      	movs	r3, #0
 81049b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81049bc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 81049be:	7efb      	ldrb	r3, [r7, #27]
 81049c0:	2b02      	cmp	r3, #2
 81049c2:	f040 8149 	bne.w	8104c58 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 81049c6:	68bb      	ldr	r3, [r7, #8]
 81049c8:	2b40      	cmp	r3, #64	@ 0x40
 81049ca:	d14c      	bne.n	8104a66 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 81049cc:	68fb      	ldr	r3, [r7, #12]
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81049d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81049d8:	2b00      	cmp	r3, #0
 81049da:	d109      	bne.n	81049f0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81049e2:	f043 0220 	orr.w	r2, r3, #32
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 81049ec:	2301      	movs	r3, #1
 81049ee:	e13c      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81049f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81049fc:	2b00      	cmp	r3, #0
 81049fe:	d109      	bne.n	8104a14 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104a0a:	68fb      	ldr	r3, [r7, #12]
 8104a0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104a10:	2301      	movs	r3, #1
 8104a12:	e12a      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104a1c:	0e1b      	lsrs	r3, r3, #24
 8104a1e:	f003 0301 	and.w	r3, r3, #1
 8104a22:	2b01      	cmp	r3, #1
 8104a24:	d10a      	bne.n	8104a3c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8104a26:	68fb      	ldr	r3, [r7, #12]
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104a2e:	0fdb      	lsrs	r3, r3, #31
 8104a30:	f003 0301 	and.w	r3, r3, #1
 8104a34:	2b01      	cmp	r3, #1
 8104a36:	d101      	bne.n	8104a3c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8104a38:	2301      	movs	r3, #1
 8104a3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8104a3c:	68fb      	ldr	r3, [r7, #12]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104a44:	0a1b      	lsrs	r3, r3, #8
 8104a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104a4a:	69fa      	ldr	r2, [r7, #28]
 8104a4c:	4413      	add	r3, r2
 8104a4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104a58:	69f9      	ldr	r1, [r7, #28]
 8104a5a:	fb01 f303 	mul.w	r3, r1, r3
 8104a5e:	009b      	lsls	r3, r3, #2
 8104a60:	4413      	add	r3, r2
 8104a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8104a64:	e068      	b.n	8104b38 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8104a66:	68bb      	ldr	r3, [r7, #8]
 8104a68:	2b41      	cmp	r3, #65	@ 0x41
 8104a6a:	d14c      	bne.n	8104b06 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	681b      	ldr	r3, [r3, #0]
 8104a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104a74:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d109      	bne.n	8104a90 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104a7c:	68fb      	ldr	r3, [r7, #12]
 8104a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104a82:	f043 0220 	orr.w	r2, r3, #32
 8104a86:	68fb      	ldr	r3, [r7, #12]
 8104a88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104a8c:	2301      	movs	r3, #1
 8104a8e:	e0ec      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8104a90:	68fb      	ldr	r3, [r7, #12]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104a9c:	2b00      	cmp	r3, #0
 8104a9e:	d109      	bne.n	8104ab4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104aaa:	68fb      	ldr	r3, [r7, #12]
 8104aac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104ab0:	2301      	movs	r3, #1
 8104ab2:	e0da      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104abc:	0e1b      	lsrs	r3, r3, #24
 8104abe:	f003 0301 	and.w	r3, r3, #1
 8104ac2:	2b01      	cmp	r3, #1
 8104ac4:	d10a      	bne.n	8104adc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8104ac6:	68fb      	ldr	r3, [r7, #12]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104ace:	0fdb      	lsrs	r3, r3, #31
 8104ad0:	f003 0301 	and.w	r3, r3, #1
 8104ad4:	2b01      	cmp	r3, #1
 8104ad6:	d101      	bne.n	8104adc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8104ad8:	2301      	movs	r3, #1
 8104ada:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8104adc:	68fb      	ldr	r3, [r7, #12]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104ae4:	0a1b      	lsrs	r3, r3, #8
 8104ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104aea:	69fa      	ldr	r2, [r7, #28]
 8104aec:	4413      	add	r3, r2
 8104aee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104af8:	69f9      	ldr	r1, [r7, #28]
 8104afa:	fb01 f303 	mul.w	r3, r1, r3
 8104afe:	009b      	lsls	r3, r3, #2
 8104b00:	4413      	add	r3, r2
 8104b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8104b04:	e018      	b.n	8104b38 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104b0a:	68ba      	ldr	r2, [r7, #8]
 8104b0c:	429a      	cmp	r2, r3
 8104b0e:	d309      	bcc.n	8104b24 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104b16:	f043 0220 	orr.w	r2, r3, #32
 8104b1a:	68fb      	ldr	r3, [r7, #12]
 8104b1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104b20:	2301      	movs	r3, #1
 8104b22:	e0a2      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8104b28:	68fb      	ldr	r3, [r7, #12]
 8104b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b2c:	68b9      	ldr	r1, [r7, #8]
 8104b2e:	fb01 f303 	mul.w	r3, r1, r3
 8104b32:	009b      	lsls	r3, r3, #2
 8104b34:	4413      	add	r3, r2
 8104b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8104b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	685b      	ldr	r3, [r3, #4]
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d107      	bne.n	8104b5c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8104b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	0c9b      	lsrs	r3, r3, #18
 8104b52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	601a      	str	r2, [r3, #0]
 8104b5a:	e005      	b.n	8104b68 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8104b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8104b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8104b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8104b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b82:	3304      	adds	r3, #4
 8104b84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8104b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	b29a      	uxth	r2, r3
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8104b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	0c1b      	lsrs	r3, r3, #16
 8104b96:	f003 020f 	and.w	r2, r3, #15
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8104b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8104baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8104bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	0e1b      	lsrs	r3, r3, #24
 8104bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8104bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bc6:	681b      	ldr	r3, [r3, #0]
 8104bc8:	0fda      	lsrs	r2, r3, #31
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8104bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bd0:	3304      	adds	r3, #4
 8104bd2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8104bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bd6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8104bd8:	2300      	movs	r3, #0
 8104bda:	623b      	str	r3, [r7, #32]
 8104bdc:	e00a      	b.n	8104bf4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8104bde:	697a      	ldr	r2, [r7, #20]
 8104be0:	6a3b      	ldr	r3, [r7, #32]
 8104be2:	441a      	add	r2, r3
 8104be4:	6839      	ldr	r1, [r7, #0]
 8104be6:	6a3b      	ldr	r3, [r7, #32]
 8104be8:	440b      	add	r3, r1
 8104bea:	7812      	ldrb	r2, [r2, #0]
 8104bec:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8104bee:	6a3b      	ldr	r3, [r7, #32]
 8104bf0:	3301      	adds	r3, #1
 8104bf2:	623b      	str	r3, [r7, #32]
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	68db      	ldr	r3, [r3, #12]
 8104bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8104c78 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8104bfa:	5cd3      	ldrb	r3, [r2, r3]
 8104bfc:	461a      	mov	r2, r3
 8104bfe:	6a3b      	ldr	r3, [r7, #32]
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d3ec      	bcc.n	8104bde <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8104c04:	68bb      	ldr	r3, [r7, #8]
 8104c06:	2b40      	cmp	r3, #64	@ 0x40
 8104c08:	d105      	bne.n	8104c16 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	681b      	ldr	r3, [r3, #0]
 8104c0e:	69fa      	ldr	r2, [r7, #28]
 8104c10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8104c14:	e01e      	b.n	8104c54 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8104c16:	68bb      	ldr	r3, [r7, #8]
 8104c18:	2b41      	cmp	r3, #65	@ 0x41
 8104c1a:	d105      	bne.n	8104c28 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8104c1c:	68fb      	ldr	r3, [r7, #12]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	69fa      	ldr	r2, [r7, #28]
 8104c22:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8104c26:	e015      	b.n	8104c54 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8104c28:	68bb      	ldr	r3, [r7, #8]
 8104c2a:	2b1f      	cmp	r3, #31
 8104c2c:	d808      	bhi.n	8104c40 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	2101      	movs	r1, #1
 8104c34:	68ba      	ldr	r2, [r7, #8]
 8104c36:	fa01 f202 	lsl.w	r2, r1, r2
 8104c3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8104c3e:	e009      	b.n	8104c54 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8104c40:	68bb      	ldr	r3, [r7, #8]
 8104c42:	f003 021f 	and.w	r2, r3, #31
 8104c46:	68fb      	ldr	r3, [r7, #12]
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	2101      	movs	r1, #1
 8104c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8104c50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8104c54:	2300      	movs	r3, #0
 8104c56:	e008      	b.n	8104c6a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104c5e:	f043 0208 	orr.w	r2, r3, #8
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8104c68:	2301      	movs	r3, #1
  }
}
 8104c6a:	4618      	mov	r0, r3
 8104c6c:	372c      	adds	r7, #44	@ 0x2c
 8104c6e:	46bd      	mov	sp, r7
 8104c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c74:	4770      	bx	lr
 8104c76:	bf00      	nop
 8104c78:	08117470 	.word	0x08117470

08104c7c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8104c7c:	b480      	push	{r7}
 8104c7e:	b085      	sub	sp, #20
 8104c80:	af00      	add	r7, sp, #0
 8104c82:	6078      	str	r0, [r7, #4]
 8104c84:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104c8c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	f003 0207 	and.w	r2, r3, #7
 8104c94:	683b      	ldr	r3, [r7, #0]
 8104c96:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	0a1b      	lsrs	r3, r3, #8
 8104c9c:	f003 0207 	and.w	r2, r3, #7
 8104ca0:	683b      	ldr	r3, [r7, #0]
 8104ca2:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	f003 0218 	and.w	r2, r3, #24
 8104caa:	683b      	ldr	r3, [r7, #0]
 8104cac:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	095b      	lsrs	r3, r3, #5
 8104cb2:	f003 0201 	and.w	r2, r3, #1
 8104cb6:	683b      	ldr	r3, [r7, #0]
 8104cb8:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	099b      	lsrs	r3, r3, #6
 8104cbe:	f003 0201 	and.w	r2, r3, #1
 8104cc2:	683b      	ldr	r3, [r7, #0]
 8104cc4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8104cc6:	68fb      	ldr	r3, [r7, #12]
 8104cc8:	09db      	lsrs	r3, r3, #7
 8104cca:	f003 0201 	and.w	r2, r3, #1
 8104cce:	683b      	ldr	r3, [r7, #0]
 8104cd0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	0adb      	lsrs	r3, r3, #11
 8104cd6:	f003 0201 	and.w	r2, r3, #1
 8104cda:	683b      	ldr	r3, [r7, #0]
 8104cdc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	0b1b      	lsrs	r3, r3, #12
 8104ce2:	f003 0201 	and.w	r2, r3, #1
 8104ce6:	683b      	ldr	r3, [r7, #0]
 8104ce8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8104cea:	68fb      	ldr	r3, [r7, #12]
 8104cec:	0b5b      	lsrs	r3, r3, #13
 8104cee:	f003 0201 	and.w	r2, r3, #1
 8104cf2:	683b      	ldr	r3, [r7, #0]
 8104cf4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8104cf6:	68fb      	ldr	r3, [r7, #12]
 8104cf8:	0b9b      	lsrs	r3, r3, #14
 8104cfa:	f003 0201 	and.w	r2, r3, #1
 8104cfe:	683b      	ldr	r3, [r7, #0]
 8104d00:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	0c1b      	lsrs	r3, r3, #16
 8104d06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8104d0a:	683b      	ldr	r3, [r7, #0]
 8104d0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8104d0e:	2300      	movs	r3, #0
}
 8104d10:	4618      	mov	r0, r3
 8104d12:	3714      	adds	r7, #20
 8104d14:	46bd      	mov	sp, r7
 8104d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d1a:	4770      	bx	lr

08104d1c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8104d1c:	b480      	push	{r7}
 8104d1e:	b087      	sub	sp, #28
 8104d20:	af00      	add	r7, sp, #0
 8104d22:	60f8      	str	r0, [r7, #12]
 8104d24:	60b9      	str	r1, [r7, #8]
 8104d26:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104d2e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8104d30:	7dfb      	ldrb	r3, [r7, #23]
 8104d32:	2b01      	cmp	r3, #1
 8104d34:	d002      	beq.n	8104d3c <HAL_FDCAN_ActivateNotification+0x20>
 8104d36:	7dfb      	ldrb	r3, [r7, #23]
 8104d38:	2b02      	cmp	r3, #2
 8104d3a:	d157      	bne.n	8104dec <HAL_FDCAN_ActivateNotification+0xd0>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8104d3c:	68fb      	ldr	r3, [r7, #12]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104d42:	68bb      	ldr	r3, [r7, #8]
 8104d44:	4013      	ands	r3, r2
 8104d46:	2b00      	cmp	r3, #0
 8104d48:	d108      	bne.n	8104d5c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8104d4a:	68fb      	ldr	r3, [r7, #12]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	f042 0201 	orr.w	r2, r2, #1
 8104d58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8104d5a:	e014      	b.n	8104d86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8104d5c:	68fb      	ldr	r3, [r7, #12]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104d62:	68bb      	ldr	r3, [r7, #8]
 8104d64:	4013      	ands	r3, r2
 8104d66:	68ba      	ldr	r2, [r7, #8]
 8104d68:	429a      	cmp	r2, r3
 8104d6a:	d108      	bne.n	8104d7e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8104d6c:	68fb      	ldr	r3, [r7, #12]
 8104d6e:	681b      	ldr	r3, [r3, #0]
 8104d70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	f042 0202 	orr.w	r2, r2, #2
 8104d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8104d7c:	e003      	b.n	8104d86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8104d7e:	68fb      	ldr	r3, [r7, #12]
 8104d80:	681b      	ldr	r3, [r3, #0]
 8104d82:	2203      	movs	r2, #3
 8104d84:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8104d86:	68bb      	ldr	r3, [r7, #8]
 8104d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104d8c:	2b00      	cmp	r3, #0
 8104d8e:	d009      	beq.n	8104da4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8104d90:	68fb      	ldr	r3, [r7, #12]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8104d98:	68fb      	ldr	r3, [r7, #12]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	687a      	ldr	r2, [r7, #4]
 8104d9e:	430a      	orrs	r2, r1
 8104da0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8104da4:	68bb      	ldr	r3, [r7, #8]
 8104da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d009      	beq.n	8104dc2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8104db6:	68fb      	ldr	r3, [r7, #12]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	687a      	ldr	r2, [r7, #4]
 8104dbc:	430a      	orrs	r2, r1
 8104dbe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8104dc8:	68bb      	ldr	r3, [r7, #8]
 8104dca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8104dce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8104dd2:	68fa      	ldr	r2, [r7, #12]
 8104dd4:	6812      	ldr	r2, [r2, #0]
 8104dd6:	430b      	orrs	r3, r1
 8104dd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8104dda:	4b0c      	ldr	r3, [pc, #48]	@ (8104e0c <HAL_FDCAN_ActivateNotification+0xf0>)
 8104ddc:	695a      	ldr	r2, [r3, #20]
 8104dde:	68bb      	ldr	r3, [r7, #8]
 8104de0:	0f9b      	lsrs	r3, r3, #30
 8104de2:	490a      	ldr	r1, [pc, #40]	@ (8104e0c <HAL_FDCAN_ActivateNotification+0xf0>)
 8104de4:	4313      	orrs	r3, r2
 8104de6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8104de8:	2300      	movs	r3, #0
 8104dea:	e008      	b.n	8104dfe <HAL_FDCAN_ActivateNotification+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8104dec:	68fb      	ldr	r3, [r7, #12]
 8104dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104df2:	f043 0202 	orr.w	r2, r3, #2
 8104df6:	68fb      	ldr	r3, [r7, #12]
 8104df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8104dfc:	2301      	movs	r3, #1
  }
}
 8104dfe:	4618      	mov	r0, r3
 8104e00:	371c      	adds	r7, #28
 8104e02:	46bd      	mov	sp, r7
 8104e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e08:	4770      	bx	lr
 8104e0a:	bf00      	nop
 8104e0c:	4000a800 	.word	0x4000a800

08104e10 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8104e10:	b580      	push	{r7, lr}
 8104e12:	b096      	sub	sp, #88	@ 0x58
 8104e14:	af00      	add	r7, sp, #0
 8104e16:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8104e18:	4b99      	ldr	r3, [pc, #612]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104e1a:	691b      	ldr	r3, [r3, #16]
 8104e1c:	079b      	lsls	r3, r3, #30
 8104e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8104e20:	4b97      	ldr	r3, [pc, #604]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104e22:	695b      	ldr	r3, [r3, #20]
 8104e24:	079b      	lsls	r3, r3, #30
 8104e26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8104e28:	4013      	ands	r3, r2
 8104e2a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8104e36:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8104e40:	4013      	ands	r3, r2
 8104e42:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e4a:	f003 030f 	and.w	r3, r3, #15
 8104e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8104e58:	4013      	ands	r3, r2
 8104e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8104e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104e70:	4013      	ands	r3, r2
 8104e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e7a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8104e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	681b      	ldr	r3, [r3, #0]
 8104e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104e88:	4013      	ands	r3, r2
 8104e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e92:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8104e96:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104ea0:	4013      	ands	r3, r2
 8104ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104eb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8104eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104eba:	2b00      	cmp	r3, #0
 8104ebc:	d00f      	beq.n	8104ede <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8104ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104ec4:	2b00      	cmp	r3, #0
 8104ec6:	d00a      	beq.n	8104ede <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8104ed0:	651a      	str	r2, [r3, #80]	@ 0x50
 8104ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104ed4:	2200      	movs	r2, #0
 8104ed6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8104ed8:	6878      	ldr	r0, [r7, #4]
 8104eda:	f000 fa4c 	bl	8105376 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8104ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	d01c      	beq.n	8104f22 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8104ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d017      	beq.n	8104f22 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	681b      	ldr	r3, [r3, #0]
 8104ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8104efa:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8104f04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8104f06:	4013      	ands	r3, r2
 8104f08:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8104f12:	651a      	str	r2, [r3, #80]	@ 0x50
 8104f14:	4b5a      	ldr	r3, [pc, #360]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104f16:	2200      	movs	r2, #0
 8104f18:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8104f1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8104f1c:	6878      	ldr	r0, [r7, #4]
 8104f1e:	f000 fa01 	bl	8105324 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8104f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104f24:	2b00      	cmp	r3, #0
 8104f26:	d00f      	beq.n	8104f48 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681a      	ldr	r2, [r3, #0]
 8104f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104f2e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8104f32:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8104f36:	6513      	str	r3, [r2, #80]	@ 0x50
 8104f38:	4a51      	ldr	r2, [pc, #324]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104f3c:	0f9b      	lsrs	r3, r3, #30
 8104f3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8104f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8104f42:	6878      	ldr	r0, [r7, #4]
 8104f44:	f000 f9b8 	bl	81052b8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8104f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	d00f      	beq.n	8104f6e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	681a      	ldr	r2, [r3, #0]
 8104f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104f54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8104f58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8104f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8104f5e:	4a48      	ldr	r2, [pc, #288]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104f62:	0f9b      	lsrs	r3, r3, #30
 8104f64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8104f66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8104f68:	6878      	ldr	r0, [r7, #4]
 8104f6a:	f000 f9b0 	bl	81052ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8104f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104f70:	2b00      	cmp	r3, #0
 8104f72:	d00f      	beq.n	8104f94 <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681a      	ldr	r2, [r3, #0]
 8104f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104f7a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8104f7e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8104f82:	6513      	str	r3, [r2, #80]	@ 0x50
 8104f84:	4a3e      	ldr	r2, [pc, #248]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104f88:	0f9b      	lsrs	r3, r3, #30
 8104f8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8104f8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8104f8e:	6878      	ldr	r0, [r7, #4]
 8104f90:	f7fc f968 	bl	8101264 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8104f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d00f      	beq.n	8104fba <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	681a      	ldr	r2, [r3, #0]
 8104f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104fa0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8104fa4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8104fa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8104faa:	4a35      	ldr	r2, [pc, #212]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104fae:	0f9b      	lsrs	r3, r3, #30
 8104fb0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8104fb2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8104fb4:	6878      	ldr	r0, [r7, #4]
 8104fb6:	f000 f995 	bl	81052e4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8104fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	d00f      	beq.n	8104fe4 <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8104fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104fca:	2b00      	cmp	r3, #0
 8104fcc:	d00a      	beq.n	8104fe4 <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8104fd8:	4b29      	ldr	r3, [pc, #164]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8104fda:	2200      	movs	r2, #0
 8104fdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8104fde:	6878      	ldr	r0, [r7, #4]
 8104fe0:	f000 f98b 	bl	81052fa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8104fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d01c      	beq.n	8105028 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8104fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104ff4:	2b00      	cmp	r3, #0
 8104ff6:	d017      	beq.n	8105028 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105000:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810500c:	4013      	ands	r3, r2
 810500e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8105018:	651a      	str	r2, [r3, #80]	@ 0x50
 810501a:	4b19      	ldr	r3, [pc, #100]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 810501c:	2200      	movs	r2, #0
 810501e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8105020:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8105022:	6878      	ldr	r0, [r7, #4]
 8105024:	f000 f973 	bl	810530e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8105028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810502a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810502e:	2b00      	cmp	r3, #0
 8105030:	d00f      	beq.n	8105052 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8105032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8105038:	2b00      	cmp	r3, #0
 810503a:	d00a      	beq.n	8105052 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8105044:	651a      	str	r2, [r3, #80]	@ 0x50
 8105046:	4b0e      	ldr	r3, [pc, #56]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8105048:	2200      	movs	r2, #0
 810504a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 810504c:	6878      	ldr	r0, [r7, #4]
 810504e:	f000 f974 	bl	810533a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8105052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105058:	2b00      	cmp	r3, #0
 810505a:	d013      	beq.n	8105084 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 810505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810505e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105062:	2b00      	cmp	r3, #0
 8105064:	d00e      	beq.n	8105084 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810506e:	651a      	str	r2, [r3, #80]	@ 0x50
 8105070:	4b03      	ldr	r3, [pc, #12]	@ (8105080 <HAL_FDCAN_IRQHandler+0x270>)
 8105072:	2200      	movs	r2, #0
 8105074:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8105076:	6878      	ldr	r0, [r7, #4]
 8105078:	f000 f969 	bl	810534e <HAL_FDCAN_TimestampWraparoundCallback>
 810507c:	e002      	b.n	8105084 <HAL_FDCAN_IRQHandler+0x274>
 810507e:	bf00      	nop
 8105080:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8105084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810508a:	2b00      	cmp	r3, #0
 810508c:	d00f      	beq.n	81050ae <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 810508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105094:	2b00      	cmp	r3, #0
 8105096:	d00a      	beq.n	81050ae <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81050a0:	651a      	str	r2, [r3, #80]	@ 0x50
 81050a2:	4b83      	ldr	r3, [pc, #524]	@ (81052b0 <HAL_FDCAN_IRQHandler+0x4a0>)
 81050a4:	2200      	movs	r2, #0
 81050a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 81050a8:	6878      	ldr	r0, [r7, #4]
 81050aa:	f000 f95a 	bl	8105362 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 81050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81050b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81050b4:	2b00      	cmp	r3, #0
 81050b6:	d014      	beq.n	81050e2 <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 81050b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81050be:	2b00      	cmp	r3, #0
 81050c0:	d00f      	beq.n	81050e2 <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	681b      	ldr	r3, [r3, #0]
 81050c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 81050ca:	651a      	str	r2, [r3, #80]	@ 0x50
 81050cc:	4b78      	ldr	r3, [pc, #480]	@ (81052b0 <HAL_FDCAN_IRQHandler+0x4a0>)
 81050ce:	2200      	movs	r2, #0
 81050d0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81050d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 81050e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81050e4:	2b00      	cmp	r3, #0
 81050e6:	d00f      	beq.n	8105108 <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681a      	ldr	r2, [r3, #0]
 81050ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81050ee:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81050f2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81050f6:	6513      	str	r3, [r2, #80]	@ 0x50
 81050f8:	4a6d      	ldr	r2, [pc, #436]	@ (81052b0 <HAL_FDCAN_IRQHandler+0x4a0>)
 81050fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81050fc:	0f9b      	lsrs	r3, r3, #30
 81050fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8105100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8105102:	6878      	ldr	r0, [r7, #4]
 8105104:	f000 f94b 	bl	810539e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8105108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810510a:	2b00      	cmp	r3, #0
 810510c:	d013      	beq.n	8105136 <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	681a      	ldr	r2, [r3, #0]
 8105112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105114:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8105118:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810511c:	6513      	str	r3, [r2, #80]	@ 0x50
 810511e:	4a64      	ldr	r2, [pc, #400]	@ (81052b0 <HAL_FDCAN_IRQHandler+0x4a0>)
 8105120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105122:	0f9b      	lsrs	r3, r3, #30
 8105124:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 810512c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810512e:	431a      	orrs	r2, r3
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	4a5e      	ldr	r2, [pc, #376]	@ (81052b4 <HAL_FDCAN_IRQHandler+0x4a4>)
 810513c:	4293      	cmp	r3, r2
 810513e:	f040 80aa 	bne.w	8105296 <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	685b      	ldr	r3, [r3, #4]
 8105146:	689b      	ldr	r3, [r3, #8]
 8105148:	f003 0303 	and.w	r3, r3, #3
 810514c:	2b00      	cmp	r3, #0
 810514e:	f000 80a2 	beq.w	8105296 <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	685b      	ldr	r3, [r3, #4]
 8105156:	6a1b      	ldr	r3, [r3, #32]
 8105158:	f003 030f 	and.w	r3, r3, #15
 810515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	685b      	ldr	r3, [r3, #4]
 8105162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105166:	4013      	ands	r3, r2
 8105168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	685b      	ldr	r3, [r3, #4]
 810516e:	6a1b      	ldr	r3, [r3, #32]
 8105170:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8105174:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	685b      	ldr	r3, [r3, #4]
 810517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810517c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810517e:	4013      	ands	r3, r2
 8105180:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	685b      	ldr	r3, [r3, #4]
 8105186:	6a1b      	ldr	r3, [r3, #32]
 8105188:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 810518c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	685b      	ldr	r3, [r3, #4]
 8105192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105196:	4013      	ands	r3, r2
 8105198:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	685b      	ldr	r3, [r3, #4]
 810519e:	6a1b      	ldr	r3, [r3, #32]
 81051a0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 81051a4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	685b      	ldr	r3, [r3, #4]
 81051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81051ac:	6a3a      	ldr	r2, [r7, #32]
 81051ae:	4013      	ands	r3, r2
 81051b0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	685b      	ldr	r3, [r3, #4]
 81051b6:	6a1b      	ldr	r3, [r3, #32]
 81051b8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 81051bc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	685b      	ldr	r3, [r3, #4]
 81051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81051c4:	69fa      	ldr	r2, [r7, #28]
 81051c6:	4013      	ands	r3, r2
 81051c8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	685b      	ldr	r3, [r3, #4]
 81051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81051d0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	685b      	ldr	r3, [r3, #4]
 81051d6:	6a1b      	ldr	r3, [r3, #32]
 81051d8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 81051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051dc:	2b00      	cmp	r3, #0
 81051de:	d007      	beq.n	81051f0 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	685b      	ldr	r3, [r3, #4]
 81051e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81051e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 81051e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81051ea:	6878      	ldr	r0, [r7, #4]
 81051ec:	f000 f8e2 	bl	81053b4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 81051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81051f2:	2b00      	cmp	r3, #0
 81051f4:	d007      	beq.n	8105206 <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	685b      	ldr	r3, [r3, #4]
 81051fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81051fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 81051fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105200:	6878      	ldr	r0, [r7, #4]
 8105202:	f000 f8e2 	bl	81053ca <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8105206:	69bb      	ldr	r3, [r7, #24]
 8105208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810520c:	2b00      	cmp	r3, #0
 810520e:	d019      	beq.n	8105244 <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8105210:	697b      	ldr	r3, [r7, #20]
 8105212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105216:	2b00      	cmp	r3, #0
 8105218:	d014      	beq.n	8105244 <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	685b      	ldr	r3, [r3, #4]
 810521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105220:	0c1b      	lsrs	r3, r3, #16
 8105222:	b29b      	uxth	r3, r3
 8105224:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	685b      	ldr	r3, [r3, #4]
 810522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810522c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105230:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	685b      	ldr	r3, [r3, #4]
 8105236:	2240      	movs	r2, #64	@ 0x40
 8105238:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 810523a:	68fa      	ldr	r2, [r7, #12]
 810523c:	6939      	ldr	r1, [r7, #16]
 810523e:	6878      	ldr	r0, [r7, #4]
 8105240:	f000 f8ce 	bl	81053e0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8105244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105246:	2b00      	cmp	r3, #0
 8105248:	d007      	beq.n	810525a <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	685b      	ldr	r3, [r3, #4]
 810524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105250:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8105252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105254:	6878      	ldr	r0, [r7, #4]
 8105256:	f000 f8cf 	bl	81053f8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 810525a:	6a3b      	ldr	r3, [r7, #32]
 810525c:	2b00      	cmp	r3, #0
 810525e:	d00b      	beq.n	8105278 <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	685b      	ldr	r3, [r3, #4]
 8105264:	6a3a      	ldr	r2, [r7, #32]
 8105266:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 810526e:	6a3b      	ldr	r3, [r7, #32]
 8105270:	431a      	orrs	r2, r3
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8105278:	69fb      	ldr	r3, [r7, #28]
 810527a:	2b00      	cmp	r3, #0
 810527c:	d00b      	beq.n	8105296 <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	685b      	ldr	r3, [r3, #4]
 8105282:	69fa      	ldr	r2, [r7, #28]
 8105284:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 810528c:	69fb      	ldr	r3, [r7, #28]
 810528e:	431a      	orrs	r2, r3
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810529c:	2b00      	cmp	r3, #0
 810529e:	d002      	beq.n	81052a6 <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 81052a0:	6878      	ldr	r0, [r7, #4]
 81052a2:	f000 f872 	bl	810538a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 81052a6:	bf00      	nop
 81052a8:	3758      	adds	r7, #88	@ 0x58
 81052aa:	46bd      	mov	sp, r7
 81052ac:	bd80      	pop	{r7, pc}
 81052ae:	bf00      	nop
 81052b0:	4000a800 	.word	0x4000a800
 81052b4:	4000a000 	.word	0x4000a000

081052b8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 81052b8:	b480      	push	{r7}
 81052ba:	b083      	sub	sp, #12
 81052bc:	af00      	add	r7, sp, #0
 81052be:	6078      	str	r0, [r7, #4]
 81052c0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 81052c2:	bf00      	nop
 81052c4:	370c      	adds	r7, #12
 81052c6:	46bd      	mov	sp, r7
 81052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052cc:	4770      	bx	lr

081052ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 81052ce:	b480      	push	{r7}
 81052d0:	b083      	sub	sp, #12
 81052d2:	af00      	add	r7, sp, #0
 81052d4:	6078      	str	r0, [r7, #4]
 81052d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 81052d8:	bf00      	nop
 81052da:	370c      	adds	r7, #12
 81052dc:	46bd      	mov	sp, r7
 81052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052e2:	4770      	bx	lr

081052e4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 81052e4:	b480      	push	{r7}
 81052e6:	b083      	sub	sp, #12
 81052e8:	af00      	add	r7, sp, #0
 81052ea:	6078      	str	r0, [r7, #4]
 81052ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 81052ee:	bf00      	nop
 81052f0:	370c      	adds	r7, #12
 81052f2:	46bd      	mov	sp, r7
 81052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052f8:	4770      	bx	lr

081052fa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81052fa:	b480      	push	{r7}
 81052fc:	b083      	sub	sp, #12
 81052fe:	af00      	add	r7, sp, #0
 8105300:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8105302:	bf00      	nop
 8105304:	370c      	adds	r7, #12
 8105306:	46bd      	mov	sp, r7
 8105308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810530c:	4770      	bx	lr

0810530e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 810530e:	b480      	push	{r7}
 8105310:	b083      	sub	sp, #12
 8105312:	af00      	add	r7, sp, #0
 8105314:	6078      	str	r0, [r7, #4]
 8105316:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8105318:	bf00      	nop
 810531a:	370c      	adds	r7, #12
 810531c:	46bd      	mov	sp, r7
 810531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105322:	4770      	bx	lr

08105324 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8105324:	b480      	push	{r7}
 8105326:	b083      	sub	sp, #12
 8105328:	af00      	add	r7, sp, #0
 810532a:	6078      	str	r0, [r7, #4]
 810532c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 810532e:	bf00      	nop
 8105330:	370c      	adds	r7, #12
 8105332:	46bd      	mov	sp, r7
 8105334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105338:	4770      	bx	lr

0810533a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810533a:	b480      	push	{r7}
 810533c:	b083      	sub	sp, #12
 810533e:	af00      	add	r7, sp, #0
 8105340:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8105342:	bf00      	nop
 8105344:	370c      	adds	r7, #12
 8105346:	46bd      	mov	sp, r7
 8105348:	f85d 7b04 	ldr.w	r7, [sp], #4
 810534c:	4770      	bx	lr

0810534e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810534e:	b480      	push	{r7}
 8105350:	b083      	sub	sp, #12
 8105352:	af00      	add	r7, sp, #0
 8105354:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8105356:	bf00      	nop
 8105358:	370c      	adds	r7, #12
 810535a:	46bd      	mov	sp, r7
 810535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105360:	4770      	bx	lr

08105362 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8105362:	b480      	push	{r7}
 8105364:	b083      	sub	sp, #12
 8105366:	af00      	add	r7, sp, #0
 8105368:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 810536a:	bf00      	nop
 810536c:	370c      	adds	r7, #12
 810536e:	46bd      	mov	sp, r7
 8105370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105374:	4770      	bx	lr

08105376 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8105376:	b480      	push	{r7}
 8105378:	b083      	sub	sp, #12
 810537a:	af00      	add	r7, sp, #0
 810537c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 810537e:	bf00      	nop
 8105380:	370c      	adds	r7, #12
 8105382:	46bd      	mov	sp, r7
 8105384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105388:	4770      	bx	lr

0810538a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810538a:	b480      	push	{r7}
 810538c:	b083      	sub	sp, #12
 810538e:	af00      	add	r7, sp, #0
 8105390:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8105392:	bf00      	nop
 8105394:	370c      	adds	r7, #12
 8105396:	46bd      	mov	sp, r7
 8105398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810539c:	4770      	bx	lr

0810539e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 810539e:	b480      	push	{r7}
 81053a0:	b083      	sub	sp, #12
 81053a2:	af00      	add	r7, sp, #0
 81053a4:	6078      	str	r0, [r7, #4]
 81053a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 81053a8:	bf00      	nop
 81053aa:	370c      	adds	r7, #12
 81053ac:	46bd      	mov	sp, r7
 81053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b2:	4770      	bx	lr

081053b4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 81053b4:	b480      	push	{r7}
 81053b6:	b083      	sub	sp, #12
 81053b8:	af00      	add	r7, sp, #0
 81053ba:	6078      	str	r0, [r7, #4]
 81053bc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 81053be:	bf00      	nop
 81053c0:	370c      	adds	r7, #12
 81053c2:	46bd      	mov	sp, r7
 81053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053c8:	4770      	bx	lr

081053ca <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 81053ca:	b480      	push	{r7}
 81053cc:	b083      	sub	sp, #12
 81053ce:	af00      	add	r7, sp, #0
 81053d0:	6078      	str	r0, [r7, #4]
 81053d2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 81053d4:	bf00      	nop
 81053d6:	370c      	adds	r7, #12
 81053d8:	46bd      	mov	sp, r7
 81053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053de:	4770      	bx	lr

081053e0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 81053e0:	b480      	push	{r7}
 81053e2:	b085      	sub	sp, #20
 81053e4:	af00      	add	r7, sp, #0
 81053e6:	60f8      	str	r0, [r7, #12]
 81053e8:	60b9      	str	r1, [r7, #8]
 81053ea:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 81053ec:	bf00      	nop
 81053ee:	3714      	adds	r7, #20
 81053f0:	46bd      	mov	sp, r7
 81053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053f6:	4770      	bx	lr

081053f8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 81053f8:	b480      	push	{r7}
 81053fa:	b083      	sub	sp, #12
 81053fc:	af00      	add	r7, sp, #0
 81053fe:	6078      	str	r0, [r7, #4]
 8105400:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8105402:	bf00      	nop
 8105404:	370c      	adds	r7, #12
 8105406:	46bd      	mov	sp, r7
 8105408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810540c:	4770      	bx	lr
	...

08105410 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8105410:	b480      	push	{r7}
 8105412:	b085      	sub	sp, #20
 8105414:	af00      	add	r7, sp, #0
 8105416:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810541c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810542a:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 810542e:	68ba      	ldr	r2, [r7, #8]
 8105430:	0091      	lsls	r1, r2, #2
 8105432:	687a      	ldr	r2, [r7, #4]
 8105434:	6812      	ldr	r2, [r2, #0]
 8105436:	430b      	orrs	r3, r1
 8105438:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105444:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810544c:	041a      	lsls	r2, r3, #16
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	430a      	orrs	r2, r1
 8105454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810545c:	68ba      	ldr	r2, [r7, #8]
 810545e:	4413      	add	r3, r2
 8105460:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810546a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810546e:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105472:	68ba      	ldr	r2, [r7, #8]
 8105474:	0091      	lsls	r1, r2, #2
 8105476:	687a      	ldr	r2, [r7, #4]
 8105478:	6812      	ldr	r2, [r2, #0]
 810547a:	430b      	orrs	r3, r1
 810547c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105488:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105490:	041a      	lsls	r2, r3, #16
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	430a      	orrs	r2, r1
 8105498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81054a0:	005b      	lsls	r3, r3, #1
 81054a2:	68ba      	ldr	r2, [r7, #8]
 81054a4:	4413      	add	r3, r2
 81054a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81054b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81054b4:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81054b8:	68ba      	ldr	r2, [r7, #8]
 81054ba:	0091      	lsls	r1, r2, #2
 81054bc:	687a      	ldr	r2, [r7, #4]
 81054be:	6812      	ldr	r2, [r2, #0]
 81054c0:	430b      	orrs	r3, r1
 81054c2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81054ce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81054d6:	041a      	lsls	r2, r3, #16
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	430a      	orrs	r2, r1
 81054de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81054e6:	687a      	ldr	r2, [r7, #4]
 81054e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81054ea:	fb02 f303 	mul.w	r3, r2, r3
 81054ee:	68ba      	ldr	r2, [r7, #8]
 81054f0:	4413      	add	r3, r2
 81054f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81054fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105500:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105504:	68ba      	ldr	r2, [r7, #8]
 8105506:	0091      	lsls	r1, r2, #2
 8105508:	687a      	ldr	r2, [r7, #4]
 810550a:	6812      	ldr	r2, [r2, #0]
 810550c:	430b      	orrs	r3, r1
 810550e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	681b      	ldr	r3, [r3, #0]
 8105516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810551a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105522:	041a      	lsls	r2, r3, #16
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	430a      	orrs	r2, r1
 810552a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105532:	687a      	ldr	r2, [r7, #4]
 8105534:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8105536:	fb02 f303 	mul.w	r3, r2, r3
 810553a:	68ba      	ldr	r2, [r7, #8]
 810553c:	4413      	add	r3, r2
 810553e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105548:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810554c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105550:	68ba      	ldr	r2, [r7, #8]
 8105552:	0091      	lsls	r1, r2, #2
 8105554:	687a      	ldr	r2, [r7, #4]
 8105556:	6812      	ldr	r2, [r2, #0]
 8105558:	430b      	orrs	r3, r1
 810555a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105562:	687a      	ldr	r2, [r7, #4]
 8105564:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8105566:	fb02 f303 	mul.w	r3, r2, r3
 810556a:	68ba      	ldr	r2, [r7, #8]
 810556c:	4413      	add	r3, r2
 810556e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105578:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810557c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105580:	68ba      	ldr	r2, [r7, #8]
 8105582:	0091      	lsls	r1, r2, #2
 8105584:	687a      	ldr	r2, [r7, #4]
 8105586:	6812      	ldr	r2, [r2, #0]
 8105588:	430b      	orrs	r3, r1
 810558a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105596:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810559e:	041a      	lsls	r2, r3, #16
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	430a      	orrs	r2, r1
 81055a6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055ae:	005b      	lsls	r3, r3, #1
 81055b0:	68ba      	ldr	r2, [r7, #8]
 81055b2:	4413      	add	r3, r2
 81055b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81055be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81055c2:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81055c6:	68ba      	ldr	r2, [r7, #8]
 81055c8:	0091      	lsls	r1, r2, #2
 81055ca:	687a      	ldr	r2, [r7, #4]
 81055cc:	6812      	ldr	r2, [r2, #0]
 81055ce:	430b      	orrs	r3, r1
 81055d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81055dc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81055e4:	041a      	lsls	r2, r3, #16
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	430a      	orrs	r2, r1
 81055ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81055f8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105600:	061a      	lsls	r2, r3, #24
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	430a      	orrs	r2, r1
 8105608:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105610:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8105614:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8105618:	009a      	lsls	r2, r3, #2
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105626:	009b      	lsls	r3, r3, #2
 8105628:	441a      	add	r2, r3
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105636:	00db      	lsls	r3, r3, #3
 8105638:	441a      	add	r2, r3
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105646:	6879      	ldr	r1, [r7, #4]
 8105648:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 810564a:	fb01 f303 	mul.w	r3, r1, r3
 810564e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8105650:	441a      	add	r2, r3
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810565e:	6879      	ldr	r1, [r7, #4]
 8105660:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8105662:	fb01 f303 	mul.w	r3, r1, r3
 8105666:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8105668:	441a      	add	r2, r3
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105676:	6879      	ldr	r1, [r7, #4]
 8105678:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 810567a:	fb01 f303 	mul.w	r3, r1, r3
 810567e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8105680:	441a      	add	r2, r3
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105692:	00db      	lsls	r3, r3, #3
 8105694:	441a      	add	r2, r3
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81056a6:	6879      	ldr	r1, [r7, #4]
 81056a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 81056aa:	fb01 f303 	mul.w	r3, r1, r3
 81056ae:	009b      	lsls	r3, r3, #2
 81056b0:	441a      	add	r2, r3
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81056c2:	6879      	ldr	r1, [r7, #4]
 81056c4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 81056c6:	fb01 f303 	mul.w	r3, r1, r3
 81056ca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 81056cc:	441a      	add	r2, r3
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81056da:	4a14      	ldr	r2, [pc, #80]	@ (810572c <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81056dc:	4293      	cmp	r3, r2
 81056de:	d90d      	bls.n	81056fc <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81056e6:	f043 0220 	orr.w	r2, r3, #32
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	2203      	movs	r2, #3
 81056f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 81056f8:	2301      	movs	r3, #1
 81056fa:	e010      	b.n	810571e <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105700:	60fb      	str	r3, [r7, #12]
 8105702:	e005      	b.n	8105710 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	2200      	movs	r2, #0
 8105708:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 810570a:	68fb      	ldr	r3, [r7, #12]
 810570c:	3304      	adds	r3, #4
 810570e:	60fb      	str	r3, [r7, #12]
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105716:	68fa      	ldr	r2, [r7, #12]
 8105718:	429a      	cmp	r2, r3
 810571a:	d3f3      	bcc.n	8105704 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 810571c:	2300      	movs	r3, #0
}
 810571e:	4618      	mov	r0, r3
 8105720:	3714      	adds	r7, #20
 8105722:	46bd      	mov	sp, r7
 8105724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105728:	4770      	bx	lr
 810572a:	bf00      	nop
 810572c:	4000d3fc 	.word	0x4000d3fc

08105730 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8105730:	b480      	push	{r7}
 8105732:	b089      	sub	sp, #36	@ 0x24
 8105734:	af00      	add	r7, sp, #0
 8105736:	60f8      	str	r0, [r7, #12]
 8105738:	60b9      	str	r1, [r7, #8]
 810573a:	607a      	str	r2, [r7, #4]
 810573c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 810573e:	68bb      	ldr	r3, [r7, #8]
 8105740:	685b      	ldr	r3, [r3, #4]
 8105742:	2b00      	cmp	r3, #0
 8105744:	d10a      	bne.n	810575c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105746:	68bb      	ldr	r3, [r7, #8]
 8105748:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 810574a:	68bb      	ldr	r3, [r7, #8]
 810574c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 810574e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8105750:	68bb      	ldr	r3, [r7, #8]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105756:	4313      	orrs	r3, r2
 8105758:	61fb      	str	r3, [r7, #28]
 810575a:	e00a      	b.n	8105772 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 810575c:	68bb      	ldr	r3, [r7, #8]
 810575e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8105760:	68bb      	ldr	r3, [r7, #8]
 8105762:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8105764:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8105766:	68bb      	ldr	r3, [r7, #8]
 8105768:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 810576a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 810576c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8105770:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8105772:	68bb      	ldr	r3, [r7, #8]
 8105774:	6a1b      	ldr	r3, [r3, #32]
 8105776:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8105778:	68bb      	ldr	r3, [r7, #8]
 810577a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 810577c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 810577e:	68bb      	ldr	r3, [r7, #8]
 8105780:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8105782:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8105784:	68bb      	ldr	r3, [r7, #8]
 8105786:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8105788:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 810578a:	68bb      	ldr	r3, [r7, #8]
 810578c:	68db      	ldr	r3, [r3, #12]
 810578e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8105790:	4313      	orrs	r3, r2
 8105792:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810579e:	6839      	ldr	r1, [r7, #0]
 81057a0:	fb01 f303 	mul.w	r3, r1, r3
 81057a4:	009b      	lsls	r3, r3, #2
 81057a6:	4413      	add	r3, r2
 81057a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 81057aa:	69bb      	ldr	r3, [r7, #24]
 81057ac:	69fa      	ldr	r2, [r7, #28]
 81057ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 81057b0:	69bb      	ldr	r3, [r7, #24]
 81057b2:	3304      	adds	r3, #4
 81057b4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 81057b6:	69bb      	ldr	r3, [r7, #24]
 81057b8:	693a      	ldr	r2, [r7, #16]
 81057ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 81057bc:	69bb      	ldr	r3, [r7, #24]
 81057be:	3304      	adds	r3, #4
 81057c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 81057c2:	2300      	movs	r3, #0
 81057c4:	617b      	str	r3, [r7, #20]
 81057c6:	e020      	b.n	810580a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81057c8:	697b      	ldr	r3, [r7, #20]
 81057ca:	3303      	adds	r3, #3
 81057cc:	687a      	ldr	r2, [r7, #4]
 81057ce:	4413      	add	r3, r2
 81057d0:	781b      	ldrb	r3, [r3, #0]
 81057d2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 81057d4:	697b      	ldr	r3, [r7, #20]
 81057d6:	3302      	adds	r3, #2
 81057d8:	6879      	ldr	r1, [r7, #4]
 81057da:	440b      	add	r3, r1
 81057dc:	781b      	ldrb	r3, [r3, #0]
 81057de:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81057e0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 81057e2:	697b      	ldr	r3, [r7, #20]
 81057e4:	3301      	adds	r3, #1
 81057e6:	6879      	ldr	r1, [r7, #4]
 81057e8:	440b      	add	r3, r1
 81057ea:	781b      	ldrb	r3, [r3, #0]
 81057ec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 81057ee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 81057f0:	6879      	ldr	r1, [r7, #4]
 81057f2:	697a      	ldr	r2, [r7, #20]
 81057f4:	440a      	add	r2, r1
 81057f6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 81057f8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81057fa:	69bb      	ldr	r3, [r7, #24]
 81057fc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 81057fe:	69bb      	ldr	r3, [r7, #24]
 8105800:	3304      	adds	r3, #4
 8105802:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8105804:	697b      	ldr	r3, [r7, #20]
 8105806:	3304      	adds	r3, #4
 8105808:	617b      	str	r3, [r7, #20]
 810580a:	68bb      	ldr	r3, [r7, #8]
 810580c:	68db      	ldr	r3, [r3, #12]
 810580e:	4a06      	ldr	r2, [pc, #24]	@ (8105828 <FDCAN_CopyMessageToRAM+0xf8>)
 8105810:	5cd3      	ldrb	r3, [r2, r3]
 8105812:	461a      	mov	r2, r3
 8105814:	697b      	ldr	r3, [r7, #20]
 8105816:	4293      	cmp	r3, r2
 8105818:	d3d6      	bcc.n	81057c8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 810581a:	bf00      	nop
 810581c:	bf00      	nop
 810581e:	3724      	adds	r7, #36	@ 0x24
 8105820:	46bd      	mov	sp, r7
 8105822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105826:	4770      	bx	lr
 8105828:	08117470 	.word	0x08117470

0810582c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810582c:	b480      	push	{r7}
 810582e:	b089      	sub	sp, #36	@ 0x24
 8105830:	af00      	add	r7, sp, #0
 8105832:	6078      	str	r0, [r7, #4]
 8105834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8105836:	2300      	movs	r3, #0
 8105838:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810583a:	4b89      	ldr	r3, [pc, #548]	@ (8105a60 <HAL_GPIO_Init+0x234>)
 810583c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810583e:	e194      	b.n	8105b6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105840:	683b      	ldr	r3, [r7, #0]
 8105842:	681a      	ldr	r2, [r3, #0]
 8105844:	2101      	movs	r1, #1
 8105846:	69fb      	ldr	r3, [r7, #28]
 8105848:	fa01 f303 	lsl.w	r3, r1, r3
 810584c:	4013      	ands	r3, r2
 810584e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105850:	693b      	ldr	r3, [r7, #16]
 8105852:	2b00      	cmp	r3, #0
 8105854:	f000 8186 	beq.w	8105b64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105858:	683b      	ldr	r3, [r7, #0]
 810585a:	685b      	ldr	r3, [r3, #4]
 810585c:	f003 0303 	and.w	r3, r3, #3
 8105860:	2b01      	cmp	r3, #1
 8105862:	d005      	beq.n	8105870 <HAL_GPIO_Init+0x44>
 8105864:	683b      	ldr	r3, [r7, #0]
 8105866:	685b      	ldr	r3, [r3, #4]
 8105868:	f003 0303 	and.w	r3, r3, #3
 810586c:	2b02      	cmp	r3, #2
 810586e:	d130      	bne.n	81058d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	689b      	ldr	r3, [r3, #8]
 8105874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105876:	69fb      	ldr	r3, [r7, #28]
 8105878:	005b      	lsls	r3, r3, #1
 810587a:	2203      	movs	r2, #3
 810587c:	fa02 f303 	lsl.w	r3, r2, r3
 8105880:	43db      	mvns	r3, r3
 8105882:	69ba      	ldr	r2, [r7, #24]
 8105884:	4013      	ands	r3, r2
 8105886:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	68da      	ldr	r2, [r3, #12]
 810588c:	69fb      	ldr	r3, [r7, #28]
 810588e:	005b      	lsls	r3, r3, #1
 8105890:	fa02 f303 	lsl.w	r3, r2, r3
 8105894:	69ba      	ldr	r2, [r7, #24]
 8105896:	4313      	orrs	r3, r2
 8105898:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	69ba      	ldr	r2, [r7, #24]
 810589e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	685b      	ldr	r3, [r3, #4]
 81058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81058a6:	2201      	movs	r2, #1
 81058a8:	69fb      	ldr	r3, [r7, #28]
 81058aa:	fa02 f303 	lsl.w	r3, r2, r3
 81058ae:	43db      	mvns	r3, r3
 81058b0:	69ba      	ldr	r2, [r7, #24]
 81058b2:	4013      	ands	r3, r2
 81058b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81058b6:	683b      	ldr	r3, [r7, #0]
 81058b8:	685b      	ldr	r3, [r3, #4]
 81058ba:	091b      	lsrs	r3, r3, #4
 81058bc:	f003 0201 	and.w	r2, r3, #1
 81058c0:	69fb      	ldr	r3, [r7, #28]
 81058c2:	fa02 f303 	lsl.w	r3, r2, r3
 81058c6:	69ba      	ldr	r2, [r7, #24]
 81058c8:	4313      	orrs	r3, r2
 81058ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	69ba      	ldr	r2, [r7, #24]
 81058d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81058d2:	683b      	ldr	r3, [r7, #0]
 81058d4:	685b      	ldr	r3, [r3, #4]
 81058d6:	f003 0303 	and.w	r3, r3, #3
 81058da:	2b03      	cmp	r3, #3
 81058dc:	d017      	beq.n	810590e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	68db      	ldr	r3, [r3, #12]
 81058e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81058e4:	69fb      	ldr	r3, [r7, #28]
 81058e6:	005b      	lsls	r3, r3, #1
 81058e8:	2203      	movs	r2, #3
 81058ea:	fa02 f303 	lsl.w	r3, r2, r3
 81058ee:	43db      	mvns	r3, r3
 81058f0:	69ba      	ldr	r2, [r7, #24]
 81058f2:	4013      	ands	r3, r2
 81058f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81058f6:	683b      	ldr	r3, [r7, #0]
 81058f8:	689a      	ldr	r2, [r3, #8]
 81058fa:	69fb      	ldr	r3, [r7, #28]
 81058fc:	005b      	lsls	r3, r3, #1
 81058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8105902:	69ba      	ldr	r2, [r7, #24]
 8105904:	4313      	orrs	r3, r2
 8105906:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	69ba      	ldr	r2, [r7, #24]
 810590c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810590e:	683b      	ldr	r3, [r7, #0]
 8105910:	685b      	ldr	r3, [r3, #4]
 8105912:	f003 0303 	and.w	r3, r3, #3
 8105916:	2b02      	cmp	r3, #2
 8105918:	d123      	bne.n	8105962 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810591a:	69fb      	ldr	r3, [r7, #28]
 810591c:	08da      	lsrs	r2, r3, #3
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	3208      	adds	r2, #8
 8105922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105928:	69fb      	ldr	r3, [r7, #28]
 810592a:	f003 0307 	and.w	r3, r3, #7
 810592e:	009b      	lsls	r3, r3, #2
 8105930:	220f      	movs	r2, #15
 8105932:	fa02 f303 	lsl.w	r3, r2, r3
 8105936:	43db      	mvns	r3, r3
 8105938:	69ba      	ldr	r2, [r7, #24]
 810593a:	4013      	ands	r3, r2
 810593c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810593e:	683b      	ldr	r3, [r7, #0]
 8105940:	691a      	ldr	r2, [r3, #16]
 8105942:	69fb      	ldr	r3, [r7, #28]
 8105944:	f003 0307 	and.w	r3, r3, #7
 8105948:	009b      	lsls	r3, r3, #2
 810594a:	fa02 f303 	lsl.w	r3, r2, r3
 810594e:	69ba      	ldr	r2, [r7, #24]
 8105950:	4313      	orrs	r3, r2
 8105952:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105954:	69fb      	ldr	r3, [r7, #28]
 8105956:	08da      	lsrs	r2, r3, #3
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	3208      	adds	r2, #8
 810595c:	69b9      	ldr	r1, [r7, #24]
 810595e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105968:	69fb      	ldr	r3, [r7, #28]
 810596a:	005b      	lsls	r3, r3, #1
 810596c:	2203      	movs	r2, #3
 810596e:	fa02 f303 	lsl.w	r3, r2, r3
 8105972:	43db      	mvns	r3, r3
 8105974:	69ba      	ldr	r2, [r7, #24]
 8105976:	4013      	ands	r3, r2
 8105978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810597a:	683b      	ldr	r3, [r7, #0]
 810597c:	685b      	ldr	r3, [r3, #4]
 810597e:	f003 0203 	and.w	r2, r3, #3
 8105982:	69fb      	ldr	r3, [r7, #28]
 8105984:	005b      	lsls	r3, r3, #1
 8105986:	fa02 f303 	lsl.w	r3, r2, r3
 810598a:	69ba      	ldr	r2, [r7, #24]
 810598c:	4313      	orrs	r3, r2
 810598e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	69ba      	ldr	r2, [r7, #24]
 8105994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105996:	683b      	ldr	r3, [r7, #0]
 8105998:	685b      	ldr	r3, [r3, #4]
 810599a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810599e:	2b00      	cmp	r3, #0
 81059a0:	f000 80e0 	beq.w	8105b64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81059a4:	4b2f      	ldr	r3, [pc, #188]	@ (8105a64 <HAL_GPIO_Init+0x238>)
 81059a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81059aa:	4a2e      	ldr	r2, [pc, #184]	@ (8105a64 <HAL_GPIO_Init+0x238>)
 81059ac:	f043 0302 	orr.w	r3, r3, #2
 81059b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81059b4:	4b2b      	ldr	r3, [pc, #172]	@ (8105a64 <HAL_GPIO_Init+0x238>)
 81059b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81059ba:	f003 0302 	and.w	r3, r3, #2
 81059be:	60fb      	str	r3, [r7, #12]
 81059c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81059c2:	4a29      	ldr	r2, [pc, #164]	@ (8105a68 <HAL_GPIO_Init+0x23c>)
 81059c4:	69fb      	ldr	r3, [r7, #28]
 81059c6:	089b      	lsrs	r3, r3, #2
 81059c8:	3302      	adds	r3, #2
 81059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81059d0:	69fb      	ldr	r3, [r7, #28]
 81059d2:	f003 0303 	and.w	r3, r3, #3
 81059d6:	009b      	lsls	r3, r3, #2
 81059d8:	220f      	movs	r2, #15
 81059da:	fa02 f303 	lsl.w	r3, r2, r3
 81059de:	43db      	mvns	r3, r3
 81059e0:	69ba      	ldr	r2, [r7, #24]
 81059e2:	4013      	ands	r3, r2
 81059e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	4a20      	ldr	r2, [pc, #128]	@ (8105a6c <HAL_GPIO_Init+0x240>)
 81059ea:	4293      	cmp	r3, r2
 81059ec:	d052      	beq.n	8105a94 <HAL_GPIO_Init+0x268>
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	4a1f      	ldr	r2, [pc, #124]	@ (8105a70 <HAL_GPIO_Init+0x244>)
 81059f2:	4293      	cmp	r3, r2
 81059f4:	d031      	beq.n	8105a5a <HAL_GPIO_Init+0x22e>
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	4a1e      	ldr	r2, [pc, #120]	@ (8105a74 <HAL_GPIO_Init+0x248>)
 81059fa:	4293      	cmp	r3, r2
 81059fc:	d02b      	beq.n	8105a56 <HAL_GPIO_Init+0x22a>
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	4a1d      	ldr	r2, [pc, #116]	@ (8105a78 <HAL_GPIO_Init+0x24c>)
 8105a02:	4293      	cmp	r3, r2
 8105a04:	d025      	beq.n	8105a52 <HAL_GPIO_Init+0x226>
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	4a1c      	ldr	r2, [pc, #112]	@ (8105a7c <HAL_GPIO_Init+0x250>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d01f      	beq.n	8105a4e <HAL_GPIO_Init+0x222>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	4a1b      	ldr	r2, [pc, #108]	@ (8105a80 <HAL_GPIO_Init+0x254>)
 8105a12:	4293      	cmp	r3, r2
 8105a14:	d019      	beq.n	8105a4a <HAL_GPIO_Init+0x21e>
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	4a1a      	ldr	r2, [pc, #104]	@ (8105a84 <HAL_GPIO_Init+0x258>)
 8105a1a:	4293      	cmp	r3, r2
 8105a1c:	d013      	beq.n	8105a46 <HAL_GPIO_Init+0x21a>
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	4a19      	ldr	r2, [pc, #100]	@ (8105a88 <HAL_GPIO_Init+0x25c>)
 8105a22:	4293      	cmp	r3, r2
 8105a24:	d00d      	beq.n	8105a42 <HAL_GPIO_Init+0x216>
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	4a18      	ldr	r2, [pc, #96]	@ (8105a8c <HAL_GPIO_Init+0x260>)
 8105a2a:	4293      	cmp	r3, r2
 8105a2c:	d007      	beq.n	8105a3e <HAL_GPIO_Init+0x212>
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	4a17      	ldr	r2, [pc, #92]	@ (8105a90 <HAL_GPIO_Init+0x264>)
 8105a32:	4293      	cmp	r3, r2
 8105a34:	d101      	bne.n	8105a3a <HAL_GPIO_Init+0x20e>
 8105a36:	2309      	movs	r3, #9
 8105a38:	e02d      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a3a:	230a      	movs	r3, #10
 8105a3c:	e02b      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a3e:	2308      	movs	r3, #8
 8105a40:	e029      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a42:	2307      	movs	r3, #7
 8105a44:	e027      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a46:	2306      	movs	r3, #6
 8105a48:	e025      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a4a:	2305      	movs	r3, #5
 8105a4c:	e023      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a4e:	2304      	movs	r3, #4
 8105a50:	e021      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a52:	2303      	movs	r3, #3
 8105a54:	e01f      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a56:	2302      	movs	r3, #2
 8105a58:	e01d      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a5a:	2301      	movs	r3, #1
 8105a5c:	e01b      	b.n	8105a96 <HAL_GPIO_Init+0x26a>
 8105a5e:	bf00      	nop
 8105a60:	580000c0 	.word	0x580000c0
 8105a64:	58024400 	.word	0x58024400
 8105a68:	58000400 	.word	0x58000400
 8105a6c:	58020000 	.word	0x58020000
 8105a70:	58020400 	.word	0x58020400
 8105a74:	58020800 	.word	0x58020800
 8105a78:	58020c00 	.word	0x58020c00
 8105a7c:	58021000 	.word	0x58021000
 8105a80:	58021400 	.word	0x58021400
 8105a84:	58021800 	.word	0x58021800
 8105a88:	58021c00 	.word	0x58021c00
 8105a8c:	58022000 	.word	0x58022000
 8105a90:	58022400 	.word	0x58022400
 8105a94:	2300      	movs	r3, #0
 8105a96:	69fa      	ldr	r2, [r7, #28]
 8105a98:	f002 0203 	and.w	r2, r2, #3
 8105a9c:	0092      	lsls	r2, r2, #2
 8105a9e:	4093      	lsls	r3, r2
 8105aa0:	69ba      	ldr	r2, [r7, #24]
 8105aa2:	4313      	orrs	r3, r2
 8105aa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105aa6:	4938      	ldr	r1, [pc, #224]	@ (8105b88 <HAL_GPIO_Init+0x35c>)
 8105aa8:	69fb      	ldr	r3, [r7, #28]
 8105aaa:	089b      	lsrs	r3, r3, #2
 8105aac:	3302      	adds	r3, #2
 8105aae:	69ba      	ldr	r2, [r7, #24]
 8105ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105abc:	693b      	ldr	r3, [r7, #16]
 8105abe:	43db      	mvns	r3, r3
 8105ac0:	69ba      	ldr	r2, [r7, #24]
 8105ac2:	4013      	ands	r3, r2
 8105ac4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	685b      	ldr	r3, [r3, #4]
 8105aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d003      	beq.n	8105ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105ad2:	69ba      	ldr	r2, [r7, #24]
 8105ad4:	693b      	ldr	r3, [r7, #16]
 8105ad6:	4313      	orrs	r3, r2
 8105ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105ada:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105ade:	69bb      	ldr	r3, [r7, #24]
 8105ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105ae6:	685b      	ldr	r3, [r3, #4]
 8105ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105aea:	693b      	ldr	r3, [r7, #16]
 8105aec:	43db      	mvns	r3, r3
 8105aee:	69ba      	ldr	r2, [r7, #24]
 8105af0:	4013      	ands	r3, r2
 8105af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105af4:	683b      	ldr	r3, [r7, #0]
 8105af6:	685b      	ldr	r3, [r3, #4]
 8105af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105afc:	2b00      	cmp	r3, #0
 8105afe:	d003      	beq.n	8105b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105b00:	69ba      	ldr	r2, [r7, #24]
 8105b02:	693b      	ldr	r3, [r7, #16]
 8105b04:	4313      	orrs	r3, r2
 8105b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105b0c:	69bb      	ldr	r3, [r7, #24]
 8105b0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105b10:	697b      	ldr	r3, [r7, #20]
 8105b12:	685b      	ldr	r3, [r3, #4]
 8105b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b16:	693b      	ldr	r3, [r7, #16]
 8105b18:	43db      	mvns	r3, r3
 8105b1a:	69ba      	ldr	r2, [r7, #24]
 8105b1c:	4013      	ands	r3, r2
 8105b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105b20:	683b      	ldr	r3, [r7, #0]
 8105b22:	685b      	ldr	r3, [r3, #4]
 8105b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105b28:	2b00      	cmp	r3, #0
 8105b2a:	d003      	beq.n	8105b34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105b2c:	69ba      	ldr	r2, [r7, #24]
 8105b2e:	693b      	ldr	r3, [r7, #16]
 8105b30:	4313      	orrs	r3, r2
 8105b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105b34:	697b      	ldr	r3, [r7, #20]
 8105b36:	69ba      	ldr	r2, [r7, #24]
 8105b38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105b3a:	697b      	ldr	r3, [r7, #20]
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b40:	693b      	ldr	r3, [r7, #16]
 8105b42:	43db      	mvns	r3, r3
 8105b44:	69ba      	ldr	r2, [r7, #24]
 8105b46:	4013      	ands	r3, r2
 8105b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105b4a:	683b      	ldr	r3, [r7, #0]
 8105b4c:	685b      	ldr	r3, [r3, #4]
 8105b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d003      	beq.n	8105b5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105b56:	69ba      	ldr	r2, [r7, #24]
 8105b58:	693b      	ldr	r3, [r7, #16]
 8105b5a:	4313      	orrs	r3, r2
 8105b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105b5e:	697b      	ldr	r3, [r7, #20]
 8105b60:	69ba      	ldr	r2, [r7, #24]
 8105b62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105b64:	69fb      	ldr	r3, [r7, #28]
 8105b66:	3301      	adds	r3, #1
 8105b68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105b6a:	683b      	ldr	r3, [r7, #0]
 8105b6c:	681a      	ldr	r2, [r3, #0]
 8105b6e:	69fb      	ldr	r3, [r7, #28]
 8105b70:	fa22 f303 	lsr.w	r3, r2, r3
 8105b74:	2b00      	cmp	r3, #0
 8105b76:	f47f ae63 	bne.w	8105840 <HAL_GPIO_Init+0x14>
  }
}
 8105b7a:	bf00      	nop
 8105b7c:	bf00      	nop
 8105b7e:	3724      	adds	r7, #36	@ 0x24
 8105b80:	46bd      	mov	sp, r7
 8105b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b86:	4770      	bx	lr
 8105b88:	58000400 	.word	0x58000400

08105b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105b8c:	b480      	push	{r7}
 8105b8e:	b083      	sub	sp, #12
 8105b90:	af00      	add	r7, sp, #0
 8105b92:	6078      	str	r0, [r7, #4]
 8105b94:	460b      	mov	r3, r1
 8105b96:	807b      	strh	r3, [r7, #2]
 8105b98:	4613      	mov	r3, r2
 8105b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105b9c:	787b      	ldrb	r3, [r7, #1]
 8105b9e:	2b00      	cmp	r3, #0
 8105ba0:	d003      	beq.n	8105baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105ba2:	887a      	ldrh	r2, [r7, #2]
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105ba8:	e003      	b.n	8105bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105baa:	887b      	ldrh	r3, [r7, #2]
 8105bac:	041a      	lsls	r2, r3, #16
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	619a      	str	r2, [r3, #24]
}
 8105bb2:	bf00      	nop
 8105bb4:	370c      	adds	r7, #12
 8105bb6:	46bd      	mov	sp, r7
 8105bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bbc:	4770      	bx	lr

08105bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8105bbe:	b480      	push	{r7}
 8105bc0:	b085      	sub	sp, #20
 8105bc2:	af00      	add	r7, sp, #0
 8105bc4:	6078      	str	r0, [r7, #4]
 8105bc6:	460b      	mov	r3, r1
 8105bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	695b      	ldr	r3, [r3, #20]
 8105bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8105bd0:	887a      	ldrh	r2, [r7, #2]
 8105bd2:	68fb      	ldr	r3, [r7, #12]
 8105bd4:	4013      	ands	r3, r2
 8105bd6:	041a      	lsls	r2, r3, #16
 8105bd8:	68fb      	ldr	r3, [r7, #12]
 8105bda:	43d9      	mvns	r1, r3
 8105bdc:	887b      	ldrh	r3, [r7, #2]
 8105bde:	400b      	ands	r3, r1
 8105be0:	431a      	orrs	r2, r3
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	619a      	str	r2, [r3, #24]
}
 8105be6:	bf00      	nop
 8105be8:	3714      	adds	r7, #20
 8105bea:	46bd      	mov	sp, r7
 8105bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf0:	4770      	bx	lr
	...

08105bf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8105bf4:	b480      	push	{r7}
 8105bf6:	b083      	sub	sp, #12
 8105bf8:	af00      	add	r7, sp, #0
 8105bfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8105bfc:	4a08      	ldr	r2, [pc, #32]	@ (8105c20 <HAL_HSEM_FastTake+0x2c>)
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	3320      	adds	r3, #32
 8105c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105c06:	4a07      	ldr	r2, [pc, #28]	@ (8105c24 <HAL_HSEM_FastTake+0x30>)
 8105c08:	4293      	cmp	r3, r2
 8105c0a:	d101      	bne.n	8105c10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8105c0c:	2300      	movs	r3, #0
 8105c0e:	e000      	b.n	8105c12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8105c10:	2301      	movs	r3, #1
}
 8105c12:	4618      	mov	r0, r3
 8105c14:	370c      	adds	r7, #12
 8105c16:	46bd      	mov	sp, r7
 8105c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c1c:	4770      	bx	lr
 8105c1e:	bf00      	nop
 8105c20:	58026400 	.word	0x58026400
 8105c24:	80000100 	.word	0x80000100

08105c28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8105c28:	b480      	push	{r7}
 8105c2a:	b083      	sub	sp, #12
 8105c2c:	af00      	add	r7, sp, #0
 8105c2e:	6078      	str	r0, [r7, #4]
 8105c30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8105c32:	4906      	ldr	r1, [pc, #24]	@ (8105c4c <HAL_HSEM_Release+0x24>)
 8105c34:	683b      	ldr	r3, [r7, #0]
 8105c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8105c40:	bf00      	nop
 8105c42:	370c      	adds	r7, #12
 8105c44:	46bd      	mov	sp, r7
 8105c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c4a:	4770      	bx	lr
 8105c4c:	58026400 	.word	0x58026400

08105c50 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105c50:	b480      	push	{r7}
 8105c52:	b083      	sub	sp, #12
 8105c54:	af00      	add	r7, sp, #0
 8105c56:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105c58:	4b05      	ldr	r3, [pc, #20]	@ (8105c70 <HAL_HSEM_ActivateNotification+0x20>)
 8105c5a:	681a      	ldr	r2, [r3, #0]
 8105c5c:	4904      	ldr	r1, [pc, #16]	@ (8105c70 <HAL_HSEM_ActivateNotification+0x20>)
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	4313      	orrs	r3, r2
 8105c62:	600b      	str	r3, [r1, #0]
#endif
}
 8105c64:	bf00      	nop
 8105c66:	370c      	adds	r7, #12
 8105c68:	46bd      	mov	sp, r7
 8105c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c6e:	4770      	bx	lr
 8105c70:	58026510 	.word	0x58026510

08105c74 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8105c74:	b580      	push	{r7, lr}
 8105c76:	b082      	sub	sp, #8
 8105c78:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8105c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8105ca4 <HAL_HSEM_IRQHandler+0x30>)
 8105c7c:	68db      	ldr	r3, [r3, #12]
 8105c7e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8105c80:	4b08      	ldr	r3, [pc, #32]	@ (8105ca4 <HAL_HSEM_IRQHandler+0x30>)
 8105c82:	681a      	ldr	r2, [r3, #0]
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	43db      	mvns	r3, r3
 8105c88:	4906      	ldr	r1, [pc, #24]	@ (8105ca4 <HAL_HSEM_IRQHandler+0x30>)
 8105c8a:	4013      	ands	r3, r2
 8105c8c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8105c8e:	4a05      	ldr	r2, [pc, #20]	@ (8105ca4 <HAL_HSEM_IRQHandler+0x30>)
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8105c94:	6878      	ldr	r0, [r7, #4]
 8105c96:	f00b fc57 	bl	8111548 <HAL_HSEM_FreeCallback>
}
 8105c9a:	bf00      	nop
 8105c9c:	3708      	adds	r7, #8
 8105c9e:	46bd      	mov	sp, r7
 8105ca0:	bd80      	pop	{r7, pc}
 8105ca2:	bf00      	nop
 8105ca4:	58026510 	.word	0x58026510

08105ca8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105ca8:	b580      	push	{r7, lr}
 8105caa:	b084      	sub	sp, #16
 8105cac:	af00      	add	r7, sp, #0
 8105cae:	60f8      	str	r0, [r7, #12]
 8105cb0:	460b      	mov	r3, r1
 8105cb2:	607a      	str	r2, [r7, #4]
 8105cb4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105cb6:	4b37      	ldr	r3, [pc, #220]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	f023 0201 	bic.w	r2, r3, #1
 8105cbe:	4935      	ldr	r1, [pc, #212]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	4313      	orrs	r3, r2
 8105cc4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	2b00      	cmp	r3, #0
 8105cca:	d123      	bne.n	8105d14 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105ccc:	f7fd fe18 	bl	8103900 <HAL_GetCurrentCPUID>
 8105cd0:	4603      	mov	r3, r0
 8105cd2:	2b03      	cmp	r3, #3
 8105cd4:	d158      	bne.n	8105d88 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cd8:	691b      	ldr	r3, [r3, #16]
 8105cda:	4a2e      	ldr	r2, [pc, #184]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cdc:	f023 0301 	bic.w	r3, r3, #1
 8105ce0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105ce4:	691b      	ldr	r3, [r3, #16]
 8105ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105ce8:	f043 0304 	orr.w	r3, r3, #4
 8105cec:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105cee:	f3bf 8f4f 	dsb	sy
}
 8105cf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105cf4:	f3bf 8f6f 	isb	sy
}
 8105cf8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105cfa:	7afb      	ldrb	r3, [r7, #11]
 8105cfc:	2b01      	cmp	r3, #1
 8105cfe:	d101      	bne.n	8105d04 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d00:	bf30      	wfi
 8105d02:	e000      	b.n	8105d06 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d04:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d06:	4b24      	ldr	r3, [pc, #144]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d08:	691b      	ldr	r3, [r3, #16]
 8105d0a:	4a23      	ldr	r2, [pc, #140]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d0c:	f023 0304 	bic.w	r3, r3, #4
 8105d10:	6113      	str	r3, [r2, #16]
 8105d12:	e03c      	b.n	8105d8e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	2b01      	cmp	r3, #1
 8105d18:	d123      	bne.n	8105d62 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105d1a:	f7fd fdf1 	bl	8103900 <HAL_GetCurrentCPUID>
 8105d1e:	4603      	mov	r3, r0
 8105d20:	2b01      	cmp	r3, #1
 8105d22:	d133      	bne.n	8105d8c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105d24:	4b1b      	ldr	r3, [pc, #108]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d26:	695b      	ldr	r3, [r3, #20]
 8105d28:	4a1a      	ldr	r2, [pc, #104]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d2a:	f023 0302 	bic.w	r3, r3, #2
 8105d2e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d30:	4b19      	ldr	r3, [pc, #100]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d32:	691b      	ldr	r3, [r3, #16]
 8105d34:	4a18      	ldr	r2, [pc, #96]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d36:	f043 0304 	orr.w	r3, r3, #4
 8105d3a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105d3c:	f3bf 8f4f 	dsb	sy
}
 8105d40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105d42:	f3bf 8f6f 	isb	sy
}
 8105d46:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105d48:	7afb      	ldrb	r3, [r7, #11]
 8105d4a:	2b01      	cmp	r3, #1
 8105d4c:	d101      	bne.n	8105d52 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d4e:	bf30      	wfi
 8105d50:	e000      	b.n	8105d54 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d52:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d54:	4b10      	ldr	r3, [pc, #64]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d56:	691b      	ldr	r3, [r3, #16]
 8105d58:	4a0f      	ldr	r2, [pc, #60]	@ (8105d98 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d5a:	f023 0304 	bic.w	r3, r3, #4
 8105d5e:	6113      	str	r3, [r2, #16]
 8105d60:	e015      	b.n	8105d8e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105d62:	f7fd fdcd 	bl	8103900 <HAL_GetCurrentCPUID>
 8105d66:	4603      	mov	r3, r0
 8105d68:	2b03      	cmp	r3, #3
 8105d6a:	d106      	bne.n	8105d7a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105d6c:	4b09      	ldr	r3, [pc, #36]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d6e:	691b      	ldr	r3, [r3, #16]
 8105d70:	4a08      	ldr	r2, [pc, #32]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d72:	f023 0304 	bic.w	r3, r3, #4
 8105d76:	6113      	str	r3, [r2, #16]
 8105d78:	e009      	b.n	8105d8e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105d7a:	4b06      	ldr	r3, [pc, #24]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d7c:	695b      	ldr	r3, [r3, #20]
 8105d7e:	4a05      	ldr	r2, [pc, #20]	@ (8105d94 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d80:	f023 0304 	bic.w	r3, r3, #4
 8105d84:	6153      	str	r3, [r2, #20]
 8105d86:	e002      	b.n	8105d8e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d88:	bf00      	nop
 8105d8a:	e000      	b.n	8105d8e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d8c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105d8e:	3710      	adds	r7, #16
 8105d90:	46bd      	mov	sp, r7
 8105d92:	bd80      	pop	{r7, pc}
 8105d94:	58024800 	.word	0x58024800
 8105d98:	e000ed00 	.word	0xe000ed00

08105d9c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105d9c:	b580      	push	{r7, lr}
 8105d9e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105da0:	f7fd fdae 	bl	8103900 <HAL_GetCurrentCPUID>
 8105da4:	4603      	mov	r3, r0
 8105da6:	2b03      	cmp	r3, #3
 8105da8:	d101      	bne.n	8105dae <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105daa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105dac:	e001      	b.n	8105db2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105dae:	bf40      	sev
    __WFE ();
 8105db0:	bf20      	wfe
}
 8105db2:	bf00      	nop
 8105db4:	bd80      	pop	{r7, pc}
	...

08105db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105db8:	b480      	push	{r7}
 8105dba:	b089      	sub	sp, #36	@ 0x24
 8105dbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105dbe:	4bb3      	ldr	r3, [pc, #716]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105dc0:	691b      	ldr	r3, [r3, #16]
 8105dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105dc6:	2b18      	cmp	r3, #24
 8105dc8:	f200 8155 	bhi.w	8106076 <HAL_RCC_GetSysClockFreq+0x2be>
 8105dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8105dd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105dd2:	bf00      	nop
 8105dd4:	08105e39 	.word	0x08105e39
 8105dd8:	08106077 	.word	0x08106077
 8105ddc:	08106077 	.word	0x08106077
 8105de0:	08106077 	.word	0x08106077
 8105de4:	08106077 	.word	0x08106077
 8105de8:	08106077 	.word	0x08106077
 8105dec:	08106077 	.word	0x08106077
 8105df0:	08106077 	.word	0x08106077
 8105df4:	08105e5f 	.word	0x08105e5f
 8105df8:	08106077 	.word	0x08106077
 8105dfc:	08106077 	.word	0x08106077
 8105e00:	08106077 	.word	0x08106077
 8105e04:	08106077 	.word	0x08106077
 8105e08:	08106077 	.word	0x08106077
 8105e0c:	08106077 	.word	0x08106077
 8105e10:	08106077 	.word	0x08106077
 8105e14:	08105e65 	.word	0x08105e65
 8105e18:	08106077 	.word	0x08106077
 8105e1c:	08106077 	.word	0x08106077
 8105e20:	08106077 	.word	0x08106077
 8105e24:	08106077 	.word	0x08106077
 8105e28:	08106077 	.word	0x08106077
 8105e2c:	08106077 	.word	0x08106077
 8105e30:	08106077 	.word	0x08106077
 8105e34:	08105e6b 	.word	0x08105e6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e38:	4b94      	ldr	r3, [pc, #592]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	f003 0320 	and.w	r3, r3, #32
 8105e40:	2b00      	cmp	r3, #0
 8105e42:	d009      	beq.n	8105e58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e44:	4b91      	ldr	r3, [pc, #580]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e46:	681b      	ldr	r3, [r3, #0]
 8105e48:	08db      	lsrs	r3, r3, #3
 8105e4a:	f003 0303 	and.w	r3, r3, #3
 8105e4e:	4a90      	ldr	r2, [pc, #576]	@ (8106090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e50:	fa22 f303 	lsr.w	r3, r2, r3
 8105e54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105e56:	e111      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105e58:	4b8d      	ldr	r3, [pc, #564]	@ (8106090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e5a:	61bb      	str	r3, [r7, #24]
      break;
 8105e5c:	e10e      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8106094 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105e60:	61bb      	str	r3, [r7, #24]
      break;
 8105e62:	e10b      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105e64:	4b8c      	ldr	r3, [pc, #560]	@ (8106098 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105e66:	61bb      	str	r3, [r7, #24]
      break;
 8105e68:	e108      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e6a:	4b88      	ldr	r3, [pc, #544]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e6e:	f003 0303 	and.w	r3, r3, #3
 8105e72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105e74:	4b85      	ldr	r3, [pc, #532]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e78:	091b      	lsrs	r3, r3, #4
 8105e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105e7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105e80:	4b82      	ldr	r3, [pc, #520]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e84:	f003 0301 	and.w	r3, r3, #1
 8105e88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105e8a:	4b80      	ldr	r3, [pc, #512]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105e8e:	08db      	lsrs	r3, r3, #3
 8105e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105e94:	68fa      	ldr	r2, [r7, #12]
 8105e96:	fb02 f303 	mul.w	r3, r2, r3
 8105e9a:	ee07 3a90 	vmov	s15, r3
 8105e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ea2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105ea6:	693b      	ldr	r3, [r7, #16]
 8105ea8:	2b00      	cmp	r3, #0
 8105eaa:	f000 80e1 	beq.w	8106070 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105eae:	697b      	ldr	r3, [r7, #20]
 8105eb0:	2b02      	cmp	r3, #2
 8105eb2:	f000 8083 	beq.w	8105fbc <HAL_RCC_GetSysClockFreq+0x204>
 8105eb6:	697b      	ldr	r3, [r7, #20]
 8105eb8:	2b02      	cmp	r3, #2
 8105eba:	f200 80a1 	bhi.w	8106000 <HAL_RCC_GetSysClockFreq+0x248>
 8105ebe:	697b      	ldr	r3, [r7, #20]
 8105ec0:	2b00      	cmp	r3, #0
 8105ec2:	d003      	beq.n	8105ecc <HAL_RCC_GetSysClockFreq+0x114>
 8105ec4:	697b      	ldr	r3, [r7, #20]
 8105ec6:	2b01      	cmp	r3, #1
 8105ec8:	d056      	beq.n	8105f78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105eca:	e099      	b.n	8106000 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ecc:	4b6f      	ldr	r3, [pc, #444]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	f003 0320 	and.w	r3, r3, #32
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d02d      	beq.n	8105f34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105ed8:	4b6c      	ldr	r3, [pc, #432]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	08db      	lsrs	r3, r3, #3
 8105ede:	f003 0303 	and.w	r3, r3, #3
 8105ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8106090 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8105ee8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	ee07 3a90 	vmov	s15, r3
 8105ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ef4:	693b      	ldr	r3, [r7, #16]
 8105ef6:	ee07 3a90 	vmov	s15, r3
 8105efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f02:	4b62      	ldr	r3, [pc, #392]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f0a:	ee07 3a90 	vmov	s15, r3
 8105f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810609c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105f32:	e087      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105f34:	693b      	ldr	r3, [r7, #16]
 8105f36:	ee07 3a90 	vmov	s15, r3
 8105f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81060a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f46:	4b51      	ldr	r3, [pc, #324]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f4e:	ee07 3a90 	vmov	s15, r3
 8105f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810609c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105f76:	e065      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105f78:	693b      	ldr	r3, [r7, #16]
 8105f7a:	ee07 3a90 	vmov	s15, r3
 8105f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81060a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f8a:	4b40      	ldr	r3, [pc, #256]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f92:	ee07 3a90 	vmov	s15, r3
 8105f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810609c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105fba:	e043      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105fbc:	693b      	ldr	r3, [r7, #16]
 8105fbe:	ee07 3a90 	vmov	s15, r3
 8105fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81060a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8105fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fce:	4b2f      	ldr	r3, [pc, #188]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fd6:	ee07 3a90 	vmov	s15, r3
 8105fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8105fe2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810609c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105ffe:	e021      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106000:	693b      	ldr	r3, [r7, #16]
 8106002:	ee07 3a90 	vmov	s15, r3
 8106006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810600a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81060a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810600e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106012:	4b1e      	ldr	r3, [pc, #120]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810601a:	ee07 3a90 	vmov	s15, r3
 810601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106022:	ed97 6a02 	vldr	s12, [r7, #8]
 8106026:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810609c <HAL_RCC_GetSysClockFreq+0x2e4>
 810602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810603e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106042:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106044:	4b11      	ldr	r3, [pc, #68]	@ (810608c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106048:	0a5b      	lsrs	r3, r3, #9
 810604a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810604e:	3301      	adds	r3, #1
 8106050:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106052:	683b      	ldr	r3, [r7, #0]
 8106054:	ee07 3a90 	vmov	s15, r3
 8106058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810605c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106068:	ee17 3a90 	vmov	r3, s15
 810606c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810606e:	e005      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106070:	2300      	movs	r3, #0
 8106072:	61bb      	str	r3, [r7, #24]
      break;
 8106074:	e002      	b.n	810607c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106076:	4b07      	ldr	r3, [pc, #28]	@ (8106094 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106078:	61bb      	str	r3, [r7, #24]
      break;
 810607a:	bf00      	nop
  }

  return sysclockfreq;
 810607c:	69bb      	ldr	r3, [r7, #24]
}
 810607e:	4618      	mov	r0, r3
 8106080:	3724      	adds	r7, #36	@ 0x24
 8106082:	46bd      	mov	sp, r7
 8106084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106088:	4770      	bx	lr
 810608a:	bf00      	nop
 810608c:	58024400 	.word	0x58024400
 8106090:	03d09000 	.word	0x03d09000
 8106094:	003d0900 	.word	0x003d0900
 8106098:	017d7840 	.word	0x017d7840
 810609c:	46000000 	.word	0x46000000
 81060a0:	4c742400 	.word	0x4c742400
 81060a4:	4a742400 	.word	0x4a742400
 81060a8:	4bbebc20 	.word	0x4bbebc20

081060ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81060ac:	b580      	push	{r7, lr}
 81060ae:	b082      	sub	sp, #8
 81060b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81060b2:	f7ff fe81 	bl	8105db8 <HAL_RCC_GetSysClockFreq>
 81060b6:	4602      	mov	r2, r0
 81060b8:	4b11      	ldr	r3, [pc, #68]	@ (8106100 <HAL_RCC_GetHCLKFreq+0x54>)
 81060ba:	699b      	ldr	r3, [r3, #24]
 81060bc:	0a1b      	lsrs	r3, r3, #8
 81060be:	f003 030f 	and.w	r3, r3, #15
 81060c2:	4910      	ldr	r1, [pc, #64]	@ (8106104 <HAL_RCC_GetHCLKFreq+0x58>)
 81060c4:	5ccb      	ldrb	r3, [r1, r3]
 81060c6:	f003 031f 	and.w	r3, r3, #31
 81060ca:	fa22 f303 	lsr.w	r3, r2, r3
 81060ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8106100 <HAL_RCC_GetHCLKFreq+0x54>)
 81060d2:	699b      	ldr	r3, [r3, #24]
 81060d4:	f003 030f 	and.w	r3, r3, #15
 81060d8:	4a0a      	ldr	r2, [pc, #40]	@ (8106104 <HAL_RCC_GetHCLKFreq+0x58>)
 81060da:	5cd3      	ldrb	r3, [r2, r3]
 81060dc:	f003 031f 	and.w	r3, r3, #31
 81060e0:	687a      	ldr	r2, [r7, #4]
 81060e2:	fa22 f303 	lsr.w	r3, r2, r3
 81060e6:	4a08      	ldr	r2, [pc, #32]	@ (8106108 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060e8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81060ea:	4b07      	ldr	r3, [pc, #28]	@ (8106108 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	4a07      	ldr	r2, [pc, #28]	@ (810610c <HAL_RCC_GetHCLKFreq+0x60>)
 81060f0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81060f2:	4b05      	ldr	r3, [pc, #20]	@ (8106108 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060f4:	681b      	ldr	r3, [r3, #0]
}
 81060f6:	4618      	mov	r0, r3
 81060f8:	3708      	adds	r7, #8
 81060fa:	46bd      	mov	sp, r7
 81060fc:	bd80      	pop	{r7, pc}
 81060fe:	bf00      	nop
 8106100:	58024400 	.word	0x58024400
 8106104:	0811738c 	.word	0x0811738c
 8106108:	10000004 	.word	0x10000004
 810610c:	10000000 	.word	0x10000000

08106110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106110:	b580      	push	{r7, lr}
 8106112:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106114:	f7ff ffca 	bl	81060ac <HAL_RCC_GetHCLKFreq>
 8106118:	4602      	mov	r2, r0
 810611a:	4b06      	ldr	r3, [pc, #24]	@ (8106134 <HAL_RCC_GetPCLK1Freq+0x24>)
 810611c:	69db      	ldr	r3, [r3, #28]
 810611e:	091b      	lsrs	r3, r3, #4
 8106120:	f003 0307 	and.w	r3, r3, #7
 8106124:	4904      	ldr	r1, [pc, #16]	@ (8106138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106126:	5ccb      	ldrb	r3, [r1, r3]
 8106128:	f003 031f 	and.w	r3, r3, #31
 810612c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106130:	4618      	mov	r0, r3
 8106132:	bd80      	pop	{r7, pc}
 8106134:	58024400 	.word	0x58024400
 8106138:	0811738c 	.word	0x0811738c

0810613c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810613c:	b580      	push	{r7, lr}
 810613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106140:	f7ff ffb4 	bl	81060ac <HAL_RCC_GetHCLKFreq>
 8106144:	4602      	mov	r2, r0
 8106146:	4b06      	ldr	r3, [pc, #24]	@ (8106160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106148:	69db      	ldr	r3, [r3, #28]
 810614a:	0a1b      	lsrs	r3, r3, #8
 810614c:	f003 0307 	and.w	r3, r3, #7
 8106150:	4904      	ldr	r1, [pc, #16]	@ (8106164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106152:	5ccb      	ldrb	r3, [r1, r3]
 8106154:	f003 031f 	and.w	r3, r3, #31
 8106158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810615c:	4618      	mov	r0, r3
 810615e:	bd80      	pop	{r7, pc}
 8106160:	58024400 	.word	0x58024400
 8106164:	0811738c 	.word	0x0811738c

08106168 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106168:	b480      	push	{r7}
 810616a:	b083      	sub	sp, #12
 810616c:	af00      	add	r7, sp, #0
 810616e:	6078      	str	r0, [r7, #4]
 8106170:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	223f      	movs	r2, #63	@ 0x3f
 8106176:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106178:	4b1a      	ldr	r3, [pc, #104]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 810617a:	691b      	ldr	r3, [r3, #16]
 810617c:	f003 0207 	and.w	r2, r3, #7
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106184:	4b17      	ldr	r3, [pc, #92]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 8106186:	699b      	ldr	r3, [r3, #24]
 8106188:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106190:	4b14      	ldr	r3, [pc, #80]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 8106192:	699b      	ldr	r3, [r3, #24]
 8106194:	f003 020f 	and.w	r2, r3, #15
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810619c:	4b11      	ldr	r3, [pc, #68]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 810619e:	699b      	ldr	r3, [r3, #24]
 81061a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81061a8:	4b0e      	ldr	r3, [pc, #56]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 81061aa:	69db      	ldr	r3, [r3, #28]
 81061ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81061b4:	4b0b      	ldr	r3, [pc, #44]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 81061b6:	69db      	ldr	r3, [r3, #28]
 81061b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81061c0:	4b08      	ldr	r3, [pc, #32]	@ (81061e4 <HAL_RCC_GetClockConfig+0x7c>)
 81061c2:	6a1b      	ldr	r3, [r3, #32]
 81061c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81061cc:	4b06      	ldr	r3, [pc, #24]	@ (81061e8 <HAL_RCC_GetClockConfig+0x80>)
 81061ce:	681b      	ldr	r3, [r3, #0]
 81061d0:	f003 020f 	and.w	r2, r3, #15
 81061d4:	683b      	ldr	r3, [r7, #0]
 81061d6:	601a      	str	r2, [r3, #0]
}
 81061d8:	bf00      	nop
 81061da:	370c      	adds	r7, #12
 81061dc:	46bd      	mov	sp, r7
 81061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061e2:	4770      	bx	lr
 81061e4:	58024400 	.word	0x58024400
 81061e8:	52002000 	.word	0x52002000

081061ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81061f0:	b0ca      	sub	sp, #296	@ 0x128
 81061f2:	af00      	add	r7, sp, #0
 81061f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81061f8:	2300      	movs	r3, #0
 81061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81061fe:	2300      	movs	r3, #0
 8106200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106208:	e9d3 2300 	ldrd	r2, r3, [r3]
 810620c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106210:	2500      	movs	r5, #0
 8106212:	ea54 0305 	orrs.w	r3, r4, r5
 8106216:	d049      	beq.n	81062ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810621c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810621e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106222:	d02f      	beq.n	8106284 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106224:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106228:	d828      	bhi.n	810627c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810622a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810622e:	d01a      	beq.n	8106266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106230:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106234:	d822      	bhi.n	810627c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106236:	2b00      	cmp	r3, #0
 8106238:	d003      	beq.n	8106242 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810623a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810623e:	d007      	beq.n	8106250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106240:	e01c      	b.n	810627c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106242:	4bb8      	ldr	r3, [pc, #736]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106246:	4ab7      	ldr	r2, [pc, #732]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810624c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810624e:	e01a      	b.n	8106286 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106254:	3308      	adds	r3, #8
 8106256:	2102      	movs	r1, #2
 8106258:	4618      	mov	r0, r3
 810625a:	f002 fb61 	bl	8108920 <RCCEx_PLL2_Config>
 810625e:	4603      	mov	r3, r0
 8106260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106264:	e00f      	b.n	8106286 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810626a:	3328      	adds	r3, #40	@ 0x28
 810626c:	2102      	movs	r1, #2
 810626e:	4618      	mov	r0, r3
 8106270:	f002 fc08 	bl	8108a84 <RCCEx_PLL3_Config>
 8106274:	4603      	mov	r3, r0
 8106276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810627a:	e004      	b.n	8106286 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810627c:	2301      	movs	r3, #1
 810627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106282:	e000      	b.n	8106286 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810628a:	2b00      	cmp	r3, #0
 810628c:	d10a      	bne.n	81062a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810628e:	4ba5      	ldr	r3, [pc, #660]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106292:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810629a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810629c:	4aa1      	ldr	r2, [pc, #644]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810629e:	430b      	orrs	r3, r1
 81062a0:	6513      	str	r3, [r2, #80]	@ 0x50
 81062a2:	e003      	b.n	81062ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81062a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81062b8:	f04f 0900 	mov.w	r9, #0
 81062bc:	ea58 0309 	orrs.w	r3, r8, r9
 81062c0:	d047      	beq.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81062c8:	2b04      	cmp	r3, #4
 81062ca:	d82a      	bhi.n	8106322 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81062cc:	a201      	add	r2, pc, #4	@ (adr r2, 81062d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062d2:	bf00      	nop
 81062d4:	081062e9 	.word	0x081062e9
 81062d8:	081062f7 	.word	0x081062f7
 81062dc:	0810630d 	.word	0x0810630d
 81062e0:	0810632b 	.word	0x0810632b
 81062e4:	0810632b 	.word	0x0810632b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81062e8:	4b8e      	ldr	r3, [pc, #568]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062ec:	4a8d      	ldr	r2, [pc, #564]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81062f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81062f4:	e01a      	b.n	810632c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062fa:	3308      	adds	r3, #8
 81062fc:	2100      	movs	r1, #0
 81062fe:	4618      	mov	r0, r3
 8106300:	f002 fb0e 	bl	8108920 <RCCEx_PLL2_Config>
 8106304:	4603      	mov	r3, r0
 8106306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810630a:	e00f      	b.n	810632c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106310:	3328      	adds	r3, #40	@ 0x28
 8106312:	2100      	movs	r1, #0
 8106314:	4618      	mov	r0, r3
 8106316:	f002 fbb5 	bl	8108a84 <RCCEx_PLL3_Config>
 810631a:	4603      	mov	r3, r0
 810631c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106320:	e004      	b.n	810632c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106322:	2301      	movs	r3, #1
 8106324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106328:	e000      	b.n	810632c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810632a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810632c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106330:	2b00      	cmp	r3, #0
 8106332:	d10a      	bne.n	810634a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106334:	4b7b      	ldr	r3, [pc, #492]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106338:	f023 0107 	bic.w	r1, r3, #7
 810633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106342:	4a78      	ldr	r2, [pc, #480]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106344:	430b      	orrs	r3, r1
 8106346:	6513      	str	r3, [r2, #80]	@ 0x50
 8106348:	e003      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810634a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810634e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810635a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810635e:	f04f 0b00 	mov.w	fp, #0
 8106362:	ea5a 030b 	orrs.w	r3, sl, fp
 8106366:	d04c      	beq.n	8106402 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810636c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810636e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106372:	d030      	beq.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106378:	d829      	bhi.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810637a:	2bc0      	cmp	r3, #192	@ 0xc0
 810637c:	d02d      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810637e:	2bc0      	cmp	r3, #192	@ 0xc0
 8106380:	d825      	bhi.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106382:	2b80      	cmp	r3, #128	@ 0x80
 8106384:	d018      	beq.n	81063b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8106386:	2b80      	cmp	r3, #128	@ 0x80
 8106388:	d821      	bhi.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810638a:	2b00      	cmp	r3, #0
 810638c:	d002      	beq.n	8106394 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810638e:	2b40      	cmp	r3, #64	@ 0x40
 8106390:	d007      	beq.n	81063a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106392:	e01c      	b.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106394:	4b63      	ldr	r3, [pc, #396]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106398:	4a62      	ldr	r2, [pc, #392]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810639a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810639e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063a0:	e01c      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063a6:	3308      	adds	r3, #8
 81063a8:	2100      	movs	r1, #0
 81063aa:	4618      	mov	r0, r3
 81063ac:	f002 fab8 	bl	8108920 <RCCEx_PLL2_Config>
 81063b0:	4603      	mov	r3, r0
 81063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063b6:	e011      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063bc:	3328      	adds	r3, #40	@ 0x28
 81063be:	2100      	movs	r1, #0
 81063c0:	4618      	mov	r0, r3
 81063c2:	f002 fb5f 	bl	8108a84 <RCCEx_PLL3_Config>
 81063c6:	4603      	mov	r3, r0
 81063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063cc:	e006      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81063ce:	2301      	movs	r3, #1
 81063d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81063d4:	e002      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81063d6:	bf00      	nop
 81063d8:	e000      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d10a      	bne.n	81063fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81063e4:	4b4f      	ldr	r3, [pc, #316]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81063e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81063f2:	4a4c      	ldr	r2, [pc, #304]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063f4:	430b      	orrs	r3, r1
 81063f6:	6513      	str	r3, [r2, #80]	@ 0x50
 81063f8:	e003      	b.n	8106402 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106406:	e9d3 2300 	ldrd	r2, r3, [r3]
 810640a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810640e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8106412:	2300      	movs	r3, #0
 8106414:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8106418:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810641c:	460b      	mov	r3, r1
 810641e:	4313      	orrs	r3, r2
 8106420:	d053      	beq.n	81064ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810642a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810642e:	d035      	beq.n	810649c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106430:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106434:	d82e      	bhi.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106436:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810643a:	d031      	beq.n	81064a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810643c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106440:	d828      	bhi.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106446:	d01a      	beq.n	810647e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810644c:	d822      	bhi.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810644e:	2b00      	cmp	r3, #0
 8106450:	d003      	beq.n	810645a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106456:	d007      	beq.n	8106468 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106458:	e01c      	b.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810645a:	4b32      	ldr	r3, [pc, #200]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810645e:	4a31      	ldr	r2, [pc, #196]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106466:	e01c      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810646c:	3308      	adds	r3, #8
 810646e:	2100      	movs	r1, #0
 8106470:	4618      	mov	r0, r3
 8106472:	f002 fa55 	bl	8108920 <RCCEx_PLL2_Config>
 8106476:	4603      	mov	r3, r0
 8106478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810647c:	e011      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106482:	3328      	adds	r3, #40	@ 0x28
 8106484:	2100      	movs	r1, #0
 8106486:	4618      	mov	r0, r3
 8106488:	f002 fafc 	bl	8108a84 <RCCEx_PLL3_Config>
 810648c:	4603      	mov	r3, r0
 810648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106492:	e006      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106494:	2301      	movs	r3, #1
 8106496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810649a:	e002      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810649c:	bf00      	nop
 810649e:	e000      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81064a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	d10b      	bne.n	81064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81064aa:	4b1e      	ldr	r3, [pc, #120]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81064ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81064ba:	4a1a      	ldr	r2, [pc, #104]	@ (8106524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064bc:	430b      	orrs	r3, r1
 81064be:	6593      	str	r3, [r2, #88]	@ 0x58
 81064c0:	e003      	b.n	81064ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81064d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81064da:	2300      	movs	r3, #0
 81064dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81064e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81064e4:	460b      	mov	r3, r1
 81064e6:	4313      	orrs	r3, r2
 81064e8:	d056      	beq.n	8106598 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81064f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81064f6:	d038      	beq.n	810656a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81064f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81064fc:	d831      	bhi.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81064fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106502:	d034      	beq.n	810656e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106504:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106508:	d82b      	bhi.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810650a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810650e:	d01d      	beq.n	810654c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106514:	d825      	bhi.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106516:	2b00      	cmp	r3, #0
 8106518:	d006      	beq.n	8106528 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810651a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810651e:	d00a      	beq.n	8106536 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106520:	e01f      	b.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106522:	bf00      	nop
 8106524:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106528:	4ba2      	ldr	r3, [pc, #648]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810652c:	4aa1      	ldr	r2, [pc, #644]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810652e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106534:	e01c      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810653a:	3308      	adds	r3, #8
 810653c:	2100      	movs	r1, #0
 810653e:	4618      	mov	r0, r3
 8106540:	f002 f9ee 	bl	8108920 <RCCEx_PLL2_Config>
 8106544:	4603      	mov	r3, r0
 8106546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810654a:	e011      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106550:	3328      	adds	r3, #40	@ 0x28
 8106552:	2100      	movs	r1, #0
 8106554:	4618      	mov	r0, r3
 8106556:	f002 fa95 	bl	8108a84 <RCCEx_PLL3_Config>
 810655a:	4603      	mov	r3, r0
 810655c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106560:	e006      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106562:	2301      	movs	r3, #1
 8106564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106568:	e002      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810656a:	bf00      	nop
 810656c:	e000      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106574:	2b00      	cmp	r3, #0
 8106576:	d10b      	bne.n	8106590 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106578:	4b8e      	ldr	r3, [pc, #568]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810657c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106584:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106588:	4a8a      	ldr	r2, [pc, #552]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810658a:	430b      	orrs	r3, r1
 810658c:	6593      	str	r3, [r2, #88]	@ 0x58
 810658e:	e003      	b.n	8106598 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81065a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81065a8:	2300      	movs	r3, #0
 81065aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81065ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81065b2:	460b      	mov	r3, r1
 81065b4:	4313      	orrs	r3, r2
 81065b6:	d03a      	beq.n	810662e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065be:	2b30      	cmp	r3, #48	@ 0x30
 81065c0:	d01f      	beq.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81065c2:	2b30      	cmp	r3, #48	@ 0x30
 81065c4:	d819      	bhi.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81065c6:	2b20      	cmp	r3, #32
 81065c8:	d00c      	beq.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81065ca:	2b20      	cmp	r3, #32
 81065cc:	d815      	bhi.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81065ce:	2b00      	cmp	r3, #0
 81065d0:	d019      	beq.n	8106606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81065d2:	2b10      	cmp	r3, #16
 81065d4:	d111      	bne.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065d6:	4b77      	ldr	r3, [pc, #476]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065da:	4a76      	ldr	r2, [pc, #472]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81065e2:	e011      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065e8:	3308      	adds	r3, #8
 81065ea:	2102      	movs	r1, #2
 81065ec:	4618      	mov	r0, r3
 81065ee:	f002 f997 	bl	8108920 <RCCEx_PLL2_Config>
 81065f2:	4603      	mov	r3, r0
 81065f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81065f8:	e006      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81065fa:	2301      	movs	r3, #1
 81065fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106600:	e002      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106602:	bf00      	nop
 8106604:	e000      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810660c:	2b00      	cmp	r3, #0
 810660e:	d10a      	bne.n	8106626 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106610:	4b68      	ldr	r3, [pc, #416]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106614:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810661e:	4a65      	ldr	r2, [pc, #404]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106620:	430b      	orrs	r3, r1
 8106622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106624:	e003      	b.n	810662e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810662a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106636:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810663a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810663e:	2300      	movs	r3, #0
 8106640:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8106644:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8106648:	460b      	mov	r3, r1
 810664a:	4313      	orrs	r3, r2
 810664c:	d051      	beq.n	81066f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106658:	d035      	beq.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810665a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810665e:	d82e      	bhi.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106664:	d031      	beq.n	81066ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106666:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810666a:	d828      	bhi.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810666c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106670:	d01a      	beq.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106676:	d822      	bhi.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106678:	2b00      	cmp	r3, #0
 810667a:	d003      	beq.n	8106684 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810667c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106680:	d007      	beq.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106682:	e01c      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106684:	4b4b      	ldr	r3, [pc, #300]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106688:	4a4a      	ldr	r2, [pc, #296]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810668a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810668e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106690:	e01c      	b.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106696:	3308      	adds	r3, #8
 8106698:	2100      	movs	r1, #0
 810669a:	4618      	mov	r0, r3
 810669c:	f002 f940 	bl	8108920 <RCCEx_PLL2_Config>
 81066a0:	4603      	mov	r3, r0
 81066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066a6:	e011      	b.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066ac:	3328      	adds	r3, #40	@ 0x28
 81066ae:	2100      	movs	r1, #0
 81066b0:	4618      	mov	r0, r3
 81066b2:	f002 f9e7 	bl	8108a84 <RCCEx_PLL3_Config>
 81066b6:	4603      	mov	r3, r0
 81066b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066bc:	e006      	b.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066be:	2301      	movs	r3, #1
 81066c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81066c4:	e002      	b.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81066c6:	bf00      	nop
 81066c8:	e000      	b.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81066ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066d0:	2b00      	cmp	r3, #0
 81066d2:	d10a      	bne.n	81066ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81066d4:	4b37      	ldr	r3, [pc, #220]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81066d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066e2:	4a34      	ldr	r2, [pc, #208]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066e4:	430b      	orrs	r3, r1
 81066e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81066e8:	e003      	b.n	81066f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81066fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106702:	2300      	movs	r3, #0
 8106704:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106708:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810670c:	460b      	mov	r3, r1
 810670e:	4313      	orrs	r3, r2
 8106710:	d056      	beq.n	81067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810671c:	d033      	beq.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810671e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106722:	d82c      	bhi.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106724:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106728:	d02f      	beq.n	810678a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810672a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810672e:	d826      	bhi.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106734:	d02b      	beq.n	810678e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106736:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810673a:	d820      	bhi.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810673c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106740:	d012      	beq.n	8106768 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106746:	d81a      	bhi.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106748:	2b00      	cmp	r3, #0
 810674a:	d022      	beq.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810674c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106750:	d115      	bne.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106756:	3308      	adds	r3, #8
 8106758:	2101      	movs	r1, #1
 810675a:	4618      	mov	r0, r3
 810675c:	f002 f8e0 	bl	8108920 <RCCEx_PLL2_Config>
 8106760:	4603      	mov	r3, r0
 8106762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106766:	e015      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810676c:	3328      	adds	r3, #40	@ 0x28
 810676e:	2101      	movs	r1, #1
 8106770:	4618      	mov	r0, r3
 8106772:	f002 f987 	bl	8108a84 <RCCEx_PLL3_Config>
 8106776:	4603      	mov	r3, r0
 8106778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810677c:	e00a      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810677e:	2301      	movs	r3, #1
 8106780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106784:	e006      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106786:	bf00      	nop
 8106788:	e004      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810678a:	bf00      	nop
 810678c:	e002      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810678e:	bf00      	nop
 8106790:	e000      	b.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106798:	2b00      	cmp	r3, #0
 810679a:	d10d      	bne.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810679c:	4b05      	ldr	r3, [pc, #20]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810679e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81067a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81067aa:	4a02      	ldr	r2, [pc, #8]	@ (81067b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81067ac:	430b      	orrs	r3, r1
 81067ae:	6513      	str	r3, [r2, #80]	@ 0x50
 81067b0:	e006      	b.n	81067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81067b2:	bf00      	nop
 81067b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81067bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81067c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81067cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81067d0:	2300      	movs	r3, #0
 81067d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81067d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81067da:	460b      	mov	r3, r1
 81067dc:	4313      	orrs	r3, r2
 81067de:	d055      	beq.n	810688c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81067e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81067ec:	d033      	beq.n	8106856 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81067ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81067f2:	d82c      	bhi.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067f8:	d02f      	beq.n	810685a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067fe:	d826      	bhi.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106804:	d02b      	beq.n	810685e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810680a:	d820      	bhi.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810680c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106810:	d012      	beq.n	8106838 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106816:	d81a      	bhi.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106818:	2b00      	cmp	r3, #0
 810681a:	d022      	beq.n	8106862 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810681c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106820:	d115      	bne.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106826:	3308      	adds	r3, #8
 8106828:	2101      	movs	r1, #1
 810682a:	4618      	mov	r0, r3
 810682c:	f002 f878 	bl	8108920 <RCCEx_PLL2_Config>
 8106830:	4603      	mov	r3, r0
 8106832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106836:	e015      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810683c:	3328      	adds	r3, #40	@ 0x28
 810683e:	2101      	movs	r1, #1
 8106840:	4618      	mov	r0, r3
 8106842:	f002 f91f 	bl	8108a84 <RCCEx_PLL3_Config>
 8106846:	4603      	mov	r3, r0
 8106848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810684c:	e00a      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810684e:	2301      	movs	r3, #1
 8106850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106854:	e006      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106856:	bf00      	nop
 8106858:	e004      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810685a:	bf00      	nop
 810685c:	e002      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810685e:	bf00      	nop
 8106860:	e000      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106868:	2b00      	cmp	r3, #0
 810686a:	d10b      	bne.n	8106884 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810686c:	4ba4      	ldr	r3, [pc, #656]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810686e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106870:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810687c:	4aa0      	ldr	r2, [pc, #640]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810687e:	430b      	orrs	r3, r1
 8106880:	6593      	str	r3, [r2, #88]	@ 0x58
 8106882:	e003      	b.n	810688c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106894:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810689c:	2300      	movs	r3, #0
 810689e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81068a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81068a6:	460b      	mov	r3, r1
 81068a8:	4313      	orrs	r3, r2
 81068aa:	d037      	beq.n	810691c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81068b6:	d00e      	beq.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81068b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81068bc:	d816      	bhi.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 81068be:	2b00      	cmp	r3, #0
 81068c0:	d018      	beq.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81068c6:	d111      	bne.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068c8:	4b8d      	ldr	r3, [pc, #564]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81068cc:	4a8c      	ldr	r2, [pc, #560]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81068d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81068d4:	e00f      	b.n	81068f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068da:	3308      	adds	r3, #8
 81068dc:	2101      	movs	r1, #1
 81068de:	4618      	mov	r0, r3
 81068e0:	f002 f81e 	bl	8108920 <RCCEx_PLL2_Config>
 81068e4:	4603      	mov	r3, r0
 81068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81068ea:	e004      	b.n	81068f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068ec:	2301      	movs	r3, #1
 81068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068f2:	e000      	b.n	81068f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81068f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068fa:	2b00      	cmp	r3, #0
 81068fc:	d10a      	bne.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81068fe:	4b80      	ldr	r3, [pc, #512]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106902:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810690a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810690c:	4a7c      	ldr	r2, [pc, #496]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810690e:	430b      	orrs	r3, r1
 8106910:	6513      	str	r3, [r2, #80]	@ 0x50
 8106912:	e003      	b.n	810691c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106924:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810692c:	2300      	movs	r3, #0
 810692e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106932:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106936:	460b      	mov	r3, r1
 8106938:	4313      	orrs	r3, r2
 810693a:	d039      	beq.n	81069b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106942:	2b03      	cmp	r3, #3
 8106944:	d81c      	bhi.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106946:	a201      	add	r2, pc, #4	@ (adr r2, 810694c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810694c:	08106989 	.word	0x08106989
 8106950:	0810695d 	.word	0x0810695d
 8106954:	0810696b 	.word	0x0810696b
 8106958:	08106989 	.word	0x08106989
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810695c:	4b68      	ldr	r3, [pc, #416]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106960:	4a67      	ldr	r2, [pc, #412]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106968:	e00f      	b.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810696e:	3308      	adds	r3, #8
 8106970:	2102      	movs	r1, #2
 8106972:	4618      	mov	r0, r3
 8106974:	f001 ffd4 	bl	8108920 <RCCEx_PLL2_Config>
 8106978:	4603      	mov	r3, r0
 810697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810697e:	e004      	b.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106980:	2301      	movs	r3, #1
 8106982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106986:	e000      	b.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106988:	bf00      	nop
    }

    if (ret == HAL_OK)
 810698a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810698e:	2b00      	cmp	r3, #0
 8106990:	d10a      	bne.n	81069a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106992:	4b5b      	ldr	r3, [pc, #364]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106996:	f023 0103 	bic.w	r1, r3, #3
 810699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810699e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81069a0:	4a57      	ldr	r2, [pc, #348]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81069a2:	430b      	orrs	r3, r1
 81069a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81069a6:	e003      	b.n	81069b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81069b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81069bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81069c0:	2300      	movs	r3, #0
 81069c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81069c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81069ca:	460b      	mov	r3, r1
 81069cc:	4313      	orrs	r3, r2
 81069ce:	f000 809f 	beq.w	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81069d2:	4b4c      	ldr	r3, [pc, #304]	@ (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	4a4b      	ldr	r2, [pc, #300]	@ (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81069d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81069dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81069de:	f7fb fdf9 	bl	81025d4 <HAL_GetTick>
 81069e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81069e6:	e00b      	b.n	8106a00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81069e8:	f7fb fdf4 	bl	81025d4 <HAL_GetTick>
 81069ec:	4602      	mov	r2, r0
 81069ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81069f2:	1ad3      	subs	r3, r2, r3
 81069f4:	2b64      	cmp	r3, #100	@ 0x64
 81069f6:	d903      	bls.n	8106a00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81069f8:	2303      	movs	r3, #3
 81069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81069fe:	e005      	b.n	8106a0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106a00:	4b40      	ldr	r3, [pc, #256]	@ (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106a08:	2b00      	cmp	r3, #0
 8106a0a:	d0ed      	beq.n	81069e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a10:	2b00      	cmp	r3, #0
 8106a12:	d179      	bne.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106a14:	4b3a      	ldr	r3, [pc, #232]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106a20:	4053      	eors	r3, r2
 8106a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106a26:	2b00      	cmp	r3, #0
 8106a28:	d015      	beq.n	8106a56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106a2a:	4b35      	ldr	r3, [pc, #212]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106a32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106a36:	4b32      	ldr	r3, [pc, #200]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a3a:	4a31      	ldr	r2, [pc, #196]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106a40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106a42:	4b2f      	ldr	r3, [pc, #188]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a46:	4a2e      	ldr	r2, [pc, #184]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106a4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a62:	d118      	bne.n	8106a96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106a64:	f7fb fdb6 	bl	81025d4 <HAL_GetTick>
 8106a68:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106a6c:	e00d      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106a6e:	f7fb fdb1 	bl	81025d4 <HAL_GetTick>
 8106a72:	4602      	mov	r2, r0
 8106a74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106a78:	1ad2      	subs	r2, r2, r3
 8106a7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106a7e:	429a      	cmp	r2, r3
 8106a80:	d903      	bls.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106a82:	2303      	movs	r3, #3
 8106a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106a88:	e005      	b.n	8106a96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a8e:	f003 0302 	and.w	r3, r3, #2
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d0eb      	beq.n	8106a6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d12b      	bne.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106aae:	d110      	bne.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106ab0:	4b13      	ldr	r3, [pc, #76]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ab2:	691b      	ldr	r3, [r3, #16]
 8106ab4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106abc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106ac0:	091b      	lsrs	r3, r3, #4
 8106ac2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106ac6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106aca:	4a0d      	ldr	r2, [pc, #52]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106acc:	430b      	orrs	r3, r1
 8106ace:	6113      	str	r3, [r2, #16]
 8106ad0:	e005      	b.n	8106ade <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ad4:	691b      	ldr	r3, [r3, #16]
 8106ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ad8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106adc:	6113      	str	r3, [r2, #16]
 8106ade:	4b08      	ldr	r3, [pc, #32]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ae0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ae6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106aee:	4a04      	ldr	r2, [pc, #16]	@ (8106b00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106af0:	430b      	orrs	r3, r1
 8106af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8106af4:	e00c      	b.n	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106afe:	e007      	b.n	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106b00:	58024400 	.word	0x58024400
 8106b04:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b18:	f002 0301 	and.w	r3, r2, #1
 8106b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106b20:	2300      	movs	r3, #0
 8106b22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106b26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106b2a:	460b      	mov	r3, r1
 8106b2c:	4313      	orrs	r3, r2
 8106b2e:	f000 8089 	beq.w	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106b38:	2b28      	cmp	r3, #40	@ 0x28
 8106b3a:	d86b      	bhi.n	8106c14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8106b44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b42:	bf00      	nop
 8106b44:	08106c1d 	.word	0x08106c1d
 8106b48:	08106c15 	.word	0x08106c15
 8106b4c:	08106c15 	.word	0x08106c15
 8106b50:	08106c15 	.word	0x08106c15
 8106b54:	08106c15 	.word	0x08106c15
 8106b58:	08106c15 	.word	0x08106c15
 8106b5c:	08106c15 	.word	0x08106c15
 8106b60:	08106c15 	.word	0x08106c15
 8106b64:	08106be9 	.word	0x08106be9
 8106b68:	08106c15 	.word	0x08106c15
 8106b6c:	08106c15 	.word	0x08106c15
 8106b70:	08106c15 	.word	0x08106c15
 8106b74:	08106c15 	.word	0x08106c15
 8106b78:	08106c15 	.word	0x08106c15
 8106b7c:	08106c15 	.word	0x08106c15
 8106b80:	08106c15 	.word	0x08106c15
 8106b84:	08106bff 	.word	0x08106bff
 8106b88:	08106c15 	.word	0x08106c15
 8106b8c:	08106c15 	.word	0x08106c15
 8106b90:	08106c15 	.word	0x08106c15
 8106b94:	08106c15 	.word	0x08106c15
 8106b98:	08106c15 	.word	0x08106c15
 8106b9c:	08106c15 	.word	0x08106c15
 8106ba0:	08106c15 	.word	0x08106c15
 8106ba4:	08106c1d 	.word	0x08106c1d
 8106ba8:	08106c15 	.word	0x08106c15
 8106bac:	08106c15 	.word	0x08106c15
 8106bb0:	08106c15 	.word	0x08106c15
 8106bb4:	08106c15 	.word	0x08106c15
 8106bb8:	08106c15 	.word	0x08106c15
 8106bbc:	08106c15 	.word	0x08106c15
 8106bc0:	08106c15 	.word	0x08106c15
 8106bc4:	08106c1d 	.word	0x08106c1d
 8106bc8:	08106c15 	.word	0x08106c15
 8106bcc:	08106c15 	.word	0x08106c15
 8106bd0:	08106c15 	.word	0x08106c15
 8106bd4:	08106c15 	.word	0x08106c15
 8106bd8:	08106c15 	.word	0x08106c15
 8106bdc:	08106c15 	.word	0x08106c15
 8106be0:	08106c15 	.word	0x08106c15
 8106be4:	08106c1d 	.word	0x08106c1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bec:	3308      	adds	r3, #8
 8106bee:	2101      	movs	r1, #1
 8106bf0:	4618      	mov	r0, r3
 8106bf2:	f001 fe95 	bl	8108920 <RCCEx_PLL2_Config>
 8106bf6:	4603      	mov	r3, r0
 8106bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106bfc:	e00f      	b.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c02:	3328      	adds	r3, #40	@ 0x28
 8106c04:	2101      	movs	r1, #1
 8106c06:	4618      	mov	r0, r3
 8106c08:	f001 ff3c 	bl	8108a84 <RCCEx_PLL3_Config>
 8106c0c:	4603      	mov	r3, r0
 8106c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106c12:	e004      	b.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c14:	2301      	movs	r3, #1
 8106c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c1a:	e000      	b.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c22:	2b00      	cmp	r3, #0
 8106c24:	d10a      	bne.n	8106c3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106c26:	4bbf      	ldr	r3, [pc, #764]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106c2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106c34:	4abb      	ldr	r2, [pc, #748]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106c36:	430b      	orrs	r3, r1
 8106c38:	6553      	str	r3, [r2, #84]	@ 0x54
 8106c3a:	e003      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c4c:	f002 0302 	and.w	r3, r2, #2
 8106c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106c54:	2300      	movs	r3, #0
 8106c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106c5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106c5e:	460b      	mov	r3, r1
 8106c60:	4313      	orrs	r3, r2
 8106c62:	d041      	beq.n	8106ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106c6a:	2b05      	cmp	r3, #5
 8106c6c:	d824      	bhi.n	8106cb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8106c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8106c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8106c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c74:	08106cc1 	.word	0x08106cc1
 8106c78:	08106c8d 	.word	0x08106c8d
 8106c7c:	08106ca3 	.word	0x08106ca3
 8106c80:	08106cc1 	.word	0x08106cc1
 8106c84:	08106cc1 	.word	0x08106cc1
 8106c88:	08106cc1 	.word	0x08106cc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c90:	3308      	adds	r3, #8
 8106c92:	2101      	movs	r1, #1
 8106c94:	4618      	mov	r0, r3
 8106c96:	f001 fe43 	bl	8108920 <RCCEx_PLL2_Config>
 8106c9a:	4603      	mov	r3, r0
 8106c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106ca0:	e00f      	b.n	8106cc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ca6:	3328      	adds	r3, #40	@ 0x28
 8106ca8:	2101      	movs	r1, #1
 8106caa:	4618      	mov	r0, r3
 8106cac:	f001 feea 	bl	8108a84 <RCCEx_PLL3_Config>
 8106cb0:	4603      	mov	r3, r0
 8106cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106cb6:	e004      	b.n	8106cc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106cb8:	2301      	movs	r3, #1
 8106cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106cbe:	e000      	b.n	8106cc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106cc6:	2b00      	cmp	r3, #0
 8106cc8:	d10a      	bne.n	8106ce0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106cca:	4b96      	ldr	r3, [pc, #600]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106cce:	f023 0107 	bic.w	r1, r3, #7
 8106cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106cd8:	4a92      	ldr	r2, [pc, #584]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106cda:	430b      	orrs	r3, r1
 8106cdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8106cde:	e003      	b.n	8106ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cf0:	f002 0304 	and.w	r3, r2, #4
 8106cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106cf8:	2300      	movs	r3, #0
 8106cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106cfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106d02:	460b      	mov	r3, r1
 8106d04:	4313      	orrs	r3, r2
 8106d06:	d044      	beq.n	8106d92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106d10:	2b05      	cmp	r3, #5
 8106d12:	d825      	bhi.n	8106d60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8106d14:	a201      	add	r2, pc, #4	@ (adr r2, 8106d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8106d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d1a:	bf00      	nop
 8106d1c:	08106d69 	.word	0x08106d69
 8106d20:	08106d35 	.word	0x08106d35
 8106d24:	08106d4b 	.word	0x08106d4b
 8106d28:	08106d69 	.word	0x08106d69
 8106d2c:	08106d69 	.word	0x08106d69
 8106d30:	08106d69 	.word	0x08106d69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d38:	3308      	adds	r3, #8
 8106d3a:	2101      	movs	r1, #1
 8106d3c:	4618      	mov	r0, r3
 8106d3e:	f001 fdef 	bl	8108920 <RCCEx_PLL2_Config>
 8106d42:	4603      	mov	r3, r0
 8106d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106d48:	e00f      	b.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d4e:	3328      	adds	r3, #40	@ 0x28
 8106d50:	2101      	movs	r1, #1
 8106d52:	4618      	mov	r0, r3
 8106d54:	f001 fe96 	bl	8108a84 <RCCEx_PLL3_Config>
 8106d58:	4603      	mov	r3, r0
 8106d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106d5e:	e004      	b.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d60:	2301      	movs	r3, #1
 8106d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d66:	e000      	b.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8106d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d6e:	2b00      	cmp	r3, #0
 8106d70:	d10b      	bne.n	8106d8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106d72:	4b6c      	ldr	r3, [pc, #432]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106d76:	f023 0107 	bic.w	r1, r3, #7
 8106d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106d82:	4a68      	ldr	r2, [pc, #416]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106d84:	430b      	orrs	r3, r1
 8106d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8106d88:	e003      	b.n	8106d92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d9a:	f002 0320 	and.w	r3, r2, #32
 8106d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8106da2:	2300      	movs	r3, #0
 8106da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106dac:	460b      	mov	r3, r1
 8106dae:	4313      	orrs	r3, r2
 8106db0:	d055      	beq.n	8106e5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106dbe:	d033      	beq.n	8106e28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106dc4:	d82c      	bhi.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106dca:	d02f      	beq.n	8106e2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106dd0:	d826      	bhi.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106dd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106dd6:	d02b      	beq.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106dd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106ddc:	d820      	bhi.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106de2:	d012      	beq.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8106de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106de8:	d81a      	bhi.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d022      	beq.n	8106e34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8106dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106df2:	d115      	bne.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106df8:	3308      	adds	r3, #8
 8106dfa:	2100      	movs	r1, #0
 8106dfc:	4618      	mov	r0, r3
 8106dfe:	f001 fd8f 	bl	8108920 <RCCEx_PLL2_Config>
 8106e02:	4603      	mov	r3, r0
 8106e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106e08:	e015      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e0e:	3328      	adds	r3, #40	@ 0x28
 8106e10:	2102      	movs	r1, #2
 8106e12:	4618      	mov	r0, r3
 8106e14:	f001 fe36 	bl	8108a84 <RCCEx_PLL3_Config>
 8106e18:	4603      	mov	r3, r0
 8106e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106e1e:	e00a      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e20:	2301      	movs	r3, #1
 8106e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106e26:	e006      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106e28:	bf00      	nop
 8106e2a:	e004      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106e2c:	bf00      	nop
 8106e2e:	e002      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106e30:	bf00      	nop
 8106e32:	e000      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d10b      	bne.n	8106e56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106e3e:	4b39      	ldr	r3, [pc, #228]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106e42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106e4e:	4a35      	ldr	r2, [pc, #212]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106e50:	430b      	orrs	r3, r1
 8106e52:	6553      	str	r3, [r2, #84]	@ 0x54
 8106e54:	e003      	b.n	8106e5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8106e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8106e6e:	2300      	movs	r3, #0
 8106e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106e74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106e78:	460b      	mov	r3, r1
 8106e7a:	4313      	orrs	r3, r2
 8106e7c:	d058      	beq.n	8106f30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106e86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106e8a:	d033      	beq.n	8106ef4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106e8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106e90:	d82c      	bhi.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106e96:	d02f      	beq.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106e9c:	d826      	bhi.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106ea2:	d02b      	beq.n	8106efc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106ea8:	d820      	bhi.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106eae:	d012      	beq.n	8106ed6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106eb4:	d81a      	bhi.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106eb6:	2b00      	cmp	r3, #0
 8106eb8:	d022      	beq.n	8106f00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106ebe:	d115      	bne.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ec4:	3308      	adds	r3, #8
 8106ec6:	2100      	movs	r1, #0
 8106ec8:	4618      	mov	r0, r3
 8106eca:	f001 fd29 	bl	8108920 <RCCEx_PLL2_Config>
 8106ece:	4603      	mov	r3, r0
 8106ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106ed4:	e015      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106eda:	3328      	adds	r3, #40	@ 0x28
 8106edc:	2102      	movs	r1, #2
 8106ede:	4618      	mov	r0, r3
 8106ee0:	f001 fdd0 	bl	8108a84 <RCCEx_PLL3_Config>
 8106ee4:	4603      	mov	r3, r0
 8106ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106eea:	e00a      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106eec:	2301      	movs	r3, #1
 8106eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ef2:	e006      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106ef4:	bf00      	nop
 8106ef6:	e004      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106ef8:	bf00      	nop
 8106efa:	e002      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106efc:	bf00      	nop
 8106efe:	e000      	b.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f06:	2b00      	cmp	r3, #0
 8106f08:	d10e      	bne.n	8106f28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106f0a:	4b06      	ldr	r3, [pc, #24]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106f0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106f1a:	4a02      	ldr	r2, [pc, #8]	@ (8106f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106f1c:	430b      	orrs	r3, r1
 8106f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8106f20:	e006      	b.n	8106f30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8106f22:	bf00      	nop
 8106f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106f40:	2300      	movs	r3, #0
 8106f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106f46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106f4a:	460b      	mov	r3, r1
 8106f4c:	4313      	orrs	r3, r2
 8106f4e:	d055      	beq.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106f58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106f5c:	d033      	beq.n	8106fc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8106f5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106f62:	d82c      	bhi.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106f68:	d02f      	beq.n	8106fca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106f6e:	d826      	bhi.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106f70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106f74:	d02b      	beq.n	8106fce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106f76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106f7a:	d820      	bhi.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106f80:	d012      	beq.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106f86:	d81a      	bhi.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106f88:	2b00      	cmp	r3, #0
 8106f8a:	d022      	beq.n	8106fd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106f90:	d115      	bne.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f96:	3308      	adds	r3, #8
 8106f98:	2100      	movs	r1, #0
 8106f9a:	4618      	mov	r0, r3
 8106f9c:	f001 fcc0 	bl	8108920 <RCCEx_PLL2_Config>
 8106fa0:	4603      	mov	r3, r0
 8106fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106fa6:	e015      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fac:	3328      	adds	r3, #40	@ 0x28
 8106fae:	2102      	movs	r1, #2
 8106fb0:	4618      	mov	r0, r3
 8106fb2:	f001 fd67 	bl	8108a84 <RCCEx_PLL3_Config>
 8106fb6:	4603      	mov	r3, r0
 8106fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106fbc:	e00a      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106fbe:	2301      	movs	r3, #1
 8106fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106fc4:	e006      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106fc6:	bf00      	nop
 8106fc8:	e004      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106fca:	bf00      	nop
 8106fcc:	e002      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106fce:	bf00      	nop
 8106fd0:	e000      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fd8:	2b00      	cmp	r3, #0
 8106fda:	d10b      	bne.n	8106ff4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106fdc:	4ba1      	ldr	r3, [pc, #644]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106fe0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8106fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106fec:	4a9d      	ldr	r2, [pc, #628]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106fee:	430b      	orrs	r3, r1
 8106ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8106ff2:	e003      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107004:	f002 0308 	and.w	r3, r2, #8
 8107008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810700c:	2300      	movs	r3, #0
 810700e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107012:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107016:	460b      	mov	r3, r1
 8107018:	4313      	orrs	r3, r2
 810701a:	d01e      	beq.n	810705a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107028:	d10c      	bne.n	8107044 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810702e:	3328      	adds	r3, #40	@ 0x28
 8107030:	2102      	movs	r1, #2
 8107032:	4618      	mov	r0, r3
 8107034:	f001 fd26 	bl	8108a84 <RCCEx_PLL3_Config>
 8107038:	4603      	mov	r3, r0
 810703a:	2b00      	cmp	r3, #0
 810703c:	d002      	beq.n	8107044 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810703e:	2301      	movs	r3, #1
 8107040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107044:	4b87      	ldr	r3, [pc, #540]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107048:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107054:	4a83      	ldr	r2, [pc, #524]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107056:	430b      	orrs	r3, r1
 8107058:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107062:	f002 0310 	and.w	r3, r2, #16
 8107066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810706a:	2300      	movs	r3, #0
 810706c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107070:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107074:	460b      	mov	r3, r1
 8107076:	4313      	orrs	r3, r2
 8107078:	d01e      	beq.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810707e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107086:	d10c      	bne.n	81070a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810708c:	3328      	adds	r3, #40	@ 0x28
 810708e:	2102      	movs	r1, #2
 8107090:	4618      	mov	r0, r3
 8107092:	f001 fcf7 	bl	8108a84 <RCCEx_PLL3_Config>
 8107096:	4603      	mov	r3, r0
 8107098:	2b00      	cmp	r3, #0
 810709a:	d002      	beq.n	81070a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810709c:	2301      	movs	r3, #1
 810709e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81070a2:	4b70      	ldr	r3, [pc, #448]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81070a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81070b2:	4a6c      	ldr	r2, [pc, #432]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81070b4:	430b      	orrs	r3, r1
 81070b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81070b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81070c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81070c8:	2300      	movs	r3, #0
 81070ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81070ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81070d2:	460b      	mov	r3, r1
 81070d4:	4313      	orrs	r3, r2
 81070d6:	d03e      	beq.n	8107156 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81070e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81070e4:	d022      	beq.n	810712c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81070e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81070ea:	d81b      	bhi.n	8107124 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81070ec:	2b00      	cmp	r3, #0
 81070ee:	d003      	beq.n	81070f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81070f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81070f4:	d00b      	beq.n	810710e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81070f6:	e015      	b.n	8107124 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070fc:	3308      	adds	r3, #8
 81070fe:	2100      	movs	r1, #0
 8107100:	4618      	mov	r0, r3
 8107102:	f001 fc0d 	bl	8108920 <RCCEx_PLL2_Config>
 8107106:	4603      	mov	r3, r0
 8107108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810710c:	e00f      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107112:	3328      	adds	r3, #40	@ 0x28
 8107114:	2102      	movs	r1, #2
 8107116:	4618      	mov	r0, r3
 8107118:	f001 fcb4 	bl	8108a84 <RCCEx_PLL3_Config>
 810711c:	4603      	mov	r3, r0
 810711e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107122:	e004      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107124:	2301      	movs	r3, #1
 8107126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810712a:	e000      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810712c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810712e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107132:	2b00      	cmp	r3, #0
 8107134:	d10b      	bne.n	810714e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107136:	4b4b      	ldr	r3, [pc, #300]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810713a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107146:	4a47      	ldr	r2, [pc, #284]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107148:	430b      	orrs	r3, r1
 810714a:	6593      	str	r3, [r2, #88]	@ 0x58
 810714c:	e003      	b.n	8107156 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810714e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810715e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107162:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107164:	2300      	movs	r3, #0
 8107166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107168:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810716c:	460b      	mov	r3, r1
 810716e:	4313      	orrs	r3, r2
 8107170:	d03b      	beq.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810717a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810717e:	d01f      	beq.n	81071c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107180:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107184:	d818      	bhi.n	81071b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8107186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810718a:	d003      	beq.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810718c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107190:	d007      	beq.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107192:	e011      	b.n	81071b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107194:	4b33      	ldr	r3, [pc, #204]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107198:	4a32      	ldr	r2, [pc, #200]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810719a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810719e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81071a0:	e00f      	b.n	81071c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071a6:	3328      	adds	r3, #40	@ 0x28
 81071a8:	2101      	movs	r1, #1
 81071aa:	4618      	mov	r0, r3
 81071ac:	f001 fc6a 	bl	8108a84 <RCCEx_PLL3_Config>
 81071b0:	4603      	mov	r3, r0
 81071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81071b6:	e004      	b.n	81071c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81071b8:	2301      	movs	r3, #1
 81071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81071be:	e000      	b.n	81071c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071c6:	2b00      	cmp	r3, #0
 81071c8:	d10b      	bne.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81071ca:	4b26      	ldr	r3, [pc, #152]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81071cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81071ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81071da:	4a22      	ldr	r2, [pc, #136]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81071dc:	430b      	orrs	r3, r1
 81071de:	6553      	str	r3, [r2, #84]	@ 0x54
 81071e0:	e003      	b.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81071f6:	673b      	str	r3, [r7, #112]	@ 0x70
 81071f8:	2300      	movs	r3, #0
 81071fa:	677b      	str	r3, [r7, #116]	@ 0x74
 81071fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107200:	460b      	mov	r3, r1
 8107202:	4313      	orrs	r3, r2
 8107204:	d034      	beq.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810720c:	2b00      	cmp	r3, #0
 810720e:	d003      	beq.n	8107218 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107214:	d007      	beq.n	8107226 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8107216:	e011      	b.n	810723c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107218:	4b12      	ldr	r3, [pc, #72]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810721c:	4a11      	ldr	r2, [pc, #68]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810721e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107224:	e00e      	b.n	8107244 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810722a:	3308      	adds	r3, #8
 810722c:	2102      	movs	r1, #2
 810722e:	4618      	mov	r0, r3
 8107230:	f001 fb76 	bl	8108920 <RCCEx_PLL2_Config>
 8107234:	4603      	mov	r3, r0
 8107236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810723a:	e003      	b.n	8107244 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810723c:	2301      	movs	r3, #1
 810723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107248:	2b00      	cmp	r3, #0
 810724a:	d10d      	bne.n	8107268 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810724c:	4b05      	ldr	r3, [pc, #20]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810724e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107250:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810725a:	4a02      	ldr	r2, [pc, #8]	@ (8107264 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810725c:	430b      	orrs	r3, r1
 810725e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107260:	e006      	b.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107262:	bf00      	nop
 8107264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810726c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107278:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810727c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810727e:	2300      	movs	r3, #0
 8107280:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107282:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107286:	460b      	mov	r3, r1
 8107288:	4313      	orrs	r3, r2
 810728a:	d00c      	beq.n	81072a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107290:	3328      	adds	r3, #40	@ 0x28
 8107292:	2102      	movs	r1, #2
 8107294:	4618      	mov	r0, r3
 8107296:	f001 fbf5 	bl	8108a84 <RCCEx_PLL3_Config>
 810729a:	4603      	mov	r3, r0
 810729c:	2b00      	cmp	r3, #0
 810729e:	d002      	beq.n	81072a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81072a0:	2301      	movs	r3, #1
 81072a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81072b2:	663b      	str	r3, [r7, #96]	@ 0x60
 81072b4:	2300      	movs	r3, #0
 81072b6:	667b      	str	r3, [r7, #100]	@ 0x64
 81072b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81072bc:	460b      	mov	r3, r1
 81072be:	4313      	orrs	r3, r2
 81072c0:	d038      	beq.n	8107334 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81072ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81072ce:	d018      	beq.n	8107302 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81072d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81072d4:	d811      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81072d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81072da:	d014      	beq.n	8107306 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81072dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81072e0:	d80b      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81072e2:	2b00      	cmp	r3, #0
 81072e4:	d011      	beq.n	810730a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81072e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072ea:	d106      	bne.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81072ec:	4bc3      	ldr	r3, [pc, #780]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072f0:	4ac2      	ldr	r2, [pc, #776]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81072f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81072f8:	e008      	b.n	810730c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072fa:	2301      	movs	r3, #1
 81072fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107300:	e004      	b.n	810730c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107302:	bf00      	nop
 8107304:	e002      	b.n	810730c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107306:	bf00      	nop
 8107308:	e000      	b.n	810730c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810730a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810730c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107310:	2b00      	cmp	r3, #0
 8107312:	d10b      	bne.n	810732c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107314:	4bb9      	ldr	r3, [pc, #740]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107318:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107324:	4ab5      	ldr	r2, [pc, #724]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107326:	430b      	orrs	r3, r1
 8107328:	6553      	str	r3, [r2, #84]	@ 0x54
 810732a:	e003      	b.n	8107334 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810732c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107338:	e9d3 2300 	ldrd	r2, r3, [r3]
 810733c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107342:	2300      	movs	r3, #0
 8107344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8107346:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810734a:	460b      	mov	r3, r1
 810734c:	4313      	orrs	r3, r2
 810734e:	d009      	beq.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107350:	4baa      	ldr	r3, [pc, #680]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107354:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810735c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810735e:	4aa7      	ldr	r2, [pc, #668]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107360:	430b      	orrs	r3, r1
 8107362:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107368:	e9d3 2300 	ldrd	r2, r3, [r3]
 810736c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107370:	653b      	str	r3, [r7, #80]	@ 0x50
 8107372:	2300      	movs	r3, #0
 8107374:	657b      	str	r3, [r7, #84]	@ 0x54
 8107376:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810737a:	460b      	mov	r3, r1
 810737c:	4313      	orrs	r3, r2
 810737e:	d00a      	beq.n	8107396 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107380:	4b9e      	ldr	r3, [pc, #632]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107382:	691b      	ldr	r3, [r3, #16]
 8107384:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810738c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107390:	4a9a      	ldr	r2, [pc, #616]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107392:	430b      	orrs	r3, r1
 8107394:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810739e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81073a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 81073a4:	2300      	movs	r3, #0
 81073a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81073a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81073ac:	460b      	mov	r3, r1
 81073ae:	4313      	orrs	r3, r2
 81073b0:	d009      	beq.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81073b2:	4b92      	ldr	r3, [pc, #584]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81073b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81073c0:	4a8e      	ldr	r2, [pc, #568]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073c2:	430b      	orrs	r3, r1
 81073c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81073d2:	643b      	str	r3, [r7, #64]	@ 0x40
 81073d4:	2300      	movs	r3, #0
 81073d6:	647b      	str	r3, [r7, #68]	@ 0x44
 81073d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81073dc:	460b      	mov	r3, r1
 81073de:	4313      	orrs	r3, r2
 81073e0:	d00e      	beq.n	8107400 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81073e2:	4b86      	ldr	r3, [pc, #536]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073e4:	691b      	ldr	r3, [r3, #16]
 81073e6:	4a85      	ldr	r2, [pc, #532]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81073ec:	6113      	str	r3, [r2, #16]
 81073ee:	4b83      	ldr	r3, [pc, #524]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073f0:	6919      	ldr	r1, [r3, #16]
 81073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81073fa:	4a80      	ldr	r2, [pc, #512]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073fc:	430b      	orrs	r3, r1
 81073fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107408:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810740c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810740e:	2300      	movs	r3, #0
 8107410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107412:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8107416:	460b      	mov	r3, r1
 8107418:	4313      	orrs	r3, r2
 810741a:	d009      	beq.n	8107430 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810741c:	4b77      	ldr	r3, [pc, #476]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810741e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107420:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810742a:	4a74      	ldr	r2, [pc, #464]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810742c:	430b      	orrs	r3, r1
 810742e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107438:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810743c:	633b      	str	r3, [r7, #48]	@ 0x30
 810743e:	2300      	movs	r3, #0
 8107440:	637b      	str	r3, [r7, #52]	@ 0x34
 8107442:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8107446:	460b      	mov	r3, r1
 8107448:	4313      	orrs	r3, r2
 810744a:	d00a      	beq.n	8107462 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810744c:	4b6b      	ldr	r3, [pc, #428]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810744e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107450:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8107454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810745c:	4a67      	ldr	r2, [pc, #412]	@ (81075fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810745e:	430b      	orrs	r3, r1
 8107460:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107466:	e9d3 2300 	ldrd	r2, r3, [r3]
 810746a:	2100      	movs	r1, #0
 810746c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810746e:	f003 0301 	and.w	r3, r3, #1
 8107472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107474:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107478:	460b      	mov	r3, r1
 810747a:	4313      	orrs	r3, r2
 810747c:	d011      	beq.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107482:	3308      	adds	r3, #8
 8107484:	2100      	movs	r1, #0
 8107486:	4618      	mov	r0, r3
 8107488:	f001 fa4a 	bl	8108920 <RCCEx_PLL2_Config>
 810748c:	4603      	mov	r3, r0
 810748e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107496:	2b00      	cmp	r3, #0
 8107498:	d003      	beq.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810749a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810749e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074aa:	2100      	movs	r1, #0
 81074ac:	6239      	str	r1, [r7, #32]
 81074ae:	f003 0302 	and.w	r3, r3, #2
 81074b2:	627b      	str	r3, [r7, #36]	@ 0x24
 81074b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81074b8:	460b      	mov	r3, r1
 81074ba:	4313      	orrs	r3, r2
 81074bc:	d011      	beq.n	81074e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074c2:	3308      	adds	r3, #8
 81074c4:	2101      	movs	r1, #1
 81074c6:	4618      	mov	r0, r3
 81074c8:	f001 fa2a 	bl	8108920 <RCCEx_PLL2_Config>
 81074cc:	4603      	mov	r3, r0
 81074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81074d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074d6:	2b00      	cmp	r3, #0
 81074d8:	d003      	beq.n	81074e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074ea:	2100      	movs	r1, #0
 81074ec:	61b9      	str	r1, [r7, #24]
 81074ee:	f003 0304 	and.w	r3, r3, #4
 81074f2:	61fb      	str	r3, [r7, #28]
 81074f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81074f8:	460b      	mov	r3, r1
 81074fa:	4313      	orrs	r3, r2
 81074fc:	d011      	beq.n	8107522 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107502:	3308      	adds	r3, #8
 8107504:	2102      	movs	r1, #2
 8107506:	4618      	mov	r0, r3
 8107508:	f001 fa0a 	bl	8108920 <RCCEx_PLL2_Config>
 810750c:	4603      	mov	r3, r0
 810750e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107516:	2b00      	cmp	r3, #0
 8107518:	d003      	beq.n	8107522 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810751a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810751e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107526:	e9d3 2300 	ldrd	r2, r3, [r3]
 810752a:	2100      	movs	r1, #0
 810752c:	6139      	str	r1, [r7, #16]
 810752e:	f003 0308 	and.w	r3, r3, #8
 8107532:	617b      	str	r3, [r7, #20]
 8107534:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8107538:	460b      	mov	r3, r1
 810753a:	4313      	orrs	r3, r2
 810753c:	d011      	beq.n	8107562 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107542:	3328      	adds	r3, #40	@ 0x28
 8107544:	2100      	movs	r1, #0
 8107546:	4618      	mov	r0, r3
 8107548:	f001 fa9c 	bl	8108a84 <RCCEx_PLL3_Config>
 810754c:	4603      	mov	r3, r0
 810754e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8107552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107556:	2b00      	cmp	r3, #0
 8107558:	d003      	beq.n	8107562 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810755a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810755e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107566:	e9d3 2300 	ldrd	r2, r3, [r3]
 810756a:	2100      	movs	r1, #0
 810756c:	60b9      	str	r1, [r7, #8]
 810756e:	f003 0310 	and.w	r3, r3, #16
 8107572:	60fb      	str	r3, [r7, #12]
 8107574:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107578:	460b      	mov	r3, r1
 810757a:	4313      	orrs	r3, r2
 810757c:	d011      	beq.n	81075a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107582:	3328      	adds	r3, #40	@ 0x28
 8107584:	2101      	movs	r1, #1
 8107586:	4618      	mov	r0, r3
 8107588:	f001 fa7c 	bl	8108a84 <RCCEx_PLL3_Config>
 810758c:	4603      	mov	r3, r0
 810758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107596:	2b00      	cmp	r3, #0
 8107598:	d003      	beq.n	81075a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810759a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810759e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075aa:	2100      	movs	r1, #0
 81075ac:	6039      	str	r1, [r7, #0]
 81075ae:	f003 0320 	and.w	r3, r3, #32
 81075b2:	607b      	str	r3, [r7, #4]
 81075b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81075b8:	460b      	mov	r3, r1
 81075ba:	4313      	orrs	r3, r2
 81075bc:	d011      	beq.n	81075e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075c2:	3328      	adds	r3, #40	@ 0x28
 81075c4:	2102      	movs	r1, #2
 81075c6:	4618      	mov	r0, r3
 81075c8:	f001 fa5c 	bl	8108a84 <RCCEx_PLL3_Config>
 81075cc:	4603      	mov	r3, r0
 81075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81075d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075d6:	2b00      	cmp	r3, #0
 81075d8:	d003      	beq.n	81075e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81075e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81075e6:	2b00      	cmp	r3, #0
 81075e8:	d101      	bne.n	81075ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81075ea:	2300      	movs	r3, #0
 81075ec:	e000      	b.n	81075f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81075ee:	2301      	movs	r3, #1
}
 81075f0:	4618      	mov	r0, r3
 81075f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81075f6:	46bd      	mov	sp, r7
 81075f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81075fc:	58024400 	.word	0x58024400

08107600 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107600:	b580      	push	{r7, lr}
 8107602:	b090      	sub	sp, #64	@ 0x40
 8107604:	af00      	add	r7, sp, #0
 8107606:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810760a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810760e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8107612:	430b      	orrs	r3, r1
 8107614:	f040 8094 	bne.w	8107740 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107618:	4b9e      	ldr	r3, [pc, #632]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810761a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810761c:	f003 0307 	and.w	r3, r3, #7
 8107620:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107624:	2b04      	cmp	r3, #4
 8107626:	f200 8087 	bhi.w	8107738 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810762a:	a201      	add	r2, pc, #4	@ (adr r2, 8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107630:	08107645 	.word	0x08107645
 8107634:	0810766d 	.word	0x0810766d
 8107638:	08107695 	.word	0x08107695
 810763c:	08107731 	.word	0x08107731
 8107640:	081076bd 	.word	0x081076bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107644:	4b93      	ldr	r3, [pc, #588]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810764c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107650:	d108      	bne.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107656:	4618      	mov	r0, r3
 8107658:	f001 f810 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107660:	f000 bd45 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107664:	2300      	movs	r3, #0
 8107666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107668:	f000 bd41 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810766c:	4b89      	ldr	r3, [pc, #548]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107678:	d108      	bne.n	810768c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810767a:	f107 0318 	add.w	r3, r7, #24
 810767e:	4618      	mov	r0, r3
 8107680:	f000 fd54 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107684:	69bb      	ldr	r3, [r7, #24]
 8107686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107688:	f000 bd31 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810768c:	2300      	movs	r3, #0
 810768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107690:	f000 bd2d 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107694:	4b7f      	ldr	r3, [pc, #508]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810769c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81076a0:	d108      	bne.n	81076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81076a2:	f107 030c 	add.w	r3, r7, #12
 81076a6:	4618      	mov	r0, r3
 81076a8:	f000 fe94 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81076ac:	68fb      	ldr	r3, [r7, #12]
 81076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076b0:	f000 bd1d 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076b4:	2300      	movs	r3, #0
 81076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076b8:	f000 bd19 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81076bc:	4b75      	ldr	r3, [pc, #468]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81076c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81076c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81076c6:	4b73      	ldr	r3, [pc, #460]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	f003 0304 	and.w	r3, r3, #4
 81076ce:	2b04      	cmp	r3, #4
 81076d0:	d10c      	bne.n	81076ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81076d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d109      	bne.n	81076ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076d8:	4b6e      	ldr	r3, [pc, #440]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076da:	681b      	ldr	r3, [r3, #0]
 81076dc:	08db      	lsrs	r3, r3, #3
 81076de:	f003 0303 	and.w	r3, r3, #3
 81076e2:	4a6d      	ldr	r2, [pc, #436]	@ (8107898 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81076e4:	fa22 f303 	lsr.w	r3, r2, r3
 81076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81076ea:	e01f      	b.n	810772c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81076ec:	4b69      	ldr	r3, [pc, #420]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076ee:	681b      	ldr	r3, [r3, #0]
 81076f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81076f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81076f8:	d106      	bne.n	8107708 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81076fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81076fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107700:	d102      	bne.n	8107708 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107702:	4b66      	ldr	r3, [pc, #408]	@ (810789c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107706:	e011      	b.n	810772c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107708:	4b62      	ldr	r3, [pc, #392]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810770a:	681b      	ldr	r3, [r3, #0]
 810770c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107714:	d106      	bne.n	8107724 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8107716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810771c:	d102      	bne.n	8107724 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810771e:	4b60      	ldr	r3, [pc, #384]	@ (81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107722:	e003      	b.n	810772c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107724:	2300      	movs	r3, #0
 8107726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107728:	f000 bce1 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810772c:	f000 bcdf 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107730:	4b5c      	ldr	r3, [pc, #368]	@ (81078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107734:	f000 bcdb 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107738:	2300      	movs	r3, #0
 810773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810773c:	f000 bcd7 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107744:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107748:	430b      	orrs	r3, r1
 810774a:	f040 80ad 	bne.w	81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810774e:	4b51      	ldr	r3, [pc, #324]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107752:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8107756:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810775a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810775e:	d056      	beq.n	810780e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107766:	f200 8090 	bhi.w	810788a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810776c:	2bc0      	cmp	r3, #192	@ 0xc0
 810776e:	f000 8088 	beq.w	8107882 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107774:	2bc0      	cmp	r3, #192	@ 0xc0
 8107776:	f200 8088 	bhi.w	810788a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810777c:	2b80      	cmp	r3, #128	@ 0x80
 810777e:	d032      	beq.n	81077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107782:	2b80      	cmp	r3, #128	@ 0x80
 8107784:	f200 8081 	bhi.w	810788a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810778a:	2b00      	cmp	r3, #0
 810778c:	d003      	beq.n	8107796 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107790:	2b40      	cmp	r3, #64	@ 0x40
 8107792:	d014      	beq.n	81077be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107794:	e079      	b.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107796:	4b3f      	ldr	r3, [pc, #252]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810779e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81077a2:	d108      	bne.n	81077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81077a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81077a8:	4618      	mov	r0, r3
 81077aa:	f000 ff67 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077b2:	f000 bc9c 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077b6:	2300      	movs	r3, #0
 81077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077ba:	f000 bc98 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81077be:	4b35      	ldr	r3, [pc, #212]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81077c0:	681b      	ldr	r3, [r3, #0]
 81077c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81077c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81077ca:	d108      	bne.n	81077de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077cc:	f107 0318 	add.w	r3, r7, #24
 81077d0:	4618      	mov	r0, r3
 81077d2:	f000 fcab 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81077d6:	69bb      	ldr	r3, [r7, #24]
 81077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077da:	f000 bc88 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077de:	2300      	movs	r3, #0
 81077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077e2:	f000 bc84 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81077e6:	4b2b      	ldr	r3, [pc, #172]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81077ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077f2:	d108      	bne.n	8107806 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81077f4:	f107 030c 	add.w	r3, r7, #12
 81077f8:	4618      	mov	r0, r3
 81077fa:	f000 fdeb 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107802:	f000 bc74 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107806:	2300      	movs	r3, #0
 8107808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810780a:	f000 bc70 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810780e:	4b21      	ldr	r3, [pc, #132]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107816:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107818:	4b1e      	ldr	r3, [pc, #120]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	f003 0304 	and.w	r3, r3, #4
 8107820:	2b04      	cmp	r3, #4
 8107822:	d10c      	bne.n	810783e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107826:	2b00      	cmp	r3, #0
 8107828:	d109      	bne.n	810783e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810782a:	4b1a      	ldr	r3, [pc, #104]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810782c:	681b      	ldr	r3, [r3, #0]
 810782e:	08db      	lsrs	r3, r3, #3
 8107830:	f003 0303 	and.w	r3, r3, #3
 8107834:	4a18      	ldr	r2, [pc, #96]	@ (8107898 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107836:	fa22 f303 	lsr.w	r3, r2, r3
 810783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810783c:	e01f      	b.n	810787e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810783e:	4b15      	ldr	r3, [pc, #84]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810784a:	d106      	bne.n	810785a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810784e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107852:	d102      	bne.n	810785a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107854:	4b11      	ldr	r3, [pc, #68]	@ (810789c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107858:	e011      	b.n	810787e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810785a:	4b0e      	ldr	r3, [pc, #56]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810785c:	681b      	ldr	r3, [r3, #0]
 810785e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107866:	d106      	bne.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810786a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810786e:	d102      	bne.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107870:	4b0b      	ldr	r3, [pc, #44]	@ (81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107874:	e003      	b.n	810787e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107876:	2300      	movs	r3, #0
 8107878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810787a:	f000 bc38 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810787e:	f000 bc36 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107882:	4b08      	ldr	r3, [pc, #32]	@ (81078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107886:	f000 bc32 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810788a:	2300      	movs	r3, #0
 810788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810788e:	f000 bc2e 	b.w	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107892:	bf00      	nop
 8107894:	58024400 	.word	0x58024400
 8107898:	03d09000 	.word	0x03d09000
 810789c:	003d0900 	.word	0x003d0900
 81078a0:	017d7840 	.word	0x017d7840
 81078a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81078a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81078b0:	430b      	orrs	r3, r1
 81078b2:	f040 809c 	bne.w	81079ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81078b6:	4b9e      	ldr	r3, [pc, #632]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81078b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81078ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81078be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81078c6:	d054      	beq.n	8107972 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81078ce:	f200 808b 	bhi.w	81079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81078d8:	f000 8083 	beq.w	81079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81078e2:	f200 8081 	bhi.w	81079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81078ec:	d02f      	beq.n	810794e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81078f4:	d878      	bhi.n	81079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078f8:	2b00      	cmp	r3, #0
 81078fa:	d004      	beq.n	8107906 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107902:	d012      	beq.n	810792a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107904:	e070      	b.n	81079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107906:	4b8a      	ldr	r3, [pc, #552]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107908:	681b      	ldr	r3, [r3, #0]
 810790a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810790e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107912:	d107      	bne.n	8107924 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107918:	4618      	mov	r0, r3
 810791a:	f000 feaf 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107922:	e3e4      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107924:	2300      	movs	r3, #0
 8107926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107928:	e3e1      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810792a:	4b81      	ldr	r3, [pc, #516]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810792c:	681b      	ldr	r3, [r3, #0]
 810792e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107936:	d107      	bne.n	8107948 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107938:	f107 0318 	add.w	r3, r7, #24
 810793c:	4618      	mov	r0, r3
 810793e:	f000 fbf5 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107942:	69bb      	ldr	r3, [r7, #24]
 8107944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107946:	e3d2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107948:	2300      	movs	r3, #0
 810794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810794c:	e3cf      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810794e:	4b78      	ldr	r3, [pc, #480]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107950:	681b      	ldr	r3, [r3, #0]
 8107952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810795a:	d107      	bne.n	810796c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810795c:	f107 030c 	add.w	r3, r7, #12
 8107960:	4618      	mov	r0, r3
 8107962:	f000 fd37 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810796a:	e3c0      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810796c:	2300      	movs	r3, #0
 810796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107970:	e3bd      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107972:	4b6f      	ldr	r3, [pc, #444]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810797a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810797c:	4b6c      	ldr	r3, [pc, #432]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810797e:	681b      	ldr	r3, [r3, #0]
 8107980:	f003 0304 	and.w	r3, r3, #4
 8107984:	2b04      	cmp	r3, #4
 8107986:	d10c      	bne.n	81079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810798a:	2b00      	cmp	r3, #0
 810798c:	d109      	bne.n	81079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810798e:	4b68      	ldr	r3, [pc, #416]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	08db      	lsrs	r3, r3, #3
 8107994:	f003 0303 	and.w	r3, r3, #3
 8107998:	4a66      	ldr	r2, [pc, #408]	@ (8107b34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810799a:	fa22 f303 	lsr.w	r3, r2, r3
 810799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079a0:	e01e      	b.n	81079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81079a2:	4b63      	ldr	r3, [pc, #396]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81079aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81079ae:	d106      	bne.n	81079be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81079b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81079b6:	d102      	bne.n	81079be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81079b8:	4b5f      	ldr	r3, [pc, #380]	@ (8107b38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079bc:	e010      	b.n	81079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81079be:	4b5c      	ldr	r3, [pc, #368]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81079c0:	681b      	ldr	r3, [r3, #0]
 81079c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81079c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81079ca:	d106      	bne.n	81079da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81079cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81079d2:	d102      	bne.n	81079da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81079d4:	4b59      	ldr	r3, [pc, #356]	@ (8107b3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81079d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079d8:	e002      	b.n	81079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81079da:	2300      	movs	r3, #0
 81079dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81079de:	e386      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81079e0:	e385      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81079e2:	4b57      	ldr	r3, [pc, #348]	@ (8107b40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079e6:	e382      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81079e8:	2300      	movs	r3, #0
 81079ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079ec:	e37f      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81079ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 81079f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81079f6:	430b      	orrs	r3, r1
 81079f8:	f040 80a7 	bne.w	8107b4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81079fc:	4b4c      	ldr	r3, [pc, #304]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81079fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a00:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107a04:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107a0c:	d055      	beq.n	8107aba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107a14:	f200 8096 	bhi.w	8107b44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107a1e:	f000 8084 	beq.w	8107b2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107a28:	f200 808c 	bhi.w	8107b44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107a32:	d030      	beq.n	8107a96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107a3a:	f200 8083 	bhi.w	8107b44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a40:	2b00      	cmp	r3, #0
 8107a42:	d004      	beq.n	8107a4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107a4a:	d012      	beq.n	8107a72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107a4c:	e07a      	b.n	8107b44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107a4e:	4b38      	ldr	r3, [pc, #224]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107a5a:	d107      	bne.n	8107a6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107a60:	4618      	mov	r0, r3
 8107a62:	f000 fe0b 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a6a:	e340      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a6c:	2300      	movs	r3, #0
 8107a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a70:	e33d      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107a72:	4b2f      	ldr	r3, [pc, #188]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107a7e:	d107      	bne.n	8107a90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a80:	f107 0318 	add.w	r3, r7, #24
 8107a84:	4618      	mov	r0, r3
 8107a86:	f000 fb51 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107a8a:	69bb      	ldr	r3, [r7, #24]
 8107a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a8e:	e32e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a90:	2300      	movs	r3, #0
 8107a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a94:	e32b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107a96:	4b26      	ldr	r3, [pc, #152]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a98:	681b      	ldr	r3, [r3, #0]
 8107a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107aa2:	d107      	bne.n	8107ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107aa4:	f107 030c 	add.w	r3, r7, #12
 8107aa8:	4618      	mov	r0, r3
 8107aaa:	f000 fc93 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107aae:	68fb      	ldr	r3, [r7, #12]
 8107ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ab2:	e31c      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ab4:	2300      	movs	r3, #0
 8107ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ab8:	e319      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107aba:	4b1d      	ldr	r3, [pc, #116]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107ac2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ac6:	681b      	ldr	r3, [r3, #0]
 8107ac8:	f003 0304 	and.w	r3, r3, #4
 8107acc:	2b04      	cmp	r3, #4
 8107ace:	d10c      	bne.n	8107aea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107ad2:	2b00      	cmp	r3, #0
 8107ad4:	d109      	bne.n	8107aea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ad6:	4b16      	ldr	r3, [pc, #88]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	08db      	lsrs	r3, r3, #3
 8107adc:	f003 0303 	and.w	r3, r3, #3
 8107ae0:	4a14      	ldr	r2, [pc, #80]	@ (8107b34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8107ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ae8:	e01e      	b.n	8107b28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107aea:	4b11      	ldr	r3, [pc, #68]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107af6:	d106      	bne.n	8107b06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107afe:	d102      	bne.n	8107b06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107b00:	4b0d      	ldr	r3, [pc, #52]	@ (8107b38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107b04:	e010      	b.n	8107b28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107b06:	4b0a      	ldr	r3, [pc, #40]	@ (8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107b12:	d106      	bne.n	8107b22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b1a:	d102      	bne.n	8107b22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107b1c:	4b07      	ldr	r3, [pc, #28]	@ (8107b3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107b20:	e002      	b.n	8107b28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107b22:	2300      	movs	r3, #0
 8107b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107b26:	e2e2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107b28:	e2e1      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107b2a:	4b05      	ldr	r3, [pc, #20]	@ (8107b40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b2e:	e2de      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107b30:	58024400 	.word	0x58024400
 8107b34:	03d09000 	.word	0x03d09000
 8107b38:	003d0900 	.word	0x003d0900
 8107b3c:	017d7840 	.word	0x017d7840
 8107b40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107b44:	2300      	movs	r3, #0
 8107b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b48:	e2d1      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107b4e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8107b52:	430b      	orrs	r3, r1
 8107b54:	f040 809c 	bne.w	8107c90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8107b58:	4b93      	ldr	r3, [pc, #588]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b5c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8107b60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107b68:	d054      	beq.n	8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8107b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107b70:	f200 808b 	bhi.w	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107b7a:	f000 8083 	beq.w	8107c84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8107b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107b84:	f200 8081 	bhi.w	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107b8e:	d02f      	beq.n	8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107b96:	d878      	bhi.n	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107b9a:	2b00      	cmp	r3, #0
 8107b9c:	d004      	beq.n	8107ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107ba4:	d012      	beq.n	8107bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107ba6:	e070      	b.n	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107ba8:	4b7f      	ldr	r3, [pc, #508]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107bb4:	d107      	bne.n	8107bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107bba:	4618      	mov	r0, r3
 8107bbc:	f000 fd5e 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107bc4:	e293      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107bc6:	2300      	movs	r3, #0
 8107bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bca:	e290      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107bcc:	4b76      	ldr	r3, [pc, #472]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107bd8:	d107      	bne.n	8107bea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107bda:	f107 0318 	add.w	r3, r7, #24
 8107bde:	4618      	mov	r0, r3
 8107be0:	f000 faa4 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107be4:	69bb      	ldr	r3, [r7, #24]
 8107be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107be8:	e281      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107bea:	2300      	movs	r3, #0
 8107bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bee:	e27e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107bf2:	681b      	ldr	r3, [r3, #0]
 8107bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107bfc:	d107      	bne.n	8107c0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107bfe:	f107 030c 	add.w	r3, r7, #12
 8107c02:	4618      	mov	r0, r3
 8107c04:	f000 fbe6 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107c08:	68fb      	ldr	r3, [r7, #12]
 8107c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c0c:	e26f      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c0e:	2300      	movs	r3, #0
 8107c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c12:	e26c      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107c14:	4b64      	ldr	r3, [pc, #400]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107c18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107c1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107c1e:	4b62      	ldr	r3, [pc, #392]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	f003 0304 	and.w	r3, r3, #4
 8107c26:	2b04      	cmp	r3, #4
 8107c28:	d10c      	bne.n	8107c44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107c2c:	2b00      	cmp	r3, #0
 8107c2e:	d109      	bne.n	8107c44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107c30:	4b5d      	ldr	r3, [pc, #372]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c32:	681b      	ldr	r3, [r3, #0]
 8107c34:	08db      	lsrs	r3, r3, #3
 8107c36:	f003 0303 	and.w	r3, r3, #3
 8107c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8107dac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8107c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107c42:	e01e      	b.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107c44:	4b58      	ldr	r3, [pc, #352]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c50:	d106      	bne.n	8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8107c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107c58:	d102      	bne.n	8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107c5a:	4b55      	ldr	r3, [pc, #340]	@ (8107db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107c5e:	e010      	b.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107c60:	4b51      	ldr	r3, [pc, #324]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107c6c:	d106      	bne.n	8107c7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8107c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107c74:	d102      	bne.n	8107c7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107c76:	4b4f      	ldr	r3, [pc, #316]	@ (8107db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107c7a:	e002      	b.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107c7c:	2300      	movs	r3, #0
 8107c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107c80:	e235      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107c82:	e234      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107c84:	4b4c      	ldr	r3, [pc, #304]	@ (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8107c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c88:	e231      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107c8a:	2300      	movs	r3, #0
 8107c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c8e:	e22e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107c94:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8107c98:	430b      	orrs	r3, r1
 8107c9a:	f040 808f 	bne.w	8107dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8107c9e:	4b42      	ldr	r3, [pc, #264]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ca2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8107ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107cae:	d06b      	beq.n	8107d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107cb6:	d874      	bhi.n	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107cbe:	d056      	beq.n	8107d6e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107cc6:	d86c      	bhi.n	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107cce:	d03b      	beq.n	8107d48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107cd6:	d864      	bhi.n	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107cde:	d021      	beq.n	8107d24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107ce6:	d85c      	bhi.n	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cea:	2b00      	cmp	r3, #0
 8107cec:	d004      	beq.n	8107cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107cf4:	d004      	beq.n	8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8107cf6:	e054      	b.n	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107cf8:	f7fe fa0a 	bl	8106110 <HAL_RCC_GetPCLK1Freq>
 8107cfc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107cfe:	e1f6      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107d00:	4b29      	ldr	r3, [pc, #164]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107d0c:	d107      	bne.n	8107d1e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d0e:	f107 0318 	add.w	r3, r7, #24
 8107d12:	4618      	mov	r0, r3
 8107d14:	f000 fa0a 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107d18:	69fb      	ldr	r3, [r7, #28]
 8107d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d1c:	e1e7      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d1e:	2300      	movs	r3, #0
 8107d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d22:	e1e4      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107d24:	4b20      	ldr	r3, [pc, #128]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d26:	681b      	ldr	r3, [r3, #0]
 8107d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d30:	d107      	bne.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107d32:	f107 030c 	add.w	r3, r7, #12
 8107d36:	4618      	mov	r0, r3
 8107d38:	f000 fb4c 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107d3c:	693b      	ldr	r3, [r7, #16]
 8107d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d40:	e1d5      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d42:	2300      	movs	r3, #0
 8107d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d46:	e1d2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107d48:	4b17      	ldr	r3, [pc, #92]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d4a:	681b      	ldr	r3, [r3, #0]
 8107d4c:	f003 0304 	and.w	r3, r3, #4
 8107d50:	2b04      	cmp	r3, #4
 8107d52:	d109      	bne.n	8107d68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107d54:	4b14      	ldr	r3, [pc, #80]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	08db      	lsrs	r3, r3, #3
 8107d5a:	f003 0303 	and.w	r3, r3, #3
 8107d5e:	4a13      	ldr	r2, [pc, #76]	@ (8107dac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107d60:	fa22 f303 	lsr.w	r3, r2, r3
 8107d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d66:	e1c2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d68:	2300      	movs	r3, #0
 8107d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d6c:	e1bf      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d70:	681b      	ldr	r3, [r3, #0]
 8107d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107d7a:	d102      	bne.n	8107d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8107d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8107db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d80:	e1b5      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d82:	2300      	movs	r3, #0
 8107d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d86:	e1b2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107d88:	4b07      	ldr	r3, [pc, #28]	@ (8107da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d8a:	681b      	ldr	r3, [r3, #0]
 8107d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d94:	d102      	bne.n	8107d9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107d96:	4b07      	ldr	r3, [pc, #28]	@ (8107db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d9a:	e1a8      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d9c:	2300      	movs	r3, #0
 8107d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107da0:	e1a5      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107da2:	2300      	movs	r3, #0
 8107da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107da6:	e1a2      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107da8:	58024400 	.word	0x58024400
 8107dac:	03d09000 	.word	0x03d09000
 8107db0:	003d0900 	.word	0x003d0900
 8107db4:	017d7840 	.word	0x017d7840
 8107db8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107dc0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8107dc4:	430b      	orrs	r3, r1
 8107dc6:	d173      	bne.n	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107dc8:	4b9c      	ldr	r3, [pc, #624]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107dd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107dd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107dd8:	d02f      	beq.n	8107e3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107de0:	d863      	bhi.n	8107eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8107de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107de4:	2b00      	cmp	r3, #0
 8107de6:	d004      	beq.n	8107df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107dee:	d012      	beq.n	8107e16 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107df0:	e05b      	b.n	8107eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107df2:	4b92      	ldr	r3, [pc, #584]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107dfe:	d107      	bne.n	8107e10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e00:	f107 0318 	add.w	r3, r7, #24
 8107e04:	4618      	mov	r0, r3
 8107e06:	f000 f991 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107e0a:	69bb      	ldr	r3, [r7, #24]
 8107e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e0e:	e16e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e10:	2300      	movs	r3, #0
 8107e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e14:	e16b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107e16:	4b89      	ldr	r3, [pc, #548]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e18:	681b      	ldr	r3, [r3, #0]
 8107e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e22:	d107      	bne.n	8107e34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e24:	f107 030c 	add.w	r3, r7, #12
 8107e28:	4618      	mov	r0, r3
 8107e2a:	f000 fad3 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107e2e:	697b      	ldr	r3, [r7, #20]
 8107e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e32:	e15c      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e34:	2300      	movs	r3, #0
 8107e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e38:	e159      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107e3a:	4b80      	ldr	r3, [pc, #512]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107e42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e44:	4b7d      	ldr	r3, [pc, #500]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	f003 0304 	and.w	r3, r3, #4
 8107e4c:	2b04      	cmp	r3, #4
 8107e4e:	d10c      	bne.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8107e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e52:	2b00      	cmp	r3, #0
 8107e54:	d109      	bne.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e56:	4b79      	ldr	r3, [pc, #484]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	08db      	lsrs	r3, r3, #3
 8107e5c:	f003 0303 	and.w	r3, r3, #3
 8107e60:	4a77      	ldr	r2, [pc, #476]	@ (8108040 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107e62:	fa22 f303 	lsr.w	r3, r2, r3
 8107e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e68:	e01e      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e6a:	4b74      	ldr	r3, [pc, #464]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e76:	d106      	bne.n	8107e86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107e7e:	d102      	bne.n	8107e86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e80:	4b70      	ldr	r3, [pc, #448]	@ (8108044 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e84:	e010      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e86:	4b6d      	ldr	r3, [pc, #436]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e92:	d106      	bne.n	8107ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e9a:	d102      	bne.n	8107ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8108048 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ea0:	e002      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107ea2:	2300      	movs	r3, #0
 8107ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107ea6:	e122      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ea8:	e121      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107eaa:	2300      	movs	r3, #0
 8107eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107eae:	e11e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107eb4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8107eb8:	430b      	orrs	r3, r1
 8107eba:	d133      	bne.n	8107f24 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107ebc:	4b5f      	ldr	r3, [pc, #380]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107ec4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ec8:	2b00      	cmp	r3, #0
 8107eca:	d004      	beq.n	8107ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107ed2:	d012      	beq.n	8107efa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107ed4:	e023      	b.n	8107f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107ed6:	4b59      	ldr	r3, [pc, #356]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107ee2:	d107      	bne.n	8107ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107ee8:	4618      	mov	r0, r3
 8107eea:	f000 fbc7 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ef2:	e0fc      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ef4:	2300      	movs	r3, #0
 8107ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ef8:	e0f9      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107efa:	4b50      	ldr	r3, [pc, #320]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107efc:	681b      	ldr	r3, [r3, #0]
 8107efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107f06:	d107      	bne.n	8107f18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f08:	f107 0318 	add.w	r3, r7, #24
 8107f0c:	4618      	mov	r0, r3
 8107f0e:	f000 f90d 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107f12:	6a3b      	ldr	r3, [r7, #32]
 8107f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f16:	e0ea      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f18:	2300      	movs	r3, #0
 8107f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f1c:	e0e7      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107f1e:	2300      	movs	r3, #0
 8107f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f22:	e0e4      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107f28:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8107f2c:	430b      	orrs	r3, r1
 8107f2e:	f040 808d 	bne.w	810804c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107f32:	4b42      	ldr	r3, [pc, #264]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107f36:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8107f3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107f42:	d06b      	beq.n	810801c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107f4a:	d874      	bhi.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107f52:	d056      	beq.n	8108002 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8107f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107f5a:	d86c      	bhi.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107f62:	d03b      	beq.n	8107fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107f6a:	d864      	bhi.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f72:	d021      	beq.n	8107fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f7a:	d85c      	bhi.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f7e:	2b00      	cmp	r3, #0
 8107f80:	d004      	beq.n	8107f8c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8107f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107f88:	d004      	beq.n	8107f94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107f8a:	e054      	b.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107f8c:	f000 f8b8 	bl	8108100 <HAL_RCCEx_GetD3PCLK1Freq>
 8107f90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107f92:	e0ac      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f94:	4b29      	ldr	r3, [pc, #164]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107fa0:	d107      	bne.n	8107fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107fa2:	f107 0318 	add.w	r3, r7, #24
 8107fa6:	4618      	mov	r0, r3
 8107fa8:	f000 f8c0 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107fac:	69fb      	ldr	r3, [r7, #28]
 8107fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107fb0:	e09d      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107fb2:	2300      	movs	r3, #0
 8107fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fb6:	e09a      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107fb8:	4b20      	ldr	r3, [pc, #128]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107fc4:	d107      	bne.n	8107fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107fc6:	f107 030c 	add.w	r3, r7, #12
 8107fca:	4618      	mov	r0, r3
 8107fcc:	f000 fa02 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107fd0:	693b      	ldr	r3, [r7, #16]
 8107fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107fd4:	e08b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107fd6:	2300      	movs	r3, #0
 8107fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fda:	e088      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107fdc:	4b17      	ldr	r3, [pc, #92]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	f003 0304 	and.w	r3, r3, #4
 8107fe4:	2b04      	cmp	r3, #4
 8107fe6:	d109      	bne.n	8107ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107fe8:	4b14      	ldr	r3, [pc, #80]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	08db      	lsrs	r3, r3, #3
 8107fee:	f003 0303 	and.w	r3, r3, #3
 8107ff2:	4a13      	ldr	r2, [pc, #76]	@ (8108040 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8107ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ffa:	e078      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ffc:	2300      	movs	r3, #0
 8107ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108000:	e075      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108002:	4b0e      	ldr	r3, [pc, #56]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108004:	681b      	ldr	r3, [r3, #0]
 8108006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810800a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810800e:	d102      	bne.n	8108016 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8108010:	4b0c      	ldr	r3, [pc, #48]	@ (8108044 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108014:	e06b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108016:	2300      	movs	r3, #0
 8108018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810801a:	e068      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810801c:	4b07      	ldr	r3, [pc, #28]	@ (810803c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108028:	d102      	bne.n	8108030 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810802a:	4b07      	ldr	r3, [pc, #28]	@ (8108048 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810802c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810802e:	e05e      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108030:	2300      	movs	r3, #0
 8108032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108034:	e05b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8108036:	2300      	movs	r3, #0
 8108038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810803a:	e058      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810803c:	58024400 	.word	0x58024400
 8108040:	03d09000 	.word	0x03d09000
 8108044:	003d0900 	.word	0x003d0900
 8108048:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108050:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8108054:	430b      	orrs	r3, r1
 8108056:	d148      	bne.n	81080ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108058:	4b27      	ldr	r3, [pc, #156]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810805a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810805c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108060:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108068:	d02a      	beq.n	81080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810806c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108070:	d838      	bhi.n	81080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108074:	2b00      	cmp	r3, #0
 8108076:	d004      	beq.n	8108082 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810807a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810807e:	d00d      	beq.n	810809c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108080:	e030      	b.n	81080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108082:	4b1d      	ldr	r3, [pc, #116]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108084:	681b      	ldr	r3, [r3, #0]
 8108086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810808a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810808e:	d102      	bne.n	8108096 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108090:	4b1a      	ldr	r3, [pc, #104]	@ (81080fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108094:	e02b      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108096:	2300      	movs	r3, #0
 8108098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810809a:	e028      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810809c:	4b16      	ldr	r3, [pc, #88]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810809e:	681b      	ldr	r3, [r3, #0]
 81080a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81080a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81080a8:	d107      	bne.n	81080ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81080aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81080ae:	4618      	mov	r0, r3
 81080b0:	f000 fae4 	bl	810867c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81080b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080b8:	e019      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080ba:	2300      	movs	r3, #0
 81080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080be:	e016      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81080c0:	4b0d      	ldr	r3, [pc, #52]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81080c2:	681b      	ldr	r3, [r3, #0]
 81080c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81080c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81080cc:	d107      	bne.n	81080de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81080ce:	f107 0318 	add.w	r3, r7, #24
 81080d2:	4618      	mov	r0, r3
 81080d4:	f000 f82a 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81080d8:	69fb      	ldr	r3, [r7, #28]
 81080da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080dc:	e007      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080de:	2300      	movs	r3, #0
 81080e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080e2:	e004      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81080e4:	2300      	movs	r3, #0
 81080e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080e8:	e001      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81080ea:	2300      	movs	r3, #0
 81080ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81080ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81080f0:	4618      	mov	r0, r3
 81080f2:	3740      	adds	r7, #64	@ 0x40
 81080f4:	46bd      	mov	sp, r7
 81080f6:	bd80      	pop	{r7, pc}
 81080f8:	58024400 	.word	0x58024400
 81080fc:	017d7840 	.word	0x017d7840

08108100 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108100:	b580      	push	{r7, lr}
 8108102:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108104:	f7fd ffd2 	bl	81060ac <HAL_RCC_GetHCLKFreq>
 8108108:	4602      	mov	r2, r0
 810810a:	4b06      	ldr	r3, [pc, #24]	@ (8108124 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810810c:	6a1b      	ldr	r3, [r3, #32]
 810810e:	091b      	lsrs	r3, r3, #4
 8108110:	f003 0307 	and.w	r3, r3, #7
 8108114:	4904      	ldr	r1, [pc, #16]	@ (8108128 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108116:	5ccb      	ldrb	r3, [r1, r3]
 8108118:	f003 031f 	and.w	r3, r3, #31
 810811c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108120:	4618      	mov	r0, r3
 8108122:	bd80      	pop	{r7, pc}
 8108124:	58024400 	.word	0x58024400
 8108128:	0811738c 	.word	0x0811738c

0810812c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810812c:	b480      	push	{r7}
 810812e:	b089      	sub	sp, #36	@ 0x24
 8108130:	af00      	add	r7, sp, #0
 8108132:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108134:	4ba1      	ldr	r3, [pc, #644]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108138:	f003 0303 	and.w	r3, r3, #3
 810813c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810813e:	4b9f      	ldr	r3, [pc, #636]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108142:	0b1b      	lsrs	r3, r3, #12
 8108144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108148:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810814a:	4b9c      	ldr	r3, [pc, #624]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810814e:	091b      	lsrs	r3, r3, #4
 8108150:	f003 0301 	and.w	r3, r3, #1
 8108154:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108156:	4b99      	ldr	r3, [pc, #612]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810815a:	08db      	lsrs	r3, r3, #3
 810815c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108160:	693a      	ldr	r2, [r7, #16]
 8108162:	fb02 f303 	mul.w	r3, r2, r3
 8108166:	ee07 3a90 	vmov	s15, r3
 810816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810816e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108172:	697b      	ldr	r3, [r7, #20]
 8108174:	2b00      	cmp	r3, #0
 8108176:	f000 8111 	beq.w	810839c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810817a:	69bb      	ldr	r3, [r7, #24]
 810817c:	2b02      	cmp	r3, #2
 810817e:	f000 8083 	beq.w	8108288 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108182:	69bb      	ldr	r3, [r7, #24]
 8108184:	2b02      	cmp	r3, #2
 8108186:	f200 80a1 	bhi.w	81082cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810818a:	69bb      	ldr	r3, [r7, #24]
 810818c:	2b00      	cmp	r3, #0
 810818e:	d003      	beq.n	8108198 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108190:	69bb      	ldr	r3, [r7, #24]
 8108192:	2b01      	cmp	r3, #1
 8108194:	d056      	beq.n	8108244 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108196:	e099      	b.n	81082cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108198:	4b88      	ldr	r3, [pc, #544]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810819a:	681b      	ldr	r3, [r3, #0]
 810819c:	f003 0320 	and.w	r3, r3, #32
 81081a0:	2b00      	cmp	r3, #0
 81081a2:	d02d      	beq.n	8108200 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81081a4:	4b85      	ldr	r3, [pc, #532]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	08db      	lsrs	r3, r3, #3
 81081aa:	f003 0303 	and.w	r3, r3, #3
 81081ae:	4a84      	ldr	r2, [pc, #528]	@ (81083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81081b0:	fa22 f303 	lsr.w	r3, r2, r3
 81081b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81081b6:	68bb      	ldr	r3, [r7, #8]
 81081b8:	ee07 3a90 	vmov	s15, r3
 81081bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81081c0:	697b      	ldr	r3, [r7, #20]
 81081c2:	ee07 3a90 	vmov	s15, r3
 81081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81081ce:	4b7b      	ldr	r3, [pc, #492]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81081d6:	ee07 3a90 	vmov	s15, r3
 81081da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81081de:	ed97 6a03 	vldr	s12, [r7, #12]
 81081e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81081e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81081f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81081fe:	e087      	b.n	8108310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108200:	697b      	ldr	r3, [r7, #20]
 8108202:	ee07 3a90 	vmov	s15, r3
 8108206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810820a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810820e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108212:	4b6a      	ldr	r3, [pc, #424]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810821a:	ee07 3a90 	vmov	s15, r3
 810821e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108222:	ed97 6a03 	vldr	s12, [r7, #12]
 8108226:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810822a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810822e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810823e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108242:	e065      	b.n	8108310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108244:	697b      	ldr	r3, [r7, #20]
 8108246:	ee07 3a90 	vmov	s15, r3
 810824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810824e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81083cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108256:	4b59      	ldr	r3, [pc, #356]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810825a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810825e:	ee07 3a90 	vmov	s15, r3
 8108262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108266:	ed97 6a03 	vldr	s12, [r7, #12]
 810826a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810826e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810827a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810827e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108286:	e043      	b.n	8108310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108288:	697b      	ldr	r3, [r7, #20]
 810828a:	ee07 3a90 	vmov	s15, r3
 810828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108292:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810829a:	4b48      	ldr	r3, [pc, #288]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810829e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082a2:	ee07 3a90 	vmov	s15, r3
 81082a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81082ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81082b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81082ca:	e021      	b.n	8108310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81082cc:	697b      	ldr	r3, [r7, #20]
 81082ce:	ee07 3a90 	vmov	s15, r3
 81082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81083cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082de:	4b37      	ldr	r3, [pc, #220]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082e6:	ee07 3a90 	vmov	s15, r3
 81082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81082f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108306:	ee67 7a27 	vmul.f32	s15, s14, s15
 810830a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810830e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108310:	4b2a      	ldr	r3, [pc, #168]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108314:	0a5b      	lsrs	r3, r3, #9
 8108316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810831a:	ee07 3a90 	vmov	s15, r3
 810831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108326:	ee37 7a87 	vadd.f32	s14, s15, s14
 810832a:	edd7 6a07 	vldr	s13, [r7, #28]
 810832e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108336:	ee17 2a90 	vmov	r2, s15
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810833e:	4b1f      	ldr	r3, [pc, #124]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108342:	0c1b      	lsrs	r3, r3, #16
 8108344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108348:	ee07 3a90 	vmov	s15, r3
 810834c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108358:	edd7 6a07 	vldr	s13, [r7, #28]
 810835c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108364:	ee17 2a90 	vmov	r2, s15
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810836c:	4b13      	ldr	r3, [pc, #76]	@ (81083bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108370:	0e1b      	lsrs	r3, r3, #24
 8108372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108376:	ee07 3a90 	vmov	s15, r3
 810837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810837e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108386:	edd7 6a07 	vldr	s13, [r7, #28]
 810838a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810838e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108392:	ee17 2a90 	vmov	r2, s15
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810839a:	e008      	b.n	81083ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	2200      	movs	r2, #0
 81083a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81083a2:	687b      	ldr	r3, [r7, #4]
 81083a4:	2200      	movs	r2, #0
 81083a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81083a8:	687b      	ldr	r3, [r7, #4]
 81083aa:	2200      	movs	r2, #0
 81083ac:	609a      	str	r2, [r3, #8]
}
 81083ae:	bf00      	nop
 81083b0:	3724      	adds	r7, #36	@ 0x24
 81083b2:	46bd      	mov	sp, r7
 81083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083b8:	4770      	bx	lr
 81083ba:	bf00      	nop
 81083bc:	58024400 	.word	0x58024400
 81083c0:	03d09000 	.word	0x03d09000
 81083c4:	46000000 	.word	0x46000000
 81083c8:	4c742400 	.word	0x4c742400
 81083cc:	4a742400 	.word	0x4a742400
 81083d0:	4bbebc20 	.word	0x4bbebc20

081083d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81083d4:	b480      	push	{r7}
 81083d6:	b089      	sub	sp, #36	@ 0x24
 81083d8:	af00      	add	r7, sp, #0
 81083da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81083dc:	4ba1      	ldr	r3, [pc, #644]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81083e0:	f003 0303 	and.w	r3, r3, #3
 81083e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81083e6:	4b9f      	ldr	r3, [pc, #636]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81083ea:	0d1b      	lsrs	r3, r3, #20
 81083ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81083f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81083f2:	4b9c      	ldr	r3, [pc, #624]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81083f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083f6:	0a1b      	lsrs	r3, r3, #8
 81083f8:	f003 0301 	and.w	r3, r3, #1
 81083fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81083fe:	4b99      	ldr	r3, [pc, #612]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108402:	08db      	lsrs	r3, r3, #3
 8108404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108408:	693a      	ldr	r2, [r7, #16]
 810840a:	fb02 f303 	mul.w	r3, r2, r3
 810840e:	ee07 3a90 	vmov	s15, r3
 8108412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810841a:	697b      	ldr	r3, [r7, #20]
 810841c:	2b00      	cmp	r3, #0
 810841e:	f000 8111 	beq.w	8108644 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108422:	69bb      	ldr	r3, [r7, #24]
 8108424:	2b02      	cmp	r3, #2
 8108426:	f000 8083 	beq.w	8108530 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810842a:	69bb      	ldr	r3, [r7, #24]
 810842c:	2b02      	cmp	r3, #2
 810842e:	f200 80a1 	bhi.w	8108574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108432:	69bb      	ldr	r3, [r7, #24]
 8108434:	2b00      	cmp	r3, #0
 8108436:	d003      	beq.n	8108440 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108438:	69bb      	ldr	r3, [r7, #24]
 810843a:	2b01      	cmp	r3, #1
 810843c:	d056      	beq.n	81084ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810843e:	e099      	b.n	8108574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108440:	4b88      	ldr	r3, [pc, #544]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108442:	681b      	ldr	r3, [r3, #0]
 8108444:	f003 0320 	and.w	r3, r3, #32
 8108448:	2b00      	cmp	r3, #0
 810844a:	d02d      	beq.n	81084a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810844c:	4b85      	ldr	r3, [pc, #532]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810844e:	681b      	ldr	r3, [r3, #0]
 8108450:	08db      	lsrs	r3, r3, #3
 8108452:	f003 0303 	and.w	r3, r3, #3
 8108456:	4a84      	ldr	r2, [pc, #528]	@ (8108668 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108458:	fa22 f303 	lsr.w	r3, r2, r3
 810845c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810845e:	68bb      	ldr	r3, [r7, #8]
 8108460:	ee07 3a90 	vmov	s15, r3
 8108464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108468:	697b      	ldr	r3, [r7, #20]
 810846a:	ee07 3a90 	vmov	s15, r3
 810846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108476:	4b7b      	ldr	r3, [pc, #492]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810847e:	ee07 3a90 	vmov	s15, r3
 8108482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108486:	ed97 6a03 	vldr	s12, [r7, #12]
 810848a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810866c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81084a6:	e087      	b.n	81085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81084a8:	697b      	ldr	r3, [r7, #20]
 81084aa:	ee07 3a90 	vmov	s15, r3
 81084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108670 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084ba:	4b6a      	ldr	r3, [pc, #424]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084c2:	ee07 3a90 	vmov	s15, r3
 81084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81084ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810866c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81084ea:	e065      	b.n	81085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81084ec:	697b      	ldr	r3, [r7, #20]
 81084ee:	ee07 3a90 	vmov	s15, r3
 81084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084fe:	4b59      	ldr	r3, [pc, #356]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108506:	ee07 3a90 	vmov	s15, r3
 810850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810850e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108512:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810866c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810851e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108526:	ee67 7a27 	vmul.f32	s15, s14, s15
 810852a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810852e:	e043      	b.n	81085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108530:	697b      	ldr	r3, [r7, #20]
 8108532:	ee07 3a90 	vmov	s15, r3
 8108536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810853a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108542:	4b48      	ldr	r3, [pc, #288]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810854a:	ee07 3a90 	vmov	s15, r3
 810854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108552:	ed97 6a03 	vldr	s12, [r7, #12]
 8108556:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810866c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810856e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108572:	e021      	b.n	81085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108574:	697b      	ldr	r3, [r7, #20]
 8108576:	ee07 3a90 	vmov	s15, r3
 810857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810857e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108586:	4b37      	ldr	r3, [pc, #220]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810858e:	ee07 3a90 	vmov	s15, r3
 8108592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108596:	ed97 6a03 	vldr	s12, [r7, #12]
 810859a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810866c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81085b8:	4b2a      	ldr	r3, [pc, #168]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81085bc:	0a5b      	lsrs	r3, r3, #9
 81085be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81085c2:	ee07 3a90 	vmov	s15, r3
 81085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81085ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81085d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81085d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81085da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81085de:	ee17 2a90 	vmov	r2, s15
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81085e6:	4b1f      	ldr	r3, [pc, #124]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81085ea:	0c1b      	lsrs	r3, r3, #16
 81085ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81085f0:	ee07 3a90 	vmov	s15, r3
 81085f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81085fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108600:	edd7 6a07 	vldr	s13, [r7, #28]
 8108604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810860c:	ee17 2a90 	vmov	r2, s15
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108614:	4b13      	ldr	r3, [pc, #76]	@ (8108664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108618:	0e1b      	lsrs	r3, r3, #24
 810861a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810861e:	ee07 3a90 	vmov	s15, r3
 8108622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810862a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810862e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810863a:	ee17 2a90 	vmov	r2, s15
 810863e:	687b      	ldr	r3, [r7, #4]
 8108640:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108642:	e008      	b.n	8108656 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	2200      	movs	r2, #0
 8108648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	2200      	movs	r2, #0
 810864e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	2200      	movs	r2, #0
 8108654:	609a      	str	r2, [r3, #8]
}
 8108656:	bf00      	nop
 8108658:	3724      	adds	r7, #36	@ 0x24
 810865a:	46bd      	mov	sp, r7
 810865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108660:	4770      	bx	lr
 8108662:	bf00      	nop
 8108664:	58024400 	.word	0x58024400
 8108668:	03d09000 	.word	0x03d09000
 810866c:	46000000 	.word	0x46000000
 8108670:	4c742400 	.word	0x4c742400
 8108674:	4a742400 	.word	0x4a742400
 8108678:	4bbebc20 	.word	0x4bbebc20

0810867c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810867c:	b480      	push	{r7}
 810867e:	b089      	sub	sp, #36	@ 0x24
 8108680:	af00      	add	r7, sp, #0
 8108682:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108684:	4ba0      	ldr	r3, [pc, #640]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108688:	f003 0303 	and.w	r3, r3, #3
 810868c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810868e:	4b9e      	ldr	r3, [pc, #632]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108692:	091b      	lsrs	r3, r3, #4
 8108694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108698:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810869a:	4b9b      	ldr	r3, [pc, #620]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810869e:	f003 0301 	and.w	r3, r3, #1
 81086a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81086a4:	4b98      	ldr	r3, [pc, #608]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81086a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81086a8:	08db      	lsrs	r3, r3, #3
 81086aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81086ae:	693a      	ldr	r2, [r7, #16]
 81086b0:	fb02 f303 	mul.w	r3, r2, r3
 81086b4:	ee07 3a90 	vmov	s15, r3
 81086b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81086c0:	697b      	ldr	r3, [r7, #20]
 81086c2:	2b00      	cmp	r3, #0
 81086c4:	f000 8111 	beq.w	81088ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81086c8:	69bb      	ldr	r3, [r7, #24]
 81086ca:	2b02      	cmp	r3, #2
 81086cc:	f000 8083 	beq.w	81087d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81086d0:	69bb      	ldr	r3, [r7, #24]
 81086d2:	2b02      	cmp	r3, #2
 81086d4:	f200 80a1 	bhi.w	810881a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81086d8:	69bb      	ldr	r3, [r7, #24]
 81086da:	2b00      	cmp	r3, #0
 81086dc:	d003      	beq.n	81086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81086de:	69bb      	ldr	r3, [r7, #24]
 81086e0:	2b01      	cmp	r3, #1
 81086e2:	d056      	beq.n	8108792 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81086e4:	e099      	b.n	810881a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81086e6:	4b88      	ldr	r3, [pc, #544]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81086e8:	681b      	ldr	r3, [r3, #0]
 81086ea:	f003 0320 	and.w	r3, r3, #32
 81086ee:	2b00      	cmp	r3, #0
 81086f0:	d02d      	beq.n	810874e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81086f2:	4b85      	ldr	r3, [pc, #532]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	08db      	lsrs	r3, r3, #3
 81086f8:	f003 0303 	and.w	r3, r3, #3
 81086fc:	4a83      	ldr	r2, [pc, #524]	@ (810890c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81086fe:	fa22 f303 	lsr.w	r3, r2, r3
 8108702:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108704:	68bb      	ldr	r3, [r7, #8]
 8108706:	ee07 3a90 	vmov	s15, r3
 810870a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810870e:	697b      	ldr	r3, [r7, #20]
 8108710:	ee07 3a90 	vmov	s15, r3
 8108714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810871c:	4b7a      	ldr	r3, [pc, #488]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810871e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108724:	ee07 3a90 	vmov	s15, r3
 8108728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810872c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108730:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810873c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108748:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810874c:	e087      	b.n	810885e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810874e:	697b      	ldr	r3, [r7, #20]
 8108750:	ee07 3a90 	vmov	s15, r3
 8108754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108758:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108914 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810875c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108760:	4b69      	ldr	r3, [pc, #420]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108768:	ee07 3a90 	vmov	s15, r3
 810876c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108770:	ed97 6a03 	vldr	s12, [r7, #12]
 8108774:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810877c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108788:	ee67 7a27 	vmul.f32	s15, s14, s15
 810878c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108790:	e065      	b.n	810885e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108792:	697b      	ldr	r3, [r7, #20]
 8108794:	ee07 3a90 	vmov	s15, r3
 8108798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810879c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108918 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81087a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087a4:	4b58      	ldr	r3, [pc, #352]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81087a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81087a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087ac:	ee07 3a90 	vmov	s15, r3
 81087b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81087b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81087bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81087d4:	e043      	b.n	810885e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81087d6:	697b      	ldr	r3, [r7, #20]
 81087d8:	ee07 3a90 	vmov	s15, r3
 81087dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810891c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81087e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087e8:	4b47      	ldr	r3, [pc, #284]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81087ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087f0:	ee07 3a90 	vmov	s15, r3
 81087f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087f8:	ed97 6a03 	vldr	s12, [r7, #12]
 81087fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810880c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108814:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108818:	e021      	b.n	810885e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810881a:	697b      	ldr	r3, [r7, #20]
 810881c:	ee07 3a90 	vmov	s15, r3
 8108820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108824:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108914 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810882c:	4b36      	ldr	r3, [pc, #216]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810882e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108834:	ee07 3a90 	vmov	s15, r3
 8108838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810883c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108840:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810884c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108858:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810885c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810885e:	4b2a      	ldr	r3, [pc, #168]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108862:	0a5b      	lsrs	r3, r3, #9
 8108864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108868:	ee07 3a90 	vmov	s15, r3
 810886c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108878:	edd7 6a07 	vldr	s13, [r7, #28]
 810887c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108884:	ee17 2a90 	vmov	r2, s15
 8108888:	687b      	ldr	r3, [r7, #4]
 810888a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810888c:	4b1e      	ldr	r3, [pc, #120]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108890:	0c1b      	lsrs	r3, r3, #16
 8108892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108896:	ee07 3a90 	vmov	s15, r3
 810889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810889e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81088a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81088a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81088aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81088ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81088b2:	ee17 2a90 	vmov	r2, s15
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81088ba:	4b13      	ldr	r3, [pc, #76]	@ (8108908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81088be:	0e1b      	lsrs	r3, r3, #24
 81088c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81088c4:	ee07 3a90 	vmov	s15, r3
 81088c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81088d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81088d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81088d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81088dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81088e0:	ee17 2a90 	vmov	r2, s15
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81088e8:	e008      	b.n	81088fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81088ea:	687b      	ldr	r3, [r7, #4]
 81088ec:	2200      	movs	r2, #0
 81088ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	2200      	movs	r2, #0
 81088f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	2200      	movs	r2, #0
 81088fa:	609a      	str	r2, [r3, #8]
}
 81088fc:	bf00      	nop
 81088fe:	3724      	adds	r7, #36	@ 0x24
 8108900:	46bd      	mov	sp, r7
 8108902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108906:	4770      	bx	lr
 8108908:	58024400 	.word	0x58024400
 810890c:	03d09000 	.word	0x03d09000
 8108910:	46000000 	.word	0x46000000
 8108914:	4c742400 	.word	0x4c742400
 8108918:	4a742400 	.word	0x4a742400
 810891c:	4bbebc20 	.word	0x4bbebc20

08108920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108920:	b580      	push	{r7, lr}
 8108922:	b084      	sub	sp, #16
 8108924:	af00      	add	r7, sp, #0
 8108926:	6078      	str	r0, [r7, #4]
 8108928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810892a:	2300      	movs	r3, #0
 810892c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810892e:	4b54      	ldr	r3, [pc, #336]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108932:	f003 0303 	and.w	r3, r3, #3
 8108936:	2b03      	cmp	r3, #3
 8108938:	d101      	bne.n	810893e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810893a:	2301      	movs	r3, #1
 810893c:	e09b      	b.n	8108a76 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810893e:	4b50      	ldr	r3, [pc, #320]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108940:	681b      	ldr	r3, [r3, #0]
 8108942:	4a4f      	ldr	r2, [pc, #316]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108944:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810894a:	f7f9 fe43 	bl	81025d4 <HAL_GetTick>
 810894e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108950:	e008      	b.n	8108964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108952:	f7f9 fe3f 	bl	81025d4 <HAL_GetTick>
 8108956:	4602      	mov	r2, r0
 8108958:	68bb      	ldr	r3, [r7, #8]
 810895a:	1ad3      	subs	r3, r2, r3
 810895c:	2b02      	cmp	r3, #2
 810895e:	d901      	bls.n	8108964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108960:	2303      	movs	r3, #3
 8108962:	e088      	b.n	8108a76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108964:	4b46      	ldr	r3, [pc, #280]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108966:	681b      	ldr	r3, [r3, #0]
 8108968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810896c:	2b00      	cmp	r3, #0
 810896e:	d1f0      	bne.n	8108952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108970:	4b43      	ldr	r3, [pc, #268]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108974:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	681b      	ldr	r3, [r3, #0]
 810897c:	031b      	lsls	r3, r3, #12
 810897e:	4940      	ldr	r1, [pc, #256]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108980:	4313      	orrs	r3, r2
 8108982:	628b      	str	r3, [r1, #40]	@ 0x28
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	685b      	ldr	r3, [r3, #4]
 8108988:	3b01      	subs	r3, #1
 810898a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	689b      	ldr	r3, [r3, #8]
 8108992:	3b01      	subs	r3, #1
 8108994:	025b      	lsls	r3, r3, #9
 8108996:	b29b      	uxth	r3, r3
 8108998:	431a      	orrs	r2, r3
 810899a:	687b      	ldr	r3, [r7, #4]
 810899c:	68db      	ldr	r3, [r3, #12]
 810899e:	3b01      	subs	r3, #1
 81089a0:	041b      	lsls	r3, r3, #16
 81089a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81089a6:	431a      	orrs	r2, r3
 81089a8:	687b      	ldr	r3, [r7, #4]
 81089aa:	691b      	ldr	r3, [r3, #16]
 81089ac:	3b01      	subs	r3, #1
 81089ae:	061b      	lsls	r3, r3, #24
 81089b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81089b4:	4932      	ldr	r1, [pc, #200]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089b6:	4313      	orrs	r3, r2
 81089b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81089ba:	4b31      	ldr	r3, [pc, #196]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	695b      	ldr	r3, [r3, #20]
 81089c6:	492e      	ldr	r1, [pc, #184]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089c8:	4313      	orrs	r3, r2
 81089ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81089cc:	4b2c      	ldr	r3, [pc, #176]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089d0:	f023 0220 	bic.w	r2, r3, #32
 81089d4:	687b      	ldr	r3, [r7, #4]
 81089d6:	699b      	ldr	r3, [r3, #24]
 81089d8:	4929      	ldr	r1, [pc, #164]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089da:	4313      	orrs	r3, r2
 81089dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81089de:	4b28      	ldr	r3, [pc, #160]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089e2:	4a27      	ldr	r2, [pc, #156]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089e4:	f023 0310 	bic.w	r3, r3, #16
 81089e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81089ea:	4b25      	ldr	r3, [pc, #148]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81089ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81089f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81089f6:	687a      	ldr	r2, [r7, #4]
 81089f8:	69d2      	ldr	r2, [r2, #28]
 81089fa:	00d2      	lsls	r2, r2, #3
 81089fc:	4920      	ldr	r1, [pc, #128]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 81089fe:	4313      	orrs	r3, r2
 8108a00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108a02:	4b1f      	ldr	r3, [pc, #124]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a06:	4a1e      	ldr	r2, [pc, #120]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a08:	f043 0310 	orr.w	r3, r3, #16
 8108a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108a0e:	683b      	ldr	r3, [r7, #0]
 8108a10:	2b00      	cmp	r3, #0
 8108a12:	d106      	bne.n	8108a22 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108a14:	4b1a      	ldr	r3, [pc, #104]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a18:	4a19      	ldr	r2, [pc, #100]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108a20:	e00f      	b.n	8108a42 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108a22:	683b      	ldr	r3, [r7, #0]
 8108a24:	2b01      	cmp	r3, #1
 8108a26:	d106      	bne.n	8108a36 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108a28:	4b15      	ldr	r3, [pc, #84]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a2c:	4a14      	ldr	r2, [pc, #80]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108a34:	e005      	b.n	8108a42 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108a36:	4b12      	ldr	r3, [pc, #72]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a3a:	4a11      	ldr	r2, [pc, #68]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108a42:	4b0f      	ldr	r3, [pc, #60]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	4a0e      	ldr	r2, [pc, #56]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108a4e:	f7f9 fdc1 	bl	81025d4 <HAL_GetTick>
 8108a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108a54:	e008      	b.n	8108a68 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108a56:	f7f9 fdbd 	bl	81025d4 <HAL_GetTick>
 8108a5a:	4602      	mov	r2, r0
 8108a5c:	68bb      	ldr	r3, [r7, #8]
 8108a5e:	1ad3      	subs	r3, r2, r3
 8108a60:	2b02      	cmp	r3, #2
 8108a62:	d901      	bls.n	8108a68 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108a64:	2303      	movs	r3, #3
 8108a66:	e006      	b.n	8108a76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108a68:	4b05      	ldr	r3, [pc, #20]	@ (8108a80 <RCCEx_PLL2_Config+0x160>)
 8108a6a:	681b      	ldr	r3, [r3, #0]
 8108a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a70:	2b00      	cmp	r3, #0
 8108a72:	d0f0      	beq.n	8108a56 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8108a76:	4618      	mov	r0, r3
 8108a78:	3710      	adds	r7, #16
 8108a7a:	46bd      	mov	sp, r7
 8108a7c:	bd80      	pop	{r7, pc}
 8108a7e:	bf00      	nop
 8108a80:	58024400 	.word	0x58024400

08108a84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108a84:	b580      	push	{r7, lr}
 8108a86:	b084      	sub	sp, #16
 8108a88:	af00      	add	r7, sp, #0
 8108a8a:	6078      	str	r0, [r7, #4]
 8108a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108a8e:	2300      	movs	r3, #0
 8108a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108a92:	4b54      	ldr	r3, [pc, #336]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a96:	f003 0303 	and.w	r3, r3, #3
 8108a9a:	2b03      	cmp	r3, #3
 8108a9c:	d101      	bne.n	8108aa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108a9e:	2301      	movs	r3, #1
 8108aa0:	e09b      	b.n	8108bda <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108aa2:	4b50      	ldr	r3, [pc, #320]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108aa4:	681b      	ldr	r3, [r3, #0]
 8108aa6:	4a4f      	ldr	r2, [pc, #316]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108aae:	f7f9 fd91 	bl	81025d4 <HAL_GetTick>
 8108ab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108ab4:	e008      	b.n	8108ac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108ab6:	f7f9 fd8d 	bl	81025d4 <HAL_GetTick>
 8108aba:	4602      	mov	r2, r0
 8108abc:	68bb      	ldr	r3, [r7, #8]
 8108abe:	1ad3      	subs	r3, r2, r3
 8108ac0:	2b02      	cmp	r3, #2
 8108ac2:	d901      	bls.n	8108ac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108ac4:	2303      	movs	r3, #3
 8108ac6:	e088      	b.n	8108bda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108ac8:	4b46      	ldr	r3, [pc, #280]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108aca:	681b      	ldr	r3, [r3, #0]
 8108acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108ad0:	2b00      	cmp	r3, #0
 8108ad2:	d1f0      	bne.n	8108ab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108ad4:	4b43      	ldr	r3, [pc, #268]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ad8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108adc:	687b      	ldr	r3, [r7, #4]
 8108ade:	681b      	ldr	r3, [r3, #0]
 8108ae0:	051b      	lsls	r3, r3, #20
 8108ae2:	4940      	ldr	r1, [pc, #256]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108ae4:	4313      	orrs	r3, r2
 8108ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	685b      	ldr	r3, [r3, #4]
 8108aec:	3b01      	subs	r3, #1
 8108aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108af2:	687b      	ldr	r3, [r7, #4]
 8108af4:	689b      	ldr	r3, [r3, #8]
 8108af6:	3b01      	subs	r3, #1
 8108af8:	025b      	lsls	r3, r3, #9
 8108afa:	b29b      	uxth	r3, r3
 8108afc:	431a      	orrs	r2, r3
 8108afe:	687b      	ldr	r3, [r7, #4]
 8108b00:	68db      	ldr	r3, [r3, #12]
 8108b02:	3b01      	subs	r3, #1
 8108b04:	041b      	lsls	r3, r3, #16
 8108b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108b0a:	431a      	orrs	r2, r3
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	691b      	ldr	r3, [r3, #16]
 8108b10:	3b01      	subs	r3, #1
 8108b12:	061b      	lsls	r3, r3, #24
 8108b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108b18:	4932      	ldr	r1, [pc, #200]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b1a:	4313      	orrs	r3, r2
 8108b1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108b1e:	4b31      	ldr	r3, [pc, #196]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	695b      	ldr	r3, [r3, #20]
 8108b2a:	492e      	ldr	r1, [pc, #184]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b2c:	4313      	orrs	r3, r2
 8108b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108b30:	4b2c      	ldr	r3, [pc, #176]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	699b      	ldr	r3, [r3, #24]
 8108b3c:	4929      	ldr	r1, [pc, #164]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b3e:	4313      	orrs	r3, r2
 8108b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108b42:	4b28      	ldr	r3, [pc, #160]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b46:	4a27      	ldr	r2, [pc, #156]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108b4e:	4b25      	ldr	r3, [pc, #148]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108b56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108b5a:	687a      	ldr	r2, [r7, #4]
 8108b5c:	69d2      	ldr	r2, [r2, #28]
 8108b5e:	00d2      	lsls	r2, r2, #3
 8108b60:	4920      	ldr	r1, [pc, #128]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b62:	4313      	orrs	r3, r2
 8108b64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108b66:	4b1f      	ldr	r3, [pc, #124]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108b72:	683b      	ldr	r3, [r7, #0]
 8108b74:	2b00      	cmp	r3, #0
 8108b76:	d106      	bne.n	8108b86 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108b78:	4b1a      	ldr	r3, [pc, #104]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b7c:	4a19      	ldr	r2, [pc, #100]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108b84:	e00f      	b.n	8108ba6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108b86:	683b      	ldr	r3, [r7, #0]
 8108b88:	2b01      	cmp	r3, #1
 8108b8a:	d106      	bne.n	8108b9a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108b8c:	4b15      	ldr	r3, [pc, #84]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b90:	4a14      	ldr	r2, [pc, #80]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108b98:	e005      	b.n	8108ba6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108b9a:	4b12      	ldr	r3, [pc, #72]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b9e:	4a11      	ldr	r2, [pc, #68]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108ba8:	681b      	ldr	r3, [r3, #0]
 8108baa:	4a0e      	ldr	r2, [pc, #56]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108bb2:	f7f9 fd0f 	bl	81025d4 <HAL_GetTick>
 8108bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108bb8:	e008      	b.n	8108bcc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108bba:	f7f9 fd0b 	bl	81025d4 <HAL_GetTick>
 8108bbe:	4602      	mov	r2, r0
 8108bc0:	68bb      	ldr	r3, [r7, #8]
 8108bc2:	1ad3      	subs	r3, r2, r3
 8108bc4:	2b02      	cmp	r3, #2
 8108bc6:	d901      	bls.n	8108bcc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108bc8:	2303      	movs	r3, #3
 8108bca:	e006      	b.n	8108bda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108bcc:	4b05      	ldr	r3, [pc, #20]	@ (8108be4 <RCCEx_PLL3_Config+0x160>)
 8108bce:	681b      	ldr	r3, [r3, #0]
 8108bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108bd4:	2b00      	cmp	r3, #0
 8108bd6:	d0f0      	beq.n	8108bba <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8108bda:	4618      	mov	r0, r3
 8108bdc:	3710      	adds	r7, #16
 8108bde:	46bd      	mov	sp, r7
 8108be0:	bd80      	pop	{r7, pc}
 8108be2:	bf00      	nop
 8108be4:	58024400 	.word	0x58024400

08108be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108be8:	b580      	push	{r7, lr}
 8108bea:	b082      	sub	sp, #8
 8108bec:	af00      	add	r7, sp, #0
 8108bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	2b00      	cmp	r3, #0
 8108bf4:	d101      	bne.n	8108bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108bf6:	2301      	movs	r3, #1
 8108bf8:	e049      	b.n	8108c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108bfa:	687b      	ldr	r3, [r7, #4]
 8108bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108c00:	b2db      	uxtb	r3, r3
 8108c02:	2b00      	cmp	r3, #0
 8108c04:	d106      	bne.n	8108c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	2200      	movs	r2, #0
 8108c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108c0e:	6878      	ldr	r0, [r7, #4]
 8108c10:	f000 f841 	bl	8108c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	2202      	movs	r2, #2
 8108c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108c1c:	687b      	ldr	r3, [r7, #4]
 8108c1e:	681a      	ldr	r2, [r3, #0]
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	3304      	adds	r3, #4
 8108c24:	4619      	mov	r1, r3
 8108c26:	4610      	mov	r0, r2
 8108c28:	f000 f9e8 	bl	8108ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	2201      	movs	r2, #1
 8108c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	2201      	movs	r2, #1
 8108c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	2201      	movs	r2, #1
 8108c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8108c44:	687b      	ldr	r3, [r7, #4]
 8108c46:	2201      	movs	r2, #1
 8108c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8108c4c:	687b      	ldr	r3, [r7, #4]
 8108c4e:	2201      	movs	r2, #1
 8108c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	2201      	movs	r2, #1
 8108c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	2201      	movs	r2, #1
 8108c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108c64:	687b      	ldr	r3, [r7, #4]
 8108c66:	2201      	movs	r2, #1
 8108c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	2201      	movs	r2, #1
 8108c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	2201      	movs	r2, #1
 8108c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	2201      	movs	r2, #1
 8108c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	2201      	movs	r2, #1
 8108c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8108c8c:	2300      	movs	r3, #0
}
 8108c8e:	4618      	mov	r0, r3
 8108c90:	3708      	adds	r7, #8
 8108c92:	46bd      	mov	sp, r7
 8108c94:	bd80      	pop	{r7, pc}

08108c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8108c96:	b480      	push	{r7}
 8108c98:	b083      	sub	sp, #12
 8108c9a:	af00      	add	r7, sp, #0
 8108c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8108c9e:	bf00      	nop
 8108ca0:	370c      	adds	r7, #12
 8108ca2:	46bd      	mov	sp, r7
 8108ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca8:	4770      	bx	lr
	...

08108cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108cac:	b480      	push	{r7}
 8108cae:	b085      	sub	sp, #20
 8108cb0:	af00      	add	r7, sp, #0
 8108cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108cba:	b2db      	uxtb	r3, r3
 8108cbc:	2b01      	cmp	r3, #1
 8108cbe:	d001      	beq.n	8108cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108cc0:	2301      	movs	r3, #1
 8108cc2:	e054      	b.n	8108d6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	2202      	movs	r2, #2
 8108cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	681b      	ldr	r3, [r3, #0]
 8108cd0:	68da      	ldr	r2, [r3, #12]
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	681b      	ldr	r3, [r3, #0]
 8108cd6:	f042 0201 	orr.w	r2, r2, #1
 8108cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	681b      	ldr	r3, [r3, #0]
 8108ce0:	4a26      	ldr	r2, [pc, #152]	@ (8108d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8108ce2:	4293      	cmp	r3, r2
 8108ce4:	d022      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108ce6:	687b      	ldr	r3, [r7, #4]
 8108ce8:	681b      	ldr	r3, [r3, #0]
 8108cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108cee:	d01d      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	4a22      	ldr	r2, [pc, #136]	@ (8108d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8108cf6:	4293      	cmp	r3, r2
 8108cf8:	d018      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	4a21      	ldr	r2, [pc, #132]	@ (8108d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8108d00:	4293      	cmp	r3, r2
 8108d02:	d013      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	4a1f      	ldr	r2, [pc, #124]	@ (8108d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8108d0a:	4293      	cmp	r3, r2
 8108d0c:	d00e      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	681b      	ldr	r3, [r3, #0]
 8108d12:	4a1e      	ldr	r2, [pc, #120]	@ (8108d8c <HAL_TIM_Base_Start_IT+0xe0>)
 8108d14:	4293      	cmp	r3, r2
 8108d16:	d009      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	681b      	ldr	r3, [r3, #0]
 8108d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8108d90 <HAL_TIM_Base_Start_IT+0xe4>)
 8108d1e:	4293      	cmp	r3, r2
 8108d20:	d004      	beq.n	8108d2c <HAL_TIM_Base_Start_IT+0x80>
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	4a1b      	ldr	r2, [pc, #108]	@ (8108d94 <HAL_TIM_Base_Start_IT+0xe8>)
 8108d28:	4293      	cmp	r3, r2
 8108d2a:	d115      	bne.n	8108d58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	681b      	ldr	r3, [r3, #0]
 8108d30:	689a      	ldr	r2, [r3, #8]
 8108d32:	4b19      	ldr	r3, [pc, #100]	@ (8108d98 <HAL_TIM_Base_Start_IT+0xec>)
 8108d34:	4013      	ands	r3, r2
 8108d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108d38:	68fb      	ldr	r3, [r7, #12]
 8108d3a:	2b06      	cmp	r3, #6
 8108d3c:	d015      	beq.n	8108d6a <HAL_TIM_Base_Start_IT+0xbe>
 8108d3e:	68fb      	ldr	r3, [r7, #12]
 8108d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108d44:	d011      	beq.n	8108d6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	681b      	ldr	r3, [r3, #0]
 8108d4a:	681a      	ldr	r2, [r3, #0]
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	681b      	ldr	r3, [r3, #0]
 8108d50:	f042 0201 	orr.w	r2, r2, #1
 8108d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108d56:	e008      	b.n	8108d6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	681b      	ldr	r3, [r3, #0]
 8108d5c:	681a      	ldr	r2, [r3, #0]
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	681b      	ldr	r3, [r3, #0]
 8108d62:	f042 0201 	orr.w	r2, r2, #1
 8108d66:	601a      	str	r2, [r3, #0]
 8108d68:	e000      	b.n	8108d6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108d6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8108d6c:	2300      	movs	r3, #0
}
 8108d6e:	4618      	mov	r0, r3
 8108d70:	3714      	adds	r7, #20
 8108d72:	46bd      	mov	sp, r7
 8108d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d78:	4770      	bx	lr
 8108d7a:	bf00      	nop
 8108d7c:	40010000 	.word	0x40010000
 8108d80:	40000400 	.word	0x40000400
 8108d84:	40000800 	.word	0x40000800
 8108d88:	40000c00 	.word	0x40000c00
 8108d8c:	40010400 	.word	0x40010400
 8108d90:	40001800 	.word	0x40001800
 8108d94:	40014000 	.word	0x40014000
 8108d98:	00010007 	.word	0x00010007

08108d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108d9c:	b580      	push	{r7, lr}
 8108d9e:	b084      	sub	sp, #16
 8108da0:	af00      	add	r7, sp, #0
 8108da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	681b      	ldr	r3, [r3, #0]
 8108da8:	68db      	ldr	r3, [r3, #12]
 8108daa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	681b      	ldr	r3, [r3, #0]
 8108db0:	691b      	ldr	r3, [r3, #16]
 8108db2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8108db4:	68bb      	ldr	r3, [r7, #8]
 8108db6:	f003 0302 	and.w	r3, r3, #2
 8108dba:	2b00      	cmp	r3, #0
 8108dbc:	d020      	beq.n	8108e00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8108dbe:	68fb      	ldr	r3, [r7, #12]
 8108dc0:	f003 0302 	and.w	r3, r3, #2
 8108dc4:	2b00      	cmp	r3, #0
 8108dc6:	d01b      	beq.n	8108e00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8108dc8:	687b      	ldr	r3, [r7, #4]
 8108dca:	681b      	ldr	r3, [r3, #0]
 8108dcc:	f06f 0202 	mvn.w	r2, #2
 8108dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	2201      	movs	r2, #1
 8108dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	699b      	ldr	r3, [r3, #24]
 8108dde:	f003 0303 	and.w	r3, r3, #3
 8108de2:	2b00      	cmp	r3, #0
 8108de4:	d003      	beq.n	8108dee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108de6:	6878      	ldr	r0, [r7, #4]
 8108de8:	f000 f8e9 	bl	8108fbe <HAL_TIM_IC_CaptureCallback>
 8108dec:	e005      	b.n	8108dfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108dee:	6878      	ldr	r0, [r7, #4]
 8108df0:	f000 f8db 	bl	8108faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108df4:	6878      	ldr	r0, [r7, #4]
 8108df6:	f000 f8ec 	bl	8108fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	2200      	movs	r2, #0
 8108dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8108e00:	68bb      	ldr	r3, [r7, #8]
 8108e02:	f003 0304 	and.w	r3, r3, #4
 8108e06:	2b00      	cmp	r3, #0
 8108e08:	d020      	beq.n	8108e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8108e0a:	68fb      	ldr	r3, [r7, #12]
 8108e0c:	f003 0304 	and.w	r3, r3, #4
 8108e10:	2b00      	cmp	r3, #0
 8108e12:	d01b      	beq.n	8108e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	681b      	ldr	r3, [r3, #0]
 8108e18:	f06f 0204 	mvn.w	r2, #4
 8108e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	2202      	movs	r2, #2
 8108e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8108e24:	687b      	ldr	r3, [r7, #4]
 8108e26:	681b      	ldr	r3, [r3, #0]
 8108e28:	699b      	ldr	r3, [r3, #24]
 8108e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108e2e:	2b00      	cmp	r3, #0
 8108e30:	d003      	beq.n	8108e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108e32:	6878      	ldr	r0, [r7, #4]
 8108e34:	f000 f8c3 	bl	8108fbe <HAL_TIM_IC_CaptureCallback>
 8108e38:	e005      	b.n	8108e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108e3a:	6878      	ldr	r0, [r7, #4]
 8108e3c:	f000 f8b5 	bl	8108faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108e40:	6878      	ldr	r0, [r7, #4]
 8108e42:	f000 f8c6 	bl	8108fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108e46:	687b      	ldr	r3, [r7, #4]
 8108e48:	2200      	movs	r2, #0
 8108e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8108e4c:	68bb      	ldr	r3, [r7, #8]
 8108e4e:	f003 0308 	and.w	r3, r3, #8
 8108e52:	2b00      	cmp	r3, #0
 8108e54:	d020      	beq.n	8108e98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8108e56:	68fb      	ldr	r3, [r7, #12]
 8108e58:	f003 0308 	and.w	r3, r3, #8
 8108e5c:	2b00      	cmp	r3, #0
 8108e5e:	d01b      	beq.n	8108e98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	f06f 0208 	mvn.w	r2, #8
 8108e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	2204      	movs	r2, #4
 8108e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	681b      	ldr	r3, [r3, #0]
 8108e74:	69db      	ldr	r3, [r3, #28]
 8108e76:	f003 0303 	and.w	r3, r3, #3
 8108e7a:	2b00      	cmp	r3, #0
 8108e7c:	d003      	beq.n	8108e86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108e7e:	6878      	ldr	r0, [r7, #4]
 8108e80:	f000 f89d 	bl	8108fbe <HAL_TIM_IC_CaptureCallback>
 8108e84:	e005      	b.n	8108e92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108e86:	6878      	ldr	r0, [r7, #4]
 8108e88:	f000 f88f 	bl	8108faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108e8c:	6878      	ldr	r0, [r7, #4]
 8108e8e:	f000 f8a0 	bl	8108fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	2200      	movs	r2, #0
 8108e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8108e98:	68bb      	ldr	r3, [r7, #8]
 8108e9a:	f003 0310 	and.w	r3, r3, #16
 8108e9e:	2b00      	cmp	r3, #0
 8108ea0:	d020      	beq.n	8108ee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8108ea2:	68fb      	ldr	r3, [r7, #12]
 8108ea4:	f003 0310 	and.w	r3, r3, #16
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d01b      	beq.n	8108ee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	681b      	ldr	r3, [r3, #0]
 8108eb0:	f06f 0210 	mvn.w	r2, #16
 8108eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	2208      	movs	r2, #8
 8108eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108ebc:	687b      	ldr	r3, [r7, #4]
 8108ebe:	681b      	ldr	r3, [r3, #0]
 8108ec0:	69db      	ldr	r3, [r3, #28]
 8108ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108ec6:	2b00      	cmp	r3, #0
 8108ec8:	d003      	beq.n	8108ed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108eca:	6878      	ldr	r0, [r7, #4]
 8108ecc:	f000 f877 	bl	8108fbe <HAL_TIM_IC_CaptureCallback>
 8108ed0:	e005      	b.n	8108ede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108ed2:	6878      	ldr	r0, [r7, #4]
 8108ed4:	f000 f869 	bl	8108faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108ed8:	6878      	ldr	r0, [r7, #4]
 8108eda:	f000 f87a 	bl	8108fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108ede:	687b      	ldr	r3, [r7, #4]
 8108ee0:	2200      	movs	r2, #0
 8108ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8108ee4:	68bb      	ldr	r3, [r7, #8]
 8108ee6:	f003 0301 	and.w	r3, r3, #1
 8108eea:	2b00      	cmp	r3, #0
 8108eec:	d00c      	beq.n	8108f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8108eee:	68fb      	ldr	r3, [r7, #12]
 8108ef0:	f003 0301 	and.w	r3, r3, #1
 8108ef4:	2b00      	cmp	r3, #0
 8108ef6:	d007      	beq.n	8108f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	f06f 0201 	mvn.w	r2, #1
 8108f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108f02:	6878      	ldr	r0, [r7, #4]
 8108f04:	f7f8 ffc8 	bl	8101e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108f08:	68bb      	ldr	r3, [r7, #8]
 8108f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108f0e:	2b00      	cmp	r3, #0
 8108f10:	d104      	bne.n	8108f1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8108f12:	68bb      	ldr	r3, [r7, #8]
 8108f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d00c      	beq.n	8108f36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108f1c:	68fb      	ldr	r3, [r7, #12]
 8108f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108f22:	2b00      	cmp	r3, #0
 8108f24:	d007      	beq.n	8108f36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8108f26:	687b      	ldr	r3, [r7, #4]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8108f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108f30:	6878      	ldr	r0, [r7, #4]
 8108f32:	f000 f913 	bl	810915c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8108f36:	68bb      	ldr	r3, [r7, #8]
 8108f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108f3c:	2b00      	cmp	r3, #0
 8108f3e:	d00c      	beq.n	8108f5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108f40:	68fb      	ldr	r3, [r7, #12]
 8108f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108f46:	2b00      	cmp	r3, #0
 8108f48:	d007      	beq.n	8108f5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	681b      	ldr	r3, [r3, #0]
 8108f4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8108f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108f54:	6878      	ldr	r0, [r7, #4]
 8108f56:	f000 f90b 	bl	8109170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8108f5a:	68bb      	ldr	r3, [r7, #8]
 8108f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108f60:	2b00      	cmp	r3, #0
 8108f62:	d00c      	beq.n	8108f7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8108f64:	68fb      	ldr	r3, [r7, #12]
 8108f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108f6a:	2b00      	cmp	r3, #0
 8108f6c:	d007      	beq.n	8108f7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	681b      	ldr	r3, [r3, #0]
 8108f72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8108f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108f78:	6878      	ldr	r0, [r7, #4]
 8108f7a:	f000 f834 	bl	8108fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8108f7e:	68bb      	ldr	r3, [r7, #8]
 8108f80:	f003 0320 	and.w	r3, r3, #32
 8108f84:	2b00      	cmp	r3, #0
 8108f86:	d00c      	beq.n	8108fa2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8108f88:	68fb      	ldr	r3, [r7, #12]
 8108f8a:	f003 0320 	and.w	r3, r3, #32
 8108f8e:	2b00      	cmp	r3, #0
 8108f90:	d007      	beq.n	8108fa2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8108f92:	687b      	ldr	r3, [r7, #4]
 8108f94:	681b      	ldr	r3, [r3, #0]
 8108f96:	f06f 0220 	mvn.w	r2, #32
 8108f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108f9c:	6878      	ldr	r0, [r7, #4]
 8108f9e:	f000 f8d3 	bl	8109148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108fa2:	bf00      	nop
 8108fa4:	3710      	adds	r7, #16
 8108fa6:	46bd      	mov	sp, r7
 8108fa8:	bd80      	pop	{r7, pc}

08108faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108faa:	b480      	push	{r7}
 8108fac:	b083      	sub	sp, #12
 8108fae:	af00      	add	r7, sp, #0
 8108fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108fb2:	bf00      	nop
 8108fb4:	370c      	adds	r7, #12
 8108fb6:	46bd      	mov	sp, r7
 8108fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fbc:	4770      	bx	lr

08108fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108fbe:	b480      	push	{r7}
 8108fc0:	b083      	sub	sp, #12
 8108fc2:	af00      	add	r7, sp, #0
 8108fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108fc6:	bf00      	nop
 8108fc8:	370c      	adds	r7, #12
 8108fca:	46bd      	mov	sp, r7
 8108fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fd0:	4770      	bx	lr

08108fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108fd2:	b480      	push	{r7}
 8108fd4:	b083      	sub	sp, #12
 8108fd6:	af00      	add	r7, sp, #0
 8108fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108fda:	bf00      	nop
 8108fdc:	370c      	adds	r7, #12
 8108fde:	46bd      	mov	sp, r7
 8108fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fe4:	4770      	bx	lr

08108fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108fe6:	b480      	push	{r7}
 8108fe8:	b083      	sub	sp, #12
 8108fea:	af00      	add	r7, sp, #0
 8108fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108fee:	bf00      	nop
 8108ff0:	370c      	adds	r7, #12
 8108ff2:	46bd      	mov	sp, r7
 8108ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ff8:	4770      	bx	lr
	...

08108ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108ffc:	b480      	push	{r7}
 8108ffe:	b085      	sub	sp, #20
 8109000:	af00      	add	r7, sp, #0
 8109002:	6078      	str	r0, [r7, #4]
 8109004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109006:	687b      	ldr	r3, [r7, #4]
 8109008:	681b      	ldr	r3, [r3, #0]
 810900a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	4a46      	ldr	r2, [pc, #280]	@ (8109128 <TIM_Base_SetConfig+0x12c>)
 8109010:	4293      	cmp	r3, r2
 8109012:	d013      	beq.n	810903c <TIM_Base_SetConfig+0x40>
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810901a:	d00f      	beq.n	810903c <TIM_Base_SetConfig+0x40>
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	4a43      	ldr	r2, [pc, #268]	@ (810912c <TIM_Base_SetConfig+0x130>)
 8109020:	4293      	cmp	r3, r2
 8109022:	d00b      	beq.n	810903c <TIM_Base_SetConfig+0x40>
 8109024:	687b      	ldr	r3, [r7, #4]
 8109026:	4a42      	ldr	r2, [pc, #264]	@ (8109130 <TIM_Base_SetConfig+0x134>)
 8109028:	4293      	cmp	r3, r2
 810902a:	d007      	beq.n	810903c <TIM_Base_SetConfig+0x40>
 810902c:	687b      	ldr	r3, [r7, #4]
 810902e:	4a41      	ldr	r2, [pc, #260]	@ (8109134 <TIM_Base_SetConfig+0x138>)
 8109030:	4293      	cmp	r3, r2
 8109032:	d003      	beq.n	810903c <TIM_Base_SetConfig+0x40>
 8109034:	687b      	ldr	r3, [r7, #4]
 8109036:	4a40      	ldr	r2, [pc, #256]	@ (8109138 <TIM_Base_SetConfig+0x13c>)
 8109038:	4293      	cmp	r3, r2
 810903a:	d108      	bne.n	810904e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810903c:	68fb      	ldr	r3, [r7, #12]
 810903e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109044:	683b      	ldr	r3, [r7, #0]
 8109046:	685b      	ldr	r3, [r3, #4]
 8109048:	68fa      	ldr	r2, [r7, #12]
 810904a:	4313      	orrs	r3, r2
 810904c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810904e:	687b      	ldr	r3, [r7, #4]
 8109050:	4a35      	ldr	r2, [pc, #212]	@ (8109128 <TIM_Base_SetConfig+0x12c>)
 8109052:	4293      	cmp	r3, r2
 8109054:	d01f      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810905c:	d01b      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	4a32      	ldr	r2, [pc, #200]	@ (810912c <TIM_Base_SetConfig+0x130>)
 8109062:	4293      	cmp	r3, r2
 8109064:	d017      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	4a31      	ldr	r2, [pc, #196]	@ (8109130 <TIM_Base_SetConfig+0x134>)
 810906a:	4293      	cmp	r3, r2
 810906c:	d013      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	4a30      	ldr	r2, [pc, #192]	@ (8109134 <TIM_Base_SetConfig+0x138>)
 8109072:	4293      	cmp	r3, r2
 8109074:	d00f      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	4a2f      	ldr	r2, [pc, #188]	@ (8109138 <TIM_Base_SetConfig+0x13c>)
 810907a:	4293      	cmp	r3, r2
 810907c:	d00b      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	4a2e      	ldr	r2, [pc, #184]	@ (810913c <TIM_Base_SetConfig+0x140>)
 8109082:	4293      	cmp	r3, r2
 8109084:	d007      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	4a2d      	ldr	r2, [pc, #180]	@ (8109140 <TIM_Base_SetConfig+0x144>)
 810908a:	4293      	cmp	r3, r2
 810908c:	d003      	beq.n	8109096 <TIM_Base_SetConfig+0x9a>
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	4a2c      	ldr	r2, [pc, #176]	@ (8109144 <TIM_Base_SetConfig+0x148>)
 8109092:	4293      	cmp	r3, r2
 8109094:	d108      	bne.n	81090a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109096:	68fb      	ldr	r3, [r7, #12]
 8109098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810909c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810909e:	683b      	ldr	r3, [r7, #0]
 81090a0:	68db      	ldr	r3, [r3, #12]
 81090a2:	68fa      	ldr	r2, [r7, #12]
 81090a4:	4313      	orrs	r3, r2
 81090a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81090a8:	68fb      	ldr	r3, [r7, #12]
 81090aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81090ae:	683b      	ldr	r3, [r7, #0]
 81090b0:	695b      	ldr	r3, [r3, #20]
 81090b2:	4313      	orrs	r3, r2
 81090b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	68fa      	ldr	r2, [r7, #12]
 81090ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81090bc:	683b      	ldr	r3, [r7, #0]
 81090be:	689a      	ldr	r2, [r3, #8]
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81090c4:	683b      	ldr	r3, [r7, #0]
 81090c6:	681a      	ldr	r2, [r3, #0]
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81090cc:	687b      	ldr	r3, [r7, #4]
 81090ce:	4a16      	ldr	r2, [pc, #88]	@ (8109128 <TIM_Base_SetConfig+0x12c>)
 81090d0:	4293      	cmp	r3, r2
 81090d2:	d00f      	beq.n	81090f4 <TIM_Base_SetConfig+0xf8>
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	4a18      	ldr	r2, [pc, #96]	@ (8109138 <TIM_Base_SetConfig+0x13c>)
 81090d8:	4293      	cmp	r3, r2
 81090da:	d00b      	beq.n	81090f4 <TIM_Base_SetConfig+0xf8>
 81090dc:	687b      	ldr	r3, [r7, #4]
 81090de:	4a17      	ldr	r2, [pc, #92]	@ (810913c <TIM_Base_SetConfig+0x140>)
 81090e0:	4293      	cmp	r3, r2
 81090e2:	d007      	beq.n	81090f4 <TIM_Base_SetConfig+0xf8>
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	4a16      	ldr	r2, [pc, #88]	@ (8109140 <TIM_Base_SetConfig+0x144>)
 81090e8:	4293      	cmp	r3, r2
 81090ea:	d003      	beq.n	81090f4 <TIM_Base_SetConfig+0xf8>
 81090ec:	687b      	ldr	r3, [r7, #4]
 81090ee:	4a15      	ldr	r2, [pc, #84]	@ (8109144 <TIM_Base_SetConfig+0x148>)
 81090f0:	4293      	cmp	r3, r2
 81090f2:	d103      	bne.n	81090fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81090f4:	683b      	ldr	r3, [r7, #0]
 81090f6:	691a      	ldr	r2, [r3, #16]
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	2201      	movs	r2, #1
 8109100:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	691b      	ldr	r3, [r3, #16]
 8109106:	f003 0301 	and.w	r3, r3, #1
 810910a:	2b01      	cmp	r3, #1
 810910c:	d105      	bne.n	810911a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810910e:	687b      	ldr	r3, [r7, #4]
 8109110:	691b      	ldr	r3, [r3, #16]
 8109112:	f023 0201 	bic.w	r2, r3, #1
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	611a      	str	r2, [r3, #16]
  }
}
 810911a:	bf00      	nop
 810911c:	3714      	adds	r7, #20
 810911e:	46bd      	mov	sp, r7
 8109120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109124:	4770      	bx	lr
 8109126:	bf00      	nop
 8109128:	40010000 	.word	0x40010000
 810912c:	40000400 	.word	0x40000400
 8109130:	40000800 	.word	0x40000800
 8109134:	40000c00 	.word	0x40000c00
 8109138:	40010400 	.word	0x40010400
 810913c:	40014000 	.word	0x40014000
 8109140:	40014400 	.word	0x40014400
 8109144:	40014800 	.word	0x40014800

08109148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109148:	b480      	push	{r7}
 810914a:	b083      	sub	sp, #12
 810914c:	af00      	add	r7, sp, #0
 810914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109150:	bf00      	nop
 8109152:	370c      	adds	r7, #12
 8109154:	46bd      	mov	sp, r7
 8109156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810915a:	4770      	bx	lr

0810915c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810915c:	b480      	push	{r7}
 810915e:	b083      	sub	sp, #12
 8109160:	af00      	add	r7, sp, #0
 8109162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109164:	bf00      	nop
 8109166:	370c      	adds	r7, #12
 8109168:	46bd      	mov	sp, r7
 810916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810916e:	4770      	bx	lr

08109170 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109170:	b480      	push	{r7}
 8109172:	b083      	sub	sp, #12
 8109174:	af00      	add	r7, sp, #0
 8109176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109178:	bf00      	nop
 810917a:	370c      	adds	r7, #12
 810917c:	46bd      	mov	sp, r7
 810917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109182:	4770      	bx	lr

08109184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109184:	b580      	push	{r7, lr}
 8109186:	b082      	sub	sp, #8
 8109188:	af00      	add	r7, sp, #0
 810918a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	2b00      	cmp	r3, #0
 8109190:	d101      	bne.n	8109196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109192:	2301      	movs	r3, #1
 8109194:	e042      	b.n	810921c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810919c:	2b00      	cmp	r3, #0
 810919e:	d106      	bne.n	81091ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81091a0:	687b      	ldr	r3, [r7, #4]
 81091a2:	2200      	movs	r2, #0
 81091a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81091a8:	6878      	ldr	r0, [r7, #4]
 81091aa:	f7f8 ff95 	bl	81020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	2224      	movs	r2, #36	@ 0x24
 81091b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81091b6:	687b      	ldr	r3, [r7, #4]
 81091b8:	681b      	ldr	r3, [r3, #0]
 81091ba:	681a      	ldr	r2, [r3, #0]
 81091bc:	687b      	ldr	r3, [r7, #4]
 81091be:	681b      	ldr	r3, [r3, #0]
 81091c0:	f022 0201 	bic.w	r2, r2, #1
 81091c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	d002      	beq.n	81091d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81091ce:	6878      	ldr	r0, [r7, #4]
 81091d0:	f001 f9f6 	bl	810a5c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81091d4:	6878      	ldr	r0, [r7, #4]
 81091d6:	f000 fc8b 	bl	8109af0 <UART_SetConfig>
 81091da:	4603      	mov	r3, r0
 81091dc:	2b01      	cmp	r3, #1
 81091de:	d101      	bne.n	81091e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81091e0:	2301      	movs	r3, #1
 81091e2:	e01b      	b.n	810921c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	681b      	ldr	r3, [r3, #0]
 81091e8:	685a      	ldr	r2, [r3, #4]
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	681b      	ldr	r3, [r3, #0]
 81091ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81091f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	681b      	ldr	r3, [r3, #0]
 81091f8:	689a      	ldr	r2, [r3, #8]
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	681b      	ldr	r3, [r3, #0]
 81091fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8109202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	681b      	ldr	r3, [r3, #0]
 8109208:	681a      	ldr	r2, [r3, #0]
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	681b      	ldr	r3, [r3, #0]
 810920e:	f042 0201 	orr.w	r2, r2, #1
 8109212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109214:	6878      	ldr	r0, [r7, #4]
 8109216:	f001 fa75 	bl	810a704 <UART_CheckIdleState>
 810921a:	4603      	mov	r3, r0
}
 810921c:	4618      	mov	r0, r3
 810921e:	3708      	adds	r7, #8
 8109220:	46bd      	mov	sp, r7
 8109222:	bd80      	pop	{r7, pc}

08109224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109224:	b580      	push	{r7, lr}
 8109226:	b08a      	sub	sp, #40	@ 0x28
 8109228:	af02      	add	r7, sp, #8
 810922a:	60f8      	str	r0, [r7, #12]
 810922c:	60b9      	str	r1, [r7, #8]
 810922e:	603b      	str	r3, [r7, #0]
 8109230:	4613      	mov	r3, r2
 8109232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109234:	68fb      	ldr	r3, [r7, #12]
 8109236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810923a:	2b20      	cmp	r3, #32
 810923c:	d17b      	bne.n	8109336 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810923e:	68bb      	ldr	r3, [r7, #8]
 8109240:	2b00      	cmp	r3, #0
 8109242:	d002      	beq.n	810924a <HAL_UART_Transmit+0x26>
 8109244:	88fb      	ldrh	r3, [r7, #6]
 8109246:	2b00      	cmp	r3, #0
 8109248:	d101      	bne.n	810924e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810924a:	2301      	movs	r3, #1
 810924c:	e074      	b.n	8109338 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810924e:	68fb      	ldr	r3, [r7, #12]
 8109250:	2200      	movs	r2, #0
 8109252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109256:	68fb      	ldr	r3, [r7, #12]
 8109258:	2221      	movs	r2, #33	@ 0x21
 810925a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810925e:	f7f9 f9b9 	bl	81025d4 <HAL_GetTick>
 8109262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109264:	68fb      	ldr	r3, [r7, #12]
 8109266:	88fa      	ldrh	r2, [r7, #6]
 8109268:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810926c:	68fb      	ldr	r3, [r7, #12]
 810926e:	88fa      	ldrh	r2, [r7, #6]
 8109270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109274:	68fb      	ldr	r3, [r7, #12]
 8109276:	689b      	ldr	r3, [r3, #8]
 8109278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810927c:	d108      	bne.n	8109290 <HAL_UART_Transmit+0x6c>
 810927e:	68fb      	ldr	r3, [r7, #12]
 8109280:	691b      	ldr	r3, [r3, #16]
 8109282:	2b00      	cmp	r3, #0
 8109284:	d104      	bne.n	8109290 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109286:	2300      	movs	r3, #0
 8109288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810928a:	68bb      	ldr	r3, [r7, #8]
 810928c:	61bb      	str	r3, [r7, #24]
 810928e:	e003      	b.n	8109298 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109290:	68bb      	ldr	r3, [r7, #8]
 8109292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109294:	2300      	movs	r3, #0
 8109296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109298:	e030      	b.n	81092fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810929a:	683b      	ldr	r3, [r7, #0]
 810929c:	9300      	str	r3, [sp, #0]
 810929e:	697b      	ldr	r3, [r7, #20]
 81092a0:	2200      	movs	r2, #0
 81092a2:	2180      	movs	r1, #128	@ 0x80
 81092a4:	68f8      	ldr	r0, [r7, #12]
 81092a6:	f001 fad7 	bl	810a858 <UART_WaitOnFlagUntilTimeout>
 81092aa:	4603      	mov	r3, r0
 81092ac:	2b00      	cmp	r3, #0
 81092ae:	d005      	beq.n	81092bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81092b0:	68fb      	ldr	r3, [r7, #12]
 81092b2:	2220      	movs	r2, #32
 81092b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81092b8:	2303      	movs	r3, #3
 81092ba:	e03d      	b.n	8109338 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81092bc:	69fb      	ldr	r3, [r7, #28]
 81092be:	2b00      	cmp	r3, #0
 81092c0:	d10b      	bne.n	81092da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81092c2:	69bb      	ldr	r3, [r7, #24]
 81092c4:	881b      	ldrh	r3, [r3, #0]
 81092c6:	461a      	mov	r2, r3
 81092c8:	68fb      	ldr	r3, [r7, #12]
 81092ca:	681b      	ldr	r3, [r3, #0]
 81092cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81092d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81092d2:	69bb      	ldr	r3, [r7, #24]
 81092d4:	3302      	adds	r3, #2
 81092d6:	61bb      	str	r3, [r7, #24]
 81092d8:	e007      	b.n	81092ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81092da:	69fb      	ldr	r3, [r7, #28]
 81092dc:	781a      	ldrb	r2, [r3, #0]
 81092de:	68fb      	ldr	r3, [r7, #12]
 81092e0:	681b      	ldr	r3, [r3, #0]
 81092e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81092e4:	69fb      	ldr	r3, [r7, #28]
 81092e6:	3301      	adds	r3, #1
 81092e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81092ea:	68fb      	ldr	r3, [r7, #12]
 81092ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81092f0:	b29b      	uxth	r3, r3
 81092f2:	3b01      	subs	r3, #1
 81092f4:	b29a      	uxth	r2, r3
 81092f6:	68fb      	ldr	r3, [r7, #12]
 81092f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81092fc:	68fb      	ldr	r3, [r7, #12]
 81092fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8109302:	b29b      	uxth	r3, r3
 8109304:	2b00      	cmp	r3, #0
 8109306:	d1c8      	bne.n	810929a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109308:	683b      	ldr	r3, [r7, #0]
 810930a:	9300      	str	r3, [sp, #0]
 810930c:	697b      	ldr	r3, [r7, #20]
 810930e:	2200      	movs	r2, #0
 8109310:	2140      	movs	r1, #64	@ 0x40
 8109312:	68f8      	ldr	r0, [r7, #12]
 8109314:	f001 faa0 	bl	810a858 <UART_WaitOnFlagUntilTimeout>
 8109318:	4603      	mov	r3, r0
 810931a:	2b00      	cmp	r3, #0
 810931c:	d005      	beq.n	810932a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810931e:	68fb      	ldr	r3, [r7, #12]
 8109320:	2220      	movs	r2, #32
 8109322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8109326:	2303      	movs	r3, #3
 8109328:	e006      	b.n	8109338 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810932a:	68fb      	ldr	r3, [r7, #12]
 810932c:	2220      	movs	r2, #32
 810932e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8109332:	2300      	movs	r3, #0
 8109334:	e000      	b.n	8109338 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109336:	2302      	movs	r3, #2
  }
}
 8109338:	4618      	mov	r0, r3
 810933a:	3720      	adds	r7, #32
 810933c:	46bd      	mov	sp, r7
 810933e:	bd80      	pop	{r7, pc}

08109340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109340:	b580      	push	{r7, lr}
 8109342:	b0ba      	sub	sp, #232	@ 0xe8
 8109344:	af00      	add	r7, sp, #0
 8109346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	681b      	ldr	r3, [r3, #0]
 810934c:	69db      	ldr	r3, [r3, #28]
 810934e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	681b      	ldr	r3, [r3, #0]
 8109358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810935c:	687b      	ldr	r3, [r7, #4]
 810935e:	681b      	ldr	r3, [r3, #0]
 8109360:	689b      	ldr	r3, [r3, #8]
 8109362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8109366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810936a:	f640 030f 	movw	r3, #2063	@ 0x80f
 810936e:	4013      	ands	r3, r2
 8109370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8109374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109378:	2b00      	cmp	r3, #0
 810937a:	d11b      	bne.n	81093b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109380:	f003 0320 	and.w	r3, r3, #32
 8109384:	2b00      	cmp	r3, #0
 8109386:	d015      	beq.n	81093b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810938c:	f003 0320 	and.w	r3, r3, #32
 8109390:	2b00      	cmp	r3, #0
 8109392:	d105      	bne.n	81093a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810939c:	2b00      	cmp	r3, #0
 810939e:	d009      	beq.n	81093b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81093a4:	2b00      	cmp	r3, #0
 81093a6:	f000 8379 	beq.w	8109a9c <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81093ae:	6878      	ldr	r0, [r7, #4]
 81093b0:	4798      	blx	r3
      }
      return;
 81093b2:	e373      	b.n	8109a9c <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 81093b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 81093b8:	2b00      	cmp	r3, #0
 81093ba:	f000 8123 	beq.w	8109604 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81093be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 81093c2:	4b8d      	ldr	r3, [pc, #564]	@ (81095f8 <HAL_UART_IRQHandler+0x2b8>)
 81093c4:	4013      	ands	r3, r2
 81093c6:	2b00      	cmp	r3, #0
 81093c8:	d106      	bne.n	81093d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81093ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 81093ce:	4b8b      	ldr	r3, [pc, #556]	@ (81095fc <HAL_UART_IRQHandler+0x2bc>)
 81093d0:	4013      	ands	r3, r2
 81093d2:	2b00      	cmp	r3, #0
 81093d4:	f000 8116 	beq.w	8109604 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81093dc:	f003 0301 	and.w	r3, r3, #1
 81093e0:	2b00      	cmp	r3, #0
 81093e2:	d011      	beq.n	8109408 <HAL_UART_IRQHandler+0xc8>
 81093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81093e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81093ec:	2b00      	cmp	r3, #0
 81093ee:	d00b      	beq.n	8109408 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81093f0:	687b      	ldr	r3, [r7, #4]
 81093f2:	681b      	ldr	r3, [r3, #0]
 81093f4:	2201      	movs	r2, #1
 81093f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81093fe:	f043 0201 	orr.w	r2, r3, #1
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810940c:	f003 0302 	and.w	r3, r3, #2
 8109410:	2b00      	cmp	r3, #0
 8109412:	d011      	beq.n	8109438 <HAL_UART_IRQHandler+0xf8>
 8109414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109418:	f003 0301 	and.w	r3, r3, #1
 810941c:	2b00      	cmp	r3, #0
 810941e:	d00b      	beq.n	8109438 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	681b      	ldr	r3, [r3, #0]
 8109424:	2202      	movs	r2, #2
 8109426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810942e:	f043 0204 	orr.w	r2, r3, #4
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810943c:	f003 0304 	and.w	r3, r3, #4
 8109440:	2b00      	cmp	r3, #0
 8109442:	d011      	beq.n	8109468 <HAL_UART_IRQHandler+0x128>
 8109444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109448:	f003 0301 	and.w	r3, r3, #1
 810944c:	2b00      	cmp	r3, #0
 810944e:	d00b      	beq.n	8109468 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	681b      	ldr	r3, [r3, #0]
 8109454:	2204      	movs	r2, #4
 8109456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810945e:	f043 0202 	orr.w	r2, r3, #2
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810946c:	f003 0308 	and.w	r3, r3, #8
 8109470:	2b00      	cmp	r3, #0
 8109472:	d017      	beq.n	81094a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109478:	f003 0320 	and.w	r3, r3, #32
 810947c:	2b00      	cmp	r3, #0
 810947e:	d105      	bne.n	810948c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109480:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8109484:	4b5c      	ldr	r3, [pc, #368]	@ (81095f8 <HAL_UART_IRQHandler+0x2b8>)
 8109486:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109488:	2b00      	cmp	r3, #0
 810948a:	d00b      	beq.n	81094a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	681b      	ldr	r3, [r3, #0]
 8109490:	2208      	movs	r2, #8
 8109492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8109494:	687b      	ldr	r3, [r7, #4]
 8109496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810949a:	f043 0208 	orr.w	r2, r3, #8
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81094a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81094a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81094ac:	2b00      	cmp	r3, #0
 81094ae:	d012      	beq.n	81094d6 <HAL_UART_IRQHandler+0x196>
 81094b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81094b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81094b8:	2b00      	cmp	r3, #0
 81094ba:	d00c      	beq.n	81094d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	681b      	ldr	r3, [r3, #0]
 81094c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81094c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81094cc:	f043 0220 	orr.w	r2, r3, #32
 81094d0:	687b      	ldr	r3, [r7, #4]
 81094d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81094dc:	2b00      	cmp	r3, #0
 81094de:	f000 82df 	beq.w	8109aa0 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81094e6:	f003 0320 	and.w	r3, r3, #32
 81094ea:	2b00      	cmp	r3, #0
 81094ec:	d013      	beq.n	8109516 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81094ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81094f2:	f003 0320 	and.w	r3, r3, #32
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	d105      	bne.n	8109506 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81094fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81094fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109502:	2b00      	cmp	r3, #0
 8109504:	d007      	beq.n	8109516 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810950a:	2b00      	cmp	r3, #0
 810950c:	d003      	beq.n	8109516 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109512:	6878      	ldr	r0, [r7, #4]
 8109514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810951c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109520:	687b      	ldr	r3, [r7, #4]
 8109522:	681b      	ldr	r3, [r3, #0]
 8109524:	689b      	ldr	r3, [r3, #8]
 8109526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810952a:	2b40      	cmp	r3, #64	@ 0x40
 810952c:	d005      	beq.n	810953a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810952e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8109532:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109536:	2b00      	cmp	r3, #0
 8109538:	d054      	beq.n	81095e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810953a:	6878      	ldr	r0, [r7, #4]
 810953c:	f001 fb1c 	bl	810ab78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	681b      	ldr	r3, [r3, #0]
 8109544:	689b      	ldr	r3, [r3, #8]
 8109546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810954a:	2b40      	cmp	r3, #64	@ 0x40
 810954c:	d146      	bne.n	81095dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	681b      	ldr	r3, [r3, #0]
 8109552:	3308      	adds	r3, #8
 8109554:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109558:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810955c:	e853 3f00 	ldrex	r3, [r3]
 8109560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8109564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8109568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810956c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	3308      	adds	r3, #8
 8109576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810957a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810957e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8109586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810958a:	e841 2300 	strex	r3, r2, [r1]
 810958e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8109592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8109596:	2b00      	cmp	r3, #0
 8109598:	d1d9      	bne.n	810954e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095a0:	2b00      	cmp	r3, #0
 81095a2:	d017      	beq.n	81095d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095aa:	4a15      	ldr	r2, [pc, #84]	@ (8109600 <HAL_UART_IRQHandler+0x2c0>)
 81095ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095b4:	4618      	mov	r0, r3
 81095b6:	f7fa fcd5 	bl	8103f64 <HAL_DMA_Abort_IT>
 81095ba:	4603      	mov	r3, r0
 81095bc:	2b00      	cmp	r3, #0
 81095be:	d019      	beq.n	81095f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81095c8:	687a      	ldr	r2, [r7, #4]
 81095ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 81095ce:	4610      	mov	r0, r2
 81095d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81095d2:	e00f      	b.n	81095f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81095d4:	6878      	ldr	r0, [r7, #4]
 81095d6:	f000 fa81 	bl	8109adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81095da:	e00b      	b.n	81095f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81095dc:	6878      	ldr	r0, [r7, #4]
 81095de:	f000 fa7d 	bl	8109adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81095e2:	e007      	b.n	81095f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81095e4:	6878      	ldr	r0, [r7, #4]
 81095e6:	f000 fa79 	bl	8109adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	2200      	movs	r2, #0
 81095ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 81095f2:	e255      	b.n	8109aa0 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81095f4:	bf00      	nop
    return;
 81095f6:	e253      	b.n	8109aa0 <HAL_UART_IRQHandler+0x760>
 81095f8:	10000001 	.word	0x10000001
 81095fc:	04000120 	.word	0x04000120
 8109600:	0810ac45 	.word	0x0810ac45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109608:	2b01      	cmp	r3, #1
 810960a:	f040 81e9 	bne.w	81099e0 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109612:	f003 0310 	and.w	r3, r3, #16
 8109616:	2b00      	cmp	r3, #0
 8109618:	f000 81e2 	beq.w	81099e0 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810961c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109620:	f003 0310 	and.w	r3, r3, #16
 8109624:	2b00      	cmp	r3, #0
 8109626:	f000 81db 	beq.w	81099e0 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	681b      	ldr	r3, [r3, #0]
 810962e:	2210      	movs	r2, #16
 8109630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	681b      	ldr	r3, [r3, #0]
 8109636:	689b      	ldr	r3, [r3, #8]
 8109638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810963c:	2b40      	cmp	r3, #64	@ 0x40
 810963e:	f040 8151 	bne.w	81098e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109648:	681b      	ldr	r3, [r3, #0]
 810964a:	4a96      	ldr	r2, [pc, #600]	@ (81098a4 <HAL_UART_IRQHandler+0x564>)
 810964c:	4293      	cmp	r3, r2
 810964e:	d068      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	4a93      	ldr	r2, [pc, #588]	@ (81098a8 <HAL_UART_IRQHandler+0x568>)
 810965a:	4293      	cmp	r3, r2
 810965c:	d061      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109664:	681b      	ldr	r3, [r3, #0]
 8109666:	4a91      	ldr	r2, [pc, #580]	@ (81098ac <HAL_UART_IRQHandler+0x56c>)
 8109668:	4293      	cmp	r3, r2
 810966a:	d05a      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 810966c:	687b      	ldr	r3, [r7, #4]
 810966e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109672:	681b      	ldr	r3, [r3, #0]
 8109674:	4a8e      	ldr	r2, [pc, #568]	@ (81098b0 <HAL_UART_IRQHandler+0x570>)
 8109676:	4293      	cmp	r3, r2
 8109678:	d053      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109680:	681b      	ldr	r3, [r3, #0]
 8109682:	4a8c      	ldr	r2, [pc, #560]	@ (81098b4 <HAL_UART_IRQHandler+0x574>)
 8109684:	4293      	cmp	r3, r2
 8109686:	d04c      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810968e:	681b      	ldr	r3, [r3, #0]
 8109690:	4a89      	ldr	r2, [pc, #548]	@ (81098b8 <HAL_UART_IRQHandler+0x578>)
 8109692:	4293      	cmp	r3, r2
 8109694:	d045      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 8109696:	687b      	ldr	r3, [r7, #4]
 8109698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810969c:	681b      	ldr	r3, [r3, #0]
 810969e:	4a87      	ldr	r2, [pc, #540]	@ (81098bc <HAL_UART_IRQHandler+0x57c>)
 81096a0:	4293      	cmp	r3, r2
 81096a2:	d03e      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096aa:	681b      	ldr	r3, [r3, #0]
 81096ac:	4a84      	ldr	r2, [pc, #528]	@ (81098c0 <HAL_UART_IRQHandler+0x580>)
 81096ae:	4293      	cmp	r3, r2
 81096b0:	d037      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	4a82      	ldr	r2, [pc, #520]	@ (81098c4 <HAL_UART_IRQHandler+0x584>)
 81096bc:	4293      	cmp	r3, r2
 81096be:	d030      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096c6:	681b      	ldr	r3, [r3, #0]
 81096c8:	4a7f      	ldr	r2, [pc, #508]	@ (81098c8 <HAL_UART_IRQHandler+0x588>)
 81096ca:	4293      	cmp	r3, r2
 81096cc:	d029      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096ce:	687b      	ldr	r3, [r7, #4]
 81096d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096d4:	681b      	ldr	r3, [r3, #0]
 81096d6:	4a7d      	ldr	r2, [pc, #500]	@ (81098cc <HAL_UART_IRQHandler+0x58c>)
 81096d8:	4293      	cmp	r3, r2
 81096da:	d022      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096e2:	681b      	ldr	r3, [r3, #0]
 81096e4:	4a7a      	ldr	r2, [pc, #488]	@ (81098d0 <HAL_UART_IRQHandler+0x590>)
 81096e6:	4293      	cmp	r3, r2
 81096e8:	d01b      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096f0:	681b      	ldr	r3, [r3, #0]
 81096f2:	4a78      	ldr	r2, [pc, #480]	@ (81098d4 <HAL_UART_IRQHandler+0x594>)
 81096f4:	4293      	cmp	r3, r2
 81096f6:	d014      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096fe:	681b      	ldr	r3, [r3, #0]
 8109700:	4a75      	ldr	r2, [pc, #468]	@ (81098d8 <HAL_UART_IRQHandler+0x598>)
 8109702:	4293      	cmp	r3, r2
 8109704:	d00d      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810970c:	681b      	ldr	r3, [r3, #0]
 810970e:	4a73      	ldr	r2, [pc, #460]	@ (81098dc <HAL_UART_IRQHandler+0x59c>)
 8109710:	4293      	cmp	r3, r2
 8109712:	d006      	beq.n	8109722 <HAL_UART_IRQHandler+0x3e2>
 8109714:	687b      	ldr	r3, [r7, #4]
 8109716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	4a70      	ldr	r2, [pc, #448]	@ (81098e0 <HAL_UART_IRQHandler+0x5a0>)
 810971e:	4293      	cmp	r3, r2
 8109720:	d106      	bne.n	8109730 <HAL_UART_IRQHandler+0x3f0>
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109728:	681b      	ldr	r3, [r3, #0]
 810972a:	685b      	ldr	r3, [r3, #4]
 810972c:	b29b      	uxth	r3, r3
 810972e:	e005      	b.n	810973c <HAL_UART_IRQHandler+0x3fc>
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109736:	681b      	ldr	r3, [r3, #0]
 8109738:	685b      	ldr	r3, [r3, #4]
 810973a:	b29b      	uxth	r3, r3
 810973c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8109740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8109744:	2b00      	cmp	r3, #0
 8109746:	f000 81ad 	beq.w	8109aa4 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109754:	429a      	cmp	r2, r3
 8109756:	f080 81a5 	bcs.w	8109aa4 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810976a:	69db      	ldr	r3, [r3, #28]
 810976c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109770:	f000 8087 	beq.w	8109882 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	681b      	ldr	r3, [r3, #0]
 8109778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810977c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8109780:	e853 3f00 	ldrex	r3, [r3]
 8109784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8109788:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810978c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	681b      	ldr	r3, [r3, #0]
 8109798:	461a      	mov	r2, r3
 810979a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810979e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81097a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 81097aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 81097ae:	e841 2300 	strex	r3, r2, [r1]
 81097b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 81097b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81097ba:	2b00      	cmp	r3, #0
 81097bc:	d1da      	bne.n	8109774 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	681b      	ldr	r3, [r3, #0]
 81097c2:	3308      	adds	r3, #8
 81097c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81097c8:	e853 3f00 	ldrex	r3, [r3]
 81097cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 81097ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81097d0:	f023 0301 	bic.w	r3, r3, #1
 81097d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	681b      	ldr	r3, [r3, #0]
 81097dc:	3308      	adds	r3, #8
 81097de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 81097e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 81097e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 81097ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 81097ee:	e841 2300 	strex	r3, r2, [r1]
 81097f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 81097f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81097f6:	2b00      	cmp	r3, #0
 81097f8:	d1e1      	bne.n	81097be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81097fa:	687b      	ldr	r3, [r7, #4]
 81097fc:	681b      	ldr	r3, [r3, #0]
 81097fe:	3308      	adds	r3, #8
 8109800:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8109804:	e853 3f00 	ldrex	r3, [r3]
 8109808:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810980a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810980c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	681b      	ldr	r3, [r3, #0]
 8109818:	3308      	adds	r3, #8
 810981a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810981e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8109820:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109822:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8109824:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8109826:	e841 2300 	strex	r3, r2, [r1]
 810982a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810982c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810982e:	2b00      	cmp	r3, #0
 8109830:	d1e3      	bne.n	81097fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8109832:	687b      	ldr	r3, [r7, #4]
 8109834:	2220      	movs	r2, #32
 8109836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	2200      	movs	r2, #0
 810983e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	681b      	ldr	r3, [r3, #0]
 8109844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109848:	e853 3f00 	ldrex	r3, [r3]
 810984c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810984e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109850:	f023 0310 	bic.w	r3, r3, #16
 8109854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	681b      	ldr	r3, [r3, #0]
 810985c:	461a      	mov	r2, r3
 810985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8109862:	65bb      	str	r3, [r7, #88]	@ 0x58
 8109864:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8109868:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810986a:	e841 2300 	strex	r3, r2, [r1]
 810986e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8109870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109872:	2b00      	cmp	r3, #0
 8109874:	d1e4      	bne.n	8109840 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8109876:	687b      	ldr	r3, [r7, #4]
 8109878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810987c:	4618      	mov	r0, r3
 810987e:	f7fa f853 	bl	8103928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	2202      	movs	r2, #2
 8109886:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8109888:	687b      	ldr	r3, [r7, #4]
 810988a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109894:	b29b      	uxth	r3, r3
 8109896:	1ad3      	subs	r3, r2, r3
 8109898:	b29b      	uxth	r3, r3
 810989a:	4619      	mov	r1, r3
 810989c:	6878      	ldr	r0, [r7, #4]
 810989e:	f7f7 ffb9 	bl	8101814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 81098a2:	e0ff      	b.n	8109aa4 <HAL_UART_IRQHandler+0x764>
 81098a4:	40020010 	.word	0x40020010
 81098a8:	40020028 	.word	0x40020028
 81098ac:	40020040 	.word	0x40020040
 81098b0:	40020058 	.word	0x40020058
 81098b4:	40020070 	.word	0x40020070
 81098b8:	40020088 	.word	0x40020088
 81098bc:	400200a0 	.word	0x400200a0
 81098c0:	400200b8 	.word	0x400200b8
 81098c4:	40020410 	.word	0x40020410
 81098c8:	40020428 	.word	0x40020428
 81098cc:	40020440 	.word	0x40020440
 81098d0:	40020458 	.word	0x40020458
 81098d4:	40020470 	.word	0x40020470
 81098d8:	40020488 	.word	0x40020488
 81098dc:	400204a0 	.word	0x400204a0
 81098e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 81098ea:	687b      	ldr	r3, [r7, #4]
 81098ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81098f0:	b29b      	uxth	r3, r3
 81098f2:	1ad3      	subs	r3, r2, r3
 81098f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 81098f8:	687b      	ldr	r3, [r7, #4]
 81098fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81098fe:	b29b      	uxth	r3, r3
 8109900:	2b00      	cmp	r3, #0
 8109902:	f000 80d1 	beq.w	8109aa8 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 8109906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810990a:	2b00      	cmp	r3, #0
 810990c:	f000 80cc 	beq.w	8109aa8 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109910:	687b      	ldr	r3, [r7, #4]
 8109912:	681b      	ldr	r3, [r3, #0]
 8109914:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109918:	e853 3f00 	ldrex	r3, [r3]
 810991c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810991e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109924:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8109928:	687b      	ldr	r3, [r7, #4]
 810992a:	681b      	ldr	r3, [r3, #0]
 810992c:	461a      	mov	r2, r3
 810992e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8109932:	647b      	str	r3, [r7, #68]	@ 0x44
 8109934:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109936:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810993a:	e841 2300 	strex	r3, r2, [r1]
 810993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109942:	2b00      	cmp	r3, #0
 8109944:	d1e4      	bne.n	8109910 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109946:	687b      	ldr	r3, [r7, #4]
 8109948:	681b      	ldr	r3, [r3, #0]
 810994a:	3308      	adds	r3, #8
 810994c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109950:	e853 3f00 	ldrex	r3, [r3]
 8109954:	623b      	str	r3, [r7, #32]
   return(result);
 8109956:	6a3b      	ldr	r3, [r7, #32]
 8109958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810995c:	f023 0301 	bic.w	r3, r3, #1
 8109960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	681b      	ldr	r3, [r3, #0]
 8109968:	3308      	adds	r3, #8
 810996a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810996e:	633a      	str	r2, [r7, #48]	@ 0x30
 8109970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8109974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109976:	e841 2300 	strex	r3, r2, [r1]
 810997a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810997e:	2b00      	cmp	r3, #0
 8109980:	d1e1      	bne.n	8109946 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	2220      	movs	r2, #32
 8109986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	2200      	movs	r2, #0
 810998e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	2200      	movs	r2, #0
 8109994:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	681b      	ldr	r3, [r3, #0]
 810999a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810999c:	693b      	ldr	r3, [r7, #16]
 810999e:	e853 3f00 	ldrex	r3, [r3]
 81099a2:	60fb      	str	r3, [r7, #12]
   return(result);
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	f023 0310 	bic.w	r3, r3, #16
 81099aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81099ae:	687b      	ldr	r3, [r7, #4]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	461a      	mov	r2, r3
 81099b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 81099b8:	61fb      	str	r3, [r7, #28]
 81099ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81099bc:	69b9      	ldr	r1, [r7, #24]
 81099be:	69fa      	ldr	r2, [r7, #28]
 81099c0:	e841 2300 	strex	r3, r2, [r1]
 81099c4:	617b      	str	r3, [r7, #20]
   return(result);
 81099c6:	697b      	ldr	r3, [r7, #20]
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d1e4      	bne.n	8109996 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	2202      	movs	r2, #2
 81099d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81099d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 81099d6:	4619      	mov	r1, r3
 81099d8:	6878      	ldr	r0, [r7, #4]
 81099da:	f7f7 ff1b 	bl	8101814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 81099de:	e063      	b.n	8109aa8 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81099e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d00e      	beq.n	8109a0a <HAL_UART_IRQHandler+0x6ca>
 81099ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81099f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	d008      	beq.n	8109a0a <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	681b      	ldr	r3, [r3, #0]
 81099fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8109a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8109a02:	6878      	ldr	r0, [r7, #4]
 8109a04:	f001 fe7c 	bl	810b700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109a08:	e051      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8109a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109a12:	2b00      	cmp	r3, #0
 8109a14:	d014      	beq.n	8109a40 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8109a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109a1e:	2b00      	cmp	r3, #0
 8109a20:	d105      	bne.n	8109a2e <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8109a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109a2a:	2b00      	cmp	r3, #0
 8109a2c:	d008      	beq.n	8109a40 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109a32:	2b00      	cmp	r3, #0
 8109a34:	d03a      	beq.n	8109aac <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 8109a36:	687b      	ldr	r3, [r7, #4]
 8109a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109a3a:	6878      	ldr	r0, [r7, #4]
 8109a3c:	4798      	blx	r3
    }
    return;
 8109a3e:	e035      	b.n	8109aac <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8109a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109a48:	2b00      	cmp	r3, #0
 8109a4a:	d009      	beq.n	8109a60 <HAL_UART_IRQHandler+0x720>
 8109a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109a54:	2b00      	cmp	r3, #0
 8109a56:	d003      	beq.n	8109a60 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 8109a58:	6878      	ldr	r0, [r7, #4]
 8109a5a:	f001 f909 	bl	810ac70 <UART_EndTransmit_IT>
    return;
 8109a5e:	e026      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8109a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109a68:	2b00      	cmp	r3, #0
 8109a6a:	d009      	beq.n	8109a80 <HAL_UART_IRQHandler+0x740>
 8109a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109a74:	2b00      	cmp	r3, #0
 8109a76:	d003      	beq.n	8109a80 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8109a78:	6878      	ldr	r0, [r7, #4]
 8109a7a:	f001 fe55 	bl	810b728 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109a7e:	e016      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8109a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8109a88:	2b00      	cmp	r3, #0
 8109a8a:	d010      	beq.n	8109aae <HAL_UART_IRQHandler+0x76e>
 8109a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a90:	2b00      	cmp	r3, #0
 8109a92:	da0c      	bge.n	8109aae <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8109a94:	6878      	ldr	r0, [r7, #4]
 8109a96:	f001 fe3d 	bl	810b714 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109a9a:	e008      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
      return;
 8109a9c:	bf00      	nop
 8109a9e:	e006      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
    return;
 8109aa0:	bf00      	nop
 8109aa2:	e004      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
      return;
 8109aa4:	bf00      	nop
 8109aa6:	e002      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
      return;
 8109aa8:	bf00      	nop
 8109aaa:	e000      	b.n	8109aae <HAL_UART_IRQHandler+0x76e>
    return;
 8109aac:	bf00      	nop
  }
}
 8109aae:	37e8      	adds	r7, #232	@ 0xe8
 8109ab0:	46bd      	mov	sp, r7
 8109ab2:	bd80      	pop	{r7, pc}

08109ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8109ab4:	b480      	push	{r7}
 8109ab6:	b083      	sub	sp, #12
 8109ab8:	af00      	add	r7, sp, #0
 8109aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8109abc:	bf00      	nop
 8109abe:	370c      	adds	r7, #12
 8109ac0:	46bd      	mov	sp, r7
 8109ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ac6:	4770      	bx	lr

08109ac8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8109ac8:	b480      	push	{r7}
 8109aca:	b083      	sub	sp, #12
 8109acc:	af00      	add	r7, sp, #0
 8109ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8109ad0:	bf00      	nop
 8109ad2:	370c      	adds	r7, #12
 8109ad4:	46bd      	mov	sp, r7
 8109ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ada:	4770      	bx	lr

08109adc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8109adc:	b480      	push	{r7}
 8109ade:	b083      	sub	sp, #12
 8109ae0:	af00      	add	r7, sp, #0
 8109ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109ae4:	bf00      	nop
 8109ae6:	370c      	adds	r7, #12
 8109ae8:	46bd      	mov	sp, r7
 8109aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aee:	4770      	bx	lr

08109af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109af4:	b092      	sub	sp, #72	@ 0x48
 8109af6:	af00      	add	r7, sp, #0
 8109af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109afa:	2300      	movs	r3, #0
 8109afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109b00:	697b      	ldr	r3, [r7, #20]
 8109b02:	689a      	ldr	r2, [r3, #8]
 8109b04:	697b      	ldr	r3, [r7, #20]
 8109b06:	691b      	ldr	r3, [r3, #16]
 8109b08:	431a      	orrs	r2, r3
 8109b0a:	697b      	ldr	r3, [r7, #20]
 8109b0c:	695b      	ldr	r3, [r3, #20]
 8109b0e:	431a      	orrs	r2, r3
 8109b10:	697b      	ldr	r3, [r7, #20]
 8109b12:	69db      	ldr	r3, [r3, #28]
 8109b14:	4313      	orrs	r3, r2
 8109b16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109b18:	697b      	ldr	r3, [r7, #20]
 8109b1a:	681b      	ldr	r3, [r3, #0]
 8109b1c:	681a      	ldr	r2, [r3, #0]
 8109b1e:	4bbd      	ldr	r3, [pc, #756]	@ (8109e14 <UART_SetConfig+0x324>)
 8109b20:	4013      	ands	r3, r2
 8109b22:	697a      	ldr	r2, [r7, #20]
 8109b24:	6812      	ldr	r2, [r2, #0]
 8109b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109b28:	430b      	orrs	r3, r1
 8109b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109b2c:	697b      	ldr	r3, [r7, #20]
 8109b2e:	681b      	ldr	r3, [r3, #0]
 8109b30:	685b      	ldr	r3, [r3, #4]
 8109b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8109b36:	697b      	ldr	r3, [r7, #20]
 8109b38:	68da      	ldr	r2, [r3, #12]
 8109b3a:	697b      	ldr	r3, [r7, #20]
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	430a      	orrs	r2, r1
 8109b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109b42:	697b      	ldr	r3, [r7, #20]
 8109b44:	699b      	ldr	r3, [r3, #24]
 8109b46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109b48:	697b      	ldr	r3, [r7, #20]
 8109b4a:	681b      	ldr	r3, [r3, #0]
 8109b4c:	4ab2      	ldr	r2, [pc, #712]	@ (8109e18 <UART_SetConfig+0x328>)
 8109b4e:	4293      	cmp	r3, r2
 8109b50:	d004      	beq.n	8109b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109b52:	697b      	ldr	r3, [r7, #20]
 8109b54:	6a1b      	ldr	r3, [r3, #32]
 8109b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109b58:	4313      	orrs	r3, r2
 8109b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109b5c:	697b      	ldr	r3, [r7, #20]
 8109b5e:	681b      	ldr	r3, [r3, #0]
 8109b60:	689b      	ldr	r3, [r3, #8]
 8109b62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8109b66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8109b6a:	697a      	ldr	r2, [r7, #20]
 8109b6c:	6812      	ldr	r2, [r2, #0]
 8109b6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109b70:	430b      	orrs	r3, r1
 8109b72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109b74:	697b      	ldr	r3, [r7, #20]
 8109b76:	681b      	ldr	r3, [r3, #0]
 8109b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109b7a:	f023 010f 	bic.w	r1, r3, #15
 8109b7e:	697b      	ldr	r3, [r7, #20]
 8109b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109b82:	697b      	ldr	r3, [r7, #20]
 8109b84:	681b      	ldr	r3, [r3, #0]
 8109b86:	430a      	orrs	r2, r1
 8109b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109b8a:	697b      	ldr	r3, [r7, #20]
 8109b8c:	681b      	ldr	r3, [r3, #0]
 8109b8e:	4aa3      	ldr	r2, [pc, #652]	@ (8109e1c <UART_SetConfig+0x32c>)
 8109b90:	4293      	cmp	r3, r2
 8109b92:	d177      	bne.n	8109c84 <UART_SetConfig+0x194>
 8109b94:	4ba2      	ldr	r3, [pc, #648]	@ (8109e20 <UART_SetConfig+0x330>)
 8109b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109b9c:	2b28      	cmp	r3, #40	@ 0x28
 8109b9e:	d86d      	bhi.n	8109c7c <UART_SetConfig+0x18c>
 8109ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8109ba8 <UART_SetConfig+0xb8>)
 8109ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ba6:	bf00      	nop
 8109ba8:	08109c4d 	.word	0x08109c4d
 8109bac:	08109c7d 	.word	0x08109c7d
 8109bb0:	08109c7d 	.word	0x08109c7d
 8109bb4:	08109c7d 	.word	0x08109c7d
 8109bb8:	08109c7d 	.word	0x08109c7d
 8109bbc:	08109c7d 	.word	0x08109c7d
 8109bc0:	08109c7d 	.word	0x08109c7d
 8109bc4:	08109c7d 	.word	0x08109c7d
 8109bc8:	08109c55 	.word	0x08109c55
 8109bcc:	08109c7d 	.word	0x08109c7d
 8109bd0:	08109c7d 	.word	0x08109c7d
 8109bd4:	08109c7d 	.word	0x08109c7d
 8109bd8:	08109c7d 	.word	0x08109c7d
 8109bdc:	08109c7d 	.word	0x08109c7d
 8109be0:	08109c7d 	.word	0x08109c7d
 8109be4:	08109c7d 	.word	0x08109c7d
 8109be8:	08109c5d 	.word	0x08109c5d
 8109bec:	08109c7d 	.word	0x08109c7d
 8109bf0:	08109c7d 	.word	0x08109c7d
 8109bf4:	08109c7d 	.word	0x08109c7d
 8109bf8:	08109c7d 	.word	0x08109c7d
 8109bfc:	08109c7d 	.word	0x08109c7d
 8109c00:	08109c7d 	.word	0x08109c7d
 8109c04:	08109c7d 	.word	0x08109c7d
 8109c08:	08109c65 	.word	0x08109c65
 8109c0c:	08109c7d 	.word	0x08109c7d
 8109c10:	08109c7d 	.word	0x08109c7d
 8109c14:	08109c7d 	.word	0x08109c7d
 8109c18:	08109c7d 	.word	0x08109c7d
 8109c1c:	08109c7d 	.word	0x08109c7d
 8109c20:	08109c7d 	.word	0x08109c7d
 8109c24:	08109c7d 	.word	0x08109c7d
 8109c28:	08109c6d 	.word	0x08109c6d
 8109c2c:	08109c7d 	.word	0x08109c7d
 8109c30:	08109c7d 	.word	0x08109c7d
 8109c34:	08109c7d 	.word	0x08109c7d
 8109c38:	08109c7d 	.word	0x08109c7d
 8109c3c:	08109c7d 	.word	0x08109c7d
 8109c40:	08109c7d 	.word	0x08109c7d
 8109c44:	08109c7d 	.word	0x08109c7d
 8109c48:	08109c75 	.word	0x08109c75
 8109c4c:	2301      	movs	r3, #1
 8109c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c52:	e220      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c54:	2304      	movs	r3, #4
 8109c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c5a:	e21c      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c5c:	2308      	movs	r3, #8
 8109c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c62:	e218      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c64:	2310      	movs	r3, #16
 8109c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c6a:	e214      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c6c:	2320      	movs	r3, #32
 8109c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c72:	e210      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c74:	2340      	movs	r3, #64	@ 0x40
 8109c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c7a:	e20c      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c7c:	2380      	movs	r3, #128	@ 0x80
 8109c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c82:	e208      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109c84:	697b      	ldr	r3, [r7, #20]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	4a66      	ldr	r2, [pc, #408]	@ (8109e24 <UART_SetConfig+0x334>)
 8109c8a:	4293      	cmp	r3, r2
 8109c8c:	d130      	bne.n	8109cf0 <UART_SetConfig+0x200>
 8109c8e:	4b64      	ldr	r3, [pc, #400]	@ (8109e20 <UART_SetConfig+0x330>)
 8109c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109c92:	f003 0307 	and.w	r3, r3, #7
 8109c96:	2b05      	cmp	r3, #5
 8109c98:	d826      	bhi.n	8109ce8 <UART_SetConfig+0x1f8>
 8109c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8109ca0 <UART_SetConfig+0x1b0>)
 8109c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ca0:	08109cb9 	.word	0x08109cb9
 8109ca4:	08109cc1 	.word	0x08109cc1
 8109ca8:	08109cc9 	.word	0x08109cc9
 8109cac:	08109cd1 	.word	0x08109cd1
 8109cb0:	08109cd9 	.word	0x08109cd9
 8109cb4:	08109ce1 	.word	0x08109ce1
 8109cb8:	2300      	movs	r3, #0
 8109cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cbe:	e1ea      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109cc0:	2304      	movs	r3, #4
 8109cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cc6:	e1e6      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109cc8:	2308      	movs	r3, #8
 8109cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cce:	e1e2      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109cd0:	2310      	movs	r3, #16
 8109cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cd6:	e1de      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109cd8:	2320      	movs	r3, #32
 8109cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cde:	e1da      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109ce0:	2340      	movs	r3, #64	@ 0x40
 8109ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ce6:	e1d6      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109ce8:	2380      	movs	r3, #128	@ 0x80
 8109cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cee:	e1d2      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109cf0:	697b      	ldr	r3, [r7, #20]
 8109cf2:	681b      	ldr	r3, [r3, #0]
 8109cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8109e28 <UART_SetConfig+0x338>)
 8109cf6:	4293      	cmp	r3, r2
 8109cf8:	d130      	bne.n	8109d5c <UART_SetConfig+0x26c>
 8109cfa:	4b49      	ldr	r3, [pc, #292]	@ (8109e20 <UART_SetConfig+0x330>)
 8109cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109cfe:	f003 0307 	and.w	r3, r3, #7
 8109d02:	2b05      	cmp	r3, #5
 8109d04:	d826      	bhi.n	8109d54 <UART_SetConfig+0x264>
 8109d06:	a201      	add	r2, pc, #4	@ (adr r2, 8109d0c <UART_SetConfig+0x21c>)
 8109d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d0c:	08109d25 	.word	0x08109d25
 8109d10:	08109d2d 	.word	0x08109d2d
 8109d14:	08109d35 	.word	0x08109d35
 8109d18:	08109d3d 	.word	0x08109d3d
 8109d1c:	08109d45 	.word	0x08109d45
 8109d20:	08109d4d 	.word	0x08109d4d
 8109d24:	2300      	movs	r3, #0
 8109d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d2a:	e1b4      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d2c:	2304      	movs	r3, #4
 8109d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d32:	e1b0      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d34:	2308      	movs	r3, #8
 8109d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d3a:	e1ac      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d3c:	2310      	movs	r3, #16
 8109d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d42:	e1a8      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d44:	2320      	movs	r3, #32
 8109d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d4a:	e1a4      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d4c:	2340      	movs	r3, #64	@ 0x40
 8109d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d52:	e1a0      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d54:	2380      	movs	r3, #128	@ 0x80
 8109d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d5a:	e19c      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d5c:	697b      	ldr	r3, [r7, #20]
 8109d5e:	681b      	ldr	r3, [r3, #0]
 8109d60:	4a32      	ldr	r2, [pc, #200]	@ (8109e2c <UART_SetConfig+0x33c>)
 8109d62:	4293      	cmp	r3, r2
 8109d64:	d130      	bne.n	8109dc8 <UART_SetConfig+0x2d8>
 8109d66:	4b2e      	ldr	r3, [pc, #184]	@ (8109e20 <UART_SetConfig+0x330>)
 8109d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d6a:	f003 0307 	and.w	r3, r3, #7
 8109d6e:	2b05      	cmp	r3, #5
 8109d70:	d826      	bhi.n	8109dc0 <UART_SetConfig+0x2d0>
 8109d72:	a201      	add	r2, pc, #4	@ (adr r2, 8109d78 <UART_SetConfig+0x288>)
 8109d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d78:	08109d91 	.word	0x08109d91
 8109d7c:	08109d99 	.word	0x08109d99
 8109d80:	08109da1 	.word	0x08109da1
 8109d84:	08109da9 	.word	0x08109da9
 8109d88:	08109db1 	.word	0x08109db1
 8109d8c:	08109db9 	.word	0x08109db9
 8109d90:	2300      	movs	r3, #0
 8109d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d96:	e17e      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109d98:	2304      	movs	r3, #4
 8109d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d9e:	e17a      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109da0:	2308      	movs	r3, #8
 8109da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109da6:	e176      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109da8:	2310      	movs	r3, #16
 8109daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dae:	e172      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109db0:	2320      	movs	r3, #32
 8109db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109db6:	e16e      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109db8:	2340      	movs	r3, #64	@ 0x40
 8109dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dbe:	e16a      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109dc0:	2380      	movs	r3, #128	@ 0x80
 8109dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dc6:	e166      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109dc8:	697b      	ldr	r3, [r7, #20]
 8109dca:	681b      	ldr	r3, [r3, #0]
 8109dcc:	4a18      	ldr	r2, [pc, #96]	@ (8109e30 <UART_SetConfig+0x340>)
 8109dce:	4293      	cmp	r3, r2
 8109dd0:	d140      	bne.n	8109e54 <UART_SetConfig+0x364>
 8109dd2:	4b13      	ldr	r3, [pc, #76]	@ (8109e20 <UART_SetConfig+0x330>)
 8109dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109dd6:	f003 0307 	and.w	r3, r3, #7
 8109dda:	2b05      	cmp	r3, #5
 8109ddc:	d836      	bhi.n	8109e4c <UART_SetConfig+0x35c>
 8109dde:	a201      	add	r2, pc, #4	@ (adr r2, 8109de4 <UART_SetConfig+0x2f4>)
 8109de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109de4:	08109dfd 	.word	0x08109dfd
 8109de8:	08109e05 	.word	0x08109e05
 8109dec:	08109e0d 	.word	0x08109e0d
 8109df0:	08109e35 	.word	0x08109e35
 8109df4:	08109e3d 	.word	0x08109e3d
 8109df8:	08109e45 	.word	0x08109e45
 8109dfc:	2300      	movs	r3, #0
 8109dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e02:	e148      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e04:	2304      	movs	r3, #4
 8109e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e0a:	e144      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e0c:	2308      	movs	r3, #8
 8109e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e12:	e140      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e14:	cfff69f3 	.word	0xcfff69f3
 8109e18:	58000c00 	.word	0x58000c00
 8109e1c:	40011000 	.word	0x40011000
 8109e20:	58024400 	.word	0x58024400
 8109e24:	40004400 	.word	0x40004400
 8109e28:	40004800 	.word	0x40004800
 8109e2c:	40004c00 	.word	0x40004c00
 8109e30:	40005000 	.word	0x40005000
 8109e34:	2310      	movs	r3, #16
 8109e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e3a:	e12c      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e3c:	2320      	movs	r3, #32
 8109e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e42:	e128      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e44:	2340      	movs	r3, #64	@ 0x40
 8109e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e4a:	e124      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e4c:	2380      	movs	r3, #128	@ 0x80
 8109e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109e52:	e120      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109e54:	697b      	ldr	r3, [r7, #20]
 8109e56:	681b      	ldr	r3, [r3, #0]
 8109e58:	4acb      	ldr	r2, [pc, #812]	@ (810a188 <UART_SetConfig+0x698>)
 8109e5a:	4293      	cmp	r3, r2
 8109e5c:	d176      	bne.n	8109f4c <UART_SetConfig+0x45c>
 8109e5e:	4bcb      	ldr	r3, [pc, #812]	@ (810a18c <UART_SetConfig+0x69c>)
 8109e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109e66:	2b28      	cmp	r3, #40	@ 0x28
 8109e68:	d86c      	bhi.n	8109f44 <UART_SetConfig+0x454>
 8109e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8109e70 <UART_SetConfig+0x380>)
 8109e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e70:	08109f15 	.word	0x08109f15
 8109e74:	08109f45 	.word	0x08109f45
 8109e78:	08109f45 	.word	0x08109f45
 8109e7c:	08109f45 	.word	0x08109f45
 8109e80:	08109f45 	.word	0x08109f45
 8109e84:	08109f45 	.word	0x08109f45
 8109e88:	08109f45 	.word	0x08109f45
 8109e8c:	08109f45 	.word	0x08109f45
 8109e90:	08109f1d 	.word	0x08109f1d
 8109e94:	08109f45 	.word	0x08109f45
 8109e98:	08109f45 	.word	0x08109f45
 8109e9c:	08109f45 	.word	0x08109f45
 8109ea0:	08109f45 	.word	0x08109f45
 8109ea4:	08109f45 	.word	0x08109f45
 8109ea8:	08109f45 	.word	0x08109f45
 8109eac:	08109f45 	.word	0x08109f45
 8109eb0:	08109f25 	.word	0x08109f25
 8109eb4:	08109f45 	.word	0x08109f45
 8109eb8:	08109f45 	.word	0x08109f45
 8109ebc:	08109f45 	.word	0x08109f45
 8109ec0:	08109f45 	.word	0x08109f45
 8109ec4:	08109f45 	.word	0x08109f45
 8109ec8:	08109f45 	.word	0x08109f45
 8109ecc:	08109f45 	.word	0x08109f45
 8109ed0:	08109f2d 	.word	0x08109f2d
 8109ed4:	08109f45 	.word	0x08109f45
 8109ed8:	08109f45 	.word	0x08109f45
 8109edc:	08109f45 	.word	0x08109f45
 8109ee0:	08109f45 	.word	0x08109f45
 8109ee4:	08109f45 	.word	0x08109f45
 8109ee8:	08109f45 	.word	0x08109f45
 8109eec:	08109f45 	.word	0x08109f45
 8109ef0:	08109f35 	.word	0x08109f35
 8109ef4:	08109f45 	.word	0x08109f45
 8109ef8:	08109f45 	.word	0x08109f45
 8109efc:	08109f45 	.word	0x08109f45
 8109f00:	08109f45 	.word	0x08109f45
 8109f04:	08109f45 	.word	0x08109f45
 8109f08:	08109f45 	.word	0x08109f45
 8109f0c:	08109f45 	.word	0x08109f45
 8109f10:	08109f3d 	.word	0x08109f3d
 8109f14:	2301      	movs	r3, #1
 8109f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f1a:	e0bc      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f1c:	2304      	movs	r3, #4
 8109f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f22:	e0b8      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f24:	2308      	movs	r3, #8
 8109f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f2a:	e0b4      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f2c:	2310      	movs	r3, #16
 8109f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f32:	e0b0      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f34:	2320      	movs	r3, #32
 8109f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f3a:	e0ac      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f3c:	2340      	movs	r3, #64	@ 0x40
 8109f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f42:	e0a8      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f44:	2380      	movs	r3, #128	@ 0x80
 8109f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f4a:	e0a4      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f4c:	697b      	ldr	r3, [r7, #20]
 8109f4e:	681b      	ldr	r3, [r3, #0]
 8109f50:	4a8f      	ldr	r2, [pc, #572]	@ (810a190 <UART_SetConfig+0x6a0>)
 8109f52:	4293      	cmp	r3, r2
 8109f54:	d130      	bne.n	8109fb8 <UART_SetConfig+0x4c8>
 8109f56:	4b8d      	ldr	r3, [pc, #564]	@ (810a18c <UART_SetConfig+0x69c>)
 8109f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109f5a:	f003 0307 	and.w	r3, r3, #7
 8109f5e:	2b05      	cmp	r3, #5
 8109f60:	d826      	bhi.n	8109fb0 <UART_SetConfig+0x4c0>
 8109f62:	a201      	add	r2, pc, #4	@ (adr r2, 8109f68 <UART_SetConfig+0x478>)
 8109f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f68:	08109f81 	.word	0x08109f81
 8109f6c:	08109f89 	.word	0x08109f89
 8109f70:	08109f91 	.word	0x08109f91
 8109f74:	08109f99 	.word	0x08109f99
 8109f78:	08109fa1 	.word	0x08109fa1
 8109f7c:	08109fa9 	.word	0x08109fa9
 8109f80:	2300      	movs	r3, #0
 8109f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f86:	e086      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f88:	2304      	movs	r3, #4
 8109f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f8e:	e082      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f90:	2308      	movs	r3, #8
 8109f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f96:	e07e      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109f98:	2310      	movs	r3, #16
 8109f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f9e:	e07a      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109fa0:	2320      	movs	r3, #32
 8109fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fa6:	e076      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109fa8:	2340      	movs	r3, #64	@ 0x40
 8109faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fae:	e072      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109fb0:	2380      	movs	r3, #128	@ 0x80
 8109fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fb6:	e06e      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109fb8:	697b      	ldr	r3, [r7, #20]
 8109fba:	681b      	ldr	r3, [r3, #0]
 8109fbc:	4a75      	ldr	r2, [pc, #468]	@ (810a194 <UART_SetConfig+0x6a4>)
 8109fbe:	4293      	cmp	r3, r2
 8109fc0:	d130      	bne.n	810a024 <UART_SetConfig+0x534>
 8109fc2:	4b72      	ldr	r3, [pc, #456]	@ (810a18c <UART_SetConfig+0x69c>)
 8109fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109fc6:	f003 0307 	and.w	r3, r3, #7
 8109fca:	2b05      	cmp	r3, #5
 8109fcc:	d826      	bhi.n	810a01c <UART_SetConfig+0x52c>
 8109fce:	a201      	add	r2, pc, #4	@ (adr r2, 8109fd4 <UART_SetConfig+0x4e4>)
 8109fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109fd4:	08109fed 	.word	0x08109fed
 8109fd8:	08109ff5 	.word	0x08109ff5
 8109fdc:	08109ffd 	.word	0x08109ffd
 8109fe0:	0810a005 	.word	0x0810a005
 8109fe4:	0810a00d 	.word	0x0810a00d
 8109fe8:	0810a015 	.word	0x0810a015
 8109fec:	2300      	movs	r3, #0
 8109fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ff2:	e050      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109ff4:	2304      	movs	r3, #4
 8109ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ffa:	e04c      	b.n	810a096 <UART_SetConfig+0x5a6>
 8109ffc:	2308      	movs	r3, #8
 8109ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a002:	e048      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a004:	2310      	movs	r3, #16
 810a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a00a:	e044      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a00c:	2320      	movs	r3, #32
 810a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a012:	e040      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a014:	2340      	movs	r3, #64	@ 0x40
 810a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a01a:	e03c      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a01c:	2380      	movs	r3, #128	@ 0x80
 810a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a022:	e038      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a024:	697b      	ldr	r3, [r7, #20]
 810a026:	681b      	ldr	r3, [r3, #0]
 810a028:	4a5b      	ldr	r2, [pc, #364]	@ (810a198 <UART_SetConfig+0x6a8>)
 810a02a:	4293      	cmp	r3, r2
 810a02c:	d130      	bne.n	810a090 <UART_SetConfig+0x5a0>
 810a02e:	4b57      	ldr	r3, [pc, #348]	@ (810a18c <UART_SetConfig+0x69c>)
 810a030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a032:	f003 0307 	and.w	r3, r3, #7
 810a036:	2b05      	cmp	r3, #5
 810a038:	d826      	bhi.n	810a088 <UART_SetConfig+0x598>
 810a03a:	a201      	add	r2, pc, #4	@ (adr r2, 810a040 <UART_SetConfig+0x550>)
 810a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a040:	0810a059 	.word	0x0810a059
 810a044:	0810a061 	.word	0x0810a061
 810a048:	0810a069 	.word	0x0810a069
 810a04c:	0810a071 	.word	0x0810a071
 810a050:	0810a079 	.word	0x0810a079
 810a054:	0810a081 	.word	0x0810a081
 810a058:	2302      	movs	r3, #2
 810a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a05e:	e01a      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a060:	2304      	movs	r3, #4
 810a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a066:	e016      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a068:	2308      	movs	r3, #8
 810a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a06e:	e012      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a070:	2310      	movs	r3, #16
 810a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a076:	e00e      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a078:	2320      	movs	r3, #32
 810a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a07e:	e00a      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a080:	2340      	movs	r3, #64	@ 0x40
 810a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a086:	e006      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a088:	2380      	movs	r3, #128	@ 0x80
 810a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a08e:	e002      	b.n	810a096 <UART_SetConfig+0x5a6>
 810a090:	2380      	movs	r3, #128	@ 0x80
 810a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a096:	697b      	ldr	r3, [r7, #20]
 810a098:	681b      	ldr	r3, [r3, #0]
 810a09a:	4a3f      	ldr	r2, [pc, #252]	@ (810a198 <UART_SetConfig+0x6a8>)
 810a09c:	4293      	cmp	r3, r2
 810a09e:	f040 80f8 	bne.w	810a292 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a0a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a0a6:	2b20      	cmp	r3, #32
 810a0a8:	dc46      	bgt.n	810a138 <UART_SetConfig+0x648>
 810a0aa:	2b02      	cmp	r3, #2
 810a0ac:	f2c0 8082 	blt.w	810a1b4 <UART_SetConfig+0x6c4>
 810a0b0:	3b02      	subs	r3, #2
 810a0b2:	2b1e      	cmp	r3, #30
 810a0b4:	d87e      	bhi.n	810a1b4 <UART_SetConfig+0x6c4>
 810a0b6:	a201      	add	r2, pc, #4	@ (adr r2, 810a0bc <UART_SetConfig+0x5cc>)
 810a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0bc:	0810a13f 	.word	0x0810a13f
 810a0c0:	0810a1b5 	.word	0x0810a1b5
 810a0c4:	0810a147 	.word	0x0810a147
 810a0c8:	0810a1b5 	.word	0x0810a1b5
 810a0cc:	0810a1b5 	.word	0x0810a1b5
 810a0d0:	0810a1b5 	.word	0x0810a1b5
 810a0d4:	0810a157 	.word	0x0810a157
 810a0d8:	0810a1b5 	.word	0x0810a1b5
 810a0dc:	0810a1b5 	.word	0x0810a1b5
 810a0e0:	0810a1b5 	.word	0x0810a1b5
 810a0e4:	0810a1b5 	.word	0x0810a1b5
 810a0e8:	0810a1b5 	.word	0x0810a1b5
 810a0ec:	0810a1b5 	.word	0x0810a1b5
 810a0f0:	0810a1b5 	.word	0x0810a1b5
 810a0f4:	0810a167 	.word	0x0810a167
 810a0f8:	0810a1b5 	.word	0x0810a1b5
 810a0fc:	0810a1b5 	.word	0x0810a1b5
 810a100:	0810a1b5 	.word	0x0810a1b5
 810a104:	0810a1b5 	.word	0x0810a1b5
 810a108:	0810a1b5 	.word	0x0810a1b5
 810a10c:	0810a1b5 	.word	0x0810a1b5
 810a110:	0810a1b5 	.word	0x0810a1b5
 810a114:	0810a1b5 	.word	0x0810a1b5
 810a118:	0810a1b5 	.word	0x0810a1b5
 810a11c:	0810a1b5 	.word	0x0810a1b5
 810a120:	0810a1b5 	.word	0x0810a1b5
 810a124:	0810a1b5 	.word	0x0810a1b5
 810a128:	0810a1b5 	.word	0x0810a1b5
 810a12c:	0810a1b5 	.word	0x0810a1b5
 810a130:	0810a1b5 	.word	0x0810a1b5
 810a134:	0810a1a7 	.word	0x0810a1a7
 810a138:	2b40      	cmp	r3, #64	@ 0x40
 810a13a:	d037      	beq.n	810a1ac <UART_SetConfig+0x6bc>
 810a13c:	e03a      	b.n	810a1b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a13e:	f7fd ffdf 	bl	8108100 <HAL_RCCEx_GetD3PCLK1Freq>
 810a142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a144:	e03c      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a14a:	4618      	mov	r0, r3
 810a14c:	f7fd ffee 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a154:	e034      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a156:	f107 0318 	add.w	r3, r7, #24
 810a15a:	4618      	mov	r0, r3
 810a15c:	f7fe f93a 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a160:	69fb      	ldr	r3, [r7, #28]
 810a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a164:	e02c      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a166:	4b09      	ldr	r3, [pc, #36]	@ (810a18c <UART_SetConfig+0x69c>)
 810a168:	681b      	ldr	r3, [r3, #0]
 810a16a:	f003 0320 	and.w	r3, r3, #32
 810a16e:	2b00      	cmp	r3, #0
 810a170:	d016      	beq.n	810a1a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a172:	4b06      	ldr	r3, [pc, #24]	@ (810a18c <UART_SetConfig+0x69c>)
 810a174:	681b      	ldr	r3, [r3, #0]
 810a176:	08db      	lsrs	r3, r3, #3
 810a178:	f003 0303 	and.w	r3, r3, #3
 810a17c:	4a07      	ldr	r2, [pc, #28]	@ (810a19c <UART_SetConfig+0x6ac>)
 810a17e:	fa22 f303 	lsr.w	r3, r2, r3
 810a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a184:	e01c      	b.n	810a1c0 <UART_SetConfig+0x6d0>
 810a186:	bf00      	nop
 810a188:	40011400 	.word	0x40011400
 810a18c:	58024400 	.word	0x58024400
 810a190:	40007800 	.word	0x40007800
 810a194:	40007c00 	.word	0x40007c00
 810a198:	58000c00 	.word	0x58000c00
 810a19c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a1a0:	4b9d      	ldr	r3, [pc, #628]	@ (810a418 <UART_SetConfig+0x928>)
 810a1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a1a4:	e00c      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a1a6:	4b9d      	ldr	r3, [pc, #628]	@ (810a41c <UART_SetConfig+0x92c>)
 810a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a1aa:	e009      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a1ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a1b2:	e005      	b.n	810a1c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a1b4:	2300      	movs	r3, #0
 810a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a1b8:	2301      	movs	r3, #1
 810a1ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a1be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a1c2:	2b00      	cmp	r3, #0
 810a1c4:	f000 81de 	beq.w	810a584 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a1c8:	697b      	ldr	r3, [r7, #20]
 810a1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a1cc:	4a94      	ldr	r2, [pc, #592]	@ (810a420 <UART_SetConfig+0x930>)
 810a1ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a1d2:	461a      	mov	r2, r3
 810a1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a1d6:	fbb3 f3f2 	udiv	r3, r3, r2
 810a1da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a1dc:	697b      	ldr	r3, [r7, #20]
 810a1de:	685a      	ldr	r2, [r3, #4]
 810a1e0:	4613      	mov	r3, r2
 810a1e2:	005b      	lsls	r3, r3, #1
 810a1e4:	4413      	add	r3, r2
 810a1e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a1e8:	429a      	cmp	r2, r3
 810a1ea:	d305      	bcc.n	810a1f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a1ec:	697b      	ldr	r3, [r7, #20]
 810a1ee:	685b      	ldr	r3, [r3, #4]
 810a1f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a1f4:	429a      	cmp	r2, r3
 810a1f6:	d903      	bls.n	810a200 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a1f8:	2301      	movs	r3, #1
 810a1fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a1fe:	e1c1      	b.n	810a584 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a202:	2200      	movs	r2, #0
 810a204:	60bb      	str	r3, [r7, #8]
 810a206:	60fa      	str	r2, [r7, #12]
 810a208:	697b      	ldr	r3, [r7, #20]
 810a20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a20c:	4a84      	ldr	r2, [pc, #528]	@ (810a420 <UART_SetConfig+0x930>)
 810a20e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a212:	b29b      	uxth	r3, r3
 810a214:	2200      	movs	r2, #0
 810a216:	603b      	str	r3, [r7, #0]
 810a218:	607a      	str	r2, [r7, #4]
 810a21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a21e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a222:	f7f6 fdc9 	bl	8100db8 <__aeabi_uldivmod>
 810a226:	4602      	mov	r2, r0
 810a228:	460b      	mov	r3, r1
 810a22a:	4610      	mov	r0, r2
 810a22c:	4619      	mov	r1, r3
 810a22e:	f04f 0200 	mov.w	r2, #0
 810a232:	f04f 0300 	mov.w	r3, #0
 810a236:	020b      	lsls	r3, r1, #8
 810a238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a23c:	0202      	lsls	r2, r0, #8
 810a23e:	6979      	ldr	r1, [r7, #20]
 810a240:	6849      	ldr	r1, [r1, #4]
 810a242:	0849      	lsrs	r1, r1, #1
 810a244:	2000      	movs	r0, #0
 810a246:	460c      	mov	r4, r1
 810a248:	4605      	mov	r5, r0
 810a24a:	eb12 0804 	adds.w	r8, r2, r4
 810a24e:	eb43 0905 	adc.w	r9, r3, r5
 810a252:	697b      	ldr	r3, [r7, #20]
 810a254:	685b      	ldr	r3, [r3, #4]
 810a256:	2200      	movs	r2, #0
 810a258:	469a      	mov	sl, r3
 810a25a:	4693      	mov	fp, r2
 810a25c:	4652      	mov	r2, sl
 810a25e:	465b      	mov	r3, fp
 810a260:	4640      	mov	r0, r8
 810a262:	4649      	mov	r1, r9
 810a264:	f7f6 fda8 	bl	8100db8 <__aeabi_uldivmod>
 810a268:	4602      	mov	r2, r0
 810a26a:	460b      	mov	r3, r1
 810a26c:	4613      	mov	r3, r2
 810a26e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a276:	d308      	bcc.n	810a28a <UART_SetConfig+0x79a>
 810a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a27a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a27e:	d204      	bcs.n	810a28a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a280:	697b      	ldr	r3, [r7, #20]
 810a282:	681b      	ldr	r3, [r3, #0]
 810a284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a286:	60da      	str	r2, [r3, #12]
 810a288:	e17c      	b.n	810a584 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a28a:	2301      	movs	r3, #1
 810a28c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a290:	e178      	b.n	810a584 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a292:	697b      	ldr	r3, [r7, #20]
 810a294:	69db      	ldr	r3, [r3, #28]
 810a296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a29a:	f040 80c5 	bne.w	810a428 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a29e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a2a2:	2b20      	cmp	r3, #32
 810a2a4:	dc48      	bgt.n	810a338 <UART_SetConfig+0x848>
 810a2a6:	2b00      	cmp	r3, #0
 810a2a8:	db7b      	blt.n	810a3a2 <UART_SetConfig+0x8b2>
 810a2aa:	2b20      	cmp	r3, #32
 810a2ac:	d879      	bhi.n	810a3a2 <UART_SetConfig+0x8b2>
 810a2ae:	a201      	add	r2, pc, #4	@ (adr r2, 810a2b4 <UART_SetConfig+0x7c4>)
 810a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2b4:	0810a33f 	.word	0x0810a33f
 810a2b8:	0810a347 	.word	0x0810a347
 810a2bc:	0810a3a3 	.word	0x0810a3a3
 810a2c0:	0810a3a3 	.word	0x0810a3a3
 810a2c4:	0810a34f 	.word	0x0810a34f
 810a2c8:	0810a3a3 	.word	0x0810a3a3
 810a2cc:	0810a3a3 	.word	0x0810a3a3
 810a2d0:	0810a3a3 	.word	0x0810a3a3
 810a2d4:	0810a35f 	.word	0x0810a35f
 810a2d8:	0810a3a3 	.word	0x0810a3a3
 810a2dc:	0810a3a3 	.word	0x0810a3a3
 810a2e0:	0810a3a3 	.word	0x0810a3a3
 810a2e4:	0810a3a3 	.word	0x0810a3a3
 810a2e8:	0810a3a3 	.word	0x0810a3a3
 810a2ec:	0810a3a3 	.word	0x0810a3a3
 810a2f0:	0810a3a3 	.word	0x0810a3a3
 810a2f4:	0810a36f 	.word	0x0810a36f
 810a2f8:	0810a3a3 	.word	0x0810a3a3
 810a2fc:	0810a3a3 	.word	0x0810a3a3
 810a300:	0810a3a3 	.word	0x0810a3a3
 810a304:	0810a3a3 	.word	0x0810a3a3
 810a308:	0810a3a3 	.word	0x0810a3a3
 810a30c:	0810a3a3 	.word	0x0810a3a3
 810a310:	0810a3a3 	.word	0x0810a3a3
 810a314:	0810a3a3 	.word	0x0810a3a3
 810a318:	0810a3a3 	.word	0x0810a3a3
 810a31c:	0810a3a3 	.word	0x0810a3a3
 810a320:	0810a3a3 	.word	0x0810a3a3
 810a324:	0810a3a3 	.word	0x0810a3a3
 810a328:	0810a3a3 	.word	0x0810a3a3
 810a32c:	0810a3a3 	.word	0x0810a3a3
 810a330:	0810a3a3 	.word	0x0810a3a3
 810a334:	0810a395 	.word	0x0810a395
 810a338:	2b40      	cmp	r3, #64	@ 0x40
 810a33a:	d02e      	beq.n	810a39a <UART_SetConfig+0x8aa>
 810a33c:	e031      	b.n	810a3a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a33e:	f7fb fee7 	bl	8106110 <HAL_RCC_GetPCLK1Freq>
 810a342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a344:	e033      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a346:	f7fb fef9 	bl	810613c <HAL_RCC_GetPCLK2Freq>
 810a34a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a34c:	e02f      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a34e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a352:	4618      	mov	r0, r3
 810a354:	f7fd feea 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a35c:	e027      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a35e:	f107 0318 	add.w	r3, r7, #24
 810a362:	4618      	mov	r0, r3
 810a364:	f7fe f836 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a368:	69fb      	ldr	r3, [r7, #28]
 810a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a36c:	e01f      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a36e:	4b2d      	ldr	r3, [pc, #180]	@ (810a424 <UART_SetConfig+0x934>)
 810a370:	681b      	ldr	r3, [r3, #0]
 810a372:	f003 0320 	and.w	r3, r3, #32
 810a376:	2b00      	cmp	r3, #0
 810a378:	d009      	beq.n	810a38e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a37a:	4b2a      	ldr	r3, [pc, #168]	@ (810a424 <UART_SetConfig+0x934>)
 810a37c:	681b      	ldr	r3, [r3, #0]
 810a37e:	08db      	lsrs	r3, r3, #3
 810a380:	f003 0303 	and.w	r3, r3, #3
 810a384:	4a24      	ldr	r2, [pc, #144]	@ (810a418 <UART_SetConfig+0x928>)
 810a386:	fa22 f303 	lsr.w	r3, r2, r3
 810a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a38c:	e00f      	b.n	810a3ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a38e:	4b22      	ldr	r3, [pc, #136]	@ (810a418 <UART_SetConfig+0x928>)
 810a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a392:	e00c      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a394:	4b21      	ldr	r3, [pc, #132]	@ (810a41c <UART_SetConfig+0x92c>)
 810a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a398:	e009      	b.n	810a3ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a39a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a3a0:	e005      	b.n	810a3ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a3a2:	2300      	movs	r3, #0
 810a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a3a6:	2301      	movs	r3, #1
 810a3a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a3ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a3b0:	2b00      	cmp	r3, #0
 810a3b2:	f000 80e7 	beq.w	810a584 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a3b6:	697b      	ldr	r3, [r7, #20]
 810a3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a3ba:	4a19      	ldr	r2, [pc, #100]	@ (810a420 <UART_SetConfig+0x930>)
 810a3bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a3c0:	461a      	mov	r2, r3
 810a3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a3c4:	fbb3 f3f2 	udiv	r3, r3, r2
 810a3c8:	005a      	lsls	r2, r3, #1
 810a3ca:	697b      	ldr	r3, [r7, #20]
 810a3cc:	685b      	ldr	r3, [r3, #4]
 810a3ce:	085b      	lsrs	r3, r3, #1
 810a3d0:	441a      	add	r2, r3
 810a3d2:	697b      	ldr	r3, [r7, #20]
 810a3d4:	685b      	ldr	r3, [r3, #4]
 810a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 810a3da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a3de:	2b0f      	cmp	r3, #15
 810a3e0:	d916      	bls.n	810a410 <UART_SetConfig+0x920>
 810a3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a3e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a3e8:	d212      	bcs.n	810a410 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a3ec:	b29b      	uxth	r3, r3
 810a3ee:	f023 030f 	bic.w	r3, r3, #15
 810a3f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a3f6:	085b      	lsrs	r3, r3, #1
 810a3f8:	b29b      	uxth	r3, r3
 810a3fa:	f003 0307 	and.w	r3, r3, #7
 810a3fe:	b29a      	uxth	r2, r3
 810a400:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810a402:	4313      	orrs	r3, r2
 810a404:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810a406:	697b      	ldr	r3, [r7, #20]
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810a40c:	60da      	str	r2, [r3, #12]
 810a40e:	e0b9      	b.n	810a584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a410:	2301      	movs	r3, #1
 810a412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a416:	e0b5      	b.n	810a584 <UART_SetConfig+0xa94>
 810a418:	03d09000 	.word	0x03d09000
 810a41c:	003d0900 	.word	0x003d0900
 810a420:	08117480 	.word	0x08117480
 810a424:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a428:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a42c:	2b20      	cmp	r3, #32
 810a42e:	dc49      	bgt.n	810a4c4 <UART_SetConfig+0x9d4>
 810a430:	2b00      	cmp	r3, #0
 810a432:	db7c      	blt.n	810a52e <UART_SetConfig+0xa3e>
 810a434:	2b20      	cmp	r3, #32
 810a436:	d87a      	bhi.n	810a52e <UART_SetConfig+0xa3e>
 810a438:	a201      	add	r2, pc, #4	@ (adr r2, 810a440 <UART_SetConfig+0x950>)
 810a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a43e:	bf00      	nop
 810a440:	0810a4cb 	.word	0x0810a4cb
 810a444:	0810a4d3 	.word	0x0810a4d3
 810a448:	0810a52f 	.word	0x0810a52f
 810a44c:	0810a52f 	.word	0x0810a52f
 810a450:	0810a4db 	.word	0x0810a4db
 810a454:	0810a52f 	.word	0x0810a52f
 810a458:	0810a52f 	.word	0x0810a52f
 810a45c:	0810a52f 	.word	0x0810a52f
 810a460:	0810a4eb 	.word	0x0810a4eb
 810a464:	0810a52f 	.word	0x0810a52f
 810a468:	0810a52f 	.word	0x0810a52f
 810a46c:	0810a52f 	.word	0x0810a52f
 810a470:	0810a52f 	.word	0x0810a52f
 810a474:	0810a52f 	.word	0x0810a52f
 810a478:	0810a52f 	.word	0x0810a52f
 810a47c:	0810a52f 	.word	0x0810a52f
 810a480:	0810a4fb 	.word	0x0810a4fb
 810a484:	0810a52f 	.word	0x0810a52f
 810a488:	0810a52f 	.word	0x0810a52f
 810a48c:	0810a52f 	.word	0x0810a52f
 810a490:	0810a52f 	.word	0x0810a52f
 810a494:	0810a52f 	.word	0x0810a52f
 810a498:	0810a52f 	.word	0x0810a52f
 810a49c:	0810a52f 	.word	0x0810a52f
 810a4a0:	0810a52f 	.word	0x0810a52f
 810a4a4:	0810a52f 	.word	0x0810a52f
 810a4a8:	0810a52f 	.word	0x0810a52f
 810a4ac:	0810a52f 	.word	0x0810a52f
 810a4b0:	0810a52f 	.word	0x0810a52f
 810a4b4:	0810a52f 	.word	0x0810a52f
 810a4b8:	0810a52f 	.word	0x0810a52f
 810a4bc:	0810a52f 	.word	0x0810a52f
 810a4c0:	0810a521 	.word	0x0810a521
 810a4c4:	2b40      	cmp	r3, #64	@ 0x40
 810a4c6:	d02e      	beq.n	810a526 <UART_SetConfig+0xa36>
 810a4c8:	e031      	b.n	810a52e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a4ca:	f7fb fe21 	bl	8106110 <HAL_RCC_GetPCLK1Freq>
 810a4ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a4d0:	e033      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a4d2:	f7fb fe33 	bl	810613c <HAL_RCC_GetPCLK2Freq>
 810a4d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a4d8:	e02f      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a4de:	4618      	mov	r0, r3
 810a4e0:	f7fd fe24 	bl	810812c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a4e8:	e027      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a4ea:	f107 0318 	add.w	r3, r7, #24
 810a4ee:	4618      	mov	r0, r3
 810a4f0:	f7fd ff70 	bl	81083d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a4f4:	69fb      	ldr	r3, [r7, #28]
 810a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a4f8:	e01f      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a4fa:	4b2d      	ldr	r3, [pc, #180]	@ (810a5b0 <UART_SetConfig+0xac0>)
 810a4fc:	681b      	ldr	r3, [r3, #0]
 810a4fe:	f003 0320 	and.w	r3, r3, #32
 810a502:	2b00      	cmp	r3, #0
 810a504:	d009      	beq.n	810a51a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a506:	4b2a      	ldr	r3, [pc, #168]	@ (810a5b0 <UART_SetConfig+0xac0>)
 810a508:	681b      	ldr	r3, [r3, #0]
 810a50a:	08db      	lsrs	r3, r3, #3
 810a50c:	f003 0303 	and.w	r3, r3, #3
 810a510:	4a28      	ldr	r2, [pc, #160]	@ (810a5b4 <UART_SetConfig+0xac4>)
 810a512:	fa22 f303 	lsr.w	r3, r2, r3
 810a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a518:	e00f      	b.n	810a53a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a51a:	4b26      	ldr	r3, [pc, #152]	@ (810a5b4 <UART_SetConfig+0xac4>)
 810a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a51e:	e00c      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a520:	4b25      	ldr	r3, [pc, #148]	@ (810a5b8 <UART_SetConfig+0xac8>)
 810a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a524:	e009      	b.n	810a53a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a52c:	e005      	b.n	810a53a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a52e:	2300      	movs	r3, #0
 810a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a532:	2301      	movs	r3, #1
 810a534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a538:	bf00      	nop
    }

    if (pclk != 0U)
 810a53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	d021      	beq.n	810a584 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a540:	697b      	ldr	r3, [r7, #20]
 810a542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a544:	4a1d      	ldr	r2, [pc, #116]	@ (810a5bc <UART_SetConfig+0xacc>)
 810a546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a54a:	461a      	mov	r2, r3
 810a54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a54e:	fbb3 f2f2 	udiv	r2, r3, r2
 810a552:	697b      	ldr	r3, [r7, #20]
 810a554:	685b      	ldr	r3, [r3, #4]
 810a556:	085b      	lsrs	r3, r3, #1
 810a558:	441a      	add	r2, r3
 810a55a:	697b      	ldr	r3, [r7, #20]
 810a55c:	685b      	ldr	r3, [r3, #4]
 810a55e:	fbb2 f3f3 	udiv	r3, r2, r3
 810a562:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a566:	2b0f      	cmp	r3, #15
 810a568:	d909      	bls.n	810a57e <UART_SetConfig+0xa8e>
 810a56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a56c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a570:	d205      	bcs.n	810a57e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a574:	b29a      	uxth	r2, r3
 810a576:	697b      	ldr	r3, [r7, #20]
 810a578:	681b      	ldr	r3, [r3, #0]
 810a57a:	60da      	str	r2, [r3, #12]
 810a57c:	e002      	b.n	810a584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a57e:	2301      	movs	r3, #1
 810a580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a584:	697b      	ldr	r3, [r7, #20]
 810a586:	2201      	movs	r2, #1
 810a588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810a58c:	697b      	ldr	r3, [r7, #20]
 810a58e:	2201      	movs	r2, #1
 810a590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a594:	697b      	ldr	r3, [r7, #20]
 810a596:	2200      	movs	r2, #0
 810a598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810a59a:	697b      	ldr	r3, [r7, #20]
 810a59c:	2200      	movs	r2, #0
 810a59e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810a5a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810a5a4:	4618      	mov	r0, r3
 810a5a6:	3748      	adds	r7, #72	@ 0x48
 810a5a8:	46bd      	mov	sp, r7
 810a5aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a5ae:	bf00      	nop
 810a5b0:	58024400 	.word	0x58024400
 810a5b4:	03d09000 	.word	0x03d09000
 810a5b8:	003d0900 	.word	0x003d0900
 810a5bc:	08117480 	.word	0x08117480

0810a5c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a5c0:	b480      	push	{r7}
 810a5c2:	b083      	sub	sp, #12
 810a5c4:	af00      	add	r7, sp, #0
 810a5c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a5c8:	687b      	ldr	r3, [r7, #4]
 810a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5cc:	f003 0308 	and.w	r3, r3, #8
 810a5d0:	2b00      	cmp	r3, #0
 810a5d2:	d00a      	beq.n	810a5ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	681b      	ldr	r3, [r3, #0]
 810a5d8:	685b      	ldr	r3, [r3, #4]
 810a5da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a5e2:	687b      	ldr	r3, [r7, #4]
 810a5e4:	681b      	ldr	r3, [r3, #0]
 810a5e6:	430a      	orrs	r2, r1
 810a5e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5ee:	f003 0301 	and.w	r3, r3, #1
 810a5f2:	2b00      	cmp	r3, #0
 810a5f4:	d00a      	beq.n	810a60c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	681b      	ldr	r3, [r3, #0]
 810a5fa:	685b      	ldr	r3, [r3, #4]
 810a5fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a604:	687b      	ldr	r3, [r7, #4]
 810a606:	681b      	ldr	r3, [r3, #0]
 810a608:	430a      	orrs	r2, r1
 810a60a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a610:	f003 0302 	and.w	r3, r3, #2
 810a614:	2b00      	cmp	r3, #0
 810a616:	d00a      	beq.n	810a62e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	681b      	ldr	r3, [r3, #0]
 810a61c:	685b      	ldr	r3, [r3, #4]
 810a61e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a622:	687b      	ldr	r3, [r7, #4]
 810a624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	681b      	ldr	r3, [r3, #0]
 810a62a:	430a      	orrs	r2, r1
 810a62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a632:	f003 0304 	and.w	r3, r3, #4
 810a636:	2b00      	cmp	r3, #0
 810a638:	d00a      	beq.n	810a650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a63a:	687b      	ldr	r3, [r7, #4]
 810a63c:	681b      	ldr	r3, [r3, #0]
 810a63e:	685b      	ldr	r3, [r3, #4]
 810a640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a648:	687b      	ldr	r3, [r7, #4]
 810a64a:	681b      	ldr	r3, [r3, #0]
 810a64c:	430a      	orrs	r2, r1
 810a64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a654:	f003 0310 	and.w	r3, r3, #16
 810a658:	2b00      	cmp	r3, #0
 810a65a:	d00a      	beq.n	810a672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a65c:	687b      	ldr	r3, [r7, #4]
 810a65e:	681b      	ldr	r3, [r3, #0]
 810a660:	689b      	ldr	r3, [r3, #8]
 810a662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810a666:	687b      	ldr	r3, [r7, #4]
 810a668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810a66a:	687b      	ldr	r3, [r7, #4]
 810a66c:	681b      	ldr	r3, [r3, #0]
 810a66e:	430a      	orrs	r2, r1
 810a670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a672:	687b      	ldr	r3, [r7, #4]
 810a674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a676:	f003 0320 	and.w	r3, r3, #32
 810a67a:	2b00      	cmp	r3, #0
 810a67c:	d00a      	beq.n	810a694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	681b      	ldr	r3, [r3, #0]
 810a682:	689b      	ldr	r3, [r3, #8]
 810a684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810a688:	687b      	ldr	r3, [r7, #4]
 810a68a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810a68c:	687b      	ldr	r3, [r7, #4]
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	430a      	orrs	r2, r1
 810a692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a69c:	2b00      	cmp	r3, #0
 810a69e:	d01a      	beq.n	810a6d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a6a0:	687b      	ldr	r3, [r7, #4]
 810a6a2:	681b      	ldr	r3, [r3, #0]
 810a6a4:	685b      	ldr	r3, [r3, #4]
 810a6a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810a6aa:	687b      	ldr	r3, [r7, #4]
 810a6ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810a6ae:	687b      	ldr	r3, [r7, #4]
 810a6b0:	681b      	ldr	r3, [r3, #0]
 810a6b2:	430a      	orrs	r2, r1
 810a6b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a6ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a6be:	d10a      	bne.n	810a6d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a6c0:	687b      	ldr	r3, [r7, #4]
 810a6c2:	681b      	ldr	r3, [r3, #0]
 810a6c4:	685b      	ldr	r3, [r3, #4]
 810a6c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	681b      	ldr	r3, [r3, #0]
 810a6d2:	430a      	orrs	r2, r1
 810a6d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a6d6:	687b      	ldr	r3, [r7, #4]
 810a6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a6da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	d00a      	beq.n	810a6f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a6e2:	687b      	ldr	r3, [r7, #4]
 810a6e4:	681b      	ldr	r3, [r3, #0]
 810a6e6:	685b      	ldr	r3, [r3, #4]
 810a6e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	681b      	ldr	r3, [r3, #0]
 810a6f4:	430a      	orrs	r2, r1
 810a6f6:	605a      	str	r2, [r3, #4]
  }
}
 810a6f8:	bf00      	nop
 810a6fa:	370c      	adds	r7, #12
 810a6fc:	46bd      	mov	sp, r7
 810a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a702:	4770      	bx	lr

0810a704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a704:	b580      	push	{r7, lr}
 810a706:	b098      	sub	sp, #96	@ 0x60
 810a708:	af02      	add	r7, sp, #8
 810a70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	2200      	movs	r2, #0
 810a710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a714:	f7f7 ff5e 	bl	81025d4 <HAL_GetTick>
 810a718:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	681b      	ldr	r3, [r3, #0]
 810a71e:	681b      	ldr	r3, [r3, #0]
 810a720:	f003 0308 	and.w	r3, r3, #8
 810a724:	2b08      	cmp	r3, #8
 810a726:	d12f      	bne.n	810a788 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a72c:	9300      	str	r3, [sp, #0]
 810a72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a730:	2200      	movs	r2, #0
 810a732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810a736:	6878      	ldr	r0, [r7, #4]
 810a738:	f000 f88e 	bl	810a858 <UART_WaitOnFlagUntilTimeout>
 810a73c:	4603      	mov	r3, r0
 810a73e:	2b00      	cmp	r3, #0
 810a740:	d022      	beq.n	810a788 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a74a:	e853 3f00 	ldrex	r3, [r3]
 810a74e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a756:	653b      	str	r3, [r7, #80]	@ 0x50
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	681b      	ldr	r3, [r3, #0]
 810a75c:	461a      	mov	r2, r3
 810a75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a760:	647b      	str	r3, [r7, #68]	@ 0x44
 810a762:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a768:	e841 2300 	strex	r3, r2, [r1]
 810a76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a770:	2b00      	cmp	r3, #0
 810a772:	d1e6      	bne.n	810a742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a774:	687b      	ldr	r3, [r7, #4]
 810a776:	2220      	movs	r2, #32
 810a778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810a77c:	687b      	ldr	r3, [r7, #4]
 810a77e:	2200      	movs	r2, #0
 810a780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a784:	2303      	movs	r3, #3
 810a786:	e063      	b.n	810a850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	681b      	ldr	r3, [r3, #0]
 810a78c:	681b      	ldr	r3, [r3, #0]
 810a78e:	f003 0304 	and.w	r3, r3, #4
 810a792:	2b04      	cmp	r3, #4
 810a794:	d149      	bne.n	810a82a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a796:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a79a:	9300      	str	r3, [sp, #0]
 810a79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a79e:	2200      	movs	r2, #0
 810a7a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810a7a4:	6878      	ldr	r0, [r7, #4]
 810a7a6:	f000 f857 	bl	810a858 <UART_WaitOnFlagUntilTimeout>
 810a7aa:	4603      	mov	r3, r0
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d03c      	beq.n	810a82a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	681b      	ldr	r3, [r3, #0]
 810a7b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a7b8:	e853 3f00 	ldrex	r3, [r3]
 810a7bc:	623b      	str	r3, [r7, #32]
   return(result);
 810a7be:	6a3b      	ldr	r3, [r7, #32]
 810a7c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a7c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	681b      	ldr	r3, [r3, #0]
 810a7ca:	461a      	mov	r2, r3
 810a7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a7ce:	633b      	str	r3, [r7, #48]	@ 0x30
 810a7d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a7d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a7d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a7d6:	e841 2300 	strex	r3, r2, [r1]
 810a7da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a7de:	2b00      	cmp	r3, #0
 810a7e0:	d1e6      	bne.n	810a7b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a7e2:	687b      	ldr	r3, [r7, #4]
 810a7e4:	681b      	ldr	r3, [r3, #0]
 810a7e6:	3308      	adds	r3, #8
 810a7e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a7ea:	693b      	ldr	r3, [r7, #16]
 810a7ec:	e853 3f00 	ldrex	r3, [r3]
 810a7f0:	60fb      	str	r3, [r7, #12]
   return(result);
 810a7f2:	68fb      	ldr	r3, [r7, #12]
 810a7f4:	f023 0301 	bic.w	r3, r3, #1
 810a7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a7fa:	687b      	ldr	r3, [r7, #4]
 810a7fc:	681b      	ldr	r3, [r3, #0]
 810a7fe:	3308      	adds	r3, #8
 810a800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a802:	61fa      	str	r2, [r7, #28]
 810a804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a806:	69b9      	ldr	r1, [r7, #24]
 810a808:	69fa      	ldr	r2, [r7, #28]
 810a80a:	e841 2300 	strex	r3, r2, [r1]
 810a80e:	617b      	str	r3, [r7, #20]
   return(result);
 810a810:	697b      	ldr	r3, [r7, #20]
 810a812:	2b00      	cmp	r3, #0
 810a814:	d1e5      	bne.n	810a7e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a816:	687b      	ldr	r3, [r7, #4]
 810a818:	2220      	movs	r2, #32
 810a81a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810a81e:	687b      	ldr	r3, [r7, #4]
 810a820:	2200      	movs	r2, #0
 810a822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a826:	2303      	movs	r3, #3
 810a828:	e012      	b.n	810a850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	2220      	movs	r2, #32
 810a82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a832:	687b      	ldr	r3, [r7, #4]
 810a834:	2220      	movs	r2, #32
 810a836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	2200      	movs	r2, #0
 810a83e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	2200      	movs	r2, #0
 810a844:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	2200      	movs	r2, #0
 810a84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a84e:	2300      	movs	r3, #0
}
 810a850:	4618      	mov	r0, r3
 810a852:	3758      	adds	r7, #88	@ 0x58
 810a854:	46bd      	mov	sp, r7
 810a856:	bd80      	pop	{r7, pc}

0810a858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a858:	b580      	push	{r7, lr}
 810a85a:	b084      	sub	sp, #16
 810a85c:	af00      	add	r7, sp, #0
 810a85e:	60f8      	str	r0, [r7, #12]
 810a860:	60b9      	str	r1, [r7, #8]
 810a862:	603b      	str	r3, [r7, #0]
 810a864:	4613      	mov	r3, r2
 810a866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a868:	e04f      	b.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a86a:	69bb      	ldr	r3, [r7, #24]
 810a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a870:	d04b      	beq.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a872:	f7f7 feaf 	bl	81025d4 <HAL_GetTick>
 810a876:	4602      	mov	r2, r0
 810a878:	683b      	ldr	r3, [r7, #0]
 810a87a:	1ad3      	subs	r3, r2, r3
 810a87c:	69ba      	ldr	r2, [r7, #24]
 810a87e:	429a      	cmp	r2, r3
 810a880:	d302      	bcc.n	810a888 <UART_WaitOnFlagUntilTimeout+0x30>
 810a882:	69bb      	ldr	r3, [r7, #24]
 810a884:	2b00      	cmp	r3, #0
 810a886:	d101      	bne.n	810a88c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a888:	2303      	movs	r3, #3
 810a88a:	e04e      	b.n	810a92a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810a88c:	68fb      	ldr	r3, [r7, #12]
 810a88e:	681b      	ldr	r3, [r3, #0]
 810a890:	681b      	ldr	r3, [r3, #0]
 810a892:	f003 0304 	and.w	r3, r3, #4
 810a896:	2b00      	cmp	r3, #0
 810a898:	d037      	beq.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
 810a89a:	68bb      	ldr	r3, [r7, #8]
 810a89c:	2b80      	cmp	r3, #128	@ 0x80
 810a89e:	d034      	beq.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
 810a8a0:	68bb      	ldr	r3, [r7, #8]
 810a8a2:	2b40      	cmp	r3, #64	@ 0x40
 810a8a4:	d031      	beq.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a8a6:	68fb      	ldr	r3, [r7, #12]
 810a8a8:	681b      	ldr	r3, [r3, #0]
 810a8aa:	69db      	ldr	r3, [r3, #28]
 810a8ac:	f003 0308 	and.w	r3, r3, #8
 810a8b0:	2b08      	cmp	r3, #8
 810a8b2:	d110      	bne.n	810a8d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a8b4:	68fb      	ldr	r3, [r7, #12]
 810a8b6:	681b      	ldr	r3, [r3, #0]
 810a8b8:	2208      	movs	r2, #8
 810a8ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a8bc:	68f8      	ldr	r0, [r7, #12]
 810a8be:	f000 f95b 	bl	810ab78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a8c2:	68fb      	ldr	r3, [r7, #12]
 810a8c4:	2208      	movs	r2, #8
 810a8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a8ca:	68fb      	ldr	r3, [r7, #12]
 810a8cc:	2200      	movs	r2, #0
 810a8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810a8d2:	2301      	movs	r3, #1
 810a8d4:	e029      	b.n	810a92a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a8d6:	68fb      	ldr	r3, [r7, #12]
 810a8d8:	681b      	ldr	r3, [r3, #0]
 810a8da:	69db      	ldr	r3, [r3, #28]
 810a8dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810a8e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a8e4:	d111      	bne.n	810a90a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810a8ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a8f0:	68f8      	ldr	r0, [r7, #12]
 810a8f2:	f000 f941 	bl	810ab78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a8f6:	68fb      	ldr	r3, [r7, #12]
 810a8f8:	2220      	movs	r2, #32
 810a8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a8fe:	68fb      	ldr	r3, [r7, #12]
 810a900:	2200      	movs	r2, #0
 810a902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810a906:	2303      	movs	r3, #3
 810a908:	e00f      	b.n	810a92a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a90a:	68fb      	ldr	r3, [r7, #12]
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	69da      	ldr	r2, [r3, #28]
 810a910:	68bb      	ldr	r3, [r7, #8]
 810a912:	4013      	ands	r3, r2
 810a914:	68ba      	ldr	r2, [r7, #8]
 810a916:	429a      	cmp	r2, r3
 810a918:	bf0c      	ite	eq
 810a91a:	2301      	moveq	r3, #1
 810a91c:	2300      	movne	r3, #0
 810a91e:	b2db      	uxtb	r3, r3
 810a920:	461a      	mov	r2, r3
 810a922:	79fb      	ldrb	r3, [r7, #7]
 810a924:	429a      	cmp	r2, r3
 810a926:	d0a0      	beq.n	810a86a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a928:	2300      	movs	r3, #0
}
 810a92a:	4618      	mov	r0, r3
 810a92c:	3710      	adds	r7, #16
 810a92e:	46bd      	mov	sp, r7
 810a930:	bd80      	pop	{r7, pc}
	...

0810a934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810a934:	b480      	push	{r7}
 810a936:	b0a3      	sub	sp, #140	@ 0x8c
 810a938:	af00      	add	r7, sp, #0
 810a93a:	60f8      	str	r0, [r7, #12]
 810a93c:	60b9      	str	r1, [r7, #8]
 810a93e:	4613      	mov	r3, r2
 810a940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810a942:	68fb      	ldr	r3, [r7, #12]
 810a944:	68ba      	ldr	r2, [r7, #8]
 810a946:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810a948:	68fb      	ldr	r3, [r7, #12]
 810a94a:	88fa      	ldrh	r2, [r7, #6]
 810a94c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810a950:	68fb      	ldr	r3, [r7, #12]
 810a952:	88fa      	ldrh	r2, [r7, #6]
 810a954:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810a958:	68fb      	ldr	r3, [r7, #12]
 810a95a:	2200      	movs	r2, #0
 810a95c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	689b      	ldr	r3, [r3, #8]
 810a962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a966:	d10e      	bne.n	810a986 <UART_Start_Receive_IT+0x52>
 810a968:	68fb      	ldr	r3, [r7, #12]
 810a96a:	691b      	ldr	r3, [r3, #16]
 810a96c:	2b00      	cmp	r3, #0
 810a96e:	d105      	bne.n	810a97c <UART_Start_Receive_IT+0x48>
 810a970:	68fb      	ldr	r3, [r7, #12]
 810a972:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810a976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a97a:	e02d      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a97c:	68fb      	ldr	r3, [r7, #12]
 810a97e:	22ff      	movs	r2, #255	@ 0xff
 810a980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a984:	e028      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a986:	68fb      	ldr	r3, [r7, #12]
 810a988:	689b      	ldr	r3, [r3, #8]
 810a98a:	2b00      	cmp	r3, #0
 810a98c:	d10d      	bne.n	810a9aa <UART_Start_Receive_IT+0x76>
 810a98e:	68fb      	ldr	r3, [r7, #12]
 810a990:	691b      	ldr	r3, [r3, #16]
 810a992:	2b00      	cmp	r3, #0
 810a994:	d104      	bne.n	810a9a0 <UART_Start_Receive_IT+0x6c>
 810a996:	68fb      	ldr	r3, [r7, #12]
 810a998:	22ff      	movs	r2, #255	@ 0xff
 810a99a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a99e:	e01b      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a9a0:	68fb      	ldr	r3, [r7, #12]
 810a9a2:	227f      	movs	r2, #127	@ 0x7f
 810a9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a9a8:	e016      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a9aa:	68fb      	ldr	r3, [r7, #12]
 810a9ac:	689b      	ldr	r3, [r3, #8]
 810a9ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a9b2:	d10d      	bne.n	810a9d0 <UART_Start_Receive_IT+0x9c>
 810a9b4:	68fb      	ldr	r3, [r7, #12]
 810a9b6:	691b      	ldr	r3, [r3, #16]
 810a9b8:	2b00      	cmp	r3, #0
 810a9ba:	d104      	bne.n	810a9c6 <UART_Start_Receive_IT+0x92>
 810a9bc:	68fb      	ldr	r3, [r7, #12]
 810a9be:	227f      	movs	r2, #127	@ 0x7f
 810a9c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a9c4:	e008      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a9c6:	68fb      	ldr	r3, [r7, #12]
 810a9c8:	223f      	movs	r2, #63	@ 0x3f
 810a9ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a9ce:	e003      	b.n	810a9d8 <UART_Start_Receive_IT+0xa4>
 810a9d0:	68fb      	ldr	r3, [r7, #12]
 810a9d2:	2200      	movs	r2, #0
 810a9d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	2200      	movs	r2, #0
 810a9dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810a9e0:	68fb      	ldr	r3, [r7, #12]
 810a9e2:	2222      	movs	r2, #34	@ 0x22
 810a9e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a9e8:	68fb      	ldr	r3, [r7, #12]
 810a9ea:	681b      	ldr	r3, [r3, #0]
 810a9ec:	3308      	adds	r3, #8
 810a9ee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810a9f2:	e853 3f00 	ldrex	r3, [r3]
 810a9f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810a9f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a9fa:	f043 0301 	orr.w	r3, r3, #1
 810a9fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810aa02:	68fb      	ldr	r3, [r7, #12]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	3308      	adds	r3, #8
 810aa08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810aa0c:	673a      	str	r2, [r7, #112]	@ 0x70
 810aa0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa10:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810aa12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810aa14:	e841 2300 	strex	r3, r2, [r1]
 810aa18:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810aa1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810aa1c:	2b00      	cmp	r3, #0
 810aa1e:	d1e3      	bne.n	810a9e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810aa20:	68fb      	ldr	r3, [r7, #12]
 810aa22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810aa24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa28:	d14f      	bne.n	810aaca <UART_Start_Receive_IT+0x196>
 810aa2a:	68fb      	ldr	r3, [r7, #12]
 810aa2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810aa30:	88fa      	ldrh	r2, [r7, #6]
 810aa32:	429a      	cmp	r2, r3
 810aa34:	d349      	bcc.n	810aaca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810aa36:	68fb      	ldr	r3, [r7, #12]
 810aa38:	689b      	ldr	r3, [r3, #8]
 810aa3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810aa3e:	d107      	bne.n	810aa50 <UART_Start_Receive_IT+0x11c>
 810aa40:	68fb      	ldr	r3, [r7, #12]
 810aa42:	691b      	ldr	r3, [r3, #16]
 810aa44:	2b00      	cmp	r3, #0
 810aa46:	d103      	bne.n	810aa50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810aa48:	68fb      	ldr	r3, [r7, #12]
 810aa4a:	4a47      	ldr	r2, [pc, #284]	@ (810ab68 <UART_Start_Receive_IT+0x234>)
 810aa4c:	675a      	str	r2, [r3, #116]	@ 0x74
 810aa4e:	e002      	b.n	810aa56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810aa50:	68fb      	ldr	r3, [r7, #12]
 810aa52:	4a46      	ldr	r2, [pc, #280]	@ (810ab6c <UART_Start_Receive_IT+0x238>)
 810aa54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810aa56:	68fb      	ldr	r3, [r7, #12]
 810aa58:	691b      	ldr	r3, [r3, #16]
 810aa5a:	2b00      	cmp	r3, #0
 810aa5c:	d01a      	beq.n	810aa94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810aa5e:	68fb      	ldr	r3, [r7, #12]
 810aa60:	681b      	ldr	r3, [r3, #0]
 810aa62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810aa66:	e853 3f00 	ldrex	r3, [r3]
 810aa6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810aa6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810aa6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810aa72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810aa76:	68fb      	ldr	r3, [r7, #12]
 810aa78:	681b      	ldr	r3, [r3, #0]
 810aa7a:	461a      	mov	r2, r3
 810aa7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810aa80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810aa82:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810aa86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810aa88:	e841 2300 	strex	r3, r2, [r1]
 810aa8c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810aa8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810aa90:	2b00      	cmp	r3, #0
 810aa92:	d1e4      	bne.n	810aa5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810aa94:	68fb      	ldr	r3, [r7, #12]
 810aa96:	681b      	ldr	r3, [r3, #0]
 810aa98:	3308      	adds	r3, #8
 810aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aa9e:	e853 3f00 	ldrex	r3, [r3]
 810aaa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aaa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810aaaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810aaac:	68fb      	ldr	r3, [r7, #12]
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	3308      	adds	r3, #8
 810aab2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810aab4:	64ba      	str	r2, [r7, #72]	@ 0x48
 810aab6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aab8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810aaba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810aabc:	e841 2300 	strex	r3, r2, [r1]
 810aac0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810aac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810aac4:	2b00      	cmp	r3, #0
 810aac6:	d1e5      	bne.n	810aa94 <UART_Start_Receive_IT+0x160>
 810aac8:	e046      	b.n	810ab58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810aaca:	68fb      	ldr	r3, [r7, #12]
 810aacc:	689b      	ldr	r3, [r3, #8]
 810aace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810aad2:	d107      	bne.n	810aae4 <UART_Start_Receive_IT+0x1b0>
 810aad4:	68fb      	ldr	r3, [r7, #12]
 810aad6:	691b      	ldr	r3, [r3, #16]
 810aad8:	2b00      	cmp	r3, #0
 810aada:	d103      	bne.n	810aae4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810aadc:	68fb      	ldr	r3, [r7, #12]
 810aade:	4a24      	ldr	r2, [pc, #144]	@ (810ab70 <UART_Start_Receive_IT+0x23c>)
 810aae0:	675a      	str	r2, [r3, #116]	@ 0x74
 810aae2:	e002      	b.n	810aaea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810aae4:	68fb      	ldr	r3, [r7, #12]
 810aae6:	4a23      	ldr	r2, [pc, #140]	@ (810ab74 <UART_Start_Receive_IT+0x240>)
 810aae8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810aaea:	68fb      	ldr	r3, [r7, #12]
 810aaec:	691b      	ldr	r3, [r3, #16]
 810aaee:	2b00      	cmp	r3, #0
 810aaf0:	d019      	beq.n	810ab26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810aaf2:	68fb      	ldr	r3, [r7, #12]
 810aaf4:	681b      	ldr	r3, [r3, #0]
 810aaf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aafa:	e853 3f00 	ldrex	r3, [r3]
 810aafe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ab02:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810ab06:	677b      	str	r3, [r7, #116]	@ 0x74
 810ab08:	68fb      	ldr	r3, [r7, #12]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	461a      	mov	r2, r3
 810ab0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810ab10:	637b      	str	r3, [r7, #52]	@ 0x34
 810ab12:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810ab16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ab18:	e841 2300 	strex	r3, r2, [r1]
 810ab1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810ab1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d1e6      	bne.n	810aaf2 <UART_Start_Receive_IT+0x1be>
 810ab24:	e018      	b.n	810ab58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810ab26:	68fb      	ldr	r3, [r7, #12]
 810ab28:	681b      	ldr	r3, [r3, #0]
 810ab2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab2c:	697b      	ldr	r3, [r7, #20]
 810ab2e:	e853 3f00 	ldrex	r3, [r3]
 810ab32:	613b      	str	r3, [r7, #16]
   return(result);
 810ab34:	693b      	ldr	r3, [r7, #16]
 810ab36:	f043 0320 	orr.w	r3, r3, #32
 810ab3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810ab3c:	68fb      	ldr	r3, [r7, #12]
 810ab3e:	681b      	ldr	r3, [r3, #0]
 810ab40:	461a      	mov	r2, r3
 810ab42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ab44:	623b      	str	r3, [r7, #32]
 810ab46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab48:	69f9      	ldr	r1, [r7, #28]
 810ab4a:	6a3a      	ldr	r2, [r7, #32]
 810ab4c:	e841 2300 	strex	r3, r2, [r1]
 810ab50:	61bb      	str	r3, [r7, #24]
   return(result);
 810ab52:	69bb      	ldr	r3, [r7, #24]
 810ab54:	2b00      	cmp	r3, #0
 810ab56:	d1e6      	bne.n	810ab26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810ab58:	2300      	movs	r3, #0
}
 810ab5a:	4618      	mov	r0, r3
 810ab5c:	378c      	adds	r7, #140	@ 0x8c
 810ab5e:	46bd      	mov	sp, r7
 810ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab64:	4770      	bx	lr
 810ab66:	bf00      	nop
 810ab68:	0810b399 	.word	0x0810b399
 810ab6c:	0810b039 	.word	0x0810b039
 810ab70:	0810ae81 	.word	0x0810ae81
 810ab74:	0810acc9 	.word	0x0810acc9

0810ab78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810ab78:	b480      	push	{r7}
 810ab7a:	b095      	sub	sp, #84	@ 0x54
 810ab7c:	af00      	add	r7, sp, #0
 810ab7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab88:	e853 3f00 	ldrex	r3, [r3]
 810ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810ab8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ab94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	681b      	ldr	r3, [r3, #0]
 810ab9a:	461a      	mov	r2, r3
 810ab9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ab9e:	643b      	str	r3, [r7, #64]	@ 0x40
 810aba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810aba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810aba6:	e841 2300 	strex	r3, r2, [r1]
 810abaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810abae:	2b00      	cmp	r3, #0
 810abb0:	d1e6      	bne.n	810ab80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810abb2:	687b      	ldr	r3, [r7, #4]
 810abb4:	681b      	ldr	r3, [r3, #0]
 810abb6:	3308      	adds	r3, #8
 810abb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abba:	6a3b      	ldr	r3, [r7, #32]
 810abbc:	e853 3f00 	ldrex	r3, [r3]
 810abc0:	61fb      	str	r3, [r7, #28]
   return(result);
 810abc2:	69fb      	ldr	r3, [r7, #28]
 810abc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810abc8:	f023 0301 	bic.w	r3, r3, #1
 810abcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 810abce:	687b      	ldr	r3, [r7, #4]
 810abd0:	681b      	ldr	r3, [r3, #0]
 810abd2:	3308      	adds	r3, #8
 810abd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810abd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810abd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810abdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810abde:	e841 2300 	strex	r3, r2, [r1]
 810abe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810abe6:	2b00      	cmp	r3, #0
 810abe8:	d1e3      	bne.n	810abb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810abee:	2b01      	cmp	r3, #1
 810abf0:	d118      	bne.n	810ac24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810abf2:	687b      	ldr	r3, [r7, #4]
 810abf4:	681b      	ldr	r3, [r3, #0]
 810abf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abf8:	68fb      	ldr	r3, [r7, #12]
 810abfa:	e853 3f00 	ldrex	r3, [r3]
 810abfe:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac00:	68bb      	ldr	r3, [r7, #8]
 810ac02:	f023 0310 	bic.w	r3, r3, #16
 810ac06:	647b      	str	r3, [r7, #68]	@ 0x44
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	681b      	ldr	r3, [r3, #0]
 810ac0c:	461a      	mov	r2, r3
 810ac0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ac10:	61bb      	str	r3, [r7, #24]
 810ac12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac14:	6979      	ldr	r1, [r7, #20]
 810ac16:	69ba      	ldr	r2, [r7, #24]
 810ac18:	e841 2300 	strex	r3, r2, [r1]
 810ac1c:	613b      	str	r3, [r7, #16]
   return(result);
 810ac1e:	693b      	ldr	r3, [r7, #16]
 810ac20:	2b00      	cmp	r3, #0
 810ac22:	d1e6      	bne.n	810abf2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810ac24:	687b      	ldr	r3, [r7, #4]
 810ac26:	2220      	movs	r2, #32
 810ac28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	2200      	movs	r2, #0
 810ac30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	2200      	movs	r2, #0
 810ac36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810ac38:	bf00      	nop
 810ac3a:	3754      	adds	r7, #84	@ 0x54
 810ac3c:	46bd      	mov	sp, r7
 810ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac42:	4770      	bx	lr

0810ac44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810ac44:	b580      	push	{r7, lr}
 810ac46:	b084      	sub	sp, #16
 810ac48:	af00      	add	r7, sp, #0
 810ac4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ac4c:	687b      	ldr	r3, [r7, #4]
 810ac4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ac50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810ac52:	68fb      	ldr	r3, [r7, #12]
 810ac54:	2200      	movs	r2, #0
 810ac56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	2200      	movs	r2, #0
 810ac5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810ac62:	68f8      	ldr	r0, [r7, #12]
 810ac64:	f7fe ff3a 	bl	8109adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ac68:	bf00      	nop
 810ac6a:	3710      	adds	r7, #16
 810ac6c:	46bd      	mov	sp, r7
 810ac6e:	bd80      	pop	{r7, pc}

0810ac70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810ac70:	b580      	push	{r7, lr}
 810ac72:	b088      	sub	sp, #32
 810ac74:	af00      	add	r7, sp, #0
 810ac76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810ac78:	687b      	ldr	r3, [r7, #4]
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac7e:	68fb      	ldr	r3, [r7, #12]
 810ac80:	e853 3f00 	ldrex	r3, [r3]
 810ac84:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac86:	68bb      	ldr	r3, [r7, #8]
 810ac88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ac8c:	61fb      	str	r3, [r7, #28]
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	681b      	ldr	r3, [r3, #0]
 810ac92:	461a      	mov	r2, r3
 810ac94:	69fb      	ldr	r3, [r7, #28]
 810ac96:	61bb      	str	r3, [r7, #24]
 810ac98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac9a:	6979      	ldr	r1, [r7, #20]
 810ac9c:	69ba      	ldr	r2, [r7, #24]
 810ac9e:	e841 2300 	strex	r3, r2, [r1]
 810aca2:	613b      	str	r3, [r7, #16]
   return(result);
 810aca4:	693b      	ldr	r3, [r7, #16]
 810aca6:	2b00      	cmp	r3, #0
 810aca8:	d1e6      	bne.n	810ac78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810acaa:	687b      	ldr	r3, [r7, #4]
 810acac:	2220      	movs	r2, #32
 810acae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810acb2:	687b      	ldr	r3, [r7, #4]
 810acb4:	2200      	movs	r2, #0
 810acb6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810acb8:	6878      	ldr	r0, [r7, #4]
 810acba:	f7fe fefb 	bl	8109ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810acbe:	bf00      	nop
 810acc0:	3720      	adds	r7, #32
 810acc2:	46bd      	mov	sp, r7
 810acc4:	bd80      	pop	{r7, pc}
	...

0810acc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810acc8:	b580      	push	{r7, lr}
 810acca:	b09c      	sub	sp, #112	@ 0x70
 810accc:	af00      	add	r7, sp, #0
 810acce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810acd0:	687b      	ldr	r3, [r7, #4]
 810acd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810acd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810acda:	687b      	ldr	r3, [r7, #4]
 810acdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ace0:	2b22      	cmp	r3, #34	@ 0x22
 810ace2:	f040 80be 	bne.w	810ae62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	681b      	ldr	r3, [r3, #0]
 810acea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810acec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810acf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810acf4:	b2d9      	uxtb	r1, r3
 810acf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810acfa:	b2da      	uxtb	r2, r3
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ad00:	400a      	ands	r2, r1
 810ad02:	b2d2      	uxtb	r2, r2
 810ad04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ad0a:	1c5a      	adds	r2, r3, #1
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810ad10:	687b      	ldr	r3, [r7, #4]
 810ad12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ad16:	b29b      	uxth	r3, r3
 810ad18:	3b01      	subs	r3, #1
 810ad1a:	b29a      	uxth	r2, r3
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810ad22:	687b      	ldr	r3, [r7, #4]
 810ad24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ad28:	b29b      	uxth	r3, r3
 810ad2a:	2b00      	cmp	r3, #0
 810ad2c:	f040 80a1 	bne.w	810ae72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ad30:	687b      	ldr	r3, [r7, #4]
 810ad32:	681b      	ldr	r3, [r3, #0]
 810ad34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ad38:	e853 3f00 	ldrex	r3, [r3]
 810ad3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ad3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ad40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ad44:	66bb      	str	r3, [r7, #104]	@ 0x68
 810ad46:	687b      	ldr	r3, [r7, #4]
 810ad48:	681b      	ldr	r3, [r3, #0]
 810ad4a:	461a      	mov	r2, r3
 810ad4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ad4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ad50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ad54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ad56:	e841 2300 	strex	r3, r2, [r1]
 810ad5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ad5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ad5e:	2b00      	cmp	r3, #0
 810ad60:	d1e6      	bne.n	810ad30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ad62:	687b      	ldr	r3, [r7, #4]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	3308      	adds	r3, #8
 810ad68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ad6c:	e853 3f00 	ldrex	r3, [r3]
 810ad70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ad72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ad74:	f023 0301 	bic.w	r3, r3, #1
 810ad78:	667b      	str	r3, [r7, #100]	@ 0x64
 810ad7a:	687b      	ldr	r3, [r7, #4]
 810ad7c:	681b      	ldr	r3, [r3, #0]
 810ad7e:	3308      	adds	r3, #8
 810ad80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810ad82:	647a      	str	r2, [r7, #68]	@ 0x44
 810ad84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ad88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ad8a:	e841 2300 	strex	r3, r2, [r1]
 810ad8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ad90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad92:	2b00      	cmp	r3, #0
 810ad94:	d1e5      	bne.n	810ad62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	2220      	movs	r2, #32
 810ad9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	2200      	movs	r2, #0
 810ada2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ada4:	687b      	ldr	r3, [r7, #4]
 810ada6:	2200      	movs	r2, #0
 810ada8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	681b      	ldr	r3, [r3, #0]
 810adae:	4a33      	ldr	r2, [pc, #204]	@ (810ae7c <UART_RxISR_8BIT+0x1b4>)
 810adb0:	4293      	cmp	r3, r2
 810adb2:	d01f      	beq.n	810adf4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810adb4:	687b      	ldr	r3, [r7, #4]
 810adb6:	681b      	ldr	r3, [r3, #0]
 810adb8:	685b      	ldr	r3, [r3, #4]
 810adba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810adbe:	2b00      	cmp	r3, #0
 810adc0:	d018      	beq.n	810adf4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810adc2:	687b      	ldr	r3, [r7, #4]
 810adc4:	681b      	ldr	r3, [r3, #0]
 810adc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810adca:	e853 3f00 	ldrex	r3, [r3]
 810adce:	623b      	str	r3, [r7, #32]
   return(result);
 810add0:	6a3b      	ldr	r3, [r7, #32]
 810add2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810add6:	663b      	str	r3, [r7, #96]	@ 0x60
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	681b      	ldr	r3, [r3, #0]
 810addc:	461a      	mov	r2, r3
 810adde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ade0:	633b      	str	r3, [r7, #48]	@ 0x30
 810ade2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ade4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ade6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ade8:	e841 2300 	strex	r3, r2, [r1]
 810adec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810adf0:	2b00      	cmp	r3, #0
 810adf2:	d1e6      	bne.n	810adc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810adf4:	687b      	ldr	r3, [r7, #4]
 810adf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810adf8:	2b01      	cmp	r3, #1
 810adfa:	d12e      	bne.n	810ae5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	2200      	movs	r2, #0
 810ae00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ae08:	693b      	ldr	r3, [r7, #16]
 810ae0a:	e853 3f00 	ldrex	r3, [r3]
 810ae0e:	60fb      	str	r3, [r7, #12]
   return(result);
 810ae10:	68fb      	ldr	r3, [r7, #12]
 810ae12:	f023 0310 	bic.w	r3, r3, #16
 810ae16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810ae18:	687b      	ldr	r3, [r7, #4]
 810ae1a:	681b      	ldr	r3, [r3, #0]
 810ae1c:	461a      	mov	r2, r3
 810ae1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ae20:	61fb      	str	r3, [r7, #28]
 810ae22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ae24:	69b9      	ldr	r1, [r7, #24]
 810ae26:	69fa      	ldr	r2, [r7, #28]
 810ae28:	e841 2300 	strex	r3, r2, [r1]
 810ae2c:	617b      	str	r3, [r7, #20]
   return(result);
 810ae2e:	697b      	ldr	r3, [r7, #20]
 810ae30:	2b00      	cmp	r3, #0
 810ae32:	d1e6      	bne.n	810ae02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810ae34:	687b      	ldr	r3, [r7, #4]
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	69db      	ldr	r3, [r3, #28]
 810ae3a:	f003 0310 	and.w	r3, r3, #16
 810ae3e:	2b10      	cmp	r3, #16
 810ae40:	d103      	bne.n	810ae4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	681b      	ldr	r3, [r3, #0]
 810ae46:	2210      	movs	r2, #16
 810ae48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ae4a:	687b      	ldr	r3, [r7, #4]
 810ae4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ae50:	4619      	mov	r1, r3
 810ae52:	6878      	ldr	r0, [r7, #4]
 810ae54:	f7f6 fcde 	bl	8101814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810ae58:	e00b      	b.n	810ae72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810ae5a:	6878      	ldr	r0, [r7, #4]
 810ae5c:	f7fe fe34 	bl	8109ac8 <HAL_UART_RxCpltCallback>
}
 810ae60:	e007      	b.n	810ae72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	681b      	ldr	r3, [r3, #0]
 810ae66:	699a      	ldr	r2, [r3, #24]
 810ae68:	687b      	ldr	r3, [r7, #4]
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	f042 0208 	orr.w	r2, r2, #8
 810ae70:	619a      	str	r2, [r3, #24]
}
 810ae72:	bf00      	nop
 810ae74:	3770      	adds	r7, #112	@ 0x70
 810ae76:	46bd      	mov	sp, r7
 810ae78:	bd80      	pop	{r7, pc}
 810ae7a:	bf00      	nop
 810ae7c:	58000c00 	.word	0x58000c00

0810ae80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810ae80:	b580      	push	{r7, lr}
 810ae82:	b09c      	sub	sp, #112	@ 0x70
 810ae84:	af00      	add	r7, sp, #0
 810ae86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810ae88:	687b      	ldr	r3, [r7, #4]
 810ae8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810ae8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810ae92:	687b      	ldr	r3, [r7, #4]
 810ae94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ae98:	2b22      	cmp	r3, #34	@ 0x22
 810ae9a:	f040 80be 	bne.w	810b01a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	681b      	ldr	r3, [r3, #0]
 810aea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aea4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810aea8:	687b      	ldr	r3, [r7, #4]
 810aeaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aeac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810aeae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810aeb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810aeb6:	4013      	ands	r3, r2
 810aeb8:	b29a      	uxth	r2, r3
 810aeba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810aebc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aec2:	1c9a      	adds	r2, r3, #2
 810aec4:	687b      	ldr	r3, [r7, #4]
 810aec6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810aec8:	687b      	ldr	r3, [r7, #4]
 810aeca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aece:	b29b      	uxth	r3, r3
 810aed0:	3b01      	subs	r3, #1
 810aed2:	b29a      	uxth	r2, r3
 810aed4:	687b      	ldr	r3, [r7, #4]
 810aed6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810aeda:	687b      	ldr	r3, [r7, #4]
 810aedc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aee0:	b29b      	uxth	r3, r3
 810aee2:	2b00      	cmp	r3, #0
 810aee4:	f040 80a1 	bne.w	810b02a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810aee8:	687b      	ldr	r3, [r7, #4]
 810aeea:	681b      	ldr	r3, [r3, #0]
 810aeec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aeee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810aef0:	e853 3f00 	ldrex	r3, [r3]
 810aef4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810aef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810aef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810aefc:	667b      	str	r3, [r7, #100]	@ 0x64
 810aefe:	687b      	ldr	r3, [r7, #4]
 810af00:	681b      	ldr	r3, [r3, #0]
 810af02:	461a      	mov	r2, r3
 810af04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810af06:	657b      	str	r3, [r7, #84]	@ 0x54
 810af08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810af0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810af0e:	e841 2300 	strex	r3, r2, [r1]
 810af12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810af14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810af16:	2b00      	cmp	r3, #0
 810af18:	d1e6      	bne.n	810aee8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	681b      	ldr	r3, [r3, #0]
 810af1e:	3308      	adds	r3, #8
 810af20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810af24:	e853 3f00 	ldrex	r3, [r3]
 810af28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810af2c:	f023 0301 	bic.w	r3, r3, #1
 810af30:	663b      	str	r3, [r7, #96]	@ 0x60
 810af32:	687b      	ldr	r3, [r7, #4]
 810af34:	681b      	ldr	r3, [r3, #0]
 810af36:	3308      	adds	r3, #8
 810af38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810af3a:	643a      	str	r2, [r7, #64]	@ 0x40
 810af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810af40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810af42:	e841 2300 	strex	r3, r2, [r1]
 810af46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810af48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af4a:	2b00      	cmp	r3, #0
 810af4c:	d1e5      	bne.n	810af1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810af4e:	687b      	ldr	r3, [r7, #4]
 810af50:	2220      	movs	r2, #32
 810af52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810af56:	687b      	ldr	r3, [r7, #4]
 810af58:	2200      	movs	r2, #0
 810af5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	2200      	movs	r2, #0
 810af60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810af62:	687b      	ldr	r3, [r7, #4]
 810af64:	681b      	ldr	r3, [r3, #0]
 810af66:	4a33      	ldr	r2, [pc, #204]	@ (810b034 <UART_RxISR_16BIT+0x1b4>)
 810af68:	4293      	cmp	r3, r2
 810af6a:	d01f      	beq.n	810afac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810af6c:	687b      	ldr	r3, [r7, #4]
 810af6e:	681b      	ldr	r3, [r3, #0]
 810af70:	685b      	ldr	r3, [r3, #4]
 810af72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810af76:	2b00      	cmp	r3, #0
 810af78:	d018      	beq.n	810afac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810af7a:	687b      	ldr	r3, [r7, #4]
 810af7c:	681b      	ldr	r3, [r3, #0]
 810af7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af80:	6a3b      	ldr	r3, [r7, #32]
 810af82:	e853 3f00 	ldrex	r3, [r3]
 810af86:	61fb      	str	r3, [r7, #28]
   return(result);
 810af88:	69fb      	ldr	r3, [r7, #28]
 810af8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810af8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810af90:	687b      	ldr	r3, [r7, #4]
 810af92:	681b      	ldr	r3, [r3, #0]
 810af94:	461a      	mov	r2, r3
 810af96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810af98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810af9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810af9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810afa0:	e841 2300 	strex	r3, r2, [r1]
 810afa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810afa8:	2b00      	cmp	r3, #0
 810afaa:	d1e6      	bne.n	810af7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810afac:	687b      	ldr	r3, [r7, #4]
 810afae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810afb0:	2b01      	cmp	r3, #1
 810afb2:	d12e      	bne.n	810b012 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810afb4:	687b      	ldr	r3, [r7, #4]
 810afb6:	2200      	movs	r2, #0
 810afb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	681b      	ldr	r3, [r3, #0]
 810afbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810afc0:	68fb      	ldr	r3, [r7, #12]
 810afc2:	e853 3f00 	ldrex	r3, [r3]
 810afc6:	60bb      	str	r3, [r7, #8]
   return(result);
 810afc8:	68bb      	ldr	r3, [r7, #8]
 810afca:	f023 0310 	bic.w	r3, r3, #16
 810afce:	65bb      	str	r3, [r7, #88]	@ 0x58
 810afd0:	687b      	ldr	r3, [r7, #4]
 810afd2:	681b      	ldr	r3, [r3, #0]
 810afd4:	461a      	mov	r2, r3
 810afd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810afd8:	61bb      	str	r3, [r7, #24]
 810afda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810afdc:	6979      	ldr	r1, [r7, #20]
 810afde:	69ba      	ldr	r2, [r7, #24]
 810afe0:	e841 2300 	strex	r3, r2, [r1]
 810afe4:	613b      	str	r3, [r7, #16]
   return(result);
 810afe6:	693b      	ldr	r3, [r7, #16]
 810afe8:	2b00      	cmp	r3, #0
 810afea:	d1e6      	bne.n	810afba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	69db      	ldr	r3, [r3, #28]
 810aff2:	f003 0310 	and.w	r3, r3, #16
 810aff6:	2b10      	cmp	r3, #16
 810aff8:	d103      	bne.n	810b002 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810affa:	687b      	ldr	r3, [r7, #4]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	2210      	movs	r2, #16
 810b000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b002:	687b      	ldr	r3, [r7, #4]
 810b004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b008:	4619      	mov	r1, r3
 810b00a:	6878      	ldr	r0, [r7, #4]
 810b00c:	f7f6 fc02 	bl	8101814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b010:	e00b      	b.n	810b02a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810b012:	6878      	ldr	r0, [r7, #4]
 810b014:	f7fe fd58 	bl	8109ac8 <HAL_UART_RxCpltCallback>
}
 810b018:	e007      	b.n	810b02a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	681b      	ldr	r3, [r3, #0]
 810b01e:	699a      	ldr	r2, [r3, #24]
 810b020:	687b      	ldr	r3, [r7, #4]
 810b022:	681b      	ldr	r3, [r3, #0]
 810b024:	f042 0208 	orr.w	r2, r2, #8
 810b028:	619a      	str	r2, [r3, #24]
}
 810b02a:	bf00      	nop
 810b02c:	3770      	adds	r7, #112	@ 0x70
 810b02e:	46bd      	mov	sp, r7
 810b030:	bd80      	pop	{r7, pc}
 810b032:	bf00      	nop
 810b034:	58000c00 	.word	0x58000c00

0810b038 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b038:	b580      	push	{r7, lr}
 810b03a:	b0ac      	sub	sp, #176	@ 0xb0
 810b03c:	af00      	add	r7, sp, #0
 810b03e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810b040:	687b      	ldr	r3, [r7, #4]
 810b042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b046:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	681b      	ldr	r3, [r3, #0]
 810b04e:	69db      	ldr	r3, [r3, #28]
 810b050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b054:	687b      	ldr	r3, [r7, #4]
 810b056:	681b      	ldr	r3, [r3, #0]
 810b058:	681b      	ldr	r3, [r3, #0]
 810b05a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b05e:	687b      	ldr	r3, [r7, #4]
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	689b      	ldr	r3, [r3, #8]
 810b064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b068:	687b      	ldr	r3, [r7, #4]
 810b06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b06e:	2b22      	cmp	r3, #34	@ 0x22
 810b070:	f040 8182 	bne.w	810b378 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b074:	687b      	ldr	r3, [r7, #4]
 810b076:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b07a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b07e:	e125      	b.n	810b2cc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b080:	687b      	ldr	r3, [r7, #4]
 810b082:	681b      	ldr	r3, [r3, #0]
 810b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b086:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810b08a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810b08e:	b2d9      	uxtb	r1, r3
 810b090:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810b094:	b2da      	uxtb	r2, r3
 810b096:	687b      	ldr	r3, [r7, #4]
 810b098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b09a:	400a      	ands	r2, r1
 810b09c:	b2d2      	uxtb	r2, r2
 810b09e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b0a4:	1c5a      	adds	r2, r3, #1
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b0aa:	687b      	ldr	r3, [r7, #4]
 810b0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b0b0:	b29b      	uxth	r3, r3
 810b0b2:	3b01      	subs	r3, #1
 810b0b4:	b29a      	uxth	r2, r3
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b0bc:	687b      	ldr	r3, [r7, #4]
 810b0be:	681b      	ldr	r3, [r3, #0]
 810b0c0:	69db      	ldr	r3, [r3, #28]
 810b0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b0ca:	f003 0307 	and.w	r3, r3, #7
 810b0ce:	2b00      	cmp	r3, #0
 810b0d0:	d053      	beq.n	810b17a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b0d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b0d6:	f003 0301 	and.w	r3, r3, #1
 810b0da:	2b00      	cmp	r3, #0
 810b0dc:	d011      	beq.n	810b102 <UART_RxISR_8BIT_FIFOEN+0xca>
 810b0de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810b0e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d00b      	beq.n	810b102 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b0ea:	687b      	ldr	r3, [r7, #4]
 810b0ec:	681b      	ldr	r3, [r3, #0]
 810b0ee:	2201      	movs	r2, #1
 810b0f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b0f2:	687b      	ldr	r3, [r7, #4]
 810b0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b0f8:	f043 0201 	orr.w	r2, r3, #1
 810b0fc:	687b      	ldr	r3, [r7, #4]
 810b0fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b106:	f003 0302 	and.w	r3, r3, #2
 810b10a:	2b00      	cmp	r3, #0
 810b10c:	d011      	beq.n	810b132 <UART_RxISR_8BIT_FIFOEN+0xfa>
 810b10e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b112:	f003 0301 	and.w	r3, r3, #1
 810b116:	2b00      	cmp	r3, #0
 810b118:	d00b      	beq.n	810b132 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b11a:	687b      	ldr	r3, [r7, #4]
 810b11c:	681b      	ldr	r3, [r3, #0]
 810b11e:	2202      	movs	r2, #2
 810b120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b122:	687b      	ldr	r3, [r7, #4]
 810b124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b128:	f043 0204 	orr.w	r2, r3, #4
 810b12c:	687b      	ldr	r3, [r7, #4]
 810b12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b136:	f003 0304 	and.w	r3, r3, #4
 810b13a:	2b00      	cmp	r3, #0
 810b13c:	d011      	beq.n	810b162 <UART_RxISR_8BIT_FIFOEN+0x12a>
 810b13e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b142:	f003 0301 	and.w	r3, r3, #1
 810b146:	2b00      	cmp	r3, #0
 810b148:	d00b      	beq.n	810b162 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b14a:	687b      	ldr	r3, [r7, #4]
 810b14c:	681b      	ldr	r3, [r3, #0]
 810b14e:	2204      	movs	r2, #4
 810b150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b152:	687b      	ldr	r3, [r7, #4]
 810b154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b158:	f043 0202 	orr.w	r2, r3, #2
 810b15c:	687b      	ldr	r3, [r7, #4]
 810b15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b162:	687b      	ldr	r3, [r7, #4]
 810b164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b168:	2b00      	cmp	r3, #0
 810b16a:	d006      	beq.n	810b17a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b16c:	6878      	ldr	r0, [r7, #4]
 810b16e:	f7fe fcb5 	bl	8109adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	2200      	movs	r2, #0
 810b176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b17a:	687b      	ldr	r3, [r7, #4]
 810b17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b180:	b29b      	uxth	r3, r3
 810b182:	2b00      	cmp	r3, #0
 810b184:	f040 80a2 	bne.w	810b2cc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b188:	687b      	ldr	r3, [r7, #4]
 810b18a:	681b      	ldr	r3, [r3, #0]
 810b18c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b18e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b190:	e853 3f00 	ldrex	r3, [r3]
 810b194:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810b196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b19c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b1a0:	687b      	ldr	r3, [r7, #4]
 810b1a2:	681b      	ldr	r3, [r3, #0]
 810b1a4:	461a      	mov	r2, r3
 810b1a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810b1aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b1ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810b1b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810b1b2:	e841 2300 	strex	r3, r2, [r1]
 810b1b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810b1b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b1ba:	2b00      	cmp	r3, #0
 810b1bc:	d1e4      	bne.n	810b188 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	681b      	ldr	r3, [r3, #0]
 810b1c2:	3308      	adds	r3, #8
 810b1c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b1c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b1c8:	e853 3f00 	ldrex	r3, [r3]
 810b1cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810b1ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810b1d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b1d4:	f023 0301 	bic.w	r3, r3, #1
 810b1d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	3308      	adds	r3, #8
 810b1e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810b1e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 810b1e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810b1ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810b1ee:	e841 2300 	strex	r3, r2, [r1]
 810b1f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810b1f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b1f6:	2b00      	cmp	r3, #0
 810b1f8:	d1e1      	bne.n	810b1be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b1fa:	687b      	ldr	r3, [r7, #4]
 810b1fc:	2220      	movs	r2, #32
 810b1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b202:	687b      	ldr	r3, [r7, #4]
 810b204:	2200      	movs	r2, #0
 810b206:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	2200      	movs	r2, #0
 810b20c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	681b      	ldr	r3, [r3, #0]
 810b212:	4a5f      	ldr	r2, [pc, #380]	@ (810b390 <UART_RxISR_8BIT_FIFOEN+0x358>)
 810b214:	4293      	cmp	r3, r2
 810b216:	d021      	beq.n	810b25c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	681b      	ldr	r3, [r3, #0]
 810b21c:	685b      	ldr	r3, [r3, #4]
 810b21e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b222:	2b00      	cmp	r3, #0
 810b224:	d01a      	beq.n	810b25c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	681b      	ldr	r3, [r3, #0]
 810b22a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b22e:	e853 3f00 	ldrex	r3, [r3]
 810b232:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810b234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b23a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b23e:	687b      	ldr	r3, [r7, #4]
 810b240:	681b      	ldr	r3, [r3, #0]
 810b242:	461a      	mov	r2, r3
 810b244:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b248:	657b      	str	r3, [r7, #84]	@ 0x54
 810b24a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b24c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810b24e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810b250:	e841 2300 	strex	r3, r2, [r1]
 810b254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810b256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b258:	2b00      	cmp	r3, #0
 810b25a:	d1e4      	bne.n	810b226 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b25c:	687b      	ldr	r3, [r7, #4]
 810b25e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b260:	2b01      	cmp	r3, #1
 810b262:	d130      	bne.n	810b2c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b264:	687b      	ldr	r3, [r7, #4]
 810b266:	2200      	movs	r2, #0
 810b268:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b26a:	687b      	ldr	r3, [r7, #4]
 810b26c:	681b      	ldr	r3, [r3, #0]
 810b26e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b272:	e853 3f00 	ldrex	r3, [r3]
 810b276:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b27a:	f023 0310 	bic.w	r3, r3, #16
 810b27e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b282:	687b      	ldr	r3, [r7, #4]
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	461a      	mov	r2, r3
 810b288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810b28c:	643b      	str	r3, [r7, #64]	@ 0x40
 810b28e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b290:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b292:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b294:	e841 2300 	strex	r3, r2, [r1]
 810b298:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b29c:	2b00      	cmp	r3, #0
 810b29e:	d1e4      	bne.n	810b26a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b2a0:	687b      	ldr	r3, [r7, #4]
 810b2a2:	681b      	ldr	r3, [r3, #0]
 810b2a4:	69db      	ldr	r3, [r3, #28]
 810b2a6:	f003 0310 	and.w	r3, r3, #16
 810b2aa:	2b10      	cmp	r3, #16
 810b2ac:	d103      	bne.n	810b2b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b2ae:	687b      	ldr	r3, [r7, #4]
 810b2b0:	681b      	ldr	r3, [r3, #0]
 810b2b2:	2210      	movs	r2, #16
 810b2b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b2b6:	687b      	ldr	r3, [r7, #4]
 810b2b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b2bc:	4619      	mov	r1, r3
 810b2be:	6878      	ldr	r0, [r7, #4]
 810b2c0:	f7f6 faa8 	bl	8101814 <HAL_UARTEx_RxEventCallback>
 810b2c4:	e002      	b.n	810b2cc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810b2c6:	6878      	ldr	r0, [r7, #4]
 810b2c8:	f7fe fbfe 	bl	8109ac8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b2cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810b2d0:	2b00      	cmp	r3, #0
 810b2d2:	d006      	beq.n	810b2e2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 810b2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b2d8:	f003 0320 	and.w	r3, r3, #32
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	f47f aecf 	bne.w	810b080 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b2e2:	687b      	ldr	r3, [r7, #4]
 810b2e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b2e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b2ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810b2f0:	2b00      	cmp	r3, #0
 810b2f2:	d049      	beq.n	810b388 <UART_RxISR_8BIT_FIFOEN+0x350>
 810b2f4:	687b      	ldr	r3, [r7, #4]
 810b2f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b2fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810b2fe:	429a      	cmp	r2, r3
 810b300:	d242      	bcs.n	810b388 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b302:	687b      	ldr	r3, [r7, #4]
 810b304:	681b      	ldr	r3, [r3, #0]
 810b306:	3308      	adds	r3, #8
 810b308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b30a:	6a3b      	ldr	r3, [r7, #32]
 810b30c:	e853 3f00 	ldrex	r3, [r3]
 810b310:	61fb      	str	r3, [r7, #28]
   return(result);
 810b312:	69fb      	ldr	r3, [r7, #28]
 810b314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	3308      	adds	r3, #8
 810b322:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810b326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b32a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b32e:	e841 2300 	strex	r3, r2, [r1]
 810b332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b336:	2b00      	cmp	r3, #0
 810b338:	d1e3      	bne.n	810b302 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810b33a:	687b      	ldr	r3, [r7, #4]
 810b33c:	4a15      	ldr	r2, [pc, #84]	@ (810b394 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810b33e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b340:	687b      	ldr	r3, [r7, #4]
 810b342:	681b      	ldr	r3, [r3, #0]
 810b344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b346:	68fb      	ldr	r3, [r7, #12]
 810b348:	e853 3f00 	ldrex	r3, [r3]
 810b34c:	60bb      	str	r3, [r7, #8]
   return(result);
 810b34e:	68bb      	ldr	r3, [r7, #8]
 810b350:	f043 0320 	orr.w	r3, r3, #32
 810b354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b358:	687b      	ldr	r3, [r7, #4]
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	461a      	mov	r2, r3
 810b35e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810b362:	61bb      	str	r3, [r7, #24]
 810b364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b366:	6979      	ldr	r1, [r7, #20]
 810b368:	69ba      	ldr	r2, [r7, #24]
 810b36a:	e841 2300 	strex	r3, r2, [r1]
 810b36e:	613b      	str	r3, [r7, #16]
   return(result);
 810b370:	693b      	ldr	r3, [r7, #16]
 810b372:	2b00      	cmp	r3, #0
 810b374:	d1e4      	bne.n	810b340 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b376:	e007      	b.n	810b388 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b378:	687b      	ldr	r3, [r7, #4]
 810b37a:	681b      	ldr	r3, [r3, #0]
 810b37c:	699a      	ldr	r2, [r3, #24]
 810b37e:	687b      	ldr	r3, [r7, #4]
 810b380:	681b      	ldr	r3, [r3, #0]
 810b382:	f042 0208 	orr.w	r2, r2, #8
 810b386:	619a      	str	r2, [r3, #24]
}
 810b388:	bf00      	nop
 810b38a:	37b0      	adds	r7, #176	@ 0xb0
 810b38c:	46bd      	mov	sp, r7
 810b38e:	bd80      	pop	{r7, pc}
 810b390:	58000c00 	.word	0x58000c00
 810b394:	0810acc9 	.word	0x0810acc9

0810b398 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b398:	b580      	push	{r7, lr}
 810b39a:	b0ae      	sub	sp, #184	@ 0xb8
 810b39c:	af00      	add	r7, sp, #0
 810b39e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810b3a0:	687b      	ldr	r3, [r7, #4]
 810b3a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b3a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	681b      	ldr	r3, [r3, #0]
 810b3ae:	69db      	ldr	r3, [r3, #28]
 810b3b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b3b4:	687b      	ldr	r3, [r7, #4]
 810b3b6:	681b      	ldr	r3, [r3, #0]
 810b3b8:	681b      	ldr	r3, [r3, #0]
 810b3ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b3be:	687b      	ldr	r3, [r7, #4]
 810b3c0:	681b      	ldr	r3, [r3, #0]
 810b3c2:	689b      	ldr	r3, [r3, #8]
 810b3c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b3c8:	687b      	ldr	r3, [r7, #4]
 810b3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b3ce:	2b22      	cmp	r3, #34	@ 0x22
 810b3d0:	f040 8186 	bne.w	810b6e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b3da:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b3de:	e129      	b.n	810b634 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b3e0:	687b      	ldr	r3, [r7, #4]
 810b3e2:	681b      	ldr	r3, [r3, #0]
 810b3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b3e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810b3ea:	687b      	ldr	r3, [r7, #4]
 810b3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b3ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810b3f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810b3f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810b3fa:	4013      	ands	r3, r2
 810b3fc:	b29a      	uxth	r2, r3
 810b3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b402:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810b404:	687b      	ldr	r3, [r7, #4]
 810b406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b408:	1c9a      	adds	r2, r3, #2
 810b40a:	687b      	ldr	r3, [r7, #4]
 810b40c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b40e:	687b      	ldr	r3, [r7, #4]
 810b410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b414:	b29b      	uxth	r3, r3
 810b416:	3b01      	subs	r3, #1
 810b418:	b29a      	uxth	r2, r3
 810b41a:	687b      	ldr	r3, [r7, #4]
 810b41c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b420:	687b      	ldr	r3, [r7, #4]
 810b422:	681b      	ldr	r3, [r3, #0]
 810b424:	69db      	ldr	r3, [r3, #28]
 810b426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b42a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b42e:	f003 0307 	and.w	r3, r3, #7
 810b432:	2b00      	cmp	r3, #0
 810b434:	d053      	beq.n	810b4de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b43a:	f003 0301 	and.w	r3, r3, #1
 810b43e:	2b00      	cmp	r3, #0
 810b440:	d011      	beq.n	810b466 <UART_RxISR_16BIT_FIFOEN+0xce>
 810b442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b44a:	2b00      	cmp	r3, #0
 810b44c:	d00b      	beq.n	810b466 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b44e:	687b      	ldr	r3, [r7, #4]
 810b450:	681b      	ldr	r3, [r3, #0]
 810b452:	2201      	movs	r2, #1
 810b454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b45c:	f043 0201 	orr.w	r2, r3, #1
 810b460:	687b      	ldr	r3, [r7, #4]
 810b462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b46a:	f003 0302 	and.w	r3, r3, #2
 810b46e:	2b00      	cmp	r3, #0
 810b470:	d011      	beq.n	810b496 <UART_RxISR_16BIT_FIFOEN+0xfe>
 810b472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b476:	f003 0301 	and.w	r3, r3, #1
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	d00b      	beq.n	810b496 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b47e:	687b      	ldr	r3, [r7, #4]
 810b480:	681b      	ldr	r3, [r3, #0]
 810b482:	2202      	movs	r2, #2
 810b484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b486:	687b      	ldr	r3, [r7, #4]
 810b488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b48c:	f043 0204 	orr.w	r2, r3, #4
 810b490:	687b      	ldr	r3, [r7, #4]
 810b492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b49a:	f003 0304 	and.w	r3, r3, #4
 810b49e:	2b00      	cmp	r3, #0
 810b4a0:	d011      	beq.n	810b4c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 810b4a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b4a6:	f003 0301 	and.w	r3, r3, #1
 810b4aa:	2b00      	cmp	r3, #0
 810b4ac:	d00b      	beq.n	810b4c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	681b      	ldr	r3, [r3, #0]
 810b4b2:	2204      	movs	r2, #4
 810b4b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b4bc:	f043 0202 	orr.w	r2, r3, #2
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b4cc:	2b00      	cmp	r3, #0
 810b4ce:	d006      	beq.n	810b4de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b4d0:	6878      	ldr	r0, [r7, #4]
 810b4d2:	f7fe fb03 	bl	8109adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b4d6:	687b      	ldr	r3, [r7, #4]
 810b4d8:	2200      	movs	r2, #0
 810b4da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b4e4:	b29b      	uxth	r3, r3
 810b4e6:	2b00      	cmp	r3, #0
 810b4e8:	f040 80a4 	bne.w	810b634 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	681b      	ldr	r3, [r3, #0]
 810b4f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b4f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b4f4:	e853 3f00 	ldrex	r3, [r3]
 810b4f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810b4fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b4fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b504:	687b      	ldr	r3, [r7, #4]
 810b506:	681b      	ldr	r3, [r3, #0]
 810b508:	461a      	mov	r2, r3
 810b50a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810b50e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b512:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b514:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810b516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810b51a:	e841 2300 	strex	r3, r2, [r1]
 810b51e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810b520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810b522:	2b00      	cmp	r3, #0
 810b524:	d1e2      	bne.n	810b4ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b526:	687b      	ldr	r3, [r7, #4]
 810b528:	681b      	ldr	r3, [r3, #0]
 810b52a:	3308      	adds	r3, #8
 810b52c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b52e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b530:	e853 3f00 	ldrex	r3, [r3]
 810b534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810b536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b53c:	f023 0301 	bic.w	r3, r3, #1
 810b540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b544:	687b      	ldr	r3, [r7, #4]
 810b546:	681b      	ldr	r3, [r3, #0]
 810b548:	3308      	adds	r3, #8
 810b54a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810b54e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810b550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810b554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810b556:	e841 2300 	strex	r3, r2, [r1]
 810b55a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810b55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810b55e:	2b00      	cmp	r3, #0
 810b560:	d1e1      	bne.n	810b526 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b562:	687b      	ldr	r3, [r7, #4]
 810b564:	2220      	movs	r2, #32
 810b566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	2200      	movs	r2, #0
 810b56e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b570:	687b      	ldr	r3, [r7, #4]
 810b572:	2200      	movs	r2, #0
 810b574:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	681b      	ldr	r3, [r3, #0]
 810b57a:	4a5f      	ldr	r2, [pc, #380]	@ (810b6f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 810b57c:	4293      	cmp	r3, r2
 810b57e:	d021      	beq.n	810b5c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b580:	687b      	ldr	r3, [r7, #4]
 810b582:	681b      	ldr	r3, [r3, #0]
 810b584:	685b      	ldr	r3, [r3, #4]
 810b586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b58a:	2b00      	cmp	r3, #0
 810b58c:	d01a      	beq.n	810b5c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b58e:	687b      	ldr	r3, [r7, #4]
 810b590:	681b      	ldr	r3, [r3, #0]
 810b592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b596:	e853 3f00 	ldrex	r3, [r3]
 810b59a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810b59c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b59e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b5a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b5a6:	687b      	ldr	r3, [r7, #4]
 810b5a8:	681b      	ldr	r3, [r3, #0]
 810b5aa:	461a      	mov	r2, r3
 810b5ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810b5b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b5b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b5b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810b5b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810b5b8:	e841 2300 	strex	r3, r2, [r1]
 810b5bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810b5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b5c0:	2b00      	cmp	r3, #0
 810b5c2:	d1e4      	bne.n	810b58e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b5c8:	2b01      	cmp	r3, #1
 810b5ca:	d130      	bne.n	810b62e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b5cc:	687b      	ldr	r3, [r7, #4]
 810b5ce:	2200      	movs	r2, #0
 810b5d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b5d2:	687b      	ldr	r3, [r7, #4]
 810b5d4:	681b      	ldr	r3, [r3, #0]
 810b5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b5da:	e853 3f00 	ldrex	r3, [r3]
 810b5de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b5e2:	f023 0310 	bic.w	r3, r3, #16
 810b5e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b5ea:	687b      	ldr	r3, [r7, #4]
 810b5ec:	681b      	ldr	r3, [r3, #0]
 810b5ee:	461a      	mov	r2, r3
 810b5f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 810b5f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b5f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b5fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b5fc:	e841 2300 	strex	r3, r2, [r1]
 810b600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b604:	2b00      	cmp	r3, #0
 810b606:	d1e4      	bne.n	810b5d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b608:	687b      	ldr	r3, [r7, #4]
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	69db      	ldr	r3, [r3, #28]
 810b60e:	f003 0310 	and.w	r3, r3, #16
 810b612:	2b10      	cmp	r3, #16
 810b614:	d103      	bne.n	810b61e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b616:	687b      	ldr	r3, [r7, #4]
 810b618:	681b      	ldr	r3, [r3, #0]
 810b61a:	2210      	movs	r2, #16
 810b61c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b61e:	687b      	ldr	r3, [r7, #4]
 810b620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b624:	4619      	mov	r1, r3
 810b626:	6878      	ldr	r0, [r7, #4]
 810b628:	f7f6 f8f4 	bl	8101814 <HAL_UARTEx_RxEventCallback>
 810b62c:	e002      	b.n	810b634 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810b62e:	6878      	ldr	r0, [r7, #4]
 810b630:	f7fe fa4a 	bl	8109ac8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b634:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810b638:	2b00      	cmp	r3, #0
 810b63a:	d006      	beq.n	810b64a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 810b63c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b640:	f003 0320 	and.w	r3, r3, #32
 810b644:	2b00      	cmp	r3, #0
 810b646:	f47f aecb 	bne.w	810b3e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b650:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b654:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810b658:	2b00      	cmp	r3, #0
 810b65a:	d049      	beq.n	810b6f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 810b65c:	687b      	ldr	r3, [r7, #4]
 810b65e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b662:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810b666:	429a      	cmp	r2, r3
 810b668:	d242      	bcs.n	810b6f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b66a:	687b      	ldr	r3, [r7, #4]
 810b66c:	681b      	ldr	r3, [r3, #0]
 810b66e:	3308      	adds	r3, #8
 810b670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b674:	e853 3f00 	ldrex	r3, [r3]
 810b678:	623b      	str	r3, [r7, #32]
   return(result);
 810b67a:	6a3b      	ldr	r3, [r7, #32]
 810b67c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	681b      	ldr	r3, [r3, #0]
 810b688:	3308      	adds	r3, #8
 810b68a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810b68e:	633a      	str	r2, [r7, #48]	@ 0x30
 810b690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b696:	e841 2300 	strex	r3, r2, [r1]
 810b69a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b69e:	2b00      	cmp	r3, #0
 810b6a0:	d1e3      	bne.n	810b66a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810b6a2:	687b      	ldr	r3, [r7, #4]
 810b6a4:	4a15      	ldr	r2, [pc, #84]	@ (810b6fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 810b6a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b6a8:	687b      	ldr	r3, [r7, #4]
 810b6aa:	681b      	ldr	r3, [r3, #0]
 810b6ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b6ae:	693b      	ldr	r3, [r7, #16]
 810b6b0:	e853 3f00 	ldrex	r3, [r3]
 810b6b4:	60fb      	str	r3, [r7, #12]
   return(result);
 810b6b6:	68fb      	ldr	r3, [r7, #12]
 810b6b8:	f043 0320 	orr.w	r3, r3, #32
 810b6bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b6c0:	687b      	ldr	r3, [r7, #4]
 810b6c2:	681b      	ldr	r3, [r3, #0]
 810b6c4:	461a      	mov	r2, r3
 810b6c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810b6ca:	61fb      	str	r3, [r7, #28]
 810b6cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b6ce:	69b9      	ldr	r1, [r7, #24]
 810b6d0:	69fa      	ldr	r2, [r7, #28]
 810b6d2:	e841 2300 	strex	r3, r2, [r1]
 810b6d6:	617b      	str	r3, [r7, #20]
   return(result);
 810b6d8:	697b      	ldr	r3, [r7, #20]
 810b6da:	2b00      	cmp	r3, #0
 810b6dc:	d1e4      	bne.n	810b6a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b6de:	e007      	b.n	810b6f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b6e0:	687b      	ldr	r3, [r7, #4]
 810b6e2:	681b      	ldr	r3, [r3, #0]
 810b6e4:	699a      	ldr	r2, [r3, #24]
 810b6e6:	687b      	ldr	r3, [r7, #4]
 810b6e8:	681b      	ldr	r3, [r3, #0]
 810b6ea:	f042 0208 	orr.w	r2, r2, #8
 810b6ee:	619a      	str	r2, [r3, #24]
}
 810b6f0:	bf00      	nop
 810b6f2:	37b8      	adds	r7, #184	@ 0xb8
 810b6f4:	46bd      	mov	sp, r7
 810b6f6:	bd80      	pop	{r7, pc}
 810b6f8:	58000c00 	.word	0x58000c00
 810b6fc:	0810ae81 	.word	0x0810ae81

0810b700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b700:	b480      	push	{r7}
 810b702:	b083      	sub	sp, #12
 810b704:	af00      	add	r7, sp, #0
 810b706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b708:	bf00      	nop
 810b70a:	370c      	adds	r7, #12
 810b70c:	46bd      	mov	sp, r7
 810b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b712:	4770      	bx	lr

0810b714 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b714:	b480      	push	{r7}
 810b716:	b083      	sub	sp, #12
 810b718:	af00      	add	r7, sp, #0
 810b71a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b71c:	bf00      	nop
 810b71e:	370c      	adds	r7, #12
 810b720:	46bd      	mov	sp, r7
 810b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b726:	4770      	bx	lr

0810b728 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b728:	b480      	push	{r7}
 810b72a:	b083      	sub	sp, #12
 810b72c:	af00      	add	r7, sp, #0
 810b72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b730:	bf00      	nop
 810b732:	370c      	adds	r7, #12
 810b734:	46bd      	mov	sp, r7
 810b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b73a:	4770      	bx	lr

0810b73c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b73c:	b480      	push	{r7}
 810b73e:	b085      	sub	sp, #20
 810b740:	af00      	add	r7, sp, #0
 810b742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b744:	687b      	ldr	r3, [r7, #4]
 810b746:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b74a:	2b01      	cmp	r3, #1
 810b74c:	d101      	bne.n	810b752 <HAL_UARTEx_DisableFifoMode+0x16>
 810b74e:	2302      	movs	r3, #2
 810b750:	e027      	b.n	810b7a2 <HAL_UARTEx_DisableFifoMode+0x66>
 810b752:	687b      	ldr	r3, [r7, #4]
 810b754:	2201      	movs	r2, #1
 810b756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b75a:	687b      	ldr	r3, [r7, #4]
 810b75c:	2224      	movs	r2, #36	@ 0x24
 810b75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b762:	687b      	ldr	r3, [r7, #4]
 810b764:	681b      	ldr	r3, [r3, #0]
 810b766:	681b      	ldr	r3, [r3, #0]
 810b768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b76a:	687b      	ldr	r3, [r7, #4]
 810b76c:	681b      	ldr	r3, [r3, #0]
 810b76e:	681a      	ldr	r2, [r3, #0]
 810b770:	687b      	ldr	r3, [r7, #4]
 810b772:	681b      	ldr	r3, [r3, #0]
 810b774:	f022 0201 	bic.w	r2, r2, #1
 810b778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b77a:	68fb      	ldr	r3, [r7, #12]
 810b77c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b782:	687b      	ldr	r3, [r7, #4]
 810b784:	2200      	movs	r2, #0
 810b786:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	681b      	ldr	r3, [r3, #0]
 810b78c:	68fa      	ldr	r2, [r7, #12]
 810b78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	2220      	movs	r2, #32
 810b794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	2200      	movs	r2, #0
 810b79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b7a0:	2300      	movs	r3, #0
}
 810b7a2:	4618      	mov	r0, r3
 810b7a4:	3714      	adds	r7, #20
 810b7a6:	46bd      	mov	sp, r7
 810b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7ac:	4770      	bx	lr

0810b7ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b7ae:	b580      	push	{r7, lr}
 810b7b0:	b084      	sub	sp, #16
 810b7b2:	af00      	add	r7, sp, #0
 810b7b4:	6078      	str	r0, [r7, #4]
 810b7b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b7b8:	687b      	ldr	r3, [r7, #4]
 810b7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b7be:	2b01      	cmp	r3, #1
 810b7c0:	d101      	bne.n	810b7c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b7c2:	2302      	movs	r3, #2
 810b7c4:	e02d      	b.n	810b822 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b7c6:	687b      	ldr	r3, [r7, #4]
 810b7c8:	2201      	movs	r2, #1
 810b7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b7ce:	687b      	ldr	r3, [r7, #4]
 810b7d0:	2224      	movs	r2, #36	@ 0x24
 810b7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b7d6:	687b      	ldr	r3, [r7, #4]
 810b7d8:	681b      	ldr	r3, [r3, #0]
 810b7da:	681b      	ldr	r3, [r3, #0]
 810b7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b7de:	687b      	ldr	r3, [r7, #4]
 810b7e0:	681b      	ldr	r3, [r3, #0]
 810b7e2:	681a      	ldr	r2, [r3, #0]
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	681b      	ldr	r3, [r3, #0]
 810b7e8:	f022 0201 	bic.w	r2, r2, #1
 810b7ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b7ee:	687b      	ldr	r3, [r7, #4]
 810b7f0:	681b      	ldr	r3, [r3, #0]
 810b7f2:	689b      	ldr	r3, [r3, #8]
 810b7f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b7f8:	687b      	ldr	r3, [r7, #4]
 810b7fa:	681b      	ldr	r3, [r3, #0]
 810b7fc:	683a      	ldr	r2, [r7, #0]
 810b7fe:	430a      	orrs	r2, r1
 810b800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b802:	6878      	ldr	r0, [r7, #4]
 810b804:	f000 f8a0 	bl	810b948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b808:	687b      	ldr	r3, [r7, #4]
 810b80a:	681b      	ldr	r3, [r3, #0]
 810b80c:	68fa      	ldr	r2, [r7, #12]
 810b80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b810:	687b      	ldr	r3, [r7, #4]
 810b812:	2220      	movs	r2, #32
 810b814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b818:	687b      	ldr	r3, [r7, #4]
 810b81a:	2200      	movs	r2, #0
 810b81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b820:	2300      	movs	r3, #0
}
 810b822:	4618      	mov	r0, r3
 810b824:	3710      	adds	r7, #16
 810b826:	46bd      	mov	sp, r7
 810b828:	bd80      	pop	{r7, pc}

0810b82a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b82a:	b580      	push	{r7, lr}
 810b82c:	b084      	sub	sp, #16
 810b82e:	af00      	add	r7, sp, #0
 810b830:	6078      	str	r0, [r7, #4]
 810b832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b834:	687b      	ldr	r3, [r7, #4]
 810b836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b83a:	2b01      	cmp	r3, #1
 810b83c:	d101      	bne.n	810b842 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b83e:	2302      	movs	r3, #2
 810b840:	e02d      	b.n	810b89e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b842:	687b      	ldr	r3, [r7, #4]
 810b844:	2201      	movs	r2, #1
 810b846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b84a:	687b      	ldr	r3, [r7, #4]
 810b84c:	2224      	movs	r2, #36	@ 0x24
 810b84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b852:	687b      	ldr	r3, [r7, #4]
 810b854:	681b      	ldr	r3, [r3, #0]
 810b856:	681b      	ldr	r3, [r3, #0]
 810b858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b85a:	687b      	ldr	r3, [r7, #4]
 810b85c:	681b      	ldr	r3, [r3, #0]
 810b85e:	681a      	ldr	r2, [r3, #0]
 810b860:	687b      	ldr	r3, [r7, #4]
 810b862:	681b      	ldr	r3, [r3, #0]
 810b864:	f022 0201 	bic.w	r2, r2, #1
 810b868:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b86a:	687b      	ldr	r3, [r7, #4]
 810b86c:	681b      	ldr	r3, [r3, #0]
 810b86e:	689b      	ldr	r3, [r3, #8]
 810b870:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b874:	687b      	ldr	r3, [r7, #4]
 810b876:	681b      	ldr	r3, [r3, #0]
 810b878:	683a      	ldr	r2, [r7, #0]
 810b87a:	430a      	orrs	r2, r1
 810b87c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b87e:	6878      	ldr	r0, [r7, #4]
 810b880:	f000 f862 	bl	810b948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b884:	687b      	ldr	r3, [r7, #4]
 810b886:	681b      	ldr	r3, [r3, #0]
 810b888:	68fa      	ldr	r2, [r7, #12]
 810b88a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b88c:	687b      	ldr	r3, [r7, #4]
 810b88e:	2220      	movs	r2, #32
 810b890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b894:	687b      	ldr	r3, [r7, #4]
 810b896:	2200      	movs	r2, #0
 810b898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b89c:	2300      	movs	r3, #0
}
 810b89e:	4618      	mov	r0, r3
 810b8a0:	3710      	adds	r7, #16
 810b8a2:	46bd      	mov	sp, r7
 810b8a4:	bd80      	pop	{r7, pc}

0810b8a6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b8a6:	b580      	push	{r7, lr}
 810b8a8:	b08c      	sub	sp, #48	@ 0x30
 810b8aa:	af00      	add	r7, sp, #0
 810b8ac:	60f8      	str	r0, [r7, #12]
 810b8ae:	60b9      	str	r1, [r7, #8]
 810b8b0:	4613      	mov	r3, r2
 810b8b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 810b8b4:	2300      	movs	r3, #0
 810b8b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b8ba:	68fb      	ldr	r3, [r7, #12]
 810b8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b8c0:	2b20      	cmp	r3, #32
 810b8c2:	d13b      	bne.n	810b93c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 810b8c4:	68bb      	ldr	r3, [r7, #8]
 810b8c6:	2b00      	cmp	r3, #0
 810b8c8:	d002      	beq.n	810b8d0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 810b8ca:	88fb      	ldrh	r3, [r7, #6]
 810b8cc:	2b00      	cmp	r3, #0
 810b8ce:	d101      	bne.n	810b8d4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 810b8d0:	2301      	movs	r3, #1
 810b8d2:	e034      	b.n	810b93e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 810b8d4:	68fb      	ldr	r3, [r7, #12]
 810b8d6:	2201      	movs	r2, #1
 810b8d8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b8da:	68fb      	ldr	r3, [r7, #12]
 810b8dc:	2200      	movs	r2, #0
 810b8de:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 810b8e0:	88fb      	ldrh	r3, [r7, #6]
 810b8e2:	461a      	mov	r2, r3
 810b8e4:	68b9      	ldr	r1, [r7, #8]
 810b8e6:	68f8      	ldr	r0, [r7, #12]
 810b8e8:	f7ff f824 	bl	810a934 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b8ec:	68fb      	ldr	r3, [r7, #12]
 810b8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b8f0:	2b01      	cmp	r3, #1
 810b8f2:	d11d      	bne.n	810b930 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b8f4:	68fb      	ldr	r3, [r7, #12]
 810b8f6:	681b      	ldr	r3, [r3, #0]
 810b8f8:	2210      	movs	r2, #16
 810b8fa:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b8fc:	68fb      	ldr	r3, [r7, #12]
 810b8fe:	681b      	ldr	r3, [r3, #0]
 810b900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b902:	69bb      	ldr	r3, [r7, #24]
 810b904:	e853 3f00 	ldrex	r3, [r3]
 810b908:	617b      	str	r3, [r7, #20]
   return(result);
 810b90a:	697b      	ldr	r3, [r7, #20]
 810b90c:	f043 0310 	orr.w	r3, r3, #16
 810b910:	62bb      	str	r3, [r7, #40]	@ 0x28
 810b912:	68fb      	ldr	r3, [r7, #12]
 810b914:	681b      	ldr	r3, [r3, #0]
 810b916:	461a      	mov	r2, r3
 810b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b91a:	627b      	str	r3, [r7, #36]	@ 0x24
 810b91c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b91e:	6a39      	ldr	r1, [r7, #32]
 810b920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b922:	e841 2300 	strex	r3, r2, [r1]
 810b926:	61fb      	str	r3, [r7, #28]
   return(result);
 810b928:	69fb      	ldr	r3, [r7, #28]
 810b92a:	2b00      	cmp	r3, #0
 810b92c:	d1e6      	bne.n	810b8fc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 810b92e:	e002      	b.n	810b936 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 810b930:	2301      	movs	r3, #1
 810b932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 810b936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 810b93a:	e000      	b.n	810b93e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 810b93c:	2302      	movs	r3, #2
  }
}
 810b93e:	4618      	mov	r0, r3
 810b940:	3730      	adds	r7, #48	@ 0x30
 810b942:	46bd      	mov	sp, r7
 810b944:	bd80      	pop	{r7, pc}
	...

0810b948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b948:	b480      	push	{r7}
 810b94a:	b085      	sub	sp, #20
 810b94c:	af00      	add	r7, sp, #0
 810b94e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b950:	687b      	ldr	r3, [r7, #4]
 810b952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b954:	2b00      	cmp	r3, #0
 810b956:	d108      	bne.n	810b96a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	2201      	movs	r2, #1
 810b95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b960:	687b      	ldr	r3, [r7, #4]
 810b962:	2201      	movs	r2, #1
 810b964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b968:	e031      	b.n	810b9ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b96a:	2310      	movs	r3, #16
 810b96c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b96e:	2310      	movs	r3, #16
 810b970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b972:	687b      	ldr	r3, [r7, #4]
 810b974:	681b      	ldr	r3, [r3, #0]
 810b976:	689b      	ldr	r3, [r3, #8]
 810b978:	0e5b      	lsrs	r3, r3, #25
 810b97a:	b2db      	uxtb	r3, r3
 810b97c:	f003 0307 	and.w	r3, r3, #7
 810b980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b982:	687b      	ldr	r3, [r7, #4]
 810b984:	681b      	ldr	r3, [r3, #0]
 810b986:	689b      	ldr	r3, [r3, #8]
 810b988:	0f5b      	lsrs	r3, r3, #29
 810b98a:	b2db      	uxtb	r3, r3
 810b98c:	f003 0307 	and.w	r3, r3, #7
 810b990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b992:	7bbb      	ldrb	r3, [r7, #14]
 810b994:	7b3a      	ldrb	r2, [r7, #12]
 810b996:	4911      	ldr	r1, [pc, #68]	@ (810b9dc <UARTEx_SetNbDataToProcess+0x94>)
 810b998:	5c8a      	ldrb	r2, [r1, r2]
 810b99a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b99e:	7b3a      	ldrb	r2, [r7, #12]
 810b9a0:	490f      	ldr	r1, [pc, #60]	@ (810b9e0 <UARTEx_SetNbDataToProcess+0x98>)
 810b9a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b9a4:	fb93 f3f2 	sdiv	r3, r3, r2
 810b9a8:	b29a      	uxth	r2, r3
 810b9aa:	687b      	ldr	r3, [r7, #4]
 810b9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b9b0:	7bfb      	ldrb	r3, [r7, #15]
 810b9b2:	7b7a      	ldrb	r2, [r7, #13]
 810b9b4:	4909      	ldr	r1, [pc, #36]	@ (810b9dc <UARTEx_SetNbDataToProcess+0x94>)
 810b9b6:	5c8a      	ldrb	r2, [r1, r2]
 810b9b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b9bc:	7b7a      	ldrb	r2, [r7, #13]
 810b9be:	4908      	ldr	r1, [pc, #32]	@ (810b9e0 <UARTEx_SetNbDataToProcess+0x98>)
 810b9c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 810b9c6:	b29a      	uxth	r2, r3
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810b9ce:	bf00      	nop
 810b9d0:	3714      	adds	r7, #20
 810b9d2:	46bd      	mov	sp, r7
 810b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9d8:	4770      	bx	lr
 810b9da:	bf00      	nop
 810b9dc:	08117498 	.word	0x08117498
 810b9e0:	081174a0 	.word	0x081174a0

0810b9e4 <__NVIC_SetPriority>:
{
 810b9e4:	b480      	push	{r7}
 810b9e6:	b083      	sub	sp, #12
 810b9e8:	af00      	add	r7, sp, #0
 810b9ea:	4603      	mov	r3, r0
 810b9ec:	6039      	str	r1, [r7, #0]
 810b9ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810b9f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b9f4:	2b00      	cmp	r3, #0
 810b9f6:	db0a      	blt.n	810ba0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b9f8:	683b      	ldr	r3, [r7, #0]
 810b9fa:	b2da      	uxtb	r2, r3
 810b9fc:	490c      	ldr	r1, [pc, #48]	@ (810ba30 <__NVIC_SetPriority+0x4c>)
 810b9fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ba02:	0112      	lsls	r2, r2, #4
 810ba04:	b2d2      	uxtb	r2, r2
 810ba06:	440b      	add	r3, r1
 810ba08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810ba0c:	e00a      	b.n	810ba24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810ba0e:	683b      	ldr	r3, [r7, #0]
 810ba10:	b2da      	uxtb	r2, r3
 810ba12:	4908      	ldr	r1, [pc, #32]	@ (810ba34 <__NVIC_SetPriority+0x50>)
 810ba14:	88fb      	ldrh	r3, [r7, #6]
 810ba16:	f003 030f 	and.w	r3, r3, #15
 810ba1a:	3b04      	subs	r3, #4
 810ba1c:	0112      	lsls	r2, r2, #4
 810ba1e:	b2d2      	uxtb	r2, r2
 810ba20:	440b      	add	r3, r1
 810ba22:	761a      	strb	r2, [r3, #24]
}
 810ba24:	bf00      	nop
 810ba26:	370c      	adds	r7, #12
 810ba28:	46bd      	mov	sp, r7
 810ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba2e:	4770      	bx	lr
 810ba30:	e000e100 	.word	0xe000e100
 810ba34:	e000ed00 	.word	0xe000ed00

0810ba38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810ba38:	b580      	push	{r7, lr}
 810ba3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810ba3c:	4b05      	ldr	r3, [pc, #20]	@ (810ba54 <SysTick_Handler+0x1c>)
 810ba3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810ba40:	f002 fdaa 	bl	810e598 <xTaskGetSchedulerState>
 810ba44:	4603      	mov	r3, r0
 810ba46:	2b01      	cmp	r3, #1
 810ba48:	d001      	beq.n	810ba4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810ba4a:	f000 febd 	bl	810c7c8 <xPortSysTickHandler>
  }
}
 810ba4e:	bf00      	nop
 810ba50:	bd80      	pop	{r7, pc}
 810ba52:	bf00      	nop
 810ba54:	e000e010 	.word	0xe000e010

0810ba58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810ba58:	b580      	push	{r7, lr}
 810ba5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810ba5c:	2100      	movs	r1, #0
 810ba5e:	f06f 0004 	mvn.w	r0, #4
 810ba62:	f7ff ffbf 	bl	810b9e4 <__NVIC_SetPriority>
#endif
}
 810ba66:	bf00      	nop
 810ba68:	bd80      	pop	{r7, pc}
	...

0810ba6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810ba6c:	b480      	push	{r7}
 810ba6e:	b083      	sub	sp, #12
 810ba70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ba72:	f3ef 8305 	mrs	r3, IPSR
 810ba76:	603b      	str	r3, [r7, #0]
  return(result);
 810ba78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ba7a:	2b00      	cmp	r3, #0
 810ba7c:	d003      	beq.n	810ba86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810ba7e:	f06f 0305 	mvn.w	r3, #5
 810ba82:	607b      	str	r3, [r7, #4]
 810ba84:	e00c      	b.n	810baa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810ba86:	4b0a      	ldr	r3, [pc, #40]	@ (810bab0 <osKernelInitialize+0x44>)
 810ba88:	681b      	ldr	r3, [r3, #0]
 810ba8a:	2b00      	cmp	r3, #0
 810ba8c:	d105      	bne.n	810ba9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810ba8e:	4b08      	ldr	r3, [pc, #32]	@ (810bab0 <osKernelInitialize+0x44>)
 810ba90:	2201      	movs	r2, #1
 810ba92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810ba94:	2300      	movs	r3, #0
 810ba96:	607b      	str	r3, [r7, #4]
 810ba98:	e002      	b.n	810baa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810ba9a:	f04f 33ff 	mov.w	r3, #4294967295
 810ba9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810baa0:	687b      	ldr	r3, [r7, #4]
}
 810baa2:	4618      	mov	r0, r3
 810baa4:	370c      	adds	r7, #12
 810baa6:	46bd      	mov	sp, r7
 810baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810baac:	4770      	bx	lr
 810baae:	bf00      	nop
 810bab0:	100005f8 	.word	0x100005f8

0810bab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810bab4:	b580      	push	{r7, lr}
 810bab6:	b082      	sub	sp, #8
 810bab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810baba:	f3ef 8305 	mrs	r3, IPSR
 810babe:	603b      	str	r3, [r7, #0]
  return(result);
 810bac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bac2:	2b00      	cmp	r3, #0
 810bac4:	d003      	beq.n	810bace <osKernelStart+0x1a>
    stat = osErrorISR;
 810bac6:	f06f 0305 	mvn.w	r3, #5
 810baca:	607b      	str	r3, [r7, #4]
 810bacc:	e010      	b.n	810baf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810bace:	4b0b      	ldr	r3, [pc, #44]	@ (810bafc <osKernelStart+0x48>)
 810bad0:	681b      	ldr	r3, [r3, #0]
 810bad2:	2b01      	cmp	r3, #1
 810bad4:	d109      	bne.n	810baea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810bad6:	f7ff ffbf 	bl	810ba58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810bada:	4b08      	ldr	r3, [pc, #32]	@ (810bafc <osKernelStart+0x48>)
 810badc:	2202      	movs	r2, #2
 810bade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810bae0:	f002 f90c 	bl	810dcfc <vTaskStartScheduler>
      stat = osOK;
 810bae4:	2300      	movs	r3, #0
 810bae6:	607b      	str	r3, [r7, #4]
 810bae8:	e002      	b.n	810baf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810baea:	f04f 33ff 	mov.w	r3, #4294967295
 810baee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810baf0:	687b      	ldr	r3, [r7, #4]
}
 810baf2:	4618      	mov	r0, r3
 810baf4:	3708      	adds	r7, #8
 810baf6:	46bd      	mov	sp, r7
 810baf8:	bd80      	pop	{r7, pc}
 810bafa:	bf00      	nop
 810bafc:	100005f8 	.word	0x100005f8

0810bb00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810bb00:	b580      	push	{r7, lr}
 810bb02:	b08e      	sub	sp, #56	@ 0x38
 810bb04:	af04      	add	r7, sp, #16
 810bb06:	60f8      	str	r0, [r7, #12]
 810bb08:	60b9      	str	r1, [r7, #8]
 810bb0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810bb0c:	2300      	movs	r3, #0
 810bb0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bb10:	f3ef 8305 	mrs	r3, IPSR
 810bb14:	617b      	str	r3, [r7, #20]
  return(result);
 810bb16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810bb18:	2b00      	cmp	r3, #0
 810bb1a:	d17e      	bne.n	810bc1a <osThreadNew+0x11a>
 810bb1c:	68fb      	ldr	r3, [r7, #12]
 810bb1e:	2b00      	cmp	r3, #0
 810bb20:	d07b      	beq.n	810bc1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810bb22:	2380      	movs	r3, #128	@ 0x80
 810bb24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810bb26:	2318      	movs	r3, #24
 810bb28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810bb2a:	2300      	movs	r3, #0
 810bb2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810bb2e:	f04f 33ff 	mov.w	r3, #4294967295
 810bb32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	2b00      	cmp	r3, #0
 810bb38:	d045      	beq.n	810bbc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810bb3a:	687b      	ldr	r3, [r7, #4]
 810bb3c:	681b      	ldr	r3, [r3, #0]
 810bb3e:	2b00      	cmp	r3, #0
 810bb40:	d002      	beq.n	810bb48 <osThreadNew+0x48>
        name = attr->name;
 810bb42:	687b      	ldr	r3, [r7, #4]
 810bb44:	681b      	ldr	r3, [r3, #0]
 810bb46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810bb48:	687b      	ldr	r3, [r7, #4]
 810bb4a:	699b      	ldr	r3, [r3, #24]
 810bb4c:	2b00      	cmp	r3, #0
 810bb4e:	d002      	beq.n	810bb56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	699b      	ldr	r3, [r3, #24]
 810bb54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810bb56:	69fb      	ldr	r3, [r7, #28]
 810bb58:	2b00      	cmp	r3, #0
 810bb5a:	d008      	beq.n	810bb6e <osThreadNew+0x6e>
 810bb5c:	69fb      	ldr	r3, [r7, #28]
 810bb5e:	2b38      	cmp	r3, #56	@ 0x38
 810bb60:	d805      	bhi.n	810bb6e <osThreadNew+0x6e>
 810bb62:	687b      	ldr	r3, [r7, #4]
 810bb64:	685b      	ldr	r3, [r3, #4]
 810bb66:	f003 0301 	and.w	r3, r3, #1
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	d001      	beq.n	810bb72 <osThreadNew+0x72>
        return (NULL);
 810bb6e:	2300      	movs	r3, #0
 810bb70:	e054      	b.n	810bc1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810bb72:	687b      	ldr	r3, [r7, #4]
 810bb74:	695b      	ldr	r3, [r3, #20]
 810bb76:	2b00      	cmp	r3, #0
 810bb78:	d003      	beq.n	810bb82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810bb7a:	687b      	ldr	r3, [r7, #4]
 810bb7c:	695b      	ldr	r3, [r3, #20]
 810bb7e:	089b      	lsrs	r3, r3, #2
 810bb80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810bb82:	687b      	ldr	r3, [r7, #4]
 810bb84:	689b      	ldr	r3, [r3, #8]
 810bb86:	2b00      	cmp	r3, #0
 810bb88:	d00e      	beq.n	810bba8 <osThreadNew+0xa8>
 810bb8a:	687b      	ldr	r3, [r7, #4]
 810bb8c:	68db      	ldr	r3, [r3, #12]
 810bb8e:	2b5b      	cmp	r3, #91	@ 0x5b
 810bb90:	d90a      	bls.n	810bba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810bb92:	687b      	ldr	r3, [r7, #4]
 810bb94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810bb96:	2b00      	cmp	r3, #0
 810bb98:	d006      	beq.n	810bba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	695b      	ldr	r3, [r3, #20]
 810bb9e:	2b00      	cmp	r3, #0
 810bba0:	d002      	beq.n	810bba8 <osThreadNew+0xa8>
        mem = 1;
 810bba2:	2301      	movs	r3, #1
 810bba4:	61bb      	str	r3, [r7, #24]
 810bba6:	e010      	b.n	810bbca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810bba8:	687b      	ldr	r3, [r7, #4]
 810bbaa:	689b      	ldr	r3, [r3, #8]
 810bbac:	2b00      	cmp	r3, #0
 810bbae:	d10c      	bne.n	810bbca <osThreadNew+0xca>
 810bbb0:	687b      	ldr	r3, [r7, #4]
 810bbb2:	68db      	ldr	r3, [r3, #12]
 810bbb4:	2b00      	cmp	r3, #0
 810bbb6:	d108      	bne.n	810bbca <osThreadNew+0xca>
 810bbb8:	687b      	ldr	r3, [r7, #4]
 810bbba:	691b      	ldr	r3, [r3, #16]
 810bbbc:	2b00      	cmp	r3, #0
 810bbbe:	d104      	bne.n	810bbca <osThreadNew+0xca>
          mem = 0;
 810bbc0:	2300      	movs	r3, #0
 810bbc2:	61bb      	str	r3, [r7, #24]
 810bbc4:	e001      	b.n	810bbca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810bbc6:	2300      	movs	r3, #0
 810bbc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810bbca:	69bb      	ldr	r3, [r7, #24]
 810bbcc:	2b01      	cmp	r3, #1
 810bbce:	d110      	bne.n	810bbf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810bbd0:	687b      	ldr	r3, [r7, #4]
 810bbd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810bbd4:	687a      	ldr	r2, [r7, #4]
 810bbd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810bbd8:	9202      	str	r2, [sp, #8]
 810bbda:	9301      	str	r3, [sp, #4]
 810bbdc:	69fb      	ldr	r3, [r7, #28]
 810bbde:	9300      	str	r3, [sp, #0]
 810bbe0:	68bb      	ldr	r3, [r7, #8]
 810bbe2:	6a3a      	ldr	r2, [r7, #32]
 810bbe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bbe6:	68f8      	ldr	r0, [r7, #12]
 810bbe8:	f001 feac 	bl	810d944 <xTaskCreateStatic>
 810bbec:	4603      	mov	r3, r0
 810bbee:	613b      	str	r3, [r7, #16]
 810bbf0:	e013      	b.n	810bc1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810bbf2:	69bb      	ldr	r3, [r7, #24]
 810bbf4:	2b00      	cmp	r3, #0
 810bbf6:	d110      	bne.n	810bc1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810bbf8:	6a3b      	ldr	r3, [r7, #32]
 810bbfa:	b29a      	uxth	r2, r3
 810bbfc:	f107 0310 	add.w	r3, r7, #16
 810bc00:	9301      	str	r3, [sp, #4]
 810bc02:	69fb      	ldr	r3, [r7, #28]
 810bc04:	9300      	str	r3, [sp, #0]
 810bc06:	68bb      	ldr	r3, [r7, #8]
 810bc08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bc0a:	68f8      	ldr	r0, [r7, #12]
 810bc0c:	f001 fefa 	bl	810da04 <xTaskCreate>
 810bc10:	4603      	mov	r3, r0
 810bc12:	2b01      	cmp	r3, #1
 810bc14:	d001      	beq.n	810bc1a <osThreadNew+0x11a>
            hTask = NULL;
 810bc16:	2300      	movs	r3, #0
 810bc18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810bc1a:	693b      	ldr	r3, [r7, #16]
}
 810bc1c:	4618      	mov	r0, r3
 810bc1e:	3728      	adds	r7, #40	@ 0x28
 810bc20:	46bd      	mov	sp, r7
 810bc22:	bd80      	pop	{r7, pc}

0810bc24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810bc24:	b580      	push	{r7, lr}
 810bc26:	b084      	sub	sp, #16
 810bc28:	af00      	add	r7, sp, #0
 810bc2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bc2c:	f3ef 8305 	mrs	r3, IPSR
 810bc30:	60bb      	str	r3, [r7, #8]
  return(result);
 810bc32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bc34:	2b00      	cmp	r3, #0
 810bc36:	d003      	beq.n	810bc40 <osDelay+0x1c>
    stat = osErrorISR;
 810bc38:	f06f 0305 	mvn.w	r3, #5
 810bc3c:	60fb      	str	r3, [r7, #12]
 810bc3e:	e007      	b.n	810bc50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810bc40:	2300      	movs	r3, #0
 810bc42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810bc44:	687b      	ldr	r3, [r7, #4]
 810bc46:	2b00      	cmp	r3, #0
 810bc48:	d002      	beq.n	810bc50 <osDelay+0x2c>
      vTaskDelay(ticks);
 810bc4a:	6878      	ldr	r0, [r7, #4]
 810bc4c:	f002 f820 	bl	810dc90 <vTaskDelay>
    }
  }

  return (stat);
 810bc50:	68fb      	ldr	r3, [r7, #12]
}
 810bc52:	4618      	mov	r0, r3
 810bc54:	3710      	adds	r7, #16
 810bc56:	46bd      	mov	sp, r7
 810bc58:	bd80      	pop	{r7, pc}

0810bc5a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810bc5a:	b580      	push	{r7, lr}
 810bc5c:	b08a      	sub	sp, #40	@ 0x28
 810bc5e:	af02      	add	r7, sp, #8
 810bc60:	60f8      	str	r0, [r7, #12]
 810bc62:	60b9      	str	r1, [r7, #8]
 810bc64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810bc66:	2300      	movs	r3, #0
 810bc68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bc6a:	f3ef 8305 	mrs	r3, IPSR
 810bc6e:	613b      	str	r3, [r7, #16]
  return(result);
 810bc70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810bc72:	2b00      	cmp	r3, #0
 810bc74:	d175      	bne.n	810bd62 <osSemaphoreNew+0x108>
 810bc76:	68fb      	ldr	r3, [r7, #12]
 810bc78:	2b00      	cmp	r3, #0
 810bc7a:	d072      	beq.n	810bd62 <osSemaphoreNew+0x108>
 810bc7c:	68ba      	ldr	r2, [r7, #8]
 810bc7e:	68fb      	ldr	r3, [r7, #12]
 810bc80:	429a      	cmp	r2, r3
 810bc82:	d86e      	bhi.n	810bd62 <osSemaphoreNew+0x108>
    mem = -1;
 810bc84:	f04f 33ff 	mov.w	r3, #4294967295
 810bc88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810bc8a:	687b      	ldr	r3, [r7, #4]
 810bc8c:	2b00      	cmp	r3, #0
 810bc8e:	d015      	beq.n	810bcbc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810bc90:	687b      	ldr	r3, [r7, #4]
 810bc92:	689b      	ldr	r3, [r3, #8]
 810bc94:	2b00      	cmp	r3, #0
 810bc96:	d006      	beq.n	810bca6 <osSemaphoreNew+0x4c>
 810bc98:	687b      	ldr	r3, [r7, #4]
 810bc9a:	68db      	ldr	r3, [r3, #12]
 810bc9c:	2b4f      	cmp	r3, #79	@ 0x4f
 810bc9e:	d902      	bls.n	810bca6 <osSemaphoreNew+0x4c>
        mem = 1;
 810bca0:	2301      	movs	r3, #1
 810bca2:	61bb      	str	r3, [r7, #24]
 810bca4:	e00c      	b.n	810bcc0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810bca6:	687b      	ldr	r3, [r7, #4]
 810bca8:	689b      	ldr	r3, [r3, #8]
 810bcaa:	2b00      	cmp	r3, #0
 810bcac:	d108      	bne.n	810bcc0 <osSemaphoreNew+0x66>
 810bcae:	687b      	ldr	r3, [r7, #4]
 810bcb0:	68db      	ldr	r3, [r3, #12]
 810bcb2:	2b00      	cmp	r3, #0
 810bcb4:	d104      	bne.n	810bcc0 <osSemaphoreNew+0x66>
          mem = 0;
 810bcb6:	2300      	movs	r3, #0
 810bcb8:	61bb      	str	r3, [r7, #24]
 810bcba:	e001      	b.n	810bcc0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810bcbc:	2300      	movs	r3, #0
 810bcbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810bcc0:	69bb      	ldr	r3, [r7, #24]
 810bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bcc6:	d04c      	beq.n	810bd62 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810bcc8:	68fb      	ldr	r3, [r7, #12]
 810bcca:	2b01      	cmp	r3, #1
 810bccc:	d128      	bne.n	810bd20 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810bcce:	69bb      	ldr	r3, [r7, #24]
 810bcd0:	2b01      	cmp	r3, #1
 810bcd2:	d10a      	bne.n	810bcea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810bcd4:	687b      	ldr	r3, [r7, #4]
 810bcd6:	689b      	ldr	r3, [r3, #8]
 810bcd8:	2203      	movs	r2, #3
 810bcda:	9200      	str	r2, [sp, #0]
 810bcdc:	2200      	movs	r2, #0
 810bcde:	2100      	movs	r1, #0
 810bce0:	2001      	movs	r0, #1
 810bce2:	f000 fe6d 	bl	810c9c0 <xQueueGenericCreateStatic>
 810bce6:	61f8      	str	r0, [r7, #28]
 810bce8:	e005      	b.n	810bcf6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810bcea:	2203      	movs	r2, #3
 810bcec:	2100      	movs	r1, #0
 810bcee:	2001      	movs	r0, #1
 810bcf0:	f000 fee3 	bl	810caba <xQueueGenericCreate>
 810bcf4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810bcf6:	69fb      	ldr	r3, [r7, #28]
 810bcf8:	2b00      	cmp	r3, #0
 810bcfa:	d022      	beq.n	810bd42 <osSemaphoreNew+0xe8>
 810bcfc:	68bb      	ldr	r3, [r7, #8]
 810bcfe:	2b00      	cmp	r3, #0
 810bd00:	d01f      	beq.n	810bd42 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810bd02:	2300      	movs	r3, #0
 810bd04:	2200      	movs	r2, #0
 810bd06:	2100      	movs	r1, #0
 810bd08:	69f8      	ldr	r0, [r7, #28]
 810bd0a:	f000 ffa3 	bl	810cc54 <xQueueGenericSend>
 810bd0e:	4603      	mov	r3, r0
 810bd10:	2b01      	cmp	r3, #1
 810bd12:	d016      	beq.n	810bd42 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810bd14:	69f8      	ldr	r0, [r7, #28]
 810bd16:	f001 fc41 	bl	810d59c <vQueueDelete>
            hSemaphore = NULL;
 810bd1a:	2300      	movs	r3, #0
 810bd1c:	61fb      	str	r3, [r7, #28]
 810bd1e:	e010      	b.n	810bd42 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810bd20:	69bb      	ldr	r3, [r7, #24]
 810bd22:	2b01      	cmp	r3, #1
 810bd24:	d108      	bne.n	810bd38 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810bd26:	687b      	ldr	r3, [r7, #4]
 810bd28:	689b      	ldr	r3, [r3, #8]
 810bd2a:	461a      	mov	r2, r3
 810bd2c:	68b9      	ldr	r1, [r7, #8]
 810bd2e:	68f8      	ldr	r0, [r7, #12]
 810bd30:	f000 ff21 	bl	810cb76 <xQueueCreateCountingSemaphoreStatic>
 810bd34:	61f8      	str	r0, [r7, #28]
 810bd36:	e004      	b.n	810bd42 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810bd38:	68b9      	ldr	r1, [r7, #8]
 810bd3a:	68f8      	ldr	r0, [r7, #12]
 810bd3c:	f000 ff54 	bl	810cbe8 <xQueueCreateCountingSemaphore>
 810bd40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810bd42:	69fb      	ldr	r3, [r7, #28]
 810bd44:	2b00      	cmp	r3, #0
 810bd46:	d00c      	beq.n	810bd62 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	2b00      	cmp	r3, #0
 810bd4c:	d003      	beq.n	810bd56 <osSemaphoreNew+0xfc>
          name = attr->name;
 810bd4e:	687b      	ldr	r3, [r7, #4]
 810bd50:	681b      	ldr	r3, [r3, #0]
 810bd52:	617b      	str	r3, [r7, #20]
 810bd54:	e001      	b.n	810bd5a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810bd56:	2300      	movs	r3, #0
 810bd58:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810bd5a:	6979      	ldr	r1, [r7, #20]
 810bd5c:	69f8      	ldr	r0, [r7, #28]
 810bd5e:	f001 fd69 	bl	810d834 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810bd62:	69fb      	ldr	r3, [r7, #28]
}
 810bd64:	4618      	mov	r0, r3
 810bd66:	3720      	adds	r7, #32
 810bd68:	46bd      	mov	sp, r7
 810bd6a:	bd80      	pop	{r7, pc}

0810bd6c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810bd6c:	b580      	push	{r7, lr}
 810bd6e:	b086      	sub	sp, #24
 810bd70:	af00      	add	r7, sp, #0
 810bd72:	6078      	str	r0, [r7, #4]
 810bd74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810bd76:	687b      	ldr	r3, [r7, #4]
 810bd78:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810bd7a:	2300      	movs	r3, #0
 810bd7c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810bd7e:	693b      	ldr	r3, [r7, #16]
 810bd80:	2b00      	cmp	r3, #0
 810bd82:	d103      	bne.n	810bd8c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810bd84:	f06f 0303 	mvn.w	r3, #3
 810bd88:	617b      	str	r3, [r7, #20]
 810bd8a:	e039      	b.n	810be00 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bd8c:	f3ef 8305 	mrs	r3, IPSR
 810bd90:	60fb      	str	r3, [r7, #12]
  return(result);
 810bd92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810bd94:	2b00      	cmp	r3, #0
 810bd96:	d022      	beq.n	810bdde <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810bd98:	683b      	ldr	r3, [r7, #0]
 810bd9a:	2b00      	cmp	r3, #0
 810bd9c:	d003      	beq.n	810bda6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810bd9e:	f06f 0303 	mvn.w	r3, #3
 810bda2:	617b      	str	r3, [r7, #20]
 810bda4:	e02c      	b.n	810be00 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810bda6:	2300      	movs	r3, #0
 810bda8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810bdaa:	f107 0308 	add.w	r3, r7, #8
 810bdae:	461a      	mov	r2, r3
 810bdb0:	2100      	movs	r1, #0
 810bdb2:	6938      	ldr	r0, [r7, #16]
 810bdb4:	f001 fb70 	bl	810d498 <xQueueReceiveFromISR>
 810bdb8:	4603      	mov	r3, r0
 810bdba:	2b01      	cmp	r3, #1
 810bdbc:	d003      	beq.n	810bdc6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810bdbe:	f06f 0302 	mvn.w	r3, #2
 810bdc2:	617b      	str	r3, [r7, #20]
 810bdc4:	e01c      	b.n	810be00 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810bdc6:	68bb      	ldr	r3, [r7, #8]
 810bdc8:	2b00      	cmp	r3, #0
 810bdca:	d019      	beq.n	810be00 <osSemaphoreAcquire+0x94>
 810bdcc:	4b0f      	ldr	r3, [pc, #60]	@ (810be0c <osSemaphoreAcquire+0xa0>)
 810bdce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810bdd2:	601a      	str	r2, [r3, #0]
 810bdd4:	f3bf 8f4f 	dsb	sy
 810bdd8:	f3bf 8f6f 	isb	sy
 810bddc:	e010      	b.n	810be00 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810bdde:	6839      	ldr	r1, [r7, #0]
 810bde0:	6938      	ldr	r0, [r7, #16]
 810bde2:	f001 fa49 	bl	810d278 <xQueueSemaphoreTake>
 810bde6:	4603      	mov	r3, r0
 810bde8:	2b01      	cmp	r3, #1
 810bdea:	d009      	beq.n	810be00 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810bdec:	683b      	ldr	r3, [r7, #0]
 810bdee:	2b00      	cmp	r3, #0
 810bdf0:	d003      	beq.n	810bdfa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810bdf2:	f06f 0301 	mvn.w	r3, #1
 810bdf6:	617b      	str	r3, [r7, #20]
 810bdf8:	e002      	b.n	810be00 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810bdfa:	f06f 0302 	mvn.w	r3, #2
 810bdfe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810be00:	697b      	ldr	r3, [r7, #20]
}
 810be02:	4618      	mov	r0, r3
 810be04:	3718      	adds	r7, #24
 810be06:	46bd      	mov	sp, r7
 810be08:	bd80      	pop	{r7, pc}
 810be0a:	bf00      	nop
 810be0c:	e000ed04 	.word	0xe000ed04

0810be10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810be10:	b580      	push	{r7, lr}
 810be12:	b086      	sub	sp, #24
 810be14:	af00      	add	r7, sp, #0
 810be16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810be18:	687b      	ldr	r3, [r7, #4]
 810be1a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810be1c:	2300      	movs	r3, #0
 810be1e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810be20:	693b      	ldr	r3, [r7, #16]
 810be22:	2b00      	cmp	r3, #0
 810be24:	d103      	bne.n	810be2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 810be26:	f06f 0303 	mvn.w	r3, #3
 810be2a:	617b      	str	r3, [r7, #20]
 810be2c:	e02c      	b.n	810be88 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810be2e:	f3ef 8305 	mrs	r3, IPSR
 810be32:	60fb      	str	r3, [r7, #12]
  return(result);
 810be34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810be36:	2b00      	cmp	r3, #0
 810be38:	d01a      	beq.n	810be70 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810be3a:	2300      	movs	r3, #0
 810be3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810be3e:	f107 0308 	add.w	r3, r7, #8
 810be42:	4619      	mov	r1, r3
 810be44:	6938      	ldr	r0, [r7, #16]
 810be46:	f001 f8a5 	bl	810cf94 <xQueueGiveFromISR>
 810be4a:	4603      	mov	r3, r0
 810be4c:	2b01      	cmp	r3, #1
 810be4e:	d003      	beq.n	810be58 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810be50:	f06f 0302 	mvn.w	r3, #2
 810be54:	617b      	str	r3, [r7, #20]
 810be56:	e017      	b.n	810be88 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 810be58:	68bb      	ldr	r3, [r7, #8]
 810be5a:	2b00      	cmp	r3, #0
 810be5c:	d014      	beq.n	810be88 <osSemaphoreRelease+0x78>
 810be5e:	4b0d      	ldr	r3, [pc, #52]	@ (810be94 <osSemaphoreRelease+0x84>)
 810be60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810be64:	601a      	str	r2, [r3, #0]
 810be66:	f3bf 8f4f 	dsb	sy
 810be6a:	f3bf 8f6f 	isb	sy
 810be6e:	e00b      	b.n	810be88 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810be70:	2300      	movs	r3, #0
 810be72:	2200      	movs	r2, #0
 810be74:	2100      	movs	r1, #0
 810be76:	6938      	ldr	r0, [r7, #16]
 810be78:	f000 feec 	bl	810cc54 <xQueueGenericSend>
 810be7c:	4603      	mov	r3, r0
 810be7e:	2b01      	cmp	r3, #1
 810be80:	d002      	beq.n	810be88 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810be82:	f06f 0302 	mvn.w	r3, #2
 810be86:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810be88:	697b      	ldr	r3, [r7, #20]
}
 810be8a:	4618      	mov	r0, r3
 810be8c:	3718      	adds	r7, #24
 810be8e:	46bd      	mov	sp, r7
 810be90:	bd80      	pop	{r7, pc}
 810be92:	bf00      	nop
 810be94:	e000ed04 	.word	0xe000ed04

0810be98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810be98:	b480      	push	{r7}
 810be9a:	b085      	sub	sp, #20
 810be9c:	af00      	add	r7, sp, #0
 810be9e:	60f8      	str	r0, [r7, #12]
 810bea0:	60b9      	str	r1, [r7, #8]
 810bea2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810bea4:	68fb      	ldr	r3, [r7, #12]
 810bea6:	4a07      	ldr	r2, [pc, #28]	@ (810bec4 <vApplicationGetIdleTaskMemory+0x2c>)
 810bea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810beaa:	68bb      	ldr	r3, [r7, #8]
 810beac:	4a06      	ldr	r2, [pc, #24]	@ (810bec8 <vApplicationGetIdleTaskMemory+0x30>)
 810beae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810beb0:	687b      	ldr	r3, [r7, #4]
 810beb2:	2280      	movs	r2, #128	@ 0x80
 810beb4:	601a      	str	r2, [r3, #0]
}
 810beb6:	bf00      	nop
 810beb8:	3714      	adds	r7, #20
 810beba:	46bd      	mov	sp, r7
 810bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bec0:	4770      	bx	lr
 810bec2:	bf00      	nop
 810bec4:	100005fc 	.word	0x100005fc
 810bec8:	10000658 	.word	0x10000658

0810becc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810becc:	b480      	push	{r7}
 810bece:	b085      	sub	sp, #20
 810bed0:	af00      	add	r7, sp, #0
 810bed2:	60f8      	str	r0, [r7, #12]
 810bed4:	60b9      	str	r1, [r7, #8]
 810bed6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810bed8:	68fb      	ldr	r3, [r7, #12]
 810beda:	4a07      	ldr	r2, [pc, #28]	@ (810bef8 <vApplicationGetTimerTaskMemory+0x2c>)
 810bedc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810bede:	68bb      	ldr	r3, [r7, #8]
 810bee0:	4a06      	ldr	r2, [pc, #24]	@ (810befc <vApplicationGetTimerTaskMemory+0x30>)
 810bee2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810bee4:	687b      	ldr	r3, [r7, #4]
 810bee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810beea:	601a      	str	r2, [r3, #0]
}
 810beec:	bf00      	nop
 810beee:	3714      	adds	r7, #20
 810bef0:	46bd      	mov	sp, r7
 810bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bef6:	4770      	bx	lr
 810bef8:	10000858 	.word	0x10000858
 810befc:	100008b4 	.word	0x100008b4

0810bf00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810bf00:	b580      	push	{r7, lr}
 810bf02:	b08a      	sub	sp, #40	@ 0x28
 810bf04:	af00      	add	r7, sp, #0
 810bf06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810bf08:	2300      	movs	r3, #0
 810bf0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810bf0c:	f001 ff5e 	bl	810ddcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810bf10:	4b5c      	ldr	r3, [pc, #368]	@ (810c084 <pvPortMalloc+0x184>)
 810bf12:	681b      	ldr	r3, [r3, #0]
 810bf14:	2b00      	cmp	r3, #0
 810bf16:	d101      	bne.n	810bf1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810bf18:	f000 f924 	bl	810c164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810bf1c:	4b5a      	ldr	r3, [pc, #360]	@ (810c088 <pvPortMalloc+0x188>)
 810bf1e:	681a      	ldr	r2, [r3, #0]
 810bf20:	687b      	ldr	r3, [r7, #4]
 810bf22:	4013      	ands	r3, r2
 810bf24:	2b00      	cmp	r3, #0
 810bf26:	f040 8095 	bne.w	810c054 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810bf2a:	687b      	ldr	r3, [r7, #4]
 810bf2c:	2b00      	cmp	r3, #0
 810bf2e:	d01e      	beq.n	810bf6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810bf30:	2208      	movs	r2, #8
 810bf32:	687b      	ldr	r3, [r7, #4]
 810bf34:	4413      	add	r3, r2
 810bf36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810bf38:	687b      	ldr	r3, [r7, #4]
 810bf3a:	f003 0307 	and.w	r3, r3, #7
 810bf3e:	2b00      	cmp	r3, #0
 810bf40:	d015      	beq.n	810bf6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810bf42:	687b      	ldr	r3, [r7, #4]
 810bf44:	f023 0307 	bic.w	r3, r3, #7
 810bf48:	3308      	adds	r3, #8
 810bf4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810bf4c:	687b      	ldr	r3, [r7, #4]
 810bf4e:	f003 0307 	and.w	r3, r3, #7
 810bf52:	2b00      	cmp	r3, #0
 810bf54:	d00b      	beq.n	810bf6e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bf5a:	f383 8811 	msr	BASEPRI, r3
 810bf5e:	f3bf 8f6f 	isb	sy
 810bf62:	f3bf 8f4f 	dsb	sy
 810bf66:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810bf68:	bf00      	nop
 810bf6a:	bf00      	nop
 810bf6c:	e7fd      	b.n	810bf6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810bf6e:	687b      	ldr	r3, [r7, #4]
 810bf70:	2b00      	cmp	r3, #0
 810bf72:	d06f      	beq.n	810c054 <pvPortMalloc+0x154>
 810bf74:	4b45      	ldr	r3, [pc, #276]	@ (810c08c <pvPortMalloc+0x18c>)
 810bf76:	681b      	ldr	r3, [r3, #0]
 810bf78:	687a      	ldr	r2, [r7, #4]
 810bf7a:	429a      	cmp	r2, r3
 810bf7c:	d86a      	bhi.n	810c054 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810bf7e:	4b44      	ldr	r3, [pc, #272]	@ (810c090 <pvPortMalloc+0x190>)
 810bf80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810bf82:	4b43      	ldr	r3, [pc, #268]	@ (810c090 <pvPortMalloc+0x190>)
 810bf84:	681b      	ldr	r3, [r3, #0]
 810bf86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810bf88:	e004      	b.n	810bf94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810bf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810bf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf90:	681b      	ldr	r3, [r3, #0]
 810bf92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf96:	685b      	ldr	r3, [r3, #4]
 810bf98:	687a      	ldr	r2, [r7, #4]
 810bf9a:	429a      	cmp	r2, r3
 810bf9c:	d903      	bls.n	810bfa6 <pvPortMalloc+0xa6>
 810bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bfa0:	681b      	ldr	r3, [r3, #0]
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	d1f1      	bne.n	810bf8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810bfa6:	4b37      	ldr	r3, [pc, #220]	@ (810c084 <pvPortMalloc+0x184>)
 810bfa8:	681b      	ldr	r3, [r3, #0]
 810bfaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bfac:	429a      	cmp	r2, r3
 810bfae:	d051      	beq.n	810c054 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810bfb0:	6a3b      	ldr	r3, [r7, #32]
 810bfb2:	681b      	ldr	r3, [r3, #0]
 810bfb4:	2208      	movs	r2, #8
 810bfb6:	4413      	add	r3, r2
 810bfb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bfbc:	681a      	ldr	r2, [r3, #0]
 810bfbe:	6a3b      	ldr	r3, [r7, #32]
 810bfc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810bfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bfc4:	685a      	ldr	r2, [r3, #4]
 810bfc6:	687b      	ldr	r3, [r7, #4]
 810bfc8:	1ad2      	subs	r2, r2, r3
 810bfca:	2308      	movs	r3, #8
 810bfcc:	005b      	lsls	r3, r3, #1
 810bfce:	429a      	cmp	r2, r3
 810bfd0:	d920      	bls.n	810c014 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810bfd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bfd4:	687b      	ldr	r3, [r7, #4]
 810bfd6:	4413      	add	r3, r2
 810bfd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810bfda:	69bb      	ldr	r3, [r7, #24]
 810bfdc:	f003 0307 	and.w	r3, r3, #7
 810bfe0:	2b00      	cmp	r3, #0
 810bfe2:	d00b      	beq.n	810bffc <pvPortMalloc+0xfc>
	__asm volatile
 810bfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bfe8:	f383 8811 	msr	BASEPRI, r3
 810bfec:	f3bf 8f6f 	isb	sy
 810bff0:	f3bf 8f4f 	dsb	sy
 810bff4:	613b      	str	r3, [r7, #16]
}
 810bff6:	bf00      	nop
 810bff8:	bf00      	nop
 810bffa:	e7fd      	b.n	810bff8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bffe:	685a      	ldr	r2, [r3, #4]
 810c000:	687b      	ldr	r3, [r7, #4]
 810c002:	1ad2      	subs	r2, r2, r3
 810c004:	69bb      	ldr	r3, [r7, #24]
 810c006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c00a:	687a      	ldr	r2, [r7, #4]
 810c00c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810c00e:	69b8      	ldr	r0, [r7, #24]
 810c010:	f000 f90a 	bl	810c228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810c014:	4b1d      	ldr	r3, [pc, #116]	@ (810c08c <pvPortMalloc+0x18c>)
 810c016:	681a      	ldr	r2, [r3, #0]
 810c018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c01a:	685b      	ldr	r3, [r3, #4]
 810c01c:	1ad3      	subs	r3, r2, r3
 810c01e:	4a1b      	ldr	r2, [pc, #108]	@ (810c08c <pvPortMalloc+0x18c>)
 810c020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810c022:	4b1a      	ldr	r3, [pc, #104]	@ (810c08c <pvPortMalloc+0x18c>)
 810c024:	681a      	ldr	r2, [r3, #0]
 810c026:	4b1b      	ldr	r3, [pc, #108]	@ (810c094 <pvPortMalloc+0x194>)
 810c028:	681b      	ldr	r3, [r3, #0]
 810c02a:	429a      	cmp	r2, r3
 810c02c:	d203      	bcs.n	810c036 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810c02e:	4b17      	ldr	r3, [pc, #92]	@ (810c08c <pvPortMalloc+0x18c>)
 810c030:	681b      	ldr	r3, [r3, #0]
 810c032:	4a18      	ldr	r2, [pc, #96]	@ (810c094 <pvPortMalloc+0x194>)
 810c034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810c036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c038:	685a      	ldr	r2, [r3, #4]
 810c03a:	4b13      	ldr	r3, [pc, #76]	@ (810c088 <pvPortMalloc+0x188>)
 810c03c:	681b      	ldr	r3, [r3, #0]
 810c03e:	431a      	orrs	r2, r3
 810c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c046:	2200      	movs	r2, #0
 810c048:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810c04a:	4b13      	ldr	r3, [pc, #76]	@ (810c098 <pvPortMalloc+0x198>)
 810c04c:	681b      	ldr	r3, [r3, #0]
 810c04e:	3301      	adds	r3, #1
 810c050:	4a11      	ldr	r2, [pc, #68]	@ (810c098 <pvPortMalloc+0x198>)
 810c052:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810c054:	f001 fec8 	bl	810dde8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810c058:	69fb      	ldr	r3, [r7, #28]
 810c05a:	f003 0307 	and.w	r3, r3, #7
 810c05e:	2b00      	cmp	r3, #0
 810c060:	d00b      	beq.n	810c07a <pvPortMalloc+0x17a>
	__asm volatile
 810c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c066:	f383 8811 	msr	BASEPRI, r3
 810c06a:	f3bf 8f6f 	isb	sy
 810c06e:	f3bf 8f4f 	dsb	sy
 810c072:	60fb      	str	r3, [r7, #12]
}
 810c074:	bf00      	nop
 810c076:	bf00      	nop
 810c078:	e7fd      	b.n	810c076 <pvPortMalloc+0x176>
	return pvReturn;
 810c07a:	69fb      	ldr	r3, [r7, #28]
}
 810c07c:	4618      	mov	r0, r3
 810c07e:	3728      	adds	r7, #40	@ 0x28
 810c080:	46bd      	mov	sp, r7
 810c082:	bd80      	pop	{r7, pc}
 810c084:	100048bc 	.word	0x100048bc
 810c088:	100048d0 	.word	0x100048d0
 810c08c:	100048c0 	.word	0x100048c0
 810c090:	100048b4 	.word	0x100048b4
 810c094:	100048c4 	.word	0x100048c4
 810c098:	100048c8 	.word	0x100048c8

0810c09c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810c09c:	b580      	push	{r7, lr}
 810c09e:	b086      	sub	sp, #24
 810c0a0:	af00      	add	r7, sp, #0
 810c0a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810c0a4:	687b      	ldr	r3, [r7, #4]
 810c0a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810c0a8:	687b      	ldr	r3, [r7, #4]
 810c0aa:	2b00      	cmp	r3, #0
 810c0ac:	d04f      	beq.n	810c14e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810c0ae:	2308      	movs	r3, #8
 810c0b0:	425b      	negs	r3, r3
 810c0b2:	697a      	ldr	r2, [r7, #20]
 810c0b4:	4413      	add	r3, r2
 810c0b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810c0b8:	697b      	ldr	r3, [r7, #20]
 810c0ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810c0bc:	693b      	ldr	r3, [r7, #16]
 810c0be:	685a      	ldr	r2, [r3, #4]
 810c0c0:	4b25      	ldr	r3, [pc, #148]	@ (810c158 <vPortFree+0xbc>)
 810c0c2:	681b      	ldr	r3, [r3, #0]
 810c0c4:	4013      	ands	r3, r2
 810c0c6:	2b00      	cmp	r3, #0
 810c0c8:	d10b      	bne.n	810c0e2 <vPortFree+0x46>
	__asm volatile
 810c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c0ce:	f383 8811 	msr	BASEPRI, r3
 810c0d2:	f3bf 8f6f 	isb	sy
 810c0d6:	f3bf 8f4f 	dsb	sy
 810c0da:	60fb      	str	r3, [r7, #12]
}
 810c0dc:	bf00      	nop
 810c0de:	bf00      	nop
 810c0e0:	e7fd      	b.n	810c0de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810c0e2:	693b      	ldr	r3, [r7, #16]
 810c0e4:	681b      	ldr	r3, [r3, #0]
 810c0e6:	2b00      	cmp	r3, #0
 810c0e8:	d00b      	beq.n	810c102 <vPortFree+0x66>
	__asm volatile
 810c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c0ee:	f383 8811 	msr	BASEPRI, r3
 810c0f2:	f3bf 8f6f 	isb	sy
 810c0f6:	f3bf 8f4f 	dsb	sy
 810c0fa:	60bb      	str	r3, [r7, #8]
}
 810c0fc:	bf00      	nop
 810c0fe:	bf00      	nop
 810c100:	e7fd      	b.n	810c0fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810c102:	693b      	ldr	r3, [r7, #16]
 810c104:	685a      	ldr	r2, [r3, #4]
 810c106:	4b14      	ldr	r3, [pc, #80]	@ (810c158 <vPortFree+0xbc>)
 810c108:	681b      	ldr	r3, [r3, #0]
 810c10a:	4013      	ands	r3, r2
 810c10c:	2b00      	cmp	r3, #0
 810c10e:	d01e      	beq.n	810c14e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810c110:	693b      	ldr	r3, [r7, #16]
 810c112:	681b      	ldr	r3, [r3, #0]
 810c114:	2b00      	cmp	r3, #0
 810c116:	d11a      	bne.n	810c14e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810c118:	693b      	ldr	r3, [r7, #16]
 810c11a:	685a      	ldr	r2, [r3, #4]
 810c11c:	4b0e      	ldr	r3, [pc, #56]	@ (810c158 <vPortFree+0xbc>)
 810c11e:	681b      	ldr	r3, [r3, #0]
 810c120:	43db      	mvns	r3, r3
 810c122:	401a      	ands	r2, r3
 810c124:	693b      	ldr	r3, [r7, #16]
 810c126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810c128:	f001 fe50 	bl	810ddcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810c12c:	693b      	ldr	r3, [r7, #16]
 810c12e:	685a      	ldr	r2, [r3, #4]
 810c130:	4b0a      	ldr	r3, [pc, #40]	@ (810c15c <vPortFree+0xc0>)
 810c132:	681b      	ldr	r3, [r3, #0]
 810c134:	4413      	add	r3, r2
 810c136:	4a09      	ldr	r2, [pc, #36]	@ (810c15c <vPortFree+0xc0>)
 810c138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810c13a:	6938      	ldr	r0, [r7, #16]
 810c13c:	f000 f874 	bl	810c228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810c140:	4b07      	ldr	r3, [pc, #28]	@ (810c160 <vPortFree+0xc4>)
 810c142:	681b      	ldr	r3, [r3, #0]
 810c144:	3301      	adds	r3, #1
 810c146:	4a06      	ldr	r2, [pc, #24]	@ (810c160 <vPortFree+0xc4>)
 810c148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810c14a:	f001 fe4d 	bl	810dde8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810c14e:	bf00      	nop
 810c150:	3718      	adds	r7, #24
 810c152:	46bd      	mov	sp, r7
 810c154:	bd80      	pop	{r7, pc}
 810c156:	bf00      	nop
 810c158:	100048d0 	.word	0x100048d0
 810c15c:	100048c0 	.word	0x100048c0
 810c160:	100048cc 	.word	0x100048cc

0810c164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810c164:	b480      	push	{r7}
 810c166:	b085      	sub	sp, #20
 810c168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810c16a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810c16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810c170:	4b27      	ldr	r3, [pc, #156]	@ (810c210 <prvHeapInit+0xac>)
 810c172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810c174:	68fb      	ldr	r3, [r7, #12]
 810c176:	f003 0307 	and.w	r3, r3, #7
 810c17a:	2b00      	cmp	r3, #0
 810c17c:	d00c      	beq.n	810c198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810c17e:	68fb      	ldr	r3, [r7, #12]
 810c180:	3307      	adds	r3, #7
 810c182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c184:	68fb      	ldr	r3, [r7, #12]
 810c186:	f023 0307 	bic.w	r3, r3, #7
 810c18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810c18c:	68ba      	ldr	r2, [r7, #8]
 810c18e:	68fb      	ldr	r3, [r7, #12]
 810c190:	1ad3      	subs	r3, r2, r3
 810c192:	4a1f      	ldr	r2, [pc, #124]	@ (810c210 <prvHeapInit+0xac>)
 810c194:	4413      	add	r3, r2
 810c196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810c198:	68fb      	ldr	r3, [r7, #12]
 810c19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810c19c:	4a1d      	ldr	r2, [pc, #116]	@ (810c214 <prvHeapInit+0xb0>)
 810c19e:	687b      	ldr	r3, [r7, #4]
 810c1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810c1a2:	4b1c      	ldr	r3, [pc, #112]	@ (810c214 <prvHeapInit+0xb0>)
 810c1a4:	2200      	movs	r2, #0
 810c1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810c1a8:	687b      	ldr	r3, [r7, #4]
 810c1aa:	68ba      	ldr	r2, [r7, #8]
 810c1ac:	4413      	add	r3, r2
 810c1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810c1b0:	2208      	movs	r2, #8
 810c1b2:	68fb      	ldr	r3, [r7, #12]
 810c1b4:	1a9b      	subs	r3, r3, r2
 810c1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c1b8:	68fb      	ldr	r3, [r7, #12]
 810c1ba:	f023 0307 	bic.w	r3, r3, #7
 810c1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810c1c0:	68fb      	ldr	r3, [r7, #12]
 810c1c2:	4a15      	ldr	r2, [pc, #84]	@ (810c218 <prvHeapInit+0xb4>)
 810c1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810c1c6:	4b14      	ldr	r3, [pc, #80]	@ (810c218 <prvHeapInit+0xb4>)
 810c1c8:	681b      	ldr	r3, [r3, #0]
 810c1ca:	2200      	movs	r2, #0
 810c1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810c1ce:	4b12      	ldr	r3, [pc, #72]	@ (810c218 <prvHeapInit+0xb4>)
 810c1d0:	681b      	ldr	r3, [r3, #0]
 810c1d2:	2200      	movs	r2, #0
 810c1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810c1da:	683b      	ldr	r3, [r7, #0]
 810c1dc:	68fa      	ldr	r2, [r7, #12]
 810c1de:	1ad2      	subs	r2, r2, r3
 810c1e0:	683b      	ldr	r3, [r7, #0]
 810c1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810c1e4:	4b0c      	ldr	r3, [pc, #48]	@ (810c218 <prvHeapInit+0xb4>)
 810c1e6:	681a      	ldr	r2, [r3, #0]
 810c1e8:	683b      	ldr	r3, [r7, #0]
 810c1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c1ec:	683b      	ldr	r3, [r7, #0]
 810c1ee:	685b      	ldr	r3, [r3, #4]
 810c1f0:	4a0a      	ldr	r2, [pc, #40]	@ (810c21c <prvHeapInit+0xb8>)
 810c1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c1f4:	683b      	ldr	r3, [r7, #0]
 810c1f6:	685b      	ldr	r3, [r3, #4]
 810c1f8:	4a09      	ldr	r2, [pc, #36]	@ (810c220 <prvHeapInit+0xbc>)
 810c1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810c1fc:	4b09      	ldr	r3, [pc, #36]	@ (810c224 <prvHeapInit+0xc0>)
 810c1fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810c202:	601a      	str	r2, [r3, #0]
}
 810c204:	bf00      	nop
 810c206:	3714      	adds	r7, #20
 810c208:	46bd      	mov	sp, r7
 810c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c20e:	4770      	bx	lr
 810c210:	10000cb4 	.word	0x10000cb4
 810c214:	100048b4 	.word	0x100048b4
 810c218:	100048bc 	.word	0x100048bc
 810c21c:	100048c4 	.word	0x100048c4
 810c220:	100048c0 	.word	0x100048c0
 810c224:	100048d0 	.word	0x100048d0

0810c228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810c228:	b480      	push	{r7}
 810c22a:	b085      	sub	sp, #20
 810c22c:	af00      	add	r7, sp, #0
 810c22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810c230:	4b28      	ldr	r3, [pc, #160]	@ (810c2d4 <prvInsertBlockIntoFreeList+0xac>)
 810c232:	60fb      	str	r3, [r7, #12]
 810c234:	e002      	b.n	810c23c <prvInsertBlockIntoFreeList+0x14>
 810c236:	68fb      	ldr	r3, [r7, #12]
 810c238:	681b      	ldr	r3, [r3, #0]
 810c23a:	60fb      	str	r3, [r7, #12]
 810c23c:	68fb      	ldr	r3, [r7, #12]
 810c23e:	681b      	ldr	r3, [r3, #0]
 810c240:	687a      	ldr	r2, [r7, #4]
 810c242:	429a      	cmp	r2, r3
 810c244:	d8f7      	bhi.n	810c236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810c246:	68fb      	ldr	r3, [r7, #12]
 810c248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810c24a:	68fb      	ldr	r3, [r7, #12]
 810c24c:	685b      	ldr	r3, [r3, #4]
 810c24e:	68ba      	ldr	r2, [r7, #8]
 810c250:	4413      	add	r3, r2
 810c252:	687a      	ldr	r2, [r7, #4]
 810c254:	429a      	cmp	r2, r3
 810c256:	d108      	bne.n	810c26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810c258:	68fb      	ldr	r3, [r7, #12]
 810c25a:	685a      	ldr	r2, [r3, #4]
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	685b      	ldr	r3, [r3, #4]
 810c260:	441a      	add	r2, r3
 810c262:	68fb      	ldr	r3, [r7, #12]
 810c264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810c266:	68fb      	ldr	r3, [r7, #12]
 810c268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810c26a:	687b      	ldr	r3, [r7, #4]
 810c26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	685b      	ldr	r3, [r3, #4]
 810c272:	68ba      	ldr	r2, [r7, #8]
 810c274:	441a      	add	r2, r3
 810c276:	68fb      	ldr	r3, [r7, #12]
 810c278:	681b      	ldr	r3, [r3, #0]
 810c27a:	429a      	cmp	r2, r3
 810c27c:	d118      	bne.n	810c2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810c27e:	68fb      	ldr	r3, [r7, #12]
 810c280:	681a      	ldr	r2, [r3, #0]
 810c282:	4b15      	ldr	r3, [pc, #84]	@ (810c2d8 <prvInsertBlockIntoFreeList+0xb0>)
 810c284:	681b      	ldr	r3, [r3, #0]
 810c286:	429a      	cmp	r2, r3
 810c288:	d00d      	beq.n	810c2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810c28a:	687b      	ldr	r3, [r7, #4]
 810c28c:	685a      	ldr	r2, [r3, #4]
 810c28e:	68fb      	ldr	r3, [r7, #12]
 810c290:	681b      	ldr	r3, [r3, #0]
 810c292:	685b      	ldr	r3, [r3, #4]
 810c294:	441a      	add	r2, r3
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810c29a:	68fb      	ldr	r3, [r7, #12]
 810c29c:	681b      	ldr	r3, [r3, #0]
 810c29e:	681a      	ldr	r2, [r3, #0]
 810c2a0:	687b      	ldr	r3, [r7, #4]
 810c2a2:	601a      	str	r2, [r3, #0]
 810c2a4:	e008      	b.n	810c2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810c2a6:	4b0c      	ldr	r3, [pc, #48]	@ (810c2d8 <prvInsertBlockIntoFreeList+0xb0>)
 810c2a8:	681a      	ldr	r2, [r3, #0]
 810c2aa:	687b      	ldr	r3, [r7, #4]
 810c2ac:	601a      	str	r2, [r3, #0]
 810c2ae:	e003      	b.n	810c2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810c2b0:	68fb      	ldr	r3, [r7, #12]
 810c2b2:	681a      	ldr	r2, [r3, #0]
 810c2b4:	687b      	ldr	r3, [r7, #4]
 810c2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810c2b8:	68fa      	ldr	r2, [r7, #12]
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	429a      	cmp	r2, r3
 810c2be:	d002      	beq.n	810c2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810c2c0:	68fb      	ldr	r3, [r7, #12]
 810c2c2:	687a      	ldr	r2, [r7, #4]
 810c2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c2c6:	bf00      	nop
 810c2c8:	3714      	adds	r7, #20
 810c2ca:	46bd      	mov	sp, r7
 810c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2d0:	4770      	bx	lr
 810c2d2:	bf00      	nop
 810c2d4:	100048b4 	.word	0x100048b4
 810c2d8:	100048bc 	.word	0x100048bc

0810c2dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810c2dc:	b480      	push	{r7}
 810c2de:	b083      	sub	sp, #12
 810c2e0:	af00      	add	r7, sp, #0
 810c2e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c2e4:	687b      	ldr	r3, [r7, #4]
 810c2e6:	f103 0208 	add.w	r2, r3, #8
 810c2ea:	687b      	ldr	r3, [r7, #4]
 810c2ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810c2ee:	687b      	ldr	r3, [r7, #4]
 810c2f0:	f04f 32ff 	mov.w	r2, #4294967295
 810c2f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c2f6:	687b      	ldr	r3, [r7, #4]
 810c2f8:	f103 0208 	add.w	r2, r3, #8
 810c2fc:	687b      	ldr	r3, [r7, #4]
 810c2fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	f103 0208 	add.w	r2, r3, #8
 810c306:	687b      	ldr	r3, [r7, #4]
 810c308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810c30a:	687b      	ldr	r3, [r7, #4]
 810c30c:	2200      	movs	r2, #0
 810c30e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810c310:	bf00      	nop
 810c312:	370c      	adds	r7, #12
 810c314:	46bd      	mov	sp, r7
 810c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c31a:	4770      	bx	lr

0810c31c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810c31c:	b480      	push	{r7}
 810c31e:	b083      	sub	sp, #12
 810c320:	af00      	add	r7, sp, #0
 810c322:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810c324:	687b      	ldr	r3, [r7, #4]
 810c326:	2200      	movs	r2, #0
 810c328:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810c32a:	bf00      	nop
 810c32c:	370c      	adds	r7, #12
 810c32e:	46bd      	mov	sp, r7
 810c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c334:	4770      	bx	lr

0810c336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c336:	b480      	push	{r7}
 810c338:	b085      	sub	sp, #20
 810c33a:	af00      	add	r7, sp, #0
 810c33c:	6078      	str	r0, [r7, #4]
 810c33e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810c340:	687b      	ldr	r3, [r7, #4]
 810c342:	685b      	ldr	r3, [r3, #4]
 810c344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810c346:	683b      	ldr	r3, [r7, #0]
 810c348:	68fa      	ldr	r2, [r7, #12]
 810c34a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810c34c:	68fb      	ldr	r3, [r7, #12]
 810c34e:	689a      	ldr	r2, [r3, #8]
 810c350:	683b      	ldr	r3, [r7, #0]
 810c352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810c354:	68fb      	ldr	r3, [r7, #12]
 810c356:	689b      	ldr	r3, [r3, #8]
 810c358:	683a      	ldr	r2, [r7, #0]
 810c35a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810c35c:	68fb      	ldr	r3, [r7, #12]
 810c35e:	683a      	ldr	r2, [r7, #0]
 810c360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810c362:	683b      	ldr	r3, [r7, #0]
 810c364:	687a      	ldr	r2, [r7, #4]
 810c366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c368:	687b      	ldr	r3, [r7, #4]
 810c36a:	681b      	ldr	r3, [r3, #0]
 810c36c:	1c5a      	adds	r2, r3, #1
 810c36e:	687b      	ldr	r3, [r7, #4]
 810c370:	601a      	str	r2, [r3, #0]
}
 810c372:	bf00      	nop
 810c374:	3714      	adds	r7, #20
 810c376:	46bd      	mov	sp, r7
 810c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c37c:	4770      	bx	lr

0810c37e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c37e:	b480      	push	{r7}
 810c380:	b085      	sub	sp, #20
 810c382:	af00      	add	r7, sp, #0
 810c384:	6078      	str	r0, [r7, #4]
 810c386:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810c388:	683b      	ldr	r3, [r7, #0]
 810c38a:	681b      	ldr	r3, [r3, #0]
 810c38c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810c38e:	68bb      	ldr	r3, [r7, #8]
 810c390:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c394:	d103      	bne.n	810c39e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	691b      	ldr	r3, [r3, #16]
 810c39a:	60fb      	str	r3, [r7, #12]
 810c39c:	e00c      	b.n	810c3b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810c39e:	687b      	ldr	r3, [r7, #4]
 810c3a0:	3308      	adds	r3, #8
 810c3a2:	60fb      	str	r3, [r7, #12]
 810c3a4:	e002      	b.n	810c3ac <vListInsert+0x2e>
 810c3a6:	68fb      	ldr	r3, [r7, #12]
 810c3a8:	685b      	ldr	r3, [r3, #4]
 810c3aa:	60fb      	str	r3, [r7, #12]
 810c3ac:	68fb      	ldr	r3, [r7, #12]
 810c3ae:	685b      	ldr	r3, [r3, #4]
 810c3b0:	681b      	ldr	r3, [r3, #0]
 810c3b2:	68ba      	ldr	r2, [r7, #8]
 810c3b4:	429a      	cmp	r2, r3
 810c3b6:	d2f6      	bcs.n	810c3a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810c3b8:	68fb      	ldr	r3, [r7, #12]
 810c3ba:	685a      	ldr	r2, [r3, #4]
 810c3bc:	683b      	ldr	r3, [r7, #0]
 810c3be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810c3c0:	683b      	ldr	r3, [r7, #0]
 810c3c2:	685b      	ldr	r3, [r3, #4]
 810c3c4:	683a      	ldr	r2, [r7, #0]
 810c3c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810c3c8:	683b      	ldr	r3, [r7, #0]
 810c3ca:	68fa      	ldr	r2, [r7, #12]
 810c3cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810c3ce:	68fb      	ldr	r3, [r7, #12]
 810c3d0:	683a      	ldr	r2, [r7, #0]
 810c3d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810c3d4:	683b      	ldr	r3, [r7, #0]
 810c3d6:	687a      	ldr	r2, [r7, #4]
 810c3d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c3da:	687b      	ldr	r3, [r7, #4]
 810c3dc:	681b      	ldr	r3, [r3, #0]
 810c3de:	1c5a      	adds	r2, r3, #1
 810c3e0:	687b      	ldr	r3, [r7, #4]
 810c3e2:	601a      	str	r2, [r3, #0]
}
 810c3e4:	bf00      	nop
 810c3e6:	3714      	adds	r7, #20
 810c3e8:	46bd      	mov	sp, r7
 810c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3ee:	4770      	bx	lr

0810c3f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810c3f0:	b480      	push	{r7}
 810c3f2:	b085      	sub	sp, #20
 810c3f4:	af00      	add	r7, sp, #0
 810c3f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810c3f8:	687b      	ldr	r3, [r7, #4]
 810c3fa:	691b      	ldr	r3, [r3, #16]
 810c3fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	685b      	ldr	r3, [r3, #4]
 810c402:	687a      	ldr	r2, [r7, #4]
 810c404:	6892      	ldr	r2, [r2, #8]
 810c406:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810c408:	687b      	ldr	r3, [r7, #4]
 810c40a:	689b      	ldr	r3, [r3, #8]
 810c40c:	687a      	ldr	r2, [r7, #4]
 810c40e:	6852      	ldr	r2, [r2, #4]
 810c410:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810c412:	68fb      	ldr	r3, [r7, #12]
 810c414:	685b      	ldr	r3, [r3, #4]
 810c416:	687a      	ldr	r2, [r7, #4]
 810c418:	429a      	cmp	r2, r3
 810c41a:	d103      	bne.n	810c424 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810c41c:	687b      	ldr	r3, [r7, #4]
 810c41e:	689a      	ldr	r2, [r3, #8]
 810c420:	68fb      	ldr	r3, [r7, #12]
 810c422:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810c424:	687b      	ldr	r3, [r7, #4]
 810c426:	2200      	movs	r2, #0
 810c428:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810c42a:	68fb      	ldr	r3, [r7, #12]
 810c42c:	681b      	ldr	r3, [r3, #0]
 810c42e:	1e5a      	subs	r2, r3, #1
 810c430:	68fb      	ldr	r3, [r7, #12]
 810c432:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810c434:	68fb      	ldr	r3, [r7, #12]
 810c436:	681b      	ldr	r3, [r3, #0]
}
 810c438:	4618      	mov	r0, r3
 810c43a:	3714      	adds	r7, #20
 810c43c:	46bd      	mov	sp, r7
 810c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c442:	4770      	bx	lr

0810c444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810c444:	b480      	push	{r7}
 810c446:	b085      	sub	sp, #20
 810c448:	af00      	add	r7, sp, #0
 810c44a:	60f8      	str	r0, [r7, #12]
 810c44c:	60b9      	str	r1, [r7, #8]
 810c44e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810c450:	68fb      	ldr	r3, [r7, #12]
 810c452:	3b04      	subs	r3, #4
 810c454:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810c456:	68fb      	ldr	r3, [r7, #12]
 810c458:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810c45c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c45e:	68fb      	ldr	r3, [r7, #12]
 810c460:	3b04      	subs	r3, #4
 810c462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810c464:	68bb      	ldr	r3, [r7, #8]
 810c466:	f023 0201 	bic.w	r2, r3, #1
 810c46a:	68fb      	ldr	r3, [r7, #12]
 810c46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c46e:	68fb      	ldr	r3, [r7, #12]
 810c470:	3b04      	subs	r3, #4
 810c472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810c474:	4a0c      	ldr	r2, [pc, #48]	@ (810c4a8 <pxPortInitialiseStack+0x64>)
 810c476:	68fb      	ldr	r3, [r7, #12]
 810c478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810c47a:	68fb      	ldr	r3, [r7, #12]
 810c47c:	3b14      	subs	r3, #20
 810c47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810c480:	687a      	ldr	r2, [r7, #4]
 810c482:	68fb      	ldr	r3, [r7, #12]
 810c484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810c486:	68fb      	ldr	r3, [r7, #12]
 810c488:	3b04      	subs	r3, #4
 810c48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810c48c:	68fb      	ldr	r3, [r7, #12]
 810c48e:	f06f 0202 	mvn.w	r2, #2
 810c492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810c494:	68fb      	ldr	r3, [r7, #12]
 810c496:	3b20      	subs	r3, #32
 810c498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810c49a:	68fb      	ldr	r3, [r7, #12]
}
 810c49c:	4618      	mov	r0, r3
 810c49e:	3714      	adds	r7, #20
 810c4a0:	46bd      	mov	sp, r7
 810c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4a6:	4770      	bx	lr
 810c4a8:	0810c4ad 	.word	0x0810c4ad

0810c4ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810c4ac:	b480      	push	{r7}
 810c4ae:	b085      	sub	sp, #20
 810c4b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810c4b2:	2300      	movs	r3, #0
 810c4b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810c4b6:	4b13      	ldr	r3, [pc, #76]	@ (810c504 <prvTaskExitError+0x58>)
 810c4b8:	681b      	ldr	r3, [r3, #0]
 810c4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c4be:	d00b      	beq.n	810c4d8 <prvTaskExitError+0x2c>
	__asm volatile
 810c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4c4:	f383 8811 	msr	BASEPRI, r3
 810c4c8:	f3bf 8f6f 	isb	sy
 810c4cc:	f3bf 8f4f 	dsb	sy
 810c4d0:	60fb      	str	r3, [r7, #12]
}
 810c4d2:	bf00      	nop
 810c4d4:	bf00      	nop
 810c4d6:	e7fd      	b.n	810c4d4 <prvTaskExitError+0x28>
	__asm volatile
 810c4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4dc:	f383 8811 	msr	BASEPRI, r3
 810c4e0:	f3bf 8f6f 	isb	sy
 810c4e4:	f3bf 8f4f 	dsb	sy
 810c4e8:	60bb      	str	r3, [r7, #8]
}
 810c4ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810c4ec:	bf00      	nop
 810c4ee:	687b      	ldr	r3, [r7, #4]
 810c4f0:	2b00      	cmp	r3, #0
 810c4f2:	d0fc      	beq.n	810c4ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810c4f4:	bf00      	nop
 810c4f6:	bf00      	nop
 810c4f8:	3714      	adds	r7, #20
 810c4fa:	46bd      	mov	sp, r7
 810c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c500:	4770      	bx	lr
 810c502:	bf00      	nop
 810c504:	10000010 	.word	0x10000010
	...

0810c510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810c510:	4b07      	ldr	r3, [pc, #28]	@ (810c530 <pxCurrentTCBConst2>)
 810c512:	6819      	ldr	r1, [r3, #0]
 810c514:	6808      	ldr	r0, [r1, #0]
 810c516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c51a:	f380 8809 	msr	PSP, r0
 810c51e:	f3bf 8f6f 	isb	sy
 810c522:	f04f 0000 	mov.w	r0, #0
 810c526:	f380 8811 	msr	BASEPRI, r0
 810c52a:	4770      	bx	lr
 810c52c:	f3af 8000 	nop.w

0810c530 <pxCurrentTCBConst2>:
 810c530:	1000491c 	.word	0x1000491c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810c534:	bf00      	nop
 810c536:	bf00      	nop

0810c538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810c538:	4808      	ldr	r0, [pc, #32]	@ (810c55c <prvPortStartFirstTask+0x24>)
 810c53a:	6800      	ldr	r0, [r0, #0]
 810c53c:	6800      	ldr	r0, [r0, #0]
 810c53e:	f380 8808 	msr	MSP, r0
 810c542:	f04f 0000 	mov.w	r0, #0
 810c546:	f380 8814 	msr	CONTROL, r0
 810c54a:	b662      	cpsie	i
 810c54c:	b661      	cpsie	f
 810c54e:	f3bf 8f4f 	dsb	sy
 810c552:	f3bf 8f6f 	isb	sy
 810c556:	df00      	svc	0
 810c558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810c55a:	bf00      	nop
 810c55c:	e000ed08 	.word	0xe000ed08

0810c560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810c560:	b580      	push	{r7, lr}
 810c562:	b086      	sub	sp, #24
 810c564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810c566:	4b47      	ldr	r3, [pc, #284]	@ (810c684 <xPortStartScheduler+0x124>)
 810c568:	681b      	ldr	r3, [r3, #0]
 810c56a:	4a47      	ldr	r2, [pc, #284]	@ (810c688 <xPortStartScheduler+0x128>)
 810c56c:	4293      	cmp	r3, r2
 810c56e:	d10b      	bne.n	810c588 <xPortStartScheduler+0x28>
	__asm volatile
 810c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c574:	f383 8811 	msr	BASEPRI, r3
 810c578:	f3bf 8f6f 	isb	sy
 810c57c:	f3bf 8f4f 	dsb	sy
 810c580:	613b      	str	r3, [r7, #16]
}
 810c582:	bf00      	nop
 810c584:	bf00      	nop
 810c586:	e7fd      	b.n	810c584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810c588:	4b3e      	ldr	r3, [pc, #248]	@ (810c684 <xPortStartScheduler+0x124>)
 810c58a:	681b      	ldr	r3, [r3, #0]
 810c58c:	4a3f      	ldr	r2, [pc, #252]	@ (810c68c <xPortStartScheduler+0x12c>)
 810c58e:	4293      	cmp	r3, r2
 810c590:	d10b      	bne.n	810c5aa <xPortStartScheduler+0x4a>
	__asm volatile
 810c592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c596:	f383 8811 	msr	BASEPRI, r3
 810c59a:	f3bf 8f6f 	isb	sy
 810c59e:	f3bf 8f4f 	dsb	sy
 810c5a2:	60fb      	str	r3, [r7, #12]
}
 810c5a4:	bf00      	nop
 810c5a6:	bf00      	nop
 810c5a8:	e7fd      	b.n	810c5a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810c5aa:	4b39      	ldr	r3, [pc, #228]	@ (810c690 <xPortStartScheduler+0x130>)
 810c5ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810c5ae:	697b      	ldr	r3, [r7, #20]
 810c5b0:	781b      	ldrb	r3, [r3, #0]
 810c5b2:	b2db      	uxtb	r3, r3
 810c5b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810c5b6:	697b      	ldr	r3, [r7, #20]
 810c5b8:	22ff      	movs	r2, #255	@ 0xff
 810c5ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810c5bc:	697b      	ldr	r3, [r7, #20]
 810c5be:	781b      	ldrb	r3, [r3, #0]
 810c5c0:	b2db      	uxtb	r3, r3
 810c5c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810c5c4:	78fb      	ldrb	r3, [r7, #3]
 810c5c6:	b2db      	uxtb	r3, r3
 810c5c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810c5cc:	b2da      	uxtb	r2, r3
 810c5ce:	4b31      	ldr	r3, [pc, #196]	@ (810c694 <xPortStartScheduler+0x134>)
 810c5d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810c5d2:	4b31      	ldr	r3, [pc, #196]	@ (810c698 <xPortStartScheduler+0x138>)
 810c5d4:	2207      	movs	r2, #7
 810c5d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c5d8:	e009      	b.n	810c5ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810c5da:	4b2f      	ldr	r3, [pc, #188]	@ (810c698 <xPortStartScheduler+0x138>)
 810c5dc:	681b      	ldr	r3, [r3, #0]
 810c5de:	3b01      	subs	r3, #1
 810c5e0:	4a2d      	ldr	r2, [pc, #180]	@ (810c698 <xPortStartScheduler+0x138>)
 810c5e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810c5e4:	78fb      	ldrb	r3, [r7, #3]
 810c5e6:	b2db      	uxtb	r3, r3
 810c5e8:	005b      	lsls	r3, r3, #1
 810c5ea:	b2db      	uxtb	r3, r3
 810c5ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c5ee:	78fb      	ldrb	r3, [r7, #3]
 810c5f0:	b2db      	uxtb	r3, r3
 810c5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c5f6:	2b80      	cmp	r3, #128	@ 0x80
 810c5f8:	d0ef      	beq.n	810c5da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810c5fa:	4b27      	ldr	r3, [pc, #156]	@ (810c698 <xPortStartScheduler+0x138>)
 810c5fc:	681b      	ldr	r3, [r3, #0]
 810c5fe:	f1c3 0307 	rsb	r3, r3, #7
 810c602:	2b04      	cmp	r3, #4
 810c604:	d00b      	beq.n	810c61e <xPortStartScheduler+0xbe>
	__asm volatile
 810c606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c60a:	f383 8811 	msr	BASEPRI, r3
 810c60e:	f3bf 8f6f 	isb	sy
 810c612:	f3bf 8f4f 	dsb	sy
 810c616:	60bb      	str	r3, [r7, #8]
}
 810c618:	bf00      	nop
 810c61a:	bf00      	nop
 810c61c:	e7fd      	b.n	810c61a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810c61e:	4b1e      	ldr	r3, [pc, #120]	@ (810c698 <xPortStartScheduler+0x138>)
 810c620:	681b      	ldr	r3, [r3, #0]
 810c622:	021b      	lsls	r3, r3, #8
 810c624:	4a1c      	ldr	r2, [pc, #112]	@ (810c698 <xPortStartScheduler+0x138>)
 810c626:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810c628:	4b1b      	ldr	r3, [pc, #108]	@ (810c698 <xPortStartScheduler+0x138>)
 810c62a:	681b      	ldr	r3, [r3, #0]
 810c62c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810c630:	4a19      	ldr	r2, [pc, #100]	@ (810c698 <xPortStartScheduler+0x138>)
 810c632:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	b2da      	uxtb	r2, r3
 810c638:	697b      	ldr	r3, [r7, #20]
 810c63a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810c63c:	4b17      	ldr	r3, [pc, #92]	@ (810c69c <xPortStartScheduler+0x13c>)
 810c63e:	681b      	ldr	r3, [r3, #0]
 810c640:	4a16      	ldr	r2, [pc, #88]	@ (810c69c <xPortStartScheduler+0x13c>)
 810c642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810c646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810c648:	4b14      	ldr	r3, [pc, #80]	@ (810c69c <xPortStartScheduler+0x13c>)
 810c64a:	681b      	ldr	r3, [r3, #0]
 810c64c:	4a13      	ldr	r2, [pc, #76]	@ (810c69c <xPortStartScheduler+0x13c>)
 810c64e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810c652:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810c654:	f000 f8da 	bl	810c80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810c658:	4b11      	ldr	r3, [pc, #68]	@ (810c6a0 <xPortStartScheduler+0x140>)
 810c65a:	2200      	movs	r2, #0
 810c65c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810c65e:	f000 f8f9 	bl	810c854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810c662:	4b10      	ldr	r3, [pc, #64]	@ (810c6a4 <xPortStartScheduler+0x144>)
 810c664:	681b      	ldr	r3, [r3, #0]
 810c666:	4a0f      	ldr	r2, [pc, #60]	@ (810c6a4 <xPortStartScheduler+0x144>)
 810c668:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810c66c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810c66e:	f7ff ff63 	bl	810c538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810c672:	f001 fd21 	bl	810e0b8 <vTaskSwitchContext>
	prvTaskExitError();
 810c676:	f7ff ff19 	bl	810c4ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810c67a:	2300      	movs	r3, #0
}
 810c67c:	4618      	mov	r0, r3
 810c67e:	3718      	adds	r7, #24
 810c680:	46bd      	mov	sp, r7
 810c682:	bd80      	pop	{r7, pc}
 810c684:	e000ed00 	.word	0xe000ed00
 810c688:	410fc271 	.word	0x410fc271
 810c68c:	410fc270 	.word	0x410fc270
 810c690:	e000e400 	.word	0xe000e400
 810c694:	100048d4 	.word	0x100048d4
 810c698:	100048d8 	.word	0x100048d8
 810c69c:	e000ed20 	.word	0xe000ed20
 810c6a0:	10000010 	.word	0x10000010
 810c6a4:	e000ef34 	.word	0xe000ef34

0810c6a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810c6a8:	b480      	push	{r7}
 810c6aa:	b083      	sub	sp, #12
 810c6ac:	af00      	add	r7, sp, #0
	__asm volatile
 810c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6b2:	f383 8811 	msr	BASEPRI, r3
 810c6b6:	f3bf 8f6f 	isb	sy
 810c6ba:	f3bf 8f4f 	dsb	sy
 810c6be:	607b      	str	r3, [r7, #4]
}
 810c6c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810c6c2:	4b10      	ldr	r3, [pc, #64]	@ (810c704 <vPortEnterCritical+0x5c>)
 810c6c4:	681b      	ldr	r3, [r3, #0]
 810c6c6:	3301      	adds	r3, #1
 810c6c8:	4a0e      	ldr	r2, [pc, #56]	@ (810c704 <vPortEnterCritical+0x5c>)
 810c6ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810c6cc:	4b0d      	ldr	r3, [pc, #52]	@ (810c704 <vPortEnterCritical+0x5c>)
 810c6ce:	681b      	ldr	r3, [r3, #0]
 810c6d0:	2b01      	cmp	r3, #1
 810c6d2:	d110      	bne.n	810c6f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810c6d4:	4b0c      	ldr	r3, [pc, #48]	@ (810c708 <vPortEnterCritical+0x60>)
 810c6d6:	681b      	ldr	r3, [r3, #0]
 810c6d8:	b2db      	uxtb	r3, r3
 810c6da:	2b00      	cmp	r3, #0
 810c6dc:	d00b      	beq.n	810c6f6 <vPortEnterCritical+0x4e>
	__asm volatile
 810c6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6e2:	f383 8811 	msr	BASEPRI, r3
 810c6e6:	f3bf 8f6f 	isb	sy
 810c6ea:	f3bf 8f4f 	dsb	sy
 810c6ee:	603b      	str	r3, [r7, #0]
}
 810c6f0:	bf00      	nop
 810c6f2:	bf00      	nop
 810c6f4:	e7fd      	b.n	810c6f2 <vPortEnterCritical+0x4a>
	}
}
 810c6f6:	bf00      	nop
 810c6f8:	370c      	adds	r7, #12
 810c6fa:	46bd      	mov	sp, r7
 810c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c700:	4770      	bx	lr
 810c702:	bf00      	nop
 810c704:	10000010 	.word	0x10000010
 810c708:	e000ed04 	.word	0xe000ed04

0810c70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810c70c:	b480      	push	{r7}
 810c70e:	b083      	sub	sp, #12
 810c710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810c712:	4b12      	ldr	r3, [pc, #72]	@ (810c75c <vPortExitCritical+0x50>)
 810c714:	681b      	ldr	r3, [r3, #0]
 810c716:	2b00      	cmp	r3, #0
 810c718:	d10b      	bne.n	810c732 <vPortExitCritical+0x26>
	__asm volatile
 810c71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c71e:	f383 8811 	msr	BASEPRI, r3
 810c722:	f3bf 8f6f 	isb	sy
 810c726:	f3bf 8f4f 	dsb	sy
 810c72a:	607b      	str	r3, [r7, #4]
}
 810c72c:	bf00      	nop
 810c72e:	bf00      	nop
 810c730:	e7fd      	b.n	810c72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810c732:	4b0a      	ldr	r3, [pc, #40]	@ (810c75c <vPortExitCritical+0x50>)
 810c734:	681b      	ldr	r3, [r3, #0]
 810c736:	3b01      	subs	r3, #1
 810c738:	4a08      	ldr	r2, [pc, #32]	@ (810c75c <vPortExitCritical+0x50>)
 810c73a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810c73c:	4b07      	ldr	r3, [pc, #28]	@ (810c75c <vPortExitCritical+0x50>)
 810c73e:	681b      	ldr	r3, [r3, #0]
 810c740:	2b00      	cmp	r3, #0
 810c742:	d105      	bne.n	810c750 <vPortExitCritical+0x44>
 810c744:	2300      	movs	r3, #0
 810c746:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810c748:	683b      	ldr	r3, [r7, #0]
 810c74a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810c74e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810c750:	bf00      	nop
 810c752:	370c      	adds	r7, #12
 810c754:	46bd      	mov	sp, r7
 810c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c75a:	4770      	bx	lr
 810c75c:	10000010 	.word	0x10000010

0810c760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810c760:	f3ef 8009 	mrs	r0, PSP
 810c764:	f3bf 8f6f 	isb	sy
 810c768:	4b15      	ldr	r3, [pc, #84]	@ (810c7c0 <pxCurrentTCBConst>)
 810c76a:	681a      	ldr	r2, [r3, #0]
 810c76c:	f01e 0f10 	tst.w	lr, #16
 810c770:	bf08      	it	eq
 810c772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810c776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c77a:	6010      	str	r0, [r2, #0]
 810c77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810c780:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810c784:	f380 8811 	msr	BASEPRI, r0
 810c788:	f3bf 8f4f 	dsb	sy
 810c78c:	f3bf 8f6f 	isb	sy
 810c790:	f001 fc92 	bl	810e0b8 <vTaskSwitchContext>
 810c794:	f04f 0000 	mov.w	r0, #0
 810c798:	f380 8811 	msr	BASEPRI, r0
 810c79c:	bc09      	pop	{r0, r3}
 810c79e:	6819      	ldr	r1, [r3, #0]
 810c7a0:	6808      	ldr	r0, [r1, #0]
 810c7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c7a6:	f01e 0f10 	tst.w	lr, #16
 810c7aa:	bf08      	it	eq
 810c7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810c7b0:	f380 8809 	msr	PSP, r0
 810c7b4:	f3bf 8f6f 	isb	sy
 810c7b8:	4770      	bx	lr
 810c7ba:	bf00      	nop
 810c7bc:	f3af 8000 	nop.w

0810c7c0 <pxCurrentTCBConst>:
 810c7c0:	1000491c 	.word	0x1000491c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810c7c4:	bf00      	nop
 810c7c6:	bf00      	nop

0810c7c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810c7c8:	b580      	push	{r7, lr}
 810c7ca:	b082      	sub	sp, #8
 810c7cc:	af00      	add	r7, sp, #0
	__asm volatile
 810c7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7d2:	f383 8811 	msr	BASEPRI, r3
 810c7d6:	f3bf 8f6f 	isb	sy
 810c7da:	f3bf 8f4f 	dsb	sy
 810c7de:	607b      	str	r3, [r7, #4]
}
 810c7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810c7e2:	f001 fbaf 	bl	810df44 <xTaskIncrementTick>
 810c7e6:	4603      	mov	r3, r0
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d003      	beq.n	810c7f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810c7ec:	4b06      	ldr	r3, [pc, #24]	@ (810c808 <xPortSysTickHandler+0x40>)
 810c7ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c7f2:	601a      	str	r2, [r3, #0]
 810c7f4:	2300      	movs	r3, #0
 810c7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c7f8:	683b      	ldr	r3, [r7, #0]
 810c7fa:	f383 8811 	msr	BASEPRI, r3
}
 810c7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810c800:	bf00      	nop
 810c802:	3708      	adds	r7, #8
 810c804:	46bd      	mov	sp, r7
 810c806:	bd80      	pop	{r7, pc}
 810c808:	e000ed04 	.word	0xe000ed04

0810c80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810c80c:	b480      	push	{r7}
 810c80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810c810:	4b0b      	ldr	r3, [pc, #44]	@ (810c840 <vPortSetupTimerInterrupt+0x34>)
 810c812:	2200      	movs	r2, #0
 810c814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810c816:	4b0b      	ldr	r3, [pc, #44]	@ (810c844 <vPortSetupTimerInterrupt+0x38>)
 810c818:	2200      	movs	r2, #0
 810c81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810c81c:	4b0a      	ldr	r3, [pc, #40]	@ (810c848 <vPortSetupTimerInterrupt+0x3c>)
 810c81e:	681b      	ldr	r3, [r3, #0]
 810c820:	4a0a      	ldr	r2, [pc, #40]	@ (810c84c <vPortSetupTimerInterrupt+0x40>)
 810c822:	fba2 2303 	umull	r2, r3, r2, r3
 810c826:	099b      	lsrs	r3, r3, #6
 810c828:	4a09      	ldr	r2, [pc, #36]	@ (810c850 <vPortSetupTimerInterrupt+0x44>)
 810c82a:	3b01      	subs	r3, #1
 810c82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810c82e:	4b04      	ldr	r3, [pc, #16]	@ (810c840 <vPortSetupTimerInterrupt+0x34>)
 810c830:	2207      	movs	r2, #7
 810c832:	601a      	str	r2, [r3, #0]
}
 810c834:	bf00      	nop
 810c836:	46bd      	mov	sp, r7
 810c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c83c:	4770      	bx	lr
 810c83e:	bf00      	nop
 810c840:	e000e010 	.word	0xe000e010
 810c844:	e000e018 	.word	0xe000e018
 810c848:	10000004 	.word	0x10000004
 810c84c:	10624dd3 	.word	0x10624dd3
 810c850:	e000e014 	.word	0xe000e014

0810c854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810c854:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810c864 <vPortEnableVFP+0x10>
 810c858:	6801      	ldr	r1, [r0, #0]
 810c85a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810c85e:	6001      	str	r1, [r0, #0]
 810c860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810c862:	bf00      	nop
 810c864:	e000ed88 	.word	0xe000ed88

0810c868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810c868:	b480      	push	{r7}
 810c86a:	b085      	sub	sp, #20
 810c86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810c86e:	f3ef 8305 	mrs	r3, IPSR
 810c872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810c874:	68fb      	ldr	r3, [r7, #12]
 810c876:	2b0f      	cmp	r3, #15
 810c878:	d915      	bls.n	810c8a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810c87a:	4a18      	ldr	r2, [pc, #96]	@ (810c8dc <vPortValidateInterruptPriority+0x74>)
 810c87c:	68fb      	ldr	r3, [r7, #12]
 810c87e:	4413      	add	r3, r2
 810c880:	781b      	ldrb	r3, [r3, #0]
 810c882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810c884:	4b16      	ldr	r3, [pc, #88]	@ (810c8e0 <vPortValidateInterruptPriority+0x78>)
 810c886:	781b      	ldrb	r3, [r3, #0]
 810c888:	7afa      	ldrb	r2, [r7, #11]
 810c88a:	429a      	cmp	r2, r3
 810c88c:	d20b      	bcs.n	810c8a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c892:	f383 8811 	msr	BASEPRI, r3
 810c896:	f3bf 8f6f 	isb	sy
 810c89a:	f3bf 8f4f 	dsb	sy
 810c89e:	607b      	str	r3, [r7, #4]
}
 810c8a0:	bf00      	nop
 810c8a2:	bf00      	nop
 810c8a4:	e7fd      	b.n	810c8a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810c8a6:	4b0f      	ldr	r3, [pc, #60]	@ (810c8e4 <vPortValidateInterruptPriority+0x7c>)
 810c8a8:	681b      	ldr	r3, [r3, #0]
 810c8aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810c8ae:	4b0e      	ldr	r3, [pc, #56]	@ (810c8e8 <vPortValidateInterruptPriority+0x80>)
 810c8b0:	681b      	ldr	r3, [r3, #0]
 810c8b2:	429a      	cmp	r2, r3
 810c8b4:	d90b      	bls.n	810c8ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810c8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c8ba:	f383 8811 	msr	BASEPRI, r3
 810c8be:	f3bf 8f6f 	isb	sy
 810c8c2:	f3bf 8f4f 	dsb	sy
 810c8c6:	603b      	str	r3, [r7, #0]
}
 810c8c8:	bf00      	nop
 810c8ca:	bf00      	nop
 810c8cc:	e7fd      	b.n	810c8ca <vPortValidateInterruptPriority+0x62>
	}
 810c8ce:	bf00      	nop
 810c8d0:	3714      	adds	r7, #20
 810c8d2:	46bd      	mov	sp, r7
 810c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c8d8:	4770      	bx	lr
 810c8da:	bf00      	nop
 810c8dc:	e000e3f0 	.word	0xe000e3f0
 810c8e0:	100048d4 	.word	0x100048d4
 810c8e4:	e000ed0c 	.word	0xe000ed0c
 810c8e8:	100048d8 	.word	0x100048d8

0810c8ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810c8ec:	b580      	push	{r7, lr}
 810c8ee:	b084      	sub	sp, #16
 810c8f0:	af00      	add	r7, sp, #0
 810c8f2:	6078      	str	r0, [r7, #4]
 810c8f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810c8f6:	687b      	ldr	r3, [r7, #4]
 810c8f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810c8fa:	68fb      	ldr	r3, [r7, #12]
 810c8fc:	2b00      	cmp	r3, #0
 810c8fe:	d10b      	bne.n	810c918 <xQueueGenericReset+0x2c>
	__asm volatile
 810c900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c904:	f383 8811 	msr	BASEPRI, r3
 810c908:	f3bf 8f6f 	isb	sy
 810c90c:	f3bf 8f4f 	dsb	sy
 810c910:	60bb      	str	r3, [r7, #8]
}
 810c912:	bf00      	nop
 810c914:	bf00      	nop
 810c916:	e7fd      	b.n	810c914 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810c918:	f7ff fec6 	bl	810c6a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c91c:	68fb      	ldr	r3, [r7, #12]
 810c91e:	681a      	ldr	r2, [r3, #0]
 810c920:	68fb      	ldr	r3, [r7, #12]
 810c922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c924:	68f9      	ldr	r1, [r7, #12]
 810c926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c928:	fb01 f303 	mul.w	r3, r1, r3
 810c92c:	441a      	add	r2, r3
 810c92e:	68fb      	ldr	r3, [r7, #12]
 810c930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810c932:	68fb      	ldr	r3, [r7, #12]
 810c934:	2200      	movs	r2, #0
 810c936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810c938:	68fb      	ldr	r3, [r7, #12]
 810c93a:	681a      	ldr	r2, [r3, #0]
 810c93c:	68fb      	ldr	r3, [r7, #12]
 810c93e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c940:	68fb      	ldr	r3, [r7, #12]
 810c942:	681a      	ldr	r2, [r3, #0]
 810c944:	68fb      	ldr	r3, [r7, #12]
 810c946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c948:	3b01      	subs	r3, #1
 810c94a:	68f9      	ldr	r1, [r7, #12]
 810c94c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c94e:	fb01 f303 	mul.w	r3, r1, r3
 810c952:	441a      	add	r2, r3
 810c954:	68fb      	ldr	r3, [r7, #12]
 810c956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810c958:	68fb      	ldr	r3, [r7, #12]
 810c95a:	22ff      	movs	r2, #255	@ 0xff
 810c95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810c960:	68fb      	ldr	r3, [r7, #12]
 810c962:	22ff      	movs	r2, #255	@ 0xff
 810c964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810c968:	683b      	ldr	r3, [r7, #0]
 810c96a:	2b00      	cmp	r3, #0
 810c96c:	d114      	bne.n	810c998 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810c96e:	68fb      	ldr	r3, [r7, #12]
 810c970:	691b      	ldr	r3, [r3, #16]
 810c972:	2b00      	cmp	r3, #0
 810c974:	d01a      	beq.n	810c9ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810c976:	68fb      	ldr	r3, [r7, #12]
 810c978:	3310      	adds	r3, #16
 810c97a:	4618      	mov	r0, r3
 810c97c:	f001 fc4c 	bl	810e218 <xTaskRemoveFromEventList>
 810c980:	4603      	mov	r3, r0
 810c982:	2b00      	cmp	r3, #0
 810c984:	d012      	beq.n	810c9ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810c986:	4b0d      	ldr	r3, [pc, #52]	@ (810c9bc <xQueueGenericReset+0xd0>)
 810c988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c98c:	601a      	str	r2, [r3, #0]
 810c98e:	f3bf 8f4f 	dsb	sy
 810c992:	f3bf 8f6f 	isb	sy
 810c996:	e009      	b.n	810c9ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810c998:	68fb      	ldr	r3, [r7, #12]
 810c99a:	3310      	adds	r3, #16
 810c99c:	4618      	mov	r0, r3
 810c99e:	f7ff fc9d 	bl	810c2dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810c9a2:	68fb      	ldr	r3, [r7, #12]
 810c9a4:	3324      	adds	r3, #36	@ 0x24
 810c9a6:	4618      	mov	r0, r3
 810c9a8:	f7ff fc98 	bl	810c2dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810c9ac:	f7ff feae 	bl	810c70c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810c9b0:	2301      	movs	r3, #1
}
 810c9b2:	4618      	mov	r0, r3
 810c9b4:	3710      	adds	r7, #16
 810c9b6:	46bd      	mov	sp, r7
 810c9b8:	bd80      	pop	{r7, pc}
 810c9ba:	bf00      	nop
 810c9bc:	e000ed04 	.word	0xe000ed04

0810c9c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810c9c0:	b580      	push	{r7, lr}
 810c9c2:	b08e      	sub	sp, #56	@ 0x38
 810c9c4:	af02      	add	r7, sp, #8
 810c9c6:	60f8      	str	r0, [r7, #12]
 810c9c8:	60b9      	str	r1, [r7, #8]
 810c9ca:	607a      	str	r2, [r7, #4]
 810c9cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810c9ce:	68fb      	ldr	r3, [r7, #12]
 810c9d0:	2b00      	cmp	r3, #0
 810c9d2:	d10b      	bne.n	810c9ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810c9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9d8:	f383 8811 	msr	BASEPRI, r3
 810c9dc:	f3bf 8f6f 	isb	sy
 810c9e0:	f3bf 8f4f 	dsb	sy
 810c9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c9e6:	bf00      	nop
 810c9e8:	bf00      	nop
 810c9ea:	e7fd      	b.n	810c9e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810c9ec:	683b      	ldr	r3, [r7, #0]
 810c9ee:	2b00      	cmp	r3, #0
 810c9f0:	d10b      	bne.n	810ca0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810c9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9f6:	f383 8811 	msr	BASEPRI, r3
 810c9fa:	f3bf 8f6f 	isb	sy
 810c9fe:	f3bf 8f4f 	dsb	sy
 810ca02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ca04:	bf00      	nop
 810ca06:	bf00      	nop
 810ca08:	e7fd      	b.n	810ca06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ca0a:	687b      	ldr	r3, [r7, #4]
 810ca0c:	2b00      	cmp	r3, #0
 810ca0e:	d002      	beq.n	810ca16 <xQueueGenericCreateStatic+0x56>
 810ca10:	68bb      	ldr	r3, [r7, #8]
 810ca12:	2b00      	cmp	r3, #0
 810ca14:	d001      	beq.n	810ca1a <xQueueGenericCreateStatic+0x5a>
 810ca16:	2301      	movs	r3, #1
 810ca18:	e000      	b.n	810ca1c <xQueueGenericCreateStatic+0x5c>
 810ca1a:	2300      	movs	r3, #0
 810ca1c:	2b00      	cmp	r3, #0
 810ca1e:	d10b      	bne.n	810ca38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810ca20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca24:	f383 8811 	msr	BASEPRI, r3
 810ca28:	f3bf 8f6f 	isb	sy
 810ca2c:	f3bf 8f4f 	dsb	sy
 810ca30:	623b      	str	r3, [r7, #32]
}
 810ca32:	bf00      	nop
 810ca34:	bf00      	nop
 810ca36:	e7fd      	b.n	810ca34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	2b00      	cmp	r3, #0
 810ca3c:	d102      	bne.n	810ca44 <xQueueGenericCreateStatic+0x84>
 810ca3e:	68bb      	ldr	r3, [r7, #8]
 810ca40:	2b00      	cmp	r3, #0
 810ca42:	d101      	bne.n	810ca48 <xQueueGenericCreateStatic+0x88>
 810ca44:	2301      	movs	r3, #1
 810ca46:	e000      	b.n	810ca4a <xQueueGenericCreateStatic+0x8a>
 810ca48:	2300      	movs	r3, #0
 810ca4a:	2b00      	cmp	r3, #0
 810ca4c:	d10b      	bne.n	810ca66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca52:	f383 8811 	msr	BASEPRI, r3
 810ca56:	f3bf 8f6f 	isb	sy
 810ca5a:	f3bf 8f4f 	dsb	sy
 810ca5e:	61fb      	str	r3, [r7, #28]
}
 810ca60:	bf00      	nop
 810ca62:	bf00      	nop
 810ca64:	e7fd      	b.n	810ca62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810ca66:	2350      	movs	r3, #80	@ 0x50
 810ca68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810ca6a:	697b      	ldr	r3, [r7, #20]
 810ca6c:	2b50      	cmp	r3, #80	@ 0x50
 810ca6e:	d00b      	beq.n	810ca88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810ca70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca74:	f383 8811 	msr	BASEPRI, r3
 810ca78:	f3bf 8f6f 	isb	sy
 810ca7c:	f3bf 8f4f 	dsb	sy
 810ca80:	61bb      	str	r3, [r7, #24]
}
 810ca82:	bf00      	nop
 810ca84:	bf00      	nop
 810ca86:	e7fd      	b.n	810ca84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810ca88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810ca8a:	683b      	ldr	r3, [r7, #0]
 810ca8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810ca8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca90:	2b00      	cmp	r3, #0
 810ca92:	d00d      	beq.n	810cab0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810ca94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca96:	2201      	movs	r2, #1
 810ca98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810ca9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810caa2:	9300      	str	r3, [sp, #0]
 810caa4:	4613      	mov	r3, r2
 810caa6:	687a      	ldr	r2, [r7, #4]
 810caa8:	68b9      	ldr	r1, [r7, #8]
 810caaa:	68f8      	ldr	r0, [r7, #12]
 810caac:	f000 f840 	bl	810cb30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810cab2:	4618      	mov	r0, r3
 810cab4:	3730      	adds	r7, #48	@ 0x30
 810cab6:	46bd      	mov	sp, r7
 810cab8:	bd80      	pop	{r7, pc}

0810caba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810caba:	b580      	push	{r7, lr}
 810cabc:	b08a      	sub	sp, #40	@ 0x28
 810cabe:	af02      	add	r7, sp, #8
 810cac0:	60f8      	str	r0, [r7, #12]
 810cac2:	60b9      	str	r1, [r7, #8]
 810cac4:	4613      	mov	r3, r2
 810cac6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810cac8:	68fb      	ldr	r3, [r7, #12]
 810caca:	2b00      	cmp	r3, #0
 810cacc:	d10b      	bne.n	810cae6 <xQueueGenericCreate+0x2c>
	__asm volatile
 810cace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cad2:	f383 8811 	msr	BASEPRI, r3
 810cad6:	f3bf 8f6f 	isb	sy
 810cada:	f3bf 8f4f 	dsb	sy
 810cade:	613b      	str	r3, [r7, #16]
}
 810cae0:	bf00      	nop
 810cae2:	bf00      	nop
 810cae4:	e7fd      	b.n	810cae2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810cae6:	68fb      	ldr	r3, [r7, #12]
 810cae8:	68ba      	ldr	r2, [r7, #8]
 810caea:	fb02 f303 	mul.w	r3, r2, r3
 810caee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810caf0:	69fb      	ldr	r3, [r7, #28]
 810caf2:	3350      	adds	r3, #80	@ 0x50
 810caf4:	4618      	mov	r0, r3
 810caf6:	f7ff fa03 	bl	810bf00 <pvPortMalloc>
 810cafa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810cafc:	69bb      	ldr	r3, [r7, #24]
 810cafe:	2b00      	cmp	r3, #0
 810cb00:	d011      	beq.n	810cb26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810cb02:	69bb      	ldr	r3, [r7, #24]
 810cb04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cb06:	697b      	ldr	r3, [r7, #20]
 810cb08:	3350      	adds	r3, #80	@ 0x50
 810cb0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810cb0c:	69bb      	ldr	r3, [r7, #24]
 810cb0e:	2200      	movs	r2, #0
 810cb10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cb14:	79fa      	ldrb	r2, [r7, #7]
 810cb16:	69bb      	ldr	r3, [r7, #24]
 810cb18:	9300      	str	r3, [sp, #0]
 810cb1a:	4613      	mov	r3, r2
 810cb1c:	697a      	ldr	r2, [r7, #20]
 810cb1e:	68b9      	ldr	r1, [r7, #8]
 810cb20:	68f8      	ldr	r0, [r7, #12]
 810cb22:	f000 f805 	bl	810cb30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cb26:	69bb      	ldr	r3, [r7, #24]
	}
 810cb28:	4618      	mov	r0, r3
 810cb2a:	3720      	adds	r7, #32
 810cb2c:	46bd      	mov	sp, r7
 810cb2e:	bd80      	pop	{r7, pc}

0810cb30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810cb30:	b580      	push	{r7, lr}
 810cb32:	b084      	sub	sp, #16
 810cb34:	af00      	add	r7, sp, #0
 810cb36:	60f8      	str	r0, [r7, #12]
 810cb38:	60b9      	str	r1, [r7, #8]
 810cb3a:	607a      	str	r2, [r7, #4]
 810cb3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810cb3e:	68bb      	ldr	r3, [r7, #8]
 810cb40:	2b00      	cmp	r3, #0
 810cb42:	d103      	bne.n	810cb4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810cb44:	69bb      	ldr	r3, [r7, #24]
 810cb46:	69ba      	ldr	r2, [r7, #24]
 810cb48:	601a      	str	r2, [r3, #0]
 810cb4a:	e002      	b.n	810cb52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810cb4c:	69bb      	ldr	r3, [r7, #24]
 810cb4e:	687a      	ldr	r2, [r7, #4]
 810cb50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810cb52:	69bb      	ldr	r3, [r7, #24]
 810cb54:	68fa      	ldr	r2, [r7, #12]
 810cb56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810cb58:	69bb      	ldr	r3, [r7, #24]
 810cb5a:	68ba      	ldr	r2, [r7, #8]
 810cb5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810cb5e:	2101      	movs	r1, #1
 810cb60:	69b8      	ldr	r0, [r7, #24]
 810cb62:	f7ff fec3 	bl	810c8ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810cb66:	69bb      	ldr	r3, [r7, #24]
 810cb68:	78fa      	ldrb	r2, [r7, #3]
 810cb6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810cb6e:	bf00      	nop
 810cb70:	3710      	adds	r7, #16
 810cb72:	46bd      	mov	sp, r7
 810cb74:	bd80      	pop	{r7, pc}

0810cb76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810cb76:	b580      	push	{r7, lr}
 810cb78:	b08a      	sub	sp, #40	@ 0x28
 810cb7a:	af02      	add	r7, sp, #8
 810cb7c:	60f8      	str	r0, [r7, #12]
 810cb7e:	60b9      	str	r1, [r7, #8]
 810cb80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810cb82:	68fb      	ldr	r3, [r7, #12]
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d10b      	bne.n	810cba0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb8c:	f383 8811 	msr	BASEPRI, r3
 810cb90:	f3bf 8f6f 	isb	sy
 810cb94:	f3bf 8f4f 	dsb	sy
 810cb98:	61bb      	str	r3, [r7, #24]
}
 810cb9a:	bf00      	nop
 810cb9c:	bf00      	nop
 810cb9e:	e7fd      	b.n	810cb9c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810cba0:	68ba      	ldr	r2, [r7, #8]
 810cba2:	68fb      	ldr	r3, [r7, #12]
 810cba4:	429a      	cmp	r2, r3
 810cba6:	d90b      	bls.n	810cbc0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810cba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbac:	f383 8811 	msr	BASEPRI, r3
 810cbb0:	f3bf 8f6f 	isb	sy
 810cbb4:	f3bf 8f4f 	dsb	sy
 810cbb8:	617b      	str	r3, [r7, #20]
}
 810cbba:	bf00      	nop
 810cbbc:	bf00      	nop
 810cbbe:	e7fd      	b.n	810cbbc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810cbc0:	2302      	movs	r3, #2
 810cbc2:	9300      	str	r3, [sp, #0]
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	2200      	movs	r2, #0
 810cbc8:	2100      	movs	r1, #0
 810cbca:	68f8      	ldr	r0, [r7, #12]
 810cbcc:	f7ff fef8 	bl	810c9c0 <xQueueGenericCreateStatic>
 810cbd0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810cbd2:	69fb      	ldr	r3, [r7, #28]
 810cbd4:	2b00      	cmp	r3, #0
 810cbd6:	d002      	beq.n	810cbde <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810cbd8:	69fb      	ldr	r3, [r7, #28]
 810cbda:	68ba      	ldr	r2, [r7, #8]
 810cbdc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810cbde:	69fb      	ldr	r3, [r7, #28]
	}
 810cbe0:	4618      	mov	r0, r3
 810cbe2:	3720      	adds	r7, #32
 810cbe4:	46bd      	mov	sp, r7
 810cbe6:	bd80      	pop	{r7, pc}

0810cbe8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810cbe8:	b580      	push	{r7, lr}
 810cbea:	b086      	sub	sp, #24
 810cbec:	af00      	add	r7, sp, #0
 810cbee:	6078      	str	r0, [r7, #4]
 810cbf0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	2b00      	cmp	r3, #0
 810cbf6:	d10b      	bne.n	810cc10 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 810cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbfc:	f383 8811 	msr	BASEPRI, r3
 810cc00:	f3bf 8f6f 	isb	sy
 810cc04:	f3bf 8f4f 	dsb	sy
 810cc08:	613b      	str	r3, [r7, #16]
}
 810cc0a:	bf00      	nop
 810cc0c:	bf00      	nop
 810cc0e:	e7fd      	b.n	810cc0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810cc10:	683a      	ldr	r2, [r7, #0]
 810cc12:	687b      	ldr	r3, [r7, #4]
 810cc14:	429a      	cmp	r2, r3
 810cc16:	d90b      	bls.n	810cc30 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 810cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc1c:	f383 8811 	msr	BASEPRI, r3
 810cc20:	f3bf 8f6f 	isb	sy
 810cc24:	f3bf 8f4f 	dsb	sy
 810cc28:	60fb      	str	r3, [r7, #12]
}
 810cc2a:	bf00      	nop
 810cc2c:	bf00      	nop
 810cc2e:	e7fd      	b.n	810cc2c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810cc30:	2202      	movs	r2, #2
 810cc32:	2100      	movs	r1, #0
 810cc34:	6878      	ldr	r0, [r7, #4]
 810cc36:	f7ff ff40 	bl	810caba <xQueueGenericCreate>
 810cc3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810cc3c:	697b      	ldr	r3, [r7, #20]
 810cc3e:	2b00      	cmp	r3, #0
 810cc40:	d002      	beq.n	810cc48 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810cc42:	697b      	ldr	r3, [r7, #20]
 810cc44:	683a      	ldr	r2, [r7, #0]
 810cc46:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810cc48:	697b      	ldr	r3, [r7, #20]
	}
 810cc4a:	4618      	mov	r0, r3
 810cc4c:	3718      	adds	r7, #24
 810cc4e:	46bd      	mov	sp, r7
 810cc50:	bd80      	pop	{r7, pc}
	...

0810cc54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810cc54:	b580      	push	{r7, lr}
 810cc56:	b08e      	sub	sp, #56	@ 0x38
 810cc58:	af00      	add	r7, sp, #0
 810cc5a:	60f8      	str	r0, [r7, #12]
 810cc5c:	60b9      	str	r1, [r7, #8]
 810cc5e:	607a      	str	r2, [r7, #4]
 810cc60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810cc62:	2300      	movs	r3, #0
 810cc64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810cc66:	68fb      	ldr	r3, [r7, #12]
 810cc68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cc6c:	2b00      	cmp	r3, #0
 810cc6e:	d10b      	bne.n	810cc88 <xQueueGenericSend+0x34>
	__asm volatile
 810cc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc74:	f383 8811 	msr	BASEPRI, r3
 810cc78:	f3bf 8f6f 	isb	sy
 810cc7c:	f3bf 8f4f 	dsb	sy
 810cc80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810cc82:	bf00      	nop
 810cc84:	bf00      	nop
 810cc86:	e7fd      	b.n	810cc84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810cc88:	68bb      	ldr	r3, [r7, #8]
 810cc8a:	2b00      	cmp	r3, #0
 810cc8c:	d103      	bne.n	810cc96 <xQueueGenericSend+0x42>
 810cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cc92:	2b00      	cmp	r3, #0
 810cc94:	d101      	bne.n	810cc9a <xQueueGenericSend+0x46>
 810cc96:	2301      	movs	r3, #1
 810cc98:	e000      	b.n	810cc9c <xQueueGenericSend+0x48>
 810cc9a:	2300      	movs	r3, #0
 810cc9c:	2b00      	cmp	r3, #0
 810cc9e:	d10b      	bne.n	810ccb8 <xQueueGenericSend+0x64>
	__asm volatile
 810cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cca4:	f383 8811 	msr	BASEPRI, r3
 810cca8:	f3bf 8f6f 	isb	sy
 810ccac:	f3bf 8f4f 	dsb	sy
 810ccb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ccb2:	bf00      	nop
 810ccb4:	bf00      	nop
 810ccb6:	e7fd      	b.n	810ccb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ccb8:	683b      	ldr	r3, [r7, #0]
 810ccba:	2b02      	cmp	r3, #2
 810ccbc:	d103      	bne.n	810ccc6 <xQueueGenericSend+0x72>
 810ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ccc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ccc2:	2b01      	cmp	r3, #1
 810ccc4:	d101      	bne.n	810ccca <xQueueGenericSend+0x76>
 810ccc6:	2301      	movs	r3, #1
 810ccc8:	e000      	b.n	810cccc <xQueueGenericSend+0x78>
 810ccca:	2300      	movs	r3, #0
 810cccc:	2b00      	cmp	r3, #0
 810ccce:	d10b      	bne.n	810cce8 <xQueueGenericSend+0x94>
	__asm volatile
 810ccd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ccd4:	f383 8811 	msr	BASEPRI, r3
 810ccd8:	f3bf 8f6f 	isb	sy
 810ccdc:	f3bf 8f4f 	dsb	sy
 810cce0:	623b      	str	r3, [r7, #32]
}
 810cce2:	bf00      	nop
 810cce4:	bf00      	nop
 810cce6:	e7fd      	b.n	810cce4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810cce8:	f001 fc56 	bl	810e598 <xTaskGetSchedulerState>
 810ccec:	4603      	mov	r3, r0
 810ccee:	2b00      	cmp	r3, #0
 810ccf0:	d102      	bne.n	810ccf8 <xQueueGenericSend+0xa4>
 810ccf2:	687b      	ldr	r3, [r7, #4]
 810ccf4:	2b00      	cmp	r3, #0
 810ccf6:	d101      	bne.n	810ccfc <xQueueGenericSend+0xa8>
 810ccf8:	2301      	movs	r3, #1
 810ccfa:	e000      	b.n	810ccfe <xQueueGenericSend+0xaa>
 810ccfc:	2300      	movs	r3, #0
 810ccfe:	2b00      	cmp	r3, #0
 810cd00:	d10b      	bne.n	810cd1a <xQueueGenericSend+0xc6>
	__asm volatile
 810cd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd06:	f383 8811 	msr	BASEPRI, r3
 810cd0a:	f3bf 8f6f 	isb	sy
 810cd0e:	f3bf 8f4f 	dsb	sy
 810cd12:	61fb      	str	r3, [r7, #28]
}
 810cd14:	bf00      	nop
 810cd16:	bf00      	nop
 810cd18:	e7fd      	b.n	810cd16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810cd1a:	f7ff fcc5 	bl	810c6a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cd20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cd24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cd26:	429a      	cmp	r2, r3
 810cd28:	d302      	bcc.n	810cd30 <xQueueGenericSend+0xdc>
 810cd2a:	683b      	ldr	r3, [r7, #0]
 810cd2c:	2b02      	cmp	r3, #2
 810cd2e:	d129      	bne.n	810cd84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810cd30:	683a      	ldr	r2, [r7, #0]
 810cd32:	68b9      	ldr	r1, [r7, #8]
 810cd34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cd36:	f000 fc6d 	bl	810d614 <prvCopyDataToQueue>
 810cd3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810cd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cd40:	2b00      	cmp	r3, #0
 810cd42:	d010      	beq.n	810cd66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cd46:	3324      	adds	r3, #36	@ 0x24
 810cd48:	4618      	mov	r0, r3
 810cd4a:	f001 fa65 	bl	810e218 <xTaskRemoveFromEventList>
 810cd4e:	4603      	mov	r3, r0
 810cd50:	2b00      	cmp	r3, #0
 810cd52:	d013      	beq.n	810cd7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810cd54:	4b3f      	ldr	r3, [pc, #252]	@ (810ce54 <xQueueGenericSend+0x200>)
 810cd56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cd5a:	601a      	str	r2, [r3, #0]
 810cd5c:	f3bf 8f4f 	dsb	sy
 810cd60:	f3bf 8f6f 	isb	sy
 810cd64:	e00a      	b.n	810cd7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810cd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cd68:	2b00      	cmp	r3, #0
 810cd6a:	d007      	beq.n	810cd7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810cd6c:	4b39      	ldr	r3, [pc, #228]	@ (810ce54 <xQueueGenericSend+0x200>)
 810cd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cd72:	601a      	str	r2, [r3, #0]
 810cd74:	f3bf 8f4f 	dsb	sy
 810cd78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810cd7c:	f7ff fcc6 	bl	810c70c <vPortExitCritical>
				return pdPASS;
 810cd80:	2301      	movs	r3, #1
 810cd82:	e063      	b.n	810ce4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810cd84:	687b      	ldr	r3, [r7, #4]
 810cd86:	2b00      	cmp	r3, #0
 810cd88:	d103      	bne.n	810cd92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810cd8a:	f7ff fcbf 	bl	810c70c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810cd8e:	2300      	movs	r3, #0
 810cd90:	e05c      	b.n	810ce4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810cd92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cd94:	2b00      	cmp	r3, #0
 810cd96:	d106      	bne.n	810cda6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810cd98:	f107 0314 	add.w	r3, r7, #20
 810cd9c:	4618      	mov	r0, r3
 810cd9e:	f001 fa9f 	bl	810e2e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810cda2:	2301      	movs	r3, #1
 810cda4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810cda6:	f7ff fcb1 	bl	810c70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810cdaa:	f001 f80f 	bl	810ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810cdae:	f7ff fc7b 	bl	810c6a8 <vPortEnterCritical>
 810cdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cdb8:	b25b      	sxtb	r3, r3
 810cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cdbe:	d103      	bne.n	810cdc8 <xQueueGenericSend+0x174>
 810cdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdc2:	2200      	movs	r2, #0
 810cdc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cdce:	b25b      	sxtb	r3, r3
 810cdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cdd4:	d103      	bne.n	810cdde <xQueueGenericSend+0x18a>
 810cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdd8:	2200      	movs	r2, #0
 810cdda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cdde:	f7ff fc95 	bl	810c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810cde2:	1d3a      	adds	r2, r7, #4
 810cde4:	f107 0314 	add.w	r3, r7, #20
 810cde8:	4611      	mov	r1, r2
 810cdea:	4618      	mov	r0, r3
 810cdec:	f001 fa8e 	bl	810e30c <xTaskCheckForTimeOut>
 810cdf0:	4603      	mov	r3, r0
 810cdf2:	2b00      	cmp	r3, #0
 810cdf4:	d124      	bne.n	810ce40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810cdf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cdf8:	f000 fd04 	bl	810d804 <prvIsQueueFull>
 810cdfc:	4603      	mov	r3, r0
 810cdfe:	2b00      	cmp	r3, #0
 810ce00:	d018      	beq.n	810ce34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810ce02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ce04:	3310      	adds	r3, #16
 810ce06:	687a      	ldr	r2, [r7, #4]
 810ce08:	4611      	mov	r1, r2
 810ce0a:	4618      	mov	r0, r3
 810ce0c:	f001 f9b2 	bl	810e174 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810ce10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ce12:	f000 fc8f 	bl	810d734 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810ce16:	f000 ffe7 	bl	810dde8 <xTaskResumeAll>
 810ce1a:	4603      	mov	r3, r0
 810ce1c:	2b00      	cmp	r3, #0
 810ce1e:	f47f af7c 	bne.w	810cd1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810ce22:	4b0c      	ldr	r3, [pc, #48]	@ (810ce54 <xQueueGenericSend+0x200>)
 810ce24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ce28:	601a      	str	r2, [r3, #0]
 810ce2a:	f3bf 8f4f 	dsb	sy
 810ce2e:	f3bf 8f6f 	isb	sy
 810ce32:	e772      	b.n	810cd1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810ce34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ce36:	f000 fc7d 	bl	810d734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810ce3a:	f000 ffd5 	bl	810dde8 <xTaskResumeAll>
 810ce3e:	e76c      	b.n	810cd1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810ce40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ce42:	f000 fc77 	bl	810d734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810ce46:	f000 ffcf 	bl	810dde8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810ce4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810ce4c:	4618      	mov	r0, r3
 810ce4e:	3738      	adds	r7, #56	@ 0x38
 810ce50:	46bd      	mov	sp, r7
 810ce52:	bd80      	pop	{r7, pc}
 810ce54:	e000ed04 	.word	0xe000ed04

0810ce58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810ce58:	b580      	push	{r7, lr}
 810ce5a:	b090      	sub	sp, #64	@ 0x40
 810ce5c:	af00      	add	r7, sp, #0
 810ce5e:	60f8      	str	r0, [r7, #12]
 810ce60:	60b9      	str	r1, [r7, #8]
 810ce62:	607a      	str	r2, [r7, #4]
 810ce64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810ce66:	68fb      	ldr	r3, [r7, #12]
 810ce68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ce6c:	2b00      	cmp	r3, #0
 810ce6e:	d10b      	bne.n	810ce88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ce74:	f383 8811 	msr	BASEPRI, r3
 810ce78:	f3bf 8f6f 	isb	sy
 810ce7c:	f3bf 8f4f 	dsb	sy
 810ce80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ce82:	bf00      	nop
 810ce84:	bf00      	nop
 810ce86:	e7fd      	b.n	810ce84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810ce88:	68bb      	ldr	r3, [r7, #8]
 810ce8a:	2b00      	cmp	r3, #0
 810ce8c:	d103      	bne.n	810ce96 <xQueueGenericSendFromISR+0x3e>
 810ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ce90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ce92:	2b00      	cmp	r3, #0
 810ce94:	d101      	bne.n	810ce9a <xQueueGenericSendFromISR+0x42>
 810ce96:	2301      	movs	r3, #1
 810ce98:	e000      	b.n	810ce9c <xQueueGenericSendFromISR+0x44>
 810ce9a:	2300      	movs	r3, #0
 810ce9c:	2b00      	cmp	r3, #0
 810ce9e:	d10b      	bne.n	810ceb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810cea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cea4:	f383 8811 	msr	BASEPRI, r3
 810cea8:	f3bf 8f6f 	isb	sy
 810ceac:	f3bf 8f4f 	dsb	sy
 810ceb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ceb2:	bf00      	nop
 810ceb4:	bf00      	nop
 810ceb6:	e7fd      	b.n	810ceb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ceb8:	683b      	ldr	r3, [r7, #0]
 810ceba:	2b02      	cmp	r3, #2
 810cebc:	d103      	bne.n	810cec6 <xQueueGenericSendFromISR+0x6e>
 810cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cec2:	2b01      	cmp	r3, #1
 810cec4:	d101      	bne.n	810ceca <xQueueGenericSendFromISR+0x72>
 810cec6:	2301      	movs	r3, #1
 810cec8:	e000      	b.n	810cecc <xQueueGenericSendFromISR+0x74>
 810ceca:	2300      	movs	r3, #0
 810cecc:	2b00      	cmp	r3, #0
 810cece:	d10b      	bne.n	810cee8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810ced0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ced4:	f383 8811 	msr	BASEPRI, r3
 810ced8:	f3bf 8f6f 	isb	sy
 810cedc:	f3bf 8f4f 	dsb	sy
 810cee0:	623b      	str	r3, [r7, #32]
}
 810cee2:	bf00      	nop
 810cee4:	bf00      	nop
 810cee6:	e7fd      	b.n	810cee4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810cee8:	f7ff fcbe 	bl	810c868 <vPortValidateInterruptPriority>
	__asm volatile
 810ceec:	f3ef 8211 	mrs	r2, BASEPRI
 810cef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cef4:	f383 8811 	msr	BASEPRI, r3
 810cef8:	f3bf 8f6f 	isb	sy
 810cefc:	f3bf 8f4f 	dsb	sy
 810cf00:	61fa      	str	r2, [r7, #28]
 810cf02:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810cf04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810cf06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810cf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cf10:	429a      	cmp	r2, r3
 810cf12:	d302      	bcc.n	810cf1a <xQueueGenericSendFromISR+0xc2>
 810cf14:	683b      	ldr	r3, [r7, #0]
 810cf16:	2b02      	cmp	r3, #2
 810cf18:	d12f      	bne.n	810cf7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cf20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810cf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cf28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810cf2a:	683a      	ldr	r2, [r7, #0]
 810cf2c:	68b9      	ldr	r1, [r7, #8]
 810cf2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810cf30:	f000 fb70 	bl	810d614 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810cf34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810cf38:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf3c:	d112      	bne.n	810cf64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810cf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cf42:	2b00      	cmp	r3, #0
 810cf44:	d016      	beq.n	810cf74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf48:	3324      	adds	r3, #36	@ 0x24
 810cf4a:	4618      	mov	r0, r3
 810cf4c:	f001 f964 	bl	810e218 <xTaskRemoveFromEventList>
 810cf50:	4603      	mov	r3, r0
 810cf52:	2b00      	cmp	r3, #0
 810cf54:	d00e      	beq.n	810cf74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810cf56:	687b      	ldr	r3, [r7, #4]
 810cf58:	2b00      	cmp	r3, #0
 810cf5a:	d00b      	beq.n	810cf74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810cf5c:	687b      	ldr	r3, [r7, #4]
 810cf5e:	2201      	movs	r2, #1
 810cf60:	601a      	str	r2, [r3, #0]
 810cf62:	e007      	b.n	810cf74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810cf64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810cf68:	3301      	adds	r3, #1
 810cf6a:	b2db      	uxtb	r3, r3
 810cf6c:	b25a      	sxtb	r2, r3
 810cf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cf70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810cf74:	2301      	movs	r3, #1
 810cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810cf78:	e001      	b.n	810cf7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810cf7a:	2300      	movs	r3, #0
 810cf7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810cf7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cf80:	617b      	str	r3, [r7, #20]
	__asm volatile
 810cf82:	697b      	ldr	r3, [r7, #20]
 810cf84:	f383 8811 	msr	BASEPRI, r3
}
 810cf88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810cf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810cf8c:	4618      	mov	r0, r3
 810cf8e:	3740      	adds	r7, #64	@ 0x40
 810cf90:	46bd      	mov	sp, r7
 810cf92:	bd80      	pop	{r7, pc}

0810cf94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810cf94:	b580      	push	{r7, lr}
 810cf96:	b08e      	sub	sp, #56	@ 0x38
 810cf98:	af00      	add	r7, sp, #0
 810cf9a:	6078      	str	r0, [r7, #4]
 810cf9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810cf9e:	687b      	ldr	r3, [r7, #4]
 810cfa0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810cfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfa4:	2b00      	cmp	r3, #0
 810cfa6:	d10b      	bne.n	810cfc0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 810cfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cfac:	f383 8811 	msr	BASEPRI, r3
 810cfb0:	f3bf 8f6f 	isb	sy
 810cfb4:	f3bf 8f4f 	dsb	sy
 810cfb8:	623b      	str	r3, [r7, #32]
}
 810cfba:	bf00      	nop
 810cfbc:	bf00      	nop
 810cfbe:	e7fd      	b.n	810cfbc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810cfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cfc4:	2b00      	cmp	r3, #0
 810cfc6:	d00b      	beq.n	810cfe0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 810cfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cfcc:	f383 8811 	msr	BASEPRI, r3
 810cfd0:	f3bf 8f6f 	isb	sy
 810cfd4:	f3bf 8f4f 	dsb	sy
 810cfd8:	61fb      	str	r3, [r7, #28]
}
 810cfda:	bf00      	nop
 810cfdc:	bf00      	nop
 810cfde:	e7fd      	b.n	810cfdc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810cfe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfe2:	681b      	ldr	r3, [r3, #0]
 810cfe4:	2b00      	cmp	r3, #0
 810cfe6:	d103      	bne.n	810cff0 <xQueueGiveFromISR+0x5c>
 810cfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cfea:	689b      	ldr	r3, [r3, #8]
 810cfec:	2b00      	cmp	r3, #0
 810cfee:	d101      	bne.n	810cff4 <xQueueGiveFromISR+0x60>
 810cff0:	2301      	movs	r3, #1
 810cff2:	e000      	b.n	810cff6 <xQueueGiveFromISR+0x62>
 810cff4:	2300      	movs	r3, #0
 810cff6:	2b00      	cmp	r3, #0
 810cff8:	d10b      	bne.n	810d012 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810cffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cffe:	f383 8811 	msr	BASEPRI, r3
 810d002:	f3bf 8f6f 	isb	sy
 810d006:	f3bf 8f4f 	dsb	sy
 810d00a:	61bb      	str	r3, [r7, #24]
}
 810d00c:	bf00      	nop
 810d00e:	bf00      	nop
 810d010:	e7fd      	b.n	810d00e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d012:	f7ff fc29 	bl	810c868 <vPortValidateInterruptPriority>
	__asm volatile
 810d016:	f3ef 8211 	mrs	r2, BASEPRI
 810d01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d01e:	f383 8811 	msr	BASEPRI, r3
 810d022:	f3bf 8f6f 	isb	sy
 810d026:	f3bf 8f4f 	dsb	sy
 810d02a:	617a      	str	r2, [r7, #20]
 810d02c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810d02e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d030:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d036:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d03c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d03e:	429a      	cmp	r2, r3
 810d040:	d22b      	bcs.n	810d09a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d04e:	1c5a      	adds	r2, r3, #1
 810d050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d052:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d054:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810d058:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d05c:	d112      	bne.n	810d084 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d062:	2b00      	cmp	r3, #0
 810d064:	d016      	beq.n	810d094 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d068:	3324      	adds	r3, #36	@ 0x24
 810d06a:	4618      	mov	r0, r3
 810d06c:	f001 f8d4 	bl	810e218 <xTaskRemoveFromEventList>
 810d070:	4603      	mov	r3, r0
 810d072:	2b00      	cmp	r3, #0
 810d074:	d00e      	beq.n	810d094 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d076:	683b      	ldr	r3, [r7, #0]
 810d078:	2b00      	cmp	r3, #0
 810d07a:	d00b      	beq.n	810d094 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d07c:	683b      	ldr	r3, [r7, #0]
 810d07e:	2201      	movs	r2, #1
 810d080:	601a      	str	r2, [r3, #0]
 810d082:	e007      	b.n	810d094 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810d088:	3301      	adds	r3, #1
 810d08a:	b2db      	uxtb	r3, r3
 810d08c:	b25a      	sxtb	r2, r3
 810d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810d094:	2301      	movs	r3, #1
 810d096:	637b      	str	r3, [r7, #52]	@ 0x34
 810d098:	e001      	b.n	810d09e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d09a:	2300      	movs	r3, #0
 810d09c:	637b      	str	r3, [r7, #52]	@ 0x34
 810d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d0a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810d0a2:	68fb      	ldr	r3, [r7, #12]
 810d0a4:	f383 8811 	msr	BASEPRI, r3
}
 810d0a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810d0ac:	4618      	mov	r0, r3
 810d0ae:	3738      	adds	r7, #56	@ 0x38
 810d0b0:	46bd      	mov	sp, r7
 810d0b2:	bd80      	pop	{r7, pc}

0810d0b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810d0b4:	b580      	push	{r7, lr}
 810d0b6:	b08c      	sub	sp, #48	@ 0x30
 810d0b8:	af00      	add	r7, sp, #0
 810d0ba:	60f8      	str	r0, [r7, #12]
 810d0bc:	60b9      	str	r1, [r7, #8]
 810d0be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810d0c0:	2300      	movs	r3, #0
 810d0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d0c4:	68fb      	ldr	r3, [r7, #12]
 810d0c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d0ca:	2b00      	cmp	r3, #0
 810d0cc:	d10b      	bne.n	810d0e6 <xQueueReceive+0x32>
	__asm volatile
 810d0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0d2:	f383 8811 	msr	BASEPRI, r3
 810d0d6:	f3bf 8f6f 	isb	sy
 810d0da:	f3bf 8f4f 	dsb	sy
 810d0de:	623b      	str	r3, [r7, #32]
}
 810d0e0:	bf00      	nop
 810d0e2:	bf00      	nop
 810d0e4:	e7fd      	b.n	810d0e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d0e6:	68bb      	ldr	r3, [r7, #8]
 810d0e8:	2b00      	cmp	r3, #0
 810d0ea:	d103      	bne.n	810d0f4 <xQueueReceive+0x40>
 810d0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d0f0:	2b00      	cmp	r3, #0
 810d0f2:	d101      	bne.n	810d0f8 <xQueueReceive+0x44>
 810d0f4:	2301      	movs	r3, #1
 810d0f6:	e000      	b.n	810d0fa <xQueueReceive+0x46>
 810d0f8:	2300      	movs	r3, #0
 810d0fa:	2b00      	cmp	r3, #0
 810d0fc:	d10b      	bne.n	810d116 <xQueueReceive+0x62>
	__asm volatile
 810d0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d102:	f383 8811 	msr	BASEPRI, r3
 810d106:	f3bf 8f6f 	isb	sy
 810d10a:	f3bf 8f4f 	dsb	sy
 810d10e:	61fb      	str	r3, [r7, #28]
}
 810d110:	bf00      	nop
 810d112:	bf00      	nop
 810d114:	e7fd      	b.n	810d112 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d116:	f001 fa3f 	bl	810e598 <xTaskGetSchedulerState>
 810d11a:	4603      	mov	r3, r0
 810d11c:	2b00      	cmp	r3, #0
 810d11e:	d102      	bne.n	810d126 <xQueueReceive+0x72>
 810d120:	687b      	ldr	r3, [r7, #4]
 810d122:	2b00      	cmp	r3, #0
 810d124:	d101      	bne.n	810d12a <xQueueReceive+0x76>
 810d126:	2301      	movs	r3, #1
 810d128:	e000      	b.n	810d12c <xQueueReceive+0x78>
 810d12a:	2300      	movs	r3, #0
 810d12c:	2b00      	cmp	r3, #0
 810d12e:	d10b      	bne.n	810d148 <xQueueReceive+0x94>
	__asm volatile
 810d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d134:	f383 8811 	msr	BASEPRI, r3
 810d138:	f3bf 8f6f 	isb	sy
 810d13c:	f3bf 8f4f 	dsb	sy
 810d140:	61bb      	str	r3, [r7, #24]
}
 810d142:	bf00      	nop
 810d144:	bf00      	nop
 810d146:	e7fd      	b.n	810d144 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d148:	f7ff faae 	bl	810c6a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d150:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d154:	2b00      	cmp	r3, #0
 810d156:	d01f      	beq.n	810d198 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d158:	68b9      	ldr	r1, [r7, #8]
 810d15a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d15c:	f000 fac4 	bl	810d6e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d162:	1e5a      	subs	r2, r3, #1
 810d164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d166:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d16a:	691b      	ldr	r3, [r3, #16]
 810d16c:	2b00      	cmp	r3, #0
 810d16e:	d00f      	beq.n	810d190 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d172:	3310      	adds	r3, #16
 810d174:	4618      	mov	r0, r3
 810d176:	f001 f84f 	bl	810e218 <xTaskRemoveFromEventList>
 810d17a:	4603      	mov	r3, r0
 810d17c:	2b00      	cmp	r3, #0
 810d17e:	d007      	beq.n	810d190 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d180:	4b3c      	ldr	r3, [pc, #240]	@ (810d274 <xQueueReceive+0x1c0>)
 810d182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d186:	601a      	str	r2, [r3, #0]
 810d188:	f3bf 8f4f 	dsb	sy
 810d18c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d190:	f7ff fabc 	bl	810c70c <vPortExitCritical>
				return pdPASS;
 810d194:	2301      	movs	r3, #1
 810d196:	e069      	b.n	810d26c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d198:	687b      	ldr	r3, [r7, #4]
 810d19a:	2b00      	cmp	r3, #0
 810d19c:	d103      	bne.n	810d1a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d19e:	f7ff fab5 	bl	810c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d1a2:	2300      	movs	r3, #0
 810d1a4:	e062      	b.n	810d26c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1a8:	2b00      	cmp	r3, #0
 810d1aa:	d106      	bne.n	810d1ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d1ac:	f107 0310 	add.w	r3, r7, #16
 810d1b0:	4618      	mov	r0, r3
 810d1b2:	f001 f895 	bl	810e2e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d1b6:	2301      	movs	r3, #1
 810d1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d1ba:	f7ff faa7 	bl	810c70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d1be:	f000 fe05 	bl	810ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d1c2:	f7ff fa71 	bl	810c6a8 <vPortEnterCritical>
 810d1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d1cc:	b25b      	sxtb	r3, r3
 810d1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d1d2:	d103      	bne.n	810d1dc <xQueueReceive+0x128>
 810d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1d6:	2200      	movs	r2, #0
 810d1d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d1e2:	b25b      	sxtb	r3, r3
 810d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d1e8:	d103      	bne.n	810d1f2 <xQueueReceive+0x13e>
 810d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1ec:	2200      	movs	r2, #0
 810d1ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d1f2:	f7ff fa8b 	bl	810c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d1f6:	1d3a      	adds	r2, r7, #4
 810d1f8:	f107 0310 	add.w	r3, r7, #16
 810d1fc:	4611      	mov	r1, r2
 810d1fe:	4618      	mov	r0, r3
 810d200:	f001 f884 	bl	810e30c <xTaskCheckForTimeOut>
 810d204:	4603      	mov	r3, r0
 810d206:	2b00      	cmp	r3, #0
 810d208:	d123      	bne.n	810d252 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d20c:	f000 fae4 	bl	810d7d8 <prvIsQueueEmpty>
 810d210:	4603      	mov	r3, r0
 810d212:	2b00      	cmp	r3, #0
 810d214:	d017      	beq.n	810d246 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d218:	3324      	adds	r3, #36	@ 0x24
 810d21a:	687a      	ldr	r2, [r7, #4]
 810d21c:	4611      	mov	r1, r2
 810d21e:	4618      	mov	r0, r3
 810d220:	f000 ffa8 	bl	810e174 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d226:	f000 fa85 	bl	810d734 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d22a:	f000 fddd 	bl	810dde8 <xTaskResumeAll>
 810d22e:	4603      	mov	r3, r0
 810d230:	2b00      	cmp	r3, #0
 810d232:	d189      	bne.n	810d148 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810d234:	4b0f      	ldr	r3, [pc, #60]	@ (810d274 <xQueueReceive+0x1c0>)
 810d236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d23a:	601a      	str	r2, [r3, #0]
 810d23c:	f3bf 8f4f 	dsb	sy
 810d240:	f3bf 8f6f 	isb	sy
 810d244:	e780      	b.n	810d148 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810d246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d248:	f000 fa74 	bl	810d734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d24c:	f000 fdcc 	bl	810dde8 <xTaskResumeAll>
 810d250:	e77a      	b.n	810d148 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810d252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d254:	f000 fa6e 	bl	810d734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d258:	f000 fdc6 	bl	810dde8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d25c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d25e:	f000 fabb 	bl	810d7d8 <prvIsQueueEmpty>
 810d262:	4603      	mov	r3, r0
 810d264:	2b00      	cmp	r3, #0
 810d266:	f43f af6f 	beq.w	810d148 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d26a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d26c:	4618      	mov	r0, r3
 810d26e:	3730      	adds	r7, #48	@ 0x30
 810d270:	46bd      	mov	sp, r7
 810d272:	bd80      	pop	{r7, pc}
 810d274:	e000ed04 	.word	0xe000ed04

0810d278 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810d278:	b580      	push	{r7, lr}
 810d27a:	b08e      	sub	sp, #56	@ 0x38
 810d27c:	af00      	add	r7, sp, #0
 810d27e:	6078      	str	r0, [r7, #4]
 810d280:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810d282:	2300      	movs	r3, #0
 810d284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d286:	687b      	ldr	r3, [r7, #4]
 810d288:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810d28a:	2300      	movs	r3, #0
 810d28c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d290:	2b00      	cmp	r3, #0
 810d292:	d10b      	bne.n	810d2ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 810d294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d298:	f383 8811 	msr	BASEPRI, r3
 810d29c:	f3bf 8f6f 	isb	sy
 810d2a0:	f3bf 8f4f 	dsb	sy
 810d2a4:	623b      	str	r3, [r7, #32]
}
 810d2a6:	bf00      	nop
 810d2a8:	bf00      	nop
 810d2aa:	e7fd      	b.n	810d2a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d2b0:	2b00      	cmp	r3, #0
 810d2b2:	d00b      	beq.n	810d2cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 810d2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2b8:	f383 8811 	msr	BASEPRI, r3
 810d2bc:	f3bf 8f6f 	isb	sy
 810d2c0:	f3bf 8f4f 	dsb	sy
 810d2c4:	61fb      	str	r3, [r7, #28]
}
 810d2c6:	bf00      	nop
 810d2c8:	bf00      	nop
 810d2ca:	e7fd      	b.n	810d2c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d2cc:	f001 f964 	bl	810e598 <xTaskGetSchedulerState>
 810d2d0:	4603      	mov	r3, r0
 810d2d2:	2b00      	cmp	r3, #0
 810d2d4:	d102      	bne.n	810d2dc <xQueueSemaphoreTake+0x64>
 810d2d6:	683b      	ldr	r3, [r7, #0]
 810d2d8:	2b00      	cmp	r3, #0
 810d2da:	d101      	bne.n	810d2e0 <xQueueSemaphoreTake+0x68>
 810d2dc:	2301      	movs	r3, #1
 810d2de:	e000      	b.n	810d2e2 <xQueueSemaphoreTake+0x6a>
 810d2e0:	2300      	movs	r3, #0
 810d2e2:	2b00      	cmp	r3, #0
 810d2e4:	d10b      	bne.n	810d2fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 810d2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2ea:	f383 8811 	msr	BASEPRI, r3
 810d2ee:	f3bf 8f6f 	isb	sy
 810d2f2:	f3bf 8f4f 	dsb	sy
 810d2f6:	61bb      	str	r3, [r7, #24]
}
 810d2f8:	bf00      	nop
 810d2fa:	bf00      	nop
 810d2fc:	e7fd      	b.n	810d2fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d2fe:	f7ff f9d3 	bl	810c6a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d306:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810d308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d30a:	2b00      	cmp	r3, #0
 810d30c:	d024      	beq.n	810d358 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810d30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d310:	1e5a      	subs	r2, r3, #1
 810d312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d314:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d318:	681b      	ldr	r3, [r3, #0]
 810d31a:	2b00      	cmp	r3, #0
 810d31c:	d104      	bne.n	810d328 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810d31e:	f001 fab5 	bl	810e88c <pvTaskIncrementMutexHeldCount>
 810d322:	4602      	mov	r2, r0
 810d324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d326:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d32a:	691b      	ldr	r3, [r3, #16]
 810d32c:	2b00      	cmp	r3, #0
 810d32e:	d00f      	beq.n	810d350 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d332:	3310      	adds	r3, #16
 810d334:	4618      	mov	r0, r3
 810d336:	f000 ff6f 	bl	810e218 <xTaskRemoveFromEventList>
 810d33a:	4603      	mov	r3, r0
 810d33c:	2b00      	cmp	r3, #0
 810d33e:	d007      	beq.n	810d350 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d340:	4b54      	ldr	r3, [pc, #336]	@ (810d494 <xQueueSemaphoreTake+0x21c>)
 810d342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d346:	601a      	str	r2, [r3, #0]
 810d348:	f3bf 8f4f 	dsb	sy
 810d34c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d350:	f7ff f9dc 	bl	810c70c <vPortExitCritical>
				return pdPASS;
 810d354:	2301      	movs	r3, #1
 810d356:	e098      	b.n	810d48a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d358:	683b      	ldr	r3, [r7, #0]
 810d35a:	2b00      	cmp	r3, #0
 810d35c:	d112      	bne.n	810d384 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d360:	2b00      	cmp	r3, #0
 810d362:	d00b      	beq.n	810d37c <xQueueSemaphoreTake+0x104>
	__asm volatile
 810d364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d368:	f383 8811 	msr	BASEPRI, r3
 810d36c:	f3bf 8f6f 	isb	sy
 810d370:	f3bf 8f4f 	dsb	sy
 810d374:	617b      	str	r3, [r7, #20]
}
 810d376:	bf00      	nop
 810d378:	bf00      	nop
 810d37a:	e7fd      	b.n	810d378 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810d37c:	f7ff f9c6 	bl	810c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d380:	2300      	movs	r3, #0
 810d382:	e082      	b.n	810d48a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d386:	2b00      	cmp	r3, #0
 810d388:	d106      	bne.n	810d398 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d38a:	f107 030c 	add.w	r3, r7, #12
 810d38e:	4618      	mov	r0, r3
 810d390:	f000 ffa6 	bl	810e2e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d394:	2301      	movs	r3, #1
 810d396:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d398:	f7ff f9b8 	bl	810c70c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d39c:	f000 fd16 	bl	810ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d3a0:	f7ff f982 	bl	810c6a8 <vPortEnterCritical>
 810d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d3a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d3aa:	b25b      	sxtb	r3, r3
 810d3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3b0:	d103      	bne.n	810d3ba <xQueueSemaphoreTake+0x142>
 810d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d3b4:	2200      	movs	r2, #0
 810d3b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d3bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d3c0:	b25b      	sxtb	r3, r3
 810d3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3c6:	d103      	bne.n	810d3d0 <xQueueSemaphoreTake+0x158>
 810d3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d3ca:	2200      	movs	r2, #0
 810d3cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d3d0:	f7ff f99c 	bl	810c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d3d4:	463a      	mov	r2, r7
 810d3d6:	f107 030c 	add.w	r3, r7, #12
 810d3da:	4611      	mov	r1, r2
 810d3dc:	4618      	mov	r0, r3
 810d3de:	f000 ff95 	bl	810e30c <xTaskCheckForTimeOut>
 810d3e2:	4603      	mov	r3, r0
 810d3e4:	2b00      	cmp	r3, #0
 810d3e6:	d132      	bne.n	810d44e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d3e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d3ea:	f000 f9f5 	bl	810d7d8 <prvIsQueueEmpty>
 810d3ee:	4603      	mov	r3, r0
 810d3f0:	2b00      	cmp	r3, #0
 810d3f2:	d026      	beq.n	810d442 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d3f6:	681b      	ldr	r3, [r3, #0]
 810d3f8:	2b00      	cmp	r3, #0
 810d3fa:	d109      	bne.n	810d410 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810d3fc:	f7ff f954 	bl	810c6a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d402:	689b      	ldr	r3, [r3, #8]
 810d404:	4618      	mov	r0, r3
 810d406:	f001 f8e5 	bl	810e5d4 <xTaskPriorityInherit>
 810d40a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810d40c:	f7ff f97e 	bl	810c70c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d412:	3324      	adds	r3, #36	@ 0x24
 810d414:	683a      	ldr	r2, [r7, #0]
 810d416:	4611      	mov	r1, r2
 810d418:	4618      	mov	r0, r3
 810d41a:	f000 feab 	bl	810e174 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d41e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d420:	f000 f988 	bl	810d734 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d424:	f000 fce0 	bl	810dde8 <xTaskResumeAll>
 810d428:	4603      	mov	r3, r0
 810d42a:	2b00      	cmp	r3, #0
 810d42c:	f47f af67 	bne.w	810d2fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810d430:	4b18      	ldr	r3, [pc, #96]	@ (810d494 <xQueueSemaphoreTake+0x21c>)
 810d432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d436:	601a      	str	r2, [r3, #0]
 810d438:	f3bf 8f4f 	dsb	sy
 810d43c:	f3bf 8f6f 	isb	sy
 810d440:	e75d      	b.n	810d2fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810d442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d444:	f000 f976 	bl	810d734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d448:	f000 fcce 	bl	810dde8 <xTaskResumeAll>
 810d44c:	e757      	b.n	810d2fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810d44e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d450:	f000 f970 	bl	810d734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d454:	f000 fcc8 	bl	810dde8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d45a:	f000 f9bd 	bl	810d7d8 <prvIsQueueEmpty>
 810d45e:	4603      	mov	r3, r0
 810d460:	2b00      	cmp	r3, #0
 810d462:	f43f af4c 	beq.w	810d2fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810d466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d468:	2b00      	cmp	r3, #0
 810d46a:	d00d      	beq.n	810d488 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810d46c:	f7ff f91c 	bl	810c6a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810d470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d472:	f000 f8b7 	bl	810d5e4 <prvGetDisinheritPriorityAfterTimeout>
 810d476:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810d478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d47a:	689b      	ldr	r3, [r3, #8]
 810d47c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d47e:	4618      	mov	r0, r3
 810d480:	f001 f980 	bl	810e784 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810d484:	f7ff f942 	bl	810c70c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d48a:	4618      	mov	r0, r3
 810d48c:	3738      	adds	r7, #56	@ 0x38
 810d48e:	46bd      	mov	sp, r7
 810d490:	bd80      	pop	{r7, pc}
 810d492:	bf00      	nop
 810d494:	e000ed04 	.word	0xe000ed04

0810d498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d498:	b580      	push	{r7, lr}
 810d49a:	b08e      	sub	sp, #56	@ 0x38
 810d49c:	af00      	add	r7, sp, #0
 810d49e:	60f8      	str	r0, [r7, #12]
 810d4a0:	60b9      	str	r1, [r7, #8]
 810d4a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d4a4:	68fb      	ldr	r3, [r7, #12]
 810d4a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4aa:	2b00      	cmp	r3, #0
 810d4ac:	d10b      	bne.n	810d4c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4b2:	f383 8811 	msr	BASEPRI, r3
 810d4b6:	f3bf 8f6f 	isb	sy
 810d4ba:	f3bf 8f4f 	dsb	sy
 810d4be:	623b      	str	r3, [r7, #32]
}
 810d4c0:	bf00      	nop
 810d4c2:	bf00      	nop
 810d4c4:	e7fd      	b.n	810d4c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d4c6:	68bb      	ldr	r3, [r7, #8]
 810d4c8:	2b00      	cmp	r3, #0
 810d4ca:	d103      	bne.n	810d4d4 <xQueueReceiveFromISR+0x3c>
 810d4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d4d0:	2b00      	cmp	r3, #0
 810d4d2:	d101      	bne.n	810d4d8 <xQueueReceiveFromISR+0x40>
 810d4d4:	2301      	movs	r3, #1
 810d4d6:	e000      	b.n	810d4da <xQueueReceiveFromISR+0x42>
 810d4d8:	2300      	movs	r3, #0
 810d4da:	2b00      	cmp	r3, #0
 810d4dc:	d10b      	bne.n	810d4f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4e2:	f383 8811 	msr	BASEPRI, r3
 810d4e6:	f3bf 8f6f 	isb	sy
 810d4ea:	f3bf 8f4f 	dsb	sy
 810d4ee:	61fb      	str	r3, [r7, #28]
}
 810d4f0:	bf00      	nop
 810d4f2:	bf00      	nop
 810d4f4:	e7fd      	b.n	810d4f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d4f6:	f7ff f9b7 	bl	810c868 <vPortValidateInterruptPriority>
	__asm volatile
 810d4fa:	f3ef 8211 	mrs	r2, BASEPRI
 810d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d502:	f383 8811 	msr	BASEPRI, r3
 810d506:	f3bf 8f6f 	isb	sy
 810d50a:	f3bf 8f4f 	dsb	sy
 810d50e:	61ba      	str	r2, [r7, #24]
 810d510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810d512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d51a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d51e:	2b00      	cmp	r3, #0
 810d520:	d02f      	beq.n	810d582 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d52c:	68b9      	ldr	r1, [r7, #8]
 810d52e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d530:	f000 f8da 	bl	810d6e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d536:	1e5a      	subs	r2, r3, #1
 810d538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d53a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810d53c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810d540:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d544:	d112      	bne.n	810d56c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d548:	691b      	ldr	r3, [r3, #16]
 810d54a:	2b00      	cmp	r3, #0
 810d54c:	d016      	beq.n	810d57c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d550:	3310      	adds	r3, #16
 810d552:	4618      	mov	r0, r3
 810d554:	f000 fe60 	bl	810e218 <xTaskRemoveFromEventList>
 810d558:	4603      	mov	r3, r0
 810d55a:	2b00      	cmp	r3, #0
 810d55c:	d00e      	beq.n	810d57c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810d55e:	687b      	ldr	r3, [r7, #4]
 810d560:	2b00      	cmp	r3, #0
 810d562:	d00b      	beq.n	810d57c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810d564:	687b      	ldr	r3, [r7, #4]
 810d566:	2201      	movs	r2, #1
 810d568:	601a      	str	r2, [r3, #0]
 810d56a:	e007      	b.n	810d57c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810d56c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810d570:	3301      	adds	r3, #1
 810d572:	b2db      	uxtb	r3, r3
 810d574:	b25a      	sxtb	r2, r3
 810d576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810d57c:	2301      	movs	r3, #1
 810d57e:	637b      	str	r3, [r7, #52]	@ 0x34
 810d580:	e001      	b.n	810d586 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810d582:	2300      	movs	r3, #0
 810d584:	637b      	str	r3, [r7, #52]	@ 0x34
 810d586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d588:	613b      	str	r3, [r7, #16]
	__asm volatile
 810d58a:	693b      	ldr	r3, [r7, #16]
 810d58c:	f383 8811 	msr	BASEPRI, r3
}
 810d590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810d594:	4618      	mov	r0, r3
 810d596:	3738      	adds	r7, #56	@ 0x38
 810d598:	46bd      	mov	sp, r7
 810d59a:	bd80      	pop	{r7, pc}

0810d59c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810d59c:	b580      	push	{r7, lr}
 810d59e:	b084      	sub	sp, #16
 810d5a0:	af00      	add	r7, sp, #0
 810d5a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810d5a4:	687b      	ldr	r3, [r7, #4]
 810d5a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810d5a8:	68fb      	ldr	r3, [r7, #12]
 810d5aa:	2b00      	cmp	r3, #0
 810d5ac:	d10b      	bne.n	810d5c6 <vQueueDelete+0x2a>
	__asm volatile
 810d5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5b2:	f383 8811 	msr	BASEPRI, r3
 810d5b6:	f3bf 8f6f 	isb	sy
 810d5ba:	f3bf 8f4f 	dsb	sy
 810d5be:	60bb      	str	r3, [r7, #8]
}
 810d5c0:	bf00      	nop
 810d5c2:	bf00      	nop
 810d5c4:	e7fd      	b.n	810d5c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810d5c6:	68f8      	ldr	r0, [r7, #12]
 810d5c8:	f000 f95e 	bl	810d888 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810d5cc:	68fb      	ldr	r3, [r7, #12]
 810d5ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 810d5d2:	2b00      	cmp	r3, #0
 810d5d4:	d102      	bne.n	810d5dc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 810d5d6:	68f8      	ldr	r0, [r7, #12]
 810d5d8:	f7fe fd60 	bl	810c09c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810d5dc:	bf00      	nop
 810d5de:	3710      	adds	r7, #16
 810d5e0:	46bd      	mov	sp, r7
 810d5e2:	bd80      	pop	{r7, pc}

0810d5e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810d5e4:	b480      	push	{r7}
 810d5e6:	b085      	sub	sp, #20
 810d5e8:	af00      	add	r7, sp, #0
 810d5ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810d5ec:	687b      	ldr	r3, [r7, #4]
 810d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	d006      	beq.n	810d602 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810d5f4:	687b      	ldr	r3, [r7, #4]
 810d5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d5f8:	681b      	ldr	r3, [r3, #0]
 810d5fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810d5fe:	60fb      	str	r3, [r7, #12]
 810d600:	e001      	b.n	810d606 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810d602:	2300      	movs	r3, #0
 810d604:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810d606:	68fb      	ldr	r3, [r7, #12]
	}
 810d608:	4618      	mov	r0, r3
 810d60a:	3714      	adds	r7, #20
 810d60c:	46bd      	mov	sp, r7
 810d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d612:	4770      	bx	lr

0810d614 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810d614:	b580      	push	{r7, lr}
 810d616:	b086      	sub	sp, #24
 810d618:	af00      	add	r7, sp, #0
 810d61a:	60f8      	str	r0, [r7, #12]
 810d61c:	60b9      	str	r1, [r7, #8]
 810d61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810d620:	2300      	movs	r3, #0
 810d622:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d624:	68fb      	ldr	r3, [r7, #12]
 810d626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d628:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810d62a:	68fb      	ldr	r3, [r7, #12]
 810d62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d62e:	2b00      	cmp	r3, #0
 810d630:	d10d      	bne.n	810d64e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d632:	68fb      	ldr	r3, [r7, #12]
 810d634:	681b      	ldr	r3, [r3, #0]
 810d636:	2b00      	cmp	r3, #0
 810d638:	d14d      	bne.n	810d6d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d63a:	68fb      	ldr	r3, [r7, #12]
 810d63c:	689b      	ldr	r3, [r3, #8]
 810d63e:	4618      	mov	r0, r3
 810d640:	f001 f830 	bl	810e6a4 <xTaskPriorityDisinherit>
 810d644:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810d646:	68fb      	ldr	r3, [r7, #12]
 810d648:	2200      	movs	r2, #0
 810d64a:	609a      	str	r2, [r3, #8]
 810d64c:	e043      	b.n	810d6d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810d64e:	687b      	ldr	r3, [r7, #4]
 810d650:	2b00      	cmp	r3, #0
 810d652:	d119      	bne.n	810d688 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d654:	68fb      	ldr	r3, [r7, #12]
 810d656:	6858      	ldr	r0, [r3, #4]
 810d658:	68fb      	ldr	r3, [r7, #12]
 810d65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d65c:	461a      	mov	r2, r3
 810d65e:	68b9      	ldr	r1, [r7, #8]
 810d660:	f005 fb79 	bl	8112d56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d664:	68fb      	ldr	r3, [r7, #12]
 810d666:	685a      	ldr	r2, [r3, #4]
 810d668:	68fb      	ldr	r3, [r7, #12]
 810d66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d66c:	441a      	add	r2, r3
 810d66e:	68fb      	ldr	r3, [r7, #12]
 810d670:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d672:	68fb      	ldr	r3, [r7, #12]
 810d674:	685a      	ldr	r2, [r3, #4]
 810d676:	68fb      	ldr	r3, [r7, #12]
 810d678:	689b      	ldr	r3, [r3, #8]
 810d67a:	429a      	cmp	r2, r3
 810d67c:	d32b      	bcc.n	810d6d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810d67e:	68fb      	ldr	r3, [r7, #12]
 810d680:	681a      	ldr	r2, [r3, #0]
 810d682:	68fb      	ldr	r3, [r7, #12]
 810d684:	605a      	str	r2, [r3, #4]
 810d686:	e026      	b.n	810d6d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810d688:	68fb      	ldr	r3, [r7, #12]
 810d68a:	68d8      	ldr	r0, [r3, #12]
 810d68c:	68fb      	ldr	r3, [r7, #12]
 810d68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d690:	461a      	mov	r2, r3
 810d692:	68b9      	ldr	r1, [r7, #8]
 810d694:	f005 fb5f 	bl	8112d56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810d698:	68fb      	ldr	r3, [r7, #12]
 810d69a:	68da      	ldr	r2, [r3, #12]
 810d69c:	68fb      	ldr	r3, [r7, #12]
 810d69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d6a0:	425b      	negs	r3, r3
 810d6a2:	441a      	add	r2, r3
 810d6a4:	68fb      	ldr	r3, [r7, #12]
 810d6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d6a8:	68fb      	ldr	r3, [r7, #12]
 810d6aa:	68da      	ldr	r2, [r3, #12]
 810d6ac:	68fb      	ldr	r3, [r7, #12]
 810d6ae:	681b      	ldr	r3, [r3, #0]
 810d6b0:	429a      	cmp	r2, r3
 810d6b2:	d207      	bcs.n	810d6c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810d6b4:	68fb      	ldr	r3, [r7, #12]
 810d6b6:	689a      	ldr	r2, [r3, #8]
 810d6b8:	68fb      	ldr	r3, [r7, #12]
 810d6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d6bc:	425b      	negs	r3, r3
 810d6be:	441a      	add	r2, r3
 810d6c0:	68fb      	ldr	r3, [r7, #12]
 810d6c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810d6c4:	687b      	ldr	r3, [r7, #4]
 810d6c6:	2b02      	cmp	r3, #2
 810d6c8:	d105      	bne.n	810d6d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d6ca:	693b      	ldr	r3, [r7, #16]
 810d6cc:	2b00      	cmp	r3, #0
 810d6ce:	d002      	beq.n	810d6d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810d6d0:	693b      	ldr	r3, [r7, #16]
 810d6d2:	3b01      	subs	r3, #1
 810d6d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d6d6:	693b      	ldr	r3, [r7, #16]
 810d6d8:	1c5a      	adds	r2, r3, #1
 810d6da:	68fb      	ldr	r3, [r7, #12]
 810d6dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810d6de:	697b      	ldr	r3, [r7, #20]
}
 810d6e0:	4618      	mov	r0, r3
 810d6e2:	3718      	adds	r7, #24
 810d6e4:	46bd      	mov	sp, r7
 810d6e6:	bd80      	pop	{r7, pc}

0810d6e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810d6e8:	b580      	push	{r7, lr}
 810d6ea:	b082      	sub	sp, #8
 810d6ec:	af00      	add	r7, sp, #0
 810d6ee:	6078      	str	r0, [r7, #4]
 810d6f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810d6f2:	687b      	ldr	r3, [r7, #4]
 810d6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d6f6:	2b00      	cmp	r3, #0
 810d6f8:	d018      	beq.n	810d72c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d6fa:	687b      	ldr	r3, [r7, #4]
 810d6fc:	68da      	ldr	r2, [r3, #12]
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d702:	441a      	add	r2, r3
 810d704:	687b      	ldr	r3, [r7, #4]
 810d706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810d708:	687b      	ldr	r3, [r7, #4]
 810d70a:	68da      	ldr	r2, [r3, #12]
 810d70c:	687b      	ldr	r3, [r7, #4]
 810d70e:	689b      	ldr	r3, [r3, #8]
 810d710:	429a      	cmp	r2, r3
 810d712:	d303      	bcc.n	810d71c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810d714:	687b      	ldr	r3, [r7, #4]
 810d716:	681a      	ldr	r2, [r3, #0]
 810d718:	687b      	ldr	r3, [r7, #4]
 810d71a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d71c:	687b      	ldr	r3, [r7, #4]
 810d71e:	68d9      	ldr	r1, [r3, #12]
 810d720:	687b      	ldr	r3, [r7, #4]
 810d722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d724:	461a      	mov	r2, r3
 810d726:	6838      	ldr	r0, [r7, #0]
 810d728:	f005 fb15 	bl	8112d56 <memcpy>
	}
}
 810d72c:	bf00      	nop
 810d72e:	3708      	adds	r7, #8
 810d730:	46bd      	mov	sp, r7
 810d732:	bd80      	pop	{r7, pc}

0810d734 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810d734:	b580      	push	{r7, lr}
 810d736:	b084      	sub	sp, #16
 810d738:	af00      	add	r7, sp, #0
 810d73a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810d73c:	f7fe ffb4 	bl	810c6a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810d740:	687b      	ldr	r3, [r7, #4]
 810d742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d746:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d748:	e011      	b.n	810d76e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d74a:	687b      	ldr	r3, [r7, #4]
 810d74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d74e:	2b00      	cmp	r3, #0
 810d750:	d012      	beq.n	810d778 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d752:	687b      	ldr	r3, [r7, #4]
 810d754:	3324      	adds	r3, #36	@ 0x24
 810d756:	4618      	mov	r0, r3
 810d758:	f000 fd5e 	bl	810e218 <xTaskRemoveFromEventList>
 810d75c:	4603      	mov	r3, r0
 810d75e:	2b00      	cmp	r3, #0
 810d760:	d001      	beq.n	810d766 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810d762:	f000 fe37 	bl	810e3d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810d766:	7bfb      	ldrb	r3, [r7, #15]
 810d768:	3b01      	subs	r3, #1
 810d76a:	b2db      	uxtb	r3, r3
 810d76c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810d772:	2b00      	cmp	r3, #0
 810d774:	dce9      	bgt.n	810d74a <prvUnlockQueue+0x16>
 810d776:	e000      	b.n	810d77a <prvUnlockQueue+0x46>
					break;
 810d778:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810d77a:	687b      	ldr	r3, [r7, #4]
 810d77c:	22ff      	movs	r2, #255	@ 0xff
 810d77e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810d782:	f7fe ffc3 	bl	810c70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810d786:	f7fe ff8f 	bl	810c6a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810d78a:	687b      	ldr	r3, [r7, #4]
 810d78c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d790:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d792:	e011      	b.n	810d7b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	691b      	ldr	r3, [r3, #16]
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d012      	beq.n	810d7c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	3310      	adds	r3, #16
 810d7a0:	4618      	mov	r0, r3
 810d7a2:	f000 fd39 	bl	810e218 <xTaskRemoveFromEventList>
 810d7a6:	4603      	mov	r3, r0
 810d7a8:	2b00      	cmp	r3, #0
 810d7aa:	d001      	beq.n	810d7b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810d7ac:	f000 fe12 	bl	810e3d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810d7b0:	7bbb      	ldrb	r3, [r7, #14]
 810d7b2:	3b01      	subs	r3, #1
 810d7b4:	b2db      	uxtb	r3, r3
 810d7b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d7b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d7bc:	2b00      	cmp	r3, #0
 810d7be:	dce9      	bgt.n	810d794 <prvUnlockQueue+0x60>
 810d7c0:	e000      	b.n	810d7c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810d7c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810d7c4:	687b      	ldr	r3, [r7, #4]
 810d7c6:	22ff      	movs	r2, #255	@ 0xff
 810d7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810d7cc:	f7fe ff9e 	bl	810c70c <vPortExitCritical>
}
 810d7d0:	bf00      	nop
 810d7d2:	3710      	adds	r7, #16
 810d7d4:	46bd      	mov	sp, r7
 810d7d6:	bd80      	pop	{r7, pc}

0810d7d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810d7d8:	b580      	push	{r7, lr}
 810d7da:	b084      	sub	sp, #16
 810d7dc:	af00      	add	r7, sp, #0
 810d7de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d7e0:	f7fe ff62 	bl	810c6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d7e8:	2b00      	cmp	r3, #0
 810d7ea:	d102      	bne.n	810d7f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810d7ec:	2301      	movs	r3, #1
 810d7ee:	60fb      	str	r3, [r7, #12]
 810d7f0:	e001      	b.n	810d7f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810d7f2:	2300      	movs	r3, #0
 810d7f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d7f6:	f7fe ff89 	bl	810c70c <vPortExitCritical>

	return xReturn;
 810d7fa:	68fb      	ldr	r3, [r7, #12]
}
 810d7fc:	4618      	mov	r0, r3
 810d7fe:	3710      	adds	r7, #16
 810d800:	46bd      	mov	sp, r7
 810d802:	bd80      	pop	{r7, pc}

0810d804 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810d804:	b580      	push	{r7, lr}
 810d806:	b084      	sub	sp, #16
 810d808:	af00      	add	r7, sp, #0
 810d80a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d80c:	f7fe ff4c 	bl	810c6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d814:	687b      	ldr	r3, [r7, #4]
 810d816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d818:	429a      	cmp	r2, r3
 810d81a:	d102      	bne.n	810d822 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810d81c:	2301      	movs	r3, #1
 810d81e:	60fb      	str	r3, [r7, #12]
 810d820:	e001      	b.n	810d826 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810d822:	2300      	movs	r3, #0
 810d824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d826:	f7fe ff71 	bl	810c70c <vPortExitCritical>

	return xReturn;
 810d82a:	68fb      	ldr	r3, [r7, #12]
}
 810d82c:	4618      	mov	r0, r3
 810d82e:	3710      	adds	r7, #16
 810d830:	46bd      	mov	sp, r7
 810d832:	bd80      	pop	{r7, pc}

0810d834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810d834:	b480      	push	{r7}
 810d836:	b085      	sub	sp, #20
 810d838:	af00      	add	r7, sp, #0
 810d83a:	6078      	str	r0, [r7, #4]
 810d83c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d83e:	2300      	movs	r3, #0
 810d840:	60fb      	str	r3, [r7, #12]
 810d842:	e014      	b.n	810d86e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810d844:	4a0f      	ldr	r2, [pc, #60]	@ (810d884 <vQueueAddToRegistry+0x50>)
 810d846:	68fb      	ldr	r3, [r7, #12]
 810d848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810d84c:	2b00      	cmp	r3, #0
 810d84e:	d10b      	bne.n	810d868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810d850:	490c      	ldr	r1, [pc, #48]	@ (810d884 <vQueueAddToRegistry+0x50>)
 810d852:	68fb      	ldr	r3, [r7, #12]
 810d854:	683a      	ldr	r2, [r7, #0]
 810d856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810d85a:	4a0a      	ldr	r2, [pc, #40]	@ (810d884 <vQueueAddToRegistry+0x50>)
 810d85c:	68fb      	ldr	r3, [r7, #12]
 810d85e:	00db      	lsls	r3, r3, #3
 810d860:	4413      	add	r3, r2
 810d862:	687a      	ldr	r2, [r7, #4]
 810d864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810d866:	e006      	b.n	810d876 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d868:	68fb      	ldr	r3, [r7, #12]
 810d86a:	3301      	adds	r3, #1
 810d86c:	60fb      	str	r3, [r7, #12]
 810d86e:	68fb      	ldr	r3, [r7, #12]
 810d870:	2b07      	cmp	r3, #7
 810d872:	d9e7      	bls.n	810d844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810d874:	bf00      	nop
 810d876:	bf00      	nop
 810d878:	3714      	adds	r7, #20
 810d87a:	46bd      	mov	sp, r7
 810d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d880:	4770      	bx	lr
 810d882:	bf00      	nop
 810d884:	100048dc 	.word	0x100048dc

0810d888 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810d888:	b480      	push	{r7}
 810d88a:	b085      	sub	sp, #20
 810d88c:	af00      	add	r7, sp, #0
 810d88e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d890:	2300      	movs	r3, #0
 810d892:	60fb      	str	r3, [r7, #12]
 810d894:	e016      	b.n	810d8c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810d896:	4a10      	ldr	r2, [pc, #64]	@ (810d8d8 <vQueueUnregisterQueue+0x50>)
 810d898:	68fb      	ldr	r3, [r7, #12]
 810d89a:	00db      	lsls	r3, r3, #3
 810d89c:	4413      	add	r3, r2
 810d89e:	685b      	ldr	r3, [r3, #4]
 810d8a0:	687a      	ldr	r2, [r7, #4]
 810d8a2:	429a      	cmp	r2, r3
 810d8a4:	d10b      	bne.n	810d8be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810d8a6:	4a0c      	ldr	r2, [pc, #48]	@ (810d8d8 <vQueueUnregisterQueue+0x50>)
 810d8a8:	68fb      	ldr	r3, [r7, #12]
 810d8aa:	2100      	movs	r1, #0
 810d8ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810d8b0:	4a09      	ldr	r2, [pc, #36]	@ (810d8d8 <vQueueUnregisterQueue+0x50>)
 810d8b2:	68fb      	ldr	r3, [r7, #12]
 810d8b4:	00db      	lsls	r3, r3, #3
 810d8b6:	4413      	add	r3, r2
 810d8b8:	2200      	movs	r2, #0
 810d8ba:	605a      	str	r2, [r3, #4]
				break;
 810d8bc:	e006      	b.n	810d8cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d8be:	68fb      	ldr	r3, [r7, #12]
 810d8c0:	3301      	adds	r3, #1
 810d8c2:	60fb      	str	r3, [r7, #12]
 810d8c4:	68fb      	ldr	r3, [r7, #12]
 810d8c6:	2b07      	cmp	r3, #7
 810d8c8:	d9e5      	bls.n	810d896 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810d8ca:	bf00      	nop
 810d8cc:	bf00      	nop
 810d8ce:	3714      	adds	r7, #20
 810d8d0:	46bd      	mov	sp, r7
 810d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8d6:	4770      	bx	lr
 810d8d8:	100048dc 	.word	0x100048dc

0810d8dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810d8dc:	b580      	push	{r7, lr}
 810d8de:	b086      	sub	sp, #24
 810d8e0:	af00      	add	r7, sp, #0
 810d8e2:	60f8      	str	r0, [r7, #12]
 810d8e4:	60b9      	str	r1, [r7, #8]
 810d8e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810d8e8:	68fb      	ldr	r3, [r7, #12]
 810d8ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810d8ec:	f7fe fedc 	bl	810c6a8 <vPortEnterCritical>
 810d8f0:	697b      	ldr	r3, [r7, #20]
 810d8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d8f6:	b25b      	sxtb	r3, r3
 810d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d8fc:	d103      	bne.n	810d906 <vQueueWaitForMessageRestricted+0x2a>
 810d8fe:	697b      	ldr	r3, [r7, #20]
 810d900:	2200      	movs	r2, #0
 810d902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d906:	697b      	ldr	r3, [r7, #20]
 810d908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d90c:	b25b      	sxtb	r3, r3
 810d90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d912:	d103      	bne.n	810d91c <vQueueWaitForMessageRestricted+0x40>
 810d914:	697b      	ldr	r3, [r7, #20]
 810d916:	2200      	movs	r2, #0
 810d918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d91c:	f7fe fef6 	bl	810c70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810d920:	697b      	ldr	r3, [r7, #20]
 810d922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d924:	2b00      	cmp	r3, #0
 810d926:	d106      	bne.n	810d936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810d928:	697b      	ldr	r3, [r7, #20]
 810d92a:	3324      	adds	r3, #36	@ 0x24
 810d92c:	687a      	ldr	r2, [r7, #4]
 810d92e:	68b9      	ldr	r1, [r7, #8]
 810d930:	4618      	mov	r0, r3
 810d932:	f000 fc45 	bl	810e1c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810d936:	6978      	ldr	r0, [r7, #20]
 810d938:	f7ff fefc 	bl	810d734 <prvUnlockQueue>
	}
 810d93c:	bf00      	nop
 810d93e:	3718      	adds	r7, #24
 810d940:	46bd      	mov	sp, r7
 810d942:	bd80      	pop	{r7, pc}

0810d944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810d944:	b580      	push	{r7, lr}
 810d946:	b08e      	sub	sp, #56	@ 0x38
 810d948:	af04      	add	r7, sp, #16
 810d94a:	60f8      	str	r0, [r7, #12]
 810d94c:	60b9      	str	r1, [r7, #8]
 810d94e:	607a      	str	r2, [r7, #4]
 810d950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810d952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d954:	2b00      	cmp	r3, #0
 810d956:	d10b      	bne.n	810d970 <xTaskCreateStatic+0x2c>
	__asm volatile
 810d958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d95c:	f383 8811 	msr	BASEPRI, r3
 810d960:	f3bf 8f6f 	isb	sy
 810d964:	f3bf 8f4f 	dsb	sy
 810d968:	623b      	str	r3, [r7, #32]
}
 810d96a:	bf00      	nop
 810d96c:	bf00      	nop
 810d96e:	e7fd      	b.n	810d96c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d972:	2b00      	cmp	r3, #0
 810d974:	d10b      	bne.n	810d98e <xTaskCreateStatic+0x4a>
	__asm volatile
 810d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d97a:	f383 8811 	msr	BASEPRI, r3
 810d97e:	f3bf 8f6f 	isb	sy
 810d982:	f3bf 8f4f 	dsb	sy
 810d986:	61fb      	str	r3, [r7, #28]
}
 810d988:	bf00      	nop
 810d98a:	bf00      	nop
 810d98c:	e7fd      	b.n	810d98a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810d98e:	235c      	movs	r3, #92	@ 0x5c
 810d990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810d992:	693b      	ldr	r3, [r7, #16]
 810d994:	2b5c      	cmp	r3, #92	@ 0x5c
 810d996:	d00b      	beq.n	810d9b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 810d998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d99c:	f383 8811 	msr	BASEPRI, r3
 810d9a0:	f3bf 8f6f 	isb	sy
 810d9a4:	f3bf 8f4f 	dsb	sy
 810d9a8:	61bb      	str	r3, [r7, #24]
}
 810d9aa:	bf00      	nop
 810d9ac:	bf00      	nop
 810d9ae:	e7fd      	b.n	810d9ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810d9b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810d9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d9b4:	2b00      	cmp	r3, #0
 810d9b6:	d01e      	beq.n	810d9f6 <xTaskCreateStatic+0xb2>
 810d9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d9ba:	2b00      	cmp	r3, #0
 810d9bc:	d01b      	beq.n	810d9f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810d9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d9c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810d9c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d9ca:	2202      	movs	r2, #2
 810d9cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810d9d0:	2300      	movs	r3, #0
 810d9d2:	9303      	str	r3, [sp, #12]
 810d9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d9d6:	9302      	str	r3, [sp, #8]
 810d9d8:	f107 0314 	add.w	r3, r7, #20
 810d9dc:	9301      	str	r3, [sp, #4]
 810d9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9e0:	9300      	str	r3, [sp, #0]
 810d9e2:	683b      	ldr	r3, [r7, #0]
 810d9e4:	687a      	ldr	r2, [r7, #4]
 810d9e6:	68b9      	ldr	r1, [r7, #8]
 810d9e8:	68f8      	ldr	r0, [r7, #12]
 810d9ea:	f000 f850 	bl	810da8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810d9ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810d9f0:	f000 f8de 	bl	810dbb0 <prvAddNewTaskToReadyList>
 810d9f4:	e001      	b.n	810d9fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810d9f6:	2300      	movs	r3, #0
 810d9f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810d9fa:	697b      	ldr	r3, [r7, #20]
	}
 810d9fc:	4618      	mov	r0, r3
 810d9fe:	3728      	adds	r7, #40	@ 0x28
 810da00:	46bd      	mov	sp, r7
 810da02:	bd80      	pop	{r7, pc}

0810da04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810da04:	b580      	push	{r7, lr}
 810da06:	b08c      	sub	sp, #48	@ 0x30
 810da08:	af04      	add	r7, sp, #16
 810da0a:	60f8      	str	r0, [r7, #12]
 810da0c:	60b9      	str	r1, [r7, #8]
 810da0e:	603b      	str	r3, [r7, #0]
 810da10:	4613      	mov	r3, r2
 810da12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810da14:	88fb      	ldrh	r3, [r7, #6]
 810da16:	009b      	lsls	r3, r3, #2
 810da18:	4618      	mov	r0, r3
 810da1a:	f7fe fa71 	bl	810bf00 <pvPortMalloc>
 810da1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810da20:	697b      	ldr	r3, [r7, #20]
 810da22:	2b00      	cmp	r3, #0
 810da24:	d00e      	beq.n	810da44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810da26:	205c      	movs	r0, #92	@ 0x5c
 810da28:	f7fe fa6a 	bl	810bf00 <pvPortMalloc>
 810da2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810da2e:	69fb      	ldr	r3, [r7, #28]
 810da30:	2b00      	cmp	r3, #0
 810da32:	d003      	beq.n	810da3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810da34:	69fb      	ldr	r3, [r7, #28]
 810da36:	697a      	ldr	r2, [r7, #20]
 810da38:	631a      	str	r2, [r3, #48]	@ 0x30
 810da3a:	e005      	b.n	810da48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810da3c:	6978      	ldr	r0, [r7, #20]
 810da3e:	f7fe fb2d 	bl	810c09c <vPortFree>
 810da42:	e001      	b.n	810da48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810da44:	2300      	movs	r3, #0
 810da46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810da48:	69fb      	ldr	r3, [r7, #28]
 810da4a:	2b00      	cmp	r3, #0
 810da4c:	d017      	beq.n	810da7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810da4e:	69fb      	ldr	r3, [r7, #28]
 810da50:	2200      	movs	r2, #0
 810da52:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810da56:	88fa      	ldrh	r2, [r7, #6]
 810da58:	2300      	movs	r3, #0
 810da5a:	9303      	str	r3, [sp, #12]
 810da5c:	69fb      	ldr	r3, [r7, #28]
 810da5e:	9302      	str	r3, [sp, #8]
 810da60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da62:	9301      	str	r3, [sp, #4]
 810da64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da66:	9300      	str	r3, [sp, #0]
 810da68:	683b      	ldr	r3, [r7, #0]
 810da6a:	68b9      	ldr	r1, [r7, #8]
 810da6c:	68f8      	ldr	r0, [r7, #12]
 810da6e:	f000 f80e 	bl	810da8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810da72:	69f8      	ldr	r0, [r7, #28]
 810da74:	f000 f89c 	bl	810dbb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810da78:	2301      	movs	r3, #1
 810da7a:	61bb      	str	r3, [r7, #24]
 810da7c:	e002      	b.n	810da84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810da7e:	f04f 33ff 	mov.w	r3, #4294967295
 810da82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810da84:	69bb      	ldr	r3, [r7, #24]
	}
 810da86:	4618      	mov	r0, r3
 810da88:	3720      	adds	r7, #32
 810da8a:	46bd      	mov	sp, r7
 810da8c:	bd80      	pop	{r7, pc}

0810da8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810da8e:	b580      	push	{r7, lr}
 810da90:	b088      	sub	sp, #32
 810da92:	af00      	add	r7, sp, #0
 810da94:	60f8      	str	r0, [r7, #12]
 810da96:	60b9      	str	r1, [r7, #8]
 810da98:	607a      	str	r2, [r7, #4]
 810da9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810daa0:	687b      	ldr	r3, [r7, #4]
 810daa2:	009b      	lsls	r3, r3, #2
 810daa4:	461a      	mov	r2, r3
 810daa6:	21a5      	movs	r1, #165	@ 0xa5
 810daa8:	f005 f845 	bl	8112b36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810daac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810daae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810dab0:	687b      	ldr	r3, [r7, #4]
 810dab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810dab6:	3b01      	subs	r3, #1
 810dab8:	009b      	lsls	r3, r3, #2
 810daba:	4413      	add	r3, r2
 810dabc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810dabe:	69bb      	ldr	r3, [r7, #24]
 810dac0:	f023 0307 	bic.w	r3, r3, #7
 810dac4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810dac6:	69bb      	ldr	r3, [r7, #24]
 810dac8:	f003 0307 	and.w	r3, r3, #7
 810dacc:	2b00      	cmp	r3, #0
 810dace:	d00b      	beq.n	810dae8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810dad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dad4:	f383 8811 	msr	BASEPRI, r3
 810dad8:	f3bf 8f6f 	isb	sy
 810dadc:	f3bf 8f4f 	dsb	sy
 810dae0:	617b      	str	r3, [r7, #20]
}
 810dae2:	bf00      	nop
 810dae4:	bf00      	nop
 810dae6:	e7fd      	b.n	810dae4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810dae8:	68bb      	ldr	r3, [r7, #8]
 810daea:	2b00      	cmp	r3, #0
 810daec:	d01f      	beq.n	810db2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810daee:	2300      	movs	r3, #0
 810daf0:	61fb      	str	r3, [r7, #28]
 810daf2:	e012      	b.n	810db1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810daf4:	68ba      	ldr	r2, [r7, #8]
 810daf6:	69fb      	ldr	r3, [r7, #28]
 810daf8:	4413      	add	r3, r2
 810dafa:	7819      	ldrb	r1, [r3, #0]
 810dafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dafe:	69fb      	ldr	r3, [r7, #28]
 810db00:	4413      	add	r3, r2
 810db02:	3334      	adds	r3, #52	@ 0x34
 810db04:	460a      	mov	r2, r1
 810db06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810db08:	68ba      	ldr	r2, [r7, #8]
 810db0a:	69fb      	ldr	r3, [r7, #28]
 810db0c:	4413      	add	r3, r2
 810db0e:	781b      	ldrb	r3, [r3, #0]
 810db10:	2b00      	cmp	r3, #0
 810db12:	d006      	beq.n	810db22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810db14:	69fb      	ldr	r3, [r7, #28]
 810db16:	3301      	adds	r3, #1
 810db18:	61fb      	str	r3, [r7, #28]
 810db1a:	69fb      	ldr	r3, [r7, #28]
 810db1c:	2b0f      	cmp	r3, #15
 810db1e:	d9e9      	bls.n	810daf4 <prvInitialiseNewTask+0x66>
 810db20:	e000      	b.n	810db24 <prvInitialiseNewTask+0x96>
			{
				break;
 810db22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db26:	2200      	movs	r2, #0
 810db28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810db2c:	e003      	b.n	810db36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db30:	2200      	movs	r2, #0
 810db32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810db36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810db38:	2b37      	cmp	r3, #55	@ 0x37
 810db3a:	d901      	bls.n	810db40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810db3c:	2337      	movs	r3, #55	@ 0x37
 810db3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810db44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810db4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810db4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db4e:	2200      	movs	r2, #0
 810db50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810db52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db54:	3304      	adds	r3, #4
 810db56:	4618      	mov	r0, r3
 810db58:	f7fe fbe0 	bl	810c31c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810db5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db5e:	3318      	adds	r3, #24
 810db60:	4618      	mov	r0, r3
 810db62:	f7fe fbdb 	bl	810c31c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810db66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810db6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810db6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810db72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810db7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db7e:	2200      	movs	r2, #0
 810db80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db84:	2200      	movs	r2, #0
 810db86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810db8a:	683a      	ldr	r2, [r7, #0]
 810db8c:	68f9      	ldr	r1, [r7, #12]
 810db8e:	69b8      	ldr	r0, [r7, #24]
 810db90:	f7fe fc58 	bl	810c444 <pxPortInitialiseStack>
 810db94:	4602      	mov	r2, r0
 810db96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810db9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810db9c:	2b00      	cmp	r3, #0
 810db9e:	d002      	beq.n	810dba6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810dba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810dba6:	bf00      	nop
 810dba8:	3720      	adds	r7, #32
 810dbaa:	46bd      	mov	sp, r7
 810dbac:	bd80      	pop	{r7, pc}
	...

0810dbb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810dbb0:	b580      	push	{r7, lr}
 810dbb2:	b082      	sub	sp, #8
 810dbb4:	af00      	add	r7, sp, #0
 810dbb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810dbb8:	f7fe fd76 	bl	810c6a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810dbbc:	4b2d      	ldr	r3, [pc, #180]	@ (810dc74 <prvAddNewTaskToReadyList+0xc4>)
 810dbbe:	681b      	ldr	r3, [r3, #0]
 810dbc0:	3301      	adds	r3, #1
 810dbc2:	4a2c      	ldr	r2, [pc, #176]	@ (810dc74 <prvAddNewTaskToReadyList+0xc4>)
 810dbc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810dbc6:	4b2c      	ldr	r3, [pc, #176]	@ (810dc78 <prvAddNewTaskToReadyList+0xc8>)
 810dbc8:	681b      	ldr	r3, [r3, #0]
 810dbca:	2b00      	cmp	r3, #0
 810dbcc:	d109      	bne.n	810dbe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810dbce:	4a2a      	ldr	r2, [pc, #168]	@ (810dc78 <prvAddNewTaskToReadyList+0xc8>)
 810dbd0:	687b      	ldr	r3, [r7, #4]
 810dbd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810dbd4:	4b27      	ldr	r3, [pc, #156]	@ (810dc74 <prvAddNewTaskToReadyList+0xc4>)
 810dbd6:	681b      	ldr	r3, [r3, #0]
 810dbd8:	2b01      	cmp	r3, #1
 810dbda:	d110      	bne.n	810dbfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810dbdc:	f000 fc1e 	bl	810e41c <prvInitialiseTaskLists>
 810dbe0:	e00d      	b.n	810dbfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810dbe2:	4b26      	ldr	r3, [pc, #152]	@ (810dc7c <prvAddNewTaskToReadyList+0xcc>)
 810dbe4:	681b      	ldr	r3, [r3, #0]
 810dbe6:	2b00      	cmp	r3, #0
 810dbe8:	d109      	bne.n	810dbfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810dbea:	4b23      	ldr	r3, [pc, #140]	@ (810dc78 <prvAddNewTaskToReadyList+0xc8>)
 810dbec:	681b      	ldr	r3, [r3, #0]
 810dbee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dbf0:	687b      	ldr	r3, [r7, #4]
 810dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dbf4:	429a      	cmp	r2, r3
 810dbf6:	d802      	bhi.n	810dbfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810dbf8:	4a1f      	ldr	r2, [pc, #124]	@ (810dc78 <prvAddNewTaskToReadyList+0xc8>)
 810dbfa:	687b      	ldr	r3, [r7, #4]
 810dbfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810dbfe:	4b20      	ldr	r3, [pc, #128]	@ (810dc80 <prvAddNewTaskToReadyList+0xd0>)
 810dc00:	681b      	ldr	r3, [r3, #0]
 810dc02:	3301      	adds	r3, #1
 810dc04:	4a1e      	ldr	r2, [pc, #120]	@ (810dc80 <prvAddNewTaskToReadyList+0xd0>)
 810dc06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810dc08:	4b1d      	ldr	r3, [pc, #116]	@ (810dc80 <prvAddNewTaskToReadyList+0xd0>)
 810dc0a:	681a      	ldr	r2, [r3, #0]
 810dc0c:	687b      	ldr	r3, [r7, #4]
 810dc0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810dc10:	687b      	ldr	r3, [r7, #4]
 810dc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dc14:	4b1b      	ldr	r3, [pc, #108]	@ (810dc84 <prvAddNewTaskToReadyList+0xd4>)
 810dc16:	681b      	ldr	r3, [r3, #0]
 810dc18:	429a      	cmp	r2, r3
 810dc1a:	d903      	bls.n	810dc24 <prvAddNewTaskToReadyList+0x74>
 810dc1c:	687b      	ldr	r3, [r7, #4]
 810dc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dc20:	4a18      	ldr	r2, [pc, #96]	@ (810dc84 <prvAddNewTaskToReadyList+0xd4>)
 810dc22:	6013      	str	r3, [r2, #0]
 810dc24:	687b      	ldr	r3, [r7, #4]
 810dc26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dc28:	4613      	mov	r3, r2
 810dc2a:	009b      	lsls	r3, r3, #2
 810dc2c:	4413      	add	r3, r2
 810dc2e:	009b      	lsls	r3, r3, #2
 810dc30:	4a15      	ldr	r2, [pc, #84]	@ (810dc88 <prvAddNewTaskToReadyList+0xd8>)
 810dc32:	441a      	add	r2, r3
 810dc34:	687b      	ldr	r3, [r7, #4]
 810dc36:	3304      	adds	r3, #4
 810dc38:	4619      	mov	r1, r3
 810dc3a:	4610      	mov	r0, r2
 810dc3c:	f7fe fb7b 	bl	810c336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810dc40:	f7fe fd64 	bl	810c70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810dc44:	4b0d      	ldr	r3, [pc, #52]	@ (810dc7c <prvAddNewTaskToReadyList+0xcc>)
 810dc46:	681b      	ldr	r3, [r3, #0]
 810dc48:	2b00      	cmp	r3, #0
 810dc4a:	d00e      	beq.n	810dc6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810dc4c:	4b0a      	ldr	r3, [pc, #40]	@ (810dc78 <prvAddNewTaskToReadyList+0xc8>)
 810dc4e:	681b      	ldr	r3, [r3, #0]
 810dc50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dc52:	687b      	ldr	r3, [r7, #4]
 810dc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dc56:	429a      	cmp	r2, r3
 810dc58:	d207      	bcs.n	810dc6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (810dc8c <prvAddNewTaskToReadyList+0xdc>)
 810dc5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dc60:	601a      	str	r2, [r3, #0]
 810dc62:	f3bf 8f4f 	dsb	sy
 810dc66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810dc6a:	bf00      	nop
 810dc6c:	3708      	adds	r7, #8
 810dc6e:	46bd      	mov	sp, r7
 810dc70:	bd80      	pop	{r7, pc}
 810dc72:	bf00      	nop
 810dc74:	10004df0 	.word	0x10004df0
 810dc78:	1000491c 	.word	0x1000491c
 810dc7c:	10004dfc 	.word	0x10004dfc
 810dc80:	10004e0c 	.word	0x10004e0c
 810dc84:	10004df8 	.word	0x10004df8
 810dc88:	10004920 	.word	0x10004920
 810dc8c:	e000ed04 	.word	0xe000ed04

0810dc90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810dc90:	b580      	push	{r7, lr}
 810dc92:	b084      	sub	sp, #16
 810dc94:	af00      	add	r7, sp, #0
 810dc96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810dc98:	2300      	movs	r3, #0
 810dc9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810dc9c:	687b      	ldr	r3, [r7, #4]
 810dc9e:	2b00      	cmp	r3, #0
 810dca0:	d018      	beq.n	810dcd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810dca2:	4b14      	ldr	r3, [pc, #80]	@ (810dcf4 <vTaskDelay+0x64>)
 810dca4:	681b      	ldr	r3, [r3, #0]
 810dca6:	2b00      	cmp	r3, #0
 810dca8:	d00b      	beq.n	810dcc2 <vTaskDelay+0x32>
	__asm volatile
 810dcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dcae:	f383 8811 	msr	BASEPRI, r3
 810dcb2:	f3bf 8f6f 	isb	sy
 810dcb6:	f3bf 8f4f 	dsb	sy
 810dcba:	60bb      	str	r3, [r7, #8]
}
 810dcbc:	bf00      	nop
 810dcbe:	bf00      	nop
 810dcc0:	e7fd      	b.n	810dcbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810dcc2:	f000 f883 	bl	810ddcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810dcc6:	2100      	movs	r1, #0
 810dcc8:	6878      	ldr	r0, [r7, #4]
 810dcca:	f000 ff89 	bl	810ebe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810dcce:	f000 f88b 	bl	810dde8 <xTaskResumeAll>
 810dcd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810dcd4:	68fb      	ldr	r3, [r7, #12]
 810dcd6:	2b00      	cmp	r3, #0
 810dcd8:	d107      	bne.n	810dcea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810dcda:	4b07      	ldr	r3, [pc, #28]	@ (810dcf8 <vTaskDelay+0x68>)
 810dcdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dce0:	601a      	str	r2, [r3, #0]
 810dce2:	f3bf 8f4f 	dsb	sy
 810dce6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810dcea:	bf00      	nop
 810dcec:	3710      	adds	r7, #16
 810dcee:	46bd      	mov	sp, r7
 810dcf0:	bd80      	pop	{r7, pc}
 810dcf2:	bf00      	nop
 810dcf4:	10004e18 	.word	0x10004e18
 810dcf8:	e000ed04 	.word	0xe000ed04

0810dcfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810dcfc:	b580      	push	{r7, lr}
 810dcfe:	b08a      	sub	sp, #40	@ 0x28
 810dd00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810dd02:	2300      	movs	r3, #0
 810dd04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810dd06:	2300      	movs	r3, #0
 810dd08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810dd0a:	463a      	mov	r2, r7
 810dd0c:	1d39      	adds	r1, r7, #4
 810dd0e:	f107 0308 	add.w	r3, r7, #8
 810dd12:	4618      	mov	r0, r3
 810dd14:	f7fe f8c0 	bl	810be98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810dd18:	6839      	ldr	r1, [r7, #0]
 810dd1a:	687b      	ldr	r3, [r7, #4]
 810dd1c:	68ba      	ldr	r2, [r7, #8]
 810dd1e:	9202      	str	r2, [sp, #8]
 810dd20:	9301      	str	r3, [sp, #4]
 810dd22:	2300      	movs	r3, #0
 810dd24:	9300      	str	r3, [sp, #0]
 810dd26:	2300      	movs	r3, #0
 810dd28:	460a      	mov	r2, r1
 810dd2a:	4922      	ldr	r1, [pc, #136]	@ (810ddb4 <vTaskStartScheduler+0xb8>)
 810dd2c:	4822      	ldr	r0, [pc, #136]	@ (810ddb8 <vTaskStartScheduler+0xbc>)
 810dd2e:	f7ff fe09 	bl	810d944 <xTaskCreateStatic>
 810dd32:	4603      	mov	r3, r0
 810dd34:	4a21      	ldr	r2, [pc, #132]	@ (810ddbc <vTaskStartScheduler+0xc0>)
 810dd36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810dd38:	4b20      	ldr	r3, [pc, #128]	@ (810ddbc <vTaskStartScheduler+0xc0>)
 810dd3a:	681b      	ldr	r3, [r3, #0]
 810dd3c:	2b00      	cmp	r3, #0
 810dd3e:	d002      	beq.n	810dd46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810dd40:	2301      	movs	r3, #1
 810dd42:	617b      	str	r3, [r7, #20]
 810dd44:	e001      	b.n	810dd4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810dd46:	2300      	movs	r3, #0
 810dd48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810dd4a:	697b      	ldr	r3, [r7, #20]
 810dd4c:	2b01      	cmp	r3, #1
 810dd4e:	d102      	bne.n	810dd56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810dd50:	f000 ff9a 	bl	810ec88 <xTimerCreateTimerTask>
 810dd54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810dd56:	697b      	ldr	r3, [r7, #20]
 810dd58:	2b01      	cmp	r3, #1
 810dd5a:	d116      	bne.n	810dd8a <vTaskStartScheduler+0x8e>
	__asm volatile
 810dd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd60:	f383 8811 	msr	BASEPRI, r3
 810dd64:	f3bf 8f6f 	isb	sy
 810dd68:	f3bf 8f4f 	dsb	sy
 810dd6c:	613b      	str	r3, [r7, #16]
}
 810dd6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810dd70:	4b13      	ldr	r3, [pc, #76]	@ (810ddc0 <vTaskStartScheduler+0xc4>)
 810dd72:	f04f 32ff 	mov.w	r2, #4294967295
 810dd76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810dd78:	4b12      	ldr	r3, [pc, #72]	@ (810ddc4 <vTaskStartScheduler+0xc8>)
 810dd7a:	2201      	movs	r2, #1
 810dd7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810dd7e:	4b12      	ldr	r3, [pc, #72]	@ (810ddc8 <vTaskStartScheduler+0xcc>)
 810dd80:	2200      	movs	r2, #0
 810dd82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810dd84:	f7fe fbec 	bl	810c560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810dd88:	e00f      	b.n	810ddaa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810dd8a:	697b      	ldr	r3, [r7, #20]
 810dd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd90:	d10b      	bne.n	810ddaa <vTaskStartScheduler+0xae>
	__asm volatile
 810dd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd96:	f383 8811 	msr	BASEPRI, r3
 810dd9a:	f3bf 8f6f 	isb	sy
 810dd9e:	f3bf 8f4f 	dsb	sy
 810dda2:	60fb      	str	r3, [r7, #12]
}
 810dda4:	bf00      	nop
 810dda6:	bf00      	nop
 810dda8:	e7fd      	b.n	810dda6 <vTaskStartScheduler+0xaa>
}
 810ddaa:	bf00      	nop
 810ddac:	3718      	adds	r7, #24
 810ddae:	46bd      	mov	sp, r7
 810ddb0:	bd80      	pop	{r7, pc}
 810ddb2:	bf00      	nop
 810ddb4:	081171a4 	.word	0x081171a4
 810ddb8:	0810e3ed 	.word	0x0810e3ed
 810ddbc:	10004e14 	.word	0x10004e14
 810ddc0:	10004e10 	.word	0x10004e10
 810ddc4:	10004dfc 	.word	0x10004dfc
 810ddc8:	10004df4 	.word	0x10004df4

0810ddcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810ddcc:	b480      	push	{r7}
 810ddce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810ddd0:	4b04      	ldr	r3, [pc, #16]	@ (810dde4 <vTaskSuspendAll+0x18>)
 810ddd2:	681b      	ldr	r3, [r3, #0]
 810ddd4:	3301      	adds	r3, #1
 810ddd6:	4a03      	ldr	r2, [pc, #12]	@ (810dde4 <vTaskSuspendAll+0x18>)
 810ddd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810ddda:	bf00      	nop
 810dddc:	46bd      	mov	sp, r7
 810ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dde2:	4770      	bx	lr
 810dde4:	10004e18 	.word	0x10004e18

0810dde8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810dde8:	b580      	push	{r7, lr}
 810ddea:	b084      	sub	sp, #16
 810ddec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ddee:	2300      	movs	r3, #0
 810ddf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810ddf2:	2300      	movs	r3, #0
 810ddf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810ddf6:	4b42      	ldr	r3, [pc, #264]	@ (810df00 <xTaskResumeAll+0x118>)
 810ddf8:	681b      	ldr	r3, [r3, #0]
 810ddfa:	2b00      	cmp	r3, #0
 810ddfc:	d10b      	bne.n	810de16 <xTaskResumeAll+0x2e>
	__asm volatile
 810ddfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de02:	f383 8811 	msr	BASEPRI, r3
 810de06:	f3bf 8f6f 	isb	sy
 810de0a:	f3bf 8f4f 	dsb	sy
 810de0e:	603b      	str	r3, [r7, #0]
}
 810de10:	bf00      	nop
 810de12:	bf00      	nop
 810de14:	e7fd      	b.n	810de12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810de16:	f7fe fc47 	bl	810c6a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810de1a:	4b39      	ldr	r3, [pc, #228]	@ (810df00 <xTaskResumeAll+0x118>)
 810de1c:	681b      	ldr	r3, [r3, #0]
 810de1e:	3b01      	subs	r3, #1
 810de20:	4a37      	ldr	r2, [pc, #220]	@ (810df00 <xTaskResumeAll+0x118>)
 810de22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810de24:	4b36      	ldr	r3, [pc, #216]	@ (810df00 <xTaskResumeAll+0x118>)
 810de26:	681b      	ldr	r3, [r3, #0]
 810de28:	2b00      	cmp	r3, #0
 810de2a:	d162      	bne.n	810def2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810de2c:	4b35      	ldr	r3, [pc, #212]	@ (810df04 <xTaskResumeAll+0x11c>)
 810de2e:	681b      	ldr	r3, [r3, #0]
 810de30:	2b00      	cmp	r3, #0
 810de32:	d05e      	beq.n	810def2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810de34:	e02f      	b.n	810de96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810de36:	4b34      	ldr	r3, [pc, #208]	@ (810df08 <xTaskResumeAll+0x120>)
 810de38:	68db      	ldr	r3, [r3, #12]
 810de3a:	68db      	ldr	r3, [r3, #12]
 810de3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810de3e:	68fb      	ldr	r3, [r7, #12]
 810de40:	3318      	adds	r3, #24
 810de42:	4618      	mov	r0, r3
 810de44:	f7fe fad4 	bl	810c3f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810de48:	68fb      	ldr	r3, [r7, #12]
 810de4a:	3304      	adds	r3, #4
 810de4c:	4618      	mov	r0, r3
 810de4e:	f7fe facf 	bl	810c3f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810de52:	68fb      	ldr	r3, [r7, #12]
 810de54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de56:	4b2d      	ldr	r3, [pc, #180]	@ (810df0c <xTaskResumeAll+0x124>)
 810de58:	681b      	ldr	r3, [r3, #0]
 810de5a:	429a      	cmp	r2, r3
 810de5c:	d903      	bls.n	810de66 <xTaskResumeAll+0x7e>
 810de5e:	68fb      	ldr	r3, [r7, #12]
 810de60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810de62:	4a2a      	ldr	r2, [pc, #168]	@ (810df0c <xTaskResumeAll+0x124>)
 810de64:	6013      	str	r3, [r2, #0]
 810de66:	68fb      	ldr	r3, [r7, #12]
 810de68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de6a:	4613      	mov	r3, r2
 810de6c:	009b      	lsls	r3, r3, #2
 810de6e:	4413      	add	r3, r2
 810de70:	009b      	lsls	r3, r3, #2
 810de72:	4a27      	ldr	r2, [pc, #156]	@ (810df10 <xTaskResumeAll+0x128>)
 810de74:	441a      	add	r2, r3
 810de76:	68fb      	ldr	r3, [r7, #12]
 810de78:	3304      	adds	r3, #4
 810de7a:	4619      	mov	r1, r3
 810de7c:	4610      	mov	r0, r2
 810de7e:	f7fe fa5a 	bl	810c336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810de82:	68fb      	ldr	r3, [r7, #12]
 810de84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de86:	4b23      	ldr	r3, [pc, #140]	@ (810df14 <xTaskResumeAll+0x12c>)
 810de88:	681b      	ldr	r3, [r3, #0]
 810de8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810de8c:	429a      	cmp	r2, r3
 810de8e:	d302      	bcc.n	810de96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810de90:	4b21      	ldr	r3, [pc, #132]	@ (810df18 <xTaskResumeAll+0x130>)
 810de92:	2201      	movs	r2, #1
 810de94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810de96:	4b1c      	ldr	r3, [pc, #112]	@ (810df08 <xTaskResumeAll+0x120>)
 810de98:	681b      	ldr	r3, [r3, #0]
 810de9a:	2b00      	cmp	r3, #0
 810de9c:	d1cb      	bne.n	810de36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810de9e:	68fb      	ldr	r3, [r7, #12]
 810dea0:	2b00      	cmp	r3, #0
 810dea2:	d001      	beq.n	810dea8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810dea4:	f000 fb58 	bl	810e558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810dea8:	4b1c      	ldr	r3, [pc, #112]	@ (810df1c <xTaskResumeAll+0x134>)
 810deaa:	681b      	ldr	r3, [r3, #0]
 810deac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810deae:	687b      	ldr	r3, [r7, #4]
 810deb0:	2b00      	cmp	r3, #0
 810deb2:	d010      	beq.n	810ded6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810deb4:	f000 f846 	bl	810df44 <xTaskIncrementTick>
 810deb8:	4603      	mov	r3, r0
 810deba:	2b00      	cmp	r3, #0
 810debc:	d002      	beq.n	810dec4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810debe:	4b16      	ldr	r3, [pc, #88]	@ (810df18 <xTaskResumeAll+0x130>)
 810dec0:	2201      	movs	r2, #1
 810dec2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810dec4:	687b      	ldr	r3, [r7, #4]
 810dec6:	3b01      	subs	r3, #1
 810dec8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810deca:	687b      	ldr	r3, [r7, #4]
 810decc:	2b00      	cmp	r3, #0
 810dece:	d1f1      	bne.n	810deb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810ded0:	4b12      	ldr	r3, [pc, #72]	@ (810df1c <xTaskResumeAll+0x134>)
 810ded2:	2200      	movs	r2, #0
 810ded4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810ded6:	4b10      	ldr	r3, [pc, #64]	@ (810df18 <xTaskResumeAll+0x130>)
 810ded8:	681b      	ldr	r3, [r3, #0]
 810deda:	2b00      	cmp	r3, #0
 810dedc:	d009      	beq.n	810def2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810dede:	2301      	movs	r3, #1
 810dee0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810dee2:	4b0f      	ldr	r3, [pc, #60]	@ (810df20 <xTaskResumeAll+0x138>)
 810dee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dee8:	601a      	str	r2, [r3, #0]
 810deea:	f3bf 8f4f 	dsb	sy
 810deee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810def2:	f7fe fc0b 	bl	810c70c <vPortExitCritical>

	return xAlreadyYielded;
 810def6:	68bb      	ldr	r3, [r7, #8]
}
 810def8:	4618      	mov	r0, r3
 810defa:	3710      	adds	r7, #16
 810defc:	46bd      	mov	sp, r7
 810defe:	bd80      	pop	{r7, pc}
 810df00:	10004e18 	.word	0x10004e18
 810df04:	10004df0 	.word	0x10004df0
 810df08:	10004db0 	.word	0x10004db0
 810df0c:	10004df8 	.word	0x10004df8
 810df10:	10004920 	.word	0x10004920
 810df14:	1000491c 	.word	0x1000491c
 810df18:	10004e04 	.word	0x10004e04
 810df1c:	10004e00 	.word	0x10004e00
 810df20:	e000ed04 	.word	0xe000ed04

0810df24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810df24:	b480      	push	{r7}
 810df26:	b083      	sub	sp, #12
 810df28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810df2a:	4b05      	ldr	r3, [pc, #20]	@ (810df40 <xTaskGetTickCount+0x1c>)
 810df2c:	681b      	ldr	r3, [r3, #0]
 810df2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810df30:	687b      	ldr	r3, [r7, #4]
}
 810df32:	4618      	mov	r0, r3
 810df34:	370c      	adds	r7, #12
 810df36:	46bd      	mov	sp, r7
 810df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df3c:	4770      	bx	lr
 810df3e:	bf00      	nop
 810df40:	10004df4 	.word	0x10004df4

0810df44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810df44:	b580      	push	{r7, lr}
 810df46:	b086      	sub	sp, #24
 810df48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810df4a:	2300      	movs	r3, #0
 810df4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810df4e:	4b4f      	ldr	r3, [pc, #316]	@ (810e08c <xTaskIncrementTick+0x148>)
 810df50:	681b      	ldr	r3, [r3, #0]
 810df52:	2b00      	cmp	r3, #0
 810df54:	f040 8090 	bne.w	810e078 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810df58:	4b4d      	ldr	r3, [pc, #308]	@ (810e090 <xTaskIncrementTick+0x14c>)
 810df5a:	681b      	ldr	r3, [r3, #0]
 810df5c:	3301      	adds	r3, #1
 810df5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810df60:	4a4b      	ldr	r2, [pc, #300]	@ (810e090 <xTaskIncrementTick+0x14c>)
 810df62:	693b      	ldr	r3, [r7, #16]
 810df64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810df66:	693b      	ldr	r3, [r7, #16]
 810df68:	2b00      	cmp	r3, #0
 810df6a:	d121      	bne.n	810dfb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810df6c:	4b49      	ldr	r3, [pc, #292]	@ (810e094 <xTaskIncrementTick+0x150>)
 810df6e:	681b      	ldr	r3, [r3, #0]
 810df70:	681b      	ldr	r3, [r3, #0]
 810df72:	2b00      	cmp	r3, #0
 810df74:	d00b      	beq.n	810df8e <xTaskIncrementTick+0x4a>
	__asm volatile
 810df76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810df7a:	f383 8811 	msr	BASEPRI, r3
 810df7e:	f3bf 8f6f 	isb	sy
 810df82:	f3bf 8f4f 	dsb	sy
 810df86:	603b      	str	r3, [r7, #0]
}
 810df88:	bf00      	nop
 810df8a:	bf00      	nop
 810df8c:	e7fd      	b.n	810df8a <xTaskIncrementTick+0x46>
 810df8e:	4b41      	ldr	r3, [pc, #260]	@ (810e094 <xTaskIncrementTick+0x150>)
 810df90:	681b      	ldr	r3, [r3, #0]
 810df92:	60fb      	str	r3, [r7, #12]
 810df94:	4b40      	ldr	r3, [pc, #256]	@ (810e098 <xTaskIncrementTick+0x154>)
 810df96:	681b      	ldr	r3, [r3, #0]
 810df98:	4a3e      	ldr	r2, [pc, #248]	@ (810e094 <xTaskIncrementTick+0x150>)
 810df9a:	6013      	str	r3, [r2, #0]
 810df9c:	4a3e      	ldr	r2, [pc, #248]	@ (810e098 <xTaskIncrementTick+0x154>)
 810df9e:	68fb      	ldr	r3, [r7, #12]
 810dfa0:	6013      	str	r3, [r2, #0]
 810dfa2:	4b3e      	ldr	r3, [pc, #248]	@ (810e09c <xTaskIncrementTick+0x158>)
 810dfa4:	681b      	ldr	r3, [r3, #0]
 810dfa6:	3301      	adds	r3, #1
 810dfa8:	4a3c      	ldr	r2, [pc, #240]	@ (810e09c <xTaskIncrementTick+0x158>)
 810dfaa:	6013      	str	r3, [r2, #0]
 810dfac:	f000 fad4 	bl	810e558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810dfb0:	4b3b      	ldr	r3, [pc, #236]	@ (810e0a0 <xTaskIncrementTick+0x15c>)
 810dfb2:	681b      	ldr	r3, [r3, #0]
 810dfb4:	693a      	ldr	r2, [r7, #16]
 810dfb6:	429a      	cmp	r2, r3
 810dfb8:	d349      	bcc.n	810e04e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810dfba:	4b36      	ldr	r3, [pc, #216]	@ (810e094 <xTaskIncrementTick+0x150>)
 810dfbc:	681b      	ldr	r3, [r3, #0]
 810dfbe:	681b      	ldr	r3, [r3, #0]
 810dfc0:	2b00      	cmp	r3, #0
 810dfc2:	d104      	bne.n	810dfce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dfc4:	4b36      	ldr	r3, [pc, #216]	@ (810e0a0 <xTaskIncrementTick+0x15c>)
 810dfc6:	f04f 32ff 	mov.w	r2, #4294967295
 810dfca:	601a      	str	r2, [r3, #0]
					break;
 810dfcc:	e03f      	b.n	810e04e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dfce:	4b31      	ldr	r3, [pc, #196]	@ (810e094 <xTaskIncrementTick+0x150>)
 810dfd0:	681b      	ldr	r3, [r3, #0]
 810dfd2:	68db      	ldr	r3, [r3, #12]
 810dfd4:	68db      	ldr	r3, [r3, #12]
 810dfd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810dfd8:	68bb      	ldr	r3, [r7, #8]
 810dfda:	685b      	ldr	r3, [r3, #4]
 810dfdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810dfde:	693a      	ldr	r2, [r7, #16]
 810dfe0:	687b      	ldr	r3, [r7, #4]
 810dfe2:	429a      	cmp	r2, r3
 810dfe4:	d203      	bcs.n	810dfee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810dfe6:	4a2e      	ldr	r2, [pc, #184]	@ (810e0a0 <xTaskIncrementTick+0x15c>)
 810dfe8:	687b      	ldr	r3, [r7, #4]
 810dfea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810dfec:	e02f      	b.n	810e04e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810dfee:	68bb      	ldr	r3, [r7, #8]
 810dff0:	3304      	adds	r3, #4
 810dff2:	4618      	mov	r0, r3
 810dff4:	f7fe f9fc 	bl	810c3f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810dff8:	68bb      	ldr	r3, [r7, #8]
 810dffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dffc:	2b00      	cmp	r3, #0
 810dffe:	d004      	beq.n	810e00a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e000:	68bb      	ldr	r3, [r7, #8]
 810e002:	3318      	adds	r3, #24
 810e004:	4618      	mov	r0, r3
 810e006:	f7fe f9f3 	bl	810c3f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810e00a:	68bb      	ldr	r3, [r7, #8]
 810e00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e00e:	4b25      	ldr	r3, [pc, #148]	@ (810e0a4 <xTaskIncrementTick+0x160>)
 810e010:	681b      	ldr	r3, [r3, #0]
 810e012:	429a      	cmp	r2, r3
 810e014:	d903      	bls.n	810e01e <xTaskIncrementTick+0xda>
 810e016:	68bb      	ldr	r3, [r7, #8]
 810e018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e01a:	4a22      	ldr	r2, [pc, #136]	@ (810e0a4 <xTaskIncrementTick+0x160>)
 810e01c:	6013      	str	r3, [r2, #0]
 810e01e:	68bb      	ldr	r3, [r7, #8]
 810e020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e022:	4613      	mov	r3, r2
 810e024:	009b      	lsls	r3, r3, #2
 810e026:	4413      	add	r3, r2
 810e028:	009b      	lsls	r3, r3, #2
 810e02a:	4a1f      	ldr	r2, [pc, #124]	@ (810e0a8 <xTaskIncrementTick+0x164>)
 810e02c:	441a      	add	r2, r3
 810e02e:	68bb      	ldr	r3, [r7, #8]
 810e030:	3304      	adds	r3, #4
 810e032:	4619      	mov	r1, r3
 810e034:	4610      	mov	r0, r2
 810e036:	f7fe f97e 	bl	810c336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e03a:	68bb      	ldr	r3, [r7, #8]
 810e03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e03e:	4b1b      	ldr	r3, [pc, #108]	@ (810e0ac <xTaskIncrementTick+0x168>)
 810e040:	681b      	ldr	r3, [r3, #0]
 810e042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e044:	429a      	cmp	r2, r3
 810e046:	d3b8      	bcc.n	810dfba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810e048:	2301      	movs	r3, #1
 810e04a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e04c:	e7b5      	b.n	810dfba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810e04e:	4b17      	ldr	r3, [pc, #92]	@ (810e0ac <xTaskIncrementTick+0x168>)
 810e050:	681b      	ldr	r3, [r3, #0]
 810e052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e054:	4914      	ldr	r1, [pc, #80]	@ (810e0a8 <xTaskIncrementTick+0x164>)
 810e056:	4613      	mov	r3, r2
 810e058:	009b      	lsls	r3, r3, #2
 810e05a:	4413      	add	r3, r2
 810e05c:	009b      	lsls	r3, r3, #2
 810e05e:	440b      	add	r3, r1
 810e060:	681b      	ldr	r3, [r3, #0]
 810e062:	2b01      	cmp	r3, #1
 810e064:	d901      	bls.n	810e06a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810e066:	2301      	movs	r3, #1
 810e068:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810e06a:	4b11      	ldr	r3, [pc, #68]	@ (810e0b0 <xTaskIncrementTick+0x16c>)
 810e06c:	681b      	ldr	r3, [r3, #0]
 810e06e:	2b00      	cmp	r3, #0
 810e070:	d007      	beq.n	810e082 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810e072:	2301      	movs	r3, #1
 810e074:	617b      	str	r3, [r7, #20]
 810e076:	e004      	b.n	810e082 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810e078:	4b0e      	ldr	r3, [pc, #56]	@ (810e0b4 <xTaskIncrementTick+0x170>)
 810e07a:	681b      	ldr	r3, [r3, #0]
 810e07c:	3301      	adds	r3, #1
 810e07e:	4a0d      	ldr	r2, [pc, #52]	@ (810e0b4 <xTaskIncrementTick+0x170>)
 810e080:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810e082:	697b      	ldr	r3, [r7, #20]
}
 810e084:	4618      	mov	r0, r3
 810e086:	3718      	adds	r7, #24
 810e088:	46bd      	mov	sp, r7
 810e08a:	bd80      	pop	{r7, pc}
 810e08c:	10004e18 	.word	0x10004e18
 810e090:	10004df4 	.word	0x10004df4
 810e094:	10004da8 	.word	0x10004da8
 810e098:	10004dac 	.word	0x10004dac
 810e09c:	10004e08 	.word	0x10004e08
 810e0a0:	10004e10 	.word	0x10004e10
 810e0a4:	10004df8 	.word	0x10004df8
 810e0a8:	10004920 	.word	0x10004920
 810e0ac:	1000491c 	.word	0x1000491c
 810e0b0:	10004e04 	.word	0x10004e04
 810e0b4:	10004e00 	.word	0x10004e00

0810e0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810e0b8:	b480      	push	{r7}
 810e0ba:	b085      	sub	sp, #20
 810e0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810e0be:	4b28      	ldr	r3, [pc, #160]	@ (810e160 <vTaskSwitchContext+0xa8>)
 810e0c0:	681b      	ldr	r3, [r3, #0]
 810e0c2:	2b00      	cmp	r3, #0
 810e0c4:	d003      	beq.n	810e0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810e0c6:	4b27      	ldr	r3, [pc, #156]	@ (810e164 <vTaskSwitchContext+0xac>)
 810e0c8:	2201      	movs	r2, #1
 810e0ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810e0cc:	e042      	b.n	810e154 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810e0ce:	4b25      	ldr	r3, [pc, #148]	@ (810e164 <vTaskSwitchContext+0xac>)
 810e0d0:	2200      	movs	r2, #0
 810e0d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e0d4:	4b24      	ldr	r3, [pc, #144]	@ (810e168 <vTaskSwitchContext+0xb0>)
 810e0d6:	681b      	ldr	r3, [r3, #0]
 810e0d8:	60fb      	str	r3, [r7, #12]
 810e0da:	e011      	b.n	810e100 <vTaskSwitchContext+0x48>
 810e0dc:	68fb      	ldr	r3, [r7, #12]
 810e0de:	2b00      	cmp	r3, #0
 810e0e0:	d10b      	bne.n	810e0fa <vTaskSwitchContext+0x42>
	__asm volatile
 810e0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e0e6:	f383 8811 	msr	BASEPRI, r3
 810e0ea:	f3bf 8f6f 	isb	sy
 810e0ee:	f3bf 8f4f 	dsb	sy
 810e0f2:	607b      	str	r3, [r7, #4]
}
 810e0f4:	bf00      	nop
 810e0f6:	bf00      	nop
 810e0f8:	e7fd      	b.n	810e0f6 <vTaskSwitchContext+0x3e>
 810e0fa:	68fb      	ldr	r3, [r7, #12]
 810e0fc:	3b01      	subs	r3, #1
 810e0fe:	60fb      	str	r3, [r7, #12]
 810e100:	491a      	ldr	r1, [pc, #104]	@ (810e16c <vTaskSwitchContext+0xb4>)
 810e102:	68fa      	ldr	r2, [r7, #12]
 810e104:	4613      	mov	r3, r2
 810e106:	009b      	lsls	r3, r3, #2
 810e108:	4413      	add	r3, r2
 810e10a:	009b      	lsls	r3, r3, #2
 810e10c:	440b      	add	r3, r1
 810e10e:	681b      	ldr	r3, [r3, #0]
 810e110:	2b00      	cmp	r3, #0
 810e112:	d0e3      	beq.n	810e0dc <vTaskSwitchContext+0x24>
 810e114:	68fa      	ldr	r2, [r7, #12]
 810e116:	4613      	mov	r3, r2
 810e118:	009b      	lsls	r3, r3, #2
 810e11a:	4413      	add	r3, r2
 810e11c:	009b      	lsls	r3, r3, #2
 810e11e:	4a13      	ldr	r2, [pc, #76]	@ (810e16c <vTaskSwitchContext+0xb4>)
 810e120:	4413      	add	r3, r2
 810e122:	60bb      	str	r3, [r7, #8]
 810e124:	68bb      	ldr	r3, [r7, #8]
 810e126:	685b      	ldr	r3, [r3, #4]
 810e128:	685a      	ldr	r2, [r3, #4]
 810e12a:	68bb      	ldr	r3, [r7, #8]
 810e12c:	605a      	str	r2, [r3, #4]
 810e12e:	68bb      	ldr	r3, [r7, #8]
 810e130:	685a      	ldr	r2, [r3, #4]
 810e132:	68bb      	ldr	r3, [r7, #8]
 810e134:	3308      	adds	r3, #8
 810e136:	429a      	cmp	r2, r3
 810e138:	d104      	bne.n	810e144 <vTaskSwitchContext+0x8c>
 810e13a:	68bb      	ldr	r3, [r7, #8]
 810e13c:	685b      	ldr	r3, [r3, #4]
 810e13e:	685a      	ldr	r2, [r3, #4]
 810e140:	68bb      	ldr	r3, [r7, #8]
 810e142:	605a      	str	r2, [r3, #4]
 810e144:	68bb      	ldr	r3, [r7, #8]
 810e146:	685b      	ldr	r3, [r3, #4]
 810e148:	68db      	ldr	r3, [r3, #12]
 810e14a:	4a09      	ldr	r2, [pc, #36]	@ (810e170 <vTaskSwitchContext+0xb8>)
 810e14c:	6013      	str	r3, [r2, #0]
 810e14e:	4a06      	ldr	r2, [pc, #24]	@ (810e168 <vTaskSwitchContext+0xb0>)
 810e150:	68fb      	ldr	r3, [r7, #12]
 810e152:	6013      	str	r3, [r2, #0]
}
 810e154:	bf00      	nop
 810e156:	3714      	adds	r7, #20
 810e158:	46bd      	mov	sp, r7
 810e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e15e:	4770      	bx	lr
 810e160:	10004e18 	.word	0x10004e18
 810e164:	10004e04 	.word	0x10004e04
 810e168:	10004df8 	.word	0x10004df8
 810e16c:	10004920 	.word	0x10004920
 810e170:	1000491c 	.word	0x1000491c

0810e174 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810e174:	b580      	push	{r7, lr}
 810e176:	b084      	sub	sp, #16
 810e178:	af00      	add	r7, sp, #0
 810e17a:	6078      	str	r0, [r7, #4]
 810e17c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810e17e:	687b      	ldr	r3, [r7, #4]
 810e180:	2b00      	cmp	r3, #0
 810e182:	d10b      	bne.n	810e19c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e188:	f383 8811 	msr	BASEPRI, r3
 810e18c:	f3bf 8f6f 	isb	sy
 810e190:	f3bf 8f4f 	dsb	sy
 810e194:	60fb      	str	r3, [r7, #12]
}
 810e196:	bf00      	nop
 810e198:	bf00      	nop
 810e19a:	e7fd      	b.n	810e198 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e19c:	4b07      	ldr	r3, [pc, #28]	@ (810e1bc <vTaskPlaceOnEventList+0x48>)
 810e19e:	681b      	ldr	r3, [r3, #0]
 810e1a0:	3318      	adds	r3, #24
 810e1a2:	4619      	mov	r1, r3
 810e1a4:	6878      	ldr	r0, [r7, #4]
 810e1a6:	f7fe f8ea 	bl	810c37e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810e1aa:	2101      	movs	r1, #1
 810e1ac:	6838      	ldr	r0, [r7, #0]
 810e1ae:	f000 fd17 	bl	810ebe0 <prvAddCurrentTaskToDelayedList>
}
 810e1b2:	bf00      	nop
 810e1b4:	3710      	adds	r7, #16
 810e1b6:	46bd      	mov	sp, r7
 810e1b8:	bd80      	pop	{r7, pc}
 810e1ba:	bf00      	nop
 810e1bc:	1000491c 	.word	0x1000491c

0810e1c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e1c0:	b580      	push	{r7, lr}
 810e1c2:	b086      	sub	sp, #24
 810e1c4:	af00      	add	r7, sp, #0
 810e1c6:	60f8      	str	r0, [r7, #12]
 810e1c8:	60b9      	str	r1, [r7, #8]
 810e1ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810e1cc:	68fb      	ldr	r3, [r7, #12]
 810e1ce:	2b00      	cmp	r3, #0
 810e1d0:	d10b      	bne.n	810e1ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810e1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1d6:	f383 8811 	msr	BASEPRI, r3
 810e1da:	f3bf 8f6f 	isb	sy
 810e1de:	f3bf 8f4f 	dsb	sy
 810e1e2:	617b      	str	r3, [r7, #20]
}
 810e1e4:	bf00      	nop
 810e1e6:	bf00      	nop
 810e1e8:	e7fd      	b.n	810e1e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e1ea:	4b0a      	ldr	r3, [pc, #40]	@ (810e214 <vTaskPlaceOnEventListRestricted+0x54>)
 810e1ec:	681b      	ldr	r3, [r3, #0]
 810e1ee:	3318      	adds	r3, #24
 810e1f0:	4619      	mov	r1, r3
 810e1f2:	68f8      	ldr	r0, [r7, #12]
 810e1f4:	f7fe f89f 	bl	810c336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810e1f8:	687b      	ldr	r3, [r7, #4]
 810e1fa:	2b00      	cmp	r3, #0
 810e1fc:	d002      	beq.n	810e204 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810e1fe:	f04f 33ff 	mov.w	r3, #4294967295
 810e202:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810e204:	6879      	ldr	r1, [r7, #4]
 810e206:	68b8      	ldr	r0, [r7, #8]
 810e208:	f000 fcea 	bl	810ebe0 <prvAddCurrentTaskToDelayedList>
	}
 810e20c:	bf00      	nop
 810e20e:	3718      	adds	r7, #24
 810e210:	46bd      	mov	sp, r7
 810e212:	bd80      	pop	{r7, pc}
 810e214:	1000491c 	.word	0x1000491c

0810e218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810e218:	b580      	push	{r7, lr}
 810e21a:	b086      	sub	sp, #24
 810e21c:	af00      	add	r7, sp, #0
 810e21e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e220:	687b      	ldr	r3, [r7, #4]
 810e222:	68db      	ldr	r3, [r3, #12]
 810e224:	68db      	ldr	r3, [r3, #12]
 810e226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810e228:	693b      	ldr	r3, [r7, #16]
 810e22a:	2b00      	cmp	r3, #0
 810e22c:	d10b      	bne.n	810e246 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e232:	f383 8811 	msr	BASEPRI, r3
 810e236:	f3bf 8f6f 	isb	sy
 810e23a:	f3bf 8f4f 	dsb	sy
 810e23e:	60fb      	str	r3, [r7, #12]
}
 810e240:	bf00      	nop
 810e242:	bf00      	nop
 810e244:	e7fd      	b.n	810e242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810e246:	693b      	ldr	r3, [r7, #16]
 810e248:	3318      	adds	r3, #24
 810e24a:	4618      	mov	r0, r3
 810e24c:	f7fe f8d0 	bl	810c3f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e250:	4b1d      	ldr	r3, [pc, #116]	@ (810e2c8 <xTaskRemoveFromEventList+0xb0>)
 810e252:	681b      	ldr	r3, [r3, #0]
 810e254:	2b00      	cmp	r3, #0
 810e256:	d11d      	bne.n	810e294 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810e258:	693b      	ldr	r3, [r7, #16]
 810e25a:	3304      	adds	r3, #4
 810e25c:	4618      	mov	r0, r3
 810e25e:	f7fe f8c7 	bl	810c3f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810e262:	693b      	ldr	r3, [r7, #16]
 810e264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e266:	4b19      	ldr	r3, [pc, #100]	@ (810e2cc <xTaskRemoveFromEventList+0xb4>)
 810e268:	681b      	ldr	r3, [r3, #0]
 810e26a:	429a      	cmp	r2, r3
 810e26c:	d903      	bls.n	810e276 <xTaskRemoveFromEventList+0x5e>
 810e26e:	693b      	ldr	r3, [r7, #16]
 810e270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e272:	4a16      	ldr	r2, [pc, #88]	@ (810e2cc <xTaskRemoveFromEventList+0xb4>)
 810e274:	6013      	str	r3, [r2, #0]
 810e276:	693b      	ldr	r3, [r7, #16]
 810e278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e27a:	4613      	mov	r3, r2
 810e27c:	009b      	lsls	r3, r3, #2
 810e27e:	4413      	add	r3, r2
 810e280:	009b      	lsls	r3, r3, #2
 810e282:	4a13      	ldr	r2, [pc, #76]	@ (810e2d0 <xTaskRemoveFromEventList+0xb8>)
 810e284:	441a      	add	r2, r3
 810e286:	693b      	ldr	r3, [r7, #16]
 810e288:	3304      	adds	r3, #4
 810e28a:	4619      	mov	r1, r3
 810e28c:	4610      	mov	r0, r2
 810e28e:	f7fe f852 	bl	810c336 <vListInsertEnd>
 810e292:	e005      	b.n	810e2a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810e294:	693b      	ldr	r3, [r7, #16]
 810e296:	3318      	adds	r3, #24
 810e298:	4619      	mov	r1, r3
 810e29a:	480e      	ldr	r0, [pc, #56]	@ (810e2d4 <xTaskRemoveFromEventList+0xbc>)
 810e29c:	f7fe f84b 	bl	810c336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810e2a0:	693b      	ldr	r3, [r7, #16]
 810e2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e2a4:	4b0c      	ldr	r3, [pc, #48]	@ (810e2d8 <xTaskRemoveFromEventList+0xc0>)
 810e2a6:	681b      	ldr	r3, [r3, #0]
 810e2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e2aa:	429a      	cmp	r2, r3
 810e2ac:	d905      	bls.n	810e2ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810e2ae:	2301      	movs	r3, #1
 810e2b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810e2b2:	4b0a      	ldr	r3, [pc, #40]	@ (810e2dc <xTaskRemoveFromEventList+0xc4>)
 810e2b4:	2201      	movs	r2, #1
 810e2b6:	601a      	str	r2, [r3, #0]
 810e2b8:	e001      	b.n	810e2be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810e2ba:	2300      	movs	r3, #0
 810e2bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810e2be:	697b      	ldr	r3, [r7, #20]
}
 810e2c0:	4618      	mov	r0, r3
 810e2c2:	3718      	adds	r7, #24
 810e2c4:	46bd      	mov	sp, r7
 810e2c6:	bd80      	pop	{r7, pc}
 810e2c8:	10004e18 	.word	0x10004e18
 810e2cc:	10004df8 	.word	0x10004df8
 810e2d0:	10004920 	.word	0x10004920
 810e2d4:	10004db0 	.word	0x10004db0
 810e2d8:	1000491c 	.word	0x1000491c
 810e2dc:	10004e04 	.word	0x10004e04

0810e2e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810e2e0:	b480      	push	{r7}
 810e2e2:	b083      	sub	sp, #12
 810e2e4:	af00      	add	r7, sp, #0
 810e2e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810e2e8:	4b06      	ldr	r3, [pc, #24]	@ (810e304 <vTaskInternalSetTimeOutState+0x24>)
 810e2ea:	681a      	ldr	r2, [r3, #0]
 810e2ec:	687b      	ldr	r3, [r7, #4]
 810e2ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810e2f0:	4b05      	ldr	r3, [pc, #20]	@ (810e308 <vTaskInternalSetTimeOutState+0x28>)
 810e2f2:	681a      	ldr	r2, [r3, #0]
 810e2f4:	687b      	ldr	r3, [r7, #4]
 810e2f6:	605a      	str	r2, [r3, #4]
}
 810e2f8:	bf00      	nop
 810e2fa:	370c      	adds	r7, #12
 810e2fc:	46bd      	mov	sp, r7
 810e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e302:	4770      	bx	lr
 810e304:	10004e08 	.word	0x10004e08
 810e308:	10004df4 	.word	0x10004df4

0810e30c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810e30c:	b580      	push	{r7, lr}
 810e30e:	b088      	sub	sp, #32
 810e310:	af00      	add	r7, sp, #0
 810e312:	6078      	str	r0, [r7, #4]
 810e314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810e316:	687b      	ldr	r3, [r7, #4]
 810e318:	2b00      	cmp	r3, #0
 810e31a:	d10b      	bne.n	810e334 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810e31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e320:	f383 8811 	msr	BASEPRI, r3
 810e324:	f3bf 8f6f 	isb	sy
 810e328:	f3bf 8f4f 	dsb	sy
 810e32c:	613b      	str	r3, [r7, #16]
}
 810e32e:	bf00      	nop
 810e330:	bf00      	nop
 810e332:	e7fd      	b.n	810e330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810e334:	683b      	ldr	r3, [r7, #0]
 810e336:	2b00      	cmp	r3, #0
 810e338:	d10b      	bne.n	810e352 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810e33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e33e:	f383 8811 	msr	BASEPRI, r3
 810e342:	f3bf 8f6f 	isb	sy
 810e346:	f3bf 8f4f 	dsb	sy
 810e34a:	60fb      	str	r3, [r7, #12]
}
 810e34c:	bf00      	nop
 810e34e:	bf00      	nop
 810e350:	e7fd      	b.n	810e34e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810e352:	f7fe f9a9 	bl	810c6a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810e356:	4b1d      	ldr	r3, [pc, #116]	@ (810e3cc <xTaskCheckForTimeOut+0xc0>)
 810e358:	681b      	ldr	r3, [r3, #0]
 810e35a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810e35c:	687b      	ldr	r3, [r7, #4]
 810e35e:	685b      	ldr	r3, [r3, #4]
 810e360:	69ba      	ldr	r2, [r7, #24]
 810e362:	1ad3      	subs	r3, r2, r3
 810e364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810e366:	683b      	ldr	r3, [r7, #0]
 810e368:	681b      	ldr	r3, [r3, #0]
 810e36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e36e:	d102      	bne.n	810e376 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810e370:	2300      	movs	r3, #0
 810e372:	61fb      	str	r3, [r7, #28]
 810e374:	e023      	b.n	810e3be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810e376:	687b      	ldr	r3, [r7, #4]
 810e378:	681a      	ldr	r2, [r3, #0]
 810e37a:	4b15      	ldr	r3, [pc, #84]	@ (810e3d0 <xTaskCheckForTimeOut+0xc4>)
 810e37c:	681b      	ldr	r3, [r3, #0]
 810e37e:	429a      	cmp	r2, r3
 810e380:	d007      	beq.n	810e392 <xTaskCheckForTimeOut+0x86>
 810e382:	687b      	ldr	r3, [r7, #4]
 810e384:	685b      	ldr	r3, [r3, #4]
 810e386:	69ba      	ldr	r2, [r7, #24]
 810e388:	429a      	cmp	r2, r3
 810e38a:	d302      	bcc.n	810e392 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810e38c:	2301      	movs	r3, #1
 810e38e:	61fb      	str	r3, [r7, #28]
 810e390:	e015      	b.n	810e3be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810e392:	683b      	ldr	r3, [r7, #0]
 810e394:	681b      	ldr	r3, [r3, #0]
 810e396:	697a      	ldr	r2, [r7, #20]
 810e398:	429a      	cmp	r2, r3
 810e39a:	d20b      	bcs.n	810e3b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810e39c:	683b      	ldr	r3, [r7, #0]
 810e39e:	681a      	ldr	r2, [r3, #0]
 810e3a0:	697b      	ldr	r3, [r7, #20]
 810e3a2:	1ad2      	subs	r2, r2, r3
 810e3a4:	683b      	ldr	r3, [r7, #0]
 810e3a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810e3a8:	6878      	ldr	r0, [r7, #4]
 810e3aa:	f7ff ff99 	bl	810e2e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810e3ae:	2300      	movs	r3, #0
 810e3b0:	61fb      	str	r3, [r7, #28]
 810e3b2:	e004      	b.n	810e3be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810e3b4:	683b      	ldr	r3, [r7, #0]
 810e3b6:	2200      	movs	r2, #0
 810e3b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810e3ba:	2301      	movs	r3, #1
 810e3bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810e3be:	f7fe f9a5 	bl	810c70c <vPortExitCritical>

	return xReturn;
 810e3c2:	69fb      	ldr	r3, [r7, #28]
}
 810e3c4:	4618      	mov	r0, r3
 810e3c6:	3720      	adds	r7, #32
 810e3c8:	46bd      	mov	sp, r7
 810e3ca:	bd80      	pop	{r7, pc}
 810e3cc:	10004df4 	.word	0x10004df4
 810e3d0:	10004e08 	.word	0x10004e08

0810e3d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810e3d4:	b480      	push	{r7}
 810e3d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810e3d8:	4b03      	ldr	r3, [pc, #12]	@ (810e3e8 <vTaskMissedYield+0x14>)
 810e3da:	2201      	movs	r2, #1
 810e3dc:	601a      	str	r2, [r3, #0]
}
 810e3de:	bf00      	nop
 810e3e0:	46bd      	mov	sp, r7
 810e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3e6:	4770      	bx	lr
 810e3e8:	10004e04 	.word	0x10004e04

0810e3ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810e3ec:	b580      	push	{r7, lr}
 810e3ee:	b082      	sub	sp, #8
 810e3f0:	af00      	add	r7, sp, #0
 810e3f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810e3f4:	f000 f852 	bl	810e49c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810e3f8:	4b06      	ldr	r3, [pc, #24]	@ (810e414 <prvIdleTask+0x28>)
 810e3fa:	681b      	ldr	r3, [r3, #0]
 810e3fc:	2b01      	cmp	r3, #1
 810e3fe:	d9f9      	bls.n	810e3f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 810e400:	4b05      	ldr	r3, [pc, #20]	@ (810e418 <prvIdleTask+0x2c>)
 810e402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e406:	601a      	str	r2, [r3, #0]
 810e408:	f3bf 8f4f 	dsb	sy
 810e40c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810e410:	e7f0      	b.n	810e3f4 <prvIdleTask+0x8>
 810e412:	bf00      	nop
 810e414:	10004920 	.word	0x10004920
 810e418:	e000ed04 	.word	0xe000ed04

0810e41c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810e41c:	b580      	push	{r7, lr}
 810e41e:	b082      	sub	sp, #8
 810e420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e422:	2300      	movs	r3, #0
 810e424:	607b      	str	r3, [r7, #4]
 810e426:	e00c      	b.n	810e442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810e428:	687a      	ldr	r2, [r7, #4]
 810e42a:	4613      	mov	r3, r2
 810e42c:	009b      	lsls	r3, r3, #2
 810e42e:	4413      	add	r3, r2
 810e430:	009b      	lsls	r3, r3, #2
 810e432:	4a12      	ldr	r2, [pc, #72]	@ (810e47c <prvInitialiseTaskLists+0x60>)
 810e434:	4413      	add	r3, r2
 810e436:	4618      	mov	r0, r3
 810e438:	f7fd ff50 	bl	810c2dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e43c:	687b      	ldr	r3, [r7, #4]
 810e43e:	3301      	adds	r3, #1
 810e440:	607b      	str	r3, [r7, #4]
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	2b37      	cmp	r3, #55	@ 0x37
 810e446:	d9ef      	bls.n	810e428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810e448:	480d      	ldr	r0, [pc, #52]	@ (810e480 <prvInitialiseTaskLists+0x64>)
 810e44a:	f7fd ff47 	bl	810c2dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810e44e:	480d      	ldr	r0, [pc, #52]	@ (810e484 <prvInitialiseTaskLists+0x68>)
 810e450:	f7fd ff44 	bl	810c2dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810e454:	480c      	ldr	r0, [pc, #48]	@ (810e488 <prvInitialiseTaskLists+0x6c>)
 810e456:	f7fd ff41 	bl	810c2dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810e45a:	480c      	ldr	r0, [pc, #48]	@ (810e48c <prvInitialiseTaskLists+0x70>)
 810e45c:	f7fd ff3e 	bl	810c2dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810e460:	480b      	ldr	r0, [pc, #44]	@ (810e490 <prvInitialiseTaskLists+0x74>)
 810e462:	f7fd ff3b 	bl	810c2dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810e466:	4b0b      	ldr	r3, [pc, #44]	@ (810e494 <prvInitialiseTaskLists+0x78>)
 810e468:	4a05      	ldr	r2, [pc, #20]	@ (810e480 <prvInitialiseTaskLists+0x64>)
 810e46a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810e46c:	4b0a      	ldr	r3, [pc, #40]	@ (810e498 <prvInitialiseTaskLists+0x7c>)
 810e46e:	4a05      	ldr	r2, [pc, #20]	@ (810e484 <prvInitialiseTaskLists+0x68>)
 810e470:	601a      	str	r2, [r3, #0]
}
 810e472:	bf00      	nop
 810e474:	3708      	adds	r7, #8
 810e476:	46bd      	mov	sp, r7
 810e478:	bd80      	pop	{r7, pc}
 810e47a:	bf00      	nop
 810e47c:	10004920 	.word	0x10004920
 810e480:	10004d80 	.word	0x10004d80
 810e484:	10004d94 	.word	0x10004d94
 810e488:	10004db0 	.word	0x10004db0
 810e48c:	10004dc4 	.word	0x10004dc4
 810e490:	10004ddc 	.word	0x10004ddc
 810e494:	10004da8 	.word	0x10004da8
 810e498:	10004dac 	.word	0x10004dac

0810e49c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810e49c:	b580      	push	{r7, lr}
 810e49e:	b082      	sub	sp, #8
 810e4a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e4a2:	e019      	b.n	810e4d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810e4a4:	f7fe f900 	bl	810c6a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e4a8:	4b10      	ldr	r3, [pc, #64]	@ (810e4ec <prvCheckTasksWaitingTermination+0x50>)
 810e4aa:	68db      	ldr	r3, [r3, #12]
 810e4ac:	68db      	ldr	r3, [r3, #12]
 810e4ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e4b0:	687b      	ldr	r3, [r7, #4]
 810e4b2:	3304      	adds	r3, #4
 810e4b4:	4618      	mov	r0, r3
 810e4b6:	f7fd ff9b 	bl	810c3f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810e4ba:	4b0d      	ldr	r3, [pc, #52]	@ (810e4f0 <prvCheckTasksWaitingTermination+0x54>)
 810e4bc:	681b      	ldr	r3, [r3, #0]
 810e4be:	3b01      	subs	r3, #1
 810e4c0:	4a0b      	ldr	r2, [pc, #44]	@ (810e4f0 <prvCheckTasksWaitingTermination+0x54>)
 810e4c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810e4c4:	4b0b      	ldr	r3, [pc, #44]	@ (810e4f4 <prvCheckTasksWaitingTermination+0x58>)
 810e4c6:	681b      	ldr	r3, [r3, #0]
 810e4c8:	3b01      	subs	r3, #1
 810e4ca:	4a0a      	ldr	r2, [pc, #40]	@ (810e4f4 <prvCheckTasksWaitingTermination+0x58>)
 810e4cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810e4ce:	f7fe f91d 	bl	810c70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810e4d2:	6878      	ldr	r0, [r7, #4]
 810e4d4:	f000 f810 	bl	810e4f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e4d8:	4b06      	ldr	r3, [pc, #24]	@ (810e4f4 <prvCheckTasksWaitingTermination+0x58>)
 810e4da:	681b      	ldr	r3, [r3, #0]
 810e4dc:	2b00      	cmp	r3, #0
 810e4de:	d1e1      	bne.n	810e4a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810e4e0:	bf00      	nop
 810e4e2:	bf00      	nop
 810e4e4:	3708      	adds	r7, #8
 810e4e6:	46bd      	mov	sp, r7
 810e4e8:	bd80      	pop	{r7, pc}
 810e4ea:	bf00      	nop
 810e4ec:	10004dc4 	.word	0x10004dc4
 810e4f0:	10004df0 	.word	0x10004df0
 810e4f4:	10004dd8 	.word	0x10004dd8

0810e4f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810e4f8:	b580      	push	{r7, lr}
 810e4fa:	b084      	sub	sp, #16
 810e4fc:	af00      	add	r7, sp, #0
 810e4fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810e500:	687b      	ldr	r3, [r7, #4]
 810e502:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e506:	2b00      	cmp	r3, #0
 810e508:	d108      	bne.n	810e51c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810e50a:	687b      	ldr	r3, [r7, #4]
 810e50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e50e:	4618      	mov	r0, r3
 810e510:	f7fd fdc4 	bl	810c09c <vPortFree>
				vPortFree( pxTCB );
 810e514:	6878      	ldr	r0, [r7, #4]
 810e516:	f7fd fdc1 	bl	810c09c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810e51a:	e019      	b.n	810e550 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810e51c:	687b      	ldr	r3, [r7, #4]
 810e51e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e522:	2b01      	cmp	r3, #1
 810e524:	d103      	bne.n	810e52e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810e526:	6878      	ldr	r0, [r7, #4]
 810e528:	f7fd fdb8 	bl	810c09c <vPortFree>
	}
 810e52c:	e010      	b.n	810e550 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810e52e:	687b      	ldr	r3, [r7, #4]
 810e530:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e534:	2b02      	cmp	r3, #2
 810e536:	d00b      	beq.n	810e550 <prvDeleteTCB+0x58>
	__asm volatile
 810e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e53c:	f383 8811 	msr	BASEPRI, r3
 810e540:	f3bf 8f6f 	isb	sy
 810e544:	f3bf 8f4f 	dsb	sy
 810e548:	60fb      	str	r3, [r7, #12]
}
 810e54a:	bf00      	nop
 810e54c:	bf00      	nop
 810e54e:	e7fd      	b.n	810e54c <prvDeleteTCB+0x54>
	}
 810e550:	bf00      	nop
 810e552:	3710      	adds	r7, #16
 810e554:	46bd      	mov	sp, r7
 810e556:	bd80      	pop	{r7, pc}

0810e558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810e558:	b480      	push	{r7}
 810e55a:	b083      	sub	sp, #12
 810e55c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e55e:	4b0c      	ldr	r3, [pc, #48]	@ (810e590 <prvResetNextTaskUnblockTime+0x38>)
 810e560:	681b      	ldr	r3, [r3, #0]
 810e562:	681b      	ldr	r3, [r3, #0]
 810e564:	2b00      	cmp	r3, #0
 810e566:	d104      	bne.n	810e572 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810e568:	4b0a      	ldr	r3, [pc, #40]	@ (810e594 <prvResetNextTaskUnblockTime+0x3c>)
 810e56a:	f04f 32ff 	mov.w	r2, #4294967295
 810e56e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810e570:	e008      	b.n	810e584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e572:	4b07      	ldr	r3, [pc, #28]	@ (810e590 <prvResetNextTaskUnblockTime+0x38>)
 810e574:	681b      	ldr	r3, [r3, #0]
 810e576:	68db      	ldr	r3, [r3, #12]
 810e578:	68db      	ldr	r3, [r3, #12]
 810e57a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810e57c:	687b      	ldr	r3, [r7, #4]
 810e57e:	685b      	ldr	r3, [r3, #4]
 810e580:	4a04      	ldr	r2, [pc, #16]	@ (810e594 <prvResetNextTaskUnblockTime+0x3c>)
 810e582:	6013      	str	r3, [r2, #0]
}
 810e584:	bf00      	nop
 810e586:	370c      	adds	r7, #12
 810e588:	46bd      	mov	sp, r7
 810e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e58e:	4770      	bx	lr
 810e590:	10004da8 	.word	0x10004da8
 810e594:	10004e10 	.word	0x10004e10

0810e598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810e598:	b480      	push	{r7}
 810e59a:	b083      	sub	sp, #12
 810e59c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810e59e:	4b0b      	ldr	r3, [pc, #44]	@ (810e5cc <xTaskGetSchedulerState+0x34>)
 810e5a0:	681b      	ldr	r3, [r3, #0]
 810e5a2:	2b00      	cmp	r3, #0
 810e5a4:	d102      	bne.n	810e5ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810e5a6:	2301      	movs	r3, #1
 810e5a8:	607b      	str	r3, [r7, #4]
 810e5aa:	e008      	b.n	810e5be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e5ac:	4b08      	ldr	r3, [pc, #32]	@ (810e5d0 <xTaskGetSchedulerState+0x38>)
 810e5ae:	681b      	ldr	r3, [r3, #0]
 810e5b0:	2b00      	cmp	r3, #0
 810e5b2:	d102      	bne.n	810e5ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810e5b4:	2302      	movs	r3, #2
 810e5b6:	607b      	str	r3, [r7, #4]
 810e5b8:	e001      	b.n	810e5be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810e5ba:	2300      	movs	r3, #0
 810e5bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810e5be:	687b      	ldr	r3, [r7, #4]
	}
 810e5c0:	4618      	mov	r0, r3
 810e5c2:	370c      	adds	r7, #12
 810e5c4:	46bd      	mov	sp, r7
 810e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5ca:	4770      	bx	lr
 810e5cc:	10004dfc 	.word	0x10004dfc
 810e5d0:	10004e18 	.word	0x10004e18

0810e5d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810e5d4:	b580      	push	{r7, lr}
 810e5d6:	b084      	sub	sp, #16
 810e5d8:	af00      	add	r7, sp, #0
 810e5da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810e5dc:	687b      	ldr	r3, [r7, #4]
 810e5de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810e5e0:	2300      	movs	r3, #0
 810e5e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810e5e4:	687b      	ldr	r3, [r7, #4]
 810e5e6:	2b00      	cmp	r3, #0
 810e5e8:	d051      	beq.n	810e68e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810e5ea:	68bb      	ldr	r3, [r7, #8]
 810e5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e5ee:	4b2a      	ldr	r3, [pc, #168]	@ (810e698 <xTaskPriorityInherit+0xc4>)
 810e5f0:	681b      	ldr	r3, [r3, #0]
 810e5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e5f4:	429a      	cmp	r2, r3
 810e5f6:	d241      	bcs.n	810e67c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e5f8:	68bb      	ldr	r3, [r7, #8]
 810e5fa:	699b      	ldr	r3, [r3, #24]
 810e5fc:	2b00      	cmp	r3, #0
 810e5fe:	db06      	blt.n	810e60e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e600:	4b25      	ldr	r3, [pc, #148]	@ (810e698 <xTaskPriorityInherit+0xc4>)
 810e602:	681b      	ldr	r3, [r3, #0]
 810e604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e606:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e60a:	68bb      	ldr	r3, [r7, #8]
 810e60c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810e60e:	68bb      	ldr	r3, [r7, #8]
 810e610:	6959      	ldr	r1, [r3, #20]
 810e612:	68bb      	ldr	r3, [r7, #8]
 810e614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e616:	4613      	mov	r3, r2
 810e618:	009b      	lsls	r3, r3, #2
 810e61a:	4413      	add	r3, r2
 810e61c:	009b      	lsls	r3, r3, #2
 810e61e:	4a1f      	ldr	r2, [pc, #124]	@ (810e69c <xTaskPriorityInherit+0xc8>)
 810e620:	4413      	add	r3, r2
 810e622:	4299      	cmp	r1, r3
 810e624:	d122      	bne.n	810e66c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e626:	68bb      	ldr	r3, [r7, #8]
 810e628:	3304      	adds	r3, #4
 810e62a:	4618      	mov	r0, r3
 810e62c:	f7fd fee0 	bl	810c3f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e630:	4b19      	ldr	r3, [pc, #100]	@ (810e698 <xTaskPriorityInherit+0xc4>)
 810e632:	681b      	ldr	r3, [r3, #0]
 810e634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e636:	68bb      	ldr	r3, [r7, #8]
 810e638:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810e63a:	68bb      	ldr	r3, [r7, #8]
 810e63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e63e:	4b18      	ldr	r3, [pc, #96]	@ (810e6a0 <xTaskPriorityInherit+0xcc>)
 810e640:	681b      	ldr	r3, [r3, #0]
 810e642:	429a      	cmp	r2, r3
 810e644:	d903      	bls.n	810e64e <xTaskPriorityInherit+0x7a>
 810e646:	68bb      	ldr	r3, [r7, #8]
 810e648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e64a:	4a15      	ldr	r2, [pc, #84]	@ (810e6a0 <xTaskPriorityInherit+0xcc>)
 810e64c:	6013      	str	r3, [r2, #0]
 810e64e:	68bb      	ldr	r3, [r7, #8]
 810e650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e652:	4613      	mov	r3, r2
 810e654:	009b      	lsls	r3, r3, #2
 810e656:	4413      	add	r3, r2
 810e658:	009b      	lsls	r3, r3, #2
 810e65a:	4a10      	ldr	r2, [pc, #64]	@ (810e69c <xTaskPriorityInherit+0xc8>)
 810e65c:	441a      	add	r2, r3
 810e65e:	68bb      	ldr	r3, [r7, #8]
 810e660:	3304      	adds	r3, #4
 810e662:	4619      	mov	r1, r3
 810e664:	4610      	mov	r0, r2
 810e666:	f7fd fe66 	bl	810c336 <vListInsertEnd>
 810e66a:	e004      	b.n	810e676 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e66c:	4b0a      	ldr	r3, [pc, #40]	@ (810e698 <xTaskPriorityInherit+0xc4>)
 810e66e:	681b      	ldr	r3, [r3, #0]
 810e670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e672:	68bb      	ldr	r3, [r7, #8]
 810e674:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810e676:	2301      	movs	r3, #1
 810e678:	60fb      	str	r3, [r7, #12]
 810e67a:	e008      	b.n	810e68e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810e67c:	68bb      	ldr	r3, [r7, #8]
 810e67e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810e680:	4b05      	ldr	r3, [pc, #20]	@ (810e698 <xTaskPriorityInherit+0xc4>)
 810e682:	681b      	ldr	r3, [r3, #0]
 810e684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e686:	429a      	cmp	r2, r3
 810e688:	d201      	bcs.n	810e68e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810e68a:	2301      	movs	r3, #1
 810e68c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e68e:	68fb      	ldr	r3, [r7, #12]
	}
 810e690:	4618      	mov	r0, r3
 810e692:	3710      	adds	r7, #16
 810e694:	46bd      	mov	sp, r7
 810e696:	bd80      	pop	{r7, pc}
 810e698:	1000491c 	.word	0x1000491c
 810e69c:	10004920 	.word	0x10004920
 810e6a0:	10004df8 	.word	0x10004df8

0810e6a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810e6a4:	b580      	push	{r7, lr}
 810e6a6:	b086      	sub	sp, #24
 810e6a8:	af00      	add	r7, sp, #0
 810e6aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810e6ac:	687b      	ldr	r3, [r7, #4]
 810e6ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810e6b0:	2300      	movs	r3, #0
 810e6b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e6b4:	687b      	ldr	r3, [r7, #4]
 810e6b6:	2b00      	cmp	r3, #0
 810e6b8:	d058      	beq.n	810e76c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810e6ba:	4b2f      	ldr	r3, [pc, #188]	@ (810e778 <xTaskPriorityDisinherit+0xd4>)
 810e6bc:	681b      	ldr	r3, [r3, #0]
 810e6be:	693a      	ldr	r2, [r7, #16]
 810e6c0:	429a      	cmp	r2, r3
 810e6c2:	d00b      	beq.n	810e6dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810e6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6c8:	f383 8811 	msr	BASEPRI, r3
 810e6cc:	f3bf 8f6f 	isb	sy
 810e6d0:	f3bf 8f4f 	dsb	sy
 810e6d4:	60fb      	str	r3, [r7, #12]
}
 810e6d6:	bf00      	nop
 810e6d8:	bf00      	nop
 810e6da:	e7fd      	b.n	810e6d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810e6dc:	693b      	ldr	r3, [r7, #16]
 810e6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e6e0:	2b00      	cmp	r3, #0
 810e6e2:	d10b      	bne.n	810e6fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810e6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6e8:	f383 8811 	msr	BASEPRI, r3
 810e6ec:	f3bf 8f6f 	isb	sy
 810e6f0:	f3bf 8f4f 	dsb	sy
 810e6f4:	60bb      	str	r3, [r7, #8]
}
 810e6f6:	bf00      	nop
 810e6f8:	bf00      	nop
 810e6fa:	e7fd      	b.n	810e6f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810e6fc:	693b      	ldr	r3, [r7, #16]
 810e6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e700:	1e5a      	subs	r2, r3, #1
 810e702:	693b      	ldr	r3, [r7, #16]
 810e704:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810e706:	693b      	ldr	r3, [r7, #16]
 810e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e70a:	693b      	ldr	r3, [r7, #16]
 810e70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e70e:	429a      	cmp	r2, r3
 810e710:	d02c      	beq.n	810e76c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810e712:	693b      	ldr	r3, [r7, #16]
 810e714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e716:	2b00      	cmp	r3, #0
 810e718:	d128      	bne.n	810e76c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e71a:	693b      	ldr	r3, [r7, #16]
 810e71c:	3304      	adds	r3, #4
 810e71e:	4618      	mov	r0, r3
 810e720:	f7fd fe66 	bl	810c3f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810e724:	693b      	ldr	r3, [r7, #16]
 810e726:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810e728:	693b      	ldr	r3, [r7, #16]
 810e72a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e72c:	693b      	ldr	r3, [r7, #16]
 810e72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e730:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e734:	693b      	ldr	r3, [r7, #16]
 810e736:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810e738:	693b      	ldr	r3, [r7, #16]
 810e73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e73c:	4b0f      	ldr	r3, [pc, #60]	@ (810e77c <xTaskPriorityDisinherit+0xd8>)
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	429a      	cmp	r2, r3
 810e742:	d903      	bls.n	810e74c <xTaskPriorityDisinherit+0xa8>
 810e744:	693b      	ldr	r3, [r7, #16]
 810e746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e748:	4a0c      	ldr	r2, [pc, #48]	@ (810e77c <xTaskPriorityDisinherit+0xd8>)
 810e74a:	6013      	str	r3, [r2, #0]
 810e74c:	693b      	ldr	r3, [r7, #16]
 810e74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e750:	4613      	mov	r3, r2
 810e752:	009b      	lsls	r3, r3, #2
 810e754:	4413      	add	r3, r2
 810e756:	009b      	lsls	r3, r3, #2
 810e758:	4a09      	ldr	r2, [pc, #36]	@ (810e780 <xTaskPriorityDisinherit+0xdc>)
 810e75a:	441a      	add	r2, r3
 810e75c:	693b      	ldr	r3, [r7, #16]
 810e75e:	3304      	adds	r3, #4
 810e760:	4619      	mov	r1, r3
 810e762:	4610      	mov	r0, r2
 810e764:	f7fd fde7 	bl	810c336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810e768:	2301      	movs	r3, #1
 810e76a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e76c:	697b      	ldr	r3, [r7, #20]
	}
 810e76e:	4618      	mov	r0, r3
 810e770:	3718      	adds	r7, #24
 810e772:	46bd      	mov	sp, r7
 810e774:	bd80      	pop	{r7, pc}
 810e776:	bf00      	nop
 810e778:	1000491c 	.word	0x1000491c
 810e77c:	10004df8 	.word	0x10004df8
 810e780:	10004920 	.word	0x10004920

0810e784 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810e784:	b580      	push	{r7, lr}
 810e786:	b088      	sub	sp, #32
 810e788:	af00      	add	r7, sp, #0
 810e78a:	6078      	str	r0, [r7, #4]
 810e78c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810e78e:	687b      	ldr	r3, [r7, #4]
 810e790:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810e792:	2301      	movs	r3, #1
 810e794:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e796:	687b      	ldr	r3, [r7, #4]
 810e798:	2b00      	cmp	r3, #0
 810e79a:	d06c      	beq.n	810e876 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810e79c:	69bb      	ldr	r3, [r7, #24]
 810e79e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e7a0:	2b00      	cmp	r3, #0
 810e7a2:	d10b      	bne.n	810e7bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7a8:	f383 8811 	msr	BASEPRI, r3
 810e7ac:	f3bf 8f6f 	isb	sy
 810e7b0:	f3bf 8f4f 	dsb	sy
 810e7b4:	60fb      	str	r3, [r7, #12]
}
 810e7b6:	bf00      	nop
 810e7b8:	bf00      	nop
 810e7ba:	e7fd      	b.n	810e7b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810e7bc:	69bb      	ldr	r3, [r7, #24]
 810e7be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e7c0:	683a      	ldr	r2, [r7, #0]
 810e7c2:	429a      	cmp	r2, r3
 810e7c4:	d902      	bls.n	810e7cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810e7c6:	683b      	ldr	r3, [r7, #0]
 810e7c8:	61fb      	str	r3, [r7, #28]
 810e7ca:	e002      	b.n	810e7d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810e7cc:	69bb      	ldr	r3, [r7, #24]
 810e7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e7d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810e7d2:	69bb      	ldr	r3, [r7, #24]
 810e7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e7d6:	69fa      	ldr	r2, [r7, #28]
 810e7d8:	429a      	cmp	r2, r3
 810e7da:	d04c      	beq.n	810e876 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810e7dc:	69bb      	ldr	r3, [r7, #24]
 810e7de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e7e0:	697a      	ldr	r2, [r7, #20]
 810e7e2:	429a      	cmp	r2, r3
 810e7e4:	d147      	bne.n	810e876 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810e7e6:	4b26      	ldr	r3, [pc, #152]	@ (810e880 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810e7e8:	681b      	ldr	r3, [r3, #0]
 810e7ea:	69ba      	ldr	r2, [r7, #24]
 810e7ec:	429a      	cmp	r2, r3
 810e7ee:	d10b      	bne.n	810e808 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810e7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7f4:	f383 8811 	msr	BASEPRI, r3
 810e7f8:	f3bf 8f6f 	isb	sy
 810e7fc:	f3bf 8f4f 	dsb	sy
 810e800:	60bb      	str	r3, [r7, #8]
}
 810e802:	bf00      	nop
 810e804:	bf00      	nop
 810e806:	e7fd      	b.n	810e804 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810e808:	69bb      	ldr	r3, [r7, #24]
 810e80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e80c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810e80e:	69bb      	ldr	r3, [r7, #24]
 810e810:	69fa      	ldr	r2, [r7, #28]
 810e812:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e814:	69bb      	ldr	r3, [r7, #24]
 810e816:	699b      	ldr	r3, [r3, #24]
 810e818:	2b00      	cmp	r3, #0
 810e81a:	db04      	blt.n	810e826 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e81c:	69fb      	ldr	r3, [r7, #28]
 810e81e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e822:	69bb      	ldr	r3, [r7, #24]
 810e824:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810e826:	69bb      	ldr	r3, [r7, #24]
 810e828:	6959      	ldr	r1, [r3, #20]
 810e82a:	693a      	ldr	r2, [r7, #16]
 810e82c:	4613      	mov	r3, r2
 810e82e:	009b      	lsls	r3, r3, #2
 810e830:	4413      	add	r3, r2
 810e832:	009b      	lsls	r3, r3, #2
 810e834:	4a13      	ldr	r2, [pc, #76]	@ (810e884 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e836:	4413      	add	r3, r2
 810e838:	4299      	cmp	r1, r3
 810e83a:	d11c      	bne.n	810e876 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e83c:	69bb      	ldr	r3, [r7, #24]
 810e83e:	3304      	adds	r3, #4
 810e840:	4618      	mov	r0, r3
 810e842:	f7fd fdd5 	bl	810c3f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810e846:	69bb      	ldr	r3, [r7, #24]
 810e848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e84a:	4b0f      	ldr	r3, [pc, #60]	@ (810e888 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810e84c:	681b      	ldr	r3, [r3, #0]
 810e84e:	429a      	cmp	r2, r3
 810e850:	d903      	bls.n	810e85a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810e852:	69bb      	ldr	r3, [r7, #24]
 810e854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e856:	4a0c      	ldr	r2, [pc, #48]	@ (810e888 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810e858:	6013      	str	r3, [r2, #0]
 810e85a:	69bb      	ldr	r3, [r7, #24]
 810e85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e85e:	4613      	mov	r3, r2
 810e860:	009b      	lsls	r3, r3, #2
 810e862:	4413      	add	r3, r2
 810e864:	009b      	lsls	r3, r3, #2
 810e866:	4a07      	ldr	r2, [pc, #28]	@ (810e884 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e868:	441a      	add	r2, r3
 810e86a:	69bb      	ldr	r3, [r7, #24]
 810e86c:	3304      	adds	r3, #4
 810e86e:	4619      	mov	r1, r3
 810e870:	4610      	mov	r0, r2
 810e872:	f7fd fd60 	bl	810c336 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e876:	bf00      	nop
 810e878:	3720      	adds	r7, #32
 810e87a:	46bd      	mov	sp, r7
 810e87c:	bd80      	pop	{r7, pc}
 810e87e:	bf00      	nop
 810e880:	1000491c 	.word	0x1000491c
 810e884:	10004920 	.word	0x10004920
 810e888:	10004df8 	.word	0x10004df8

0810e88c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810e88c:	b480      	push	{r7}
 810e88e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810e890:	4b07      	ldr	r3, [pc, #28]	@ (810e8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 810e892:	681b      	ldr	r3, [r3, #0]
 810e894:	2b00      	cmp	r3, #0
 810e896:	d004      	beq.n	810e8a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810e898:	4b05      	ldr	r3, [pc, #20]	@ (810e8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 810e89a:	681b      	ldr	r3, [r3, #0]
 810e89c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810e89e:	3201      	adds	r2, #1
 810e8a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810e8a2:	4b03      	ldr	r3, [pc, #12]	@ (810e8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 810e8a4:	681b      	ldr	r3, [r3, #0]
	}
 810e8a6:	4618      	mov	r0, r3
 810e8a8:	46bd      	mov	sp, r7
 810e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8ae:	4770      	bx	lr
 810e8b0:	1000491c 	.word	0x1000491c

0810e8b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 810e8b4:	b580      	push	{r7, lr}
 810e8b6:	b084      	sub	sp, #16
 810e8b8:	af00      	add	r7, sp, #0
 810e8ba:	6078      	str	r0, [r7, #4]
 810e8bc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 810e8be:	f7fd fef3 	bl	810c6a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 810e8c2:	4b1e      	ldr	r3, [pc, #120]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e8c4:	681b      	ldr	r3, [r3, #0]
 810e8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e8c8:	2b00      	cmp	r3, #0
 810e8ca:	d113      	bne.n	810e8f4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810e8cc:	4b1b      	ldr	r3, [pc, #108]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e8ce:	681b      	ldr	r3, [r3, #0]
 810e8d0:	2201      	movs	r2, #1
 810e8d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 810e8d6:	683b      	ldr	r3, [r7, #0]
 810e8d8:	2b00      	cmp	r3, #0
 810e8da:	d00b      	beq.n	810e8f4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810e8dc:	2101      	movs	r1, #1
 810e8de:	6838      	ldr	r0, [r7, #0]
 810e8e0:	f000 f97e 	bl	810ebe0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810e8e4:	4b16      	ldr	r3, [pc, #88]	@ (810e940 <ulTaskNotifyTake+0x8c>)
 810e8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e8ea:	601a      	str	r2, [r3, #0]
 810e8ec:	f3bf 8f4f 	dsb	sy
 810e8f0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810e8f4:	f7fd ff0a 	bl	810c70c <vPortExitCritical>

		taskENTER_CRITICAL();
 810e8f8:	f7fd fed6 	bl	810c6a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 810e8fc:	4b0f      	ldr	r3, [pc, #60]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e8fe:	681b      	ldr	r3, [r3, #0]
 810e900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e902:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 810e904:	68fb      	ldr	r3, [r7, #12]
 810e906:	2b00      	cmp	r3, #0
 810e908:	d00c      	beq.n	810e924 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 810e90a:	687b      	ldr	r3, [r7, #4]
 810e90c:	2b00      	cmp	r3, #0
 810e90e:	d004      	beq.n	810e91a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 810e910:	4b0a      	ldr	r3, [pc, #40]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e912:	681b      	ldr	r3, [r3, #0]
 810e914:	2200      	movs	r2, #0
 810e916:	655a      	str	r2, [r3, #84]	@ 0x54
 810e918:	e004      	b.n	810e924 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 810e91a:	4b08      	ldr	r3, [pc, #32]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e91c:	681b      	ldr	r3, [r3, #0]
 810e91e:	68fa      	ldr	r2, [r7, #12]
 810e920:	3a01      	subs	r2, #1
 810e922:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810e924:	4b05      	ldr	r3, [pc, #20]	@ (810e93c <ulTaskNotifyTake+0x88>)
 810e926:	681b      	ldr	r3, [r3, #0]
 810e928:	2200      	movs	r2, #0
 810e92a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 810e92e:	f7fd feed 	bl	810c70c <vPortExitCritical>

		return ulReturn;
 810e932:	68fb      	ldr	r3, [r7, #12]
	}
 810e934:	4618      	mov	r0, r3
 810e936:	3710      	adds	r7, #16
 810e938:	46bd      	mov	sp, r7
 810e93a:	bd80      	pop	{r7, pc}
 810e93c:	1000491c 	.word	0x1000491c
 810e940:	e000ed04 	.word	0xe000ed04

0810e944 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 810e944:	b580      	push	{r7, lr}
 810e946:	b08a      	sub	sp, #40	@ 0x28
 810e948:	af00      	add	r7, sp, #0
 810e94a:	60f8      	str	r0, [r7, #12]
 810e94c:	60b9      	str	r1, [r7, #8]
 810e94e:	603b      	str	r3, [r7, #0]
 810e950:	4613      	mov	r3, r2
 810e952:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 810e954:	2301      	movs	r3, #1
 810e956:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 810e958:	68fb      	ldr	r3, [r7, #12]
 810e95a:	2b00      	cmp	r3, #0
 810e95c:	d10b      	bne.n	810e976 <xTaskGenericNotify+0x32>
	__asm volatile
 810e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e962:	f383 8811 	msr	BASEPRI, r3
 810e966:	f3bf 8f6f 	isb	sy
 810e96a:	f3bf 8f4f 	dsb	sy
 810e96e:	61bb      	str	r3, [r7, #24]
}
 810e970:	bf00      	nop
 810e972:	bf00      	nop
 810e974:	e7fd      	b.n	810e972 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 810e976:	68fb      	ldr	r3, [r7, #12]
 810e978:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 810e97a:	f7fd fe95 	bl	810c6a8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 810e97e:	683b      	ldr	r3, [r7, #0]
 810e980:	2b00      	cmp	r3, #0
 810e982:	d003      	beq.n	810e98c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810e984:	6a3b      	ldr	r3, [r7, #32]
 810e986:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810e988:	683b      	ldr	r3, [r7, #0]
 810e98a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810e98c:	6a3b      	ldr	r3, [r7, #32]
 810e98e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 810e992:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810e994:	6a3b      	ldr	r3, [r7, #32]
 810e996:	2202      	movs	r2, #2
 810e998:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 810e99c:	79fb      	ldrb	r3, [r7, #7]
 810e99e:	2b04      	cmp	r3, #4
 810e9a0:	d827      	bhi.n	810e9f2 <xTaskGenericNotify+0xae>
 810e9a2:	a201      	add	r2, pc, #4	@ (adr r2, 810e9a8 <xTaskGenericNotify+0x64>)
 810e9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e9a8:	0810ea15 	.word	0x0810ea15
 810e9ac:	0810e9bd 	.word	0x0810e9bd
 810e9b0:	0810e9cb 	.word	0x0810e9cb
 810e9b4:	0810e9d7 	.word	0x0810e9d7
 810e9b8:	0810e9df 	.word	0x0810e9df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810e9bc:	6a3b      	ldr	r3, [r7, #32]
 810e9be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810e9c0:	68bb      	ldr	r3, [r7, #8]
 810e9c2:	431a      	orrs	r2, r3
 810e9c4:	6a3b      	ldr	r3, [r7, #32]
 810e9c6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810e9c8:	e027      	b.n	810ea1a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810e9ca:	6a3b      	ldr	r3, [r7, #32]
 810e9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e9ce:	1c5a      	adds	r2, r3, #1
 810e9d0:	6a3b      	ldr	r3, [r7, #32]
 810e9d2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810e9d4:	e021      	b.n	810ea1a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810e9d6:	6a3b      	ldr	r3, [r7, #32]
 810e9d8:	68ba      	ldr	r2, [r7, #8]
 810e9da:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810e9dc:	e01d      	b.n	810ea1a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810e9de:	7ffb      	ldrb	r3, [r7, #31]
 810e9e0:	2b02      	cmp	r3, #2
 810e9e2:	d003      	beq.n	810e9ec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810e9e4:	6a3b      	ldr	r3, [r7, #32]
 810e9e6:	68ba      	ldr	r2, [r7, #8]
 810e9e8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810e9ea:	e016      	b.n	810ea1a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 810e9ec:	2300      	movs	r3, #0
 810e9ee:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 810e9f0:	e013      	b.n	810ea1a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810e9f2:	6a3b      	ldr	r3, [r7, #32]
 810e9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e9fa:	d00d      	beq.n	810ea18 <xTaskGenericNotify+0xd4>
	__asm volatile
 810e9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea00:	f383 8811 	msr	BASEPRI, r3
 810ea04:	f3bf 8f6f 	isb	sy
 810ea08:	f3bf 8f4f 	dsb	sy
 810ea0c:	617b      	str	r3, [r7, #20]
}
 810ea0e:	bf00      	nop
 810ea10:	bf00      	nop
 810ea12:	e7fd      	b.n	810ea10 <xTaskGenericNotify+0xcc>
					break;
 810ea14:	bf00      	nop
 810ea16:	e000      	b.n	810ea1a <xTaskGenericNotify+0xd6>

					break;
 810ea18:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810ea1a:	7ffb      	ldrb	r3, [r7, #31]
 810ea1c:	2b01      	cmp	r3, #1
 810ea1e:	d13b      	bne.n	810ea98 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ea20:	6a3b      	ldr	r3, [r7, #32]
 810ea22:	3304      	adds	r3, #4
 810ea24:	4618      	mov	r0, r3
 810ea26:	f7fd fce3 	bl	810c3f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 810ea2a:	6a3b      	ldr	r3, [r7, #32]
 810ea2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea2e:	4b1e      	ldr	r3, [pc, #120]	@ (810eaa8 <xTaskGenericNotify+0x164>)
 810ea30:	681b      	ldr	r3, [r3, #0]
 810ea32:	429a      	cmp	r2, r3
 810ea34:	d903      	bls.n	810ea3e <xTaskGenericNotify+0xfa>
 810ea36:	6a3b      	ldr	r3, [r7, #32]
 810ea38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ea3a:	4a1b      	ldr	r2, [pc, #108]	@ (810eaa8 <xTaskGenericNotify+0x164>)
 810ea3c:	6013      	str	r3, [r2, #0]
 810ea3e:	6a3b      	ldr	r3, [r7, #32]
 810ea40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea42:	4613      	mov	r3, r2
 810ea44:	009b      	lsls	r3, r3, #2
 810ea46:	4413      	add	r3, r2
 810ea48:	009b      	lsls	r3, r3, #2
 810ea4a:	4a18      	ldr	r2, [pc, #96]	@ (810eaac <xTaskGenericNotify+0x168>)
 810ea4c:	441a      	add	r2, r3
 810ea4e:	6a3b      	ldr	r3, [r7, #32]
 810ea50:	3304      	adds	r3, #4
 810ea52:	4619      	mov	r1, r3
 810ea54:	4610      	mov	r0, r2
 810ea56:	f7fd fc6e 	bl	810c336 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810ea5a:	6a3b      	ldr	r3, [r7, #32]
 810ea5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ea5e:	2b00      	cmp	r3, #0
 810ea60:	d00b      	beq.n	810ea7a <xTaskGenericNotify+0x136>
	__asm volatile
 810ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea66:	f383 8811 	msr	BASEPRI, r3
 810ea6a:	f3bf 8f6f 	isb	sy
 810ea6e:	f3bf 8f4f 	dsb	sy
 810ea72:	613b      	str	r3, [r7, #16]
}
 810ea74:	bf00      	nop
 810ea76:	bf00      	nop
 810ea78:	e7fd      	b.n	810ea76 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ea7a:	6a3b      	ldr	r3, [r7, #32]
 810ea7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea7e:	4b0c      	ldr	r3, [pc, #48]	@ (810eab0 <xTaskGenericNotify+0x16c>)
 810ea80:	681b      	ldr	r3, [r3, #0]
 810ea82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ea84:	429a      	cmp	r2, r3
 810ea86:	d907      	bls.n	810ea98 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 810ea88:	4b0a      	ldr	r3, [pc, #40]	@ (810eab4 <xTaskGenericNotify+0x170>)
 810ea8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ea8e:	601a      	str	r2, [r3, #0]
 810ea90:	f3bf 8f4f 	dsb	sy
 810ea94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ea98:	f7fd fe38 	bl	810c70c <vPortExitCritical>

		return xReturn;
 810ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 810ea9e:	4618      	mov	r0, r3
 810eaa0:	3728      	adds	r7, #40	@ 0x28
 810eaa2:	46bd      	mov	sp, r7
 810eaa4:	bd80      	pop	{r7, pc}
 810eaa6:	bf00      	nop
 810eaa8:	10004df8 	.word	0x10004df8
 810eaac:	10004920 	.word	0x10004920
 810eab0:	1000491c 	.word	0x1000491c
 810eab4:	e000ed04 	.word	0xe000ed04

0810eab8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 810eab8:	b580      	push	{r7, lr}
 810eaba:	b08a      	sub	sp, #40	@ 0x28
 810eabc:	af00      	add	r7, sp, #0
 810eabe:	6078      	str	r0, [r7, #4]
 810eac0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810eac2:	687b      	ldr	r3, [r7, #4]
 810eac4:	2b00      	cmp	r3, #0
 810eac6:	d10b      	bne.n	810eae0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 810eac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eacc:	f383 8811 	msr	BASEPRI, r3
 810ead0:	f3bf 8f6f 	isb	sy
 810ead4:	f3bf 8f4f 	dsb	sy
 810ead8:	61bb      	str	r3, [r7, #24]
}
 810eada:	bf00      	nop
 810eadc:	bf00      	nop
 810eade:	e7fd      	b.n	810eadc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810eae0:	f7fd fec2 	bl	810c868 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810eae4:	687b      	ldr	r3, [r7, #4]
 810eae6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 810eae8:	f3ef 8211 	mrs	r2, BASEPRI
 810eaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eaf0:	f383 8811 	msr	BASEPRI, r3
 810eaf4:	f3bf 8f6f 	isb	sy
 810eaf8:	f3bf 8f4f 	dsb	sy
 810eafc:	617a      	str	r2, [r7, #20]
 810eafe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810eb00:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810eb02:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810eb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 810eb0a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb0e:	2202      	movs	r2, #2
 810eb10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 810eb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810eb18:	1c5a      	adds	r2, r3, #1
 810eb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb1c:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810eb1e:	7ffb      	ldrb	r3, [r7, #31]
 810eb20:	2b01      	cmp	r3, #1
 810eb22:	d147      	bne.n	810ebb4 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810eb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810eb28:	2b00      	cmp	r3, #0
 810eb2a:	d00b      	beq.n	810eb44 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 810eb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb30:	f383 8811 	msr	BASEPRI, r3
 810eb34:	f3bf 8f6f 	isb	sy
 810eb38:	f3bf 8f4f 	dsb	sy
 810eb3c:	60fb      	str	r3, [r7, #12]
}
 810eb3e:	bf00      	nop
 810eb40:	bf00      	nop
 810eb42:	e7fd      	b.n	810eb40 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810eb44:	4b20      	ldr	r3, [pc, #128]	@ (810ebc8 <vTaskNotifyGiveFromISR+0x110>)
 810eb46:	681b      	ldr	r3, [r3, #0]
 810eb48:	2b00      	cmp	r3, #0
 810eb4a:	d11d      	bne.n	810eb88 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810eb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb4e:	3304      	adds	r3, #4
 810eb50:	4618      	mov	r0, r3
 810eb52:	f7fd fc4d 	bl	810c3f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eb5a:	4b1c      	ldr	r3, [pc, #112]	@ (810ebcc <vTaskNotifyGiveFromISR+0x114>)
 810eb5c:	681b      	ldr	r3, [r3, #0]
 810eb5e:	429a      	cmp	r2, r3
 810eb60:	d903      	bls.n	810eb6a <vTaskNotifyGiveFromISR+0xb2>
 810eb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eb66:	4a19      	ldr	r2, [pc, #100]	@ (810ebcc <vTaskNotifyGiveFromISR+0x114>)
 810eb68:	6013      	str	r3, [r2, #0]
 810eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eb6e:	4613      	mov	r3, r2
 810eb70:	009b      	lsls	r3, r3, #2
 810eb72:	4413      	add	r3, r2
 810eb74:	009b      	lsls	r3, r3, #2
 810eb76:	4a16      	ldr	r2, [pc, #88]	@ (810ebd0 <vTaskNotifyGiveFromISR+0x118>)
 810eb78:	441a      	add	r2, r3
 810eb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb7c:	3304      	adds	r3, #4
 810eb7e:	4619      	mov	r1, r3
 810eb80:	4610      	mov	r0, r2
 810eb82:	f7fd fbd8 	bl	810c336 <vListInsertEnd>
 810eb86:	e005      	b.n	810eb94 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 810eb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb8a:	3318      	adds	r3, #24
 810eb8c:	4619      	mov	r1, r3
 810eb8e:	4811      	ldr	r0, [pc, #68]	@ (810ebd4 <vTaskNotifyGiveFromISR+0x11c>)
 810eb90:	f7fd fbd1 	bl	810c336 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810eb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eb98:	4b0f      	ldr	r3, [pc, #60]	@ (810ebd8 <vTaskNotifyGiveFromISR+0x120>)
 810eb9a:	681b      	ldr	r3, [r3, #0]
 810eb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eb9e:	429a      	cmp	r2, r3
 810eba0:	d908      	bls.n	810ebb4 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 810eba2:	683b      	ldr	r3, [r7, #0]
 810eba4:	2b00      	cmp	r3, #0
 810eba6:	d002      	beq.n	810ebae <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810eba8:	683b      	ldr	r3, [r7, #0]
 810ebaa:	2201      	movs	r2, #1
 810ebac:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810ebae:	4b0b      	ldr	r3, [pc, #44]	@ (810ebdc <vTaskNotifyGiveFromISR+0x124>)
 810ebb0:	2201      	movs	r2, #1
 810ebb2:	601a      	str	r2, [r3, #0]
 810ebb4:	6a3b      	ldr	r3, [r7, #32]
 810ebb6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 810ebb8:	68bb      	ldr	r3, [r7, #8]
 810ebba:	f383 8811 	msr	BASEPRI, r3
}
 810ebbe:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 810ebc0:	bf00      	nop
 810ebc2:	3728      	adds	r7, #40	@ 0x28
 810ebc4:	46bd      	mov	sp, r7
 810ebc6:	bd80      	pop	{r7, pc}
 810ebc8:	10004e18 	.word	0x10004e18
 810ebcc:	10004df8 	.word	0x10004df8
 810ebd0:	10004920 	.word	0x10004920
 810ebd4:	10004db0 	.word	0x10004db0
 810ebd8:	1000491c 	.word	0x1000491c
 810ebdc:	10004e04 	.word	0x10004e04

0810ebe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ebe0:	b580      	push	{r7, lr}
 810ebe2:	b084      	sub	sp, #16
 810ebe4:	af00      	add	r7, sp, #0
 810ebe6:	6078      	str	r0, [r7, #4]
 810ebe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ebea:	4b21      	ldr	r3, [pc, #132]	@ (810ec70 <prvAddCurrentTaskToDelayedList+0x90>)
 810ebec:	681b      	ldr	r3, [r3, #0]
 810ebee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ebf0:	4b20      	ldr	r3, [pc, #128]	@ (810ec74 <prvAddCurrentTaskToDelayedList+0x94>)
 810ebf2:	681b      	ldr	r3, [r3, #0]
 810ebf4:	3304      	adds	r3, #4
 810ebf6:	4618      	mov	r0, r3
 810ebf8:	f7fd fbfa 	bl	810c3f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ebfc:	687b      	ldr	r3, [r7, #4]
 810ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ec02:	d10a      	bne.n	810ec1a <prvAddCurrentTaskToDelayedList+0x3a>
 810ec04:	683b      	ldr	r3, [r7, #0]
 810ec06:	2b00      	cmp	r3, #0
 810ec08:	d007      	beq.n	810ec1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ec0a:	4b1a      	ldr	r3, [pc, #104]	@ (810ec74 <prvAddCurrentTaskToDelayedList+0x94>)
 810ec0c:	681b      	ldr	r3, [r3, #0]
 810ec0e:	3304      	adds	r3, #4
 810ec10:	4619      	mov	r1, r3
 810ec12:	4819      	ldr	r0, [pc, #100]	@ (810ec78 <prvAddCurrentTaskToDelayedList+0x98>)
 810ec14:	f7fd fb8f 	bl	810c336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810ec18:	e026      	b.n	810ec68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810ec1a:	68fa      	ldr	r2, [r7, #12]
 810ec1c:	687b      	ldr	r3, [r7, #4]
 810ec1e:	4413      	add	r3, r2
 810ec20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810ec22:	4b14      	ldr	r3, [pc, #80]	@ (810ec74 <prvAddCurrentTaskToDelayedList+0x94>)
 810ec24:	681b      	ldr	r3, [r3, #0]
 810ec26:	68ba      	ldr	r2, [r7, #8]
 810ec28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810ec2a:	68ba      	ldr	r2, [r7, #8]
 810ec2c:	68fb      	ldr	r3, [r7, #12]
 810ec2e:	429a      	cmp	r2, r3
 810ec30:	d209      	bcs.n	810ec46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ec32:	4b12      	ldr	r3, [pc, #72]	@ (810ec7c <prvAddCurrentTaskToDelayedList+0x9c>)
 810ec34:	681a      	ldr	r2, [r3, #0]
 810ec36:	4b0f      	ldr	r3, [pc, #60]	@ (810ec74 <prvAddCurrentTaskToDelayedList+0x94>)
 810ec38:	681b      	ldr	r3, [r3, #0]
 810ec3a:	3304      	adds	r3, #4
 810ec3c:	4619      	mov	r1, r3
 810ec3e:	4610      	mov	r0, r2
 810ec40:	f7fd fb9d 	bl	810c37e <vListInsert>
}
 810ec44:	e010      	b.n	810ec68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ec46:	4b0e      	ldr	r3, [pc, #56]	@ (810ec80 <prvAddCurrentTaskToDelayedList+0xa0>)
 810ec48:	681a      	ldr	r2, [r3, #0]
 810ec4a:	4b0a      	ldr	r3, [pc, #40]	@ (810ec74 <prvAddCurrentTaskToDelayedList+0x94>)
 810ec4c:	681b      	ldr	r3, [r3, #0]
 810ec4e:	3304      	adds	r3, #4
 810ec50:	4619      	mov	r1, r3
 810ec52:	4610      	mov	r0, r2
 810ec54:	f7fd fb93 	bl	810c37e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810ec58:	4b0a      	ldr	r3, [pc, #40]	@ (810ec84 <prvAddCurrentTaskToDelayedList+0xa4>)
 810ec5a:	681b      	ldr	r3, [r3, #0]
 810ec5c:	68ba      	ldr	r2, [r7, #8]
 810ec5e:	429a      	cmp	r2, r3
 810ec60:	d202      	bcs.n	810ec68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810ec62:	4a08      	ldr	r2, [pc, #32]	@ (810ec84 <prvAddCurrentTaskToDelayedList+0xa4>)
 810ec64:	68bb      	ldr	r3, [r7, #8]
 810ec66:	6013      	str	r3, [r2, #0]
}
 810ec68:	bf00      	nop
 810ec6a:	3710      	adds	r7, #16
 810ec6c:	46bd      	mov	sp, r7
 810ec6e:	bd80      	pop	{r7, pc}
 810ec70:	10004df4 	.word	0x10004df4
 810ec74:	1000491c 	.word	0x1000491c
 810ec78:	10004ddc 	.word	0x10004ddc
 810ec7c:	10004dac 	.word	0x10004dac
 810ec80:	10004da8 	.word	0x10004da8
 810ec84:	10004e10 	.word	0x10004e10

0810ec88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810ec88:	b580      	push	{r7, lr}
 810ec8a:	b08a      	sub	sp, #40	@ 0x28
 810ec8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810ec8e:	2300      	movs	r3, #0
 810ec90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810ec92:	f000 fb13 	bl	810f2bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810ec96:	4b1d      	ldr	r3, [pc, #116]	@ (810ed0c <xTimerCreateTimerTask+0x84>)
 810ec98:	681b      	ldr	r3, [r3, #0]
 810ec9a:	2b00      	cmp	r3, #0
 810ec9c:	d021      	beq.n	810ece2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810ec9e:	2300      	movs	r3, #0
 810eca0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810eca2:	2300      	movs	r3, #0
 810eca4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810eca6:	1d3a      	adds	r2, r7, #4
 810eca8:	f107 0108 	add.w	r1, r7, #8
 810ecac:	f107 030c 	add.w	r3, r7, #12
 810ecb0:	4618      	mov	r0, r3
 810ecb2:	f7fd f90b 	bl	810becc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810ecb6:	6879      	ldr	r1, [r7, #4]
 810ecb8:	68bb      	ldr	r3, [r7, #8]
 810ecba:	68fa      	ldr	r2, [r7, #12]
 810ecbc:	9202      	str	r2, [sp, #8]
 810ecbe:	9301      	str	r3, [sp, #4]
 810ecc0:	2302      	movs	r3, #2
 810ecc2:	9300      	str	r3, [sp, #0]
 810ecc4:	2300      	movs	r3, #0
 810ecc6:	460a      	mov	r2, r1
 810ecc8:	4911      	ldr	r1, [pc, #68]	@ (810ed10 <xTimerCreateTimerTask+0x88>)
 810ecca:	4812      	ldr	r0, [pc, #72]	@ (810ed14 <xTimerCreateTimerTask+0x8c>)
 810eccc:	f7fe fe3a 	bl	810d944 <xTaskCreateStatic>
 810ecd0:	4603      	mov	r3, r0
 810ecd2:	4a11      	ldr	r2, [pc, #68]	@ (810ed18 <xTimerCreateTimerTask+0x90>)
 810ecd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810ecd6:	4b10      	ldr	r3, [pc, #64]	@ (810ed18 <xTimerCreateTimerTask+0x90>)
 810ecd8:	681b      	ldr	r3, [r3, #0]
 810ecda:	2b00      	cmp	r3, #0
 810ecdc:	d001      	beq.n	810ece2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ecde:	2301      	movs	r3, #1
 810ece0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ece2:	697b      	ldr	r3, [r7, #20]
 810ece4:	2b00      	cmp	r3, #0
 810ece6:	d10b      	bne.n	810ed00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810ece8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecec:	f383 8811 	msr	BASEPRI, r3
 810ecf0:	f3bf 8f6f 	isb	sy
 810ecf4:	f3bf 8f4f 	dsb	sy
 810ecf8:	613b      	str	r3, [r7, #16]
}
 810ecfa:	bf00      	nop
 810ecfc:	bf00      	nop
 810ecfe:	e7fd      	b.n	810ecfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 810ed00:	697b      	ldr	r3, [r7, #20]
}
 810ed02:	4618      	mov	r0, r3
 810ed04:	3718      	adds	r7, #24
 810ed06:	46bd      	mov	sp, r7
 810ed08:	bd80      	pop	{r7, pc}
 810ed0a:	bf00      	nop
 810ed0c:	10004e4c 	.word	0x10004e4c
 810ed10:	081171ac 	.word	0x081171ac
 810ed14:	0810ee55 	.word	0x0810ee55
 810ed18:	10004e50 	.word	0x10004e50

0810ed1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810ed1c:	b580      	push	{r7, lr}
 810ed1e:	b08a      	sub	sp, #40	@ 0x28
 810ed20:	af00      	add	r7, sp, #0
 810ed22:	60f8      	str	r0, [r7, #12]
 810ed24:	60b9      	str	r1, [r7, #8]
 810ed26:	607a      	str	r2, [r7, #4]
 810ed28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810ed2a:	2300      	movs	r3, #0
 810ed2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810ed2e:	68fb      	ldr	r3, [r7, #12]
 810ed30:	2b00      	cmp	r3, #0
 810ed32:	d10b      	bne.n	810ed4c <xTimerGenericCommand+0x30>
	__asm volatile
 810ed34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed38:	f383 8811 	msr	BASEPRI, r3
 810ed3c:	f3bf 8f6f 	isb	sy
 810ed40:	f3bf 8f4f 	dsb	sy
 810ed44:	623b      	str	r3, [r7, #32]
}
 810ed46:	bf00      	nop
 810ed48:	bf00      	nop
 810ed4a:	e7fd      	b.n	810ed48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810ed4c:	4b19      	ldr	r3, [pc, #100]	@ (810edb4 <xTimerGenericCommand+0x98>)
 810ed4e:	681b      	ldr	r3, [r3, #0]
 810ed50:	2b00      	cmp	r3, #0
 810ed52:	d02a      	beq.n	810edaa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810ed54:	68bb      	ldr	r3, [r7, #8]
 810ed56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810ed58:	687b      	ldr	r3, [r7, #4]
 810ed5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810ed5c:	68fb      	ldr	r3, [r7, #12]
 810ed5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810ed60:	68bb      	ldr	r3, [r7, #8]
 810ed62:	2b05      	cmp	r3, #5
 810ed64:	dc18      	bgt.n	810ed98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810ed66:	f7ff fc17 	bl	810e598 <xTaskGetSchedulerState>
 810ed6a:	4603      	mov	r3, r0
 810ed6c:	2b02      	cmp	r3, #2
 810ed6e:	d109      	bne.n	810ed84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810ed70:	4b10      	ldr	r3, [pc, #64]	@ (810edb4 <xTimerGenericCommand+0x98>)
 810ed72:	6818      	ldr	r0, [r3, #0]
 810ed74:	f107 0110 	add.w	r1, r7, #16
 810ed78:	2300      	movs	r3, #0
 810ed7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ed7c:	f7fd ff6a 	bl	810cc54 <xQueueGenericSend>
 810ed80:	6278      	str	r0, [r7, #36]	@ 0x24
 810ed82:	e012      	b.n	810edaa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810ed84:	4b0b      	ldr	r3, [pc, #44]	@ (810edb4 <xTimerGenericCommand+0x98>)
 810ed86:	6818      	ldr	r0, [r3, #0]
 810ed88:	f107 0110 	add.w	r1, r7, #16
 810ed8c:	2300      	movs	r3, #0
 810ed8e:	2200      	movs	r2, #0
 810ed90:	f7fd ff60 	bl	810cc54 <xQueueGenericSend>
 810ed94:	6278      	str	r0, [r7, #36]	@ 0x24
 810ed96:	e008      	b.n	810edaa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810ed98:	4b06      	ldr	r3, [pc, #24]	@ (810edb4 <xTimerGenericCommand+0x98>)
 810ed9a:	6818      	ldr	r0, [r3, #0]
 810ed9c:	f107 0110 	add.w	r1, r7, #16
 810eda0:	2300      	movs	r3, #0
 810eda2:	683a      	ldr	r2, [r7, #0]
 810eda4:	f7fe f858 	bl	810ce58 <xQueueGenericSendFromISR>
 810eda8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810edaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810edac:	4618      	mov	r0, r3
 810edae:	3728      	adds	r7, #40	@ 0x28
 810edb0:	46bd      	mov	sp, r7
 810edb2:	bd80      	pop	{r7, pc}
 810edb4:	10004e4c 	.word	0x10004e4c

0810edb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810edb8:	b580      	push	{r7, lr}
 810edba:	b088      	sub	sp, #32
 810edbc:	af02      	add	r7, sp, #8
 810edbe:	6078      	str	r0, [r7, #4]
 810edc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810edc2:	4b23      	ldr	r3, [pc, #140]	@ (810ee50 <prvProcessExpiredTimer+0x98>)
 810edc4:	681b      	ldr	r3, [r3, #0]
 810edc6:	68db      	ldr	r3, [r3, #12]
 810edc8:	68db      	ldr	r3, [r3, #12]
 810edca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810edcc:	697b      	ldr	r3, [r7, #20]
 810edce:	3304      	adds	r3, #4
 810edd0:	4618      	mov	r0, r3
 810edd2:	f7fd fb0d 	bl	810c3f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810edd6:	697b      	ldr	r3, [r7, #20]
 810edd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810eddc:	f003 0304 	and.w	r3, r3, #4
 810ede0:	2b00      	cmp	r3, #0
 810ede2:	d023      	beq.n	810ee2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810ede4:	697b      	ldr	r3, [r7, #20]
 810ede6:	699a      	ldr	r2, [r3, #24]
 810ede8:	687b      	ldr	r3, [r7, #4]
 810edea:	18d1      	adds	r1, r2, r3
 810edec:	687b      	ldr	r3, [r7, #4]
 810edee:	683a      	ldr	r2, [r7, #0]
 810edf0:	6978      	ldr	r0, [r7, #20]
 810edf2:	f000 f8d5 	bl	810efa0 <prvInsertTimerInActiveList>
 810edf6:	4603      	mov	r3, r0
 810edf8:	2b00      	cmp	r3, #0
 810edfa:	d020      	beq.n	810ee3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810edfc:	2300      	movs	r3, #0
 810edfe:	9300      	str	r3, [sp, #0]
 810ee00:	2300      	movs	r3, #0
 810ee02:	687a      	ldr	r2, [r7, #4]
 810ee04:	2100      	movs	r1, #0
 810ee06:	6978      	ldr	r0, [r7, #20]
 810ee08:	f7ff ff88 	bl	810ed1c <xTimerGenericCommand>
 810ee0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810ee0e:	693b      	ldr	r3, [r7, #16]
 810ee10:	2b00      	cmp	r3, #0
 810ee12:	d114      	bne.n	810ee3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 810ee14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee18:	f383 8811 	msr	BASEPRI, r3
 810ee1c:	f3bf 8f6f 	isb	sy
 810ee20:	f3bf 8f4f 	dsb	sy
 810ee24:	60fb      	str	r3, [r7, #12]
}
 810ee26:	bf00      	nop
 810ee28:	bf00      	nop
 810ee2a:	e7fd      	b.n	810ee28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810ee2c:	697b      	ldr	r3, [r7, #20]
 810ee2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ee32:	f023 0301 	bic.w	r3, r3, #1
 810ee36:	b2da      	uxtb	r2, r3
 810ee38:	697b      	ldr	r3, [r7, #20]
 810ee3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ee3e:	697b      	ldr	r3, [r7, #20]
 810ee40:	6a1b      	ldr	r3, [r3, #32]
 810ee42:	6978      	ldr	r0, [r7, #20]
 810ee44:	4798      	blx	r3
}
 810ee46:	bf00      	nop
 810ee48:	3718      	adds	r7, #24
 810ee4a:	46bd      	mov	sp, r7
 810ee4c:	bd80      	pop	{r7, pc}
 810ee4e:	bf00      	nop
 810ee50:	10004e44 	.word	0x10004e44

0810ee54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810ee54:	b580      	push	{r7, lr}
 810ee56:	b084      	sub	sp, #16
 810ee58:	af00      	add	r7, sp, #0
 810ee5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810ee5c:	f107 0308 	add.w	r3, r7, #8
 810ee60:	4618      	mov	r0, r3
 810ee62:	f000 f859 	bl	810ef18 <prvGetNextExpireTime>
 810ee66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810ee68:	68bb      	ldr	r3, [r7, #8]
 810ee6a:	4619      	mov	r1, r3
 810ee6c:	68f8      	ldr	r0, [r7, #12]
 810ee6e:	f000 f805 	bl	810ee7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810ee72:	f000 f8d7 	bl	810f024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810ee76:	bf00      	nop
 810ee78:	e7f0      	b.n	810ee5c <prvTimerTask+0x8>
	...

0810ee7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810ee7c:	b580      	push	{r7, lr}
 810ee7e:	b084      	sub	sp, #16
 810ee80:	af00      	add	r7, sp, #0
 810ee82:	6078      	str	r0, [r7, #4]
 810ee84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810ee86:	f7fe ffa1 	bl	810ddcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810ee8a:	f107 0308 	add.w	r3, r7, #8
 810ee8e:	4618      	mov	r0, r3
 810ee90:	f000 f866 	bl	810ef60 <prvSampleTimeNow>
 810ee94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810ee96:	68bb      	ldr	r3, [r7, #8]
 810ee98:	2b00      	cmp	r3, #0
 810ee9a:	d130      	bne.n	810eefe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810ee9c:	683b      	ldr	r3, [r7, #0]
 810ee9e:	2b00      	cmp	r3, #0
 810eea0:	d10a      	bne.n	810eeb8 <prvProcessTimerOrBlockTask+0x3c>
 810eea2:	687a      	ldr	r2, [r7, #4]
 810eea4:	68fb      	ldr	r3, [r7, #12]
 810eea6:	429a      	cmp	r2, r3
 810eea8:	d806      	bhi.n	810eeb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810eeaa:	f7fe ff9d 	bl	810dde8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810eeae:	68f9      	ldr	r1, [r7, #12]
 810eeb0:	6878      	ldr	r0, [r7, #4]
 810eeb2:	f7ff ff81 	bl	810edb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810eeb6:	e024      	b.n	810ef02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810eeb8:	683b      	ldr	r3, [r7, #0]
 810eeba:	2b00      	cmp	r3, #0
 810eebc:	d008      	beq.n	810eed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810eebe:	4b13      	ldr	r3, [pc, #76]	@ (810ef0c <prvProcessTimerOrBlockTask+0x90>)
 810eec0:	681b      	ldr	r3, [r3, #0]
 810eec2:	681b      	ldr	r3, [r3, #0]
 810eec4:	2b00      	cmp	r3, #0
 810eec6:	d101      	bne.n	810eecc <prvProcessTimerOrBlockTask+0x50>
 810eec8:	2301      	movs	r3, #1
 810eeca:	e000      	b.n	810eece <prvProcessTimerOrBlockTask+0x52>
 810eecc:	2300      	movs	r3, #0
 810eece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810eed0:	4b0f      	ldr	r3, [pc, #60]	@ (810ef10 <prvProcessTimerOrBlockTask+0x94>)
 810eed2:	6818      	ldr	r0, [r3, #0]
 810eed4:	687a      	ldr	r2, [r7, #4]
 810eed6:	68fb      	ldr	r3, [r7, #12]
 810eed8:	1ad3      	subs	r3, r2, r3
 810eeda:	683a      	ldr	r2, [r7, #0]
 810eedc:	4619      	mov	r1, r3
 810eede:	f7fe fcfd 	bl	810d8dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810eee2:	f7fe ff81 	bl	810dde8 <xTaskResumeAll>
 810eee6:	4603      	mov	r3, r0
 810eee8:	2b00      	cmp	r3, #0
 810eeea:	d10a      	bne.n	810ef02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810eeec:	4b09      	ldr	r3, [pc, #36]	@ (810ef14 <prvProcessTimerOrBlockTask+0x98>)
 810eeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810eef2:	601a      	str	r2, [r3, #0]
 810eef4:	f3bf 8f4f 	dsb	sy
 810eef8:	f3bf 8f6f 	isb	sy
}
 810eefc:	e001      	b.n	810ef02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810eefe:	f7fe ff73 	bl	810dde8 <xTaskResumeAll>
}
 810ef02:	bf00      	nop
 810ef04:	3710      	adds	r7, #16
 810ef06:	46bd      	mov	sp, r7
 810ef08:	bd80      	pop	{r7, pc}
 810ef0a:	bf00      	nop
 810ef0c:	10004e48 	.word	0x10004e48
 810ef10:	10004e4c 	.word	0x10004e4c
 810ef14:	e000ed04 	.word	0xe000ed04

0810ef18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810ef18:	b480      	push	{r7}
 810ef1a:	b085      	sub	sp, #20
 810ef1c:	af00      	add	r7, sp, #0
 810ef1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810ef20:	4b0e      	ldr	r3, [pc, #56]	@ (810ef5c <prvGetNextExpireTime+0x44>)
 810ef22:	681b      	ldr	r3, [r3, #0]
 810ef24:	681b      	ldr	r3, [r3, #0]
 810ef26:	2b00      	cmp	r3, #0
 810ef28:	d101      	bne.n	810ef2e <prvGetNextExpireTime+0x16>
 810ef2a:	2201      	movs	r2, #1
 810ef2c:	e000      	b.n	810ef30 <prvGetNextExpireTime+0x18>
 810ef2e:	2200      	movs	r2, #0
 810ef30:	687b      	ldr	r3, [r7, #4]
 810ef32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810ef34:	687b      	ldr	r3, [r7, #4]
 810ef36:	681b      	ldr	r3, [r3, #0]
 810ef38:	2b00      	cmp	r3, #0
 810ef3a:	d105      	bne.n	810ef48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810ef3c:	4b07      	ldr	r3, [pc, #28]	@ (810ef5c <prvGetNextExpireTime+0x44>)
 810ef3e:	681b      	ldr	r3, [r3, #0]
 810ef40:	68db      	ldr	r3, [r3, #12]
 810ef42:	681b      	ldr	r3, [r3, #0]
 810ef44:	60fb      	str	r3, [r7, #12]
 810ef46:	e001      	b.n	810ef4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810ef48:	2300      	movs	r3, #0
 810ef4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810ef4c:	68fb      	ldr	r3, [r7, #12]
}
 810ef4e:	4618      	mov	r0, r3
 810ef50:	3714      	adds	r7, #20
 810ef52:	46bd      	mov	sp, r7
 810ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef58:	4770      	bx	lr
 810ef5a:	bf00      	nop
 810ef5c:	10004e44 	.word	0x10004e44

0810ef60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810ef60:	b580      	push	{r7, lr}
 810ef62:	b084      	sub	sp, #16
 810ef64:	af00      	add	r7, sp, #0
 810ef66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810ef68:	f7fe ffdc 	bl	810df24 <xTaskGetTickCount>
 810ef6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810ef6e:	4b0b      	ldr	r3, [pc, #44]	@ (810ef9c <prvSampleTimeNow+0x3c>)
 810ef70:	681b      	ldr	r3, [r3, #0]
 810ef72:	68fa      	ldr	r2, [r7, #12]
 810ef74:	429a      	cmp	r2, r3
 810ef76:	d205      	bcs.n	810ef84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810ef78:	f000 f93a 	bl	810f1f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810ef7c:	687b      	ldr	r3, [r7, #4]
 810ef7e:	2201      	movs	r2, #1
 810ef80:	601a      	str	r2, [r3, #0]
 810ef82:	e002      	b.n	810ef8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810ef84:	687b      	ldr	r3, [r7, #4]
 810ef86:	2200      	movs	r2, #0
 810ef88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810ef8a:	4a04      	ldr	r2, [pc, #16]	@ (810ef9c <prvSampleTimeNow+0x3c>)
 810ef8c:	68fb      	ldr	r3, [r7, #12]
 810ef8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810ef90:	68fb      	ldr	r3, [r7, #12]
}
 810ef92:	4618      	mov	r0, r3
 810ef94:	3710      	adds	r7, #16
 810ef96:	46bd      	mov	sp, r7
 810ef98:	bd80      	pop	{r7, pc}
 810ef9a:	bf00      	nop
 810ef9c:	10004e54 	.word	0x10004e54

0810efa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810efa0:	b580      	push	{r7, lr}
 810efa2:	b086      	sub	sp, #24
 810efa4:	af00      	add	r7, sp, #0
 810efa6:	60f8      	str	r0, [r7, #12]
 810efa8:	60b9      	str	r1, [r7, #8]
 810efaa:	607a      	str	r2, [r7, #4]
 810efac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810efae:	2300      	movs	r3, #0
 810efb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810efb2:	68fb      	ldr	r3, [r7, #12]
 810efb4:	68ba      	ldr	r2, [r7, #8]
 810efb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810efb8:	68fb      	ldr	r3, [r7, #12]
 810efba:	68fa      	ldr	r2, [r7, #12]
 810efbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810efbe:	68ba      	ldr	r2, [r7, #8]
 810efc0:	687b      	ldr	r3, [r7, #4]
 810efc2:	429a      	cmp	r2, r3
 810efc4:	d812      	bhi.n	810efec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810efc6:	687a      	ldr	r2, [r7, #4]
 810efc8:	683b      	ldr	r3, [r7, #0]
 810efca:	1ad2      	subs	r2, r2, r3
 810efcc:	68fb      	ldr	r3, [r7, #12]
 810efce:	699b      	ldr	r3, [r3, #24]
 810efd0:	429a      	cmp	r2, r3
 810efd2:	d302      	bcc.n	810efda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810efd4:	2301      	movs	r3, #1
 810efd6:	617b      	str	r3, [r7, #20]
 810efd8:	e01b      	b.n	810f012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810efda:	4b10      	ldr	r3, [pc, #64]	@ (810f01c <prvInsertTimerInActiveList+0x7c>)
 810efdc:	681a      	ldr	r2, [r3, #0]
 810efde:	68fb      	ldr	r3, [r7, #12]
 810efe0:	3304      	adds	r3, #4
 810efe2:	4619      	mov	r1, r3
 810efe4:	4610      	mov	r0, r2
 810efe6:	f7fd f9ca 	bl	810c37e <vListInsert>
 810efea:	e012      	b.n	810f012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810efec:	687a      	ldr	r2, [r7, #4]
 810efee:	683b      	ldr	r3, [r7, #0]
 810eff0:	429a      	cmp	r2, r3
 810eff2:	d206      	bcs.n	810f002 <prvInsertTimerInActiveList+0x62>
 810eff4:	68ba      	ldr	r2, [r7, #8]
 810eff6:	683b      	ldr	r3, [r7, #0]
 810eff8:	429a      	cmp	r2, r3
 810effa:	d302      	bcc.n	810f002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810effc:	2301      	movs	r3, #1
 810effe:	617b      	str	r3, [r7, #20]
 810f000:	e007      	b.n	810f012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f002:	4b07      	ldr	r3, [pc, #28]	@ (810f020 <prvInsertTimerInActiveList+0x80>)
 810f004:	681a      	ldr	r2, [r3, #0]
 810f006:	68fb      	ldr	r3, [r7, #12]
 810f008:	3304      	adds	r3, #4
 810f00a:	4619      	mov	r1, r3
 810f00c:	4610      	mov	r0, r2
 810f00e:	f7fd f9b6 	bl	810c37e <vListInsert>
		}
	}

	return xProcessTimerNow;
 810f012:	697b      	ldr	r3, [r7, #20]
}
 810f014:	4618      	mov	r0, r3
 810f016:	3718      	adds	r7, #24
 810f018:	46bd      	mov	sp, r7
 810f01a:	bd80      	pop	{r7, pc}
 810f01c:	10004e48 	.word	0x10004e48
 810f020:	10004e44 	.word	0x10004e44

0810f024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810f024:	b580      	push	{r7, lr}
 810f026:	b08e      	sub	sp, #56	@ 0x38
 810f028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f02a:	e0ce      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810f02c:	687b      	ldr	r3, [r7, #4]
 810f02e:	2b00      	cmp	r3, #0
 810f030:	da19      	bge.n	810f066 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810f032:	1d3b      	adds	r3, r7, #4
 810f034:	3304      	adds	r3, #4
 810f036:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810f038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f03a:	2b00      	cmp	r3, #0
 810f03c:	d10b      	bne.n	810f056 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810f03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f042:	f383 8811 	msr	BASEPRI, r3
 810f046:	f3bf 8f6f 	isb	sy
 810f04a:	f3bf 8f4f 	dsb	sy
 810f04e:	61fb      	str	r3, [r7, #28]
}
 810f050:	bf00      	nop
 810f052:	bf00      	nop
 810f054:	e7fd      	b.n	810f052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810f056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f058:	681b      	ldr	r3, [r3, #0]
 810f05a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f05c:	6850      	ldr	r0, [r2, #4]
 810f05e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f060:	6892      	ldr	r2, [r2, #8]
 810f062:	4611      	mov	r1, r2
 810f064:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810f066:	687b      	ldr	r3, [r7, #4]
 810f068:	2b00      	cmp	r3, #0
 810f06a:	f2c0 80ae 	blt.w	810f1ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810f06e:	68fb      	ldr	r3, [r7, #12]
 810f070:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810f072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f074:	695b      	ldr	r3, [r3, #20]
 810f076:	2b00      	cmp	r3, #0
 810f078:	d004      	beq.n	810f084 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f07c:	3304      	adds	r3, #4
 810f07e:	4618      	mov	r0, r3
 810f080:	f7fd f9b6 	bl	810c3f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f084:	463b      	mov	r3, r7
 810f086:	4618      	mov	r0, r3
 810f088:	f7ff ff6a 	bl	810ef60 <prvSampleTimeNow>
 810f08c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810f08e:	687b      	ldr	r3, [r7, #4]
 810f090:	2b09      	cmp	r3, #9
 810f092:	f200 8097 	bhi.w	810f1c4 <prvProcessReceivedCommands+0x1a0>
 810f096:	a201      	add	r2, pc, #4	@ (adr r2, 810f09c <prvProcessReceivedCommands+0x78>)
 810f098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f09c:	0810f0c5 	.word	0x0810f0c5
 810f0a0:	0810f0c5 	.word	0x0810f0c5
 810f0a4:	0810f0c5 	.word	0x0810f0c5
 810f0a8:	0810f13b 	.word	0x0810f13b
 810f0ac:	0810f14f 	.word	0x0810f14f
 810f0b0:	0810f19b 	.word	0x0810f19b
 810f0b4:	0810f0c5 	.word	0x0810f0c5
 810f0b8:	0810f0c5 	.word	0x0810f0c5
 810f0bc:	0810f13b 	.word	0x0810f13b
 810f0c0:	0810f14f 	.word	0x0810f14f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f0ca:	f043 0301 	orr.w	r3, r3, #1
 810f0ce:	b2da      	uxtb	r2, r3
 810f0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810f0d6:	68ba      	ldr	r2, [r7, #8]
 810f0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0da:	699b      	ldr	r3, [r3, #24]
 810f0dc:	18d1      	adds	r1, r2, r3
 810f0de:	68bb      	ldr	r3, [r7, #8]
 810f0e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f0e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f0e4:	f7ff ff5c 	bl	810efa0 <prvInsertTimerInActiveList>
 810f0e8:	4603      	mov	r3, r0
 810f0ea:	2b00      	cmp	r3, #0
 810f0ec:	d06c      	beq.n	810f1c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0f0:	6a1b      	ldr	r3, [r3, #32]
 810f0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f0f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f0fc:	f003 0304 	and.w	r3, r3, #4
 810f100:	2b00      	cmp	r3, #0
 810f102:	d061      	beq.n	810f1c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810f104:	68ba      	ldr	r2, [r7, #8]
 810f106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f108:	699b      	ldr	r3, [r3, #24]
 810f10a:	441a      	add	r2, r3
 810f10c:	2300      	movs	r3, #0
 810f10e:	9300      	str	r3, [sp, #0]
 810f110:	2300      	movs	r3, #0
 810f112:	2100      	movs	r1, #0
 810f114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f116:	f7ff fe01 	bl	810ed1c <xTimerGenericCommand>
 810f11a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810f11c:	6a3b      	ldr	r3, [r7, #32]
 810f11e:	2b00      	cmp	r3, #0
 810f120:	d152      	bne.n	810f1c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f126:	f383 8811 	msr	BASEPRI, r3
 810f12a:	f3bf 8f6f 	isb	sy
 810f12e:	f3bf 8f4f 	dsb	sy
 810f132:	61bb      	str	r3, [r7, #24]
}
 810f134:	bf00      	nop
 810f136:	bf00      	nop
 810f138:	e7fd      	b.n	810f136 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f13c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f140:	f023 0301 	bic.w	r3, r3, #1
 810f144:	b2da      	uxtb	r2, r3
 810f146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f148:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810f14c:	e03d      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f150:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f154:	f043 0301 	orr.w	r3, r3, #1
 810f158:	b2da      	uxtb	r2, r3
 810f15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f15c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810f160:	68ba      	ldr	r2, [r7, #8]
 810f162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f164:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810f166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f168:	699b      	ldr	r3, [r3, #24]
 810f16a:	2b00      	cmp	r3, #0
 810f16c:	d10b      	bne.n	810f186 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810f16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f172:	f383 8811 	msr	BASEPRI, r3
 810f176:	f3bf 8f6f 	isb	sy
 810f17a:	f3bf 8f4f 	dsb	sy
 810f17e:	617b      	str	r3, [r7, #20]
}
 810f180:	bf00      	nop
 810f182:	bf00      	nop
 810f184:	e7fd      	b.n	810f182 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f188:	699a      	ldr	r2, [r3, #24]
 810f18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f18c:	18d1      	adds	r1, r2, r3
 810f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f194:	f7ff ff04 	bl	810efa0 <prvInsertTimerInActiveList>
					break;
 810f198:	e017      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810f19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f19c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f1a0:	f003 0302 	and.w	r3, r3, #2
 810f1a4:	2b00      	cmp	r3, #0
 810f1a6:	d103      	bne.n	810f1b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810f1a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f1aa:	f7fc ff77 	bl	810c09c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810f1ae:	e00c      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f1b6:	f023 0301 	bic.w	r3, r3, #1
 810f1ba:	b2da      	uxtb	r2, r3
 810f1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810f1c2:	e002      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810f1c4:	bf00      	nop
 810f1c6:	e000      	b.n	810f1ca <prvProcessReceivedCommands+0x1a6>
					break;
 810f1c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f1ca:	4b08      	ldr	r3, [pc, #32]	@ (810f1ec <prvProcessReceivedCommands+0x1c8>)
 810f1cc:	681b      	ldr	r3, [r3, #0]
 810f1ce:	1d39      	adds	r1, r7, #4
 810f1d0:	2200      	movs	r2, #0
 810f1d2:	4618      	mov	r0, r3
 810f1d4:	f7fd ff6e 	bl	810d0b4 <xQueueReceive>
 810f1d8:	4603      	mov	r3, r0
 810f1da:	2b00      	cmp	r3, #0
 810f1dc:	f47f af26 	bne.w	810f02c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810f1e0:	bf00      	nop
 810f1e2:	bf00      	nop
 810f1e4:	3730      	adds	r7, #48	@ 0x30
 810f1e6:	46bd      	mov	sp, r7
 810f1e8:	bd80      	pop	{r7, pc}
 810f1ea:	bf00      	nop
 810f1ec:	10004e4c 	.word	0x10004e4c

0810f1f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810f1f0:	b580      	push	{r7, lr}
 810f1f2:	b088      	sub	sp, #32
 810f1f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f1f6:	e049      	b.n	810f28c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f1f8:	4b2e      	ldr	r3, [pc, #184]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f1fa:	681b      	ldr	r3, [r3, #0]
 810f1fc:	68db      	ldr	r3, [r3, #12]
 810f1fe:	681b      	ldr	r3, [r3, #0]
 810f200:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f202:	4b2c      	ldr	r3, [pc, #176]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f204:	681b      	ldr	r3, [r3, #0]
 810f206:	68db      	ldr	r3, [r3, #12]
 810f208:	68db      	ldr	r3, [r3, #12]
 810f20a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f20c:	68fb      	ldr	r3, [r7, #12]
 810f20e:	3304      	adds	r3, #4
 810f210:	4618      	mov	r0, r3
 810f212:	f7fd f8ed 	bl	810c3f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f216:	68fb      	ldr	r3, [r7, #12]
 810f218:	6a1b      	ldr	r3, [r3, #32]
 810f21a:	68f8      	ldr	r0, [r7, #12]
 810f21c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f21e:	68fb      	ldr	r3, [r7, #12]
 810f220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f224:	f003 0304 	and.w	r3, r3, #4
 810f228:	2b00      	cmp	r3, #0
 810f22a:	d02f      	beq.n	810f28c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810f22c:	68fb      	ldr	r3, [r7, #12]
 810f22e:	699b      	ldr	r3, [r3, #24]
 810f230:	693a      	ldr	r2, [r7, #16]
 810f232:	4413      	add	r3, r2
 810f234:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810f236:	68ba      	ldr	r2, [r7, #8]
 810f238:	693b      	ldr	r3, [r7, #16]
 810f23a:	429a      	cmp	r2, r3
 810f23c:	d90e      	bls.n	810f25c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810f23e:	68fb      	ldr	r3, [r7, #12]
 810f240:	68ba      	ldr	r2, [r7, #8]
 810f242:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f244:	68fb      	ldr	r3, [r7, #12]
 810f246:	68fa      	ldr	r2, [r7, #12]
 810f248:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f24a:	4b1a      	ldr	r3, [pc, #104]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f24c:	681a      	ldr	r2, [r3, #0]
 810f24e:	68fb      	ldr	r3, [r7, #12]
 810f250:	3304      	adds	r3, #4
 810f252:	4619      	mov	r1, r3
 810f254:	4610      	mov	r0, r2
 810f256:	f7fd f892 	bl	810c37e <vListInsert>
 810f25a:	e017      	b.n	810f28c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f25c:	2300      	movs	r3, #0
 810f25e:	9300      	str	r3, [sp, #0]
 810f260:	2300      	movs	r3, #0
 810f262:	693a      	ldr	r2, [r7, #16]
 810f264:	2100      	movs	r1, #0
 810f266:	68f8      	ldr	r0, [r7, #12]
 810f268:	f7ff fd58 	bl	810ed1c <xTimerGenericCommand>
 810f26c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810f26e:	687b      	ldr	r3, [r7, #4]
 810f270:	2b00      	cmp	r3, #0
 810f272:	d10b      	bne.n	810f28c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810f274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f278:	f383 8811 	msr	BASEPRI, r3
 810f27c:	f3bf 8f6f 	isb	sy
 810f280:	f3bf 8f4f 	dsb	sy
 810f284:	603b      	str	r3, [r7, #0]
}
 810f286:	bf00      	nop
 810f288:	bf00      	nop
 810f28a:	e7fd      	b.n	810f288 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f28c:	4b09      	ldr	r3, [pc, #36]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f28e:	681b      	ldr	r3, [r3, #0]
 810f290:	681b      	ldr	r3, [r3, #0]
 810f292:	2b00      	cmp	r3, #0
 810f294:	d1b0      	bne.n	810f1f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810f296:	4b07      	ldr	r3, [pc, #28]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f298:	681b      	ldr	r3, [r3, #0]
 810f29a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810f29c:	4b06      	ldr	r3, [pc, #24]	@ (810f2b8 <prvSwitchTimerLists+0xc8>)
 810f29e:	681b      	ldr	r3, [r3, #0]
 810f2a0:	4a04      	ldr	r2, [pc, #16]	@ (810f2b4 <prvSwitchTimerLists+0xc4>)
 810f2a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810f2a4:	4a04      	ldr	r2, [pc, #16]	@ (810f2b8 <prvSwitchTimerLists+0xc8>)
 810f2a6:	697b      	ldr	r3, [r7, #20]
 810f2a8:	6013      	str	r3, [r2, #0]
}
 810f2aa:	bf00      	nop
 810f2ac:	3718      	adds	r7, #24
 810f2ae:	46bd      	mov	sp, r7
 810f2b0:	bd80      	pop	{r7, pc}
 810f2b2:	bf00      	nop
 810f2b4:	10004e44 	.word	0x10004e44
 810f2b8:	10004e48 	.word	0x10004e48

0810f2bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810f2bc:	b580      	push	{r7, lr}
 810f2be:	b082      	sub	sp, #8
 810f2c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810f2c2:	f7fd f9f1 	bl	810c6a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810f2c6:	4b15      	ldr	r3, [pc, #84]	@ (810f31c <prvCheckForValidListAndQueue+0x60>)
 810f2c8:	681b      	ldr	r3, [r3, #0]
 810f2ca:	2b00      	cmp	r3, #0
 810f2cc:	d120      	bne.n	810f310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810f2ce:	4814      	ldr	r0, [pc, #80]	@ (810f320 <prvCheckForValidListAndQueue+0x64>)
 810f2d0:	f7fd f804 	bl	810c2dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810f2d4:	4813      	ldr	r0, [pc, #76]	@ (810f324 <prvCheckForValidListAndQueue+0x68>)
 810f2d6:	f7fd f801 	bl	810c2dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810f2da:	4b13      	ldr	r3, [pc, #76]	@ (810f328 <prvCheckForValidListAndQueue+0x6c>)
 810f2dc:	4a10      	ldr	r2, [pc, #64]	@ (810f320 <prvCheckForValidListAndQueue+0x64>)
 810f2de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810f2e0:	4b12      	ldr	r3, [pc, #72]	@ (810f32c <prvCheckForValidListAndQueue+0x70>)
 810f2e2:	4a10      	ldr	r2, [pc, #64]	@ (810f324 <prvCheckForValidListAndQueue+0x68>)
 810f2e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810f2e6:	2300      	movs	r3, #0
 810f2e8:	9300      	str	r3, [sp, #0]
 810f2ea:	4b11      	ldr	r3, [pc, #68]	@ (810f330 <prvCheckForValidListAndQueue+0x74>)
 810f2ec:	4a11      	ldr	r2, [pc, #68]	@ (810f334 <prvCheckForValidListAndQueue+0x78>)
 810f2ee:	2110      	movs	r1, #16
 810f2f0:	200a      	movs	r0, #10
 810f2f2:	f7fd fb65 	bl	810c9c0 <xQueueGenericCreateStatic>
 810f2f6:	4603      	mov	r3, r0
 810f2f8:	4a08      	ldr	r2, [pc, #32]	@ (810f31c <prvCheckForValidListAndQueue+0x60>)
 810f2fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810f2fc:	4b07      	ldr	r3, [pc, #28]	@ (810f31c <prvCheckForValidListAndQueue+0x60>)
 810f2fe:	681b      	ldr	r3, [r3, #0]
 810f300:	2b00      	cmp	r3, #0
 810f302:	d005      	beq.n	810f310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810f304:	4b05      	ldr	r3, [pc, #20]	@ (810f31c <prvCheckForValidListAndQueue+0x60>)
 810f306:	681b      	ldr	r3, [r3, #0]
 810f308:	490b      	ldr	r1, [pc, #44]	@ (810f338 <prvCheckForValidListAndQueue+0x7c>)
 810f30a:	4618      	mov	r0, r3
 810f30c:	f7fe fa92 	bl	810d834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f310:	f7fd f9fc 	bl	810c70c <vPortExitCritical>
}
 810f314:	bf00      	nop
 810f316:	46bd      	mov	sp, r7
 810f318:	bd80      	pop	{r7, pc}
 810f31a:	bf00      	nop
 810f31c:	10004e4c 	.word	0x10004e4c
 810f320:	10004e1c 	.word	0x10004e1c
 810f324:	10004e30 	.word	0x10004e30
 810f328:	10004e44 	.word	0x10004e44
 810f32c:	10004e48 	.word	0x10004e48
 810f330:	10004ef8 	.word	0x10004ef8
 810f334:	10004e58 	.word	0x10004e58
 810f338:	081171b4 	.word	0x081171b4

0810f33c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 810f33c:	b480      	push	{r7}
 810f33e:	b083      	sub	sp, #12
 810f340:	af00      	add	r7, sp, #0
 810f342:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810f344:	687b      	ldr	r3, [r7, #4]
 810f346:	687a      	ldr	r2, [r7, #4]
 810f348:	605a      	str	r2, [r3, #4]
 810f34a:	687b      	ldr	r3, [r7, #4]
 810f34c:	685a      	ldr	r2, [r3, #4]
 810f34e:	687b      	ldr	r3, [r7, #4]
 810f350:	601a      	str	r2, [r3, #0]
}
 810f352:	bf00      	nop
 810f354:	370c      	adds	r7, #12
 810f356:	46bd      	mov	sp, r7
 810f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f35c:	4770      	bx	lr

0810f35e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 810f35e:	b480      	push	{r7}
 810f360:	b083      	sub	sp, #12
 810f362:	af00      	add	r7, sp, #0
 810f364:	6078      	str	r0, [r7, #4]
 810f366:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810f368:	687b      	ldr	r3, [r7, #4]
 810f36a:	685a      	ldr	r2, [r3, #4]
 810f36c:	683b      	ldr	r3, [r7, #0]
 810f36e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 810f370:	683b      	ldr	r3, [r7, #0]
 810f372:	687a      	ldr	r2, [r7, #4]
 810f374:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810f376:	683b      	ldr	r3, [r7, #0]
 810f378:	681b      	ldr	r3, [r3, #0]
 810f37a:	683a      	ldr	r2, [r7, #0]
 810f37c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 810f37e:	683b      	ldr	r3, [r7, #0]
 810f380:	685b      	ldr	r3, [r3, #4]
 810f382:	683a      	ldr	r2, [r7, #0]
 810f384:	601a      	str	r2, [r3, #0]
}
 810f386:	bf00      	nop
 810f388:	370c      	adds	r7, #12
 810f38a:	46bd      	mov	sp, r7
 810f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f390:	4770      	bx	lr

0810f392 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 810f392:	b580      	push	{r7, lr}
 810f394:	b082      	sub	sp, #8
 810f396:	af00      	add	r7, sp, #0
 810f398:	6078      	str	r0, [r7, #4]
 810f39a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 810f39c:	6839      	ldr	r1, [r7, #0]
 810f39e:	6878      	ldr	r0, [r7, #4]
 810f3a0:	f7ff ffdd 	bl	810f35e <metal_list_add_before>
}
 810f3a4:	bf00      	nop
 810f3a6:	3708      	adds	r7, #8
 810f3a8:	46bd      	mov	sp, r7
 810f3aa:	bd80      	pop	{r7, pc}

0810f3ac <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 810f3ac:	b580      	push	{r7, lr}
 810f3ae:	b082      	sub	sp, #8
 810f3b0:	af00      	add	r7, sp, #0
 810f3b2:	6078      	str	r0, [r7, #4]
 810f3b4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 810f3b6:	6839      	ldr	r1, [r7, #0]
 810f3b8:	6878      	ldr	r0, [r7, #4]
 810f3ba:	f001 fdbf 	bl	8110f3c <metal_machine_cache_flush>
}
 810f3be:	bf00      	nop
 810f3c0:	3708      	adds	r7, #8
 810f3c2:	46bd      	mov	sp, r7
 810f3c4:	bd80      	pop	{r7, pc}

0810f3c6 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 810f3c6:	b580      	push	{r7, lr}
 810f3c8:	b082      	sub	sp, #8
 810f3ca:	af00      	add	r7, sp, #0
 810f3cc:	6078      	str	r0, [r7, #4]
 810f3ce:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810f3d0:	6839      	ldr	r1, [r7, #0]
 810f3d2:	6878      	ldr	r0, [r7, #4]
 810f3d4:	f001 fdbd 	bl	8110f52 <metal_machine_cache_invalidate>
}
 810f3d8:	bf00      	nop
 810f3da:	3708      	adds	r7, #8
 810f3dc:	46bd      	mov	sp, r7
 810f3de:	bd80      	pop	{r7, pc}

0810f3e0 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 810f3e0:	b580      	push	{r7, lr}
 810f3e2:	b082      	sub	sp, #8
 810f3e4:	af00      	add	r7, sp, #0
 810f3e6:	6078      	str	r0, [r7, #4]
 810f3e8:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810f3ea:	6839      	ldr	r1, [r7, #0]
 810f3ec:	6878      	ldr	r0, [r7, #4]
 810f3ee:	f7ff ffdd 	bl	810f3ac <__metal_cache_flush>
}
 810f3f2:	bf00      	nop
 810f3f4:	3708      	adds	r7, #8
 810f3f6:	46bd      	mov	sp, r7
 810f3f8:	bd80      	pop	{r7, pc}

0810f3fa <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810f3fa:	b580      	push	{r7, lr}
 810f3fc:	b082      	sub	sp, #8
 810f3fe:	af00      	add	r7, sp, #0
 810f400:	6078      	str	r0, [r7, #4]
 810f402:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 810f404:	6839      	ldr	r1, [r7, #0]
 810f406:	6878      	ldr	r0, [r7, #4]
 810f408:	f7ff ffdd 	bl	810f3c6 <__metal_cache_invalidate>
}
 810f40c:	bf00      	nop
 810f40e:	3708      	adds	r7, #8
 810f410:	46bd      	mov	sp, r7
 810f412:	bd80      	pop	{r7, pc}

0810f414 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 810f414:	b580      	push	{r7, lr}
 810f416:	b082      	sub	sp, #8
 810f418:	af00      	add	r7, sp, #0
 810f41a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 810f41c:	687b      	ldr	r3, [r7, #4]
 810f41e:	2b00      	cmp	r3, #0
 810f420:	d008      	beq.n	810f434 <metal_bus_register+0x20>
 810f422:	687b      	ldr	r3, [r7, #4]
 810f424:	681b      	ldr	r3, [r3, #0]
 810f426:	2b00      	cmp	r3, #0
 810f428:	d004      	beq.n	810f434 <metal_bus_register+0x20>
 810f42a:	687b      	ldr	r3, [r7, #4]
 810f42c:	681b      	ldr	r3, [r3, #0]
 810f42e:	781b      	ldrb	r3, [r3, #0]
 810f430:	2b00      	cmp	r3, #0
 810f432:	d102      	bne.n	810f43a <metal_bus_register+0x26>
		return -EINVAL;
 810f434:	f06f 0315 	mvn.w	r3, #21
 810f438:	e026      	b.n	810f488 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810f43a:	687b      	ldr	r3, [r7, #4]
 810f43c:	681b      	ldr	r3, [r3, #0]
 810f43e:	2100      	movs	r1, #0
 810f440:	4618      	mov	r0, r3
 810f442:	f000 f82b 	bl	810f49c <metal_bus_find>
 810f446:	4603      	mov	r3, r0
 810f448:	2b00      	cmp	r3, #0
 810f44a:	d102      	bne.n	810f452 <metal_bus_register+0x3e>
		return -EEXIST;
 810f44c:	f06f 0310 	mvn.w	r3, #16
 810f450:	e01a      	b.n	810f488 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 810f452:	687b      	ldr	r3, [r7, #4]
 810f454:	331c      	adds	r3, #28
 810f456:	4618      	mov	r0, r3
 810f458:	f7ff ff70 	bl	810f33c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810f45c:	687b      	ldr	r3, [r7, #4]
 810f45e:	3324      	adds	r3, #36	@ 0x24
 810f460:	4619      	mov	r1, r3
 810f462:	480b      	ldr	r0, [pc, #44]	@ (810f490 <metal_bus_register+0x7c>)
 810f464:	f7ff ff95 	bl	810f392 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 810f468:	4b0a      	ldr	r3, [pc, #40]	@ (810f494 <metal_bus_register+0x80>)
 810f46a:	781b      	ldrb	r3, [r3, #0]
 810f46c:	2b06      	cmp	r3, #6
 810f46e:	d90a      	bls.n	810f486 <metal_bus_register+0x72>
 810f470:	4b08      	ldr	r3, [pc, #32]	@ (810f494 <metal_bus_register+0x80>)
 810f472:	685b      	ldr	r3, [r3, #4]
 810f474:	2b00      	cmp	r3, #0
 810f476:	d006      	beq.n	810f486 <metal_bus_register+0x72>
 810f478:	4b06      	ldr	r3, [pc, #24]	@ (810f494 <metal_bus_register+0x80>)
 810f47a:	685b      	ldr	r3, [r3, #4]
 810f47c:	687a      	ldr	r2, [r7, #4]
 810f47e:	6812      	ldr	r2, [r2, #0]
 810f480:	4905      	ldr	r1, [pc, #20]	@ (810f498 <metal_bus_register+0x84>)
 810f482:	2007      	movs	r0, #7
 810f484:	4798      	blx	r3
	return 0;
 810f486:	2300      	movs	r3, #0
}
 810f488:	4618      	mov	r0, r3
 810f48a:	3708      	adds	r7, #8
 810f48c:	46bd      	mov	sp, r7
 810f48e:	bd80      	pop	{r7, pc}
 810f490:	10004f50 	.word	0x10004f50
 810f494:	10004f48 	.word	0x10004f48
 810f498:	081171bc 	.word	0x081171bc

0810f49c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 810f49c:	b580      	push	{r7, lr}
 810f49e:	b084      	sub	sp, #16
 810f4a0:	af00      	add	r7, sp, #0
 810f4a2:	6078      	str	r0, [r7, #4]
 810f4a4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 810f4a6:	4b13      	ldr	r3, [pc, #76]	@ (810f4f4 <metal_bus_find+0x58>)
 810f4a8:	689b      	ldr	r3, [r3, #8]
 810f4aa:	60fb      	str	r3, [r7, #12]
 810f4ac:	e017      	b.n	810f4de <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 810f4ae:	68fb      	ldr	r3, [r7, #12]
 810f4b0:	3b24      	subs	r3, #36	@ 0x24
 810f4b2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 810f4b4:	68bb      	ldr	r3, [r7, #8]
 810f4b6:	681b      	ldr	r3, [r3, #0]
 810f4b8:	6879      	ldr	r1, [r7, #4]
 810f4ba:	4618      	mov	r0, r3
 810f4bc:	f7f0 ff10 	bl	81002e0 <strcmp>
 810f4c0:	4603      	mov	r3, r0
 810f4c2:	2b00      	cmp	r3, #0
 810f4c4:	d107      	bne.n	810f4d6 <metal_bus_find+0x3a>
			continue;
		if (result)
 810f4c6:	683b      	ldr	r3, [r7, #0]
 810f4c8:	2b00      	cmp	r3, #0
 810f4ca:	d002      	beq.n	810f4d2 <metal_bus_find+0x36>
			*result = bus;
 810f4cc:	683b      	ldr	r3, [r7, #0]
 810f4ce:	68ba      	ldr	r2, [r7, #8]
 810f4d0:	601a      	str	r2, [r3, #0]
		return 0;
 810f4d2:	2300      	movs	r3, #0
 810f4d4:	e009      	b.n	810f4ea <metal_bus_find+0x4e>
			continue;
 810f4d6:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 810f4d8:	68fb      	ldr	r3, [r7, #12]
 810f4da:	681b      	ldr	r3, [r3, #0]
 810f4dc:	60fb      	str	r3, [r7, #12]
 810f4de:	68fb      	ldr	r3, [r7, #12]
 810f4e0:	4a05      	ldr	r2, [pc, #20]	@ (810f4f8 <metal_bus_find+0x5c>)
 810f4e2:	4293      	cmp	r3, r2
 810f4e4:	d1e3      	bne.n	810f4ae <metal_bus_find+0x12>
	}
	return -ENOENT;
 810f4e6:	f06f 0301 	mvn.w	r3, #1
}
 810f4ea:	4618      	mov	r0, r3
 810f4ec:	3710      	adds	r7, #16
 810f4ee:	46bd      	mov	sp, r7
 810f4f0:	bd80      	pop	{r7, pc}
 810f4f2:	bf00      	nop
 810f4f4:	10004f48 	.word	0x10004f48
 810f4f8:	10004f50 	.word	0x10004f50

0810f4fc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 810f4fc:	b580      	push	{r7, lr}
 810f4fe:	b086      	sub	sp, #24
 810f500:	af00      	add	r7, sp, #0
 810f502:	60f8      	str	r0, [r7, #12]
 810f504:	60b9      	str	r1, [r7, #8]
 810f506:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 810f508:	68fb      	ldr	r3, [r7, #12]
 810f50a:	2b00      	cmp	r3, #0
 810f50c:	d00d      	beq.n	810f52a <metal_device_open+0x2e>
 810f50e:	68fb      	ldr	r3, [r7, #12]
 810f510:	781b      	ldrb	r3, [r3, #0]
 810f512:	2b00      	cmp	r3, #0
 810f514:	d009      	beq.n	810f52a <metal_device_open+0x2e>
 810f516:	68bb      	ldr	r3, [r7, #8]
 810f518:	2b00      	cmp	r3, #0
 810f51a:	d006      	beq.n	810f52a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 810f51c:	68bb      	ldr	r3, [r7, #8]
 810f51e:	781b      	ldrb	r3, [r3, #0]
 810f520:	2b00      	cmp	r3, #0
 810f522:	d002      	beq.n	810f52a <metal_device_open+0x2e>
 810f524:	687b      	ldr	r3, [r7, #4]
 810f526:	2b00      	cmp	r3, #0
 810f528:	d102      	bne.n	810f530 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 810f52a:	f06f 0315 	mvn.w	r3, #21
 810f52e:	e01f      	b.n	810f570 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 810f530:	f107 0310 	add.w	r3, r7, #16
 810f534:	4619      	mov	r1, r3
 810f536:	68f8      	ldr	r0, [r7, #12]
 810f538:	f7ff ffb0 	bl	810f49c <metal_bus_find>
 810f53c:	6178      	str	r0, [r7, #20]
	if (error)
 810f53e:	697b      	ldr	r3, [r7, #20]
 810f540:	2b00      	cmp	r3, #0
 810f542:	d001      	beq.n	810f548 <metal_device_open+0x4c>
		return error;
 810f544:	697b      	ldr	r3, [r7, #20]
 810f546:	e013      	b.n	810f570 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 810f548:	693b      	ldr	r3, [r7, #16]
 810f54a:	689b      	ldr	r3, [r3, #8]
 810f54c:	2b00      	cmp	r3, #0
 810f54e:	d102      	bne.n	810f556 <metal_device_open+0x5a>
		return -ENODEV;
 810f550:	f06f 0312 	mvn.w	r3, #18
 810f554:	e00c      	b.n	810f570 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 810f556:	693b      	ldr	r3, [r7, #16]
 810f558:	689b      	ldr	r3, [r3, #8]
 810f55a:	6938      	ldr	r0, [r7, #16]
 810f55c:	687a      	ldr	r2, [r7, #4]
 810f55e:	68b9      	ldr	r1, [r7, #8]
 810f560:	4798      	blx	r3
 810f562:	6178      	str	r0, [r7, #20]
	if (error)
 810f564:	697b      	ldr	r3, [r7, #20]
 810f566:	2b00      	cmp	r3, #0
 810f568:	d001      	beq.n	810f56e <metal_device_open+0x72>
		return error;
 810f56a:	697b      	ldr	r3, [r7, #20]
 810f56c:	e000      	b.n	810f570 <metal_device_open+0x74>

	return 0;
 810f56e:	2300      	movs	r3, #0
}
 810f570:	4618      	mov	r0, r3
 810f572:	3718      	adds	r7, #24
 810f574:	46bd      	mov	sp, r7
 810f576:	bd80      	pop	{r7, pc}

0810f578 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 810f578:	b580      	push	{r7, lr}
 810f57a:	b082      	sub	sp, #8
 810f57c:	af00      	add	r7, sp, #0
 810f57e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 810f580:	687b      	ldr	r3, [r7, #4]
 810f582:	681b      	ldr	r3, [r3, #0]
 810f584:	2b00      	cmp	r3, #0
 810f586:	d008      	beq.n	810f59a <metal_register_generic_device+0x22>
 810f588:	687b      	ldr	r3, [r7, #4]
 810f58a:	681b      	ldr	r3, [r3, #0]
 810f58c:	781b      	ldrb	r3, [r3, #0]
 810f58e:	2b00      	cmp	r3, #0
 810f590:	d003      	beq.n	810f59a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 810f592:	687b      	ldr	r3, [r7, #4]
 810f594:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 810f596:	2b02      	cmp	r3, #2
 810f598:	d902      	bls.n	810f5a0 <metal_register_generic_device+0x28>
		return -EINVAL;
 810f59a:	f06f 0315 	mvn.w	r3, #21
 810f59e:	e009      	b.n	810f5b4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 810f5a0:	687b      	ldr	r3, [r7, #4]
 810f5a2:	4a06      	ldr	r2, [pc, #24]	@ (810f5bc <metal_register_generic_device+0x44>)
 810f5a4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 810f5a6:	687b      	ldr	r3, [r7, #4]
 810f5a8:	336c      	adds	r3, #108	@ 0x6c
 810f5aa:	4619      	mov	r1, r3
 810f5ac:	4804      	ldr	r0, [pc, #16]	@ (810f5c0 <metal_register_generic_device+0x48>)
 810f5ae:	f7ff fef0 	bl	810f392 <metal_list_add_tail>
			    &device->node);
	return 0;
 810f5b2:	2300      	movs	r3, #0
}
 810f5b4:	4618      	mov	r0, r3
 810f5b6:	3708      	adds	r7, #8
 810f5b8:	46bd      	mov	sp, r7
 810f5ba:	bd80      	pop	{r7, pc}
 810f5bc:	10000014 	.word	0x10000014
 810f5c0:	10004f60 	.word	0x10004f60

0810f5c4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 810f5c4:	b580      	push	{r7, lr}
 810f5c6:	b086      	sub	sp, #24
 810f5c8:	af00      	add	r7, sp, #0
 810f5ca:	60f8      	str	r0, [r7, #12]
 810f5cc:	60b9      	str	r1, [r7, #8]
 810f5ce:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 810f5d0:	4b12      	ldr	r3, [pc, #72]	@ (810f61c <metal_generic_dev_open+0x58>)
 810f5d2:	699b      	ldr	r3, [r3, #24]
 810f5d4:	617b      	str	r3, [r7, #20]
 810f5d6:	e017      	b.n	810f608 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 810f5d8:	697b      	ldr	r3, [r7, #20]
 810f5da:	3b6c      	subs	r3, #108	@ 0x6c
 810f5dc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810f5de:	693b      	ldr	r3, [r7, #16]
 810f5e0:	681b      	ldr	r3, [r3, #0]
 810f5e2:	68b9      	ldr	r1, [r7, #8]
 810f5e4:	4618      	mov	r0, r3
 810f5e6:	f7f0 fe7b 	bl	81002e0 <strcmp>
 810f5ea:	4603      	mov	r3, r0
 810f5ec:	2b00      	cmp	r3, #0
 810f5ee:	d107      	bne.n	810f600 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 810f5f0:	687b      	ldr	r3, [r7, #4]
 810f5f2:	693a      	ldr	r2, [r7, #16]
 810f5f4:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 810f5f6:	6938      	ldr	r0, [r7, #16]
 810f5f8:	f000 f890 	bl	810f71c <metal_generic_dev_sys_open>
 810f5fc:	4603      	mov	r3, r0
 810f5fe:	e009      	b.n	810f614 <metal_generic_dev_open+0x50>
			continue;
 810f600:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 810f602:	697b      	ldr	r3, [r7, #20]
 810f604:	681b      	ldr	r3, [r3, #0]
 810f606:	617b      	str	r3, [r7, #20]
 810f608:	697b      	ldr	r3, [r7, #20]
 810f60a:	4a05      	ldr	r2, [pc, #20]	@ (810f620 <metal_generic_dev_open+0x5c>)
 810f60c:	4293      	cmp	r3, r2
 810f60e:	d1e3      	bne.n	810f5d8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 810f610:	f06f 0312 	mvn.w	r3, #18
}
 810f614:	4618      	mov	r0, r3
 810f616:	3718      	adds	r7, #24
 810f618:	46bd      	mov	sp, r7
 810f61a:	bd80      	pop	{r7, pc}
 810f61c:	10004f48 	.word	0x10004f48
 810f620:	10004f60 	.word	0x10004f60

0810f624 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 810f624:	b580      	push	{r7, lr}
 810f626:	b086      	sub	sp, #24
 810f628:	af00      	add	r7, sp, #0
 810f62a:	60f8      	str	r0, [r7, #12]
 810f62c:	60b9      	str	r1, [r7, #8]
 810f62e:	607a      	str	r2, [r7, #4]
 810f630:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 810f632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f634:	683b      	ldr	r3, [r7, #0]
 810f636:	429a      	cmp	r2, r3
 810f638:	d009      	beq.n	810f64e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 810f63a:	6a3a      	ldr	r2, [r7, #32]
 810f63c:	4613      	mov	r3, r2
 810f63e:	005b      	lsls	r3, r3, #1
 810f640:	4413      	add	r3, r2
 810f642:	009b      	lsls	r3, r3, #2
 810f644:	461a      	mov	r2, r3
 810f646:	6839      	ldr	r1, [r7, #0]
 810f648:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810f64a:	f003 fb84 	bl	8112d56 <memcpy>
	for (i = 0; i < nents_in; i++) {
 810f64e:	2300      	movs	r3, #0
 810f650:	617b      	str	r3, [r7, #20]
 810f652:	e02f      	b.n	810f6b4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 810f654:	687b      	ldr	r3, [r7, #4]
 810f656:	2b02      	cmp	r3, #2
 810f658:	d114      	bne.n	810f684 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810f65a:	697a      	ldr	r2, [r7, #20]
 810f65c:	4613      	mov	r3, r2
 810f65e:	005b      	lsls	r3, r3, #1
 810f660:	4413      	add	r3, r2
 810f662:	009b      	lsls	r3, r3, #2
 810f664:	461a      	mov	r2, r3
 810f666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f668:	4413      	add	r3, r2
 810f66a:	6818      	ldr	r0, [r3, #0]
 810f66c:	697a      	ldr	r2, [r7, #20]
 810f66e:	4613      	mov	r3, r2
 810f670:	005b      	lsls	r3, r3, #1
 810f672:	4413      	add	r3, r2
 810f674:	009b      	lsls	r3, r3, #2
 810f676:	461a      	mov	r2, r3
 810f678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f67a:	4413      	add	r3, r2
 810f67c:	689b      	ldr	r3, [r3, #8]
 810f67e:	4619      	mov	r1, r3
 810f680:	f7ff feae 	bl	810f3e0 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 810f684:	697a      	ldr	r2, [r7, #20]
 810f686:	4613      	mov	r3, r2
 810f688:	005b      	lsls	r3, r3, #1
 810f68a:	4413      	add	r3, r2
 810f68c:	009b      	lsls	r3, r3, #2
 810f68e:	461a      	mov	r2, r3
 810f690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f692:	4413      	add	r3, r2
 810f694:	6818      	ldr	r0, [r3, #0]
 810f696:	697a      	ldr	r2, [r7, #20]
 810f698:	4613      	mov	r3, r2
 810f69a:	005b      	lsls	r3, r3, #1
 810f69c:	4413      	add	r3, r2
 810f69e:	009b      	lsls	r3, r3, #2
 810f6a0:	461a      	mov	r2, r3
 810f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f6a4:	4413      	add	r3, r2
 810f6a6:	689b      	ldr	r3, [r3, #8]
 810f6a8:	4619      	mov	r1, r3
 810f6aa:	f7ff fea6 	bl	810f3fa <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 810f6ae:	697b      	ldr	r3, [r7, #20]
 810f6b0:	3301      	adds	r3, #1
 810f6b2:	617b      	str	r3, [r7, #20]
 810f6b4:	697a      	ldr	r2, [r7, #20]
 810f6b6:	6a3b      	ldr	r3, [r7, #32]
 810f6b8:	429a      	cmp	r2, r3
 810f6ba:	dbcb      	blt.n	810f654 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 810f6bc:	6a3b      	ldr	r3, [r7, #32]
}
 810f6be:	4618      	mov	r0, r3
 810f6c0:	3718      	adds	r7, #24
 810f6c2:	46bd      	mov	sp, r7
 810f6c4:	bd80      	pop	{r7, pc}

0810f6c6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 810f6c6:	b580      	push	{r7, lr}
 810f6c8:	b086      	sub	sp, #24
 810f6ca:	af00      	add	r7, sp, #0
 810f6cc:	60f8      	str	r0, [r7, #12]
 810f6ce:	60b9      	str	r1, [r7, #8]
 810f6d0:	607a      	str	r2, [r7, #4]
 810f6d2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 810f6d4:	2300      	movs	r3, #0
 810f6d6:	617b      	str	r3, [r7, #20]
 810f6d8:	e017      	b.n	810f70a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810f6da:	697a      	ldr	r2, [r7, #20]
 810f6dc:	4613      	mov	r3, r2
 810f6de:	005b      	lsls	r3, r3, #1
 810f6e0:	4413      	add	r3, r2
 810f6e2:	009b      	lsls	r3, r3, #2
 810f6e4:	461a      	mov	r2, r3
 810f6e6:	683b      	ldr	r3, [r7, #0]
 810f6e8:	4413      	add	r3, r2
 810f6ea:	6818      	ldr	r0, [r3, #0]
 810f6ec:	697a      	ldr	r2, [r7, #20]
 810f6ee:	4613      	mov	r3, r2
 810f6f0:	005b      	lsls	r3, r3, #1
 810f6f2:	4413      	add	r3, r2
 810f6f4:	009b      	lsls	r3, r3, #2
 810f6f6:	461a      	mov	r2, r3
 810f6f8:	683b      	ldr	r3, [r7, #0]
 810f6fa:	4413      	add	r3, r2
 810f6fc:	689b      	ldr	r3, [r3, #8]
 810f6fe:	4619      	mov	r1, r3
 810f700:	f7ff fe7b 	bl	810f3fa <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 810f704:	697b      	ldr	r3, [r7, #20]
 810f706:	3301      	adds	r3, #1
 810f708:	617b      	str	r3, [r7, #20]
 810f70a:	697a      	ldr	r2, [r7, #20]
 810f70c:	6a3b      	ldr	r3, [r7, #32]
 810f70e:	429a      	cmp	r2, r3
 810f710:	dbe3      	blt.n	810f6da <metal_generic_dev_dma_unmap+0x14>
	}
}
 810f712:	bf00      	nop
 810f714:	bf00      	nop
 810f716:	3718      	adds	r7, #24
 810f718:	46bd      	mov	sp, r7
 810f71a:	bd80      	pop	{r7, pc}

0810f71c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 810f71c:	b580      	push	{r7, lr}
 810f71e:	b084      	sub	sp, #16
 810f720:	af00      	add	r7, sp, #0
 810f722:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 810f724:	2300      	movs	r3, #0
 810f726:	60fb      	str	r3, [r7, #12]
 810f728:	e013      	b.n	810f752 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 810f72a:	68fa      	ldr	r2, [r7, #12]
 810f72c:	4613      	mov	r3, r2
 810f72e:	005b      	lsls	r3, r3, #1
 810f730:	4413      	add	r3, r2
 810f732:	011b      	lsls	r3, r3, #4
 810f734:	3308      	adds	r3, #8
 810f736:	687a      	ldr	r2, [r7, #4]
 810f738:	4413      	add	r3, r2
 810f73a:	3304      	adds	r3, #4
 810f73c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 810f73e:	68bb      	ldr	r3, [r7, #8]
 810f740:	689b      	ldr	r3, [r3, #8]
 810f742:	2b00      	cmp	r3, #0
 810f744:	d00b      	beq.n	810f75e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 810f746:	68b8      	ldr	r0, [r7, #8]
 810f748:	f000 f81e 	bl	810f788 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 810f74c:	68fb      	ldr	r3, [r7, #12]
 810f74e:	3301      	adds	r3, #1
 810f750:	60fb      	str	r3, [r7, #12]
 810f752:	687b      	ldr	r3, [r7, #4]
 810f754:	689b      	ldr	r3, [r3, #8]
 810f756:	68fa      	ldr	r2, [r7, #12]
 810f758:	429a      	cmp	r2, r3
 810f75a:	d3e6      	bcc.n	810f72a <metal_generic_dev_sys_open+0xe>
 810f75c:	e000      	b.n	810f760 <metal_generic_dev_sys_open+0x44>
			break;
 810f75e:	bf00      	nop
	}

	return 0;
 810f760:	2300      	movs	r3, #0
}
 810f762:	4618      	mov	r0, r3
 810f764:	3710      	adds	r7, #16
 810f766:	46bd      	mov	sp, r7
 810f768:	bd80      	pop	{r7, pc}
	...

0810f76c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 810f76c:	b580      	push	{r7, lr}
 810f76e:	b082      	sub	sp, #8
 810f770:	af00      	add	r7, sp, #0
 810f772:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 810f774:	4803      	ldr	r0, [pc, #12]	@ (810f784 <metal_sys_init+0x18>)
 810f776:	f7ff fe4d 	bl	810f414 <metal_bus_register>
	return 0;
 810f77a:	2300      	movs	r3, #0
}
 810f77c:	4618      	mov	r0, r3
 810f77e:	3708      	adds	r7, #8
 810f780:	46bd      	mov	sp, r7
 810f782:	bd80      	pop	{r7, pc}
 810f784:	10000014 	.word	0x10000014

0810f788 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 810f788:	b580      	push	{r7, lr}
 810f78a:	b086      	sub	sp, #24
 810f78c:	af00      	add	r7, sp, #0
 810f78e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 810f790:	687b      	ldr	r3, [r7, #4]
 810f792:	681b      	ldr	r3, [r3, #0]
 810f794:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 810f796:	687b      	ldr	r3, [r7, #4]
 810f798:	689b      	ldr	r3, [r3, #8]
 810f79a:	613b      	str	r3, [r7, #16]
	if (psize) {
 810f79c:	693b      	ldr	r3, [r7, #16]
 810f79e:	2b00      	cmp	r3, #0
 810f7a0:	d02c      	beq.n	810f7fc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 810f7a2:	687b      	ldr	r3, [r7, #4]
 810f7a4:	68db      	ldr	r3, [r3, #12]
 810f7a6:	693a      	ldr	r2, [r7, #16]
 810f7a8:	fa22 f303 	lsr.w	r3, r2, r3
 810f7ac:	2b00      	cmp	r3, #0
 810f7ae:	d005      	beq.n	810f7bc <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 810f7b0:	687b      	ldr	r3, [r7, #4]
 810f7b2:	68db      	ldr	r3, [r3, #12]
 810f7b4:	2201      	movs	r2, #1
 810f7b6:	fa02 f303 	lsl.w	r3, r2, r3
 810f7ba:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810f7bc:	2300      	movs	r3, #0
 810f7be:	617b      	str	r3, [r7, #20]
 810f7c0:	e013      	b.n	810f7ea <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810f7c2:	687b      	ldr	r3, [r7, #4]
 810f7c4:	685a      	ldr	r2, [r3, #4]
 810f7c6:	697b      	ldr	r3, [r7, #20]
 810f7c8:	009b      	lsls	r3, r3, #2
 810f7ca:	4413      	add	r3, r2
 810f7cc:	6819      	ldr	r1, [r3, #0]
 810f7ce:	687b      	ldr	r3, [r7, #4]
 810f7d0:	695b      	ldr	r3, [r3, #20]
 810f7d2:	693a      	ldr	r2, [r7, #16]
 810f7d4:	68f8      	ldr	r0, [r7, #12]
 810f7d6:	f001 fbc7 	bl	8110f68 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810f7da:	693b      	ldr	r3, [r7, #16]
 810f7dc:	009b      	lsls	r3, r3, #2
 810f7de:	68fa      	ldr	r2, [r7, #12]
 810f7e0:	4413      	add	r3, r2
 810f7e2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810f7e4:	697b      	ldr	r3, [r7, #20]
 810f7e6:	3301      	adds	r3, #1
 810f7e8:	617b      	str	r3, [r7, #20]
 810f7ea:	687b      	ldr	r3, [r7, #4]
 810f7ec:	689a      	ldr	r2, [r3, #8]
 810f7ee:	687b      	ldr	r3, [r7, #4]
 810f7f0:	68db      	ldr	r3, [r3, #12]
 810f7f2:	fa22 f303 	lsr.w	r3, r2, r3
 810f7f6:	697a      	ldr	r2, [r7, #20]
 810f7f8:	429a      	cmp	r2, r3
 810f7fa:	d9e2      	bls.n	810f7c2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 810f7fc:	bf00      	nop
 810f7fe:	3718      	adds	r7, #24
 810f800:	46bd      	mov	sp, r7
 810f802:	bd80      	pop	{r7, pc}

0810f804 <metal_list_init>:
{
 810f804:	b480      	push	{r7}
 810f806:	b083      	sub	sp, #12
 810f808:	af00      	add	r7, sp, #0
 810f80a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810f80c:	687b      	ldr	r3, [r7, #4]
 810f80e:	687a      	ldr	r2, [r7, #4]
 810f810:	605a      	str	r2, [r3, #4]
 810f812:	687b      	ldr	r3, [r7, #4]
 810f814:	685a      	ldr	r2, [r3, #4]
 810f816:	687b      	ldr	r3, [r7, #4]
 810f818:	601a      	str	r2, [r3, #0]
}
 810f81a:	bf00      	nop
 810f81c:	370c      	adds	r7, #12
 810f81e:	46bd      	mov	sp, r7
 810f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f824:	4770      	bx	lr
	...

0810f828 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 810f828:	b580      	push	{r7, lr}
 810f82a:	b084      	sub	sp, #16
 810f82c:	af00      	add	r7, sp, #0
 810f82e:	6078      	str	r0, [r7, #4]
	int error = 0;
 810f830:	2300      	movs	r3, #0
 810f832:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 810f834:	2220      	movs	r2, #32
 810f836:	2100      	movs	r1, #0
 810f838:	4810      	ldr	r0, [pc, #64]	@ (810f87c <metal_init+0x54>)
 810f83a:	f003 f97c 	bl	8112b36 <memset>

	_metal.common.log_handler   = params->log_handler;
 810f83e:	687b      	ldr	r3, [r7, #4]
 810f840:	681b      	ldr	r3, [r3, #0]
 810f842:	4a0e      	ldr	r2, [pc, #56]	@ (810f87c <metal_init+0x54>)
 810f844:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810f846:	687b      	ldr	r3, [r7, #4]
 810f848:	791a      	ldrb	r2, [r3, #4]
 810f84a:	4b0c      	ldr	r3, [pc, #48]	@ (810f87c <metal_init+0x54>)
 810f84c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 810f84e:	480c      	ldr	r0, [pc, #48]	@ (810f880 <metal_init+0x58>)
 810f850:	f7ff ffd8 	bl	810f804 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 810f854:	480b      	ldr	r0, [pc, #44]	@ (810f884 <metal_init+0x5c>)
 810f856:	f7ff ffd5 	bl	810f804 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810f85a:	480b      	ldr	r0, [pc, #44]	@ (810f888 <metal_init+0x60>)
 810f85c:	f7ff ffd2 	bl	810f804 <metal_list_init>

	error = metal_sys_init(params);
 810f860:	6878      	ldr	r0, [r7, #4]
 810f862:	f7ff ff83 	bl	810f76c <metal_sys_init>
 810f866:	60f8      	str	r0, [r7, #12]
	if (error)
 810f868:	68fb      	ldr	r3, [r7, #12]
 810f86a:	2b00      	cmp	r3, #0
 810f86c:	d001      	beq.n	810f872 <metal_init+0x4a>
		return error;
 810f86e:	68fb      	ldr	r3, [r7, #12]
 810f870:	e000      	b.n	810f874 <metal_init+0x4c>

	return error;
 810f872:	68fb      	ldr	r3, [r7, #12]
}
 810f874:	4618      	mov	r0, r3
 810f876:	3710      	adds	r7, #16
 810f878:	46bd      	mov	sp, r7
 810f87a:	bd80      	pop	{r7, pc}
 810f87c:	10004f48 	.word	0x10004f48
 810f880:	10004f50 	.word	0x10004f50
 810f884:	10004f58 	.word	0x10004f58
 810f888:	10004f60 	.word	0x10004f60

0810f88c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 810f88c:	b480      	push	{r7}
 810f88e:	b083      	sub	sp, #12
 810f890:	af00      	add	r7, sp, #0
 810f892:	6078      	str	r0, [r7, #4]
 810f894:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810f896:	687b      	ldr	r3, [r7, #4]
 810f898:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 810f89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f89e:	d009      	beq.n	810f8b4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810f8a0:	687b      	ldr	r3, [r7, #4]
 810f8a2:	689b      	ldr	r3, [r3, #8]
 810f8a4:	683a      	ldr	r2, [r7, #0]
 810f8a6:	429a      	cmp	r2, r3
 810f8a8:	d804      	bhi.n	810f8b4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810f8aa:	687b      	ldr	r3, [r7, #4]
 810f8ac:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810f8ae:	683b      	ldr	r3, [r7, #0]
 810f8b0:	4413      	add	r3, r2
 810f8b2:	e000      	b.n	810f8b6 <metal_io_virt+0x2a>
 810f8b4:	2300      	movs	r3, #0
}
 810f8b6:	4618      	mov	r0, r3
 810f8b8:	370c      	adds	r7, #12
 810f8ba:	46bd      	mov	sp, r7
 810f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f8c0:	4770      	bx	lr

0810f8c2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810f8c2:	b5b0      	push	{r4, r5, r7, lr}
 810f8c4:	b08a      	sub	sp, #40	@ 0x28
 810f8c6:	af00      	add	r7, sp, #0
 810f8c8:	60f8      	str	r0, [r7, #12]
 810f8ca:	60b9      	str	r1, [r7, #8]
 810f8cc:	607a      	str	r2, [r7, #4]
 810f8ce:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 810f8d0:	f107 0310 	add.w	r3, r7, #16
 810f8d4:	2200      	movs	r2, #0
 810f8d6:	601a      	str	r2, [r3, #0]
 810f8d8:	605a      	str	r2, [r3, #4]
 810f8da:	609a      	str	r2, [r3, #8]
 810f8dc:	60da      	str	r2, [r3, #12]
 810f8de:	611a      	str	r2, [r3, #16]
 810f8e0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 810f8e2:	68fb      	ldr	r3, [r7, #12]
 810f8e4:	68ba      	ldr	r2, [r7, #8]
 810f8e6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 810f8e8:	68fb      	ldr	r3, [r7, #12]
 810f8ea:	687a      	ldr	r2, [r7, #4]
 810f8ec:	605a      	str	r2, [r3, #4]
	io->size = size;
 810f8ee:	68fb      	ldr	r3, [r7, #12]
 810f8f0:	683a      	ldr	r2, [r7, #0]
 810f8f2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 810f8f4:	68fb      	ldr	r3, [r7, #12]
 810f8f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810f8f8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 810f8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f8fc:	2b1f      	cmp	r3, #31
 810f8fe:	d904      	bls.n	810f90a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 810f900:	68fb      	ldr	r3, [r7, #12]
 810f902:	f04f 32ff 	mov.w	r2, #4294967295
 810f906:	611a      	str	r2, [r3, #16]
 810f908:	e006      	b.n	810f918 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 810f90a:	2201      	movs	r2, #1
 810f90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f90e:	fa02 f303 	lsl.w	r3, r2, r3
 810f912:	1e5a      	subs	r2, r3, #1
 810f914:	68fb      	ldr	r3, [r7, #12]
 810f916:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 810f918:	68fb      	ldr	r3, [r7, #12]
 810f91a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810f91c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 810f91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f920:	2b00      	cmp	r3, #0
 810f922:	d00b      	beq.n	810f93c <metal_io_init+0x7a>
 810f924:	68fb      	ldr	r3, [r7, #12]
 810f926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810f928:	f103 0418 	add.w	r4, r3, #24
 810f92c:	4615      	mov	r5, r2
 810f92e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810f930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810f932:	e895 0003 	ldmia.w	r5, {r0, r1}
 810f936:	e884 0003 	stmia.w	r4, {r0, r1}
 810f93a:	e00a      	b.n	810f952 <metal_io_init+0x90>
 810f93c:	68fb      	ldr	r3, [r7, #12]
 810f93e:	f103 0418 	add.w	r4, r3, #24
 810f942:	f107 0510 	add.w	r5, r7, #16
 810f946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810f948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810f94a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810f94e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 810f952:	68f8      	ldr	r0, [r7, #12]
 810f954:	f7ff ff18 	bl	810f788 <metal_sys_io_mem_map>
}
 810f958:	bf00      	nop
 810f95a:	3728      	adds	r7, #40	@ 0x28
 810f95c:	46bd      	mov	sp, r7
 810f95e:	bdb0      	pop	{r4, r5, r7, pc}

0810f960 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 810f960:	b590      	push	{r4, r7, lr}
 810f962:	b08b      	sub	sp, #44	@ 0x2c
 810f964:	af02      	add	r7, sp, #8
 810f966:	60f8      	str	r0, [r7, #12]
 810f968:	60b9      	str	r1, [r7, #8]
 810f96a:	607a      	str	r2, [r7, #4]
 810f96c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810f96e:	68b9      	ldr	r1, [r7, #8]
 810f970:	68f8      	ldr	r0, [r7, #12]
 810f972:	f7ff ff8b 	bl	810f88c <metal_io_virt>
 810f976:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 810f978:	687b      	ldr	r3, [r7, #4]
 810f97a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810f97c:	68fb      	ldr	r3, [r7, #12]
 810f97e:	689b      	ldr	r3, [r3, #8]
 810f980:	68ba      	ldr	r2, [r7, #8]
 810f982:	429a      	cmp	r2, r3
 810f984:	d902      	bls.n	810f98c <metal_io_block_read+0x2c>
		return -ERANGE;
 810f986:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 810f98a:	e05c      	b.n	810fa46 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 810f98c:	683a      	ldr	r2, [r7, #0]
 810f98e:	68bb      	ldr	r3, [r7, #8]
 810f990:	441a      	add	r2, r3
 810f992:	68fb      	ldr	r3, [r7, #12]
 810f994:	689b      	ldr	r3, [r3, #8]
 810f996:	429a      	cmp	r2, r3
 810f998:	d904      	bls.n	810f9a4 <metal_io_block_read+0x44>
		len = io->size - offset;
 810f99a:	68fb      	ldr	r3, [r7, #12]
 810f99c:	689a      	ldr	r2, [r3, #8]
 810f99e:	68bb      	ldr	r3, [r7, #8]
 810f9a0:	1ad3      	subs	r3, r2, r3
 810f9a2:	603b      	str	r3, [r7, #0]
	retlen = len;
 810f9a4:	683b      	ldr	r3, [r7, #0]
 810f9a6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 810f9a8:	68fb      	ldr	r3, [r7, #12]
 810f9aa:	6a1b      	ldr	r3, [r3, #32]
 810f9ac:	2b00      	cmp	r3, #0
 810f9ae:	d00a      	beq.n	810f9c6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 810f9b0:	68fb      	ldr	r3, [r7, #12]
 810f9b2:	6a1c      	ldr	r4, [r3, #32]
 810f9b4:	683b      	ldr	r3, [r7, #0]
 810f9b6:	9300      	str	r3, [sp, #0]
 810f9b8:	2305      	movs	r3, #5
 810f9ba:	687a      	ldr	r2, [r7, #4]
 810f9bc:	68b9      	ldr	r1, [r7, #8]
 810f9be:	68f8      	ldr	r0, [r7, #12]
 810f9c0:	47a0      	blx	r4
 810f9c2:	6178      	str	r0, [r7, #20]
 810f9c4:	e03e      	b.n	810fa44 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810f9c6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810f9ca:	e00c      	b.n	810f9e6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810f9cc:	69fb      	ldr	r3, [r7, #28]
 810f9ce:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 810f9d0:	69bb      	ldr	r3, [r7, #24]
 810f9d2:	701a      	strb	r2, [r3, #0]
			dest++;
 810f9d4:	69bb      	ldr	r3, [r7, #24]
 810f9d6:	3301      	adds	r3, #1
 810f9d8:	61bb      	str	r3, [r7, #24]
			ptr++;
 810f9da:	69fb      	ldr	r3, [r7, #28]
 810f9dc:	3301      	adds	r3, #1
 810f9de:	61fb      	str	r3, [r7, #28]
			len--;
 810f9e0:	683b      	ldr	r3, [r7, #0]
 810f9e2:	3b01      	subs	r3, #1
 810f9e4:	603b      	str	r3, [r7, #0]
		while ( len && (
 810f9e6:	683b      	ldr	r3, [r7, #0]
 810f9e8:	2b00      	cmp	r3, #0
 810f9ea:	d017      	beq.n	810fa1c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810f9ec:	69bb      	ldr	r3, [r7, #24]
 810f9ee:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810f9f2:	2b00      	cmp	r3, #0
 810f9f4:	d1ea      	bne.n	810f9cc <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 810f9f6:	69fb      	ldr	r3, [r7, #28]
 810f9f8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 810f9fc:	2b00      	cmp	r3, #0
 810f9fe:	d1e5      	bne.n	810f9cc <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810fa00:	e00c      	b.n	810fa1c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 810fa02:	69fb      	ldr	r3, [r7, #28]
 810fa04:	681a      	ldr	r2, [r3, #0]
 810fa06:	69bb      	ldr	r3, [r7, #24]
 810fa08:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810fa0a:	69bb      	ldr	r3, [r7, #24]
 810fa0c:	3304      	adds	r3, #4
 810fa0e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 810fa10:	69fb      	ldr	r3, [r7, #28]
 810fa12:	3304      	adds	r3, #4
 810fa14:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 810fa16:	683b      	ldr	r3, [r7, #0]
 810fa18:	3b04      	subs	r3, #4
 810fa1a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810fa1c:	683b      	ldr	r3, [r7, #0]
 810fa1e:	2b03      	cmp	r3, #3
 810fa20:	dcef      	bgt.n	810fa02 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 810fa22:	e00c      	b.n	810fa3e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810fa24:	69fb      	ldr	r3, [r7, #28]
 810fa26:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 810fa28:	69bb      	ldr	r3, [r7, #24]
 810fa2a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 810fa2c:	69bb      	ldr	r3, [r7, #24]
 810fa2e:	3301      	adds	r3, #1
 810fa30:	61bb      	str	r3, [r7, #24]
 810fa32:	69fb      	ldr	r3, [r7, #28]
 810fa34:	3301      	adds	r3, #1
 810fa36:	61fb      	str	r3, [r7, #28]
 810fa38:	683b      	ldr	r3, [r7, #0]
 810fa3a:	3b01      	subs	r3, #1
 810fa3c:	603b      	str	r3, [r7, #0]
 810fa3e:	683b      	ldr	r3, [r7, #0]
 810fa40:	2b00      	cmp	r3, #0
 810fa42:	d1ef      	bne.n	810fa24 <metal_io_block_read+0xc4>
	}
	return retlen;
 810fa44:	697b      	ldr	r3, [r7, #20]
}
 810fa46:	4618      	mov	r0, r3
 810fa48:	3724      	adds	r7, #36	@ 0x24
 810fa4a:	46bd      	mov	sp, r7
 810fa4c:	bd90      	pop	{r4, r7, pc}

0810fa4e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 810fa4e:	b590      	push	{r4, r7, lr}
 810fa50:	b08b      	sub	sp, #44	@ 0x2c
 810fa52:	af02      	add	r7, sp, #8
 810fa54:	60f8      	str	r0, [r7, #12]
 810fa56:	60b9      	str	r1, [r7, #8]
 810fa58:	607a      	str	r2, [r7, #4]
 810fa5a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810fa5c:	68b9      	ldr	r1, [r7, #8]
 810fa5e:	68f8      	ldr	r0, [r7, #12]
 810fa60:	f7ff ff14 	bl	810f88c <metal_io_virt>
 810fa64:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 810fa66:	687b      	ldr	r3, [r7, #4]
 810fa68:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810fa6a:	68fb      	ldr	r3, [r7, #12]
 810fa6c:	689b      	ldr	r3, [r3, #8]
 810fa6e:	68ba      	ldr	r2, [r7, #8]
 810fa70:	429a      	cmp	r2, r3
 810fa72:	d902      	bls.n	810fa7a <metal_io_block_write+0x2c>
		return -ERANGE;
 810fa74:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 810fa78:	e05b      	b.n	810fb32 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810fa7a:	683a      	ldr	r2, [r7, #0]
 810fa7c:	68bb      	ldr	r3, [r7, #8]
 810fa7e:	441a      	add	r2, r3
 810fa80:	68fb      	ldr	r3, [r7, #12]
 810fa82:	689b      	ldr	r3, [r3, #8]
 810fa84:	429a      	cmp	r2, r3
 810fa86:	d904      	bls.n	810fa92 <metal_io_block_write+0x44>
		len = io->size - offset;
 810fa88:	68fb      	ldr	r3, [r7, #12]
 810fa8a:	689a      	ldr	r2, [r3, #8]
 810fa8c:	68bb      	ldr	r3, [r7, #8]
 810fa8e:	1ad3      	subs	r3, r2, r3
 810fa90:	603b      	str	r3, [r7, #0]
	retlen = len;
 810fa92:	683b      	ldr	r3, [r7, #0]
 810fa94:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 810fa96:	68fb      	ldr	r3, [r7, #12]
 810fa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810fa9a:	2b00      	cmp	r3, #0
 810fa9c:	d017      	beq.n	810face <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810fa9e:	68fb      	ldr	r3, [r7, #12]
 810faa0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810faa2:	683b      	ldr	r3, [r7, #0]
 810faa4:	9300      	str	r3, [sp, #0]
 810faa6:	2305      	movs	r3, #5
 810faa8:	687a      	ldr	r2, [r7, #4]
 810faaa:	68b9      	ldr	r1, [r7, #8]
 810faac:	68f8      	ldr	r0, [r7, #12]
 810faae:	47a0      	blx	r4
 810fab0:	6178      	str	r0, [r7, #20]
 810fab2:	e03d      	b.n	810fb30 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810fab4:	69bb      	ldr	r3, [r7, #24]
 810fab6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810fab8:	69fb      	ldr	r3, [r7, #28]
 810faba:	701a      	strb	r2, [r3, #0]
			ptr++;
 810fabc:	69fb      	ldr	r3, [r7, #28]
 810fabe:	3301      	adds	r3, #1
 810fac0:	61fb      	str	r3, [r7, #28]
			source++;
 810fac2:	69bb      	ldr	r3, [r7, #24]
 810fac4:	3301      	adds	r3, #1
 810fac6:	61bb      	str	r3, [r7, #24]
			len--;
 810fac8:	683b      	ldr	r3, [r7, #0]
 810faca:	3b01      	subs	r3, #1
 810facc:	603b      	str	r3, [r7, #0]
		while ( len && (
 810face:	683b      	ldr	r3, [r7, #0]
 810fad0:	2b00      	cmp	r3, #0
 810fad2:	d017      	beq.n	810fb04 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 810fad4:	69fb      	ldr	r3, [r7, #28]
 810fad6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810fada:	2b00      	cmp	r3, #0
 810fadc:	d1ea      	bne.n	810fab4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810fade:	69bb      	ldr	r3, [r7, #24]
 810fae0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 810fae4:	2b00      	cmp	r3, #0
 810fae6:	d1e5      	bne.n	810fab4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810fae8:	e00c      	b.n	810fb04 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810faea:	69bb      	ldr	r3, [r7, #24]
 810faec:	681a      	ldr	r2, [r3, #0]
 810faee:	69fb      	ldr	r3, [r7, #28]
 810faf0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810faf2:	69fb      	ldr	r3, [r7, #28]
 810faf4:	3304      	adds	r3, #4
 810faf6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 810faf8:	69bb      	ldr	r3, [r7, #24]
 810fafa:	3304      	adds	r3, #4
 810fafc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810fafe:	683b      	ldr	r3, [r7, #0]
 810fb00:	3b04      	subs	r3, #4
 810fb02:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810fb04:	683b      	ldr	r3, [r7, #0]
 810fb06:	2b03      	cmp	r3, #3
 810fb08:	dcef      	bgt.n	810faea <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810fb0a:	e00c      	b.n	810fb26 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810fb0c:	69bb      	ldr	r3, [r7, #24]
 810fb0e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810fb10:	69fb      	ldr	r3, [r7, #28]
 810fb12:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 810fb14:	69fb      	ldr	r3, [r7, #28]
 810fb16:	3301      	adds	r3, #1
 810fb18:	61fb      	str	r3, [r7, #28]
 810fb1a:	69bb      	ldr	r3, [r7, #24]
 810fb1c:	3301      	adds	r3, #1
 810fb1e:	61bb      	str	r3, [r7, #24]
 810fb20:	683b      	ldr	r3, [r7, #0]
 810fb22:	3b01      	subs	r3, #1
 810fb24:	603b      	str	r3, [r7, #0]
 810fb26:	683b      	ldr	r3, [r7, #0]
 810fb28:	2b00      	cmp	r3, #0
 810fb2a:	d1ef      	bne.n	810fb0c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 810fb2c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 810fb30:	697b      	ldr	r3, [r7, #20]
}
 810fb32:	4618      	mov	r0, r3
 810fb34:	3724      	adds	r7, #36	@ 0x24
 810fb36:	46bd      	mov	sp, r7
 810fb38:	bd90      	pop	{r4, r7, pc}

0810fb3a <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810fb3a:	b40e      	push	{r1, r2, r3}
 810fb3c:	b480      	push	{r7}
 810fb3e:	b082      	sub	sp, #8
 810fb40:	af00      	add	r7, sp, #0
 810fb42:	4603      	mov	r3, r0
 810fb44:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 810fb46:	bf00      	nop
 810fb48:	3708      	adds	r7, #8
 810fb4a:	46bd      	mov	sp, r7
 810fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fb50:	b003      	add	sp, #12
 810fb52:	4770      	bx	lr

0810fb54 <metal_io_virt>:
{
 810fb54:	b480      	push	{r7}
 810fb56:	b083      	sub	sp, #12
 810fb58:	af00      	add	r7, sp, #0
 810fb5a:	6078      	str	r0, [r7, #4]
 810fb5c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810fb5e:	687b      	ldr	r3, [r7, #4]
 810fb60:	681b      	ldr	r3, [r3, #0]
		: NULL);
 810fb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fb66:	d009      	beq.n	810fb7c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810fb68:	687b      	ldr	r3, [r7, #4]
 810fb6a:	689b      	ldr	r3, [r3, #8]
 810fb6c:	683a      	ldr	r2, [r7, #0]
 810fb6e:	429a      	cmp	r2, r3
 810fb70:	d804      	bhi.n	810fb7c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810fb72:	687b      	ldr	r3, [r7, #4]
 810fb74:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810fb76:	683b      	ldr	r3, [r7, #0]
 810fb78:	4413      	add	r3, r2
 810fb7a:	e000      	b.n	810fb7e <metal_io_virt+0x2a>
 810fb7c:	2300      	movs	r3, #0
}
 810fb7e:	4618      	mov	r0, r3
 810fb80:	370c      	adds	r7, #12
 810fb82:	46bd      	mov	sp, r7
 810fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fb88:	4770      	bx	lr

0810fb8a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 810fb8a:	b480      	push	{r7}
 810fb8c:	b085      	sub	sp, #20
 810fb8e:	af00      	add	r7, sp, #0
 810fb90:	6078      	str	r0, [r7, #4]
 810fb92:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 810fb94:	687b      	ldr	r3, [r7, #4]
 810fb96:	681b      	ldr	r3, [r3, #0]
 810fb98:	683a      	ldr	r2, [r7, #0]
 810fb9a:	1ad3      	subs	r3, r2, r3
 810fb9c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 810fb9e:	687b      	ldr	r3, [r7, #4]
 810fba0:	689b      	ldr	r3, [r3, #8]
 810fba2:	68fa      	ldr	r2, [r7, #12]
 810fba4:	429a      	cmp	r2, r3
 810fba6:	d201      	bcs.n	810fbac <metal_io_virt_to_offset+0x22>
 810fba8:	68fb      	ldr	r3, [r7, #12]
 810fbaa:	e001      	b.n	810fbb0 <metal_io_virt_to_offset+0x26>
 810fbac:	f04f 33ff 	mov.w	r3, #4294967295
}
 810fbb0:	4618      	mov	r0, r3
 810fbb2:	3714      	adds	r7, #20
 810fbb4:	46bd      	mov	sp, r7
 810fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fbba:	4770      	bx	lr

0810fbbc <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 810fbbc:	b5b0      	push	{r4, r5, r7, lr}
 810fbbe:	b08c      	sub	sp, #48	@ 0x30
 810fbc0:	af00      	add	r7, sp, #0
 810fbc2:	60f8      	str	r0, [r7, #12]
 810fbc4:	60b9      	str	r1, [r7, #8]
 810fbc6:	603b      	str	r3, [r7, #0]
 810fbc8:	4613      	mov	r3, r2
 810fbca:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 810fbcc:	68b9      	ldr	r1, [r7, #8]
 810fbce:	68f8      	ldr	r0, [r7, #12]
 810fbd0:	f7ff ffc0 	bl	810fb54 <metal_io_virt>
 810fbd4:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 810fbd6:	68fb      	ldr	r3, [r7, #12]
 810fbd8:	699b      	ldr	r3, [r3, #24]
 810fbda:	2b00      	cmp	r3, #0
 810fbdc:	d009      	beq.n	810fbf2 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 810fbde:	68fb      	ldr	r3, [r7, #12]
 810fbe0:	699c      	ldr	r4, [r3, #24]
 810fbe2:	79fa      	ldrb	r2, [r7, #7]
 810fbe4:	683b      	ldr	r3, [r7, #0]
 810fbe6:	68b9      	ldr	r1, [r7, #8]
 810fbe8:	68f8      	ldr	r0, [r7, #12]
 810fbea:	47a0      	blx	r4
 810fbec:	4604      	mov	r4, r0
 810fbee:	460d      	mov	r5, r1
 810fbf0:	e059      	b.n	810fca6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 810fbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fbf4:	2b00      	cmp	r3, #0
 810fbf6:	d012      	beq.n	810fc1e <metal_io_read+0x62>
 810fbf8:	683b      	ldr	r3, [r7, #0]
 810fbfa:	2b01      	cmp	r3, #1
 810fbfc:	d10f      	bne.n	810fc1e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 810fbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc00:	62bb      	str	r3, [r7, #40]	@ 0x28
 810fc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fc04:	f3bf 8f5b 	dmb	ish
 810fc08:	781b      	ldrb	r3, [r3, #0]
 810fc0a:	f3bf 8f5b 	dmb	ish
 810fc0e:	b2db      	uxtb	r3, r3
 810fc10:	76fb      	strb	r3, [r7, #27]
 810fc12:	7efb      	ldrb	r3, [r7, #27]
 810fc14:	b2db      	uxtb	r3, r3
 810fc16:	2200      	movs	r2, #0
 810fc18:	461c      	mov	r4, r3
 810fc1a:	4615      	mov	r5, r2
 810fc1c:	e043      	b.n	810fca6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 810fc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc20:	2b00      	cmp	r3, #0
 810fc22:	d012      	beq.n	810fc4a <metal_io_read+0x8e>
 810fc24:	683b      	ldr	r3, [r7, #0]
 810fc26:	2b02      	cmp	r3, #2
 810fc28:	d10f      	bne.n	810fc4a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 810fc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc2c:	627b      	str	r3, [r7, #36]	@ 0x24
 810fc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fc30:	f3bf 8f5b 	dmb	ish
 810fc34:	881b      	ldrh	r3, [r3, #0]
 810fc36:	f3bf 8f5b 	dmb	ish
 810fc3a:	b29b      	uxth	r3, r3
 810fc3c:	833b      	strh	r3, [r7, #24]
 810fc3e:	8b3b      	ldrh	r3, [r7, #24]
 810fc40:	b29b      	uxth	r3, r3
 810fc42:	2200      	movs	r2, #0
 810fc44:	461c      	mov	r4, r3
 810fc46:	4615      	mov	r5, r2
 810fc48:	e02d      	b.n	810fca6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 810fc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc4c:	2b00      	cmp	r3, #0
 810fc4e:	d010      	beq.n	810fc72 <metal_io_read+0xb6>
 810fc50:	683b      	ldr	r3, [r7, #0]
 810fc52:	2b04      	cmp	r3, #4
 810fc54:	d10d      	bne.n	810fc72 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 810fc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc58:	623b      	str	r3, [r7, #32]
 810fc5a:	6a3b      	ldr	r3, [r7, #32]
 810fc5c:	f3bf 8f5b 	dmb	ish
 810fc60:	681b      	ldr	r3, [r3, #0]
 810fc62:	f3bf 8f5b 	dmb	ish
 810fc66:	617b      	str	r3, [r7, #20]
 810fc68:	697b      	ldr	r3, [r7, #20]
 810fc6a:	2200      	movs	r2, #0
 810fc6c:	461c      	mov	r4, r3
 810fc6e:	4615      	mov	r5, r2
 810fc70:	e019      	b.n	810fca6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 810fc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc74:	2b00      	cmp	r3, #0
 810fc76:	d010      	beq.n	810fc9a <metal_io_read+0xde>
 810fc78:	683b      	ldr	r3, [r7, #0]
 810fc7a:	2b04      	cmp	r3, #4
 810fc7c:	d10d      	bne.n	810fc9a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 810fc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fc80:	61fb      	str	r3, [r7, #28]
 810fc82:	69fb      	ldr	r3, [r7, #28]
 810fc84:	f3bf 8f5b 	dmb	ish
 810fc88:	681b      	ldr	r3, [r3, #0]
 810fc8a:	f3bf 8f5b 	dmb	ish
 810fc8e:	613b      	str	r3, [r7, #16]
 810fc90:	693b      	ldr	r3, [r7, #16]
 810fc92:	2200      	movs	r2, #0
 810fc94:	461c      	mov	r4, r3
 810fc96:	4615      	mov	r5, r2
 810fc98:	e005      	b.n	810fca6 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 810fc9a:	4b06      	ldr	r3, [pc, #24]	@ (810fcb4 <metal_io_read+0xf8>)
 810fc9c:	4a06      	ldr	r2, [pc, #24]	@ (810fcb8 <metal_io_read+0xfc>)
 810fc9e:	21f0      	movs	r1, #240	@ 0xf0
 810fca0:	4806      	ldr	r0, [pc, #24]	@ (810fcbc <metal_io_read+0x100>)
 810fca2:	f001 fe3f 	bl	8111924 <__assert_func>
	return 0; /* quiet compiler */
}
 810fca6:	4622      	mov	r2, r4
 810fca8:	462b      	mov	r3, r5
 810fcaa:	4610      	mov	r0, r2
 810fcac:	4619      	mov	r1, r3
 810fcae:	3730      	adds	r7, #48	@ 0x30
 810fcb0:	46bd      	mov	sp, r7
 810fcb2:	bdb0      	pop	{r4, r5, r7, pc}
 810fcb4:	08117270 	.word	0x08117270
 810fcb8:	081174ec 	.word	0x081174ec
 810fcbc:	08117274 	.word	0x08117274

0810fcc0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 810fcc0:	b580      	push	{r7, lr}
 810fcc2:	b082      	sub	sp, #8
 810fcc4:	af00      	add	r7, sp, #0
 810fcc6:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 810fcc8:	6878      	ldr	r0, [r7, #4]
 810fcca:	f001 fe4d 	bl	8111968 <malloc>
 810fcce:	4603      	mov	r3, r0
}
 810fcd0:	4618      	mov	r0, r3
 810fcd2:	3708      	adds	r7, #8
 810fcd4:	46bd      	mov	sp, r7
 810fcd6:	bd80      	pop	{r7, pc}

0810fcd8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 810fcd8:	b580      	push	{r7, lr}
 810fcda:	b082      	sub	sp, #8
 810fcdc:	af00      	add	r7, sp, #0
 810fcde:	6078      	str	r0, [r7, #4]
	free(ptr);
 810fce0:	6878      	ldr	r0, [r7, #4]
 810fce2:	f001 fe49 	bl	8111978 <free>
}
 810fce6:	bf00      	nop
 810fce8:	3708      	adds	r7, #8
 810fcea:	46bd      	mov	sp, r7
 810fcec:	bd80      	pop	{r7, pc}

0810fcee <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 810fcee:	b580      	push	{r7, lr}
 810fcf0:	b084      	sub	sp, #16
 810fcf2:	af00      	add	r7, sp, #0
 810fcf4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 810fcf6:	687b      	ldr	r3, [r7, #4]
 810fcf8:	3307      	adds	r3, #7
 810fcfa:	00db      	lsls	r3, r3, #3
 810fcfc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 810fcfe:	68f8      	ldr	r0, [r7, #12]
 810fd00:	f7ff ffde 	bl	810fcc0 <metal_allocate_memory>
 810fd04:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 810fd06:	68bb      	ldr	r3, [r7, #8]
 810fd08:	2b00      	cmp	r3, #0
 810fd0a:	d004      	beq.n	810fd16 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 810fd0c:	68fa      	ldr	r2, [r7, #12]
 810fd0e:	2100      	movs	r1, #0
 810fd10:	68b8      	ldr	r0, [r7, #8]
 810fd12:	f002 ff10 	bl	8112b36 <memset>
	}

	return vqs;
 810fd16:	68bb      	ldr	r3, [r7, #8]
}
 810fd18:	4618      	mov	r0, r3
 810fd1a:	3710      	adds	r7, #16
 810fd1c:	46bd      	mov	sp, r7
 810fd1e:	bd80      	pop	{r7, pc}

0810fd20 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 810fd20:	b580      	push	{r7, lr}
 810fd22:	b086      	sub	sp, #24
 810fd24:	af00      	add	r7, sp, #0
 810fd26:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 810fd28:	687b      	ldr	r3, [r7, #4]
 810fd2a:	891b      	ldrh	r3, [r3, #8]
 810fd2c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 810fd2e:	687b      	ldr	r3, [r7, #4]
 810fd30:	681b      	ldr	r3, [r3, #0]
 810fd32:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810fd34:	693b      	ldr	r3, [r7, #16]
 810fd36:	3b18      	subs	r3, #24
 810fd38:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810fd3a:	693b      	ldr	r3, [r7, #16]
 810fd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fd3e:	697a      	ldr	r2, [r7, #20]
 810fd40:	429a      	cmp	r2, r3
 810fd42:	d905      	bls.n	810fd50 <rproc_virtio_virtqueue_notify+0x30>
 810fd44:	4b0d      	ldr	r3, [pc, #52]	@ (810fd7c <rproc_virtio_virtqueue_notify+0x5c>)
 810fd46:	4a0e      	ldr	r2, [pc, #56]	@ (810fd80 <rproc_virtio_virtqueue_notify+0x60>)
 810fd48:	2133      	movs	r1, #51	@ 0x33
 810fd4a:	480e      	ldr	r0, [pc, #56]	@ (810fd84 <rproc_virtio_virtqueue_notify+0x64>)
 810fd4c:	f001 fdea 	bl	8111924 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 810fd50:	693b      	ldr	r3, [r7, #16]
 810fd52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810fd54:	697a      	ldr	r2, [r7, #20]
 810fd56:	4613      	mov	r3, r2
 810fd58:	005b      	lsls	r3, r3, #1
 810fd5a:	4413      	add	r3, r2
 810fd5c:	00db      	lsls	r3, r3, #3
 810fd5e:	440b      	add	r3, r1
 810fd60:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 810fd62:	68fb      	ldr	r3, [r7, #12]
 810fd64:	691b      	ldr	r3, [r3, #16]
 810fd66:	68fa      	ldr	r2, [r7, #12]
 810fd68:	6810      	ldr	r0, [r2, #0]
 810fd6a:	68ba      	ldr	r2, [r7, #8]
 810fd6c:	6912      	ldr	r2, [r2, #16]
 810fd6e:	4611      	mov	r1, r2
 810fd70:	4798      	blx	r3
}
 810fd72:	bf00      	nop
 810fd74:	3718      	adds	r7, #24
 810fd76:	46bd      	mov	sp, r7
 810fd78:	bd80      	pop	{r7, pc}
 810fd7a:	bf00      	nop
 810fd7c:	081172bc 	.word	0x081172bc
 810fd80:	081174cc 	.word	0x081174cc
 810fd84:	081172d8 	.word	0x081172d8

0810fd88 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 810fd88:	b580      	push	{r7, lr}
 810fd8a:	b086      	sub	sp, #24
 810fd8c:	af00      	add	r7, sp, #0
 810fd8e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810fd90:	687b      	ldr	r3, [r7, #4]
 810fd92:	3b18      	subs	r3, #24
 810fd94:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810fd96:	697b      	ldr	r3, [r7, #20]
 810fd98:	689b      	ldr	r3, [r3, #8]
 810fd9a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 810fd9c:	697b      	ldr	r3, [r7, #20]
 810fd9e:	68db      	ldr	r3, [r3, #12]
 810fda0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 810fda2:	693b      	ldr	r3, [r7, #16]
 810fda4:	3318      	adds	r3, #24
 810fda6:	4619      	mov	r1, r3
 810fda8:	68f8      	ldr	r0, [r7, #12]
 810fdaa:	f7ff feee 	bl	810fb8a <metal_io_virt_to_offset>
 810fdae:	4601      	mov	r1, r0
 810fdb0:	2301      	movs	r3, #1
 810fdb2:	2205      	movs	r2, #5
 810fdb4:	68f8      	ldr	r0, [r7, #12]
 810fdb6:	f7ff ff01 	bl	810fbbc <metal_io_read>
 810fdba:	4602      	mov	r2, r0
 810fdbc:	460b      	mov	r3, r1
 810fdbe:	4613      	mov	r3, r2
 810fdc0:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 810fdc2:	7afb      	ldrb	r3, [r7, #11]
}
 810fdc4:	4618      	mov	r0, r3
 810fdc6:	3718      	adds	r7, #24
 810fdc8:	46bd      	mov	sp, r7
 810fdca:	bd80      	pop	{r7, pc}

0810fdcc <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 810fdcc:	b580      	push	{r7, lr}
 810fdce:	b086      	sub	sp, #24
 810fdd0:	af00      	add	r7, sp, #0
 810fdd2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810fdd4:	687b      	ldr	r3, [r7, #4]
 810fdd6:	3b18      	subs	r3, #24
 810fdd8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810fdda:	697b      	ldr	r3, [r7, #20]
 810fddc:	689b      	ldr	r3, [r3, #8]
 810fdde:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 810fde0:	697b      	ldr	r3, [r7, #20]
 810fde2:	68db      	ldr	r3, [r3, #12]
 810fde4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 810fde6:	693b      	ldr	r3, [r7, #16]
 810fde8:	330c      	adds	r3, #12
 810fdea:	4619      	mov	r1, r3
 810fdec:	68f8      	ldr	r0, [r7, #12]
 810fdee:	f7ff fecc 	bl	810fb8a <metal_io_virt_to_offset>
 810fdf2:	4601      	mov	r1, r0
 810fdf4:	2304      	movs	r3, #4
 810fdf6:	2205      	movs	r2, #5
 810fdf8:	68f8      	ldr	r0, [r7, #12]
 810fdfa:	f7ff fedf 	bl	810fbbc <metal_io_read>
 810fdfe:	4602      	mov	r2, r0
 810fe00:	460b      	mov	r3, r1
 810fe02:	4613      	mov	r3, r2
 810fe04:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 810fe06:	68bb      	ldr	r3, [r7, #8]
}
 810fe08:	4618      	mov	r0, r3
 810fe0a:	3718      	adds	r7, #24
 810fe0c:	46bd      	mov	sp, r7
 810fe0e:	bd80      	pop	{r7, pc}

0810fe10 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 810fe10:	b480      	push	{r7}
 810fe12:	b083      	sub	sp, #12
 810fe14:	af00      	add	r7, sp, #0
 810fe16:	6078      	str	r0, [r7, #4]
 810fe18:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810fe1a:	2300      	movs	r3, #0
}
 810fe1c:	4618      	mov	r0, r3
 810fe1e:	370c      	adds	r7, #12
 810fe20:	46bd      	mov	sp, r7
 810fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fe26:	4770      	bx	lr

0810fe28 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 810fe28:	b480      	push	{r7}
 810fe2a:	b085      	sub	sp, #20
 810fe2c:	af00      	add	r7, sp, #0
 810fe2e:	60f8      	str	r0, [r7, #12]
 810fe30:	60b9      	str	r1, [r7, #8]
 810fe32:	607a      	str	r2, [r7, #4]
 810fe34:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 810fe36:	bf00      	nop
 810fe38:	3714      	adds	r7, #20
 810fe3a:	46bd      	mov	sp, r7
 810fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fe40:	4770      	bx	lr
	...

0810fe44 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 810fe44:	b580      	push	{r7, lr}
 810fe46:	b08e      	sub	sp, #56	@ 0x38
 810fe48:	af00      	add	r7, sp, #0
 810fe4a:	60f8      	str	r0, [r7, #12]
 810fe4c:	60b9      	str	r1, [r7, #8]
 810fe4e:	607a      	str	r2, [r7, #4]
 810fe50:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 810fe52:	687b      	ldr	r3, [r7, #4]
 810fe54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 810fe56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fe58:	7e5b      	ldrb	r3, [r3, #25]
 810fe5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 810fe5c:	2050      	movs	r0, #80	@ 0x50
 810fe5e:	f7ff ff2f 	bl	810fcc0 <metal_allocate_memory>
 810fe62:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 810fe64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fe66:	2b00      	cmp	r3, #0
 810fe68:	d101      	bne.n	810fe6e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810fe6a:	2300      	movs	r3, #0
 810fe6c:	e092      	b.n	810ff94 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 810fe6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810fe70:	4613      	mov	r3, r2
 810fe72:	005b      	lsls	r3, r3, #1
 810fe74:	4413      	add	r3, r2
 810fe76:	00db      	lsls	r3, r3, #3
 810fe78:	4618      	mov	r0, r3
 810fe7a:	f7ff ff21 	bl	810fcc0 <metal_allocate_memory>
 810fe7e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 810fe80:	6a3b      	ldr	r3, [r7, #32]
 810fe82:	2b00      	cmp	r3, #0
 810fe84:	f000 8081 	beq.w	810ff8a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 810fe88:	2250      	movs	r2, #80	@ 0x50
 810fe8a:	2100      	movs	r1, #0
 810fe8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810fe8e:	f002 fe52 	bl	8112b36 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 810fe92:	2218      	movs	r2, #24
 810fe94:	2100      	movs	r1, #0
 810fe96:	6a38      	ldr	r0, [r7, #32]
 810fe98:	f002 fe4d 	bl	8112b36 <memset>
	vdev = &rpvdev->vdev;
 810fe9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fe9e:	3318      	adds	r3, #24
 810fea0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 810fea2:	2300      	movs	r3, #0
 810fea4:	637b      	str	r3, [r7, #52]	@ 0x34
 810fea6:	e025      	b.n	810fef4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 810fea8:	2300      	movs	r3, #0
 810feaa:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 810feac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810feae:	4613      	mov	r3, r2
 810feb0:	009b      	lsls	r3, r3, #2
 810feb2:	4413      	add	r3, r2
 810feb4:	009b      	lsls	r3, r3, #2
 810feb6:	3318      	adds	r3, #24
 810feb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810feba:	4413      	add	r3, r2
 810febc:	3304      	adds	r3, #4
 810febe:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 810fec0:	68fb      	ldr	r3, [r7, #12]
 810fec2:	2b00      	cmp	r3, #0
 810fec4:	d102      	bne.n	810fecc <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 810fec6:	69bb      	ldr	r3, [r7, #24]
 810fec8:	689b      	ldr	r3, [r3, #8]
 810feca:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 810fecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810fece:	f7ff ff0e 	bl	810fcee <virtqueue_allocate>
 810fed2:	6178      	str	r0, [r7, #20]
		if (!vq)
 810fed4:	697b      	ldr	r3, [r7, #20]
 810fed6:	2b00      	cmp	r3, #0
 810fed8:	d031      	beq.n	810ff3e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 810feda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810fedc:	4613      	mov	r3, r2
 810fede:	005b      	lsls	r3, r3, #1
 810fee0:	4413      	add	r3, r2
 810fee2:	00db      	lsls	r3, r3, #3
 810fee4:	461a      	mov	r2, r3
 810fee6:	6a3b      	ldr	r3, [r7, #32]
 810fee8:	4413      	add	r3, r2
 810feea:	697a      	ldr	r2, [r7, #20]
 810feec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 810feee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fef0:	3301      	adds	r3, #1
 810fef2:	637b      	str	r3, [r7, #52]	@ 0x34
 810fef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810fef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fef8:	429a      	cmp	r2, r3
 810fefa:	d3d5      	bcc.n	810fea8 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 810fefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fefe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ff00:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 810ff02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ff04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810ff06:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 810ff08:	69fb      	ldr	r3, [r7, #28]
 810ff0a:	6a3a      	ldr	r2, [r7, #32]
 810ff0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 810ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ff10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ff12:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 810ff14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ff16:	683a      	ldr	r2, [r7, #0]
 810ff18:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810ff1a:	69fb      	ldr	r3, [r7, #28]
 810ff1c:	68ba      	ldr	r2, [r7, #8]
 810ff1e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 810ff20:	69fb      	ldr	r3, [r7, #28]
 810ff22:	68fa      	ldr	r2, [r7, #12]
 810ff24:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 810ff26:	69fb      	ldr	r3, [r7, #28]
 810ff28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ff2a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 810ff2c:	69fb      	ldr	r3, [r7, #28]
 810ff2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ff30:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 810ff32:	69fb      	ldr	r3, [r7, #28]
 810ff34:	4a19      	ldr	r2, [pc, #100]	@ (810ff9c <rproc_virtio_create_vdev+0x158>)
 810ff36:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 810ff38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ff3a:	3318      	adds	r3, #24
 810ff3c:	e02a      	b.n	810ff94 <rproc_virtio_create_vdev+0x150>
			goto err1;
 810ff3e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 810ff40:	2300      	movs	r3, #0
 810ff42:	637b      	str	r3, [r7, #52]	@ 0x34
 810ff44:	e019      	b.n	810ff7a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 810ff46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ff48:	4613      	mov	r3, r2
 810ff4a:	005b      	lsls	r3, r3, #1
 810ff4c:	4413      	add	r3, r2
 810ff4e:	00db      	lsls	r3, r3, #3
 810ff50:	461a      	mov	r2, r3
 810ff52:	6a3b      	ldr	r3, [r7, #32]
 810ff54:	4413      	add	r3, r2
 810ff56:	681b      	ldr	r3, [r3, #0]
 810ff58:	2b00      	cmp	r3, #0
 810ff5a:	d00b      	beq.n	810ff74 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 810ff5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ff5e:	4613      	mov	r3, r2
 810ff60:	005b      	lsls	r3, r3, #1
 810ff62:	4413      	add	r3, r2
 810ff64:	00db      	lsls	r3, r3, #3
 810ff66:	461a      	mov	r2, r3
 810ff68:	6a3b      	ldr	r3, [r7, #32]
 810ff6a:	4413      	add	r3, r2
 810ff6c:	681b      	ldr	r3, [r3, #0]
 810ff6e:	4618      	mov	r0, r3
 810ff70:	f7ff feb2 	bl	810fcd8 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 810ff74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ff76:	3301      	adds	r3, #1
 810ff78:	637b      	str	r3, [r7, #52]	@ 0x34
 810ff7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ff7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ff7e:	429a      	cmp	r2, r3
 810ff80:	d3e1      	bcc.n	810ff46 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 810ff82:	6a38      	ldr	r0, [r7, #32]
 810ff84:	f7ff fea8 	bl	810fcd8 <metal_free_memory>
 810ff88:	e000      	b.n	810ff8c <rproc_virtio_create_vdev+0x148>
		goto err0;
 810ff8a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 810ff8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810ff8e:	f7ff fea3 	bl	810fcd8 <metal_free_memory>
	return NULL;
 810ff92:	2300      	movs	r3, #0
}
 810ff94:	4618      	mov	r0, r3
 810ff96:	3738      	adds	r7, #56	@ 0x38
 810ff98:	46bd      	mov	sp, r7
 810ff9a:	bd80      	pop	{r7, pc}
 810ff9c:	081174a8 	.word	0x081174a8

0810ffa0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 810ffa0:	b480      	push	{r7}
 810ffa2:	b087      	sub	sp, #28
 810ffa4:	af00      	add	r7, sp, #0
 810ffa6:	60f8      	str	r0, [r7, #12]
 810ffa8:	60b9      	str	r1, [r7, #8]
 810ffaa:	607a      	str	r2, [r7, #4]
 810ffac:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 810ffae:	68fb      	ldr	r3, [r7, #12]
 810ffb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ffb2:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 810ffb4:	68ba      	ldr	r2, [r7, #8]
 810ffb6:	697b      	ldr	r3, [r7, #20]
 810ffb8:	429a      	cmp	r2, r3
 810ffba:	d302      	bcc.n	810ffc2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 810ffbc:	f06f 0301 	mvn.w	r3, #1
 810ffc0:	e019      	b.n	810fff6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 810ffc2:	68fb      	ldr	r3, [r7, #12]
 810ffc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810ffc6:	68ba      	ldr	r2, [r7, #8]
 810ffc8:	4613      	mov	r3, r2
 810ffca:	005b      	lsls	r3, r3, #1
 810ffcc:	4413      	add	r3, r2
 810ffce:	00db      	lsls	r3, r3, #3
 810ffd0:	440b      	add	r3, r1
 810ffd2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 810ffd4:	693b      	ldr	r3, [r7, #16]
 810ffd6:	6a3a      	ldr	r2, [r7, #32]
 810ffd8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 810ffda:	693b      	ldr	r3, [r7, #16]
 810ffdc:	687a      	ldr	r2, [r7, #4]
 810ffde:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 810ffe0:	693b      	ldr	r3, [r7, #16]
 810ffe2:	683a      	ldr	r2, [r7, #0]
 810ffe4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 810ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ffe8:	b29a      	uxth	r2, r3
 810ffea:	693b      	ldr	r3, [r7, #16]
 810ffec:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 810ffee:	693b      	ldr	r3, [r7, #16]
 810fff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810fff2:	609a      	str	r2, [r3, #8]

	return 0;
 810fff4:	2300      	movs	r3, #0
}
 810fff6:	4618      	mov	r0, r3
 810fff8:	371c      	adds	r7, #28
 810fffa:	46bd      	mov	sp, r7
 810fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110000:	4770      	bx	lr

08110002 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8110002:	b580      	push	{r7, lr}
 8110004:	b086      	sub	sp, #24
 8110006:	af00      	add	r7, sp, #0
 8110008:	6078      	str	r0, [r7, #4]
 811000a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 811000c:	687b      	ldr	r3, [r7, #4]
 811000e:	2b00      	cmp	r3, #0
 8110010:	d102      	bne.n	8110018 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8110012:	f06f 0315 	mvn.w	r3, #21
 8110016:	e02c      	b.n	8110072 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8110018:	687b      	ldr	r3, [r7, #4]
 811001a:	681b      	ldr	r3, [r3, #0]
 811001c:	683a      	ldr	r2, [r7, #0]
 811001e:	429a      	cmp	r2, r3
 8110020:	d101      	bne.n	8110026 <rproc_virtio_notified+0x24>
		return 0;
 8110022:	2300      	movs	r3, #0
 8110024:	e025      	b.n	8110072 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8110026:	687b      	ldr	r3, [r7, #4]
 8110028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811002a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 811002c:	2300      	movs	r3, #0
 811002e:	617b      	str	r3, [r7, #20]
 8110030:	e01a      	b.n	8110068 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8110032:	687b      	ldr	r3, [r7, #4]
 8110034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8110036:	697a      	ldr	r2, [r7, #20]
 8110038:	4613      	mov	r3, r2
 811003a:	005b      	lsls	r3, r3, #1
 811003c:	4413      	add	r3, r2
 811003e:	00db      	lsls	r3, r3, #3
 8110040:	440b      	add	r3, r1
 8110042:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8110044:	68fb      	ldr	r3, [r7, #12]
 8110046:	691b      	ldr	r3, [r3, #16]
 8110048:	683a      	ldr	r2, [r7, #0]
 811004a:	429a      	cmp	r2, r3
 811004c:	d003      	beq.n	8110056 <rproc_virtio_notified+0x54>
 811004e:	683b      	ldr	r3, [r7, #0]
 8110050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110054:	d105      	bne.n	8110062 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8110056:	68fb      	ldr	r3, [r7, #12]
 8110058:	681b      	ldr	r3, [r3, #0]
 811005a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 811005c:	68b8      	ldr	r0, [r7, #8]
 811005e:	f001 fa1b 	bl	8111498 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8110062:	697b      	ldr	r3, [r7, #20]
 8110064:	3301      	adds	r3, #1
 8110066:	617b      	str	r3, [r7, #20]
 8110068:	697a      	ldr	r2, [r7, #20]
 811006a:	693b      	ldr	r3, [r7, #16]
 811006c:	429a      	cmp	r2, r3
 811006e:	d3e0      	bcc.n	8110032 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8110070:	2300      	movs	r3, #0
}
 8110072:	4618      	mov	r0, r3
 8110074:	3718      	adds	r7, #24
 8110076:	46bd      	mov	sp, r7
 8110078:	bd80      	pop	{r7, pc}

0811007a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 811007a:	b580      	push	{r7, lr}
 811007c:	b084      	sub	sp, #16
 811007e:	af00      	add	r7, sp, #0
 8110080:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8110082:	687b      	ldr	r3, [r7, #4]
 8110084:	699b      	ldr	r3, [r3, #24]
 8110086:	2b00      	cmp	r3, #0
 8110088:	d00a      	beq.n	81100a0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 811008a:	6878      	ldr	r0, [r7, #4]
 811008c:	f7ff fe7c 	bl	810fd88 <rproc_virtio_get_status>
 8110090:	4603      	mov	r3, r0
 8110092:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8110094:	7bfb      	ldrb	r3, [r7, #15]
 8110096:	f003 0304 	and.w	r3, r3, #4
 811009a:	2b00      	cmp	r3, #0
 811009c:	d102      	bne.n	81100a4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 811009e:	e7f4      	b.n	811008a <rproc_virtio_wait_remote_ready+0x10>
		return;
 81100a0:	bf00      	nop
 81100a2:	e000      	b.n	81100a6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81100a4:	bf00      	nop
	}
}
 81100a6:	3710      	adds	r7, #16
 81100a8:	46bd      	mov	sp, r7
 81100aa:	bd80      	pop	{r7, pc}

081100ac <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81100ac:	b480      	push	{r7}
 81100ae:	b083      	sub	sp, #12
 81100b0:	af00      	add	r7, sp, #0
 81100b2:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81100b4:	bf00      	nop
 81100b6:	687b      	ldr	r3, [r7, #4]
 81100b8:	2201      	movs	r2, #1
 81100ba:	4611      	mov	r1, r2
 81100bc:	f3bf 8f5b 	dmb	ish
 81100c0:	e8d3 2f4f 	ldrexb	r2, [r3]
 81100c4:	e8c3 1f40 	strexb	r0, r1, [r3]
 81100c8:	2800      	cmp	r0, #0
 81100ca:	d1f9      	bne.n	81100c0 <__metal_mutex_acquire+0x14>
 81100cc:	f3bf 8f5b 	dmb	ish
 81100d0:	b2d3      	uxtb	r3, r2
 81100d2:	2b00      	cmp	r3, #0
 81100d4:	d1ef      	bne.n	81100b6 <__metal_mutex_acquire+0xa>
		;
	}
}
 81100d6:	bf00      	nop
 81100d8:	bf00      	nop
 81100da:	370c      	adds	r7, #12
 81100dc:	46bd      	mov	sp, r7
 81100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81100e2:	4770      	bx	lr

081100e4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81100e4:	b480      	push	{r7}
 81100e6:	b083      	sub	sp, #12
 81100e8:	af00      	add	r7, sp, #0
 81100ea:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81100ec:	687b      	ldr	r3, [r7, #4]
 81100ee:	f3bf 8f5b 	dmb	ish
 81100f2:	2200      	movs	r2, #0
 81100f4:	701a      	strb	r2, [r3, #0]
 81100f6:	f3bf 8f5b 	dmb	ish
}
 81100fa:	bf00      	nop
 81100fc:	370c      	adds	r7, #12
 81100fe:	46bd      	mov	sp, r7
 8110100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110104:	4770      	bx	lr

08110106 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8110106:	b580      	push	{r7, lr}
 8110108:	b082      	sub	sp, #8
 811010a:	af00      	add	r7, sp, #0
 811010c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 811010e:	6878      	ldr	r0, [r7, #4]
 8110110:	f7ff ffcc 	bl	81100ac <__metal_mutex_acquire>
}
 8110114:	bf00      	nop
 8110116:	3708      	adds	r7, #8
 8110118:	46bd      	mov	sp, r7
 811011a:	bd80      	pop	{r7, pc}

0811011c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 811011c:	b580      	push	{r7, lr}
 811011e:	b082      	sub	sp, #8
 8110120:	af00      	add	r7, sp, #0
 8110122:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8110124:	6878      	ldr	r0, [r7, #4]
 8110126:	f7ff ffdd 	bl	81100e4 <__metal_mutex_release>
}
 811012a:	bf00      	nop
 811012c:	3708      	adds	r7, #8
 811012e:	46bd      	mov	sp, r7
 8110130:	bd80      	pop	{r7, pc}

08110132 <metal_list_add_before>:
{
 8110132:	b480      	push	{r7}
 8110134:	b083      	sub	sp, #12
 8110136:	af00      	add	r7, sp, #0
 8110138:	6078      	str	r0, [r7, #4]
 811013a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 811013c:	687b      	ldr	r3, [r7, #4]
 811013e:	685a      	ldr	r2, [r3, #4]
 8110140:	683b      	ldr	r3, [r7, #0]
 8110142:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8110144:	683b      	ldr	r3, [r7, #0]
 8110146:	687a      	ldr	r2, [r7, #4]
 8110148:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 811014a:	683b      	ldr	r3, [r7, #0]
 811014c:	681b      	ldr	r3, [r3, #0]
 811014e:	683a      	ldr	r2, [r7, #0]
 8110150:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8110152:	683b      	ldr	r3, [r7, #0]
 8110154:	685b      	ldr	r3, [r3, #4]
 8110156:	683a      	ldr	r2, [r7, #0]
 8110158:	601a      	str	r2, [r3, #0]
}
 811015a:	bf00      	nop
 811015c:	370c      	adds	r7, #12
 811015e:	46bd      	mov	sp, r7
 8110160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110164:	4770      	bx	lr

08110166 <metal_list_add_tail>:
{
 8110166:	b580      	push	{r7, lr}
 8110168:	b082      	sub	sp, #8
 811016a:	af00      	add	r7, sp, #0
 811016c:	6078      	str	r0, [r7, #4]
 811016e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8110170:	6839      	ldr	r1, [r7, #0]
 8110172:	6878      	ldr	r0, [r7, #4]
 8110174:	f7ff ffdd 	bl	8110132 <metal_list_add_before>
}
 8110178:	bf00      	nop
 811017a:	3708      	adds	r7, #8
 811017c:	46bd      	mov	sp, r7
 811017e:	bd80      	pop	{r7, pc}

08110180 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8110180:	b480      	push	{r7}
 8110182:	b083      	sub	sp, #12
 8110184:	af00      	add	r7, sp, #0
 8110186:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8110188:	687b      	ldr	r3, [r7, #4]
 811018a:	681b      	ldr	r3, [r3, #0]
 811018c:	687a      	ldr	r2, [r7, #4]
 811018e:	6852      	ldr	r2, [r2, #4]
 8110190:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8110192:	687b      	ldr	r3, [r7, #4]
 8110194:	685b      	ldr	r3, [r3, #4]
 8110196:	687a      	ldr	r2, [r7, #4]
 8110198:	6812      	ldr	r2, [r2, #0]
 811019a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 811019c:	687b      	ldr	r3, [r7, #4]
 811019e:	687a      	ldr	r2, [r7, #4]
 81101a0:	605a      	str	r2, [r3, #4]
 81101a2:	687b      	ldr	r3, [r7, #4]
 81101a4:	685a      	ldr	r2, [r3, #4]
 81101a6:	687b      	ldr	r3, [r7, #4]
 81101a8:	601a      	str	r2, [r3, #0]
}
 81101aa:	bf00      	nop
 81101ac:	370c      	adds	r7, #12
 81101ae:	46bd      	mov	sp, r7
 81101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81101b4:	4770      	bx	lr

081101b6 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 81101b6:	b480      	push	{r7}
 81101b8:	b083      	sub	sp, #12
 81101ba:	af00      	add	r7, sp, #0
 81101bc:	6078      	str	r0, [r7, #4]
 81101be:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81101c0:	683b      	ldr	r3, [r7, #0]
 81101c2:	095b      	lsrs	r3, r3, #5
 81101c4:	009a      	lsls	r2, r3, #2
 81101c6:	6879      	ldr	r1, [r7, #4]
 81101c8:	440a      	add	r2, r1
 81101ca:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81101cc:	683a      	ldr	r2, [r7, #0]
 81101ce:	f002 021f 	and.w	r2, r2, #31
 81101d2:	2001      	movs	r0, #1
 81101d4:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81101d8:	009b      	lsls	r3, r3, #2
 81101da:	6878      	ldr	r0, [r7, #4]
 81101dc:	4403      	add	r3, r0
 81101de:	430a      	orrs	r2, r1
 81101e0:	601a      	str	r2, [r3, #0]
}
 81101e2:	bf00      	nop
 81101e4:	370c      	adds	r7, #12
 81101e6:	46bd      	mov	sp, r7
 81101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81101ec:	4770      	bx	lr

081101ee <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 81101ee:	b480      	push	{r7}
 81101f0:	b083      	sub	sp, #12
 81101f2:	af00      	add	r7, sp, #0
 81101f4:	6078      	str	r0, [r7, #4]
 81101f6:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 81101f8:	683b      	ldr	r3, [r7, #0]
 81101fa:	095b      	lsrs	r3, r3, #5
 81101fc:	009b      	lsls	r3, r3, #2
 81101fe:	687a      	ldr	r2, [r7, #4]
 8110200:	4413      	add	r3, r2
 8110202:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8110204:	683b      	ldr	r3, [r7, #0]
 8110206:	f003 031f 	and.w	r3, r3, #31
 811020a:	2101      	movs	r1, #1
 811020c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8110210:	4013      	ands	r3, r2
}
 8110212:	4618      	mov	r0, r3
 8110214:	370c      	adds	r7, #12
 8110216:	46bd      	mov	sp, r7
 8110218:	f85d 7b04 	ldr.w	r7, [sp], #4
 811021c:	4770      	bx	lr

0811021e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 811021e:	b480      	push	{r7}
 8110220:	b083      	sub	sp, #12
 8110222:	af00      	add	r7, sp, #0
 8110224:	6078      	str	r0, [r7, #4]
 8110226:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8110228:	683b      	ldr	r3, [r7, #0]
 811022a:	095b      	lsrs	r3, r3, #5
 811022c:	009a      	lsls	r2, r3, #2
 811022e:	6879      	ldr	r1, [r7, #4]
 8110230:	440a      	add	r2, r1
 8110232:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8110234:	683a      	ldr	r2, [r7, #0]
 8110236:	f002 021f 	and.w	r2, r2, #31
 811023a:	2001      	movs	r0, #1
 811023c:	fa00 f202 	lsl.w	r2, r0, r2
 8110240:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8110242:	009b      	lsls	r3, r3, #2
 8110244:	6878      	ldr	r0, [r7, #4]
 8110246:	4403      	add	r3, r0
 8110248:	400a      	ands	r2, r1
 811024a:	601a      	str	r2, [r3, #0]
}
 811024c:	bf00      	nop
 811024e:	370c      	adds	r7, #12
 8110250:	46bd      	mov	sp, r7
 8110252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110256:	4770      	bx	lr

08110258 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8110258:	b580      	push	{r7, lr}
 811025a:	b082      	sub	sp, #8
 811025c:	af00      	add	r7, sp, #0
 811025e:	6078      	str	r0, [r7, #4]
 8110260:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8110262:	6839      	ldr	r1, [r7, #0]
 8110264:	6878      	ldr	r0, [r7, #4]
 8110266:	f7ff ffc2 	bl	81101ee <metal_bitmap_is_bit_set>
 811026a:	4603      	mov	r3, r0
 811026c:	2b00      	cmp	r3, #0
 811026e:	bf0c      	ite	eq
 8110270:	2301      	moveq	r3, #1
 8110272:	2300      	movne	r3, #0
 8110274:	b2db      	uxtb	r3, r3
}
 8110276:	4618      	mov	r0, r3
 8110278:	3708      	adds	r7, #8
 811027a:	46bd      	mov	sp, r7
 811027c:	bd80      	pop	{r7, pc}

0811027e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 811027e:	b580      	push	{r7, lr}
 8110280:	b086      	sub	sp, #24
 8110282:	af00      	add	r7, sp, #0
 8110284:	60f8      	str	r0, [r7, #12]
 8110286:	60b9      	str	r1, [r7, #8]
 8110288:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 811028a:	68bb      	ldr	r3, [r7, #8]
 811028c:	617b      	str	r3, [r7, #20]
 811028e:	e002      	b.n	8110296 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8110290:	697b      	ldr	r3, [r7, #20]
 8110292:	3301      	adds	r3, #1
 8110294:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8110296:	697a      	ldr	r2, [r7, #20]
 8110298:	687b      	ldr	r3, [r7, #4]
 811029a:	429a      	cmp	r2, r3
 811029c:	d207      	bcs.n	81102ae <metal_bitmap_next_clear_bit+0x30>
 811029e:	697b      	ldr	r3, [r7, #20]
 81102a0:	4619      	mov	r1, r3
 81102a2:	68f8      	ldr	r0, [r7, #12]
 81102a4:	f7ff ffd8 	bl	8110258 <metal_bitmap_is_bit_clear>
 81102a8:	4603      	mov	r3, r0
 81102aa:	2b00      	cmp	r3, #0
 81102ac:	d0f0      	beq.n	8110290 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 81102ae:	697b      	ldr	r3, [r7, #20]
}
 81102b0:	4618      	mov	r0, r3
 81102b2:	3718      	adds	r7, #24
 81102b4:	46bd      	mov	sp, r7
 81102b6:	bd80      	pop	{r7, pc}

081102b8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 81102b8:	b580      	push	{r7, lr}
 81102ba:	b084      	sub	sp, #16
 81102bc:	af00      	add	r7, sp, #0
 81102be:	60f8      	str	r0, [r7, #12]
 81102c0:	60b9      	str	r1, [r7, #8]
 81102c2:	607a      	str	r2, [r7, #4]
 81102c4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81102c6:	68fb      	ldr	r3, [r7, #12]
 81102c8:	2220      	movs	r2, #32
 81102ca:	68b9      	ldr	r1, [r7, #8]
 81102cc:	4618      	mov	r0, r3
 81102ce:	f002 fc4c 	bl	8112b6a <strncpy>
	ept->addr = src;
 81102d2:	68fb      	ldr	r3, [r7, #12]
 81102d4:	687a      	ldr	r2, [r7, #4]
 81102d6:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 81102d8:	68fb      	ldr	r3, [r7, #12]
 81102da:	683a      	ldr	r2, [r7, #0]
 81102dc:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 81102de:	68fb      	ldr	r3, [r7, #12]
 81102e0:	69ba      	ldr	r2, [r7, #24]
 81102e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81102e4:	68fb      	ldr	r3, [r7, #12]
 81102e6:	69fa      	ldr	r2, [r7, #28]
 81102e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 81102ea:	bf00      	nop
 81102ec:	3710      	adds	r7, #16
 81102ee:	46bd      	mov	sp, r7
 81102f0:	bd80      	pop	{r7, pc}

081102f2 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 81102f2:	b580      	push	{r7, lr}
 81102f4:	b084      	sub	sp, #16
 81102f6:	af00      	add	r7, sp, #0
 81102f8:	6078      	str	r0, [r7, #4]
 81102fa:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 81102fc:	f04f 33ff 	mov.w	r3, #4294967295
 8110300:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8110302:	683b      	ldr	r3, [r7, #0]
 8110304:	461a      	mov	r2, r3
 8110306:	2100      	movs	r1, #0
 8110308:	6878      	ldr	r0, [r7, #4]
 811030a:	f7ff ffb8 	bl	811027e <metal_bitmap_next_clear_bit>
 811030e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8110310:	683b      	ldr	r3, [r7, #0]
 8110312:	68ba      	ldr	r2, [r7, #8]
 8110314:	429a      	cmp	r2, r3
 8110316:	d206      	bcs.n	8110326 <rpmsg_get_address+0x34>
		addr = nextbit;
 8110318:	68bb      	ldr	r3, [r7, #8]
 811031a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 811031c:	68bb      	ldr	r3, [r7, #8]
 811031e:	4619      	mov	r1, r3
 8110320:	6878      	ldr	r0, [r7, #4]
 8110322:	f7ff ff48 	bl	81101b6 <metal_bitmap_set_bit>
	}

	return addr;
 8110326:	68fb      	ldr	r3, [r7, #12]
}
 8110328:	4618      	mov	r0, r3
 811032a:	3710      	adds	r7, #16
 811032c:	46bd      	mov	sp, r7
 811032e:	bd80      	pop	{r7, pc}

08110330 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8110330:	b580      	push	{r7, lr}
 8110332:	b084      	sub	sp, #16
 8110334:	af00      	add	r7, sp, #0
 8110336:	60f8      	str	r0, [r7, #12]
 8110338:	60b9      	str	r1, [r7, #8]
 811033a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 811033c:	687a      	ldr	r2, [r7, #4]
 811033e:	68bb      	ldr	r3, [r7, #8]
 8110340:	429a      	cmp	r2, r3
 8110342:	da03      	bge.n	811034c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8110344:	6879      	ldr	r1, [r7, #4]
 8110346:	68f8      	ldr	r0, [r7, #12]
 8110348:	f7ff ff69 	bl	811021e <metal_bitmap_clear_bit>
}
 811034c:	bf00      	nop
 811034e:	3710      	adds	r7, #16
 8110350:	46bd      	mov	sp, r7
 8110352:	bd80      	pop	{r7, pc}

08110354 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8110354:	b580      	push	{r7, lr}
 8110356:	b084      	sub	sp, #16
 8110358:	af00      	add	r7, sp, #0
 811035a:	60f8      	str	r0, [r7, #12]
 811035c:	60b9      	str	r1, [r7, #8]
 811035e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8110360:	687a      	ldr	r2, [r7, #4]
 8110362:	68bb      	ldr	r3, [r7, #8]
 8110364:	429a      	cmp	r2, r3
 8110366:	da05      	bge.n	8110374 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8110368:	6879      	ldr	r1, [r7, #4]
 811036a:	68f8      	ldr	r0, [r7, #12]
 811036c:	f7ff ff3f 	bl	81101ee <metal_bitmap_is_bit_set>
 8110370:	4603      	mov	r3, r0
 8110372:	e000      	b.n	8110376 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8110374:	4b02      	ldr	r3, [pc, #8]	@ (8110380 <rpmsg_is_address_set+0x2c>)
}
 8110376:	4618      	mov	r0, r3
 8110378:	3710      	adds	r7, #16
 811037a:	46bd      	mov	sp, r7
 811037c:	bd80      	pop	{r7, pc}
 811037e:	bf00      	nop
 8110380:	fffff82d 	.word	0xfffff82d

08110384 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8110384:	b580      	push	{r7, lr}
 8110386:	b084      	sub	sp, #16
 8110388:	af00      	add	r7, sp, #0
 811038a:	60f8      	str	r0, [r7, #12]
 811038c:	60b9      	str	r1, [r7, #8]
 811038e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8110390:	687a      	ldr	r2, [r7, #4]
 8110392:	68bb      	ldr	r3, [r7, #8]
 8110394:	429a      	cmp	r2, r3
 8110396:	da05      	bge.n	81103a4 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8110398:	6879      	ldr	r1, [r7, #4]
 811039a:	68f8      	ldr	r0, [r7, #12]
 811039c:	f7ff ff0b 	bl	81101b6 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 81103a0:	2300      	movs	r3, #0
 81103a2:	e000      	b.n	81103a6 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 81103a4:	4b02      	ldr	r3, [pc, #8]	@ (81103b0 <rpmsg_set_address+0x2c>)
	}
}
 81103a6:	4618      	mov	r0, r3
 81103a8:	3710      	adds	r7, #16
 81103aa:	46bd      	mov	sp, r7
 81103ac:	bd80      	pop	{r7, pc}
 81103ae:	bf00      	nop
 81103b0:	fffff82d 	.word	0xfffff82d

081103b4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 81103b4:	b590      	push	{r4, r7, lr}
 81103b6:	b089      	sub	sp, #36	@ 0x24
 81103b8:	af02      	add	r7, sp, #8
 81103ba:	60f8      	str	r0, [r7, #12]
 81103bc:	60b9      	str	r1, [r7, #8]
 81103be:	607a      	str	r2, [r7, #4]
 81103c0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 81103c2:	68fb      	ldr	r3, [r7, #12]
 81103c4:	2b00      	cmp	r3, #0
 81103c6:	d00a      	beq.n	81103de <rpmsg_send_offchannel_raw+0x2a>
 81103c8:	68fb      	ldr	r3, [r7, #12]
 81103ca:	6a1b      	ldr	r3, [r3, #32]
 81103cc:	2b00      	cmp	r3, #0
 81103ce:	d006      	beq.n	81103de <rpmsg_send_offchannel_raw+0x2a>
 81103d0:	683b      	ldr	r3, [r7, #0]
 81103d2:	2b00      	cmp	r3, #0
 81103d4:	d003      	beq.n	81103de <rpmsg_send_offchannel_raw+0x2a>
 81103d6:	687b      	ldr	r3, [r7, #4]
 81103d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81103dc:	d101      	bne.n	81103e2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 81103de:	4b0d      	ldr	r3, [pc, #52]	@ (8110414 <rpmsg_send_offchannel_raw+0x60>)
 81103e0:	e014      	b.n	811040c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 81103e2:	68fb      	ldr	r3, [r7, #12]
 81103e4:	6a1b      	ldr	r3, [r3, #32]
 81103e6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 81103e8:	697b      	ldr	r3, [r7, #20]
 81103ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81103ec:	2b00      	cmp	r3, #0
 81103ee:	d00c      	beq.n	811040a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 81103f0:	697b      	ldr	r3, [r7, #20]
 81103f2:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 81103f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103f6:	9301      	str	r3, [sp, #4]
 81103f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81103fa:	9300      	str	r3, [sp, #0]
 81103fc:	683b      	ldr	r3, [r7, #0]
 81103fe:	687a      	ldr	r2, [r7, #4]
 8110400:	68b9      	ldr	r1, [r7, #8]
 8110402:	6978      	ldr	r0, [r7, #20]
 8110404:	47a0      	blx	r4
 8110406:	4603      	mov	r3, r0
 8110408:	e000      	b.n	811040c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 811040a:	4b02      	ldr	r3, [pc, #8]	@ (8110414 <rpmsg_send_offchannel_raw+0x60>)
}
 811040c:	4618      	mov	r0, r3
 811040e:	371c      	adds	r7, #28
 8110410:	46bd      	mov	sp, r7
 8110412:	bd90      	pop	{r4, r7, pc}
 8110414:	fffff82d 	.word	0xfffff82d

08110418 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8110418:	b580      	push	{r7, lr}
 811041a:	b090      	sub	sp, #64	@ 0x40
 811041c:	af02      	add	r7, sp, #8
 811041e:	6078      	str	r0, [r7, #4]
 8110420:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8110422:	683b      	ldr	r3, [r7, #0]
 8110424:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8110426:	687b      	ldr	r3, [r7, #4]
 8110428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811042a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 811042c:	6879      	ldr	r1, [r7, #4]
 811042e:	f107 030c 	add.w	r3, r7, #12
 8110432:	2220      	movs	r2, #32
 8110434:	4618      	mov	r0, r3
 8110436:	f002 fb98 	bl	8112b6a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 811043a:	687b      	ldr	r3, [r7, #4]
 811043c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 811043e:	f107 030c 	add.w	r3, r7, #12
 8110442:	2201      	movs	r2, #1
 8110444:	9201      	str	r2, [sp, #4]
 8110446:	2228      	movs	r2, #40	@ 0x28
 8110448:	9200      	str	r2, [sp, #0]
 811044a:	2235      	movs	r2, #53	@ 0x35
 811044c:	6878      	ldr	r0, [r7, #4]
 811044e:	f7ff ffb1 	bl	81103b4 <rpmsg_send_offchannel_raw>
 8110452:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8110454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110456:	2b00      	cmp	r3, #0
 8110458:	da01      	bge.n	811045e <rpmsg_send_ns_message+0x46>
		return ret;
 811045a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811045c:	e000      	b.n	8110460 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 811045e:	2300      	movs	r3, #0
}
 8110460:	4618      	mov	r0, r3
 8110462:	3738      	adds	r7, #56	@ 0x38
 8110464:	46bd      	mov	sp, r7
 8110466:	bd80      	pop	{r7, pc}

08110468 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8110468:	b580      	push	{r7, lr}
 811046a:	b088      	sub	sp, #32
 811046c:	af00      	add	r7, sp, #0
 811046e:	60f8      	str	r0, [r7, #12]
 8110470:	60b9      	str	r1, [r7, #8]
 8110472:	607a      	str	r2, [r7, #4]
 8110474:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8110476:	68fb      	ldr	r3, [r7, #12]
 8110478:	681b      	ldr	r3, [r3, #0]
 811047a:	61fb      	str	r3, [r7, #28]
 811047c:	e04b      	b.n	8110516 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 811047e:	2300      	movs	r3, #0
 8110480:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8110482:	69fb      	ldr	r3, [r7, #28]
 8110484:	3b34      	subs	r3, #52	@ 0x34
 8110486:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8110488:	687b      	ldr	r3, [r7, #4]
 811048a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811048e:	d006      	beq.n	811049e <rpmsg_get_endpoint+0x36>
 8110490:	697b      	ldr	r3, [r7, #20]
 8110492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110494:	687a      	ldr	r2, [r7, #4]
 8110496:	429a      	cmp	r2, r3
 8110498:	d101      	bne.n	811049e <rpmsg_get_endpoint+0x36>
			return ept;
 811049a:	697b      	ldr	r3, [r7, #20]
 811049c:	e040      	b.n	8110520 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 811049e:	697b      	ldr	r3, [r7, #20]
 81104a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81104a2:	687a      	ldr	r2, [r7, #4]
 81104a4:	429a      	cmp	r2, r3
 81104a6:	d106      	bne.n	81104b6 <rpmsg_get_endpoint+0x4e>
 81104a8:	697b      	ldr	r3, [r7, #20]
 81104aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81104ac:	683a      	ldr	r2, [r7, #0]
 81104ae:	429a      	cmp	r2, r3
 81104b0:	d101      	bne.n	81104b6 <rpmsg_get_endpoint+0x4e>
			return ept;
 81104b2:	697b      	ldr	r3, [r7, #20]
 81104b4:	e034      	b.n	8110520 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 81104b6:	68bb      	ldr	r3, [r7, #8]
 81104b8:	2b00      	cmp	r3, #0
 81104ba:	d00c      	beq.n	81104d6 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 81104bc:	697b      	ldr	r3, [r7, #20]
 81104be:	2220      	movs	r2, #32
 81104c0:	68b9      	ldr	r1, [r7, #8]
 81104c2:	4618      	mov	r0, r3
 81104c4:	f002 fb3f 	bl	8112b46 <strncmp>
 81104c8:	4603      	mov	r3, r0
 81104ca:	2b00      	cmp	r3, #0
 81104cc:	bf0c      	ite	eq
 81104ce:	2301      	moveq	r3, #1
 81104d0:	2300      	movne	r3, #0
 81104d2:	b2db      	uxtb	r3, r3
 81104d4:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 81104d6:	68bb      	ldr	r3, [r7, #8]
 81104d8:	2b00      	cmp	r3, #0
 81104da:	d018      	beq.n	811050e <rpmsg_get_endpoint+0xa6>
 81104dc:	69bb      	ldr	r3, [r7, #24]
 81104de:	2b00      	cmp	r3, #0
 81104e0:	d015      	beq.n	811050e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 81104e2:	683b      	ldr	r3, [r7, #0]
 81104e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81104e8:	d006      	beq.n	81104f8 <rpmsg_get_endpoint+0x90>
 81104ea:	697b      	ldr	r3, [r7, #20]
 81104ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81104ee:	683a      	ldr	r2, [r7, #0]
 81104f0:	429a      	cmp	r2, r3
 81104f2:	d101      	bne.n	81104f8 <rpmsg_get_endpoint+0x90>
			return ept;
 81104f4:	697b      	ldr	r3, [r7, #20]
 81104f6:	e013      	b.n	8110520 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 81104f8:	687b      	ldr	r3, [r7, #4]
 81104fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81104fe:	d107      	bne.n	8110510 <rpmsg_get_endpoint+0xa8>
 8110500:	697b      	ldr	r3, [r7, #20]
 8110502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110508:	d102      	bne.n	8110510 <rpmsg_get_endpoint+0xa8>
			return ept;
 811050a:	697b      	ldr	r3, [r7, #20]
 811050c:	e008      	b.n	8110520 <rpmsg_get_endpoint+0xb8>
			continue;
 811050e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8110510:	69fb      	ldr	r3, [r7, #28]
 8110512:	681b      	ldr	r3, [r3, #0]
 8110514:	61fb      	str	r3, [r7, #28]
 8110516:	68fb      	ldr	r3, [r7, #12]
 8110518:	69fa      	ldr	r2, [r7, #28]
 811051a:	429a      	cmp	r2, r3
 811051c:	d1af      	bne.n	811047e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 811051e:	2300      	movs	r3, #0
}
 8110520:	4618      	mov	r0, r3
 8110522:	3720      	adds	r7, #32
 8110524:	46bd      	mov	sp, r7
 8110526:	bd80      	pop	{r7, pc}

08110528 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8110528:	b580      	push	{r7, lr}
 811052a:	b084      	sub	sp, #16
 811052c:	af00      	add	r7, sp, #0
 811052e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8110530:	687b      	ldr	r3, [r7, #4]
 8110532:	2b00      	cmp	r3, #0
 8110534:	d016      	beq.n	8110564 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8110536:	687b      	ldr	r3, [r7, #4]
 8110538:	6a1b      	ldr	r3, [r3, #32]
 811053a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 811053c:	687b      	ldr	r3, [r7, #4]
 811053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110544:	d008      	beq.n	8110558 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8110546:	68fb      	ldr	r3, [r7, #12]
 8110548:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 811054c:	687b      	ldr	r3, [r7, #4]
 811054e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8110550:	461a      	mov	r2, r3
 8110552:	2180      	movs	r1, #128	@ 0x80
 8110554:	f7ff feec 	bl	8110330 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8110558:	687b      	ldr	r3, [r7, #4]
 811055a:	3334      	adds	r3, #52	@ 0x34
 811055c:	4618      	mov	r0, r3
 811055e:	f7ff fe0f 	bl	8110180 <metal_list_del>
 8110562:	e000      	b.n	8110566 <rpmsg_unregister_endpoint+0x3e>
		return;
 8110564:	bf00      	nop
}
 8110566:	3710      	adds	r7, #16
 8110568:	46bd      	mov	sp, r7
 811056a:	bd80      	pop	{r7, pc}

0811056c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 811056c:	b580      	push	{r7, lr}
 811056e:	b082      	sub	sp, #8
 8110570:	af00      	add	r7, sp, #0
 8110572:	6078      	str	r0, [r7, #4]
 8110574:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8110576:	683b      	ldr	r3, [r7, #0]
 8110578:	687a      	ldr	r2, [r7, #4]
 811057a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 811057c:	687a      	ldr	r2, [r7, #4]
 811057e:	683b      	ldr	r3, [r7, #0]
 8110580:	3334      	adds	r3, #52	@ 0x34
 8110582:	4619      	mov	r1, r3
 8110584:	4610      	mov	r0, r2
 8110586:	f7ff fdee 	bl	8110166 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 811058a:	2300      	movs	r3, #0
}
 811058c:	4618      	mov	r0, r3
 811058e:	3708      	adds	r7, #8
 8110590:	46bd      	mov	sp, r7
 8110592:	bd80      	pop	{r7, pc}

08110594 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8110594:	b580      	push	{r7, lr}
 8110596:	b088      	sub	sp, #32
 8110598:	af02      	add	r7, sp, #8
 811059a:	60f8      	str	r0, [r7, #12]
 811059c:	60b9      	str	r1, [r7, #8]
 811059e:	607a      	str	r2, [r7, #4]
 81105a0:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 81105a2:	683b      	ldr	r3, [r7, #0]
 81105a4:	613b      	str	r3, [r7, #16]

	if (!ept)
 81105a6:	68fb      	ldr	r3, [r7, #12]
 81105a8:	2b00      	cmp	r3, #0
 81105aa:	d101      	bne.n	81105b0 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 81105ac:	4b37      	ldr	r3, [pc, #220]	@ (811068c <rpmsg_create_ept+0xf8>)
 81105ae:	e068      	b.n	8110682 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 81105b0:	68bb      	ldr	r3, [r7, #8]
 81105b2:	3358      	adds	r3, #88	@ 0x58
 81105b4:	4618      	mov	r0, r3
 81105b6:	f7ff fda6 	bl	8110106 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 81105ba:	683b      	ldr	r3, [r7, #0]
 81105bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81105c0:	d018      	beq.n	81105f4 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 81105c2:	68bb      	ldr	r3, [r7, #8]
 81105c4:	3348      	adds	r3, #72	@ 0x48
 81105c6:	683a      	ldr	r2, [r7, #0]
 81105c8:	2180      	movs	r1, #128	@ 0x80
 81105ca:	4618      	mov	r0, r3
 81105cc:	f7ff fec2 	bl	8110354 <rpmsg_is_address_set>
 81105d0:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 81105d2:	697b      	ldr	r3, [r7, #20]
 81105d4:	2b00      	cmp	r3, #0
 81105d6:	d107      	bne.n	81105e8 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81105d8:	68bb      	ldr	r3, [r7, #8]
 81105da:	3348      	adds	r3, #72	@ 0x48
 81105dc:	683a      	ldr	r2, [r7, #0]
 81105de:	2180      	movs	r1, #128	@ 0x80
 81105e0:	4618      	mov	r0, r3
 81105e2:	f7ff fecf 	bl	8110384 <rpmsg_set_address>
 81105e6:	e00c      	b.n	8110602 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 81105e8:	697b      	ldr	r3, [r7, #20]
 81105ea:	2b00      	cmp	r3, #0
 81105ec:	dd40      	ble.n	8110670 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 81105ee:	2300      	movs	r3, #0
 81105f0:	617b      	str	r3, [r7, #20]
			goto ret_status;
 81105f2:	e040      	b.n	8110676 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 81105f4:	68bb      	ldr	r3, [r7, #8]
 81105f6:	3348      	adds	r3, #72	@ 0x48
 81105f8:	2180      	movs	r1, #128	@ 0x80
 81105fa:	4618      	mov	r0, r3
 81105fc:	f7ff fe79 	bl	81102f2 <rpmsg_get_address>
 8110600:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8110602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110604:	9301      	str	r3, [sp, #4]
 8110606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110608:	9300      	str	r3, [sp, #0]
 811060a:	6a3b      	ldr	r3, [r7, #32]
 811060c:	693a      	ldr	r2, [r7, #16]
 811060e:	6879      	ldr	r1, [r7, #4]
 8110610:	68f8      	ldr	r0, [r7, #12]
 8110612:	f7ff fe51 	bl	81102b8 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8110616:	68f9      	ldr	r1, [r7, #12]
 8110618:	68b8      	ldr	r0, [r7, #8]
 811061a:	f7ff ffa7 	bl	811056c <rpmsg_register_endpoint>
 811061e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8110620:	697b      	ldr	r3, [r7, #20]
 8110622:	2b00      	cmp	r3, #0
 8110624:	da06      	bge.n	8110634 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8110626:	68bb      	ldr	r3, [r7, #8]
 8110628:	3348      	adds	r3, #72	@ 0x48
 811062a:	693a      	ldr	r2, [r7, #16]
 811062c:	2180      	movs	r1, #128	@ 0x80
 811062e:	4618      	mov	r0, r3
 8110630:	f7ff fe7e 	bl	8110330 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8110634:	697b      	ldr	r3, [r7, #20]
 8110636:	2b00      	cmp	r3, #0
 8110638:	d11c      	bne.n	8110674 <rpmsg_create_ept+0xe0>
 811063a:	68fb      	ldr	r3, [r7, #12]
 811063c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110642:	d117      	bne.n	8110674 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8110644:	68bb      	ldr	r3, [r7, #8]
 8110646:	3358      	adds	r3, #88	@ 0x58
 8110648:	4618      	mov	r0, r3
 811064a:	f7ff fd67 	bl	811011c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 811064e:	2100      	movs	r1, #0
 8110650:	68f8      	ldr	r0, [r7, #12]
 8110652:	f7ff fee1 	bl	8110418 <rpmsg_send_ns_message>
 8110656:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8110658:	68bb      	ldr	r3, [r7, #8]
 811065a:	3358      	adds	r3, #88	@ 0x58
 811065c:	4618      	mov	r0, r3
 811065e:	f7ff fd52 	bl	8110106 <metal_mutex_acquire>
		if (status)
 8110662:	697b      	ldr	r3, [r7, #20]
 8110664:	2b00      	cmp	r3, #0
 8110666:	d005      	beq.n	8110674 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8110668:	68f8      	ldr	r0, [r7, #12]
 811066a:	f7ff ff5d 	bl	8110528 <rpmsg_unregister_endpoint>
 811066e:	e002      	b.n	8110676 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8110670:	bf00      	nop
 8110672:	e000      	b.n	8110676 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8110674:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8110676:	68bb      	ldr	r3, [r7, #8]
 8110678:	3358      	adds	r3, #88	@ 0x58
 811067a:	4618      	mov	r0, r3
 811067c:	f7ff fd4e 	bl	811011c <metal_mutex_release>
	return status;
 8110680:	697b      	ldr	r3, [r7, #20]
}
 8110682:	4618      	mov	r0, r3
 8110684:	3718      	adds	r7, #24
 8110686:	46bd      	mov	sp, r7
 8110688:	bd80      	pop	{r7, pc}
 811068a:	bf00      	nop
 811068c:	fffff82d 	.word	0xfffff82d

08110690 <__metal_cache_invalidate>:
{
 8110690:	b580      	push	{r7, lr}
 8110692:	b082      	sub	sp, #8
 8110694:	af00      	add	r7, sp, #0
 8110696:	6078      	str	r0, [r7, #4]
 8110698:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 811069a:	6839      	ldr	r1, [r7, #0]
 811069c:	6878      	ldr	r0, [r7, #4]
 811069e:	f000 fc58 	bl	8110f52 <metal_machine_cache_invalidate>
}
 81106a2:	bf00      	nop
 81106a4:	3708      	adds	r7, #8
 81106a6:	46bd      	mov	sp, r7
 81106a8:	bd80      	pop	{r7, pc}

081106aa <metal_cache_invalidate>:
{
 81106aa:	b580      	push	{r7, lr}
 81106ac:	b082      	sub	sp, #8
 81106ae:	af00      	add	r7, sp, #0
 81106b0:	6078      	str	r0, [r7, #4]
 81106b2:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 81106b4:	6839      	ldr	r1, [r7, #0]
 81106b6:	6878      	ldr	r0, [r7, #4]
 81106b8:	f7ff ffea 	bl	8110690 <__metal_cache_invalidate>
}
 81106bc:	bf00      	nop
 81106be:	3708      	adds	r7, #8
 81106c0:	46bd      	mov	sp, r7
 81106c2:	bd80      	pop	{r7, pc}

081106c4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 81106c4:	b480      	push	{r7}
 81106c6:	b083      	sub	sp, #12
 81106c8:	af00      	add	r7, sp, #0
 81106ca:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 81106cc:	2300      	movs	r3, #0
}
 81106ce:	4618      	mov	r0, r3
 81106d0:	370c      	adds	r7, #12
 81106d2:	46bd      	mov	sp, r7
 81106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106d8:	4770      	bx	lr

081106da <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 81106da:	b580      	push	{r7, lr}
 81106dc:	b082      	sub	sp, #8
 81106de:	af00      	add	r7, sp, #0
 81106e0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 81106e2:	6878      	ldr	r0, [r7, #4]
 81106e4:	f7ff ffee 	bl	81106c4 <__metal_sleep_usec>
 81106e8:	4603      	mov	r3, r0
}
 81106ea:	4618      	mov	r0, r3
 81106ec:	3708      	adds	r7, #8
 81106ee:	46bd      	mov	sp, r7
 81106f0:	bd80      	pop	{r7, pc}

081106f2 <metal_list_init>:
{
 81106f2:	b480      	push	{r7}
 81106f4:	b083      	sub	sp, #12
 81106f6:	af00      	add	r7, sp, #0
 81106f8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81106fa:	687b      	ldr	r3, [r7, #4]
 81106fc:	687a      	ldr	r2, [r7, #4]
 81106fe:	605a      	str	r2, [r3, #4]
 8110700:	687b      	ldr	r3, [r7, #4]
 8110702:	685a      	ldr	r2, [r3, #4]
 8110704:	687b      	ldr	r3, [r7, #4]
 8110706:	601a      	str	r2, [r3, #0]
}
 8110708:	bf00      	nop
 811070a:	370c      	adds	r7, #12
 811070c:	46bd      	mov	sp, r7
 811070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110712:	4770      	bx	lr

08110714 <metal_io_virt_to_offset>:
{
 8110714:	b480      	push	{r7}
 8110716:	b085      	sub	sp, #20
 8110718:	af00      	add	r7, sp, #0
 811071a:	6078      	str	r0, [r7, #4]
 811071c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 811071e:	687b      	ldr	r3, [r7, #4]
 8110720:	681b      	ldr	r3, [r3, #0]
 8110722:	683a      	ldr	r2, [r7, #0]
 8110724:	1ad3      	subs	r3, r2, r3
 8110726:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8110728:	687b      	ldr	r3, [r7, #4]
 811072a:	689b      	ldr	r3, [r3, #8]
 811072c:	68fa      	ldr	r2, [r7, #12]
 811072e:	429a      	cmp	r2, r3
 8110730:	d201      	bcs.n	8110736 <metal_io_virt_to_offset+0x22>
 8110732:	68fb      	ldr	r3, [r7, #12]
 8110734:	e001      	b.n	811073a <metal_io_virt_to_offset+0x26>
 8110736:	f04f 33ff 	mov.w	r3, #4294967295
}
 811073a:	4618      	mov	r0, r3
 811073c:	3714      	adds	r7, #20
 811073e:	46bd      	mov	sp, r7
 8110740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110744:	4770      	bx	lr

08110746 <__metal_mutex_init>:
{
 8110746:	b480      	push	{r7}
 8110748:	b085      	sub	sp, #20
 811074a:	af00      	add	r7, sp, #0
 811074c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 811074e:	687b      	ldr	r3, [r7, #4]
 8110750:	60fb      	str	r3, [r7, #12]
 8110752:	2300      	movs	r3, #0
 8110754:	60bb      	str	r3, [r7, #8]
 8110756:	68bb      	ldr	r3, [r7, #8]
 8110758:	461a      	mov	r2, r3
 811075a:	68fb      	ldr	r3, [r7, #12]
 811075c:	f3bf 8f5b 	dmb	ish
 8110760:	601a      	str	r2, [r3, #0]
 8110762:	f3bf 8f5b 	dmb	ish
}
 8110766:	bf00      	nop
 8110768:	3714      	adds	r7, #20
 811076a:	46bd      	mov	sp, r7
 811076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110770:	4770      	bx	lr

08110772 <__metal_mutex_acquire>:
{
 8110772:	b480      	push	{r7}
 8110774:	b083      	sub	sp, #12
 8110776:	af00      	add	r7, sp, #0
 8110778:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 811077a:	bf00      	nop
 811077c:	687b      	ldr	r3, [r7, #4]
 811077e:	2201      	movs	r2, #1
 8110780:	4611      	mov	r1, r2
 8110782:	f3bf 8f5b 	dmb	ish
 8110786:	e8d3 2f4f 	ldrexb	r2, [r3]
 811078a:	e8c3 1f40 	strexb	r0, r1, [r3]
 811078e:	2800      	cmp	r0, #0
 8110790:	d1f9      	bne.n	8110786 <__metal_mutex_acquire+0x14>
 8110792:	f3bf 8f5b 	dmb	ish
 8110796:	b2d3      	uxtb	r3, r2
 8110798:	2b00      	cmp	r3, #0
 811079a:	d1ef      	bne.n	811077c <__metal_mutex_acquire+0xa>
}
 811079c:	bf00      	nop
 811079e:	bf00      	nop
 81107a0:	370c      	adds	r7, #12
 81107a2:	46bd      	mov	sp, r7
 81107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107a8:	4770      	bx	lr

081107aa <__metal_mutex_release>:
{
 81107aa:	b480      	push	{r7}
 81107ac:	b083      	sub	sp, #12
 81107ae:	af00      	add	r7, sp, #0
 81107b0:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81107b2:	687b      	ldr	r3, [r7, #4]
 81107b4:	f3bf 8f5b 	dmb	ish
 81107b8:	2200      	movs	r2, #0
 81107ba:	701a      	strb	r2, [r3, #0]
 81107bc:	f3bf 8f5b 	dmb	ish
}
 81107c0:	bf00      	nop
 81107c2:	370c      	adds	r7, #12
 81107c4:	46bd      	mov	sp, r7
 81107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107ca:	4770      	bx	lr

081107cc <metal_mutex_init>:
{
 81107cc:	b580      	push	{r7, lr}
 81107ce:	b082      	sub	sp, #8
 81107d0:	af00      	add	r7, sp, #0
 81107d2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 81107d4:	6878      	ldr	r0, [r7, #4]
 81107d6:	f7ff ffb6 	bl	8110746 <__metal_mutex_init>
}
 81107da:	bf00      	nop
 81107dc:	3708      	adds	r7, #8
 81107de:	46bd      	mov	sp, r7
 81107e0:	bd80      	pop	{r7, pc}

081107e2 <metal_mutex_acquire>:
{
 81107e2:	b580      	push	{r7, lr}
 81107e4:	b082      	sub	sp, #8
 81107e6:	af00      	add	r7, sp, #0
 81107e8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81107ea:	6878      	ldr	r0, [r7, #4]
 81107ec:	f7ff ffc1 	bl	8110772 <__metal_mutex_acquire>
}
 81107f0:	bf00      	nop
 81107f2:	3708      	adds	r7, #8
 81107f4:	46bd      	mov	sp, r7
 81107f6:	bd80      	pop	{r7, pc}

081107f8 <metal_mutex_release>:
{
 81107f8:	b580      	push	{r7, lr}
 81107fa:	b082      	sub	sp, #8
 81107fc:	af00      	add	r7, sp, #0
 81107fe:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8110800:	6878      	ldr	r0, [r7, #4]
 8110802:	f7ff ffd2 	bl	81107aa <__metal_mutex_release>
}
 8110806:	bf00      	nop
 8110808:	3708      	adds	r7, #8
 811080a:	46bd      	mov	sp, r7
 811080c:	bd80      	pop	{r7, pc}

0811080e <rpmsg_init_ept>:
{
 811080e:	b580      	push	{r7, lr}
 8110810:	b084      	sub	sp, #16
 8110812:	af00      	add	r7, sp, #0
 8110814:	60f8      	str	r0, [r7, #12]
 8110816:	60b9      	str	r1, [r7, #8]
 8110818:	607a      	str	r2, [r7, #4]
 811081a:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 811081c:	68fb      	ldr	r3, [r7, #12]
 811081e:	2220      	movs	r2, #32
 8110820:	68b9      	ldr	r1, [r7, #8]
 8110822:	4618      	mov	r0, r3
 8110824:	f002 f9a1 	bl	8112b6a <strncpy>
	ept->addr = src;
 8110828:	68fb      	ldr	r3, [r7, #12]
 811082a:	687a      	ldr	r2, [r7, #4]
 811082c:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 811082e:	68fb      	ldr	r3, [r7, #12]
 8110830:	683a      	ldr	r2, [r7, #0]
 8110832:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8110834:	68fb      	ldr	r3, [r7, #12]
 8110836:	69ba      	ldr	r2, [r7, #24]
 8110838:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 811083a:	68fb      	ldr	r3, [r7, #12]
 811083c:	69fa      	ldr	r2, [r7, #28]
 811083e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8110840:	bf00      	nop
 8110842:	3710      	adds	r7, #16
 8110844:	46bd      	mov	sp, r7
 8110846:	bd80      	pop	{r7, pc}

08110848 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8110848:	b480      	push	{r7}
 811084a:	b083      	sub	sp, #12
 811084c:	af00      	add	r7, sp, #0
 811084e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8110850:	687b      	ldr	r3, [r7, #4]
 8110852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110854:	699b      	ldr	r3, [r3, #24]
}
 8110856:	4618      	mov	r0, r3
 8110858:	370c      	adds	r7, #12
 811085a:	46bd      	mov	sp, r7
 811085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110860:	4770      	bx	lr

08110862 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8110862:	b580      	push	{r7, lr}
 8110864:	b082      	sub	sp, #8
 8110866:	af00      	add	r7, sp, #0
 8110868:	6078      	str	r0, [r7, #4]
 811086a:	460b      	mov	r3, r1
 811086c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 811086e:	687b      	ldr	r3, [r7, #4]
 8110870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110872:	6a1b      	ldr	r3, [r3, #32]
 8110874:	685b      	ldr	r3, [r3, #4]
 8110876:	687a      	ldr	r2, [r7, #4]
 8110878:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 811087a:	78f9      	ldrb	r1, [r7, #3]
 811087c:	4610      	mov	r0, r2
 811087e:	4798      	blx	r3
}
 8110880:	bf00      	nop
 8110882:	3708      	adds	r7, #8
 8110884:	46bd      	mov	sp, r7
 8110886:	bd80      	pop	{r7, pc}

08110888 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8110888:	b580      	push	{r7, lr}
 811088a:	b082      	sub	sp, #8
 811088c:	af00      	add	r7, sp, #0
 811088e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8110890:	687b      	ldr	r3, [r7, #4]
 8110892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110894:	6a1b      	ldr	r3, [r3, #32]
 8110896:	681b      	ldr	r3, [r3, #0]
 8110898:	687a      	ldr	r2, [r7, #4]
 811089a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 811089c:	4610      	mov	r0, r2
 811089e:	4798      	blx	r3
 81108a0:	4603      	mov	r3, r0
}
 81108a2:	4618      	mov	r0, r3
 81108a4:	3708      	adds	r7, #8
 81108a6:	46bd      	mov	sp, r7
 81108a8:	bd80      	pop	{r7, pc}

081108aa <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 81108aa:	b580      	push	{r7, lr}
 81108ac:	b082      	sub	sp, #8
 81108ae:	af00      	add	r7, sp, #0
 81108b0:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 81108b2:	687b      	ldr	r3, [r7, #4]
 81108b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81108b6:	6a1b      	ldr	r3, [r3, #32]
 81108b8:	689b      	ldr	r3, [r3, #8]
 81108ba:	687a      	ldr	r2, [r7, #4]
 81108bc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 81108be:	4610      	mov	r0, r2
 81108c0:	4798      	blx	r3
 81108c2:	4603      	mov	r3, r0
}
 81108c4:	4618      	mov	r0, r3
 81108c6:	3708      	adds	r7, #8
 81108c8:	46bd      	mov	sp, r7
 81108ca:	bd80      	pop	{r7, pc}

081108cc <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 81108cc:	b580      	push	{r7, lr}
 81108ce:	b086      	sub	sp, #24
 81108d0:	af02      	add	r7, sp, #8
 81108d2:	60f8      	str	r0, [r7, #12]
 81108d4:	60b9      	str	r1, [r7, #8]
 81108d6:	607a      	str	r2, [r7, #4]
 81108d8:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 81108da:	68fb      	ldr	r3, [r7, #12]
 81108dc:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 81108de:	68b9      	ldr	r1, [r7, #8]
 81108e0:	69bb      	ldr	r3, [r7, #24]
 81108e2:	9300      	str	r3, [sp, #0]
 81108e4:	683b      	ldr	r3, [r7, #0]
 81108e6:	687a      	ldr	r2, [r7, #4]
 81108e8:	f000 fb4c 	bl	8110f84 <virtio_create_virtqueues>
 81108ec:	4603      	mov	r3, r0
					callbacks);
}
 81108ee:	4618      	mov	r0, r3
 81108f0:	3710      	adds	r7, #16
 81108f2:	46bd      	mov	sp, r7
 81108f4:	bd80      	pop	{r7, pc}

081108f6 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 81108f6:	b580      	push	{r7, lr}
 81108f8:	b082      	sub	sp, #8
 81108fa:	af00      	add	r7, sp, #0
 81108fc:	6078      	str	r0, [r7, #4]
 81108fe:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8110900:	f04f 33ff 	mov.w	r3, #4294967295
 8110904:	683a      	ldr	r2, [r7, #0]
 8110906:	2100      	movs	r1, #0
 8110908:	6878      	ldr	r0, [r7, #4]
 811090a:	f7ff fdad 	bl	8110468 <rpmsg_get_endpoint>
 811090e:	4603      	mov	r3, r0
}
 8110910:	4618      	mov	r0, r3
 8110912:	3708      	adds	r7, #8
 8110914:	46bd      	mov	sp, r7
 8110916:	bd80      	pop	{r7, pc}

08110918 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8110918:	b480      	push	{r7}
 811091a:	b085      	sub	sp, #20
 811091c:	af00      	add	r7, sp, #0
 811091e:	60f8      	str	r0, [r7, #12]
 8110920:	60b9      	str	r1, [r7, #8]
 8110922:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8110924:	68fb      	ldr	r3, [r7, #12]
 8110926:	2b00      	cmp	r3, #0
 8110928:	d01d      	beq.n	8110966 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 811092a:	68fb      	ldr	r3, [r7, #12]
 811092c:	68ba      	ldr	r2, [r7, #8]
 811092e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8110930:	687b      	ldr	r3, [r7, #4]
 8110932:	f003 0303 	and.w	r3, r3, #3
 8110936:	2b00      	cmp	r3, #0
 8110938:	d004      	beq.n	8110944 <rpmsg_virtio_init_shm_pool+0x2c>
 811093a:	687b      	ldr	r3, [r7, #4]
 811093c:	f023 0303 	bic.w	r3, r3, #3
 8110940:	3304      	adds	r3, #4
 8110942:	e000      	b.n	8110946 <rpmsg_virtio_init_shm_pool+0x2e>
 8110944:	687b      	ldr	r3, [r7, #4]
 8110946:	68fa      	ldr	r2, [r7, #12]
 8110948:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 811094a:	687b      	ldr	r3, [r7, #4]
 811094c:	f003 0303 	and.w	r3, r3, #3
 8110950:	2b00      	cmp	r3, #0
 8110952:	d004      	beq.n	811095e <rpmsg_virtio_init_shm_pool+0x46>
 8110954:	687b      	ldr	r3, [r7, #4]
 8110956:	f023 0303 	bic.w	r3, r3, #3
 811095a:	3304      	adds	r3, #4
 811095c:	e000      	b.n	8110960 <rpmsg_virtio_init_shm_pool+0x48>
 811095e:	687b      	ldr	r3, [r7, #4]
 8110960:	68fa      	ldr	r2, [r7, #12]
 8110962:	6053      	str	r3, [r2, #4]
 8110964:	e000      	b.n	8110968 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8110966:	bf00      	nop
}
 8110968:	3714      	adds	r7, #20
 811096a:	46bd      	mov	sp, r7
 811096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110970:	4770      	bx	lr

08110972 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8110972:	b580      	push	{r7, lr}
 8110974:	b086      	sub	sp, #24
 8110976:	af00      	add	r7, sp, #0
 8110978:	60f8      	str	r0, [r7, #12]
 811097a:	60b9      	str	r1, [r7, #8]
 811097c:	607a      	str	r2, [r7, #4]
 811097e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110980:	68f8      	ldr	r0, [r7, #12]
 8110982:	f7ff ff61 	bl	8110848 <rpmsg_virtio_get_role>
 8110986:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110988:	697b      	ldr	r3, [r7, #20]
 811098a:	2b01      	cmp	r3, #1
 811098c:	d106      	bne.n	811099c <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 811098e:	68fb      	ldr	r3, [r7, #12]
 8110990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110992:	8879      	ldrh	r1, [r7, #2]
 8110994:	687a      	ldr	r2, [r7, #4]
 8110996:	4618      	mov	r0, r3
 8110998:	f000 fc9e 	bl	81112d8 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 811099c:	bf00      	nop
 811099e:	3718      	adds	r7, #24
 81109a0:	46bd      	mov	sp, r7
 81109a2:	bd80      	pop	{r7, pc}

081109a4 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 81109a4:	b580      	push	{r7, lr}
 81109a6:	b086      	sub	sp, #24
 81109a8:	af00      	add	r7, sp, #0
 81109aa:	60f8      	str	r0, [r7, #12]
 81109ac:	60b9      	str	r1, [r7, #8]
 81109ae:	607a      	str	r2, [r7, #4]
 81109b0:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81109b2:	68f8      	ldr	r0, [r7, #12]
 81109b4:	f7ff ff48 	bl	8110848 <rpmsg_virtio_get_role>
 81109b8:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81109ba:	697b      	ldr	r3, [r7, #20]
 81109bc:	2b01      	cmp	r3, #1
 81109be:	d108      	bne.n	81109d2 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 81109c0:	68fb      	ldr	r3, [r7, #12]
 81109c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81109c4:	8879      	ldrh	r1, [r7, #2]
 81109c6:	687a      	ldr	r2, [r7, #4]
 81109c8:	4618      	mov	r0, r3
 81109ca:	f000 fc85 	bl	81112d8 <virtqueue_add_consumed_buffer>
 81109ce:	4603      	mov	r3, r0
 81109d0:	e000      	b.n	81109d4 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 81109d2:	2300      	movs	r3, #0
}
 81109d4:	4618      	mov	r0, r3
 81109d6:	3718      	adds	r7, #24
 81109d8:	46bd      	mov	sp, r7
 81109da:	bd80      	pop	{r7, pc}

081109dc <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81109dc:	b580      	push	{r7, lr}
 81109de:	b086      	sub	sp, #24
 81109e0:	af00      	add	r7, sp, #0
 81109e2:	60f8      	str	r0, [r7, #12]
 81109e4:	60b9      	str	r1, [r7, #8]
 81109e6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81109e8:	68f8      	ldr	r0, [r7, #12]
 81109ea:	f7ff ff2d 	bl	8110848 <rpmsg_virtio_get_role>
 81109ee:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81109f0:	2300      	movs	r3, #0
 81109f2:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81109f4:	693b      	ldr	r3, [r7, #16]
 81109f6:	2b01      	cmp	r3, #1
 81109f8:	d107      	bne.n	8110a0a <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81109fa:	68fb      	ldr	r3, [r7, #12]
 81109fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81109fe:	68ba      	ldr	r2, [r7, #8]
 8110a00:	6879      	ldr	r1, [r7, #4]
 8110a02:	4618      	mov	r0, r3
 8110a04:	f000 fc22 	bl	811124c <virtqueue_get_available_buffer>
 8110a08:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8110a0a:	697b      	ldr	r3, [r7, #20]
}
 8110a0c:	4618      	mov	r0, r3
 8110a0e:	3718      	adds	r7, #24
 8110a10:	46bd      	mov	sp, r7
 8110a12:	bd80      	pop	{r7, pc}

08110a14 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8110a14:	b580      	push	{r7, lr}
 8110a16:	b086      	sub	sp, #24
 8110a18:	af00      	add	r7, sp, #0
 8110a1a:	60f8      	str	r0, [r7, #12]
 8110a1c:	60b9      	str	r1, [r7, #8]
 8110a1e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110a20:	68f8      	ldr	r0, [r7, #12]
 8110a22:	f7ff ff11 	bl	8110848 <rpmsg_virtio_get_role>
 8110a26:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8110a28:	2300      	movs	r3, #0
 8110a2a:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110a2c:	693b      	ldr	r3, [r7, #16]
 8110a2e:	2b01      	cmp	r3, #1
 8110a30:	d107      	bne.n	8110a42 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8110a32:	68fb      	ldr	r3, [r7, #12]
 8110a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110a36:	68ba      	ldr	r2, [r7, #8]
 8110a38:	6879      	ldr	r1, [r7, #4]
 8110a3a:	4618      	mov	r0, r3
 8110a3c:	f000 fc06 	bl	811124c <virtqueue_get_available_buffer>
 8110a40:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8110a42:	697b      	ldr	r3, [r7, #20]
 8110a44:	2b00      	cmp	r3, #0
 8110a46:	d005      	beq.n	8110a54 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8110a48:	68bb      	ldr	r3, [r7, #8]
 8110a4a:	681b      	ldr	r3, [r3, #0]
 8110a4c:	4619      	mov	r1, r3
 8110a4e:	6978      	ldr	r0, [r7, #20]
 8110a50:	f7ff fe2b 	bl	81106aa <metal_cache_invalidate>
	}

	return data;
 8110a54:	697b      	ldr	r3, [r7, #20]
}
 8110a56:	4618      	mov	r0, r3
 8110a58:	3718      	adds	r7, #24
 8110a5a:	46bd      	mov	sp, r7
 8110a5c:	bd80      	pop	{r7, pc}

08110a5e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8110a5e:	b580      	push	{r7, lr}
 8110a60:	b084      	sub	sp, #16
 8110a62:	af00      	add	r7, sp, #0
 8110a64:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8110a66:	6878      	ldr	r0, [r7, #4]
 8110a68:	f7ff ff0e 	bl	8110888 <rpmsg_virtio_get_status>
 8110a6c:	4603      	mov	r3, r0
 8110a6e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8110a70:	7bfb      	ldrb	r3, [r7, #15]
 8110a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8110a76:	2b00      	cmp	r3, #0
 8110a78:	d004      	beq.n	8110a84 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8110a7a:	2100      	movs	r1, #0
 8110a7c:	6878      	ldr	r0, [r7, #4]
 8110a7e:	f7ff fef0 	bl	8110862 <rpmsg_virtio_set_status>
 8110a82:	e7f0      	b.n	8110a66 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8110a84:	7bfb      	ldrb	r3, [r7, #15]
 8110a86:	f003 0304 	and.w	r3, r3, #4
 8110a8a:	2b00      	cmp	r3, #0
 8110a8c:	d0eb      	beq.n	8110a66 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8110a8e:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8110a90:	4618      	mov	r0, r3
 8110a92:	3710      	adds	r7, #16
 8110a94:	46bd      	mov	sp, r7
 8110a96:	bd80      	pop	{r7, pc}

08110a98 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8110a98:	b580      	push	{r7, lr}
 8110a9a:	b084      	sub	sp, #16
 8110a9c:	af00      	add	r7, sp, #0
 8110a9e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110aa0:	6878      	ldr	r0, [r7, #4]
 8110aa2:	f7ff fed1 	bl	8110848 <rpmsg_virtio_get_role>
 8110aa6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8110aa8:	2300      	movs	r3, #0
 8110aaa:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110aac:	68bb      	ldr	r3, [r7, #8]
 8110aae:	2b01      	cmp	r3, #1
 8110ab0:	d107      	bne.n	8110ac2 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8110ab2:	687b      	ldr	r3, [r7, #4]
 8110ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110ab6:	4618      	mov	r0, r3
 8110ab8:	f000 fc88 	bl	81113cc <virtqueue_get_desc_size>
 8110abc:	4603      	mov	r3, r0
 8110abe:	3b10      	subs	r3, #16
		length =
 8110ac0:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8110ac2:	68fb      	ldr	r3, [r7, #12]
}
 8110ac4:	4618      	mov	r0, r3
 8110ac6:	3710      	adds	r7, #16
 8110ac8:	46bd      	mov	sp, r7
 8110aca:	bd80      	pop	{r7, pc}

08110acc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8110acc:	b580      	push	{r7, lr}
 8110ace:	b090      	sub	sp, #64	@ 0x40
 8110ad0:	af00      	add	r7, sp, #0
 8110ad2:	60f8      	str	r0, [r7, #12]
 8110ad4:	60b9      	str	r1, [r7, #8]
 8110ad6:	607a      	str	r2, [r7, #4]
 8110ad8:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8110ada:	2300      	movs	r3, #0
 8110adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8110ade:	2300      	movs	r3, #0
 8110ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8110ae2:	68fb      	ldr	r3, [r7, #12]
 8110ae4:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8110ae6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110ae8:	f7ff fece 	bl	8110888 <rpmsg_virtio_get_status>
 8110aec:	4603      	mov	r3, r0
 8110aee:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8110af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110af2:	f003 0304 	and.w	r3, r3, #4
 8110af6:	2b00      	cmp	r3, #0
 8110af8:	d101      	bne.n	8110afe <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8110afa:	4b46      	ldr	r3, [pc, #280]	@ (8110c14 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8110afc:	e086      	b.n	8110c0c <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8110afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110b00:	2b00      	cmp	r3, #0
 8110b02:	d003      	beq.n	8110b0c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8110b04:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8110b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110b0a:	e001      	b.n	8110b10 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8110b0c:	2300      	movs	r3, #0
 8110b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8110b10:	68fb      	ldr	r3, [r7, #12]
 8110b12:	3358      	adds	r3, #88	@ 0x58
 8110b14:	4618      	mov	r0, r3
 8110b16:	f7ff fe64 	bl	81107e2 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8110b1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110b1c:	f7ff ffbc 	bl	8110a98 <_rpmsg_virtio_get_buffer_size>
 8110b20:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8110b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8110b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b26:	429a      	cmp	r2, r3
 8110b28:	dc08      	bgt.n	8110b3c <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8110b2a:	f107 0216 	add.w	r2, r7, #22
 8110b2e:	f107 0310 	add.w	r3, r7, #16
 8110b32:	4619      	mov	r1, r3
 8110b34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110b36:	f7ff ff51 	bl	81109dc <rpmsg_virtio_get_tx_buffer>
 8110b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8110b3c:	68fb      	ldr	r3, [r7, #12]
 8110b3e:	3358      	adds	r3, #88	@ 0x58
 8110b40:	4618      	mov	r0, r3
 8110b42:	f7ff fe59 	bl	81107f8 <metal_mutex_release>
		if (buffer || !tick_count)
 8110b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110b48:	2b00      	cmp	r3, #0
 8110b4a:	d10e      	bne.n	8110b6a <rpmsg_virtio_send_offchannel_raw+0x9e>
 8110b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110b4e:	2b00      	cmp	r3, #0
 8110b50:	d00b      	beq.n	8110b6a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8110b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b54:	2b00      	cmp	r3, #0
 8110b56:	d001      	beq.n	8110b5c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8110b58:	4b2f      	ldr	r3, [pc, #188]	@ (8110c18 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8110b5a:	e057      	b.n	8110c0c <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8110b5c:	200a      	movs	r0, #10
 8110b5e:	f7ff fdbc 	bl	81106da <metal_sleep_usec>
		tick_count--;
 8110b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110b64:	3b01      	subs	r3, #1
 8110b66:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8110b68:	e7d2      	b.n	8110b10 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8110b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110b6c:	2b00      	cmp	r3, #0
 8110b6e:	d101      	bne.n	8110b74 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8110b70:	4b2a      	ldr	r3, [pc, #168]	@ (8110c1c <rpmsg_virtio_send_offchannel_raw+0x150>)
 8110b72:	e04b      	b.n	8110c0c <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8110b74:	687b      	ldr	r3, [r7, #4]
 8110b76:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8110b78:	68bb      	ldr	r3, [r7, #8]
 8110b7a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8110b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110b7e:	b29b      	uxth	r3, r3
 8110b80:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8110b82:	2300      	movs	r3, #0
 8110b84:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8110b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8110b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8110b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110b90:	f7ff fdc0 	bl	8110714 <metal_io_virt_to_offset>
 8110b94:	4601      	mov	r1, r0
 8110b96:	f107 0218 	add.w	r2, r7, #24
 8110b9a:	2310      	movs	r3, #16
 8110b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110b9e:	f7fe ff56 	bl	810fa4e <metal_io_block_write>
 8110ba2:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8110ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ba6:	2b10      	cmp	r3, #16
 8110ba8:	d001      	beq.n	8110bae <rpmsg_virtio_send_offchannel_raw+0xe2>
 8110baa:	bf00      	nop
 8110bac:	e7fd      	b.n	8110baa <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8110bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110bb0:	3310      	adds	r3, #16
 8110bb2:	4619      	mov	r1, r3
 8110bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110bb6:	f7ff fdad 	bl	8110714 <metal_io_virt_to_offset>
 8110bba:	4601      	mov	r1, r0
 8110bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110bbe:	683a      	ldr	r2, [r7, #0]
 8110bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110bc2:	f7fe ff44 	bl	810fa4e <metal_io_block_write>
 8110bc6:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8110bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110bcc:	429a      	cmp	r2, r3
 8110bce:	d001      	beq.n	8110bd4 <rpmsg_virtio_send_offchannel_raw+0x108>
 8110bd0:	bf00      	nop
 8110bd2:	e7fd      	b.n	8110bd0 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8110bd4:	68fb      	ldr	r3, [r7, #12]
 8110bd6:	3358      	adds	r3, #88	@ 0x58
 8110bd8:	4618      	mov	r0, r3
 8110bda:	f7ff fe02 	bl	81107e2 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8110bde:	693a      	ldr	r2, [r7, #16]
 8110be0:	8afb      	ldrh	r3, [r7, #22]
 8110be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8110be4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110be6:	f7ff fedd 	bl	81109a4 <rpmsg_virtio_enqueue_buffer>
 8110bea:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8110bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110bee:	2b00      	cmp	r3, #0
 8110bf0:	d001      	beq.n	8110bf6 <rpmsg_virtio_send_offchannel_raw+0x12a>
 8110bf2:	bf00      	nop
 8110bf4:	e7fd      	b.n	8110bf2 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8110bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110bfa:	4618      	mov	r0, r3
 8110bfc:	f000 fbd0 	bl	81113a0 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8110c00:	68fb      	ldr	r3, [r7, #12]
 8110c02:	3358      	adds	r3, #88	@ 0x58
 8110c04:	4618      	mov	r0, r3
 8110c06:	f7ff fdf7 	bl	81107f8 <metal_mutex_release>

	return size;
 8110c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8110c0c:	4618      	mov	r0, r3
 8110c0e:	3740      	adds	r7, #64	@ 0x40
 8110c10:	46bd      	mov	sp, r7
 8110c12:	bd80      	pop	{r7, pc}
 8110c14:	fffff82c 	.word	0xfffff82c
 8110c18:	fffff82b 	.word	0xfffff82b
 8110c1c:	fffff82e 	.word	0xfffff82e

08110c20 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8110c20:	b480      	push	{r7}
 8110c22:	b083      	sub	sp, #12
 8110c24:	af00      	add	r7, sp, #0
 8110c26:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8110c28:	bf00      	nop
 8110c2a:	370c      	adds	r7, #12
 8110c2c:	46bd      	mov	sp, r7
 8110c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c32:	4770      	bx	lr

08110c34 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8110c34:	b590      	push	{r4, r7, lr}
 8110c36:	b08d      	sub	sp, #52	@ 0x34
 8110c38:	af02      	add	r7, sp, #8
 8110c3a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8110c3c:	687b      	ldr	r3, [r7, #4]
 8110c3e:	681b      	ldr	r3, [r3, #0]
 8110c40:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8110c42:	6a3b      	ldr	r3, [r7, #32]
 8110c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110c46:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8110c48:	69fb      	ldr	r3, [r7, #28]
 8110c4a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8110c4c:	69bb      	ldr	r3, [r7, #24]
 8110c4e:	3358      	adds	r3, #88	@ 0x58
 8110c50:	4618      	mov	r0, r3
 8110c52:	f7ff fdc6 	bl	81107e2 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8110c56:	f107 020a 	add.w	r2, r7, #10
 8110c5a:	f107 030c 	add.w	r3, r7, #12
 8110c5e:	4619      	mov	r1, r3
 8110c60:	69f8      	ldr	r0, [r7, #28]
 8110c62:	f7ff fed7 	bl	8110a14 <rpmsg_virtio_get_rx_buffer>
 8110c66:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8110c68:	69bb      	ldr	r3, [r7, #24]
 8110c6a:	3358      	adds	r3, #88	@ 0x58
 8110c6c:	4618      	mov	r0, r3
 8110c6e:	f7ff fdc3 	bl	81107f8 <metal_mutex_release>

	while (rp_hdr) {
 8110c72:	e04d      	b.n	8110d10 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8110c74:	69bb      	ldr	r3, [r7, #24]
 8110c76:	3358      	adds	r3, #88	@ 0x58
 8110c78:	4618      	mov	r0, r3
 8110c7a:	f7ff fdb2 	bl	81107e2 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8110c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110c80:	685b      	ldr	r3, [r3, #4]
 8110c82:	4619      	mov	r1, r3
 8110c84:	69b8      	ldr	r0, [r7, #24]
 8110c86:	f7ff fe36 	bl	81108f6 <rpmsg_get_ept_from_addr>
 8110c8a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8110c8c:	69bb      	ldr	r3, [r7, #24]
 8110c8e:	3358      	adds	r3, #88	@ 0x58
 8110c90:	4618      	mov	r0, r3
 8110c92:	f7ff fdb1 	bl	81107f8 <metal_mutex_release>

		if (!ept)
 8110c96:	697b      	ldr	r3, [r7, #20]
 8110c98:	2b00      	cmp	r3, #0
 8110c9a:	d03d      	beq.n	8110d18 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8110c9c:	697b      	ldr	r3, [r7, #20]
 8110c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110ca4:	d103      	bne.n	8110cae <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8110ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110ca8:	681a      	ldr	r2, [r3, #0]
 8110caa:	697b      	ldr	r3, [r7, #20]
 8110cac:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8110cae:	697b      	ldr	r3, [r7, #20]
 8110cb0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8110cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110cb4:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8110cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110cba:	899b      	ldrh	r3, [r3, #12]
 8110cbc:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8110cbe:	4618      	mov	r0, r3
 8110cc0:	697b      	ldr	r3, [r7, #20]
 8110cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110cc4:	697b      	ldr	r3, [r7, #20]
 8110cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110cc8:	9300      	str	r3, [sp, #0]
 8110cca:	4613      	mov	r3, r2
 8110ccc:	4602      	mov	r2, r0
 8110cce:	6978      	ldr	r0, [r7, #20]
 8110cd0:	47a0      	blx	r4
 8110cd2:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8110cd4:	693b      	ldr	r3, [r7, #16]
 8110cd6:	2b00      	cmp	r3, #0
 8110cd8:	d001      	beq.n	8110cde <rpmsg_virtio_rx_callback+0xaa>
 8110cda:	bf00      	nop
 8110cdc:	e7fd      	b.n	8110cda <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8110cde:	69bb      	ldr	r3, [r7, #24]
 8110ce0:	3358      	adds	r3, #88	@ 0x58
 8110ce2:	4618      	mov	r0, r3
 8110ce4:	f7ff fd7d 	bl	81107e2 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8110ce8:	68fa      	ldr	r2, [r7, #12]
 8110cea:	897b      	ldrh	r3, [r7, #10]
 8110cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8110cee:	69f8      	ldr	r0, [r7, #28]
 8110cf0:	f7ff fe3f 	bl	8110972 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8110cf4:	f107 020a 	add.w	r2, r7, #10
 8110cf8:	f107 030c 	add.w	r3, r7, #12
 8110cfc:	4619      	mov	r1, r3
 8110cfe:	69f8      	ldr	r0, [r7, #28]
 8110d00:	f7ff fe88 	bl	8110a14 <rpmsg_virtio_get_rx_buffer>
 8110d04:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 8110d06:	69bb      	ldr	r3, [r7, #24]
 8110d08:	3358      	adds	r3, #88	@ 0x58
 8110d0a:	4618      	mov	r0, r3
 8110d0c:	f7ff fd74 	bl	81107f8 <metal_mutex_release>
	while (rp_hdr) {
 8110d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110d12:	2b00      	cmp	r3, #0
 8110d14:	d1ae      	bne.n	8110c74 <rpmsg_virtio_rx_callback+0x40>
 8110d16:	e000      	b.n	8110d1a <rpmsg_virtio_rx_callback+0xe6>
			return;
 8110d18:	bf00      	nop
	}
}
 8110d1a:	372c      	adds	r7, #44	@ 0x2c
 8110d1c:	46bd      	mov	sp, r7
 8110d1e:	bd90      	pop	{r4, r7, pc}

08110d20 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8110d20:	b580      	push	{r7, lr}
 8110d22:	b092      	sub	sp, #72	@ 0x48
 8110d24:	af00      	add	r7, sp, #0
 8110d26:	60f8      	str	r0, [r7, #12]
 8110d28:	60b9      	str	r1, [r7, #8]
 8110d2a:	607a      	str	r2, [r7, #4]
 8110d2c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8110d2e:	68fb      	ldr	r3, [r7, #12]
 8110d30:	6a1b      	ldr	r3, [r3, #32]
 8110d32:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8110d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d36:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8110d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8110d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8110d3e:	68bb      	ldr	r3, [r7, #8]
 8110d40:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 8110d42:	687b      	ldr	r3, [r7, #4]
 8110d44:	2b28      	cmp	r3, #40	@ 0x28
 8110d46:	d001      	beq.n	8110d4c <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8110d48:	2300      	movs	r3, #0
 8110d4a:	e057      	b.n	8110dfc <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8110d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 8110d4e:	4619      	mov	r1, r3
 8110d50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8110d52:	f7ff fcdf 	bl	8110714 <metal_io_virt_to_offset>
 8110d56:	4601      	mov	r1, r0
 8110d58:	f107 0210 	add.w	r2, r7, #16
 8110d5c:	2320      	movs	r3, #32
 8110d5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8110d60:	f7fe fdfe 	bl	810f960 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8110d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110d66:	6a1b      	ldr	r3, [r3, #32]
 8110d68:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8110d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d6c:	3358      	adds	r3, #88	@ 0x58
 8110d6e:	4618      	mov	r0, r3
 8110d70:	f7ff fd37 	bl	81107e2 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8110d74:	f107 0110 	add.w	r1, r7, #16
 8110d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8110d7e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8110d80:	f7ff fb72 	bl	8110468 <rpmsg_get_endpoint>
 8110d84:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8110d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110d8a:	f003 0301 	and.w	r3, r3, #1
 8110d8e:	2b00      	cmp	r3, #0
 8110d90:	d017      	beq.n	8110dc2 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8110d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110d94:	2b00      	cmp	r3, #0
 8110d96:	d003      	beq.n	8110da0 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8110d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8110d9e:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8110da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110da2:	3358      	adds	r3, #88	@ 0x58
 8110da4:	4618      	mov	r0, r3
 8110da6:	f7ff fd27 	bl	81107f8 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8110daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110dac:	2b00      	cmp	r3, #0
 8110dae:	d024      	beq.n	8110dfa <rpmsg_virtio_ns_callback+0xda>
 8110db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8110db4:	2b00      	cmp	r3, #0
 8110db6:	d020      	beq.n	8110dfa <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8110db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8110dbc:	68f8      	ldr	r0, [r7, #12]
 8110dbe:	4798      	blx	r3
 8110dc0:	e01b      	b.n	8110dfa <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8110dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110dc4:	2b00      	cmp	r3, #0
 8110dc6:	d110      	bne.n	8110dea <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8110dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110dca:	3358      	adds	r3, #88	@ 0x58
 8110dcc:	4618      	mov	r0, r3
 8110dce:	f7ff fd13 	bl	81107f8 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8110dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8110dd6:	2b00      	cmp	r3, #0
 8110dd8:	d00f      	beq.n	8110dfa <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8110dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8110dde:	f107 0110 	add.w	r1, r7, #16
 8110de2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110de4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8110de6:	4798      	blx	r3
 8110de8:	e007      	b.n	8110dfa <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8110dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110dee:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8110df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110df2:	3358      	adds	r3, #88	@ 0x58
 8110df4:	4618      	mov	r0, r3
 8110df6:	f7ff fcff 	bl	81107f8 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8110dfa:	2300      	movs	r3, #0
}
 8110dfc:	4618      	mov	r0, r3
 8110dfe:	3748      	adds	r7, #72	@ 0x48
 8110e00:	46bd      	mov	sp, r7
 8110e02:	bd80      	pop	{r7, pc}

08110e04 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8110e04:	b580      	push	{r7, lr}
 8110e06:	b090      	sub	sp, #64	@ 0x40
 8110e08:	af02      	add	r7, sp, #8
 8110e0a:	60f8      	str	r0, [r7, #12]
 8110e0c:	60b9      	str	r1, [r7, #8]
 8110e0e:	607a      	str	r2, [r7, #4]
 8110e10:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8110e12:	68fb      	ldr	r3, [r7, #12]
 8110e14:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 8110e16:	2264      	movs	r2, #100	@ 0x64
 8110e18:	2100      	movs	r1, #0
 8110e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8110e1c:	f001 fe8b 	bl	8112b36 <memset>
	metal_mutex_init(&rdev->lock);
 8110e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110e22:	3358      	adds	r3, #88	@ 0x58
 8110e24:	4618      	mov	r0, r3
 8110e26:	f7ff fcd1 	bl	81107cc <metal_mutex_init>
	rvdev->vdev = vdev;
 8110e2a:	68fb      	ldr	r3, [r7, #12]
 8110e2c:	68ba      	ldr	r2, [r7, #8]
 8110e2e:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8110e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110e32:	687a      	ldr	r2, [r7, #4]
 8110e34:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 8110e36:	68bb      	ldr	r3, [r7, #8]
 8110e38:	68fa      	ldr	r2, [r7, #12]
 8110e3a:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8110e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110e3e:	4a38      	ldr	r2, [pc, #224]	@ (8110f20 <rpmsg_init_vdev+0x11c>)
 8110e40:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8110e42:	68f8      	ldr	r0, [r7, #12]
 8110e44:	f7ff fd00 	bl	8110848 <rpmsg_virtio_get_role>
 8110e48:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8110e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e4c:	2b01      	cmp	r3, #1
 8110e4e:	d112      	bne.n	8110e76 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8110e50:	4b34      	ldr	r3, [pc, #208]	@ (8110f24 <rpmsg_init_vdev+0x120>)
 8110e52:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8110e54:	4b34      	ldr	r3, [pc, #208]	@ (8110f28 <rpmsg_init_vdev+0x124>)
 8110e56:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8110e58:	4b34      	ldr	r3, [pc, #208]	@ (8110f2c <rpmsg_init_vdev+0x128>)
 8110e5a:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8110e5c:	4b34      	ldr	r3, [pc, #208]	@ (8110f30 <rpmsg_init_vdev+0x12c>)
 8110e5e:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8110e60:	68bb      	ldr	r3, [r7, #8]
 8110e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e64:	3318      	adds	r3, #24
 8110e66:	681a      	ldr	r2, [r3, #0]
 8110e68:	68fb      	ldr	r3, [r7, #12]
 8110e6a:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8110e6c:	68bb      	ldr	r3, [r7, #8]
 8110e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e70:	681a      	ldr	r2, [r3, #0]
 8110e72:	68fb      	ldr	r3, [r7, #12]
 8110e74:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8110e76:	68fb      	ldr	r3, [r7, #12]
 8110e78:	683a      	ldr	r2, [r7, #0]
 8110e7a:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e7e:	2b01      	cmp	r3, #1
 8110e80:	d102      	bne.n	8110e88 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8110e82:	68f8      	ldr	r0, [r7, #12]
 8110e84:	f7ff fdeb 	bl	8110a5e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8110e88:	f107 0218 	add.w	r2, r7, #24
 8110e8c:	f107 0310 	add.w	r3, r7, #16
 8110e90:	9300      	str	r3, [sp, #0]
 8110e92:	4613      	mov	r3, r2
 8110e94:	2202      	movs	r2, #2
 8110e96:	2100      	movs	r1, #0
 8110e98:	68f8      	ldr	r0, [r7, #12]
 8110e9a:	f7ff fd17 	bl	81108cc <rpmsg_virtio_create_virtqueues>
 8110e9e:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8110ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110ea2:	2b00      	cmp	r3, #0
 8110ea4:	d001      	beq.n	8110eaa <rpmsg_init_vdev+0xa6>
		return status;
 8110ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110ea8:	e035      	b.n	8110f16 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8110eaa:	2300      	movs	r3, #0
 8110eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8110eae:	e00f      	b.n	8110ed0 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8110eb0:	68bb      	ldr	r3, [r7, #8]
 8110eb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8110eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110eb6:	4613      	mov	r3, r2
 8110eb8:	005b      	lsls	r3, r3, #1
 8110eba:	4413      	add	r3, r2
 8110ebc:	00db      	lsls	r3, r3, #3
 8110ebe:	440b      	add	r3, r1
 8110ec0:	681b      	ldr	r3, [r3, #0]
 8110ec2:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8110ec4:	6a3b      	ldr	r3, [r7, #32]
 8110ec6:	683a      	ldr	r2, [r7, #0]
 8110ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8110eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110ecc:	3301      	adds	r3, #1
 8110ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8110ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110ed2:	2b01      	cmp	r3, #1
 8110ed4:	d9ec      	bls.n	8110eb0 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8110ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ed8:	4618      	mov	r0, r3
 8110eda:	f7ff fc0a 	bl	81106f2 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8110ede:	68f8      	ldr	r0, [r7, #12]
 8110ee0:	f7ff fce3 	bl	81108aa <rpmsg_virtio_get_features>
 8110ee4:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8110ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110ee8:	f003 0301 	and.w	r3, r3, #1
 8110eec:	2b00      	cmp	r3, #0
 8110eee:	d011      	beq.n	8110f14 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8110ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ef2:	f103 0008 	add.w	r0, r3, #8
 8110ef6:	2300      	movs	r3, #0
 8110ef8:	9301      	str	r3, [sp, #4]
 8110efa:	4b0e      	ldr	r3, [pc, #56]	@ (8110f34 <rpmsg_init_vdev+0x130>)
 8110efc:	9300      	str	r3, [sp, #0]
 8110efe:	2335      	movs	r3, #53	@ 0x35
 8110f00:	2235      	movs	r2, #53	@ 0x35
 8110f02:	490d      	ldr	r1, [pc, #52]	@ (8110f38 <rpmsg_init_vdev+0x134>)
 8110f04:	f7ff fc83 	bl	811080e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8110f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110f0a:	3308      	adds	r3, #8
 8110f0c:	4619      	mov	r1, r3
 8110f0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8110f10:	f7ff fb2c 	bl	811056c <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8110f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8110f16:	4618      	mov	r0, r3
 8110f18:	3738      	adds	r7, #56	@ 0x38
 8110f1a:	46bd      	mov	sp, r7
 8110f1c:	bd80      	pop	{r7, pc}
 8110f1e:	bf00      	nop
 8110f20:	08110acd 	.word	0x08110acd
 8110f24:	08117358 	.word	0x08117358
 8110f28:	08117360 	.word	0x08117360
 8110f2c:	08110c21 	.word	0x08110c21
 8110f30:	08110c35 	.word	0x08110c35
 8110f34:	08110d21 	.word	0x08110d21
 8110f38:	08117368 	.word	0x08117368

08110f3c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8110f3c:	b480      	push	{r7}
 8110f3e:	b083      	sub	sp, #12
 8110f40:	af00      	add	r7, sp, #0
 8110f42:	6078      	str	r0, [r7, #4]
 8110f44:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8110f46:	bf00      	nop
 8110f48:	370c      	adds	r7, #12
 8110f4a:	46bd      	mov	sp, r7
 8110f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f50:	4770      	bx	lr

08110f52 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8110f52:	b480      	push	{r7}
 8110f54:	b083      	sub	sp, #12
 8110f56:	af00      	add	r7, sp, #0
 8110f58:	6078      	str	r0, [r7, #4]
 8110f5a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8110f5c:	bf00      	nop
 8110f5e:	370c      	adds	r7, #12
 8110f60:	46bd      	mov	sp, r7
 8110f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f66:	4770      	bx	lr

08110f68 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8110f68:	b480      	push	{r7}
 8110f6a:	b085      	sub	sp, #20
 8110f6c:	af00      	add	r7, sp, #0
 8110f6e:	60f8      	str	r0, [r7, #12]
 8110f70:	60b9      	str	r1, [r7, #8]
 8110f72:	607a      	str	r2, [r7, #4]
 8110f74:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8110f76:	68fb      	ldr	r3, [r7, #12]
}
 8110f78:	4618      	mov	r0, r3
 8110f7a:	3714      	adds	r7, #20
 8110f7c:	46bd      	mov	sp, r7
 8110f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f82:	4770      	bx	lr

08110f84 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8110f84:	b590      	push	{r4, r7, lr}
 8110f86:	b08f      	sub	sp, #60	@ 0x3c
 8110f88:	af04      	add	r7, sp, #16
 8110f8a:	60f8      	str	r0, [r7, #12]
 8110f8c:	60b9      	str	r1, [r7, #8]
 8110f8e:	607a      	str	r2, [r7, #4]
 8110f90:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8110f92:	68fb      	ldr	r3, [r7, #12]
 8110f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110f96:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8110f98:	687a      	ldr	r2, [r7, #4]
 8110f9a:	6a3b      	ldr	r3, [r7, #32]
 8110f9c:	429a      	cmp	r2, r3
 8110f9e:	d902      	bls.n	8110fa6 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8110fa0:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8110fa4:	e036      	b.n	8111014 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8110fa6:	2300      	movs	r3, #0
 8110fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8110faa:	e02e      	b.n	811100a <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8110fac:	68fb      	ldr	r3, [r7, #12]
 8110fae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8110fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110fb2:	4613      	mov	r3, r2
 8110fb4:	005b      	lsls	r3, r3, #1
 8110fb6:	4413      	add	r3, r2
 8110fb8:	00db      	lsls	r3, r3, #3
 8110fba:	440b      	add	r3, r1
 8110fbc:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8110fbe:	69fb      	ldr	r3, [r7, #28]
 8110fc0:	3304      	adds	r3, #4
 8110fc2:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8110fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110fc6:	b298      	uxth	r0, r3
 8110fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110fca:	009b      	lsls	r3, r3, #2
 8110fcc:	683a      	ldr	r2, [r7, #0]
 8110fce:	4413      	add	r3, r2
 8110fd0:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8110fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110fd4:	009b      	lsls	r3, r3, #2
 8110fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8110fd8:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8110fda:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8110fdc:	68fa      	ldr	r2, [r7, #12]
 8110fde:	6a12      	ldr	r2, [r2, #32]
 8110fe0:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8110fe2:	69f9      	ldr	r1, [r7, #28]
 8110fe4:	6809      	ldr	r1, [r1, #0]
 8110fe6:	9102      	str	r1, [sp, #8]
 8110fe8:	9201      	str	r2, [sp, #4]
 8110fea:	9300      	str	r3, [sp, #0]
 8110fec:	69bb      	ldr	r3, [r7, #24]
 8110fee:	4622      	mov	r2, r4
 8110ff0:	4601      	mov	r1, r0
 8110ff2:	68f8      	ldr	r0, [r7, #12]
 8110ff4:	f000 f8f6 	bl	81111e4 <virtqueue_create>
 8110ff8:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8110ffa:	697b      	ldr	r3, [r7, #20]
 8110ffc:	2b00      	cmp	r3, #0
 8110ffe:	d001      	beq.n	8111004 <virtio_create_virtqueues+0x80>
			return ret;
 8111000:	697b      	ldr	r3, [r7, #20]
 8111002:	e007      	b.n	8111014 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8111004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111006:	3301      	adds	r3, #1
 8111008:	627b      	str	r3, [r7, #36]	@ 0x24
 811100a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811100c:	687b      	ldr	r3, [r7, #4]
 811100e:	429a      	cmp	r2, r3
 8111010:	d3cc      	bcc.n	8110fac <virtio_create_virtqueues+0x28>
	}
	return 0;
 8111012:	2300      	movs	r3, #0
}
 8111014:	4618      	mov	r0, r3
 8111016:	372c      	adds	r7, #44	@ 0x2c
 8111018:	46bd      	mov	sp, r7
 811101a:	bd90      	pop	{r4, r7, pc}

0811101c <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 811101c:	b480      	push	{r7}
 811101e:	b085      	sub	sp, #20
 8111020:	af00      	add	r7, sp, #0
 8111022:	60f8      	str	r0, [r7, #12]
 8111024:	60b9      	str	r1, [r7, #8]
 8111026:	607a      	str	r2, [r7, #4]
 8111028:	603b      	str	r3, [r7, #0]
	vr->num = num;
 811102a:	68fb      	ldr	r3, [r7, #12]
 811102c:	68ba      	ldr	r2, [r7, #8]
 811102e:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8111030:	68fb      	ldr	r3, [r7, #12]
 8111032:	687a      	ldr	r2, [r7, #4]
 8111034:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8111036:	68bb      	ldr	r3, [r7, #8]
 8111038:	011b      	lsls	r3, r3, #4
 811103a:	687a      	ldr	r2, [r7, #4]
 811103c:	441a      	add	r2, r3
 811103e:	68fb      	ldr	r3, [r7, #12]
 8111040:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8111042:	68fb      	ldr	r3, [r7, #12]
 8111044:	689a      	ldr	r2, [r3, #8]
 8111046:	68bb      	ldr	r3, [r7, #8]
 8111048:	005b      	lsls	r3, r3, #1
 811104a:	4413      	add	r3, r2
 811104c:	3304      	adds	r3, #4
 811104e:	461a      	mov	r2, r3
 8111050:	683b      	ldr	r3, [r7, #0]
 8111052:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8111054:	1c5a      	adds	r2, r3, #1
 8111056:	683b      	ldr	r3, [r7, #0]
 8111058:	425b      	negs	r3, r3
 811105a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 811105c:	461a      	mov	r2, r3
 811105e:	68fb      	ldr	r3, [r7, #12]
 8111060:	60da      	str	r2, [r3, #12]
}
 8111062:	bf00      	nop
 8111064:	3714      	adds	r7, #20
 8111066:	46bd      	mov	sp, r7
 8111068:	f85d 7b04 	ldr.w	r7, [sp], #4
 811106c:	4770      	bx	lr

0811106e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 811106e:	b480      	push	{r7}
 8111070:	b083      	sub	sp, #12
 8111072:	af00      	add	r7, sp, #0
 8111074:	4603      	mov	r3, r0
 8111076:	80fb      	strh	r3, [r7, #6]
 8111078:	460b      	mov	r3, r1
 811107a:	80bb      	strh	r3, [r7, #4]
 811107c:	4613      	mov	r3, r2
 811107e:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8111080:	88ba      	ldrh	r2, [r7, #4]
 8111082:	88fb      	ldrh	r3, [r7, #6]
 8111084:	1ad3      	subs	r3, r2, r3
 8111086:	b29b      	uxth	r3, r3
 8111088:	3b01      	subs	r3, #1
 811108a:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 811108c:	88b9      	ldrh	r1, [r7, #4]
 811108e:	887b      	ldrh	r3, [r7, #2]
 8111090:	1acb      	subs	r3, r1, r3
 8111092:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8111094:	429a      	cmp	r2, r3
 8111096:	bf34      	ite	cc
 8111098:	2301      	movcc	r3, #1
 811109a:	2300      	movcs	r3, #0
 811109c:	b2db      	uxtb	r3, r3
}
 811109e:	4618      	mov	r0, r3
 81110a0:	370c      	adds	r7, #12
 81110a2:	46bd      	mov	sp, r7
 81110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81110a8:	4770      	bx	lr

081110aa <metal_io_virt>:
{
 81110aa:	b480      	push	{r7}
 81110ac:	b083      	sub	sp, #12
 81110ae:	af00      	add	r7, sp, #0
 81110b0:	6078      	str	r0, [r7, #4]
 81110b2:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81110b4:	687b      	ldr	r3, [r7, #4]
 81110b6:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81110b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81110bc:	d009      	beq.n	81110d2 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81110be:	687b      	ldr	r3, [r7, #4]
 81110c0:	689b      	ldr	r3, [r3, #8]
 81110c2:	683a      	ldr	r2, [r7, #0]
 81110c4:	429a      	cmp	r2, r3
 81110c6:	d804      	bhi.n	81110d2 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81110c8:	687b      	ldr	r3, [r7, #4]
 81110ca:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81110cc:	683b      	ldr	r3, [r7, #0]
 81110ce:	4413      	add	r3, r2
 81110d0:	e000      	b.n	81110d4 <metal_io_virt+0x2a>
 81110d2:	2300      	movs	r3, #0
}
 81110d4:	4618      	mov	r0, r3
 81110d6:	370c      	adds	r7, #12
 81110d8:	46bd      	mov	sp, r7
 81110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81110de:	4770      	bx	lr

081110e0 <metal_io_phys>:
{
 81110e0:	b480      	push	{r7}
 81110e2:	b085      	sub	sp, #20
 81110e4:	af00      	add	r7, sp, #0
 81110e6:	6078      	str	r0, [r7, #4]
 81110e8:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 81110ea:	687b      	ldr	r3, [r7, #4]
 81110ec:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 81110ee:	2b1f      	cmp	r3, #31
 81110f0:	d805      	bhi.n	81110fe <metal_io_phys+0x1e>
 81110f2:	687b      	ldr	r3, [r7, #4]
 81110f4:	68db      	ldr	r3, [r3, #12]
 81110f6:	683a      	ldr	r2, [r7, #0]
 81110f8:	fa22 f303 	lsr.w	r3, r2, r3
 81110fc:	e000      	b.n	8111100 <metal_io_phys+0x20>
 81110fe:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8111100:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8111102:	687b      	ldr	r3, [r7, #4]
 8111104:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8111106:	2b00      	cmp	r3, #0
 8111108:	d010      	beq.n	811112c <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 811110a:	687b      	ldr	r3, [r7, #4]
 811110c:	689b      	ldr	r3, [r3, #8]
 811110e:	683a      	ldr	r2, [r7, #0]
 8111110:	429a      	cmp	r2, r3
 8111112:	d80b      	bhi.n	811112c <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8111114:	687b      	ldr	r3, [r7, #4]
 8111116:	685a      	ldr	r2, [r3, #4]
 8111118:	68fb      	ldr	r3, [r7, #12]
 811111a:	009b      	lsls	r3, r3, #2
 811111c:	4413      	add	r3, r2
 811111e:	681a      	ldr	r2, [r3, #0]
 8111120:	687b      	ldr	r3, [r7, #4]
 8111122:	6919      	ldr	r1, [r3, #16]
 8111124:	683b      	ldr	r3, [r7, #0]
 8111126:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8111128:	4413      	add	r3, r2
 811112a:	e001      	b.n	8111130 <metal_io_phys+0x50>
 811112c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8111130:	4618      	mov	r0, r3
 8111132:	3714      	adds	r7, #20
 8111134:	46bd      	mov	sp, r7
 8111136:	f85d 7b04 	ldr.w	r7, [sp], #4
 811113a:	4770      	bx	lr

0811113c <metal_io_phys_to_offset>:
{
 811113c:	b580      	push	{r7, lr}
 811113e:	b084      	sub	sp, #16
 8111140:	af00      	add	r7, sp, #0
 8111142:	6078      	str	r0, [r7, #4]
 8111144:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8111146:	687b      	ldr	r3, [r7, #4]
 8111148:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 811114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811114e:	d105      	bne.n	811115c <metal_io_phys_to_offset+0x20>
 8111150:	687b      	ldr	r3, [r7, #4]
 8111152:	685b      	ldr	r3, [r3, #4]
 8111154:	681b      	ldr	r3, [r3, #0]
 8111156:	683a      	ldr	r2, [r7, #0]
 8111158:	1ad3      	subs	r3, r2, r3
 811115a:	e003      	b.n	8111164 <metal_io_phys_to_offset+0x28>
 811115c:	687b      	ldr	r3, [r7, #4]
 811115e:	691a      	ldr	r2, [r3, #16]
 8111160:	683b      	ldr	r3, [r7, #0]
 8111162:	4013      	ands	r3, r2
	unsigned long offset =
 8111164:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8111166:	68f9      	ldr	r1, [r7, #12]
 8111168:	6878      	ldr	r0, [r7, #4]
 811116a:	f7ff ffb9 	bl	81110e0 <metal_io_phys>
 811116e:	4602      	mov	r2, r0
 8111170:	683b      	ldr	r3, [r7, #0]
 8111172:	4293      	cmp	r3, r2
 8111174:	d101      	bne.n	811117a <metal_io_phys_to_offset+0x3e>
			return offset;
 8111176:	68fb      	ldr	r3, [r7, #12]
 8111178:	e00c      	b.n	8111194 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 811117a:	687b      	ldr	r3, [r7, #4]
 811117c:	691a      	ldr	r2, [r3, #16]
 811117e:	68fb      	ldr	r3, [r7, #12]
 8111180:	4413      	add	r3, r2
 8111182:	3301      	adds	r3, #1
 8111184:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8111186:	687b      	ldr	r3, [r7, #4]
 8111188:	689b      	ldr	r3, [r3, #8]
 811118a:	68fa      	ldr	r2, [r7, #12]
 811118c:	429a      	cmp	r2, r3
 811118e:	d3ea      	bcc.n	8111166 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8111190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8111194:	4618      	mov	r0, r3
 8111196:	3710      	adds	r7, #16
 8111198:	46bd      	mov	sp, r7
 811119a:	bd80      	pop	{r7, pc}

0811119c <metal_io_phys_to_virt>:
{
 811119c:	b580      	push	{r7, lr}
 811119e:	b082      	sub	sp, #8
 81111a0:	af00      	add	r7, sp, #0
 81111a2:	6078      	str	r0, [r7, #4]
 81111a4:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 81111a6:	6839      	ldr	r1, [r7, #0]
 81111a8:	6878      	ldr	r0, [r7, #4]
 81111aa:	f7ff ffc7 	bl	811113c <metal_io_phys_to_offset>
 81111ae:	4603      	mov	r3, r0
 81111b0:	4619      	mov	r1, r3
 81111b2:	6878      	ldr	r0, [r7, #4]
 81111b4:	f7ff ff79 	bl	81110aa <metal_io_virt>
 81111b8:	4603      	mov	r3, r0
}
 81111ba:	4618      	mov	r0, r3
 81111bc:	3708      	adds	r7, #8
 81111be:	46bd      	mov	sp, r7
 81111c0:	bd80      	pop	{r7, pc}

081111c2 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 81111c2:	b580      	push	{r7, lr}
 81111c4:	b084      	sub	sp, #16
 81111c6:	af00      	add	r7, sp, #0
 81111c8:	6078      	str	r0, [r7, #4]
 81111ca:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 81111cc:	687b      	ldr	r3, [r7, #4]
 81111ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81111d0:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 81111d2:	6839      	ldr	r1, [r7, #0]
 81111d4:	68f8      	ldr	r0, [r7, #12]
 81111d6:	f7ff ffe1 	bl	811119c <metal_io_phys_to_virt>
 81111da:	4603      	mov	r3, r0
}
 81111dc:	4618      	mov	r0, r3
 81111de:	3710      	adds	r7, #16
 81111e0:	46bd      	mov	sp, r7
 81111e2:	bd80      	pop	{r7, pc}

081111e4 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 81111e4:	b580      	push	{r7, lr}
 81111e6:	b086      	sub	sp, #24
 81111e8:	af00      	add	r7, sp, #0
 81111ea:	60f8      	str	r0, [r7, #12]
 81111ec:	607a      	str	r2, [r7, #4]
 81111ee:	603b      	str	r3, [r7, #0]
 81111f0:	460b      	mov	r3, r1
 81111f2:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 81111f4:	2300      	movs	r3, #0
 81111f6:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 81111f8:	697b      	ldr	r3, [r7, #20]
 81111fa:	2b00      	cmp	r3, #0
 81111fc:	d121      	bne.n	8111242 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 81111fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111200:	68fa      	ldr	r2, [r7, #12]
 8111202:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8111204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111206:	687a      	ldr	r2, [r7, #4]
 8111208:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 811120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811120c:	897a      	ldrh	r2, [r7, #10]
 811120e:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8111210:	683b      	ldr	r3, [r7, #0]
 8111212:	891a      	ldrh	r2, [r3, #8]
 8111214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111216:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8111218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811121a:	895a      	ldrh	r2, [r3, #10]
 811121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811121e:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8111220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111222:	6a3a      	ldr	r2, [r7, #32]
 8111224:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8111226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811122a:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 811122c:	683b      	ldr	r3, [r7, #0]
 811122e:	6819      	ldr	r1, [r3, #0]
 8111230:	683b      	ldr	r3, [r7, #0]
 8111232:	685b      	ldr	r3, [r3, #4]
 8111234:	461a      	mov	r2, r3
 8111236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111238:	f000 f8fb 	bl	8111432 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 811123c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811123e:	f000 f885 	bl	811134c <virtqueue_disable_cb>
	}

	return (status);
 8111242:	697b      	ldr	r3, [r7, #20]
}
 8111244:	4618      	mov	r0, r3
 8111246:	3718      	adds	r7, #24
 8111248:	46bd      	mov	sp, r7
 811124a:	bd80      	pop	{r7, pc}

0811124c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 811124c:	b580      	push	{r7, lr}
 811124e:	b086      	sub	sp, #24
 8111250:	af00      	add	r7, sp, #0
 8111252:	60f8      	str	r0, [r7, #12]
 8111254:	60b9      	str	r1, [r7, #8]
 8111256:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8111258:	2300      	movs	r3, #0
 811125a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 811125c:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8111260:	68fb      	ldr	r3, [r7, #12]
 8111262:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8111264:	68fb      	ldr	r3, [r7, #12]
 8111266:	6a1b      	ldr	r3, [r3, #32]
 8111268:	885b      	ldrh	r3, [r3, #2]
 811126a:	429a      	cmp	r2, r3
 811126c:	d101      	bne.n	8111272 <virtqueue_get_available_buffer+0x26>
		return NULL;
 811126e:	2300      	movs	r3, #0
 8111270:	e02e      	b.n	81112d0 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8111272:	68fb      	ldr	r3, [r7, #12]
 8111274:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8111276:	1c5a      	adds	r2, r3, #1
 8111278:	b291      	uxth	r1, r2
 811127a:	68fa      	ldr	r2, [r7, #12]
 811127c:	8691      	strh	r1, [r2, #52]	@ 0x34
 811127e:	b21a      	sxth	r2, r3
 8111280:	68fb      	ldr	r3, [r7, #12]
 8111282:	895b      	ldrh	r3, [r3, #10]
 8111284:	3b01      	subs	r3, #1
 8111286:	b29b      	uxth	r3, r3
 8111288:	b21b      	sxth	r3, r3
 811128a:	4013      	ands	r3, r2
 811128c:	b21b      	sxth	r3, r3
 811128e:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8111290:	68fb      	ldr	r3, [r7, #12]
 8111292:	6a1a      	ldr	r2, [r3, #32]
 8111294:	8afb      	ldrh	r3, [r7, #22]
 8111296:	005b      	lsls	r3, r3, #1
 8111298:	4413      	add	r3, r2
 811129a:	889a      	ldrh	r2, [r3, #4]
 811129c:	68bb      	ldr	r3, [r7, #8]
 811129e:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 81112a0:	68fb      	ldr	r3, [r7, #12]
 81112a2:	69da      	ldr	r2, [r3, #28]
 81112a4:	68bb      	ldr	r3, [r7, #8]
 81112a6:	881b      	ldrh	r3, [r3, #0]
 81112a8:	011b      	lsls	r3, r3, #4
 81112aa:	4413      	add	r3, r2
 81112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81112b0:	4613      	mov	r3, r2
 81112b2:	4619      	mov	r1, r3
 81112b4:	68f8      	ldr	r0, [r7, #12]
 81112b6:	f7ff ff84 	bl	81111c2 <virtqueue_phys_to_virt>
 81112ba:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 81112bc:	68fb      	ldr	r3, [r7, #12]
 81112be:	69da      	ldr	r2, [r3, #28]
 81112c0:	68bb      	ldr	r3, [r7, #8]
 81112c2:	881b      	ldrh	r3, [r3, #0]
 81112c4:	011b      	lsls	r3, r3, #4
 81112c6:	4413      	add	r3, r2
 81112c8:	689a      	ldr	r2, [r3, #8]
 81112ca:	687b      	ldr	r3, [r7, #4]
 81112cc:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 81112ce:	693b      	ldr	r3, [r7, #16]
}
 81112d0:	4618      	mov	r0, r3
 81112d2:	3718      	adds	r7, #24
 81112d4:	46bd      	mov	sp, r7
 81112d6:	bd80      	pop	{r7, pc}

081112d8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 81112d8:	b480      	push	{r7}
 81112da:	b087      	sub	sp, #28
 81112dc:	af00      	add	r7, sp, #0
 81112de:	60f8      	str	r0, [r7, #12]
 81112e0:	460b      	mov	r3, r1
 81112e2:	607a      	str	r2, [r7, #4]
 81112e4:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 81112e6:	2300      	movs	r3, #0
 81112e8:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 81112ea:	68fb      	ldr	r3, [r7, #12]
 81112ec:	895b      	ldrh	r3, [r3, #10]
 81112ee:	897a      	ldrh	r2, [r7, #10]
 81112f0:	429a      	cmp	r2, r3
 81112f2:	d901      	bls.n	81112f8 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 81112f4:	4b14      	ldr	r3, [pc, #80]	@ (8111348 <virtqueue_add_consumed_buffer+0x70>)
 81112f6:	e021      	b.n	811133c <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 81112f8:	68fb      	ldr	r3, [r7, #12]
 81112fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81112fc:	885b      	ldrh	r3, [r3, #2]
 81112fe:	b21a      	sxth	r2, r3
 8111300:	68fb      	ldr	r3, [r7, #12]
 8111302:	895b      	ldrh	r3, [r3, #10]
 8111304:	3b01      	subs	r3, #1
 8111306:	b29b      	uxth	r3, r3
 8111308:	b21b      	sxth	r3, r3
 811130a:	4013      	ands	r3, r2
 811130c:	b21b      	sxth	r3, r3
 811130e:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8111310:	68fb      	ldr	r3, [r7, #12]
 8111312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111314:	8a7b      	ldrh	r3, [r7, #18]
 8111316:	00db      	lsls	r3, r3, #3
 8111318:	4413      	add	r3, r2
 811131a:	3304      	adds	r3, #4
 811131c:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 811131e:	897a      	ldrh	r2, [r7, #10]
 8111320:	697b      	ldr	r3, [r7, #20]
 8111322:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8111324:	697b      	ldr	r3, [r7, #20]
 8111326:	687a      	ldr	r2, [r7, #4]
 8111328:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 811132a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 811132e:	68fb      	ldr	r3, [r7, #12]
 8111330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111332:	885a      	ldrh	r2, [r3, #2]
 8111334:	3201      	adds	r2, #1
 8111336:	b292      	uxth	r2, r2
 8111338:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 811133a:	2300      	movs	r3, #0
}
 811133c:	4618      	mov	r0, r3
 811133e:	371c      	adds	r7, #28
 8111340:	46bd      	mov	sp, r7
 8111342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111346:	4770      	bx	lr
 8111348:	fffff441 	.word	0xfffff441

0811134c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 811134c:	b480      	push	{r7}
 811134e:	b083      	sub	sp, #12
 8111350:	af00      	add	r7, sp, #0
 8111352:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8111354:	687b      	ldr	r3, [r7, #4]
 8111356:	68db      	ldr	r3, [r3, #12]
 8111358:	f003 0302 	and.w	r3, r3, #2
 811135c:	2b00      	cmp	r3, #0
 811135e:	d010      	beq.n	8111382 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8111360:	687b      	ldr	r3, [r7, #4]
 8111362:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8111364:	687b      	ldr	r3, [r7, #4]
 8111366:	895b      	ldrh	r3, [r3, #10]
 8111368:	1ad3      	subs	r3, r2, r3
 811136a:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 811136c:	687b      	ldr	r3, [r7, #4]
 811136e:	6a1a      	ldr	r2, [r3, #32]
 8111370:	687b      	ldr	r3, [r7, #4]
 8111372:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8111374:	3901      	subs	r1, #1
 8111376:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8111378:	005b      	lsls	r3, r3, #1
 811137a:	4413      	add	r3, r2
 811137c:	460a      	mov	r2, r1
 811137e:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8111380:	e008      	b.n	8111394 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8111382:	687b      	ldr	r3, [r7, #4]
 8111384:	6a1b      	ldr	r3, [r3, #32]
 8111386:	881a      	ldrh	r2, [r3, #0]
 8111388:	687b      	ldr	r3, [r7, #4]
 811138a:	6a1b      	ldr	r3, [r3, #32]
 811138c:	f042 0201 	orr.w	r2, r2, #1
 8111390:	b292      	uxth	r2, r2
 8111392:	801a      	strh	r2, [r3, #0]
}
 8111394:	bf00      	nop
 8111396:	370c      	adds	r7, #12
 8111398:	46bd      	mov	sp, r7
 811139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811139e:	4770      	bx	lr

081113a0 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 81113a0:	b580      	push	{r7, lr}
 81113a2:	b082      	sub	sp, #8
 81113a4:	af00      	add	r7, sp, #0
 81113a6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 81113a8:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 81113ac:	6878      	ldr	r0, [r7, #4]
 81113ae:	f000 f885 	bl	81114bc <vq_ring_must_notify_host>
 81113b2:	4603      	mov	r3, r0
 81113b4:	2b00      	cmp	r3, #0
 81113b6:	d002      	beq.n	81113be <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 81113b8:	6878      	ldr	r0, [r7, #4]
 81113ba:	f000 f8b5 	bl	8111528 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 81113be:	687b      	ldr	r3, [r7, #4]
 81113c0:	2200      	movs	r2, #0
 81113c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 81113c4:	bf00      	nop
 81113c6:	3708      	adds	r7, #8
 81113c8:	46bd      	mov	sp, r7
 81113ca:	bd80      	pop	{r7, pc}

081113cc <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 81113cc:	b480      	push	{r7}
 81113ce:	b085      	sub	sp, #20
 81113d0:	af00      	add	r7, sp, #0
 81113d2:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 81113d4:	2300      	movs	r3, #0
 81113d6:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 81113d8:	2300      	movs	r3, #0
 81113da:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 81113dc:	2300      	movs	r3, #0
 81113de:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 81113e0:	687b      	ldr	r3, [r7, #4]
 81113e2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 81113e4:	687b      	ldr	r3, [r7, #4]
 81113e6:	6a1b      	ldr	r3, [r3, #32]
 81113e8:	885b      	ldrh	r3, [r3, #2]
 81113ea:	429a      	cmp	r2, r3
 81113ec:	d101      	bne.n	81113f2 <virtqueue_get_desc_size+0x26>
		return 0;
 81113ee:	2300      	movs	r3, #0
 81113f0:	e019      	b.n	8111426 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 81113f2:	687b      	ldr	r3, [r7, #4]
 81113f4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 81113f6:	b21a      	sxth	r2, r3
 81113f8:	687b      	ldr	r3, [r7, #4]
 81113fa:	895b      	ldrh	r3, [r3, #10]
 81113fc:	3b01      	subs	r3, #1
 81113fe:	b29b      	uxth	r3, r3
 8111400:	b21b      	sxth	r3, r3
 8111402:	4013      	ands	r3, r2
 8111404:	b21b      	sxth	r3, r3
 8111406:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8111408:	687b      	ldr	r3, [r7, #4]
 811140a:	6a1a      	ldr	r2, [r3, #32]
 811140c:	89fb      	ldrh	r3, [r7, #14]
 811140e:	005b      	lsls	r3, r3, #1
 8111410:	4413      	add	r3, r2
 8111412:	889b      	ldrh	r3, [r3, #4]
 8111414:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8111416:	687b      	ldr	r3, [r7, #4]
 8111418:	69da      	ldr	r2, [r3, #28]
 811141a:	89bb      	ldrh	r3, [r7, #12]
 811141c:	011b      	lsls	r3, r3, #4
 811141e:	4413      	add	r3, r2
 8111420:	689b      	ldr	r3, [r3, #8]
 8111422:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8111424:	68bb      	ldr	r3, [r7, #8]
}
 8111426:	4618      	mov	r0, r3
 8111428:	3714      	adds	r7, #20
 811142a:	46bd      	mov	sp, r7
 811142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111430:	4770      	bx	lr

08111432 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8111432:	b580      	push	{r7, lr}
 8111434:	b088      	sub	sp, #32
 8111436:	af00      	add	r7, sp, #0
 8111438:	60f8      	str	r0, [r7, #12]
 811143a:	60b9      	str	r1, [r7, #8]
 811143c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 811143e:	68fb      	ldr	r3, [r7, #12]
 8111440:	895b      	ldrh	r3, [r3, #10]
 8111442:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8111444:	68fb      	ldr	r3, [r7, #12]
 8111446:	3318      	adds	r3, #24
 8111448:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 811144a:	69b9      	ldr	r1, [r7, #24]
 811144c:	687b      	ldr	r3, [r7, #4]
 811144e:	68ba      	ldr	r2, [r7, #8]
 8111450:	6978      	ldr	r0, [r7, #20]
 8111452:	f7ff fde3 	bl	811101c <vring_init>

	for (i = 0; i < size - 1; i++)
 8111456:	2300      	movs	r3, #0
 8111458:	61fb      	str	r3, [r7, #28]
 811145a:	e00c      	b.n	8111476 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 811145c:	69fb      	ldr	r3, [r7, #28]
 811145e:	b29a      	uxth	r2, r3
 8111460:	697b      	ldr	r3, [r7, #20]
 8111462:	6859      	ldr	r1, [r3, #4]
 8111464:	69fb      	ldr	r3, [r7, #28]
 8111466:	011b      	lsls	r3, r3, #4
 8111468:	440b      	add	r3, r1
 811146a:	3201      	adds	r2, #1
 811146c:	b292      	uxth	r2, r2
 811146e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8111470:	69fb      	ldr	r3, [r7, #28]
 8111472:	3301      	adds	r3, #1
 8111474:	61fb      	str	r3, [r7, #28]
 8111476:	69bb      	ldr	r3, [r7, #24]
 8111478:	3b01      	subs	r3, #1
 811147a:	69fa      	ldr	r2, [r7, #28]
 811147c:	429a      	cmp	r2, r3
 811147e:	dbed      	blt.n	811145c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8111480:	697b      	ldr	r3, [r7, #20]
 8111482:	685a      	ldr	r2, [r3, #4]
 8111484:	69fb      	ldr	r3, [r7, #28]
 8111486:	011b      	lsls	r3, r3, #4
 8111488:	4413      	add	r3, r2
 811148a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 811148e:	81da      	strh	r2, [r3, #14]
}
 8111490:	bf00      	nop
 8111492:	3720      	adds	r7, #32
 8111494:	46bd      	mov	sp, r7
 8111496:	bd80      	pop	{r7, pc}

08111498 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8111498:	b580      	push	{r7, lr}
 811149a:	b082      	sub	sp, #8
 811149c:	af00      	add	r7, sp, #0
 811149e:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 81114a0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 81114a4:	687b      	ldr	r3, [r7, #4]
 81114a6:	691b      	ldr	r3, [r3, #16]
 81114a8:	2b00      	cmp	r3, #0
 81114aa:	d003      	beq.n	81114b4 <virtqueue_notification+0x1c>
		vq->callback(vq);
 81114ac:	687b      	ldr	r3, [r7, #4]
 81114ae:	691b      	ldr	r3, [r3, #16]
 81114b0:	6878      	ldr	r0, [r7, #4]
 81114b2:	4798      	blx	r3
}
 81114b4:	bf00      	nop
 81114b6:	3708      	adds	r7, #8
 81114b8:	46bd      	mov	sp, r7
 81114ba:	bd80      	pop	{r7, pc}

081114bc <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 81114bc:	b580      	push	{r7, lr}
 81114be:	b084      	sub	sp, #16
 81114c0:	af00      	add	r7, sp, #0
 81114c2:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81114c4:	687b      	ldr	r3, [r7, #4]
 81114c6:	68db      	ldr	r3, [r3, #12]
 81114c8:	f003 0302 	and.w	r3, r3, #2
 81114cc:	2b00      	cmp	r3, #0
 81114ce:	d01d      	beq.n	811150c <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 81114d0:	687b      	ldr	r3, [r7, #4]
 81114d2:	6a1b      	ldr	r3, [r3, #32]
 81114d4:	885b      	ldrh	r3, [r3, #2]
 81114d6:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 81114d8:	687b      	ldr	r3, [r7, #4]
 81114da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81114dc:	89fa      	ldrh	r2, [r7, #14]
 81114de:	1ad3      	subs	r3, r2, r3
 81114e0:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 81114e2:	687b      	ldr	r3, [r7, #4]
 81114e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81114e6:	687b      	ldr	r3, [r7, #4]
 81114e8:	699b      	ldr	r3, [r3, #24]
 81114ea:	00db      	lsls	r3, r3, #3
 81114ec:	4413      	add	r3, r2
 81114ee:	685b      	ldr	r3, [r3, #4]
 81114f0:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 81114f2:	89ba      	ldrh	r2, [r7, #12]
 81114f4:	89f9      	ldrh	r1, [r7, #14]
 81114f6:	897b      	ldrh	r3, [r7, #10]
 81114f8:	4618      	mov	r0, r3
 81114fa:	f7ff fdb8 	bl	811106e <vring_need_event>
 81114fe:	4603      	mov	r3, r0
 8111500:	2b00      	cmp	r3, #0
 8111502:	bf14      	ite	ne
 8111504:	2301      	movne	r3, #1
 8111506:	2300      	moveq	r3, #0
 8111508:	b2db      	uxtb	r3, r3
 811150a:	e009      	b.n	8111520 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 811150c:	687b      	ldr	r3, [r7, #4]
 811150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111510:	881b      	ldrh	r3, [r3, #0]
 8111512:	f003 0301 	and.w	r3, r3, #1
 8111516:	2b00      	cmp	r3, #0
 8111518:	bf0c      	ite	eq
 811151a:	2301      	moveq	r3, #1
 811151c:	2300      	movne	r3, #0
 811151e:	b2db      	uxtb	r3, r3
}
 8111520:	4618      	mov	r0, r3
 8111522:	3710      	adds	r7, #16
 8111524:	46bd      	mov	sp, r7
 8111526:	bd80      	pop	{r7, pc}

08111528 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8111528:	b580      	push	{r7, lr}
 811152a:	b082      	sub	sp, #8
 811152c:	af00      	add	r7, sp, #0
 811152e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8111530:	687b      	ldr	r3, [r7, #4]
 8111532:	695b      	ldr	r3, [r3, #20]
 8111534:	2b00      	cmp	r3, #0
 8111536:	d003      	beq.n	8111540 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8111538:	687b      	ldr	r3, [r7, #4]
 811153a:	695b      	ldr	r3, [r3, #20]
 811153c:	6878      	ldr	r0, [r7, #4]
 811153e:	4798      	blx	r3
}
 8111540:	bf00      	nop
 8111542:	3708      	adds	r7, #8
 8111544:	46bd      	mov	sp, r7
 8111546:	bd80      	pop	{r7, pc}

08111548 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8111548:	b580      	push	{r7, lr}
 811154a:	b082      	sub	sp, #8
 811154c:	af00      	add	r7, sp, #0
 811154e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8111550:	4b04      	ldr	r3, [pc, #16]	@ (8111564 <HAL_HSEM_FreeCallback+0x1c>)
 8111552:	2201      	movs	r2, #1
 8111554:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8111556:	2001      	movs	r0, #1
 8111558:	f7f4 fb7a 	bl	8105c50 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 811155c:	bf00      	nop
 811155e:	3708      	adds	r7, #8
 8111560:	46bd      	mov	sp, r7
 8111562:	bd80      	pop	{r7, pc}
 8111564:	10004f68 	.word	0x10004f68

08111568 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8111568:	b580      	push	{r7, lr}
 811156a:	b082      	sub	sp, #8
 811156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 811156e:	4b0b      	ldr	r3, [pc, #44]	@ (811159c <MAILBOX_Init+0x34>)
 8111570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8111574:	4a09      	ldr	r2, [pc, #36]	@ (811159c <MAILBOX_Init+0x34>)
 8111576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 811157a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 811157e:	4b07      	ldr	r3, [pc, #28]	@ (811159c <MAILBOX_Init+0x34>)
 8111580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8111584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8111588:	607b      	str	r3, [r7, #4]
 811158a:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 811158c:	2001      	movs	r0, #1
 811158e:	f7f4 fb5f 	bl	8105c50 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8111592:	2300      	movs	r3, #0
}
 8111594:	4618      	mov	r0, r3
 8111596:	3708      	adds	r7, #8
 8111598:	46bd      	mov	sp, r7
 811159a:	bd80      	pop	{r7, pc}
 811159c:	58024400 	.word	0x58024400

081115a0 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 81115a0:	b580      	push	{r7, lr}
 81115a2:	b082      	sub	sp, #8
 81115a4:	af00      	add	r7, sp, #0
 81115a6:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 81115a8:	4b09      	ldr	r3, [pc, #36]	@ (81115d0 <MAILBOX_Poll+0x30>)
 81115aa:	681b      	ldr	r3, [r3, #0]
 81115ac:	2b01      	cmp	r3, #1
 81115ae:	d108      	bne.n	81115c2 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 81115b0:	2101      	movs	r1, #1
 81115b2:	6878      	ldr	r0, [r7, #4]
 81115b4:	f7fe fd25 	bl	8110002 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 81115b8:	4b05      	ldr	r3, [pc, #20]	@ (81115d0 <MAILBOX_Poll+0x30>)
 81115ba:	2200      	movs	r2, #0
 81115bc:	601a      	str	r2, [r3, #0]
    return 0;
 81115be:	2300      	movs	r3, #0
 81115c0:	e001      	b.n	81115c6 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 81115c2:	f06f 030a 	mvn.w	r3, #10
}
 81115c6:	4618      	mov	r0, r3
 81115c8:	3708      	adds	r7, #8
 81115ca:	46bd      	mov	sp, r7
 81115cc:	bd80      	pop	{r7, pc}
 81115ce:	bf00      	nop
 81115d0:	10004f68 	.word	0x10004f68

081115d4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 81115d4:	b580      	push	{r7, lr}
 81115d6:	b082      	sub	sp, #8
 81115d8:	af00      	add	r7, sp, #0
 81115da:	6078      	str	r0, [r7, #4]
 81115dc:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 81115de:	2001      	movs	r0, #1
 81115e0:	f7f4 fb08 	bl	8105bf4 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 81115e4:	2100      	movs	r1, #0
 81115e6:	2001      	movs	r0, #1
 81115e8:	f7f4 fb1e 	bl	8105c28 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 81115ec:	2300      	movs	r3, #0
}
 81115ee:	4618      	mov	r0, r3
 81115f0:	3708      	adds	r7, #8
 81115f2:	46bd      	mov	sp, r7
 81115f4:	bd80      	pop	{r7, pc}

081115f6 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 81115f6:	b480      	push	{r7}
 81115f8:	b083      	sub	sp, #12
 81115fa:	af00      	add	r7, sp, #0
 81115fc:	6078      	str	r0, [r7, #4]
 81115fe:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8111600:	687b      	ldr	r3, [r7, #4]
 8111602:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8111604:	683a      	ldr	r2, [r7, #0]
 8111606:	429a      	cmp	r2, r3
 8111608:	d209      	bcs.n	811161e <metal_device_io_region+0x28>
 811160a:	683a      	ldr	r2, [r7, #0]
 811160c:	4613      	mov	r3, r2
 811160e:	005b      	lsls	r3, r3, #1
 8111610:	4413      	add	r3, r2
 8111612:	011b      	lsls	r3, r3, #4
 8111614:	3308      	adds	r3, #8
 8111616:	687a      	ldr	r2, [r7, #4]
 8111618:	4413      	add	r3, r2
 811161a:	3304      	adds	r3, #4
 811161c:	e000      	b.n	8111620 <metal_device_io_region+0x2a>
 811161e:	2300      	movs	r3, #0
}
 8111620:	4618      	mov	r0, r3
 8111622:	370c      	adds	r7, #12
 8111624:	46bd      	mov	sp, r7
 8111626:	f85d 7b04 	ldr.w	r7, [sp], #4
 811162a:	4770      	bx	lr

0811162c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 811162c:	b590      	push	{r4, r7, lr}
 811162e:	b08d      	sub	sp, #52	@ 0x34
 8111630:	af04      	add	r7, sp, #16
 8111632:	6078      	str	r0, [r7, #4]
  int status = 0;
 8111634:	2300      	movs	r3, #0
 8111636:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8111638:	2300      	movs	r3, #0
 811163a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 811163c:	4a41      	ldr	r2, [pc, #260]	@ (8111744 <OPENAMP_shmem_init+0x118>)
 811163e:	f107 0310 	add.w	r3, r7, #16
 8111642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8111646:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 811164a:	2300      	movs	r3, #0
 811164c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 811164e:	2300      	movs	r3, #0
 8111650:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8111652:	f107 0310 	add.w	r3, r7, #16
 8111656:	4618      	mov	r0, r3
 8111658:	f7fe f8e6 	bl	810f828 <metal_init>

  status = metal_register_generic_device(&shm_device);
 811165c:	483a      	ldr	r0, [pc, #232]	@ (8111748 <OPENAMP_shmem_init+0x11c>)
 811165e:	f7fd ff8b 	bl	810f578 <metal_register_generic_device>
 8111662:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8111664:	69fb      	ldr	r3, [r7, #28]
 8111666:	2b00      	cmp	r3, #0
 8111668:	d001      	beq.n	811166e <OPENAMP_shmem_init+0x42>
    return status;
 811166a:	69fb      	ldr	r3, [r7, #28]
 811166c:	e066      	b.n	811173c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 811166e:	f107 0318 	add.w	r3, r7, #24
 8111672:	461a      	mov	r2, r3
 8111674:	4935      	ldr	r1, [pc, #212]	@ (811174c <OPENAMP_shmem_init+0x120>)
 8111676:	4836      	ldr	r0, [pc, #216]	@ (8111750 <OPENAMP_shmem_init+0x124>)
 8111678:	f7fd ff40 	bl	810f4fc <metal_device_open>
 811167c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 811167e:	69fb      	ldr	r3, [r7, #28]
 8111680:	2b00      	cmp	r3, #0
 8111682:	d001      	beq.n	8111688 <OPENAMP_shmem_init+0x5c>
    return status;
 8111684:	69fb      	ldr	r3, [r7, #28]
 8111686:	e059      	b.n	811173c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8111688:	4a32      	ldr	r2, [pc, #200]	@ (8111754 <OPENAMP_shmem_init+0x128>)
 811168a:	4b33      	ldr	r3, [pc, #204]	@ (8111758 <OPENAMP_shmem_init+0x12c>)
 811168c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 811168e:	69bb      	ldr	r3, [r7, #24]
 8111690:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8111694:	4a31      	ldr	r2, [pc, #196]	@ (811175c <OPENAMP_shmem_init+0x130>)
 8111696:	4b2f      	ldr	r3, [pc, #188]	@ (8111754 <OPENAMP_shmem_init+0x128>)
 8111698:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 811169a:	461a      	mov	r2, r3
 811169c:	2300      	movs	r3, #0
 811169e:	9302      	str	r3, [sp, #8]
 81116a0:	2300      	movs	r3, #0
 81116a2:	9301      	str	r3, [sp, #4]
 81116a4:	f04f 33ff 	mov.w	r3, #4294967295
 81116a8:	9300      	str	r3, [sp, #0]
 81116aa:	4613      	mov	r3, r2
 81116ac:	4a2a      	ldr	r2, [pc, #168]	@ (8111758 <OPENAMP_shmem_init+0x12c>)
 81116ae:	4929      	ldr	r1, [pc, #164]	@ (8111754 <OPENAMP_shmem_init+0x128>)
 81116b0:	f7fe f907 	bl	810f8c2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 81116b4:	69bb      	ldr	r3, [r7, #24]
 81116b6:	2100      	movs	r1, #0
 81116b8:	4618      	mov	r0, r3
 81116ba:	f7ff ff9c 	bl	81115f6 <metal_device_io_region>
 81116be:	4603      	mov	r3, r0
 81116c0:	4a27      	ldr	r2, [pc, #156]	@ (8111760 <OPENAMP_shmem_init+0x134>)
 81116c2:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 81116c4:	4b26      	ldr	r3, [pc, #152]	@ (8111760 <OPENAMP_shmem_init+0x134>)
 81116c6:	681b      	ldr	r3, [r3, #0]
 81116c8:	2b00      	cmp	r3, #0
 81116ca:	d102      	bne.n	81116d2 <OPENAMP_shmem_init+0xa6>
    return -1;
 81116cc:	f04f 33ff 	mov.w	r3, #4294967295
 81116d0:	e034      	b.n	811173c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 81116d2:	f107 0208 	add.w	r2, r7, #8
 81116d6:	f107 030c 	add.w	r3, r7, #12
 81116da:	4619      	mov	r1, r3
 81116dc:	6878      	ldr	r0, [r7, #4]
 81116de:	f000 f905 	bl	81118ec <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 81116e2:	68fb      	ldr	r3, [r7, #12]
 81116e4:	4a1f      	ldr	r2, [pc, #124]	@ (8111764 <OPENAMP_shmem_init+0x138>)
 81116e6:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 81116e8:	4b1e      	ldr	r3, [pc, #120]	@ (8111764 <OPENAMP_shmem_init+0x138>)
 81116ea:	681b      	ldr	r3, [r3, #0]
 81116ec:	2b00      	cmp	r3, #0
 81116ee:	d102      	bne.n	81116f6 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 81116f0:	f04f 33ff 	mov.w	r3, #4294967295
 81116f4:	e022      	b.n	811173c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 81116f6:	69bb      	ldr	r3, [r7, #24]
 81116f8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 81116fc:	4b19      	ldr	r3, [pc, #100]	@ (8111764 <OPENAMP_shmem_init+0x138>)
 81116fe:	6819      	ldr	r1, [r3, #0]
 8111700:	4b18      	ldr	r3, [pc, #96]	@ (8111764 <OPENAMP_shmem_init+0x138>)
 8111702:	681a      	ldr	r2, [r3, #0]
 8111704:	68bb      	ldr	r3, [r7, #8]
 8111706:	461c      	mov	r4, r3
 8111708:	2300      	movs	r3, #0
 811170a:	9302      	str	r3, [sp, #8]
 811170c:	2300      	movs	r3, #0
 811170e:	9301      	str	r3, [sp, #4]
 8111710:	f04f 33ff 	mov.w	r3, #4294967295
 8111714:	9300      	str	r3, [sp, #0]
 8111716:	4623      	mov	r3, r4
 8111718:	f7fe f8d3 	bl	810f8c2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 811171c:	69bb      	ldr	r3, [r7, #24]
 811171e:	2101      	movs	r1, #1
 8111720:	4618      	mov	r0, r3
 8111722:	f7ff ff68 	bl	81115f6 <metal_device_io_region>
 8111726:	4603      	mov	r3, r0
 8111728:	4a0f      	ldr	r2, [pc, #60]	@ (8111768 <OPENAMP_shmem_init+0x13c>)
 811172a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 811172c:	4b0e      	ldr	r3, [pc, #56]	@ (8111768 <OPENAMP_shmem_init+0x13c>)
 811172e:	681b      	ldr	r3, [r3, #0]
 8111730:	2b00      	cmp	r3, #0
 8111732:	d102      	bne.n	811173a <OPENAMP_shmem_init+0x10e>
    return -1;
 8111734:	f04f 33ff 	mov.w	r3, #4294967295
 8111738:	e000      	b.n	811173c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 811173a:	2300      	movs	r3, #0
}
 811173c:	4618      	mov	r0, r3
 811173e:	3724      	adds	r7, #36	@ 0x24
 8111740:	46bd      	mov	sp, r7
 8111742:	bd90      	pop	{r4, r7, pc}
 8111744:	08117380 	.word	0x08117380
 8111748:	10000040 	.word	0x10000040
 811174c:	0811736c 	.word	0x0811736c
 8111750:	08117378 	.word	0x08117378
 8111754:	38000400 	.word	0x38000400
 8111758:	10004ffc 	.word	0x10004ffc
 811175c:	38010000 	.word	0x38010000
 8111760:	10004f6c 	.word	0x10004f6c
 8111764:	10004f74 	.word	0x10004f74
 8111768:	10004f70 	.word	0x10004f70

0811176c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 811176c:	b590      	push	{r4, r7, lr}
 811176e:	b08b      	sub	sp, #44	@ 0x2c
 8111770:	af04      	add	r7, sp, #16
 8111772:	6078      	str	r0, [r7, #4]
 8111774:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8111776:	2300      	movs	r3, #0
 8111778:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 811177a:	2300      	movs	r3, #0
 811177c:	613b      	str	r3, [r7, #16]
  int status = 0;
 811177e:	2300      	movs	r3, #0
 8111780:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8111782:	f7ff fef1 	bl	8111568 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8111786:	6878      	ldr	r0, [r7, #4]
 8111788:	f7ff ff50 	bl	811162c <OPENAMP_shmem_init>
 811178c:	60f8      	str	r0, [r7, #12]
  if(status)
 811178e:	68fb      	ldr	r3, [r7, #12]
 8111790:	2b00      	cmp	r3, #0
 8111792:	d001      	beq.n	8111798 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8111794:	68fb      	ldr	r3, [r7, #12]
 8111796:	e06a      	b.n	811186e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8111798:	6878      	ldr	r0, [r7, #4]
 811179a:	4b37      	ldr	r3, [pc, #220]	@ (8111878 <MX_OPENAMP_Init+0x10c>)
 811179c:	681b      	ldr	r3, [r3, #0]
 811179e:	f103 0218 	add.w	r2, r3, #24
 81117a2:	4b36      	ldr	r3, [pc, #216]	@ (811187c <MX_OPENAMP_Init+0x110>)
 81117a4:	681b      	ldr	r3, [r3, #0]
 81117a6:	2100      	movs	r1, #0
 81117a8:	9102      	str	r1, [sp, #8]
 81117aa:	4935      	ldr	r1, [pc, #212]	@ (8111880 <MX_OPENAMP_Init+0x114>)
 81117ac:	9101      	str	r1, [sp, #4]
 81117ae:	2100      	movs	r1, #0
 81117b0:	9100      	str	r1, [sp, #0]
 81117b2:	21ff      	movs	r1, #255	@ 0xff
 81117b4:	f7fe fb46 	bl	810fe44 <rproc_virtio_create_vdev>
 81117b8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 81117ba:	693b      	ldr	r3, [r7, #16]
 81117bc:	2b00      	cmp	r3, #0
 81117be:	d102      	bne.n	81117c6 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 81117c0:	f04f 33ff 	mov.w	r3, #4294967295
 81117c4:	e053      	b.n	811186e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 81117c6:	6938      	ldr	r0, [r7, #16]
 81117c8:	f7fe fc57 	bl	811007a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 81117cc:	4b2a      	ldr	r3, [pc, #168]	@ (8111878 <MX_OPENAMP_Init+0x10c>)
 81117ce:	681b      	ldr	r3, [r3, #0]
 81117d0:	3334      	adds	r3, #52	@ 0x34
 81117d2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81117d4:	697b      	ldr	r3, [r7, #20]
 81117d6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81117d8:	697b      	ldr	r3, [r7, #20]
 81117da:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81117dc:	461c      	mov	r4, r3
 81117de:	4b29      	ldr	r3, [pc, #164]	@ (8111884 <MX_OPENAMP_Init+0x118>)
 81117e0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 81117e2:	697a      	ldr	r2, [r7, #20]
 81117e4:	6892      	ldr	r2, [r2, #8]
 81117e6:	6979      	ldr	r1, [r7, #20]
 81117e8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81117ea:	9102      	str	r1, [sp, #8]
 81117ec:	9201      	str	r2, [sp, #4]
 81117ee:	9300      	str	r3, [sp, #0]
 81117f0:	4623      	mov	r3, r4
 81117f2:	4602      	mov	r2, r0
 81117f4:	2100      	movs	r1, #0
 81117f6:	6938      	ldr	r0, [r7, #16]
 81117f8:	f7fe fbd2 	bl	810ffa0 <rproc_virtio_init_vring>
 81117fc:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81117fe:	68fb      	ldr	r3, [r7, #12]
 8111800:	2b00      	cmp	r3, #0
 8111802:	d001      	beq.n	8111808 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8111804:	68fb      	ldr	r3, [r7, #12]
 8111806:	e032      	b.n	811186e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8111808:	4b1b      	ldr	r3, [pc, #108]	@ (8111878 <MX_OPENAMP_Init+0x10c>)
 811180a:	681b      	ldr	r3, [r3, #0]
 811180c:	3348      	adds	r3, #72	@ 0x48
 811180e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111810:	697b      	ldr	r3, [r7, #20]
 8111812:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8111814:	697b      	ldr	r3, [r7, #20]
 8111816:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111818:	461c      	mov	r4, r3
 811181a:	4b1a      	ldr	r3, [pc, #104]	@ (8111884 <MX_OPENAMP_Init+0x118>)
 811181c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 811181e:	697a      	ldr	r2, [r7, #20]
 8111820:	6892      	ldr	r2, [r2, #8]
 8111822:	6979      	ldr	r1, [r7, #20]
 8111824:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111826:	9102      	str	r1, [sp, #8]
 8111828:	9201      	str	r2, [sp, #4]
 811182a:	9300      	str	r3, [sp, #0]
 811182c:	4623      	mov	r3, r4
 811182e:	4602      	mov	r2, r0
 8111830:	2101      	movs	r1, #1
 8111832:	6938      	ldr	r0, [r7, #16]
 8111834:	f7fe fbb4 	bl	810ffa0 <rproc_virtio_init_vring>
 8111838:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 811183a:	68fb      	ldr	r3, [r7, #12]
 811183c:	2b00      	cmp	r3, #0
 811183e:	d001      	beq.n	8111844 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8111840:	68fb      	ldr	r3, [r7, #12]
 8111842:	e014      	b.n	811186e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8111844:	4b10      	ldr	r3, [pc, #64]	@ (8111888 <MX_OPENAMP_Init+0x11c>)
 8111846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 811184a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 811184c:	4a0f      	ldr	r2, [pc, #60]	@ (811188c <MX_OPENAMP_Init+0x120>)
 811184e:	4b0e      	ldr	r3, [pc, #56]	@ (8111888 <MX_OPENAMP_Init+0x11c>)
 8111850:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8111852:	461a      	mov	r2, r3
 8111854:	480e      	ldr	r0, [pc, #56]	@ (8111890 <MX_OPENAMP_Init+0x124>)
 8111856:	f7ff f85f 	bl	8110918 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 811185a:	4b0a      	ldr	r3, [pc, #40]	@ (8111884 <MX_OPENAMP_Init+0x118>)
 811185c:	681b      	ldr	r3, [r3, #0]
 811185e:	4a0c      	ldr	r2, [pc, #48]	@ (8111890 <MX_OPENAMP_Init+0x124>)
 8111860:	9200      	str	r2, [sp, #0]
 8111862:	683a      	ldr	r2, [r7, #0]
 8111864:	6939      	ldr	r1, [r7, #16]
 8111866:	480b      	ldr	r0, [pc, #44]	@ (8111894 <MX_OPENAMP_Init+0x128>)
 8111868:	f7ff facc 	bl	8110e04 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 811186c:	2300      	movs	r3, #0
}
 811186e:	4618      	mov	r0, r3
 8111870:	371c      	adds	r7, #28
 8111872:	46bd      	mov	sp, r7
 8111874:	bd90      	pop	{r4, r7, pc}
 8111876:	bf00      	nop
 8111878:	10004f74 	.word	0x10004f74
 811187c:	10004f70 	.word	0x10004f70
 8111880:	081115d5 	.word	0x081115d5
 8111884:	10004f6c 	.word	0x10004f6c
 8111888:	38000400 	.word	0x38000400
 811188c:	38010000 	.word	0x38010000
 8111890:	10004f78 	.word	0x10004f78
 8111894:	10004f84 	.word	0x10004f84

08111898 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8111898:	b580      	push	{r7, lr}
 811189a:	b08a      	sub	sp, #40	@ 0x28
 811189c:	af04      	add	r7, sp, #16
 811189e:	60f8      	str	r0, [r7, #12]
 81118a0:	60b9      	str	r1, [r7, #8]
 81118a2:	607a      	str	r2, [r7, #4]
 81118a4:	603b      	str	r3, [r7, #0]
  int ret = 0;
 81118a6:	2300      	movs	r3, #0
 81118a8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 81118aa:	6a3b      	ldr	r3, [r7, #32]
 81118ac:	9302      	str	r3, [sp, #8]
 81118ae:	683b      	ldr	r3, [r7, #0]
 81118b0:	9301      	str	r3, [sp, #4]
 81118b2:	687b      	ldr	r3, [r7, #4]
 81118b4:	9300      	str	r3, [sp, #0]
 81118b6:	f04f 33ff 	mov.w	r3, #4294967295
 81118ba:	68ba      	ldr	r2, [r7, #8]
 81118bc:	4904      	ldr	r1, [pc, #16]	@ (81118d0 <OPENAMP_create_endpoint+0x38>)
 81118be:	68f8      	ldr	r0, [r7, #12]
 81118c0:	f7fe fe68 	bl	8110594 <rpmsg_create_ept>
 81118c4:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 81118c6:	697b      	ldr	r3, [r7, #20]
}
 81118c8:	4618      	mov	r0, r3
 81118ca:	3718      	adds	r7, #24
 81118cc:	46bd      	mov	sp, r7
 81118ce:	bd80      	pop	{r7, pc}
 81118d0:	10004f84 	.word	0x10004f84

081118d4 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 81118d4:	b580      	push	{r7, lr}
 81118d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 81118d8:	4b03      	ldr	r3, [pc, #12]	@ (81118e8 <OPENAMP_check_for_message+0x14>)
 81118da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81118dc:	4618      	mov	r0, r3
 81118de:	f7ff fe5f 	bl	81115a0 <MAILBOX_Poll>
}
 81118e2:	bf00      	nop
 81118e4:	bd80      	pop	{r7, pc}
 81118e6:	bf00      	nop
 81118e8:	10004f84 	.word	0x10004f84

081118ec <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 81118ec:	b480      	push	{r7}
 81118ee:	b085      	sub	sp, #20
 81118f0:	af00      	add	r7, sp, #0
 81118f2:	60f8      	str	r0, [r7, #12]
 81118f4:	60b9      	str	r1, [r7, #8]
 81118f6:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 81118f8:	bf00      	nop
 81118fa:	4b08      	ldr	r3, [pc, #32]	@ (811191c <resource_table_init+0x30>)
 81118fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81118fe:	4a08      	ldr	r2, [pc, #32]	@ (8111920 <resource_table_init+0x34>)
 8111900:	4293      	cmp	r3, r2
 8111902:	d1fa      	bne.n	81118fa <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8111904:	687b      	ldr	r3, [r7, #4]
 8111906:	228c      	movs	r2, #140	@ 0x8c
 8111908:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 811190a:	68bb      	ldr	r3, [r7, #8]
 811190c:	4a03      	ldr	r2, [pc, #12]	@ (811191c <resource_table_init+0x30>)
 811190e:	601a      	str	r2, [r3, #0]
}
 8111910:	bf00      	nop
 8111912:	3714      	adds	r7, #20
 8111914:	46bd      	mov	sp, r7
 8111916:	f85d 7b04 	ldr.w	r7, [sp], #4
 811191a:	4770      	bx	lr
 811191c:	38000000 	.word	0x38000000
 8111920:	38000400 	.word	0x38000400

08111924 <__assert_func>:
 8111924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8111926:	4614      	mov	r4, r2
 8111928:	461a      	mov	r2, r3
 811192a:	4b09      	ldr	r3, [pc, #36]	@ (8111950 <__assert_func+0x2c>)
 811192c:	681b      	ldr	r3, [r3, #0]
 811192e:	4605      	mov	r5, r0
 8111930:	68d8      	ldr	r0, [r3, #12]
 8111932:	b954      	cbnz	r4, 811194a <__assert_func+0x26>
 8111934:	4b07      	ldr	r3, [pc, #28]	@ (8111954 <__assert_func+0x30>)
 8111936:	461c      	mov	r4, r3
 8111938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811193c:	9100      	str	r1, [sp, #0]
 811193e:	462b      	mov	r3, r5
 8111940:	4905      	ldr	r1, [pc, #20]	@ (8111958 <__assert_func+0x34>)
 8111942:	f001 f865 	bl	8112a10 <fiprintf>
 8111946:	f001 fa1b 	bl	8112d80 <abort>
 811194a:	4b04      	ldr	r3, [pc, #16]	@ (811195c <__assert_func+0x38>)
 811194c:	e7f4      	b.n	8111938 <__assert_func+0x14>
 811194e:	bf00      	nop
 8111950:	100000c8 	.word	0x100000c8
 8111954:	08117535 	.word	0x08117535
 8111958:	08117507 	.word	0x08117507
 811195c:	081174fa 	.word	0x081174fa

08111960 <atol>:
 8111960:	220a      	movs	r2, #10
 8111962:	2100      	movs	r1, #0
 8111964:	f000 b93a 	b.w	8111bdc <strtol>

08111968 <malloc>:
 8111968:	4b02      	ldr	r3, [pc, #8]	@ (8111974 <malloc+0xc>)
 811196a:	4601      	mov	r1, r0
 811196c:	6818      	ldr	r0, [r3, #0]
 811196e:	f000 b82d 	b.w	81119cc <_malloc_r>
 8111972:	bf00      	nop
 8111974:	100000c8 	.word	0x100000c8

08111978 <free>:
 8111978:	4b02      	ldr	r3, [pc, #8]	@ (8111984 <free+0xc>)
 811197a:	4601      	mov	r1, r0
 811197c:	6818      	ldr	r0, [r3, #0]
 811197e:	f002 b853 	b.w	8113a28 <_free_r>
 8111982:	bf00      	nop
 8111984:	100000c8 	.word	0x100000c8

08111988 <sbrk_aligned>:
 8111988:	b570      	push	{r4, r5, r6, lr}
 811198a:	4e0f      	ldr	r6, [pc, #60]	@ (81119c8 <sbrk_aligned+0x40>)
 811198c:	460c      	mov	r4, r1
 811198e:	6831      	ldr	r1, [r6, #0]
 8111990:	4605      	mov	r5, r0
 8111992:	b911      	cbnz	r1, 811199a <sbrk_aligned+0x12>
 8111994:	f001 f990 	bl	8112cb8 <_sbrk_r>
 8111998:	6030      	str	r0, [r6, #0]
 811199a:	4621      	mov	r1, r4
 811199c:	4628      	mov	r0, r5
 811199e:	f001 f98b 	bl	8112cb8 <_sbrk_r>
 81119a2:	1c43      	adds	r3, r0, #1
 81119a4:	d103      	bne.n	81119ae <sbrk_aligned+0x26>
 81119a6:	f04f 34ff 	mov.w	r4, #4294967295
 81119aa:	4620      	mov	r0, r4
 81119ac:	bd70      	pop	{r4, r5, r6, pc}
 81119ae:	1cc4      	adds	r4, r0, #3
 81119b0:	f024 0403 	bic.w	r4, r4, #3
 81119b4:	42a0      	cmp	r0, r4
 81119b6:	d0f8      	beq.n	81119aa <sbrk_aligned+0x22>
 81119b8:	1a21      	subs	r1, r4, r0
 81119ba:	4628      	mov	r0, r5
 81119bc:	f001 f97c 	bl	8112cb8 <_sbrk_r>
 81119c0:	3001      	adds	r0, #1
 81119c2:	d1f2      	bne.n	81119aa <sbrk_aligned+0x22>
 81119c4:	e7ef      	b.n	81119a6 <sbrk_aligned+0x1e>
 81119c6:	bf00      	nop
 81119c8:	10005000 	.word	0x10005000

081119cc <_malloc_r>:
 81119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81119d0:	1ccd      	adds	r5, r1, #3
 81119d2:	f025 0503 	bic.w	r5, r5, #3
 81119d6:	3508      	adds	r5, #8
 81119d8:	2d0c      	cmp	r5, #12
 81119da:	bf38      	it	cc
 81119dc:	250c      	movcc	r5, #12
 81119de:	2d00      	cmp	r5, #0
 81119e0:	4606      	mov	r6, r0
 81119e2:	db01      	blt.n	81119e8 <_malloc_r+0x1c>
 81119e4:	42a9      	cmp	r1, r5
 81119e6:	d904      	bls.n	81119f2 <_malloc_r+0x26>
 81119e8:	230c      	movs	r3, #12
 81119ea:	6033      	str	r3, [r6, #0]
 81119ec:	2000      	movs	r0, #0
 81119ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81119f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8111ac8 <_malloc_r+0xfc>
 81119f6:	f000 f869 	bl	8111acc <__malloc_lock>
 81119fa:	f8d8 3000 	ldr.w	r3, [r8]
 81119fe:	461c      	mov	r4, r3
 8111a00:	bb44      	cbnz	r4, 8111a54 <_malloc_r+0x88>
 8111a02:	4629      	mov	r1, r5
 8111a04:	4630      	mov	r0, r6
 8111a06:	f7ff ffbf 	bl	8111988 <sbrk_aligned>
 8111a0a:	1c43      	adds	r3, r0, #1
 8111a0c:	4604      	mov	r4, r0
 8111a0e:	d158      	bne.n	8111ac2 <_malloc_r+0xf6>
 8111a10:	f8d8 4000 	ldr.w	r4, [r8]
 8111a14:	4627      	mov	r7, r4
 8111a16:	2f00      	cmp	r7, #0
 8111a18:	d143      	bne.n	8111aa2 <_malloc_r+0xd6>
 8111a1a:	2c00      	cmp	r4, #0
 8111a1c:	d04b      	beq.n	8111ab6 <_malloc_r+0xea>
 8111a1e:	6823      	ldr	r3, [r4, #0]
 8111a20:	4639      	mov	r1, r7
 8111a22:	4630      	mov	r0, r6
 8111a24:	eb04 0903 	add.w	r9, r4, r3
 8111a28:	f001 f946 	bl	8112cb8 <_sbrk_r>
 8111a2c:	4581      	cmp	r9, r0
 8111a2e:	d142      	bne.n	8111ab6 <_malloc_r+0xea>
 8111a30:	6821      	ldr	r1, [r4, #0]
 8111a32:	1a6d      	subs	r5, r5, r1
 8111a34:	4629      	mov	r1, r5
 8111a36:	4630      	mov	r0, r6
 8111a38:	f7ff ffa6 	bl	8111988 <sbrk_aligned>
 8111a3c:	3001      	adds	r0, #1
 8111a3e:	d03a      	beq.n	8111ab6 <_malloc_r+0xea>
 8111a40:	6823      	ldr	r3, [r4, #0]
 8111a42:	442b      	add	r3, r5
 8111a44:	6023      	str	r3, [r4, #0]
 8111a46:	f8d8 3000 	ldr.w	r3, [r8]
 8111a4a:	685a      	ldr	r2, [r3, #4]
 8111a4c:	bb62      	cbnz	r2, 8111aa8 <_malloc_r+0xdc>
 8111a4e:	f8c8 7000 	str.w	r7, [r8]
 8111a52:	e00f      	b.n	8111a74 <_malloc_r+0xa8>
 8111a54:	6822      	ldr	r2, [r4, #0]
 8111a56:	1b52      	subs	r2, r2, r5
 8111a58:	d420      	bmi.n	8111a9c <_malloc_r+0xd0>
 8111a5a:	2a0b      	cmp	r2, #11
 8111a5c:	d917      	bls.n	8111a8e <_malloc_r+0xc2>
 8111a5e:	1961      	adds	r1, r4, r5
 8111a60:	42a3      	cmp	r3, r4
 8111a62:	6025      	str	r5, [r4, #0]
 8111a64:	bf18      	it	ne
 8111a66:	6059      	strne	r1, [r3, #4]
 8111a68:	6863      	ldr	r3, [r4, #4]
 8111a6a:	bf08      	it	eq
 8111a6c:	f8c8 1000 	streq.w	r1, [r8]
 8111a70:	5162      	str	r2, [r4, r5]
 8111a72:	604b      	str	r3, [r1, #4]
 8111a74:	4630      	mov	r0, r6
 8111a76:	f000 f82f 	bl	8111ad8 <__malloc_unlock>
 8111a7a:	f104 000b 	add.w	r0, r4, #11
 8111a7e:	1d23      	adds	r3, r4, #4
 8111a80:	f020 0007 	bic.w	r0, r0, #7
 8111a84:	1ac2      	subs	r2, r0, r3
 8111a86:	bf1c      	itt	ne
 8111a88:	1a1b      	subne	r3, r3, r0
 8111a8a:	50a3      	strne	r3, [r4, r2]
 8111a8c:	e7af      	b.n	81119ee <_malloc_r+0x22>
 8111a8e:	6862      	ldr	r2, [r4, #4]
 8111a90:	42a3      	cmp	r3, r4
 8111a92:	bf0c      	ite	eq
 8111a94:	f8c8 2000 	streq.w	r2, [r8]
 8111a98:	605a      	strne	r2, [r3, #4]
 8111a9a:	e7eb      	b.n	8111a74 <_malloc_r+0xa8>
 8111a9c:	4623      	mov	r3, r4
 8111a9e:	6864      	ldr	r4, [r4, #4]
 8111aa0:	e7ae      	b.n	8111a00 <_malloc_r+0x34>
 8111aa2:	463c      	mov	r4, r7
 8111aa4:	687f      	ldr	r7, [r7, #4]
 8111aa6:	e7b6      	b.n	8111a16 <_malloc_r+0x4a>
 8111aa8:	461a      	mov	r2, r3
 8111aaa:	685b      	ldr	r3, [r3, #4]
 8111aac:	42a3      	cmp	r3, r4
 8111aae:	d1fb      	bne.n	8111aa8 <_malloc_r+0xdc>
 8111ab0:	2300      	movs	r3, #0
 8111ab2:	6053      	str	r3, [r2, #4]
 8111ab4:	e7de      	b.n	8111a74 <_malloc_r+0xa8>
 8111ab6:	230c      	movs	r3, #12
 8111ab8:	6033      	str	r3, [r6, #0]
 8111aba:	4630      	mov	r0, r6
 8111abc:	f000 f80c 	bl	8111ad8 <__malloc_unlock>
 8111ac0:	e794      	b.n	81119ec <_malloc_r+0x20>
 8111ac2:	6005      	str	r5, [r0, #0]
 8111ac4:	e7d6      	b.n	8111a74 <_malloc_r+0xa8>
 8111ac6:	bf00      	nop
 8111ac8:	10005004 	.word	0x10005004

08111acc <__malloc_lock>:
 8111acc:	4801      	ldr	r0, [pc, #4]	@ (8111ad4 <__malloc_lock+0x8>)
 8111ace:	f001 b940 	b.w	8112d52 <__retarget_lock_acquire_recursive>
 8111ad2:	bf00      	nop
 8111ad4:	10005148 	.word	0x10005148

08111ad8 <__malloc_unlock>:
 8111ad8:	4801      	ldr	r0, [pc, #4]	@ (8111ae0 <__malloc_unlock+0x8>)
 8111ada:	f001 b93b 	b.w	8112d54 <__retarget_lock_release_recursive>
 8111ade:	bf00      	nop
 8111ae0:	10005148 	.word	0x10005148

08111ae4 <_strtol_l.constprop.0>:
 8111ae4:	2b24      	cmp	r3, #36	@ 0x24
 8111ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111aea:	4686      	mov	lr, r0
 8111aec:	4690      	mov	r8, r2
 8111aee:	d801      	bhi.n	8111af4 <_strtol_l.constprop.0+0x10>
 8111af0:	2b01      	cmp	r3, #1
 8111af2:	d106      	bne.n	8111b02 <_strtol_l.constprop.0+0x1e>
 8111af4:	f001 f902 	bl	8112cfc <__errno>
 8111af8:	2316      	movs	r3, #22
 8111afa:	6003      	str	r3, [r0, #0]
 8111afc:	2000      	movs	r0, #0
 8111afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111b02:	4834      	ldr	r0, [pc, #208]	@ (8111bd4 <_strtol_l.constprop.0+0xf0>)
 8111b04:	460d      	mov	r5, r1
 8111b06:	462a      	mov	r2, r5
 8111b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8111b0c:	5d06      	ldrb	r6, [r0, r4]
 8111b0e:	f016 0608 	ands.w	r6, r6, #8
 8111b12:	d1f8      	bne.n	8111b06 <_strtol_l.constprop.0+0x22>
 8111b14:	2c2d      	cmp	r4, #45	@ 0x2d
 8111b16:	d12d      	bne.n	8111b74 <_strtol_l.constprop.0+0x90>
 8111b18:	782c      	ldrb	r4, [r5, #0]
 8111b1a:	2601      	movs	r6, #1
 8111b1c:	1c95      	adds	r5, r2, #2
 8111b1e:	f033 0210 	bics.w	r2, r3, #16
 8111b22:	d109      	bne.n	8111b38 <_strtol_l.constprop.0+0x54>
 8111b24:	2c30      	cmp	r4, #48	@ 0x30
 8111b26:	d12a      	bne.n	8111b7e <_strtol_l.constprop.0+0x9a>
 8111b28:	782a      	ldrb	r2, [r5, #0]
 8111b2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8111b2e:	2a58      	cmp	r2, #88	@ 0x58
 8111b30:	d125      	bne.n	8111b7e <_strtol_l.constprop.0+0x9a>
 8111b32:	786c      	ldrb	r4, [r5, #1]
 8111b34:	2310      	movs	r3, #16
 8111b36:	3502      	adds	r5, #2
 8111b38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8111b3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8111b40:	2200      	movs	r2, #0
 8111b42:	fbbc f9f3 	udiv	r9, ip, r3
 8111b46:	4610      	mov	r0, r2
 8111b48:	fb03 ca19 	mls	sl, r3, r9, ip
 8111b4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8111b50:	2f09      	cmp	r7, #9
 8111b52:	d81b      	bhi.n	8111b8c <_strtol_l.constprop.0+0xa8>
 8111b54:	463c      	mov	r4, r7
 8111b56:	42a3      	cmp	r3, r4
 8111b58:	dd27      	ble.n	8111baa <_strtol_l.constprop.0+0xc6>
 8111b5a:	1c57      	adds	r7, r2, #1
 8111b5c:	d007      	beq.n	8111b6e <_strtol_l.constprop.0+0x8a>
 8111b5e:	4581      	cmp	r9, r0
 8111b60:	d320      	bcc.n	8111ba4 <_strtol_l.constprop.0+0xc0>
 8111b62:	d101      	bne.n	8111b68 <_strtol_l.constprop.0+0x84>
 8111b64:	45a2      	cmp	sl, r4
 8111b66:	db1d      	blt.n	8111ba4 <_strtol_l.constprop.0+0xc0>
 8111b68:	fb00 4003 	mla	r0, r0, r3, r4
 8111b6c:	2201      	movs	r2, #1
 8111b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8111b72:	e7eb      	b.n	8111b4c <_strtol_l.constprop.0+0x68>
 8111b74:	2c2b      	cmp	r4, #43	@ 0x2b
 8111b76:	bf04      	itt	eq
 8111b78:	782c      	ldrbeq	r4, [r5, #0]
 8111b7a:	1c95      	addeq	r5, r2, #2
 8111b7c:	e7cf      	b.n	8111b1e <_strtol_l.constprop.0+0x3a>
 8111b7e:	2b00      	cmp	r3, #0
 8111b80:	d1da      	bne.n	8111b38 <_strtol_l.constprop.0+0x54>
 8111b82:	2c30      	cmp	r4, #48	@ 0x30
 8111b84:	bf0c      	ite	eq
 8111b86:	2308      	moveq	r3, #8
 8111b88:	230a      	movne	r3, #10
 8111b8a:	e7d5      	b.n	8111b38 <_strtol_l.constprop.0+0x54>
 8111b8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8111b90:	2f19      	cmp	r7, #25
 8111b92:	d801      	bhi.n	8111b98 <_strtol_l.constprop.0+0xb4>
 8111b94:	3c37      	subs	r4, #55	@ 0x37
 8111b96:	e7de      	b.n	8111b56 <_strtol_l.constprop.0+0x72>
 8111b98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8111b9c:	2f19      	cmp	r7, #25
 8111b9e:	d804      	bhi.n	8111baa <_strtol_l.constprop.0+0xc6>
 8111ba0:	3c57      	subs	r4, #87	@ 0x57
 8111ba2:	e7d8      	b.n	8111b56 <_strtol_l.constprop.0+0x72>
 8111ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8111ba8:	e7e1      	b.n	8111b6e <_strtol_l.constprop.0+0x8a>
 8111baa:	1c53      	adds	r3, r2, #1
 8111bac:	d108      	bne.n	8111bc0 <_strtol_l.constprop.0+0xdc>
 8111bae:	2322      	movs	r3, #34	@ 0x22
 8111bb0:	f8ce 3000 	str.w	r3, [lr]
 8111bb4:	4660      	mov	r0, ip
 8111bb6:	f1b8 0f00 	cmp.w	r8, #0
 8111bba:	d0a0      	beq.n	8111afe <_strtol_l.constprop.0+0x1a>
 8111bbc:	1e69      	subs	r1, r5, #1
 8111bbe:	e006      	b.n	8111bce <_strtol_l.constprop.0+0xea>
 8111bc0:	b106      	cbz	r6, 8111bc4 <_strtol_l.constprop.0+0xe0>
 8111bc2:	4240      	negs	r0, r0
 8111bc4:	f1b8 0f00 	cmp.w	r8, #0
 8111bc8:	d099      	beq.n	8111afe <_strtol_l.constprop.0+0x1a>
 8111bca:	2a00      	cmp	r2, #0
 8111bcc:	d1f6      	bne.n	8111bbc <_strtol_l.constprop.0+0xd8>
 8111bce:	f8c8 1000 	str.w	r1, [r8]
 8111bd2:	e794      	b.n	8111afe <_strtol_l.constprop.0+0x1a>
 8111bd4:	08117537 	.word	0x08117537

08111bd8 <_strtol_r>:
 8111bd8:	f7ff bf84 	b.w	8111ae4 <_strtol_l.constprop.0>

08111bdc <strtol>:
 8111bdc:	4613      	mov	r3, r2
 8111bde:	460a      	mov	r2, r1
 8111be0:	4601      	mov	r1, r0
 8111be2:	4802      	ldr	r0, [pc, #8]	@ (8111bec <strtol+0x10>)
 8111be4:	6800      	ldr	r0, [r0, #0]
 8111be6:	f7ff bf7d 	b.w	8111ae4 <_strtol_l.constprop.0>
 8111bea:	bf00      	nop
 8111bec:	100000c8 	.word	0x100000c8

08111bf0 <__cvt>:
 8111bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8111bf4:	ec57 6b10 	vmov	r6, r7, d0
 8111bf8:	2f00      	cmp	r7, #0
 8111bfa:	460c      	mov	r4, r1
 8111bfc:	4619      	mov	r1, r3
 8111bfe:	463b      	mov	r3, r7
 8111c00:	bfbb      	ittet	lt
 8111c02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8111c06:	461f      	movlt	r7, r3
 8111c08:	2300      	movge	r3, #0
 8111c0a:	232d      	movlt	r3, #45	@ 0x2d
 8111c0c:	700b      	strb	r3, [r1, #0]
 8111c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8111c10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8111c14:	4691      	mov	r9, r2
 8111c16:	f023 0820 	bic.w	r8, r3, #32
 8111c1a:	bfbc      	itt	lt
 8111c1c:	4632      	movlt	r2, r6
 8111c1e:	4616      	movlt	r6, r2
 8111c20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8111c24:	d005      	beq.n	8111c32 <__cvt+0x42>
 8111c26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8111c2a:	d100      	bne.n	8111c2e <__cvt+0x3e>
 8111c2c:	3401      	adds	r4, #1
 8111c2e:	2102      	movs	r1, #2
 8111c30:	e000      	b.n	8111c34 <__cvt+0x44>
 8111c32:	2103      	movs	r1, #3
 8111c34:	ab03      	add	r3, sp, #12
 8111c36:	9301      	str	r3, [sp, #4]
 8111c38:	ab02      	add	r3, sp, #8
 8111c3a:	9300      	str	r3, [sp, #0]
 8111c3c:	ec47 6b10 	vmov	d0, r6, r7
 8111c40:	4653      	mov	r3, sl
 8111c42:	4622      	mov	r2, r4
 8111c44:	f001 f92c 	bl	8112ea0 <_dtoa_r>
 8111c48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8111c4c:	4605      	mov	r5, r0
 8111c4e:	d119      	bne.n	8111c84 <__cvt+0x94>
 8111c50:	f019 0f01 	tst.w	r9, #1
 8111c54:	d00e      	beq.n	8111c74 <__cvt+0x84>
 8111c56:	eb00 0904 	add.w	r9, r0, r4
 8111c5a:	2200      	movs	r2, #0
 8111c5c:	2300      	movs	r3, #0
 8111c5e:	4630      	mov	r0, r6
 8111c60:	4639      	mov	r1, r7
 8111c62:	f7ee ffc9 	bl	8100bf8 <__aeabi_dcmpeq>
 8111c66:	b108      	cbz	r0, 8111c6c <__cvt+0x7c>
 8111c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8111c6c:	2230      	movs	r2, #48	@ 0x30
 8111c6e:	9b03      	ldr	r3, [sp, #12]
 8111c70:	454b      	cmp	r3, r9
 8111c72:	d31e      	bcc.n	8111cb2 <__cvt+0xc2>
 8111c74:	9b03      	ldr	r3, [sp, #12]
 8111c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8111c78:	1b5b      	subs	r3, r3, r5
 8111c7a:	4628      	mov	r0, r5
 8111c7c:	6013      	str	r3, [r2, #0]
 8111c7e:	b004      	add	sp, #16
 8111c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8111c88:	eb00 0904 	add.w	r9, r0, r4
 8111c8c:	d1e5      	bne.n	8111c5a <__cvt+0x6a>
 8111c8e:	7803      	ldrb	r3, [r0, #0]
 8111c90:	2b30      	cmp	r3, #48	@ 0x30
 8111c92:	d10a      	bne.n	8111caa <__cvt+0xba>
 8111c94:	2200      	movs	r2, #0
 8111c96:	2300      	movs	r3, #0
 8111c98:	4630      	mov	r0, r6
 8111c9a:	4639      	mov	r1, r7
 8111c9c:	f7ee ffac 	bl	8100bf8 <__aeabi_dcmpeq>
 8111ca0:	b918      	cbnz	r0, 8111caa <__cvt+0xba>
 8111ca2:	f1c4 0401 	rsb	r4, r4, #1
 8111ca6:	f8ca 4000 	str.w	r4, [sl]
 8111caa:	f8da 3000 	ldr.w	r3, [sl]
 8111cae:	4499      	add	r9, r3
 8111cb0:	e7d3      	b.n	8111c5a <__cvt+0x6a>
 8111cb2:	1c59      	adds	r1, r3, #1
 8111cb4:	9103      	str	r1, [sp, #12]
 8111cb6:	701a      	strb	r2, [r3, #0]
 8111cb8:	e7d9      	b.n	8111c6e <__cvt+0x7e>

08111cba <__exponent>:
 8111cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8111cbc:	2900      	cmp	r1, #0
 8111cbe:	bfba      	itte	lt
 8111cc0:	4249      	neglt	r1, r1
 8111cc2:	232d      	movlt	r3, #45	@ 0x2d
 8111cc4:	232b      	movge	r3, #43	@ 0x2b
 8111cc6:	2909      	cmp	r1, #9
 8111cc8:	7002      	strb	r2, [r0, #0]
 8111cca:	7043      	strb	r3, [r0, #1]
 8111ccc:	dd29      	ble.n	8111d22 <__exponent+0x68>
 8111cce:	f10d 0307 	add.w	r3, sp, #7
 8111cd2:	461d      	mov	r5, r3
 8111cd4:	270a      	movs	r7, #10
 8111cd6:	461a      	mov	r2, r3
 8111cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8111cdc:	fb07 1416 	mls	r4, r7, r6, r1
 8111ce0:	3430      	adds	r4, #48	@ 0x30
 8111ce2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8111ce6:	460c      	mov	r4, r1
 8111ce8:	2c63      	cmp	r4, #99	@ 0x63
 8111cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8111cee:	4631      	mov	r1, r6
 8111cf0:	dcf1      	bgt.n	8111cd6 <__exponent+0x1c>
 8111cf2:	3130      	adds	r1, #48	@ 0x30
 8111cf4:	1e94      	subs	r4, r2, #2
 8111cf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8111cfa:	1c41      	adds	r1, r0, #1
 8111cfc:	4623      	mov	r3, r4
 8111cfe:	42ab      	cmp	r3, r5
 8111d00:	d30a      	bcc.n	8111d18 <__exponent+0x5e>
 8111d02:	f10d 0309 	add.w	r3, sp, #9
 8111d06:	1a9b      	subs	r3, r3, r2
 8111d08:	42ac      	cmp	r4, r5
 8111d0a:	bf88      	it	hi
 8111d0c:	2300      	movhi	r3, #0
 8111d0e:	3302      	adds	r3, #2
 8111d10:	4403      	add	r3, r0
 8111d12:	1a18      	subs	r0, r3, r0
 8111d14:	b003      	add	sp, #12
 8111d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8111d18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8111d1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8111d20:	e7ed      	b.n	8111cfe <__exponent+0x44>
 8111d22:	2330      	movs	r3, #48	@ 0x30
 8111d24:	3130      	adds	r1, #48	@ 0x30
 8111d26:	7083      	strb	r3, [r0, #2]
 8111d28:	70c1      	strb	r1, [r0, #3]
 8111d2a:	1d03      	adds	r3, r0, #4
 8111d2c:	e7f1      	b.n	8111d12 <__exponent+0x58>
	...

08111d30 <_printf_float>:
 8111d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111d34:	b08d      	sub	sp, #52	@ 0x34
 8111d36:	460c      	mov	r4, r1
 8111d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8111d3c:	4616      	mov	r6, r2
 8111d3e:	461f      	mov	r7, r3
 8111d40:	4605      	mov	r5, r0
 8111d42:	f000 ff81 	bl	8112c48 <_localeconv_r>
 8111d46:	6803      	ldr	r3, [r0, #0]
 8111d48:	9304      	str	r3, [sp, #16]
 8111d4a:	4618      	mov	r0, r3
 8111d4c:	f7ee fb28 	bl	81003a0 <strlen>
 8111d50:	2300      	movs	r3, #0
 8111d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8111d54:	f8d8 3000 	ldr.w	r3, [r8]
 8111d58:	9005      	str	r0, [sp, #20]
 8111d5a:	3307      	adds	r3, #7
 8111d5c:	f023 0307 	bic.w	r3, r3, #7
 8111d60:	f103 0208 	add.w	r2, r3, #8
 8111d64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8111d68:	f8d4 b000 	ldr.w	fp, [r4]
 8111d6c:	f8c8 2000 	str.w	r2, [r8]
 8111d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8111d74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8111d78:	9307      	str	r3, [sp, #28]
 8111d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8111d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8111d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111d86:	4b9c      	ldr	r3, [pc, #624]	@ (8111ff8 <_printf_float+0x2c8>)
 8111d88:	f04f 32ff 	mov.w	r2, #4294967295
 8111d8c:	f7ee ff66 	bl	8100c5c <__aeabi_dcmpun>
 8111d90:	bb70      	cbnz	r0, 8111df0 <_printf_float+0xc0>
 8111d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111d96:	4b98      	ldr	r3, [pc, #608]	@ (8111ff8 <_printf_float+0x2c8>)
 8111d98:	f04f 32ff 	mov.w	r2, #4294967295
 8111d9c:	f7ee ff40 	bl	8100c20 <__aeabi_dcmple>
 8111da0:	bb30      	cbnz	r0, 8111df0 <_printf_float+0xc0>
 8111da2:	2200      	movs	r2, #0
 8111da4:	2300      	movs	r3, #0
 8111da6:	4640      	mov	r0, r8
 8111da8:	4649      	mov	r1, r9
 8111daa:	f7ee ff2f 	bl	8100c0c <__aeabi_dcmplt>
 8111dae:	b110      	cbz	r0, 8111db6 <_printf_float+0x86>
 8111db0:	232d      	movs	r3, #45	@ 0x2d
 8111db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111db6:	4a91      	ldr	r2, [pc, #580]	@ (8111ffc <_printf_float+0x2cc>)
 8111db8:	4b91      	ldr	r3, [pc, #580]	@ (8112000 <_printf_float+0x2d0>)
 8111dba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8111dbe:	bf94      	ite	ls
 8111dc0:	4690      	movls	r8, r2
 8111dc2:	4698      	movhi	r8, r3
 8111dc4:	2303      	movs	r3, #3
 8111dc6:	6123      	str	r3, [r4, #16]
 8111dc8:	f02b 0304 	bic.w	r3, fp, #4
 8111dcc:	6023      	str	r3, [r4, #0]
 8111dce:	f04f 0900 	mov.w	r9, #0
 8111dd2:	9700      	str	r7, [sp, #0]
 8111dd4:	4633      	mov	r3, r6
 8111dd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8111dd8:	4621      	mov	r1, r4
 8111dda:	4628      	mov	r0, r5
 8111ddc:	f000 f9d2 	bl	8112184 <_printf_common>
 8111de0:	3001      	adds	r0, #1
 8111de2:	f040 808d 	bne.w	8111f00 <_printf_float+0x1d0>
 8111de6:	f04f 30ff 	mov.w	r0, #4294967295
 8111dea:	b00d      	add	sp, #52	@ 0x34
 8111dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111df0:	4642      	mov	r2, r8
 8111df2:	464b      	mov	r3, r9
 8111df4:	4640      	mov	r0, r8
 8111df6:	4649      	mov	r1, r9
 8111df8:	f7ee ff30 	bl	8100c5c <__aeabi_dcmpun>
 8111dfc:	b140      	cbz	r0, 8111e10 <_printf_float+0xe0>
 8111dfe:	464b      	mov	r3, r9
 8111e00:	2b00      	cmp	r3, #0
 8111e02:	bfbc      	itt	lt
 8111e04:	232d      	movlt	r3, #45	@ 0x2d
 8111e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8111e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8112004 <_printf_float+0x2d4>)
 8111e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8112008 <_printf_float+0x2d8>)
 8111e0e:	e7d4      	b.n	8111dba <_printf_float+0x8a>
 8111e10:	6863      	ldr	r3, [r4, #4]
 8111e12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8111e16:	9206      	str	r2, [sp, #24]
 8111e18:	1c5a      	adds	r2, r3, #1
 8111e1a:	d13b      	bne.n	8111e94 <_printf_float+0x164>
 8111e1c:	2306      	movs	r3, #6
 8111e1e:	6063      	str	r3, [r4, #4]
 8111e20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8111e24:	2300      	movs	r3, #0
 8111e26:	6022      	str	r2, [r4, #0]
 8111e28:	9303      	str	r3, [sp, #12]
 8111e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8111e2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8111e30:	ab09      	add	r3, sp, #36	@ 0x24
 8111e32:	9300      	str	r3, [sp, #0]
 8111e34:	6861      	ldr	r1, [r4, #4]
 8111e36:	ec49 8b10 	vmov	d0, r8, r9
 8111e3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8111e3e:	4628      	mov	r0, r5
 8111e40:	f7ff fed6 	bl	8111bf0 <__cvt>
 8111e44:	9b06      	ldr	r3, [sp, #24]
 8111e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8111e48:	2b47      	cmp	r3, #71	@ 0x47
 8111e4a:	4680      	mov	r8, r0
 8111e4c:	d129      	bne.n	8111ea2 <_printf_float+0x172>
 8111e4e:	1cc8      	adds	r0, r1, #3
 8111e50:	db02      	blt.n	8111e58 <_printf_float+0x128>
 8111e52:	6863      	ldr	r3, [r4, #4]
 8111e54:	4299      	cmp	r1, r3
 8111e56:	dd41      	ble.n	8111edc <_printf_float+0x1ac>
 8111e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8111e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8111e60:	3901      	subs	r1, #1
 8111e62:	4652      	mov	r2, sl
 8111e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8111e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8111e6a:	f7ff ff26 	bl	8111cba <__exponent>
 8111e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8111e70:	1813      	adds	r3, r2, r0
 8111e72:	2a01      	cmp	r2, #1
 8111e74:	4681      	mov	r9, r0
 8111e76:	6123      	str	r3, [r4, #16]
 8111e78:	dc02      	bgt.n	8111e80 <_printf_float+0x150>
 8111e7a:	6822      	ldr	r2, [r4, #0]
 8111e7c:	07d2      	lsls	r2, r2, #31
 8111e7e:	d501      	bpl.n	8111e84 <_printf_float+0x154>
 8111e80:	3301      	adds	r3, #1
 8111e82:	6123      	str	r3, [r4, #16]
 8111e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8111e88:	2b00      	cmp	r3, #0
 8111e8a:	d0a2      	beq.n	8111dd2 <_printf_float+0xa2>
 8111e8c:	232d      	movs	r3, #45	@ 0x2d
 8111e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111e92:	e79e      	b.n	8111dd2 <_printf_float+0xa2>
 8111e94:	9a06      	ldr	r2, [sp, #24]
 8111e96:	2a47      	cmp	r2, #71	@ 0x47
 8111e98:	d1c2      	bne.n	8111e20 <_printf_float+0xf0>
 8111e9a:	2b00      	cmp	r3, #0
 8111e9c:	d1c0      	bne.n	8111e20 <_printf_float+0xf0>
 8111e9e:	2301      	movs	r3, #1
 8111ea0:	e7bd      	b.n	8111e1e <_printf_float+0xee>
 8111ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8111ea6:	d9db      	bls.n	8111e60 <_printf_float+0x130>
 8111ea8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8111eac:	d118      	bne.n	8111ee0 <_printf_float+0x1b0>
 8111eae:	2900      	cmp	r1, #0
 8111eb0:	6863      	ldr	r3, [r4, #4]
 8111eb2:	dd0b      	ble.n	8111ecc <_printf_float+0x19c>
 8111eb4:	6121      	str	r1, [r4, #16]
 8111eb6:	b913      	cbnz	r3, 8111ebe <_printf_float+0x18e>
 8111eb8:	6822      	ldr	r2, [r4, #0]
 8111eba:	07d0      	lsls	r0, r2, #31
 8111ebc:	d502      	bpl.n	8111ec4 <_printf_float+0x194>
 8111ebe:	3301      	adds	r3, #1
 8111ec0:	440b      	add	r3, r1
 8111ec2:	6123      	str	r3, [r4, #16]
 8111ec4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8111ec6:	f04f 0900 	mov.w	r9, #0
 8111eca:	e7db      	b.n	8111e84 <_printf_float+0x154>
 8111ecc:	b913      	cbnz	r3, 8111ed4 <_printf_float+0x1a4>
 8111ece:	6822      	ldr	r2, [r4, #0]
 8111ed0:	07d2      	lsls	r2, r2, #31
 8111ed2:	d501      	bpl.n	8111ed8 <_printf_float+0x1a8>
 8111ed4:	3302      	adds	r3, #2
 8111ed6:	e7f4      	b.n	8111ec2 <_printf_float+0x192>
 8111ed8:	2301      	movs	r3, #1
 8111eda:	e7f2      	b.n	8111ec2 <_printf_float+0x192>
 8111edc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8111ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8111ee2:	4299      	cmp	r1, r3
 8111ee4:	db05      	blt.n	8111ef2 <_printf_float+0x1c2>
 8111ee6:	6823      	ldr	r3, [r4, #0]
 8111ee8:	6121      	str	r1, [r4, #16]
 8111eea:	07d8      	lsls	r0, r3, #31
 8111eec:	d5ea      	bpl.n	8111ec4 <_printf_float+0x194>
 8111eee:	1c4b      	adds	r3, r1, #1
 8111ef0:	e7e7      	b.n	8111ec2 <_printf_float+0x192>
 8111ef2:	2900      	cmp	r1, #0
 8111ef4:	bfd4      	ite	le
 8111ef6:	f1c1 0202 	rsble	r2, r1, #2
 8111efa:	2201      	movgt	r2, #1
 8111efc:	4413      	add	r3, r2
 8111efe:	e7e0      	b.n	8111ec2 <_printf_float+0x192>
 8111f00:	6823      	ldr	r3, [r4, #0]
 8111f02:	055a      	lsls	r2, r3, #21
 8111f04:	d407      	bmi.n	8111f16 <_printf_float+0x1e6>
 8111f06:	6923      	ldr	r3, [r4, #16]
 8111f08:	4642      	mov	r2, r8
 8111f0a:	4631      	mov	r1, r6
 8111f0c:	4628      	mov	r0, r5
 8111f0e:	47b8      	blx	r7
 8111f10:	3001      	adds	r0, #1
 8111f12:	d12b      	bne.n	8111f6c <_printf_float+0x23c>
 8111f14:	e767      	b.n	8111de6 <_printf_float+0xb6>
 8111f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8111f1a:	f240 80dd 	bls.w	81120d8 <_printf_float+0x3a8>
 8111f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8111f22:	2200      	movs	r2, #0
 8111f24:	2300      	movs	r3, #0
 8111f26:	f7ee fe67 	bl	8100bf8 <__aeabi_dcmpeq>
 8111f2a:	2800      	cmp	r0, #0
 8111f2c:	d033      	beq.n	8111f96 <_printf_float+0x266>
 8111f2e:	4a37      	ldr	r2, [pc, #220]	@ (811200c <_printf_float+0x2dc>)
 8111f30:	2301      	movs	r3, #1
 8111f32:	4631      	mov	r1, r6
 8111f34:	4628      	mov	r0, r5
 8111f36:	47b8      	blx	r7
 8111f38:	3001      	adds	r0, #1
 8111f3a:	f43f af54 	beq.w	8111de6 <_printf_float+0xb6>
 8111f3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8111f42:	4543      	cmp	r3, r8
 8111f44:	db02      	blt.n	8111f4c <_printf_float+0x21c>
 8111f46:	6823      	ldr	r3, [r4, #0]
 8111f48:	07d8      	lsls	r0, r3, #31
 8111f4a:	d50f      	bpl.n	8111f6c <_printf_float+0x23c>
 8111f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8111f50:	4631      	mov	r1, r6
 8111f52:	4628      	mov	r0, r5
 8111f54:	47b8      	blx	r7
 8111f56:	3001      	adds	r0, #1
 8111f58:	f43f af45 	beq.w	8111de6 <_printf_float+0xb6>
 8111f5c:	f04f 0900 	mov.w	r9, #0
 8111f60:	f108 38ff 	add.w	r8, r8, #4294967295
 8111f64:	f104 0a1a 	add.w	sl, r4, #26
 8111f68:	45c8      	cmp	r8, r9
 8111f6a:	dc09      	bgt.n	8111f80 <_printf_float+0x250>
 8111f6c:	6823      	ldr	r3, [r4, #0]
 8111f6e:	079b      	lsls	r3, r3, #30
 8111f70:	f100 8103 	bmi.w	811217a <_printf_float+0x44a>
 8111f74:	68e0      	ldr	r0, [r4, #12]
 8111f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111f78:	4298      	cmp	r0, r3
 8111f7a:	bfb8      	it	lt
 8111f7c:	4618      	movlt	r0, r3
 8111f7e:	e734      	b.n	8111dea <_printf_float+0xba>
 8111f80:	2301      	movs	r3, #1
 8111f82:	4652      	mov	r2, sl
 8111f84:	4631      	mov	r1, r6
 8111f86:	4628      	mov	r0, r5
 8111f88:	47b8      	blx	r7
 8111f8a:	3001      	adds	r0, #1
 8111f8c:	f43f af2b 	beq.w	8111de6 <_printf_float+0xb6>
 8111f90:	f109 0901 	add.w	r9, r9, #1
 8111f94:	e7e8      	b.n	8111f68 <_printf_float+0x238>
 8111f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111f98:	2b00      	cmp	r3, #0
 8111f9a:	dc39      	bgt.n	8112010 <_printf_float+0x2e0>
 8111f9c:	4a1b      	ldr	r2, [pc, #108]	@ (811200c <_printf_float+0x2dc>)
 8111f9e:	2301      	movs	r3, #1
 8111fa0:	4631      	mov	r1, r6
 8111fa2:	4628      	mov	r0, r5
 8111fa4:	47b8      	blx	r7
 8111fa6:	3001      	adds	r0, #1
 8111fa8:	f43f af1d 	beq.w	8111de6 <_printf_float+0xb6>
 8111fac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8111fb0:	ea59 0303 	orrs.w	r3, r9, r3
 8111fb4:	d102      	bne.n	8111fbc <_printf_float+0x28c>
 8111fb6:	6823      	ldr	r3, [r4, #0]
 8111fb8:	07d9      	lsls	r1, r3, #31
 8111fba:	d5d7      	bpl.n	8111f6c <_printf_float+0x23c>
 8111fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8111fc0:	4631      	mov	r1, r6
 8111fc2:	4628      	mov	r0, r5
 8111fc4:	47b8      	blx	r7
 8111fc6:	3001      	adds	r0, #1
 8111fc8:	f43f af0d 	beq.w	8111de6 <_printf_float+0xb6>
 8111fcc:	f04f 0a00 	mov.w	sl, #0
 8111fd0:	f104 0b1a 	add.w	fp, r4, #26
 8111fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111fd6:	425b      	negs	r3, r3
 8111fd8:	4553      	cmp	r3, sl
 8111fda:	dc01      	bgt.n	8111fe0 <_printf_float+0x2b0>
 8111fdc:	464b      	mov	r3, r9
 8111fde:	e793      	b.n	8111f08 <_printf_float+0x1d8>
 8111fe0:	2301      	movs	r3, #1
 8111fe2:	465a      	mov	r2, fp
 8111fe4:	4631      	mov	r1, r6
 8111fe6:	4628      	mov	r0, r5
 8111fe8:	47b8      	blx	r7
 8111fea:	3001      	adds	r0, #1
 8111fec:	f43f aefb 	beq.w	8111de6 <_printf_float+0xb6>
 8111ff0:	f10a 0a01 	add.w	sl, sl, #1
 8111ff4:	e7ee      	b.n	8111fd4 <_printf_float+0x2a4>
 8111ff6:	bf00      	nop
 8111ff8:	7fefffff 	.word	0x7fefffff
 8111ffc:	08117637 	.word	0x08117637
 8112000:	0811763b 	.word	0x0811763b
 8112004:	0811763f 	.word	0x0811763f
 8112008:	08117643 	.word	0x08117643
 811200c:	08117647 	.word	0x08117647
 8112010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8112012:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8112016:	4553      	cmp	r3, sl
 8112018:	bfa8      	it	ge
 811201a:	4653      	movge	r3, sl
 811201c:	2b00      	cmp	r3, #0
 811201e:	4699      	mov	r9, r3
 8112020:	dc36      	bgt.n	8112090 <_printf_float+0x360>
 8112022:	f04f 0b00 	mov.w	fp, #0
 8112026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811202a:	f104 021a 	add.w	r2, r4, #26
 811202e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8112030:	9306      	str	r3, [sp, #24]
 8112032:	eba3 0309 	sub.w	r3, r3, r9
 8112036:	455b      	cmp	r3, fp
 8112038:	dc31      	bgt.n	811209e <_printf_float+0x36e>
 811203a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811203c:	459a      	cmp	sl, r3
 811203e:	dc3a      	bgt.n	81120b6 <_printf_float+0x386>
 8112040:	6823      	ldr	r3, [r4, #0]
 8112042:	07da      	lsls	r2, r3, #31
 8112044:	d437      	bmi.n	81120b6 <_printf_float+0x386>
 8112046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112048:	ebaa 0903 	sub.w	r9, sl, r3
 811204c:	9b06      	ldr	r3, [sp, #24]
 811204e:	ebaa 0303 	sub.w	r3, sl, r3
 8112052:	4599      	cmp	r9, r3
 8112054:	bfa8      	it	ge
 8112056:	4699      	movge	r9, r3
 8112058:	f1b9 0f00 	cmp.w	r9, #0
 811205c:	dc33      	bgt.n	81120c6 <_printf_float+0x396>
 811205e:	f04f 0800 	mov.w	r8, #0
 8112062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8112066:	f104 0b1a 	add.w	fp, r4, #26
 811206a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811206c:	ebaa 0303 	sub.w	r3, sl, r3
 8112070:	eba3 0309 	sub.w	r3, r3, r9
 8112074:	4543      	cmp	r3, r8
 8112076:	f77f af79 	ble.w	8111f6c <_printf_float+0x23c>
 811207a:	2301      	movs	r3, #1
 811207c:	465a      	mov	r2, fp
 811207e:	4631      	mov	r1, r6
 8112080:	4628      	mov	r0, r5
 8112082:	47b8      	blx	r7
 8112084:	3001      	adds	r0, #1
 8112086:	f43f aeae 	beq.w	8111de6 <_printf_float+0xb6>
 811208a:	f108 0801 	add.w	r8, r8, #1
 811208e:	e7ec      	b.n	811206a <_printf_float+0x33a>
 8112090:	4642      	mov	r2, r8
 8112092:	4631      	mov	r1, r6
 8112094:	4628      	mov	r0, r5
 8112096:	47b8      	blx	r7
 8112098:	3001      	adds	r0, #1
 811209a:	d1c2      	bne.n	8112022 <_printf_float+0x2f2>
 811209c:	e6a3      	b.n	8111de6 <_printf_float+0xb6>
 811209e:	2301      	movs	r3, #1
 81120a0:	4631      	mov	r1, r6
 81120a2:	4628      	mov	r0, r5
 81120a4:	9206      	str	r2, [sp, #24]
 81120a6:	47b8      	blx	r7
 81120a8:	3001      	adds	r0, #1
 81120aa:	f43f ae9c 	beq.w	8111de6 <_printf_float+0xb6>
 81120ae:	9a06      	ldr	r2, [sp, #24]
 81120b0:	f10b 0b01 	add.w	fp, fp, #1
 81120b4:	e7bb      	b.n	811202e <_printf_float+0x2fe>
 81120b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81120ba:	4631      	mov	r1, r6
 81120bc:	4628      	mov	r0, r5
 81120be:	47b8      	blx	r7
 81120c0:	3001      	adds	r0, #1
 81120c2:	d1c0      	bne.n	8112046 <_printf_float+0x316>
 81120c4:	e68f      	b.n	8111de6 <_printf_float+0xb6>
 81120c6:	9a06      	ldr	r2, [sp, #24]
 81120c8:	464b      	mov	r3, r9
 81120ca:	4442      	add	r2, r8
 81120cc:	4631      	mov	r1, r6
 81120ce:	4628      	mov	r0, r5
 81120d0:	47b8      	blx	r7
 81120d2:	3001      	adds	r0, #1
 81120d4:	d1c3      	bne.n	811205e <_printf_float+0x32e>
 81120d6:	e686      	b.n	8111de6 <_printf_float+0xb6>
 81120d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81120dc:	f1ba 0f01 	cmp.w	sl, #1
 81120e0:	dc01      	bgt.n	81120e6 <_printf_float+0x3b6>
 81120e2:	07db      	lsls	r3, r3, #31
 81120e4:	d536      	bpl.n	8112154 <_printf_float+0x424>
 81120e6:	2301      	movs	r3, #1
 81120e8:	4642      	mov	r2, r8
 81120ea:	4631      	mov	r1, r6
 81120ec:	4628      	mov	r0, r5
 81120ee:	47b8      	blx	r7
 81120f0:	3001      	adds	r0, #1
 81120f2:	f43f ae78 	beq.w	8111de6 <_printf_float+0xb6>
 81120f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81120fa:	4631      	mov	r1, r6
 81120fc:	4628      	mov	r0, r5
 81120fe:	47b8      	blx	r7
 8112100:	3001      	adds	r0, #1
 8112102:	f43f ae70 	beq.w	8111de6 <_printf_float+0xb6>
 8112106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 811210a:	2200      	movs	r2, #0
 811210c:	2300      	movs	r3, #0
 811210e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8112112:	f7ee fd71 	bl	8100bf8 <__aeabi_dcmpeq>
 8112116:	b9c0      	cbnz	r0, 811214a <_printf_float+0x41a>
 8112118:	4653      	mov	r3, sl
 811211a:	f108 0201 	add.w	r2, r8, #1
 811211e:	4631      	mov	r1, r6
 8112120:	4628      	mov	r0, r5
 8112122:	47b8      	blx	r7
 8112124:	3001      	adds	r0, #1
 8112126:	d10c      	bne.n	8112142 <_printf_float+0x412>
 8112128:	e65d      	b.n	8111de6 <_printf_float+0xb6>
 811212a:	2301      	movs	r3, #1
 811212c:	465a      	mov	r2, fp
 811212e:	4631      	mov	r1, r6
 8112130:	4628      	mov	r0, r5
 8112132:	47b8      	blx	r7
 8112134:	3001      	adds	r0, #1
 8112136:	f43f ae56 	beq.w	8111de6 <_printf_float+0xb6>
 811213a:	f108 0801 	add.w	r8, r8, #1
 811213e:	45d0      	cmp	r8, sl
 8112140:	dbf3      	blt.n	811212a <_printf_float+0x3fa>
 8112142:	464b      	mov	r3, r9
 8112144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8112148:	e6df      	b.n	8111f0a <_printf_float+0x1da>
 811214a:	f04f 0800 	mov.w	r8, #0
 811214e:	f104 0b1a 	add.w	fp, r4, #26
 8112152:	e7f4      	b.n	811213e <_printf_float+0x40e>
 8112154:	2301      	movs	r3, #1
 8112156:	4642      	mov	r2, r8
 8112158:	e7e1      	b.n	811211e <_printf_float+0x3ee>
 811215a:	2301      	movs	r3, #1
 811215c:	464a      	mov	r2, r9
 811215e:	4631      	mov	r1, r6
 8112160:	4628      	mov	r0, r5
 8112162:	47b8      	blx	r7
 8112164:	3001      	adds	r0, #1
 8112166:	f43f ae3e 	beq.w	8111de6 <_printf_float+0xb6>
 811216a:	f108 0801 	add.w	r8, r8, #1
 811216e:	68e3      	ldr	r3, [r4, #12]
 8112170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8112172:	1a5b      	subs	r3, r3, r1
 8112174:	4543      	cmp	r3, r8
 8112176:	dcf0      	bgt.n	811215a <_printf_float+0x42a>
 8112178:	e6fc      	b.n	8111f74 <_printf_float+0x244>
 811217a:	f04f 0800 	mov.w	r8, #0
 811217e:	f104 0919 	add.w	r9, r4, #25
 8112182:	e7f4      	b.n	811216e <_printf_float+0x43e>

08112184 <_printf_common>:
 8112184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112188:	4616      	mov	r6, r2
 811218a:	4698      	mov	r8, r3
 811218c:	688a      	ldr	r2, [r1, #8]
 811218e:	690b      	ldr	r3, [r1, #16]
 8112190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8112194:	4293      	cmp	r3, r2
 8112196:	bfb8      	it	lt
 8112198:	4613      	movlt	r3, r2
 811219a:	6033      	str	r3, [r6, #0]
 811219c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 81121a0:	4607      	mov	r7, r0
 81121a2:	460c      	mov	r4, r1
 81121a4:	b10a      	cbz	r2, 81121aa <_printf_common+0x26>
 81121a6:	3301      	adds	r3, #1
 81121a8:	6033      	str	r3, [r6, #0]
 81121aa:	6823      	ldr	r3, [r4, #0]
 81121ac:	0699      	lsls	r1, r3, #26
 81121ae:	bf42      	ittt	mi
 81121b0:	6833      	ldrmi	r3, [r6, #0]
 81121b2:	3302      	addmi	r3, #2
 81121b4:	6033      	strmi	r3, [r6, #0]
 81121b6:	6825      	ldr	r5, [r4, #0]
 81121b8:	f015 0506 	ands.w	r5, r5, #6
 81121bc:	d106      	bne.n	81121cc <_printf_common+0x48>
 81121be:	f104 0a19 	add.w	sl, r4, #25
 81121c2:	68e3      	ldr	r3, [r4, #12]
 81121c4:	6832      	ldr	r2, [r6, #0]
 81121c6:	1a9b      	subs	r3, r3, r2
 81121c8:	42ab      	cmp	r3, r5
 81121ca:	dc26      	bgt.n	811221a <_printf_common+0x96>
 81121cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81121d0:	6822      	ldr	r2, [r4, #0]
 81121d2:	3b00      	subs	r3, #0
 81121d4:	bf18      	it	ne
 81121d6:	2301      	movne	r3, #1
 81121d8:	0692      	lsls	r2, r2, #26
 81121da:	d42b      	bmi.n	8112234 <_printf_common+0xb0>
 81121dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81121e0:	4641      	mov	r1, r8
 81121e2:	4638      	mov	r0, r7
 81121e4:	47c8      	blx	r9
 81121e6:	3001      	adds	r0, #1
 81121e8:	d01e      	beq.n	8112228 <_printf_common+0xa4>
 81121ea:	6823      	ldr	r3, [r4, #0]
 81121ec:	6922      	ldr	r2, [r4, #16]
 81121ee:	f003 0306 	and.w	r3, r3, #6
 81121f2:	2b04      	cmp	r3, #4
 81121f4:	bf02      	ittt	eq
 81121f6:	68e5      	ldreq	r5, [r4, #12]
 81121f8:	6833      	ldreq	r3, [r6, #0]
 81121fa:	1aed      	subeq	r5, r5, r3
 81121fc:	68a3      	ldr	r3, [r4, #8]
 81121fe:	bf0c      	ite	eq
 8112200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8112204:	2500      	movne	r5, #0
 8112206:	4293      	cmp	r3, r2
 8112208:	bfc4      	itt	gt
 811220a:	1a9b      	subgt	r3, r3, r2
 811220c:	18ed      	addgt	r5, r5, r3
 811220e:	2600      	movs	r6, #0
 8112210:	341a      	adds	r4, #26
 8112212:	42b5      	cmp	r5, r6
 8112214:	d11a      	bne.n	811224c <_printf_common+0xc8>
 8112216:	2000      	movs	r0, #0
 8112218:	e008      	b.n	811222c <_printf_common+0xa8>
 811221a:	2301      	movs	r3, #1
 811221c:	4652      	mov	r2, sl
 811221e:	4641      	mov	r1, r8
 8112220:	4638      	mov	r0, r7
 8112222:	47c8      	blx	r9
 8112224:	3001      	adds	r0, #1
 8112226:	d103      	bne.n	8112230 <_printf_common+0xac>
 8112228:	f04f 30ff 	mov.w	r0, #4294967295
 811222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112230:	3501      	adds	r5, #1
 8112232:	e7c6      	b.n	81121c2 <_printf_common+0x3e>
 8112234:	18e1      	adds	r1, r4, r3
 8112236:	1c5a      	adds	r2, r3, #1
 8112238:	2030      	movs	r0, #48	@ 0x30
 811223a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 811223e:	4422      	add	r2, r4
 8112240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8112244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8112248:	3302      	adds	r3, #2
 811224a:	e7c7      	b.n	81121dc <_printf_common+0x58>
 811224c:	2301      	movs	r3, #1
 811224e:	4622      	mov	r2, r4
 8112250:	4641      	mov	r1, r8
 8112252:	4638      	mov	r0, r7
 8112254:	47c8      	blx	r9
 8112256:	3001      	adds	r0, #1
 8112258:	d0e6      	beq.n	8112228 <_printf_common+0xa4>
 811225a:	3601      	adds	r6, #1
 811225c:	e7d9      	b.n	8112212 <_printf_common+0x8e>
	...

08112260 <_printf_i>:
 8112260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8112264:	7e0f      	ldrb	r7, [r1, #24]
 8112266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8112268:	2f78      	cmp	r7, #120	@ 0x78
 811226a:	4691      	mov	r9, r2
 811226c:	4680      	mov	r8, r0
 811226e:	460c      	mov	r4, r1
 8112270:	469a      	mov	sl, r3
 8112272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8112276:	d807      	bhi.n	8112288 <_printf_i+0x28>
 8112278:	2f62      	cmp	r7, #98	@ 0x62
 811227a:	d80a      	bhi.n	8112292 <_printf_i+0x32>
 811227c:	2f00      	cmp	r7, #0
 811227e:	f000 80d2 	beq.w	8112426 <_printf_i+0x1c6>
 8112282:	2f58      	cmp	r7, #88	@ 0x58
 8112284:	f000 80b9 	beq.w	81123fa <_printf_i+0x19a>
 8112288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811228c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8112290:	e03a      	b.n	8112308 <_printf_i+0xa8>
 8112292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8112296:	2b15      	cmp	r3, #21
 8112298:	d8f6      	bhi.n	8112288 <_printf_i+0x28>
 811229a:	a101      	add	r1, pc, #4	@ (adr r1, 81122a0 <_printf_i+0x40>)
 811229c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81122a0:	081122f9 	.word	0x081122f9
 81122a4:	0811230d 	.word	0x0811230d
 81122a8:	08112289 	.word	0x08112289
 81122ac:	08112289 	.word	0x08112289
 81122b0:	08112289 	.word	0x08112289
 81122b4:	08112289 	.word	0x08112289
 81122b8:	0811230d 	.word	0x0811230d
 81122bc:	08112289 	.word	0x08112289
 81122c0:	08112289 	.word	0x08112289
 81122c4:	08112289 	.word	0x08112289
 81122c8:	08112289 	.word	0x08112289
 81122cc:	0811240d 	.word	0x0811240d
 81122d0:	08112337 	.word	0x08112337
 81122d4:	081123c7 	.word	0x081123c7
 81122d8:	08112289 	.word	0x08112289
 81122dc:	08112289 	.word	0x08112289
 81122e0:	0811242f 	.word	0x0811242f
 81122e4:	08112289 	.word	0x08112289
 81122e8:	08112337 	.word	0x08112337
 81122ec:	08112289 	.word	0x08112289
 81122f0:	08112289 	.word	0x08112289
 81122f4:	081123cf 	.word	0x081123cf
 81122f8:	6833      	ldr	r3, [r6, #0]
 81122fa:	1d1a      	adds	r2, r3, #4
 81122fc:	681b      	ldr	r3, [r3, #0]
 81122fe:	6032      	str	r2, [r6, #0]
 8112300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8112304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8112308:	2301      	movs	r3, #1
 811230a:	e09d      	b.n	8112448 <_printf_i+0x1e8>
 811230c:	6833      	ldr	r3, [r6, #0]
 811230e:	6820      	ldr	r0, [r4, #0]
 8112310:	1d19      	adds	r1, r3, #4
 8112312:	6031      	str	r1, [r6, #0]
 8112314:	0606      	lsls	r6, r0, #24
 8112316:	d501      	bpl.n	811231c <_printf_i+0xbc>
 8112318:	681d      	ldr	r5, [r3, #0]
 811231a:	e003      	b.n	8112324 <_printf_i+0xc4>
 811231c:	0645      	lsls	r5, r0, #25
 811231e:	d5fb      	bpl.n	8112318 <_printf_i+0xb8>
 8112320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8112324:	2d00      	cmp	r5, #0
 8112326:	da03      	bge.n	8112330 <_printf_i+0xd0>
 8112328:	232d      	movs	r3, #45	@ 0x2d
 811232a:	426d      	negs	r5, r5
 811232c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8112330:	4859      	ldr	r0, [pc, #356]	@ (8112498 <_printf_i+0x238>)
 8112332:	230a      	movs	r3, #10
 8112334:	e011      	b.n	811235a <_printf_i+0xfa>
 8112336:	6821      	ldr	r1, [r4, #0]
 8112338:	6833      	ldr	r3, [r6, #0]
 811233a:	0608      	lsls	r0, r1, #24
 811233c:	f853 5b04 	ldr.w	r5, [r3], #4
 8112340:	d402      	bmi.n	8112348 <_printf_i+0xe8>
 8112342:	0649      	lsls	r1, r1, #25
 8112344:	bf48      	it	mi
 8112346:	b2ad      	uxthmi	r5, r5
 8112348:	2f6f      	cmp	r7, #111	@ 0x6f
 811234a:	4853      	ldr	r0, [pc, #332]	@ (8112498 <_printf_i+0x238>)
 811234c:	6033      	str	r3, [r6, #0]
 811234e:	bf14      	ite	ne
 8112350:	230a      	movne	r3, #10
 8112352:	2308      	moveq	r3, #8
 8112354:	2100      	movs	r1, #0
 8112356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 811235a:	6866      	ldr	r6, [r4, #4]
 811235c:	60a6      	str	r6, [r4, #8]
 811235e:	2e00      	cmp	r6, #0
 8112360:	bfa2      	ittt	ge
 8112362:	6821      	ldrge	r1, [r4, #0]
 8112364:	f021 0104 	bicge.w	r1, r1, #4
 8112368:	6021      	strge	r1, [r4, #0]
 811236a:	b90d      	cbnz	r5, 8112370 <_printf_i+0x110>
 811236c:	2e00      	cmp	r6, #0
 811236e:	d04b      	beq.n	8112408 <_printf_i+0x1a8>
 8112370:	4616      	mov	r6, r2
 8112372:	fbb5 f1f3 	udiv	r1, r5, r3
 8112376:	fb03 5711 	mls	r7, r3, r1, r5
 811237a:	5dc7      	ldrb	r7, [r0, r7]
 811237c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8112380:	462f      	mov	r7, r5
 8112382:	42bb      	cmp	r3, r7
 8112384:	460d      	mov	r5, r1
 8112386:	d9f4      	bls.n	8112372 <_printf_i+0x112>
 8112388:	2b08      	cmp	r3, #8
 811238a:	d10b      	bne.n	81123a4 <_printf_i+0x144>
 811238c:	6823      	ldr	r3, [r4, #0]
 811238e:	07df      	lsls	r7, r3, #31
 8112390:	d508      	bpl.n	81123a4 <_printf_i+0x144>
 8112392:	6923      	ldr	r3, [r4, #16]
 8112394:	6861      	ldr	r1, [r4, #4]
 8112396:	4299      	cmp	r1, r3
 8112398:	bfde      	ittt	le
 811239a:	2330      	movle	r3, #48	@ 0x30
 811239c:	f806 3c01 	strble.w	r3, [r6, #-1]
 81123a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 81123a4:	1b92      	subs	r2, r2, r6
 81123a6:	6122      	str	r2, [r4, #16]
 81123a8:	f8cd a000 	str.w	sl, [sp]
 81123ac:	464b      	mov	r3, r9
 81123ae:	aa03      	add	r2, sp, #12
 81123b0:	4621      	mov	r1, r4
 81123b2:	4640      	mov	r0, r8
 81123b4:	f7ff fee6 	bl	8112184 <_printf_common>
 81123b8:	3001      	adds	r0, #1
 81123ba:	d14a      	bne.n	8112452 <_printf_i+0x1f2>
 81123bc:	f04f 30ff 	mov.w	r0, #4294967295
 81123c0:	b004      	add	sp, #16
 81123c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81123c6:	6823      	ldr	r3, [r4, #0]
 81123c8:	f043 0320 	orr.w	r3, r3, #32
 81123cc:	6023      	str	r3, [r4, #0]
 81123ce:	4833      	ldr	r0, [pc, #204]	@ (811249c <_printf_i+0x23c>)
 81123d0:	2778      	movs	r7, #120	@ 0x78
 81123d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81123d6:	6823      	ldr	r3, [r4, #0]
 81123d8:	6831      	ldr	r1, [r6, #0]
 81123da:	061f      	lsls	r7, r3, #24
 81123dc:	f851 5b04 	ldr.w	r5, [r1], #4
 81123e0:	d402      	bmi.n	81123e8 <_printf_i+0x188>
 81123e2:	065f      	lsls	r7, r3, #25
 81123e4:	bf48      	it	mi
 81123e6:	b2ad      	uxthmi	r5, r5
 81123e8:	6031      	str	r1, [r6, #0]
 81123ea:	07d9      	lsls	r1, r3, #31
 81123ec:	bf44      	itt	mi
 81123ee:	f043 0320 	orrmi.w	r3, r3, #32
 81123f2:	6023      	strmi	r3, [r4, #0]
 81123f4:	b11d      	cbz	r5, 81123fe <_printf_i+0x19e>
 81123f6:	2310      	movs	r3, #16
 81123f8:	e7ac      	b.n	8112354 <_printf_i+0xf4>
 81123fa:	4827      	ldr	r0, [pc, #156]	@ (8112498 <_printf_i+0x238>)
 81123fc:	e7e9      	b.n	81123d2 <_printf_i+0x172>
 81123fe:	6823      	ldr	r3, [r4, #0]
 8112400:	f023 0320 	bic.w	r3, r3, #32
 8112404:	6023      	str	r3, [r4, #0]
 8112406:	e7f6      	b.n	81123f6 <_printf_i+0x196>
 8112408:	4616      	mov	r6, r2
 811240a:	e7bd      	b.n	8112388 <_printf_i+0x128>
 811240c:	6833      	ldr	r3, [r6, #0]
 811240e:	6825      	ldr	r5, [r4, #0]
 8112410:	6961      	ldr	r1, [r4, #20]
 8112412:	1d18      	adds	r0, r3, #4
 8112414:	6030      	str	r0, [r6, #0]
 8112416:	062e      	lsls	r6, r5, #24
 8112418:	681b      	ldr	r3, [r3, #0]
 811241a:	d501      	bpl.n	8112420 <_printf_i+0x1c0>
 811241c:	6019      	str	r1, [r3, #0]
 811241e:	e002      	b.n	8112426 <_printf_i+0x1c6>
 8112420:	0668      	lsls	r0, r5, #25
 8112422:	d5fb      	bpl.n	811241c <_printf_i+0x1bc>
 8112424:	8019      	strh	r1, [r3, #0]
 8112426:	2300      	movs	r3, #0
 8112428:	6123      	str	r3, [r4, #16]
 811242a:	4616      	mov	r6, r2
 811242c:	e7bc      	b.n	81123a8 <_printf_i+0x148>
 811242e:	6833      	ldr	r3, [r6, #0]
 8112430:	1d1a      	adds	r2, r3, #4
 8112432:	6032      	str	r2, [r6, #0]
 8112434:	681e      	ldr	r6, [r3, #0]
 8112436:	6862      	ldr	r2, [r4, #4]
 8112438:	2100      	movs	r1, #0
 811243a:	4630      	mov	r0, r6
 811243c:	f7ed ff60 	bl	8100300 <memchr>
 8112440:	b108      	cbz	r0, 8112446 <_printf_i+0x1e6>
 8112442:	1b80      	subs	r0, r0, r6
 8112444:	6060      	str	r0, [r4, #4]
 8112446:	6863      	ldr	r3, [r4, #4]
 8112448:	6123      	str	r3, [r4, #16]
 811244a:	2300      	movs	r3, #0
 811244c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8112450:	e7aa      	b.n	81123a8 <_printf_i+0x148>
 8112452:	6923      	ldr	r3, [r4, #16]
 8112454:	4632      	mov	r2, r6
 8112456:	4649      	mov	r1, r9
 8112458:	4640      	mov	r0, r8
 811245a:	47d0      	blx	sl
 811245c:	3001      	adds	r0, #1
 811245e:	d0ad      	beq.n	81123bc <_printf_i+0x15c>
 8112460:	6823      	ldr	r3, [r4, #0]
 8112462:	079b      	lsls	r3, r3, #30
 8112464:	d413      	bmi.n	811248e <_printf_i+0x22e>
 8112466:	68e0      	ldr	r0, [r4, #12]
 8112468:	9b03      	ldr	r3, [sp, #12]
 811246a:	4298      	cmp	r0, r3
 811246c:	bfb8      	it	lt
 811246e:	4618      	movlt	r0, r3
 8112470:	e7a6      	b.n	81123c0 <_printf_i+0x160>
 8112472:	2301      	movs	r3, #1
 8112474:	4632      	mov	r2, r6
 8112476:	4649      	mov	r1, r9
 8112478:	4640      	mov	r0, r8
 811247a:	47d0      	blx	sl
 811247c:	3001      	adds	r0, #1
 811247e:	d09d      	beq.n	81123bc <_printf_i+0x15c>
 8112480:	3501      	adds	r5, #1
 8112482:	68e3      	ldr	r3, [r4, #12]
 8112484:	9903      	ldr	r1, [sp, #12]
 8112486:	1a5b      	subs	r3, r3, r1
 8112488:	42ab      	cmp	r3, r5
 811248a:	dcf2      	bgt.n	8112472 <_printf_i+0x212>
 811248c:	e7eb      	b.n	8112466 <_printf_i+0x206>
 811248e:	2500      	movs	r5, #0
 8112490:	f104 0619 	add.w	r6, r4, #25
 8112494:	e7f5      	b.n	8112482 <_printf_i+0x222>
 8112496:	bf00      	nop
 8112498:	08117649 	.word	0x08117649
 811249c:	0811765a 	.word	0x0811765a

081124a0 <_scanf_float>:
 81124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81124a4:	b087      	sub	sp, #28
 81124a6:	4617      	mov	r7, r2
 81124a8:	9303      	str	r3, [sp, #12]
 81124aa:	688b      	ldr	r3, [r1, #8]
 81124ac:	1e5a      	subs	r2, r3, #1
 81124ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 81124b2:	bf81      	itttt	hi
 81124b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 81124b8:	eb03 0b05 	addhi.w	fp, r3, r5
 81124bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 81124c0:	608b      	strhi	r3, [r1, #8]
 81124c2:	680b      	ldr	r3, [r1, #0]
 81124c4:	460a      	mov	r2, r1
 81124c6:	f04f 0500 	mov.w	r5, #0
 81124ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 81124ce:	f842 3b1c 	str.w	r3, [r2], #28
 81124d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81124d6:	4680      	mov	r8, r0
 81124d8:	460c      	mov	r4, r1
 81124da:	bf98      	it	ls
 81124dc:	f04f 0b00 	movls.w	fp, #0
 81124e0:	9201      	str	r2, [sp, #4]
 81124e2:	4616      	mov	r6, r2
 81124e4:	46aa      	mov	sl, r5
 81124e6:	46a9      	mov	r9, r5
 81124e8:	9502      	str	r5, [sp, #8]
 81124ea:	68a2      	ldr	r2, [r4, #8]
 81124ec:	b152      	cbz	r2, 8112504 <_scanf_float+0x64>
 81124ee:	683b      	ldr	r3, [r7, #0]
 81124f0:	781b      	ldrb	r3, [r3, #0]
 81124f2:	2b4e      	cmp	r3, #78	@ 0x4e
 81124f4:	d864      	bhi.n	81125c0 <_scanf_float+0x120>
 81124f6:	2b40      	cmp	r3, #64	@ 0x40
 81124f8:	d83c      	bhi.n	8112574 <_scanf_float+0xd4>
 81124fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 81124fe:	b2c8      	uxtb	r0, r1
 8112500:	280e      	cmp	r0, #14
 8112502:	d93a      	bls.n	811257a <_scanf_float+0xda>
 8112504:	f1b9 0f00 	cmp.w	r9, #0
 8112508:	d003      	beq.n	8112512 <_scanf_float+0x72>
 811250a:	6823      	ldr	r3, [r4, #0]
 811250c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8112510:	6023      	str	r3, [r4, #0]
 8112512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8112516:	f1ba 0f01 	cmp.w	sl, #1
 811251a:	f200 8117 	bhi.w	811274c <_scanf_float+0x2ac>
 811251e:	9b01      	ldr	r3, [sp, #4]
 8112520:	429e      	cmp	r6, r3
 8112522:	f200 8108 	bhi.w	8112736 <_scanf_float+0x296>
 8112526:	2001      	movs	r0, #1
 8112528:	b007      	add	sp, #28
 811252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811252e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8112532:	2a0d      	cmp	r2, #13
 8112534:	d8e6      	bhi.n	8112504 <_scanf_float+0x64>
 8112536:	a101      	add	r1, pc, #4	@ (adr r1, 811253c <_scanf_float+0x9c>)
 8112538:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 811253c:	08112683 	.word	0x08112683
 8112540:	08112505 	.word	0x08112505
 8112544:	08112505 	.word	0x08112505
 8112548:	08112505 	.word	0x08112505
 811254c:	081126e3 	.word	0x081126e3
 8112550:	081126bb 	.word	0x081126bb
 8112554:	08112505 	.word	0x08112505
 8112558:	08112505 	.word	0x08112505
 811255c:	08112691 	.word	0x08112691
 8112560:	08112505 	.word	0x08112505
 8112564:	08112505 	.word	0x08112505
 8112568:	08112505 	.word	0x08112505
 811256c:	08112505 	.word	0x08112505
 8112570:	08112649 	.word	0x08112649
 8112574:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8112578:	e7db      	b.n	8112532 <_scanf_float+0x92>
 811257a:	290e      	cmp	r1, #14
 811257c:	d8c2      	bhi.n	8112504 <_scanf_float+0x64>
 811257e:	a001      	add	r0, pc, #4	@ (adr r0, 8112584 <_scanf_float+0xe4>)
 8112580:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8112584:	08112639 	.word	0x08112639
 8112588:	08112505 	.word	0x08112505
 811258c:	08112639 	.word	0x08112639
 8112590:	081126cf 	.word	0x081126cf
 8112594:	08112505 	.word	0x08112505
 8112598:	081125e1 	.word	0x081125e1
 811259c:	0811261f 	.word	0x0811261f
 81125a0:	0811261f 	.word	0x0811261f
 81125a4:	0811261f 	.word	0x0811261f
 81125a8:	0811261f 	.word	0x0811261f
 81125ac:	0811261f 	.word	0x0811261f
 81125b0:	0811261f 	.word	0x0811261f
 81125b4:	0811261f 	.word	0x0811261f
 81125b8:	0811261f 	.word	0x0811261f
 81125bc:	0811261f 	.word	0x0811261f
 81125c0:	2b6e      	cmp	r3, #110	@ 0x6e
 81125c2:	d809      	bhi.n	81125d8 <_scanf_float+0x138>
 81125c4:	2b60      	cmp	r3, #96	@ 0x60
 81125c6:	d8b2      	bhi.n	811252e <_scanf_float+0x8e>
 81125c8:	2b54      	cmp	r3, #84	@ 0x54
 81125ca:	d07b      	beq.n	81126c4 <_scanf_float+0x224>
 81125cc:	2b59      	cmp	r3, #89	@ 0x59
 81125ce:	d199      	bne.n	8112504 <_scanf_float+0x64>
 81125d0:	2d07      	cmp	r5, #7
 81125d2:	d197      	bne.n	8112504 <_scanf_float+0x64>
 81125d4:	2508      	movs	r5, #8
 81125d6:	e02c      	b.n	8112632 <_scanf_float+0x192>
 81125d8:	2b74      	cmp	r3, #116	@ 0x74
 81125da:	d073      	beq.n	81126c4 <_scanf_float+0x224>
 81125dc:	2b79      	cmp	r3, #121	@ 0x79
 81125de:	e7f6      	b.n	81125ce <_scanf_float+0x12e>
 81125e0:	6821      	ldr	r1, [r4, #0]
 81125e2:	05c8      	lsls	r0, r1, #23
 81125e4:	d51b      	bpl.n	811261e <_scanf_float+0x17e>
 81125e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 81125ea:	6021      	str	r1, [r4, #0]
 81125ec:	f109 0901 	add.w	r9, r9, #1
 81125f0:	f1bb 0f00 	cmp.w	fp, #0
 81125f4:	d003      	beq.n	81125fe <_scanf_float+0x15e>
 81125f6:	3201      	adds	r2, #1
 81125f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 81125fc:	60a2      	str	r2, [r4, #8]
 81125fe:	68a3      	ldr	r3, [r4, #8]
 8112600:	3b01      	subs	r3, #1
 8112602:	60a3      	str	r3, [r4, #8]
 8112604:	6923      	ldr	r3, [r4, #16]
 8112606:	3301      	adds	r3, #1
 8112608:	6123      	str	r3, [r4, #16]
 811260a:	687b      	ldr	r3, [r7, #4]
 811260c:	3b01      	subs	r3, #1
 811260e:	2b00      	cmp	r3, #0
 8112610:	607b      	str	r3, [r7, #4]
 8112612:	f340 8087 	ble.w	8112724 <_scanf_float+0x284>
 8112616:	683b      	ldr	r3, [r7, #0]
 8112618:	3301      	adds	r3, #1
 811261a:	603b      	str	r3, [r7, #0]
 811261c:	e765      	b.n	81124ea <_scanf_float+0x4a>
 811261e:	eb1a 0105 	adds.w	r1, sl, r5
 8112622:	f47f af6f 	bne.w	8112504 <_scanf_float+0x64>
 8112626:	6822      	ldr	r2, [r4, #0]
 8112628:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 811262c:	6022      	str	r2, [r4, #0]
 811262e:	460d      	mov	r5, r1
 8112630:	468a      	mov	sl, r1
 8112632:	f806 3b01 	strb.w	r3, [r6], #1
 8112636:	e7e2      	b.n	81125fe <_scanf_float+0x15e>
 8112638:	6822      	ldr	r2, [r4, #0]
 811263a:	0610      	lsls	r0, r2, #24
 811263c:	f57f af62 	bpl.w	8112504 <_scanf_float+0x64>
 8112640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8112644:	6022      	str	r2, [r4, #0]
 8112646:	e7f4      	b.n	8112632 <_scanf_float+0x192>
 8112648:	f1ba 0f00 	cmp.w	sl, #0
 811264c:	d10e      	bne.n	811266c <_scanf_float+0x1cc>
 811264e:	f1b9 0f00 	cmp.w	r9, #0
 8112652:	d10e      	bne.n	8112672 <_scanf_float+0x1d2>
 8112654:	6822      	ldr	r2, [r4, #0]
 8112656:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 811265a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 811265e:	d108      	bne.n	8112672 <_scanf_float+0x1d2>
 8112660:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8112664:	6022      	str	r2, [r4, #0]
 8112666:	f04f 0a01 	mov.w	sl, #1
 811266a:	e7e2      	b.n	8112632 <_scanf_float+0x192>
 811266c:	f1ba 0f02 	cmp.w	sl, #2
 8112670:	d055      	beq.n	811271e <_scanf_float+0x27e>
 8112672:	2d01      	cmp	r5, #1
 8112674:	d002      	beq.n	811267c <_scanf_float+0x1dc>
 8112676:	2d04      	cmp	r5, #4
 8112678:	f47f af44 	bne.w	8112504 <_scanf_float+0x64>
 811267c:	3501      	adds	r5, #1
 811267e:	b2ed      	uxtb	r5, r5
 8112680:	e7d7      	b.n	8112632 <_scanf_float+0x192>
 8112682:	f1ba 0f01 	cmp.w	sl, #1
 8112686:	f47f af3d 	bne.w	8112504 <_scanf_float+0x64>
 811268a:	f04f 0a02 	mov.w	sl, #2
 811268e:	e7d0      	b.n	8112632 <_scanf_float+0x192>
 8112690:	b97d      	cbnz	r5, 81126b2 <_scanf_float+0x212>
 8112692:	f1b9 0f00 	cmp.w	r9, #0
 8112696:	f47f af38 	bne.w	811250a <_scanf_float+0x6a>
 811269a:	6822      	ldr	r2, [r4, #0]
 811269c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 81126a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 81126a4:	f040 8108 	bne.w	81128b8 <_scanf_float+0x418>
 81126a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 81126ac:	6022      	str	r2, [r4, #0]
 81126ae:	2501      	movs	r5, #1
 81126b0:	e7bf      	b.n	8112632 <_scanf_float+0x192>
 81126b2:	2d03      	cmp	r5, #3
 81126b4:	d0e2      	beq.n	811267c <_scanf_float+0x1dc>
 81126b6:	2d05      	cmp	r5, #5
 81126b8:	e7de      	b.n	8112678 <_scanf_float+0x1d8>
 81126ba:	2d02      	cmp	r5, #2
 81126bc:	f47f af22 	bne.w	8112504 <_scanf_float+0x64>
 81126c0:	2503      	movs	r5, #3
 81126c2:	e7b6      	b.n	8112632 <_scanf_float+0x192>
 81126c4:	2d06      	cmp	r5, #6
 81126c6:	f47f af1d 	bne.w	8112504 <_scanf_float+0x64>
 81126ca:	2507      	movs	r5, #7
 81126cc:	e7b1      	b.n	8112632 <_scanf_float+0x192>
 81126ce:	6822      	ldr	r2, [r4, #0]
 81126d0:	0591      	lsls	r1, r2, #22
 81126d2:	f57f af17 	bpl.w	8112504 <_scanf_float+0x64>
 81126d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 81126da:	6022      	str	r2, [r4, #0]
 81126dc:	f8cd 9008 	str.w	r9, [sp, #8]
 81126e0:	e7a7      	b.n	8112632 <_scanf_float+0x192>
 81126e2:	6822      	ldr	r2, [r4, #0]
 81126e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 81126e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 81126ec:	d006      	beq.n	81126fc <_scanf_float+0x25c>
 81126ee:	0550      	lsls	r0, r2, #21
 81126f0:	f57f af08 	bpl.w	8112504 <_scanf_float+0x64>
 81126f4:	f1b9 0f00 	cmp.w	r9, #0
 81126f8:	f000 80de 	beq.w	81128b8 <_scanf_float+0x418>
 81126fc:	0591      	lsls	r1, r2, #22
 81126fe:	bf58      	it	pl
 8112700:	9902      	ldrpl	r1, [sp, #8]
 8112702:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8112706:	bf58      	it	pl
 8112708:	eba9 0101 	subpl.w	r1, r9, r1
 811270c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8112710:	bf58      	it	pl
 8112712:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8112716:	6022      	str	r2, [r4, #0]
 8112718:	f04f 0900 	mov.w	r9, #0
 811271c:	e789      	b.n	8112632 <_scanf_float+0x192>
 811271e:	f04f 0a03 	mov.w	sl, #3
 8112722:	e786      	b.n	8112632 <_scanf_float+0x192>
 8112724:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8112728:	4639      	mov	r1, r7
 811272a:	4640      	mov	r0, r8
 811272c:	4798      	blx	r3
 811272e:	2800      	cmp	r0, #0
 8112730:	f43f aedb 	beq.w	81124ea <_scanf_float+0x4a>
 8112734:	e6e6      	b.n	8112504 <_scanf_float+0x64>
 8112736:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811273a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 811273e:	463a      	mov	r2, r7
 8112740:	4640      	mov	r0, r8
 8112742:	4798      	blx	r3
 8112744:	6923      	ldr	r3, [r4, #16]
 8112746:	3b01      	subs	r3, #1
 8112748:	6123      	str	r3, [r4, #16]
 811274a:	e6e8      	b.n	811251e <_scanf_float+0x7e>
 811274c:	1e6b      	subs	r3, r5, #1
 811274e:	2b06      	cmp	r3, #6
 8112750:	d824      	bhi.n	811279c <_scanf_float+0x2fc>
 8112752:	2d02      	cmp	r5, #2
 8112754:	d836      	bhi.n	81127c4 <_scanf_float+0x324>
 8112756:	9b01      	ldr	r3, [sp, #4]
 8112758:	429e      	cmp	r6, r3
 811275a:	f67f aee4 	bls.w	8112526 <_scanf_float+0x86>
 811275e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112766:	463a      	mov	r2, r7
 8112768:	4640      	mov	r0, r8
 811276a:	4798      	blx	r3
 811276c:	6923      	ldr	r3, [r4, #16]
 811276e:	3b01      	subs	r3, #1
 8112770:	6123      	str	r3, [r4, #16]
 8112772:	e7f0      	b.n	8112756 <_scanf_float+0x2b6>
 8112774:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112778:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 811277c:	463a      	mov	r2, r7
 811277e:	4640      	mov	r0, r8
 8112780:	4798      	blx	r3
 8112782:	6923      	ldr	r3, [r4, #16]
 8112784:	3b01      	subs	r3, #1
 8112786:	6123      	str	r3, [r4, #16]
 8112788:	f10a 3aff 	add.w	sl, sl, #4294967295
 811278c:	fa5f fa8a 	uxtb.w	sl, sl
 8112790:	f1ba 0f02 	cmp.w	sl, #2
 8112794:	d1ee      	bne.n	8112774 <_scanf_float+0x2d4>
 8112796:	3d03      	subs	r5, #3
 8112798:	b2ed      	uxtb	r5, r5
 811279a:	1b76      	subs	r6, r6, r5
 811279c:	6823      	ldr	r3, [r4, #0]
 811279e:	05da      	lsls	r2, r3, #23
 81127a0:	d530      	bpl.n	8112804 <_scanf_float+0x364>
 81127a2:	055b      	lsls	r3, r3, #21
 81127a4:	d511      	bpl.n	81127ca <_scanf_float+0x32a>
 81127a6:	9b01      	ldr	r3, [sp, #4]
 81127a8:	429e      	cmp	r6, r3
 81127aa:	f67f aebc 	bls.w	8112526 <_scanf_float+0x86>
 81127ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81127b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81127b6:	463a      	mov	r2, r7
 81127b8:	4640      	mov	r0, r8
 81127ba:	4798      	blx	r3
 81127bc:	6923      	ldr	r3, [r4, #16]
 81127be:	3b01      	subs	r3, #1
 81127c0:	6123      	str	r3, [r4, #16]
 81127c2:	e7f0      	b.n	81127a6 <_scanf_float+0x306>
 81127c4:	46aa      	mov	sl, r5
 81127c6:	46b3      	mov	fp, r6
 81127c8:	e7de      	b.n	8112788 <_scanf_float+0x2e8>
 81127ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81127ce:	6923      	ldr	r3, [r4, #16]
 81127d0:	2965      	cmp	r1, #101	@ 0x65
 81127d2:	f103 33ff 	add.w	r3, r3, #4294967295
 81127d6:	f106 35ff 	add.w	r5, r6, #4294967295
 81127da:	6123      	str	r3, [r4, #16]
 81127dc:	d00c      	beq.n	81127f8 <_scanf_float+0x358>
 81127de:	2945      	cmp	r1, #69	@ 0x45
 81127e0:	d00a      	beq.n	81127f8 <_scanf_float+0x358>
 81127e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81127e6:	463a      	mov	r2, r7
 81127e8:	4640      	mov	r0, r8
 81127ea:	4798      	blx	r3
 81127ec:	6923      	ldr	r3, [r4, #16]
 81127ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81127f2:	3b01      	subs	r3, #1
 81127f4:	1eb5      	subs	r5, r6, #2
 81127f6:	6123      	str	r3, [r4, #16]
 81127f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81127fc:	463a      	mov	r2, r7
 81127fe:	4640      	mov	r0, r8
 8112800:	4798      	blx	r3
 8112802:	462e      	mov	r6, r5
 8112804:	6822      	ldr	r2, [r4, #0]
 8112806:	f012 0210 	ands.w	r2, r2, #16
 811280a:	d001      	beq.n	8112810 <_scanf_float+0x370>
 811280c:	2000      	movs	r0, #0
 811280e:	e68b      	b.n	8112528 <_scanf_float+0x88>
 8112810:	7032      	strb	r2, [r6, #0]
 8112812:	6823      	ldr	r3, [r4, #0]
 8112814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8112818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 811281c:	d11c      	bne.n	8112858 <_scanf_float+0x3b8>
 811281e:	9b02      	ldr	r3, [sp, #8]
 8112820:	454b      	cmp	r3, r9
 8112822:	eba3 0209 	sub.w	r2, r3, r9
 8112826:	d123      	bne.n	8112870 <_scanf_float+0x3d0>
 8112828:	9901      	ldr	r1, [sp, #4]
 811282a:	2200      	movs	r2, #0
 811282c:	4640      	mov	r0, r8
 811282e:	f002 fbfb 	bl	8115028 <_strtod_r>
 8112832:	9b03      	ldr	r3, [sp, #12]
 8112834:	6821      	ldr	r1, [r4, #0]
 8112836:	681b      	ldr	r3, [r3, #0]
 8112838:	f011 0f02 	tst.w	r1, #2
 811283c:	ec57 6b10 	vmov	r6, r7, d0
 8112840:	f103 0204 	add.w	r2, r3, #4
 8112844:	d01f      	beq.n	8112886 <_scanf_float+0x3e6>
 8112846:	9903      	ldr	r1, [sp, #12]
 8112848:	600a      	str	r2, [r1, #0]
 811284a:	681b      	ldr	r3, [r3, #0]
 811284c:	e9c3 6700 	strd	r6, r7, [r3]
 8112850:	68e3      	ldr	r3, [r4, #12]
 8112852:	3301      	adds	r3, #1
 8112854:	60e3      	str	r3, [r4, #12]
 8112856:	e7d9      	b.n	811280c <_scanf_float+0x36c>
 8112858:	9b04      	ldr	r3, [sp, #16]
 811285a:	2b00      	cmp	r3, #0
 811285c:	d0e4      	beq.n	8112828 <_scanf_float+0x388>
 811285e:	9905      	ldr	r1, [sp, #20]
 8112860:	230a      	movs	r3, #10
 8112862:	3101      	adds	r1, #1
 8112864:	4640      	mov	r0, r8
 8112866:	f7ff f9b7 	bl	8111bd8 <_strtol_r>
 811286a:	9b04      	ldr	r3, [sp, #16]
 811286c:	9e05      	ldr	r6, [sp, #20]
 811286e:	1ac2      	subs	r2, r0, r3
 8112870:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8112874:	429e      	cmp	r6, r3
 8112876:	bf28      	it	cs
 8112878:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 811287c:	4910      	ldr	r1, [pc, #64]	@ (81128c0 <_scanf_float+0x420>)
 811287e:	4630      	mov	r0, r6
 8112880:	f000 f8f6 	bl	8112a70 <siprintf>
 8112884:	e7d0      	b.n	8112828 <_scanf_float+0x388>
 8112886:	f011 0f04 	tst.w	r1, #4
 811288a:	9903      	ldr	r1, [sp, #12]
 811288c:	600a      	str	r2, [r1, #0]
 811288e:	d1dc      	bne.n	811284a <_scanf_float+0x3aa>
 8112890:	681d      	ldr	r5, [r3, #0]
 8112892:	4632      	mov	r2, r6
 8112894:	463b      	mov	r3, r7
 8112896:	4630      	mov	r0, r6
 8112898:	4639      	mov	r1, r7
 811289a:	f7ee f9df 	bl	8100c5c <__aeabi_dcmpun>
 811289e:	b128      	cbz	r0, 81128ac <_scanf_float+0x40c>
 81128a0:	4808      	ldr	r0, [pc, #32]	@ (81128c4 <_scanf_float+0x424>)
 81128a2:	f000 fa67 	bl	8112d74 <nanf>
 81128a6:	ed85 0a00 	vstr	s0, [r5]
 81128aa:	e7d1      	b.n	8112850 <_scanf_float+0x3b0>
 81128ac:	4630      	mov	r0, r6
 81128ae:	4639      	mov	r1, r7
 81128b0:	f7ee fa32 	bl	8100d18 <__aeabi_d2f>
 81128b4:	6028      	str	r0, [r5, #0]
 81128b6:	e7cb      	b.n	8112850 <_scanf_float+0x3b0>
 81128b8:	f04f 0900 	mov.w	r9, #0
 81128bc:	e629      	b.n	8112512 <_scanf_float+0x72>
 81128be:	bf00      	nop
 81128c0:	0811766b 	.word	0x0811766b
 81128c4:	08117535 	.word	0x08117535

081128c8 <std>:
 81128c8:	2300      	movs	r3, #0
 81128ca:	b510      	push	{r4, lr}
 81128cc:	4604      	mov	r4, r0
 81128ce:	e9c0 3300 	strd	r3, r3, [r0]
 81128d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81128d6:	6083      	str	r3, [r0, #8]
 81128d8:	8181      	strh	r1, [r0, #12]
 81128da:	6643      	str	r3, [r0, #100]	@ 0x64
 81128dc:	81c2      	strh	r2, [r0, #14]
 81128de:	6183      	str	r3, [r0, #24]
 81128e0:	4619      	mov	r1, r3
 81128e2:	2208      	movs	r2, #8
 81128e4:	305c      	adds	r0, #92	@ 0x5c
 81128e6:	f000 f926 	bl	8112b36 <memset>
 81128ea:	4b0d      	ldr	r3, [pc, #52]	@ (8112920 <std+0x58>)
 81128ec:	6263      	str	r3, [r4, #36]	@ 0x24
 81128ee:	4b0d      	ldr	r3, [pc, #52]	@ (8112924 <std+0x5c>)
 81128f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 81128f2:	4b0d      	ldr	r3, [pc, #52]	@ (8112928 <std+0x60>)
 81128f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81128f6:	4b0d      	ldr	r3, [pc, #52]	@ (811292c <std+0x64>)
 81128f8:	6323      	str	r3, [r4, #48]	@ 0x30
 81128fa:	4b0d      	ldr	r3, [pc, #52]	@ (8112930 <std+0x68>)
 81128fc:	6224      	str	r4, [r4, #32]
 81128fe:	429c      	cmp	r4, r3
 8112900:	d006      	beq.n	8112910 <std+0x48>
 8112902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8112906:	4294      	cmp	r4, r2
 8112908:	d002      	beq.n	8112910 <std+0x48>
 811290a:	33d0      	adds	r3, #208	@ 0xd0
 811290c:	429c      	cmp	r4, r3
 811290e:	d105      	bne.n	811291c <std+0x54>
 8112910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8112914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112918:	f000 ba1a 	b.w	8112d50 <__retarget_lock_init_recursive>
 811291c:	bd10      	pop	{r4, pc}
 811291e:	bf00      	nop
 8112920:	08112ab1 	.word	0x08112ab1
 8112924:	08112ad3 	.word	0x08112ad3
 8112928:	08112b0b 	.word	0x08112b0b
 811292c:	08112b2f 	.word	0x08112b2f
 8112930:	10005008 	.word	0x10005008

08112934 <stdio_exit_handler>:
 8112934:	4a02      	ldr	r2, [pc, #8]	@ (8112940 <stdio_exit_handler+0xc>)
 8112936:	4903      	ldr	r1, [pc, #12]	@ (8112944 <stdio_exit_handler+0x10>)
 8112938:	4803      	ldr	r0, [pc, #12]	@ (8112948 <stdio_exit_handler+0x14>)
 811293a:	f000 b87b 	b.w	8112a34 <_fwalk_sglue>
 811293e:	bf00      	nop
 8112940:	100000bc 	.word	0x100000bc
 8112944:	08115671 	.word	0x08115671
 8112948:	100000cc 	.word	0x100000cc

0811294c <cleanup_stdio>:
 811294c:	6841      	ldr	r1, [r0, #4]
 811294e:	4b0c      	ldr	r3, [pc, #48]	@ (8112980 <cleanup_stdio+0x34>)
 8112950:	4299      	cmp	r1, r3
 8112952:	b510      	push	{r4, lr}
 8112954:	4604      	mov	r4, r0
 8112956:	d001      	beq.n	811295c <cleanup_stdio+0x10>
 8112958:	f002 fe8a 	bl	8115670 <_fflush_r>
 811295c:	68a1      	ldr	r1, [r4, #8]
 811295e:	4b09      	ldr	r3, [pc, #36]	@ (8112984 <cleanup_stdio+0x38>)
 8112960:	4299      	cmp	r1, r3
 8112962:	d002      	beq.n	811296a <cleanup_stdio+0x1e>
 8112964:	4620      	mov	r0, r4
 8112966:	f002 fe83 	bl	8115670 <_fflush_r>
 811296a:	68e1      	ldr	r1, [r4, #12]
 811296c:	4b06      	ldr	r3, [pc, #24]	@ (8112988 <cleanup_stdio+0x3c>)
 811296e:	4299      	cmp	r1, r3
 8112970:	d004      	beq.n	811297c <cleanup_stdio+0x30>
 8112972:	4620      	mov	r0, r4
 8112974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112978:	f002 be7a 	b.w	8115670 <_fflush_r>
 811297c:	bd10      	pop	{r4, pc}
 811297e:	bf00      	nop
 8112980:	10005008 	.word	0x10005008
 8112984:	10005070 	.word	0x10005070
 8112988:	100050d8 	.word	0x100050d8

0811298c <global_stdio_init.part.0>:
 811298c:	b510      	push	{r4, lr}
 811298e:	4b0b      	ldr	r3, [pc, #44]	@ (81129bc <global_stdio_init.part.0+0x30>)
 8112990:	4c0b      	ldr	r4, [pc, #44]	@ (81129c0 <global_stdio_init.part.0+0x34>)
 8112992:	4a0c      	ldr	r2, [pc, #48]	@ (81129c4 <global_stdio_init.part.0+0x38>)
 8112994:	601a      	str	r2, [r3, #0]
 8112996:	4620      	mov	r0, r4
 8112998:	2200      	movs	r2, #0
 811299a:	2104      	movs	r1, #4
 811299c:	f7ff ff94 	bl	81128c8 <std>
 81129a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 81129a4:	2201      	movs	r2, #1
 81129a6:	2109      	movs	r1, #9
 81129a8:	f7ff ff8e 	bl	81128c8 <std>
 81129ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 81129b0:	2202      	movs	r2, #2
 81129b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81129b6:	2112      	movs	r1, #18
 81129b8:	f7ff bf86 	b.w	81128c8 <std>
 81129bc:	10005140 	.word	0x10005140
 81129c0:	10005008 	.word	0x10005008
 81129c4:	08112935 	.word	0x08112935

081129c8 <__sfp_lock_acquire>:
 81129c8:	4801      	ldr	r0, [pc, #4]	@ (81129d0 <__sfp_lock_acquire+0x8>)
 81129ca:	f000 b9c2 	b.w	8112d52 <__retarget_lock_acquire_recursive>
 81129ce:	bf00      	nop
 81129d0:	10005149 	.word	0x10005149

081129d4 <__sfp_lock_release>:
 81129d4:	4801      	ldr	r0, [pc, #4]	@ (81129dc <__sfp_lock_release+0x8>)
 81129d6:	f000 b9bd 	b.w	8112d54 <__retarget_lock_release_recursive>
 81129da:	bf00      	nop
 81129dc:	10005149 	.word	0x10005149

081129e0 <__sinit>:
 81129e0:	b510      	push	{r4, lr}
 81129e2:	4604      	mov	r4, r0
 81129e4:	f7ff fff0 	bl	81129c8 <__sfp_lock_acquire>
 81129e8:	6a23      	ldr	r3, [r4, #32]
 81129ea:	b11b      	cbz	r3, 81129f4 <__sinit+0x14>
 81129ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81129f0:	f7ff bff0 	b.w	81129d4 <__sfp_lock_release>
 81129f4:	4b04      	ldr	r3, [pc, #16]	@ (8112a08 <__sinit+0x28>)
 81129f6:	6223      	str	r3, [r4, #32]
 81129f8:	4b04      	ldr	r3, [pc, #16]	@ (8112a0c <__sinit+0x2c>)
 81129fa:	681b      	ldr	r3, [r3, #0]
 81129fc:	2b00      	cmp	r3, #0
 81129fe:	d1f5      	bne.n	81129ec <__sinit+0xc>
 8112a00:	f7ff ffc4 	bl	811298c <global_stdio_init.part.0>
 8112a04:	e7f2      	b.n	81129ec <__sinit+0xc>
 8112a06:	bf00      	nop
 8112a08:	0811294d 	.word	0x0811294d
 8112a0c:	10005140 	.word	0x10005140

08112a10 <fiprintf>:
 8112a10:	b40e      	push	{r1, r2, r3}
 8112a12:	b503      	push	{r0, r1, lr}
 8112a14:	4601      	mov	r1, r0
 8112a16:	ab03      	add	r3, sp, #12
 8112a18:	4805      	ldr	r0, [pc, #20]	@ (8112a30 <fiprintf+0x20>)
 8112a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8112a1e:	6800      	ldr	r0, [r0, #0]
 8112a20:	9301      	str	r3, [sp, #4]
 8112a22:	f002 fc89 	bl	8115338 <_vfiprintf_r>
 8112a26:	b002      	add	sp, #8
 8112a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8112a2c:	b003      	add	sp, #12
 8112a2e:	4770      	bx	lr
 8112a30:	100000c8 	.word	0x100000c8

08112a34 <_fwalk_sglue>:
 8112a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112a38:	4607      	mov	r7, r0
 8112a3a:	4688      	mov	r8, r1
 8112a3c:	4614      	mov	r4, r2
 8112a3e:	2600      	movs	r6, #0
 8112a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8112a44:	f1b9 0901 	subs.w	r9, r9, #1
 8112a48:	d505      	bpl.n	8112a56 <_fwalk_sglue+0x22>
 8112a4a:	6824      	ldr	r4, [r4, #0]
 8112a4c:	2c00      	cmp	r4, #0
 8112a4e:	d1f7      	bne.n	8112a40 <_fwalk_sglue+0xc>
 8112a50:	4630      	mov	r0, r6
 8112a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8112a56:	89ab      	ldrh	r3, [r5, #12]
 8112a58:	2b01      	cmp	r3, #1
 8112a5a:	d907      	bls.n	8112a6c <_fwalk_sglue+0x38>
 8112a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8112a60:	3301      	adds	r3, #1
 8112a62:	d003      	beq.n	8112a6c <_fwalk_sglue+0x38>
 8112a64:	4629      	mov	r1, r5
 8112a66:	4638      	mov	r0, r7
 8112a68:	47c0      	blx	r8
 8112a6a:	4306      	orrs	r6, r0
 8112a6c:	3568      	adds	r5, #104	@ 0x68
 8112a6e:	e7e9      	b.n	8112a44 <_fwalk_sglue+0x10>

08112a70 <siprintf>:
 8112a70:	b40e      	push	{r1, r2, r3}
 8112a72:	b500      	push	{lr}
 8112a74:	b09c      	sub	sp, #112	@ 0x70
 8112a76:	ab1d      	add	r3, sp, #116	@ 0x74
 8112a78:	9002      	str	r0, [sp, #8]
 8112a7a:	9006      	str	r0, [sp, #24]
 8112a7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8112a80:	4809      	ldr	r0, [pc, #36]	@ (8112aa8 <siprintf+0x38>)
 8112a82:	9107      	str	r1, [sp, #28]
 8112a84:	9104      	str	r1, [sp, #16]
 8112a86:	4909      	ldr	r1, [pc, #36]	@ (8112aac <siprintf+0x3c>)
 8112a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8112a8c:	9105      	str	r1, [sp, #20]
 8112a8e:	6800      	ldr	r0, [r0, #0]
 8112a90:	9301      	str	r3, [sp, #4]
 8112a92:	a902      	add	r1, sp, #8
 8112a94:	f002 fb2a 	bl	81150ec <_svfiprintf_r>
 8112a98:	9b02      	ldr	r3, [sp, #8]
 8112a9a:	2200      	movs	r2, #0
 8112a9c:	701a      	strb	r2, [r3, #0]
 8112a9e:	b01c      	add	sp, #112	@ 0x70
 8112aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8112aa4:	b003      	add	sp, #12
 8112aa6:	4770      	bx	lr
 8112aa8:	100000c8 	.word	0x100000c8
 8112aac:	ffff0208 	.word	0xffff0208

08112ab0 <__sread>:
 8112ab0:	b510      	push	{r4, lr}
 8112ab2:	460c      	mov	r4, r1
 8112ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112ab8:	f000 f8ec 	bl	8112c94 <_read_r>
 8112abc:	2800      	cmp	r0, #0
 8112abe:	bfab      	itete	ge
 8112ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8112ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8112ac4:	181b      	addge	r3, r3, r0
 8112ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8112aca:	bfac      	ite	ge
 8112acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8112ace:	81a3      	strhlt	r3, [r4, #12]
 8112ad0:	bd10      	pop	{r4, pc}

08112ad2 <__swrite>:
 8112ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112ad6:	461f      	mov	r7, r3
 8112ad8:	898b      	ldrh	r3, [r1, #12]
 8112ada:	05db      	lsls	r3, r3, #23
 8112adc:	4605      	mov	r5, r0
 8112ade:	460c      	mov	r4, r1
 8112ae0:	4616      	mov	r6, r2
 8112ae2:	d505      	bpl.n	8112af0 <__swrite+0x1e>
 8112ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112ae8:	2302      	movs	r3, #2
 8112aea:	2200      	movs	r2, #0
 8112aec:	f000 f8c0 	bl	8112c70 <_lseek_r>
 8112af0:	89a3      	ldrh	r3, [r4, #12]
 8112af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8112af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8112afa:	81a3      	strh	r3, [r4, #12]
 8112afc:	4632      	mov	r2, r6
 8112afe:	463b      	mov	r3, r7
 8112b00:	4628      	mov	r0, r5
 8112b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8112b06:	f000 b8e7 	b.w	8112cd8 <_write_r>

08112b0a <__sseek>:
 8112b0a:	b510      	push	{r4, lr}
 8112b0c:	460c      	mov	r4, r1
 8112b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112b12:	f000 f8ad 	bl	8112c70 <_lseek_r>
 8112b16:	1c43      	adds	r3, r0, #1
 8112b18:	89a3      	ldrh	r3, [r4, #12]
 8112b1a:	bf15      	itete	ne
 8112b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8112b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8112b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8112b26:	81a3      	strheq	r3, [r4, #12]
 8112b28:	bf18      	it	ne
 8112b2a:	81a3      	strhne	r3, [r4, #12]
 8112b2c:	bd10      	pop	{r4, pc}

08112b2e <__sclose>:
 8112b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112b32:	f000 b88d 	b.w	8112c50 <_close_r>

08112b36 <memset>:
 8112b36:	4402      	add	r2, r0
 8112b38:	4603      	mov	r3, r0
 8112b3a:	4293      	cmp	r3, r2
 8112b3c:	d100      	bne.n	8112b40 <memset+0xa>
 8112b3e:	4770      	bx	lr
 8112b40:	f803 1b01 	strb.w	r1, [r3], #1
 8112b44:	e7f9      	b.n	8112b3a <memset+0x4>

08112b46 <strncmp>:
 8112b46:	b510      	push	{r4, lr}
 8112b48:	b16a      	cbz	r2, 8112b66 <strncmp+0x20>
 8112b4a:	3901      	subs	r1, #1
 8112b4c:	1884      	adds	r4, r0, r2
 8112b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112b52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8112b56:	429a      	cmp	r2, r3
 8112b58:	d103      	bne.n	8112b62 <strncmp+0x1c>
 8112b5a:	42a0      	cmp	r0, r4
 8112b5c:	d001      	beq.n	8112b62 <strncmp+0x1c>
 8112b5e:	2a00      	cmp	r2, #0
 8112b60:	d1f5      	bne.n	8112b4e <strncmp+0x8>
 8112b62:	1ad0      	subs	r0, r2, r3
 8112b64:	bd10      	pop	{r4, pc}
 8112b66:	4610      	mov	r0, r2
 8112b68:	e7fc      	b.n	8112b64 <strncmp+0x1e>

08112b6a <strncpy>:
 8112b6a:	b510      	push	{r4, lr}
 8112b6c:	3901      	subs	r1, #1
 8112b6e:	4603      	mov	r3, r0
 8112b70:	b132      	cbz	r2, 8112b80 <strncpy+0x16>
 8112b72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8112b76:	f803 4b01 	strb.w	r4, [r3], #1
 8112b7a:	3a01      	subs	r2, #1
 8112b7c:	2c00      	cmp	r4, #0
 8112b7e:	d1f7      	bne.n	8112b70 <strncpy+0x6>
 8112b80:	441a      	add	r2, r3
 8112b82:	2100      	movs	r1, #0
 8112b84:	4293      	cmp	r3, r2
 8112b86:	d100      	bne.n	8112b8a <strncpy+0x20>
 8112b88:	bd10      	pop	{r4, pc}
 8112b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8112b8e:	e7f9      	b.n	8112b84 <strncpy+0x1a>

08112b90 <strtok>:
 8112b90:	4b16      	ldr	r3, [pc, #88]	@ (8112bec <strtok+0x5c>)
 8112b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112b96:	681f      	ldr	r7, [r3, #0]
 8112b98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8112b9a:	4605      	mov	r5, r0
 8112b9c:	460e      	mov	r6, r1
 8112b9e:	b9ec      	cbnz	r4, 8112bdc <strtok+0x4c>
 8112ba0:	2050      	movs	r0, #80	@ 0x50
 8112ba2:	f7fe fee1 	bl	8111968 <malloc>
 8112ba6:	4602      	mov	r2, r0
 8112ba8:	6478      	str	r0, [r7, #68]	@ 0x44
 8112baa:	b920      	cbnz	r0, 8112bb6 <strtok+0x26>
 8112bac:	4b10      	ldr	r3, [pc, #64]	@ (8112bf0 <strtok+0x60>)
 8112bae:	4811      	ldr	r0, [pc, #68]	@ (8112bf4 <strtok+0x64>)
 8112bb0:	215b      	movs	r1, #91	@ 0x5b
 8112bb2:	f7fe feb7 	bl	8111924 <__assert_func>
 8112bb6:	e9c0 4400 	strd	r4, r4, [r0]
 8112bba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8112bbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8112bc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8112bc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8112bca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8112bce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8112bd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8112bd6:	6184      	str	r4, [r0, #24]
 8112bd8:	7704      	strb	r4, [r0, #28]
 8112bda:	6244      	str	r4, [r0, #36]	@ 0x24
 8112bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112bde:	4631      	mov	r1, r6
 8112be0:	4628      	mov	r0, r5
 8112be2:	2301      	movs	r3, #1
 8112be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8112be8:	f000 b806 	b.w	8112bf8 <__strtok_r>
 8112bec:	100000c8 	.word	0x100000c8
 8112bf0:	08117670 	.word	0x08117670
 8112bf4:	08117687 	.word	0x08117687

08112bf8 <__strtok_r>:
 8112bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8112bfa:	4604      	mov	r4, r0
 8112bfc:	b908      	cbnz	r0, 8112c02 <__strtok_r+0xa>
 8112bfe:	6814      	ldr	r4, [r2, #0]
 8112c00:	b144      	cbz	r4, 8112c14 <__strtok_r+0x1c>
 8112c02:	4620      	mov	r0, r4
 8112c04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8112c08:	460f      	mov	r7, r1
 8112c0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8112c0e:	b91e      	cbnz	r6, 8112c18 <__strtok_r+0x20>
 8112c10:	b965      	cbnz	r5, 8112c2c <__strtok_r+0x34>
 8112c12:	6015      	str	r5, [r2, #0]
 8112c14:	2000      	movs	r0, #0
 8112c16:	e005      	b.n	8112c24 <__strtok_r+0x2c>
 8112c18:	42b5      	cmp	r5, r6
 8112c1a:	d1f6      	bne.n	8112c0a <__strtok_r+0x12>
 8112c1c:	2b00      	cmp	r3, #0
 8112c1e:	d1f0      	bne.n	8112c02 <__strtok_r+0xa>
 8112c20:	6014      	str	r4, [r2, #0]
 8112c22:	7003      	strb	r3, [r0, #0]
 8112c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112c26:	461c      	mov	r4, r3
 8112c28:	e00c      	b.n	8112c44 <__strtok_r+0x4c>
 8112c2a:	b915      	cbnz	r5, 8112c32 <__strtok_r+0x3a>
 8112c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8112c30:	460e      	mov	r6, r1
 8112c32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8112c36:	42ab      	cmp	r3, r5
 8112c38:	d1f7      	bne.n	8112c2a <__strtok_r+0x32>
 8112c3a:	2b00      	cmp	r3, #0
 8112c3c:	d0f3      	beq.n	8112c26 <__strtok_r+0x2e>
 8112c3e:	2300      	movs	r3, #0
 8112c40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8112c44:	6014      	str	r4, [r2, #0]
 8112c46:	e7ed      	b.n	8112c24 <__strtok_r+0x2c>

08112c48 <_localeconv_r>:
 8112c48:	4800      	ldr	r0, [pc, #0]	@ (8112c4c <_localeconv_r+0x4>)
 8112c4a:	4770      	bx	lr
 8112c4c:	10000208 	.word	0x10000208

08112c50 <_close_r>:
 8112c50:	b538      	push	{r3, r4, r5, lr}
 8112c52:	4d06      	ldr	r5, [pc, #24]	@ (8112c6c <_close_r+0x1c>)
 8112c54:	2300      	movs	r3, #0
 8112c56:	4604      	mov	r4, r0
 8112c58:	4608      	mov	r0, r1
 8112c5a:	602b      	str	r3, [r5, #0]
 8112c5c:	f7ef fbb4 	bl	81023c8 <_close>
 8112c60:	1c43      	adds	r3, r0, #1
 8112c62:	d102      	bne.n	8112c6a <_close_r+0x1a>
 8112c64:	682b      	ldr	r3, [r5, #0]
 8112c66:	b103      	cbz	r3, 8112c6a <_close_r+0x1a>
 8112c68:	6023      	str	r3, [r4, #0]
 8112c6a:	bd38      	pop	{r3, r4, r5, pc}
 8112c6c:	10005144 	.word	0x10005144

08112c70 <_lseek_r>:
 8112c70:	b538      	push	{r3, r4, r5, lr}
 8112c72:	4d07      	ldr	r5, [pc, #28]	@ (8112c90 <_lseek_r+0x20>)
 8112c74:	4604      	mov	r4, r0
 8112c76:	4608      	mov	r0, r1
 8112c78:	4611      	mov	r1, r2
 8112c7a:	2200      	movs	r2, #0
 8112c7c:	602a      	str	r2, [r5, #0]
 8112c7e:	461a      	mov	r2, r3
 8112c80:	f7ef fbc9 	bl	8102416 <_lseek>
 8112c84:	1c43      	adds	r3, r0, #1
 8112c86:	d102      	bne.n	8112c8e <_lseek_r+0x1e>
 8112c88:	682b      	ldr	r3, [r5, #0]
 8112c8a:	b103      	cbz	r3, 8112c8e <_lseek_r+0x1e>
 8112c8c:	6023      	str	r3, [r4, #0]
 8112c8e:	bd38      	pop	{r3, r4, r5, pc}
 8112c90:	10005144 	.word	0x10005144

08112c94 <_read_r>:
 8112c94:	b538      	push	{r3, r4, r5, lr}
 8112c96:	4d07      	ldr	r5, [pc, #28]	@ (8112cb4 <_read_r+0x20>)
 8112c98:	4604      	mov	r4, r0
 8112c9a:	4608      	mov	r0, r1
 8112c9c:	4611      	mov	r1, r2
 8112c9e:	2200      	movs	r2, #0
 8112ca0:	602a      	str	r2, [r5, #0]
 8112ca2:	461a      	mov	r2, r3
 8112ca4:	f7ef fb57 	bl	8102356 <_read>
 8112ca8:	1c43      	adds	r3, r0, #1
 8112caa:	d102      	bne.n	8112cb2 <_read_r+0x1e>
 8112cac:	682b      	ldr	r3, [r5, #0]
 8112cae:	b103      	cbz	r3, 8112cb2 <_read_r+0x1e>
 8112cb0:	6023      	str	r3, [r4, #0]
 8112cb2:	bd38      	pop	{r3, r4, r5, pc}
 8112cb4:	10005144 	.word	0x10005144

08112cb8 <_sbrk_r>:
 8112cb8:	b538      	push	{r3, r4, r5, lr}
 8112cba:	4d06      	ldr	r5, [pc, #24]	@ (8112cd4 <_sbrk_r+0x1c>)
 8112cbc:	2300      	movs	r3, #0
 8112cbe:	4604      	mov	r4, r0
 8112cc0:	4608      	mov	r0, r1
 8112cc2:	602b      	str	r3, [r5, #0]
 8112cc4:	f7ef fbb4 	bl	8102430 <_sbrk>
 8112cc8:	1c43      	adds	r3, r0, #1
 8112cca:	d102      	bne.n	8112cd2 <_sbrk_r+0x1a>
 8112ccc:	682b      	ldr	r3, [r5, #0]
 8112cce:	b103      	cbz	r3, 8112cd2 <_sbrk_r+0x1a>
 8112cd0:	6023      	str	r3, [r4, #0]
 8112cd2:	bd38      	pop	{r3, r4, r5, pc}
 8112cd4:	10005144 	.word	0x10005144

08112cd8 <_write_r>:
 8112cd8:	b538      	push	{r3, r4, r5, lr}
 8112cda:	4d07      	ldr	r5, [pc, #28]	@ (8112cf8 <_write_r+0x20>)
 8112cdc:	4604      	mov	r4, r0
 8112cde:	4608      	mov	r0, r1
 8112ce0:	4611      	mov	r1, r2
 8112ce2:	2200      	movs	r2, #0
 8112ce4:	602a      	str	r2, [r5, #0]
 8112ce6:	461a      	mov	r2, r3
 8112ce8:	f7ef fb52 	bl	8102390 <_write>
 8112cec:	1c43      	adds	r3, r0, #1
 8112cee:	d102      	bne.n	8112cf6 <_write_r+0x1e>
 8112cf0:	682b      	ldr	r3, [r5, #0]
 8112cf2:	b103      	cbz	r3, 8112cf6 <_write_r+0x1e>
 8112cf4:	6023      	str	r3, [r4, #0]
 8112cf6:	bd38      	pop	{r3, r4, r5, pc}
 8112cf8:	10005144 	.word	0x10005144

08112cfc <__errno>:
 8112cfc:	4b01      	ldr	r3, [pc, #4]	@ (8112d04 <__errno+0x8>)
 8112cfe:	6818      	ldr	r0, [r3, #0]
 8112d00:	4770      	bx	lr
 8112d02:	bf00      	nop
 8112d04:	100000c8 	.word	0x100000c8

08112d08 <__libc_init_array>:
 8112d08:	b570      	push	{r4, r5, r6, lr}
 8112d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8112d40 <__libc_init_array+0x38>)
 8112d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8112d44 <__libc_init_array+0x3c>)
 8112d0e:	1b64      	subs	r4, r4, r5
 8112d10:	10a4      	asrs	r4, r4, #2
 8112d12:	2600      	movs	r6, #0
 8112d14:	42a6      	cmp	r6, r4
 8112d16:	d109      	bne.n	8112d2c <__libc_init_array+0x24>
 8112d18:	4d0b      	ldr	r5, [pc, #44]	@ (8112d48 <__libc_init_array+0x40>)
 8112d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8112d4c <__libc_init_array+0x44>)
 8112d1c:	f004 f98a 	bl	8117034 <_init>
 8112d20:	1b64      	subs	r4, r4, r5
 8112d22:	10a4      	asrs	r4, r4, #2
 8112d24:	2600      	movs	r6, #0
 8112d26:	42a6      	cmp	r6, r4
 8112d28:	d105      	bne.n	8112d36 <__libc_init_array+0x2e>
 8112d2a:	bd70      	pop	{r4, r5, r6, pc}
 8112d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8112d30:	4798      	blx	r3
 8112d32:	3601      	adds	r6, #1
 8112d34:	e7ee      	b.n	8112d14 <__libc_init_array+0xc>
 8112d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8112d3a:	4798      	blx	r3
 8112d3c:	3601      	adds	r6, #1
 8112d3e:	e7f2      	b.n	8112d26 <__libc_init_array+0x1e>
 8112d40:	081179c0 	.word	0x081179c0
 8112d44:	081179c0 	.word	0x081179c0
 8112d48:	081179c0 	.word	0x081179c0
 8112d4c:	081179c4 	.word	0x081179c4

08112d50 <__retarget_lock_init_recursive>:
 8112d50:	4770      	bx	lr

08112d52 <__retarget_lock_acquire_recursive>:
 8112d52:	4770      	bx	lr

08112d54 <__retarget_lock_release_recursive>:
 8112d54:	4770      	bx	lr

08112d56 <memcpy>:
 8112d56:	440a      	add	r2, r1
 8112d58:	4291      	cmp	r1, r2
 8112d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8112d5e:	d100      	bne.n	8112d62 <memcpy+0xc>
 8112d60:	4770      	bx	lr
 8112d62:	b510      	push	{r4, lr}
 8112d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8112d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8112d6c:	4291      	cmp	r1, r2
 8112d6e:	d1f9      	bne.n	8112d64 <memcpy+0xe>
 8112d70:	bd10      	pop	{r4, pc}
	...

08112d74 <nanf>:
 8112d74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8112d7c <nanf+0x8>
 8112d78:	4770      	bx	lr
 8112d7a:	bf00      	nop
 8112d7c:	7fc00000 	.word	0x7fc00000

08112d80 <abort>:
 8112d80:	b508      	push	{r3, lr}
 8112d82:	2006      	movs	r0, #6
 8112d84:	f002 fd72 	bl	811586c <raise>
 8112d88:	2001      	movs	r0, #1
 8112d8a:	f7ef fad9 	bl	8102340 <_exit>

08112d8e <quorem>:
 8112d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112d92:	6903      	ldr	r3, [r0, #16]
 8112d94:	690c      	ldr	r4, [r1, #16]
 8112d96:	42a3      	cmp	r3, r4
 8112d98:	4607      	mov	r7, r0
 8112d9a:	db7e      	blt.n	8112e9a <quorem+0x10c>
 8112d9c:	3c01      	subs	r4, #1
 8112d9e:	f101 0814 	add.w	r8, r1, #20
 8112da2:	00a3      	lsls	r3, r4, #2
 8112da4:	f100 0514 	add.w	r5, r0, #20
 8112da8:	9300      	str	r3, [sp, #0]
 8112daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8112dae:	9301      	str	r3, [sp, #4]
 8112db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8112db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8112db8:	3301      	adds	r3, #1
 8112dba:	429a      	cmp	r2, r3
 8112dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8112dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8112dc4:	d32e      	bcc.n	8112e24 <quorem+0x96>
 8112dc6:	f04f 0a00 	mov.w	sl, #0
 8112dca:	46c4      	mov	ip, r8
 8112dcc:	46ae      	mov	lr, r5
 8112dce:	46d3      	mov	fp, sl
 8112dd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8112dd4:	b298      	uxth	r0, r3
 8112dd6:	fb06 a000 	mla	r0, r6, r0, sl
 8112dda:	0c02      	lsrs	r2, r0, #16
 8112ddc:	0c1b      	lsrs	r3, r3, #16
 8112dde:	fb06 2303 	mla	r3, r6, r3, r2
 8112de2:	f8de 2000 	ldr.w	r2, [lr]
 8112de6:	b280      	uxth	r0, r0
 8112de8:	b292      	uxth	r2, r2
 8112dea:	1a12      	subs	r2, r2, r0
 8112dec:	445a      	add	r2, fp
 8112dee:	f8de 0000 	ldr.w	r0, [lr]
 8112df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8112df6:	b29b      	uxth	r3, r3
 8112df8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8112dfc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8112e00:	b292      	uxth	r2, r2
 8112e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8112e06:	45e1      	cmp	r9, ip
 8112e08:	f84e 2b04 	str.w	r2, [lr], #4
 8112e0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8112e10:	d2de      	bcs.n	8112dd0 <quorem+0x42>
 8112e12:	9b00      	ldr	r3, [sp, #0]
 8112e14:	58eb      	ldr	r3, [r5, r3]
 8112e16:	b92b      	cbnz	r3, 8112e24 <quorem+0x96>
 8112e18:	9b01      	ldr	r3, [sp, #4]
 8112e1a:	3b04      	subs	r3, #4
 8112e1c:	429d      	cmp	r5, r3
 8112e1e:	461a      	mov	r2, r3
 8112e20:	d32f      	bcc.n	8112e82 <quorem+0xf4>
 8112e22:	613c      	str	r4, [r7, #16]
 8112e24:	4638      	mov	r0, r7
 8112e26:	f001 f90d 	bl	8114044 <__mcmp>
 8112e2a:	2800      	cmp	r0, #0
 8112e2c:	db25      	blt.n	8112e7a <quorem+0xec>
 8112e2e:	4629      	mov	r1, r5
 8112e30:	2000      	movs	r0, #0
 8112e32:	f858 2b04 	ldr.w	r2, [r8], #4
 8112e36:	f8d1 c000 	ldr.w	ip, [r1]
 8112e3a:	fa1f fe82 	uxth.w	lr, r2
 8112e3e:	fa1f f38c 	uxth.w	r3, ip
 8112e42:	eba3 030e 	sub.w	r3, r3, lr
 8112e46:	4403      	add	r3, r0
 8112e48:	0c12      	lsrs	r2, r2, #16
 8112e4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8112e4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8112e52:	b29b      	uxth	r3, r3
 8112e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8112e58:	45c1      	cmp	r9, r8
 8112e5a:	f841 3b04 	str.w	r3, [r1], #4
 8112e5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8112e62:	d2e6      	bcs.n	8112e32 <quorem+0xa4>
 8112e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8112e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8112e6c:	b922      	cbnz	r2, 8112e78 <quorem+0xea>
 8112e6e:	3b04      	subs	r3, #4
 8112e70:	429d      	cmp	r5, r3
 8112e72:	461a      	mov	r2, r3
 8112e74:	d30b      	bcc.n	8112e8e <quorem+0x100>
 8112e76:	613c      	str	r4, [r7, #16]
 8112e78:	3601      	adds	r6, #1
 8112e7a:	4630      	mov	r0, r6
 8112e7c:	b003      	add	sp, #12
 8112e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112e82:	6812      	ldr	r2, [r2, #0]
 8112e84:	3b04      	subs	r3, #4
 8112e86:	2a00      	cmp	r2, #0
 8112e88:	d1cb      	bne.n	8112e22 <quorem+0x94>
 8112e8a:	3c01      	subs	r4, #1
 8112e8c:	e7c6      	b.n	8112e1c <quorem+0x8e>
 8112e8e:	6812      	ldr	r2, [r2, #0]
 8112e90:	3b04      	subs	r3, #4
 8112e92:	2a00      	cmp	r2, #0
 8112e94:	d1ef      	bne.n	8112e76 <quorem+0xe8>
 8112e96:	3c01      	subs	r4, #1
 8112e98:	e7ea      	b.n	8112e70 <quorem+0xe2>
 8112e9a:	2000      	movs	r0, #0
 8112e9c:	e7ee      	b.n	8112e7c <quorem+0xee>
	...

08112ea0 <_dtoa_r>:
 8112ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112ea4:	69c7      	ldr	r7, [r0, #28]
 8112ea6:	b099      	sub	sp, #100	@ 0x64
 8112ea8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8112eac:	ec55 4b10 	vmov	r4, r5, d0
 8112eb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8112eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8112eb4:	4683      	mov	fp, r0
 8112eb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8112eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8112eba:	b97f      	cbnz	r7, 8112edc <_dtoa_r+0x3c>
 8112ebc:	2010      	movs	r0, #16
 8112ebe:	f7fe fd53 	bl	8111968 <malloc>
 8112ec2:	4602      	mov	r2, r0
 8112ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8112ec8:	b920      	cbnz	r0, 8112ed4 <_dtoa_r+0x34>
 8112eca:	4ba7      	ldr	r3, [pc, #668]	@ (8113168 <_dtoa_r+0x2c8>)
 8112ecc:	21ef      	movs	r1, #239	@ 0xef
 8112ece:	48a7      	ldr	r0, [pc, #668]	@ (811316c <_dtoa_r+0x2cc>)
 8112ed0:	f7fe fd28 	bl	8111924 <__assert_func>
 8112ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8112ed8:	6007      	str	r7, [r0, #0]
 8112eda:	60c7      	str	r7, [r0, #12]
 8112edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8112ee0:	6819      	ldr	r1, [r3, #0]
 8112ee2:	b159      	cbz	r1, 8112efc <_dtoa_r+0x5c>
 8112ee4:	685a      	ldr	r2, [r3, #4]
 8112ee6:	604a      	str	r2, [r1, #4]
 8112ee8:	2301      	movs	r3, #1
 8112eea:	4093      	lsls	r3, r2
 8112eec:	608b      	str	r3, [r1, #8]
 8112eee:	4658      	mov	r0, fp
 8112ef0:	f000 fe24 	bl	8113b3c <_Bfree>
 8112ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8112ef8:	2200      	movs	r2, #0
 8112efa:	601a      	str	r2, [r3, #0]
 8112efc:	1e2b      	subs	r3, r5, #0
 8112efe:	bfb9      	ittee	lt
 8112f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8112f04:	9303      	strlt	r3, [sp, #12]
 8112f06:	2300      	movge	r3, #0
 8112f08:	6033      	strge	r3, [r6, #0]
 8112f0a:	9f03      	ldr	r7, [sp, #12]
 8112f0c:	4b98      	ldr	r3, [pc, #608]	@ (8113170 <_dtoa_r+0x2d0>)
 8112f0e:	bfbc      	itt	lt
 8112f10:	2201      	movlt	r2, #1
 8112f12:	6032      	strlt	r2, [r6, #0]
 8112f14:	43bb      	bics	r3, r7
 8112f16:	d112      	bne.n	8112f3e <_dtoa_r+0x9e>
 8112f18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8112f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8112f1e:	6013      	str	r3, [r2, #0]
 8112f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8112f24:	4323      	orrs	r3, r4
 8112f26:	f000 854d 	beq.w	81139c4 <_dtoa_r+0xb24>
 8112f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112f2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8113184 <_dtoa_r+0x2e4>
 8112f30:	2b00      	cmp	r3, #0
 8112f32:	f000 854f 	beq.w	81139d4 <_dtoa_r+0xb34>
 8112f36:	f10a 0303 	add.w	r3, sl, #3
 8112f3a:	f000 bd49 	b.w	81139d0 <_dtoa_r+0xb30>
 8112f3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8112f42:	2200      	movs	r2, #0
 8112f44:	ec51 0b17 	vmov	r0, r1, d7
 8112f48:	2300      	movs	r3, #0
 8112f4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8112f4e:	f7ed fe53 	bl	8100bf8 <__aeabi_dcmpeq>
 8112f52:	4680      	mov	r8, r0
 8112f54:	b158      	cbz	r0, 8112f6e <_dtoa_r+0xce>
 8112f56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8112f58:	2301      	movs	r3, #1
 8112f5a:	6013      	str	r3, [r2, #0]
 8112f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112f5e:	b113      	cbz	r3, 8112f66 <_dtoa_r+0xc6>
 8112f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8112f62:	4b84      	ldr	r3, [pc, #528]	@ (8113174 <_dtoa_r+0x2d4>)
 8112f64:	6013      	str	r3, [r2, #0]
 8112f66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8113188 <_dtoa_r+0x2e8>
 8112f6a:	f000 bd33 	b.w	81139d4 <_dtoa_r+0xb34>
 8112f6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8112f72:	aa16      	add	r2, sp, #88	@ 0x58
 8112f74:	a917      	add	r1, sp, #92	@ 0x5c
 8112f76:	4658      	mov	r0, fp
 8112f78:	f001 f984 	bl	8114284 <__d2b>
 8112f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8112f80:	4681      	mov	r9, r0
 8112f82:	2e00      	cmp	r6, #0
 8112f84:	d077      	beq.n	8113076 <_dtoa_r+0x1d6>
 8112f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8112f88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8112f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8112f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8112f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8112fa0:	4619      	mov	r1, r3
 8112fa2:	2200      	movs	r2, #0
 8112fa4:	4b74      	ldr	r3, [pc, #464]	@ (8113178 <_dtoa_r+0x2d8>)
 8112fa6:	f7ed fa07 	bl	81003b8 <__aeabi_dsub>
 8112faa:	a369      	add	r3, pc, #420	@ (adr r3, 8113150 <_dtoa_r+0x2b0>)
 8112fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112fb0:	f7ed fbba 	bl	8100728 <__aeabi_dmul>
 8112fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8113158 <_dtoa_r+0x2b8>)
 8112fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112fba:	f7ed f9ff 	bl	81003bc <__adddf3>
 8112fbe:	4604      	mov	r4, r0
 8112fc0:	4630      	mov	r0, r6
 8112fc2:	460d      	mov	r5, r1
 8112fc4:	f7ed fb46 	bl	8100654 <__aeabi_i2d>
 8112fc8:	a365      	add	r3, pc, #404	@ (adr r3, 8113160 <_dtoa_r+0x2c0>)
 8112fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112fce:	f7ed fbab 	bl	8100728 <__aeabi_dmul>
 8112fd2:	4602      	mov	r2, r0
 8112fd4:	460b      	mov	r3, r1
 8112fd6:	4620      	mov	r0, r4
 8112fd8:	4629      	mov	r1, r5
 8112fda:	f7ed f9ef 	bl	81003bc <__adddf3>
 8112fde:	4604      	mov	r4, r0
 8112fe0:	460d      	mov	r5, r1
 8112fe2:	f7ed fe51 	bl	8100c88 <__aeabi_d2iz>
 8112fe6:	2200      	movs	r2, #0
 8112fe8:	4607      	mov	r7, r0
 8112fea:	2300      	movs	r3, #0
 8112fec:	4620      	mov	r0, r4
 8112fee:	4629      	mov	r1, r5
 8112ff0:	f7ed fe0c 	bl	8100c0c <__aeabi_dcmplt>
 8112ff4:	b140      	cbz	r0, 8113008 <_dtoa_r+0x168>
 8112ff6:	4638      	mov	r0, r7
 8112ff8:	f7ed fb2c 	bl	8100654 <__aeabi_i2d>
 8112ffc:	4622      	mov	r2, r4
 8112ffe:	462b      	mov	r3, r5
 8113000:	f7ed fdfa 	bl	8100bf8 <__aeabi_dcmpeq>
 8113004:	b900      	cbnz	r0, 8113008 <_dtoa_r+0x168>
 8113006:	3f01      	subs	r7, #1
 8113008:	2f16      	cmp	r7, #22
 811300a:	d851      	bhi.n	81130b0 <_dtoa_r+0x210>
 811300c:	4b5b      	ldr	r3, [pc, #364]	@ (811317c <_dtoa_r+0x2dc>)
 811300e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8113012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811301a:	f7ed fdf7 	bl	8100c0c <__aeabi_dcmplt>
 811301e:	2800      	cmp	r0, #0
 8113020:	d048      	beq.n	81130b4 <_dtoa_r+0x214>
 8113022:	3f01      	subs	r7, #1
 8113024:	2300      	movs	r3, #0
 8113026:	9312      	str	r3, [sp, #72]	@ 0x48
 8113028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 811302a:	1b9b      	subs	r3, r3, r6
 811302c:	1e5a      	subs	r2, r3, #1
 811302e:	bf44      	itt	mi
 8113030:	f1c3 0801 	rsbmi	r8, r3, #1
 8113034:	2300      	movmi	r3, #0
 8113036:	9208      	str	r2, [sp, #32]
 8113038:	bf54      	ite	pl
 811303a:	f04f 0800 	movpl.w	r8, #0
 811303e:	9308      	strmi	r3, [sp, #32]
 8113040:	2f00      	cmp	r7, #0
 8113042:	db39      	blt.n	81130b8 <_dtoa_r+0x218>
 8113044:	9b08      	ldr	r3, [sp, #32]
 8113046:	970f      	str	r7, [sp, #60]	@ 0x3c
 8113048:	443b      	add	r3, r7
 811304a:	9308      	str	r3, [sp, #32]
 811304c:	2300      	movs	r3, #0
 811304e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113052:	2b09      	cmp	r3, #9
 8113054:	d864      	bhi.n	8113120 <_dtoa_r+0x280>
 8113056:	2b05      	cmp	r3, #5
 8113058:	bfc4      	itt	gt
 811305a:	3b04      	subgt	r3, #4
 811305c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 811305e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113060:	f1a3 0302 	sub.w	r3, r3, #2
 8113064:	bfcc      	ite	gt
 8113066:	2400      	movgt	r4, #0
 8113068:	2401      	movle	r4, #1
 811306a:	2b03      	cmp	r3, #3
 811306c:	d863      	bhi.n	8113136 <_dtoa_r+0x296>
 811306e:	e8df f003 	tbb	[pc, r3]
 8113072:	372a      	.short	0x372a
 8113074:	5535      	.short	0x5535
 8113076:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 811307a:	441e      	add	r6, r3
 811307c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8113080:	2b20      	cmp	r3, #32
 8113082:	bfc1      	itttt	gt
 8113084:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8113088:	409f      	lslgt	r7, r3
 811308a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 811308e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8113092:	bfd6      	itet	le
 8113094:	f1c3 0320 	rsble	r3, r3, #32
 8113098:	ea47 0003 	orrgt.w	r0, r7, r3
 811309c:	fa04 f003 	lslle.w	r0, r4, r3
 81130a0:	f7ed fac8 	bl	8100634 <__aeabi_ui2d>
 81130a4:	2201      	movs	r2, #1
 81130a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 81130aa:	3e01      	subs	r6, #1
 81130ac:	9214      	str	r2, [sp, #80]	@ 0x50
 81130ae:	e777      	b.n	8112fa0 <_dtoa_r+0x100>
 81130b0:	2301      	movs	r3, #1
 81130b2:	e7b8      	b.n	8113026 <_dtoa_r+0x186>
 81130b4:	9012      	str	r0, [sp, #72]	@ 0x48
 81130b6:	e7b7      	b.n	8113028 <_dtoa_r+0x188>
 81130b8:	427b      	negs	r3, r7
 81130ba:	930a      	str	r3, [sp, #40]	@ 0x28
 81130bc:	2300      	movs	r3, #0
 81130be:	eba8 0807 	sub.w	r8, r8, r7
 81130c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 81130c4:	e7c4      	b.n	8113050 <_dtoa_r+0x1b0>
 81130c6:	2300      	movs	r3, #0
 81130c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81130ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81130cc:	2b00      	cmp	r3, #0
 81130ce:	dc35      	bgt.n	811313c <_dtoa_r+0x29c>
 81130d0:	2301      	movs	r3, #1
 81130d2:	9300      	str	r3, [sp, #0]
 81130d4:	9307      	str	r3, [sp, #28]
 81130d6:	461a      	mov	r2, r3
 81130d8:	920e      	str	r2, [sp, #56]	@ 0x38
 81130da:	e00b      	b.n	81130f4 <_dtoa_r+0x254>
 81130dc:	2301      	movs	r3, #1
 81130de:	e7f3      	b.n	81130c8 <_dtoa_r+0x228>
 81130e0:	2300      	movs	r3, #0
 81130e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 81130e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81130e6:	18fb      	adds	r3, r7, r3
 81130e8:	9300      	str	r3, [sp, #0]
 81130ea:	3301      	adds	r3, #1
 81130ec:	2b01      	cmp	r3, #1
 81130ee:	9307      	str	r3, [sp, #28]
 81130f0:	bfb8      	it	lt
 81130f2:	2301      	movlt	r3, #1
 81130f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 81130f8:	2100      	movs	r1, #0
 81130fa:	2204      	movs	r2, #4
 81130fc:	f102 0514 	add.w	r5, r2, #20
 8113100:	429d      	cmp	r5, r3
 8113102:	d91f      	bls.n	8113144 <_dtoa_r+0x2a4>
 8113104:	6041      	str	r1, [r0, #4]
 8113106:	4658      	mov	r0, fp
 8113108:	f000 fcd8 	bl	8113abc <_Balloc>
 811310c:	4682      	mov	sl, r0
 811310e:	2800      	cmp	r0, #0
 8113110:	d13c      	bne.n	811318c <_dtoa_r+0x2ec>
 8113112:	4b1b      	ldr	r3, [pc, #108]	@ (8113180 <_dtoa_r+0x2e0>)
 8113114:	4602      	mov	r2, r0
 8113116:	f240 11af 	movw	r1, #431	@ 0x1af
 811311a:	e6d8      	b.n	8112ece <_dtoa_r+0x2e>
 811311c:	2301      	movs	r3, #1
 811311e:	e7e0      	b.n	81130e2 <_dtoa_r+0x242>
 8113120:	2401      	movs	r4, #1
 8113122:	2300      	movs	r3, #0
 8113124:	9309      	str	r3, [sp, #36]	@ 0x24
 8113126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8113128:	f04f 33ff 	mov.w	r3, #4294967295
 811312c:	9300      	str	r3, [sp, #0]
 811312e:	9307      	str	r3, [sp, #28]
 8113130:	2200      	movs	r2, #0
 8113132:	2312      	movs	r3, #18
 8113134:	e7d0      	b.n	81130d8 <_dtoa_r+0x238>
 8113136:	2301      	movs	r3, #1
 8113138:	930b      	str	r3, [sp, #44]	@ 0x2c
 811313a:	e7f5      	b.n	8113128 <_dtoa_r+0x288>
 811313c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811313e:	9300      	str	r3, [sp, #0]
 8113140:	9307      	str	r3, [sp, #28]
 8113142:	e7d7      	b.n	81130f4 <_dtoa_r+0x254>
 8113144:	3101      	adds	r1, #1
 8113146:	0052      	lsls	r2, r2, #1
 8113148:	e7d8      	b.n	81130fc <_dtoa_r+0x25c>
 811314a:	bf00      	nop
 811314c:	f3af 8000 	nop.w
 8113150:	636f4361 	.word	0x636f4361
 8113154:	3fd287a7 	.word	0x3fd287a7
 8113158:	8b60c8b3 	.word	0x8b60c8b3
 811315c:	3fc68a28 	.word	0x3fc68a28
 8113160:	509f79fb 	.word	0x509f79fb
 8113164:	3fd34413 	.word	0x3fd34413
 8113168:	08117670 	.word	0x08117670
 811316c:	081176ee 	.word	0x081176ee
 8113170:	7ff00000 	.word	0x7ff00000
 8113174:	08117648 	.word	0x08117648
 8113178:	3ff80000 	.word	0x3ff80000
 811317c:	081177e8 	.word	0x081177e8
 8113180:	08117746 	.word	0x08117746
 8113184:	081176ea 	.word	0x081176ea
 8113188:	08117647 	.word	0x08117647
 811318c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8113190:	6018      	str	r0, [r3, #0]
 8113192:	9b07      	ldr	r3, [sp, #28]
 8113194:	2b0e      	cmp	r3, #14
 8113196:	f200 80a4 	bhi.w	81132e2 <_dtoa_r+0x442>
 811319a:	2c00      	cmp	r4, #0
 811319c:	f000 80a1 	beq.w	81132e2 <_dtoa_r+0x442>
 81131a0:	2f00      	cmp	r7, #0
 81131a2:	dd33      	ble.n	811320c <_dtoa_r+0x36c>
 81131a4:	4bad      	ldr	r3, [pc, #692]	@ (811345c <_dtoa_r+0x5bc>)
 81131a6:	f007 020f 	and.w	r2, r7, #15
 81131aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81131ae:	ed93 7b00 	vldr	d7, [r3]
 81131b2:	05f8      	lsls	r0, r7, #23
 81131b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 81131b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 81131bc:	d516      	bpl.n	81131ec <_dtoa_r+0x34c>
 81131be:	4ba8      	ldr	r3, [pc, #672]	@ (8113460 <_dtoa_r+0x5c0>)
 81131c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81131c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81131c8:	f7ed fbd8 	bl	810097c <__aeabi_ddiv>
 81131cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81131d0:	f004 040f 	and.w	r4, r4, #15
 81131d4:	2603      	movs	r6, #3
 81131d6:	4da2      	ldr	r5, [pc, #648]	@ (8113460 <_dtoa_r+0x5c0>)
 81131d8:	b954      	cbnz	r4, 81131f0 <_dtoa_r+0x350>
 81131da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81131de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81131e2:	f7ed fbcb 	bl	810097c <__aeabi_ddiv>
 81131e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81131ea:	e028      	b.n	811323e <_dtoa_r+0x39e>
 81131ec:	2602      	movs	r6, #2
 81131ee:	e7f2      	b.n	81131d6 <_dtoa_r+0x336>
 81131f0:	07e1      	lsls	r1, r4, #31
 81131f2:	d508      	bpl.n	8113206 <_dtoa_r+0x366>
 81131f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81131f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 81131fc:	f7ed fa94 	bl	8100728 <__aeabi_dmul>
 8113200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8113204:	3601      	adds	r6, #1
 8113206:	1064      	asrs	r4, r4, #1
 8113208:	3508      	adds	r5, #8
 811320a:	e7e5      	b.n	81131d8 <_dtoa_r+0x338>
 811320c:	f000 80d2 	beq.w	81133b4 <_dtoa_r+0x514>
 8113210:	427c      	negs	r4, r7
 8113212:	4b92      	ldr	r3, [pc, #584]	@ (811345c <_dtoa_r+0x5bc>)
 8113214:	4d92      	ldr	r5, [pc, #584]	@ (8113460 <_dtoa_r+0x5c0>)
 8113216:	f004 020f 	and.w	r2, r4, #15
 811321a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8113226:	f7ed fa7f 	bl	8100728 <__aeabi_dmul>
 811322a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811322e:	1124      	asrs	r4, r4, #4
 8113230:	2300      	movs	r3, #0
 8113232:	2602      	movs	r6, #2
 8113234:	2c00      	cmp	r4, #0
 8113236:	f040 80b2 	bne.w	811339e <_dtoa_r+0x4fe>
 811323a:	2b00      	cmp	r3, #0
 811323c:	d1d3      	bne.n	81131e6 <_dtoa_r+0x346>
 811323e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8113240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8113244:	2b00      	cmp	r3, #0
 8113246:	f000 80b7 	beq.w	81133b8 <_dtoa_r+0x518>
 811324a:	4b86      	ldr	r3, [pc, #536]	@ (8113464 <_dtoa_r+0x5c4>)
 811324c:	2200      	movs	r2, #0
 811324e:	4620      	mov	r0, r4
 8113250:	4629      	mov	r1, r5
 8113252:	f7ed fcdb 	bl	8100c0c <__aeabi_dcmplt>
 8113256:	2800      	cmp	r0, #0
 8113258:	f000 80ae 	beq.w	81133b8 <_dtoa_r+0x518>
 811325c:	9b07      	ldr	r3, [sp, #28]
 811325e:	2b00      	cmp	r3, #0
 8113260:	f000 80aa 	beq.w	81133b8 <_dtoa_r+0x518>
 8113264:	9b00      	ldr	r3, [sp, #0]
 8113266:	2b00      	cmp	r3, #0
 8113268:	dd37      	ble.n	81132da <_dtoa_r+0x43a>
 811326a:	1e7b      	subs	r3, r7, #1
 811326c:	9304      	str	r3, [sp, #16]
 811326e:	4620      	mov	r0, r4
 8113270:	4b7d      	ldr	r3, [pc, #500]	@ (8113468 <_dtoa_r+0x5c8>)
 8113272:	2200      	movs	r2, #0
 8113274:	4629      	mov	r1, r5
 8113276:	f7ed fa57 	bl	8100728 <__aeabi_dmul>
 811327a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811327e:	9c00      	ldr	r4, [sp, #0]
 8113280:	3601      	adds	r6, #1
 8113282:	4630      	mov	r0, r6
 8113284:	f7ed f9e6 	bl	8100654 <__aeabi_i2d>
 8113288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811328c:	f7ed fa4c 	bl	8100728 <__aeabi_dmul>
 8113290:	4b76      	ldr	r3, [pc, #472]	@ (811346c <_dtoa_r+0x5cc>)
 8113292:	2200      	movs	r2, #0
 8113294:	f7ed f892 	bl	81003bc <__adddf3>
 8113298:	4605      	mov	r5, r0
 811329a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 811329e:	2c00      	cmp	r4, #0
 81132a0:	f040 808d 	bne.w	81133be <_dtoa_r+0x51e>
 81132a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81132a8:	4b71      	ldr	r3, [pc, #452]	@ (8113470 <_dtoa_r+0x5d0>)
 81132aa:	2200      	movs	r2, #0
 81132ac:	f7ed f884 	bl	81003b8 <__aeabi_dsub>
 81132b0:	4602      	mov	r2, r0
 81132b2:	460b      	mov	r3, r1
 81132b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81132b8:	462a      	mov	r2, r5
 81132ba:	4633      	mov	r3, r6
 81132bc:	f7ed fcc4 	bl	8100c48 <__aeabi_dcmpgt>
 81132c0:	2800      	cmp	r0, #0
 81132c2:	f040 828b 	bne.w	81137dc <_dtoa_r+0x93c>
 81132c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81132ca:	462a      	mov	r2, r5
 81132cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81132d0:	f7ed fc9c 	bl	8100c0c <__aeabi_dcmplt>
 81132d4:	2800      	cmp	r0, #0
 81132d6:	f040 8128 	bne.w	811352a <_dtoa_r+0x68a>
 81132da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 81132de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 81132e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81132e4:	2b00      	cmp	r3, #0
 81132e6:	f2c0 815a 	blt.w	811359e <_dtoa_r+0x6fe>
 81132ea:	2f0e      	cmp	r7, #14
 81132ec:	f300 8157 	bgt.w	811359e <_dtoa_r+0x6fe>
 81132f0:	4b5a      	ldr	r3, [pc, #360]	@ (811345c <_dtoa_r+0x5bc>)
 81132f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81132f6:	ed93 7b00 	vldr	d7, [r3]
 81132fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81132fc:	2b00      	cmp	r3, #0
 81132fe:	ed8d 7b00 	vstr	d7, [sp]
 8113302:	da03      	bge.n	811330c <_dtoa_r+0x46c>
 8113304:	9b07      	ldr	r3, [sp, #28]
 8113306:	2b00      	cmp	r3, #0
 8113308:	f340 8101 	ble.w	811350e <_dtoa_r+0x66e>
 811330c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8113310:	4656      	mov	r6, sl
 8113312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8113316:	4620      	mov	r0, r4
 8113318:	4629      	mov	r1, r5
 811331a:	f7ed fb2f 	bl	810097c <__aeabi_ddiv>
 811331e:	f7ed fcb3 	bl	8100c88 <__aeabi_d2iz>
 8113322:	4680      	mov	r8, r0
 8113324:	f7ed f996 	bl	8100654 <__aeabi_i2d>
 8113328:	e9dd 2300 	ldrd	r2, r3, [sp]
 811332c:	f7ed f9fc 	bl	8100728 <__aeabi_dmul>
 8113330:	4602      	mov	r2, r0
 8113332:	460b      	mov	r3, r1
 8113334:	4620      	mov	r0, r4
 8113336:	4629      	mov	r1, r5
 8113338:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 811333c:	f7ed f83c 	bl	81003b8 <__aeabi_dsub>
 8113340:	f806 4b01 	strb.w	r4, [r6], #1
 8113344:	9d07      	ldr	r5, [sp, #28]
 8113346:	eba6 040a 	sub.w	r4, r6, sl
 811334a:	42a5      	cmp	r5, r4
 811334c:	4602      	mov	r2, r0
 811334e:	460b      	mov	r3, r1
 8113350:	f040 8117 	bne.w	8113582 <_dtoa_r+0x6e2>
 8113354:	f7ed f832 	bl	81003bc <__adddf3>
 8113358:	e9dd 2300 	ldrd	r2, r3, [sp]
 811335c:	4604      	mov	r4, r0
 811335e:	460d      	mov	r5, r1
 8113360:	f7ed fc72 	bl	8100c48 <__aeabi_dcmpgt>
 8113364:	2800      	cmp	r0, #0
 8113366:	f040 80f9 	bne.w	811355c <_dtoa_r+0x6bc>
 811336a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811336e:	4620      	mov	r0, r4
 8113370:	4629      	mov	r1, r5
 8113372:	f7ed fc41 	bl	8100bf8 <__aeabi_dcmpeq>
 8113376:	b118      	cbz	r0, 8113380 <_dtoa_r+0x4e0>
 8113378:	f018 0f01 	tst.w	r8, #1
 811337c:	f040 80ee 	bne.w	811355c <_dtoa_r+0x6bc>
 8113380:	4649      	mov	r1, r9
 8113382:	4658      	mov	r0, fp
 8113384:	f000 fbda 	bl	8113b3c <_Bfree>
 8113388:	2300      	movs	r3, #0
 811338a:	7033      	strb	r3, [r6, #0]
 811338c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 811338e:	3701      	adds	r7, #1
 8113390:	601f      	str	r7, [r3, #0]
 8113392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8113394:	2b00      	cmp	r3, #0
 8113396:	f000 831d 	beq.w	81139d4 <_dtoa_r+0xb34>
 811339a:	601e      	str	r6, [r3, #0]
 811339c:	e31a      	b.n	81139d4 <_dtoa_r+0xb34>
 811339e:	07e2      	lsls	r2, r4, #31
 81133a0:	d505      	bpl.n	81133ae <_dtoa_r+0x50e>
 81133a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 81133a6:	f7ed f9bf 	bl	8100728 <__aeabi_dmul>
 81133aa:	3601      	adds	r6, #1
 81133ac:	2301      	movs	r3, #1
 81133ae:	1064      	asrs	r4, r4, #1
 81133b0:	3508      	adds	r5, #8
 81133b2:	e73f      	b.n	8113234 <_dtoa_r+0x394>
 81133b4:	2602      	movs	r6, #2
 81133b6:	e742      	b.n	811323e <_dtoa_r+0x39e>
 81133b8:	9c07      	ldr	r4, [sp, #28]
 81133ba:	9704      	str	r7, [sp, #16]
 81133bc:	e761      	b.n	8113282 <_dtoa_r+0x3e2>
 81133be:	4b27      	ldr	r3, [pc, #156]	@ (811345c <_dtoa_r+0x5bc>)
 81133c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81133c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81133c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81133ca:	4454      	add	r4, sl
 81133cc:	2900      	cmp	r1, #0
 81133ce:	d053      	beq.n	8113478 <_dtoa_r+0x5d8>
 81133d0:	4928      	ldr	r1, [pc, #160]	@ (8113474 <_dtoa_r+0x5d4>)
 81133d2:	2000      	movs	r0, #0
 81133d4:	f7ed fad2 	bl	810097c <__aeabi_ddiv>
 81133d8:	4633      	mov	r3, r6
 81133da:	462a      	mov	r2, r5
 81133dc:	f7ec ffec 	bl	81003b8 <__aeabi_dsub>
 81133e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 81133e4:	4656      	mov	r6, sl
 81133e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81133ea:	f7ed fc4d 	bl	8100c88 <__aeabi_d2iz>
 81133ee:	4605      	mov	r5, r0
 81133f0:	f7ed f930 	bl	8100654 <__aeabi_i2d>
 81133f4:	4602      	mov	r2, r0
 81133f6:	460b      	mov	r3, r1
 81133f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81133fc:	f7ec ffdc 	bl	81003b8 <__aeabi_dsub>
 8113400:	3530      	adds	r5, #48	@ 0x30
 8113402:	4602      	mov	r2, r0
 8113404:	460b      	mov	r3, r1
 8113406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 811340a:	f806 5b01 	strb.w	r5, [r6], #1
 811340e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8113412:	f7ed fbfb 	bl	8100c0c <__aeabi_dcmplt>
 8113416:	2800      	cmp	r0, #0
 8113418:	d171      	bne.n	81134fe <_dtoa_r+0x65e>
 811341a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811341e:	4911      	ldr	r1, [pc, #68]	@ (8113464 <_dtoa_r+0x5c4>)
 8113420:	2000      	movs	r0, #0
 8113422:	f7ec ffc9 	bl	81003b8 <__aeabi_dsub>
 8113426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 811342a:	f7ed fbef 	bl	8100c0c <__aeabi_dcmplt>
 811342e:	2800      	cmp	r0, #0
 8113430:	f040 8095 	bne.w	811355e <_dtoa_r+0x6be>
 8113434:	42a6      	cmp	r6, r4
 8113436:	f43f af50 	beq.w	81132da <_dtoa_r+0x43a>
 811343a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 811343e:	4b0a      	ldr	r3, [pc, #40]	@ (8113468 <_dtoa_r+0x5c8>)
 8113440:	2200      	movs	r2, #0
 8113442:	f7ed f971 	bl	8100728 <__aeabi_dmul>
 8113446:	4b08      	ldr	r3, [pc, #32]	@ (8113468 <_dtoa_r+0x5c8>)
 8113448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 811344c:	2200      	movs	r2, #0
 811344e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8113452:	f7ed f969 	bl	8100728 <__aeabi_dmul>
 8113456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811345a:	e7c4      	b.n	81133e6 <_dtoa_r+0x546>
 811345c:	081177e8 	.word	0x081177e8
 8113460:	081177c0 	.word	0x081177c0
 8113464:	3ff00000 	.word	0x3ff00000
 8113468:	40240000 	.word	0x40240000
 811346c:	401c0000 	.word	0x401c0000
 8113470:	40140000 	.word	0x40140000
 8113474:	3fe00000 	.word	0x3fe00000
 8113478:	4631      	mov	r1, r6
 811347a:	4628      	mov	r0, r5
 811347c:	f7ed f954 	bl	8100728 <__aeabi_dmul>
 8113480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8113484:	9415      	str	r4, [sp, #84]	@ 0x54
 8113486:	4656      	mov	r6, sl
 8113488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811348c:	f7ed fbfc 	bl	8100c88 <__aeabi_d2iz>
 8113490:	4605      	mov	r5, r0
 8113492:	f7ed f8df 	bl	8100654 <__aeabi_i2d>
 8113496:	4602      	mov	r2, r0
 8113498:	460b      	mov	r3, r1
 811349a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811349e:	f7ec ff8b 	bl	81003b8 <__aeabi_dsub>
 81134a2:	3530      	adds	r5, #48	@ 0x30
 81134a4:	f806 5b01 	strb.w	r5, [r6], #1
 81134a8:	4602      	mov	r2, r0
 81134aa:	460b      	mov	r3, r1
 81134ac:	42a6      	cmp	r6, r4
 81134ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81134b2:	f04f 0200 	mov.w	r2, #0
 81134b6:	d124      	bne.n	8113502 <_dtoa_r+0x662>
 81134b8:	4bac      	ldr	r3, [pc, #688]	@ (811376c <_dtoa_r+0x8cc>)
 81134ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 81134be:	f7ec ff7d 	bl	81003bc <__adddf3>
 81134c2:	4602      	mov	r2, r0
 81134c4:	460b      	mov	r3, r1
 81134c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81134ca:	f7ed fbbd 	bl	8100c48 <__aeabi_dcmpgt>
 81134ce:	2800      	cmp	r0, #0
 81134d0:	d145      	bne.n	811355e <_dtoa_r+0x6be>
 81134d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81134d6:	49a5      	ldr	r1, [pc, #660]	@ (811376c <_dtoa_r+0x8cc>)
 81134d8:	2000      	movs	r0, #0
 81134da:	f7ec ff6d 	bl	81003b8 <__aeabi_dsub>
 81134de:	4602      	mov	r2, r0
 81134e0:	460b      	mov	r3, r1
 81134e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81134e6:	f7ed fb91 	bl	8100c0c <__aeabi_dcmplt>
 81134ea:	2800      	cmp	r0, #0
 81134ec:	f43f aef5 	beq.w	81132da <_dtoa_r+0x43a>
 81134f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 81134f2:	1e73      	subs	r3, r6, #1
 81134f4:	9315      	str	r3, [sp, #84]	@ 0x54
 81134f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 81134fa:	2b30      	cmp	r3, #48	@ 0x30
 81134fc:	d0f8      	beq.n	81134f0 <_dtoa_r+0x650>
 81134fe:	9f04      	ldr	r7, [sp, #16]
 8113500:	e73e      	b.n	8113380 <_dtoa_r+0x4e0>
 8113502:	4b9b      	ldr	r3, [pc, #620]	@ (8113770 <_dtoa_r+0x8d0>)
 8113504:	f7ed f910 	bl	8100728 <__aeabi_dmul>
 8113508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811350c:	e7bc      	b.n	8113488 <_dtoa_r+0x5e8>
 811350e:	d10c      	bne.n	811352a <_dtoa_r+0x68a>
 8113510:	4b98      	ldr	r3, [pc, #608]	@ (8113774 <_dtoa_r+0x8d4>)
 8113512:	2200      	movs	r2, #0
 8113514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113518:	f7ed f906 	bl	8100728 <__aeabi_dmul>
 811351c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8113520:	f7ed fb88 	bl	8100c34 <__aeabi_dcmpge>
 8113524:	2800      	cmp	r0, #0
 8113526:	f000 8157 	beq.w	81137d8 <_dtoa_r+0x938>
 811352a:	2400      	movs	r4, #0
 811352c:	4625      	mov	r5, r4
 811352e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8113530:	43db      	mvns	r3, r3
 8113532:	9304      	str	r3, [sp, #16]
 8113534:	4656      	mov	r6, sl
 8113536:	2700      	movs	r7, #0
 8113538:	4621      	mov	r1, r4
 811353a:	4658      	mov	r0, fp
 811353c:	f000 fafe 	bl	8113b3c <_Bfree>
 8113540:	2d00      	cmp	r5, #0
 8113542:	d0dc      	beq.n	81134fe <_dtoa_r+0x65e>
 8113544:	b12f      	cbz	r7, 8113552 <_dtoa_r+0x6b2>
 8113546:	42af      	cmp	r7, r5
 8113548:	d003      	beq.n	8113552 <_dtoa_r+0x6b2>
 811354a:	4639      	mov	r1, r7
 811354c:	4658      	mov	r0, fp
 811354e:	f000 faf5 	bl	8113b3c <_Bfree>
 8113552:	4629      	mov	r1, r5
 8113554:	4658      	mov	r0, fp
 8113556:	f000 faf1 	bl	8113b3c <_Bfree>
 811355a:	e7d0      	b.n	81134fe <_dtoa_r+0x65e>
 811355c:	9704      	str	r7, [sp, #16]
 811355e:	4633      	mov	r3, r6
 8113560:	461e      	mov	r6, r3
 8113562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113566:	2a39      	cmp	r2, #57	@ 0x39
 8113568:	d107      	bne.n	811357a <_dtoa_r+0x6da>
 811356a:	459a      	cmp	sl, r3
 811356c:	d1f8      	bne.n	8113560 <_dtoa_r+0x6c0>
 811356e:	9a04      	ldr	r2, [sp, #16]
 8113570:	3201      	adds	r2, #1
 8113572:	9204      	str	r2, [sp, #16]
 8113574:	2230      	movs	r2, #48	@ 0x30
 8113576:	f88a 2000 	strb.w	r2, [sl]
 811357a:	781a      	ldrb	r2, [r3, #0]
 811357c:	3201      	adds	r2, #1
 811357e:	701a      	strb	r2, [r3, #0]
 8113580:	e7bd      	b.n	81134fe <_dtoa_r+0x65e>
 8113582:	4b7b      	ldr	r3, [pc, #492]	@ (8113770 <_dtoa_r+0x8d0>)
 8113584:	2200      	movs	r2, #0
 8113586:	f7ed f8cf 	bl	8100728 <__aeabi_dmul>
 811358a:	2200      	movs	r2, #0
 811358c:	2300      	movs	r3, #0
 811358e:	4604      	mov	r4, r0
 8113590:	460d      	mov	r5, r1
 8113592:	f7ed fb31 	bl	8100bf8 <__aeabi_dcmpeq>
 8113596:	2800      	cmp	r0, #0
 8113598:	f43f aebb 	beq.w	8113312 <_dtoa_r+0x472>
 811359c:	e6f0      	b.n	8113380 <_dtoa_r+0x4e0>
 811359e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 81135a0:	2a00      	cmp	r2, #0
 81135a2:	f000 80db 	beq.w	811375c <_dtoa_r+0x8bc>
 81135a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81135a8:	2a01      	cmp	r2, #1
 81135aa:	f300 80bf 	bgt.w	811372c <_dtoa_r+0x88c>
 81135ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 81135b0:	2a00      	cmp	r2, #0
 81135b2:	f000 80b7 	beq.w	8113724 <_dtoa_r+0x884>
 81135b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81135ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81135bc:	4646      	mov	r6, r8
 81135be:	9a08      	ldr	r2, [sp, #32]
 81135c0:	2101      	movs	r1, #1
 81135c2:	441a      	add	r2, r3
 81135c4:	4658      	mov	r0, fp
 81135c6:	4498      	add	r8, r3
 81135c8:	9208      	str	r2, [sp, #32]
 81135ca:	f000 fbb5 	bl	8113d38 <__i2b>
 81135ce:	4605      	mov	r5, r0
 81135d0:	b15e      	cbz	r6, 81135ea <_dtoa_r+0x74a>
 81135d2:	9b08      	ldr	r3, [sp, #32]
 81135d4:	2b00      	cmp	r3, #0
 81135d6:	dd08      	ble.n	81135ea <_dtoa_r+0x74a>
 81135d8:	42b3      	cmp	r3, r6
 81135da:	9a08      	ldr	r2, [sp, #32]
 81135dc:	bfa8      	it	ge
 81135de:	4633      	movge	r3, r6
 81135e0:	eba8 0803 	sub.w	r8, r8, r3
 81135e4:	1af6      	subs	r6, r6, r3
 81135e6:	1ad3      	subs	r3, r2, r3
 81135e8:	9308      	str	r3, [sp, #32]
 81135ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81135ec:	b1f3      	cbz	r3, 811362c <_dtoa_r+0x78c>
 81135ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81135f0:	2b00      	cmp	r3, #0
 81135f2:	f000 80b7 	beq.w	8113764 <_dtoa_r+0x8c4>
 81135f6:	b18c      	cbz	r4, 811361c <_dtoa_r+0x77c>
 81135f8:	4629      	mov	r1, r5
 81135fa:	4622      	mov	r2, r4
 81135fc:	4658      	mov	r0, fp
 81135fe:	f000 fc5b 	bl	8113eb8 <__pow5mult>
 8113602:	464a      	mov	r2, r9
 8113604:	4601      	mov	r1, r0
 8113606:	4605      	mov	r5, r0
 8113608:	4658      	mov	r0, fp
 811360a:	f000 fbab 	bl	8113d64 <__multiply>
 811360e:	4649      	mov	r1, r9
 8113610:	9004      	str	r0, [sp, #16]
 8113612:	4658      	mov	r0, fp
 8113614:	f000 fa92 	bl	8113b3c <_Bfree>
 8113618:	9b04      	ldr	r3, [sp, #16]
 811361a:	4699      	mov	r9, r3
 811361c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811361e:	1b1a      	subs	r2, r3, r4
 8113620:	d004      	beq.n	811362c <_dtoa_r+0x78c>
 8113622:	4649      	mov	r1, r9
 8113624:	4658      	mov	r0, fp
 8113626:	f000 fc47 	bl	8113eb8 <__pow5mult>
 811362a:	4681      	mov	r9, r0
 811362c:	2101      	movs	r1, #1
 811362e:	4658      	mov	r0, fp
 8113630:	f000 fb82 	bl	8113d38 <__i2b>
 8113634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113636:	4604      	mov	r4, r0
 8113638:	2b00      	cmp	r3, #0
 811363a:	f000 81cf 	beq.w	81139dc <_dtoa_r+0xb3c>
 811363e:	461a      	mov	r2, r3
 8113640:	4601      	mov	r1, r0
 8113642:	4658      	mov	r0, fp
 8113644:	f000 fc38 	bl	8113eb8 <__pow5mult>
 8113648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811364a:	2b01      	cmp	r3, #1
 811364c:	4604      	mov	r4, r0
 811364e:	f300 8095 	bgt.w	811377c <_dtoa_r+0x8dc>
 8113652:	9b02      	ldr	r3, [sp, #8]
 8113654:	2b00      	cmp	r3, #0
 8113656:	f040 8087 	bne.w	8113768 <_dtoa_r+0x8c8>
 811365a:	9b03      	ldr	r3, [sp, #12]
 811365c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8113660:	2b00      	cmp	r3, #0
 8113662:	f040 8089 	bne.w	8113778 <_dtoa_r+0x8d8>
 8113666:	9b03      	ldr	r3, [sp, #12]
 8113668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 811366c:	0d1b      	lsrs	r3, r3, #20
 811366e:	051b      	lsls	r3, r3, #20
 8113670:	b12b      	cbz	r3, 811367e <_dtoa_r+0x7de>
 8113672:	9b08      	ldr	r3, [sp, #32]
 8113674:	3301      	adds	r3, #1
 8113676:	9308      	str	r3, [sp, #32]
 8113678:	f108 0801 	add.w	r8, r8, #1
 811367c:	2301      	movs	r3, #1
 811367e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113682:	2b00      	cmp	r3, #0
 8113684:	f000 81b0 	beq.w	81139e8 <_dtoa_r+0xb48>
 8113688:	6923      	ldr	r3, [r4, #16]
 811368a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 811368e:	6918      	ldr	r0, [r3, #16]
 8113690:	f000 fb06 	bl	8113ca0 <__hi0bits>
 8113694:	f1c0 0020 	rsb	r0, r0, #32
 8113698:	9b08      	ldr	r3, [sp, #32]
 811369a:	4418      	add	r0, r3
 811369c:	f010 001f 	ands.w	r0, r0, #31
 81136a0:	d077      	beq.n	8113792 <_dtoa_r+0x8f2>
 81136a2:	f1c0 0320 	rsb	r3, r0, #32
 81136a6:	2b04      	cmp	r3, #4
 81136a8:	dd6b      	ble.n	8113782 <_dtoa_r+0x8e2>
 81136aa:	9b08      	ldr	r3, [sp, #32]
 81136ac:	f1c0 001c 	rsb	r0, r0, #28
 81136b0:	4403      	add	r3, r0
 81136b2:	4480      	add	r8, r0
 81136b4:	4406      	add	r6, r0
 81136b6:	9308      	str	r3, [sp, #32]
 81136b8:	f1b8 0f00 	cmp.w	r8, #0
 81136bc:	dd05      	ble.n	81136ca <_dtoa_r+0x82a>
 81136be:	4649      	mov	r1, r9
 81136c0:	4642      	mov	r2, r8
 81136c2:	4658      	mov	r0, fp
 81136c4:	f000 fc52 	bl	8113f6c <__lshift>
 81136c8:	4681      	mov	r9, r0
 81136ca:	9b08      	ldr	r3, [sp, #32]
 81136cc:	2b00      	cmp	r3, #0
 81136ce:	dd05      	ble.n	81136dc <_dtoa_r+0x83c>
 81136d0:	4621      	mov	r1, r4
 81136d2:	461a      	mov	r2, r3
 81136d4:	4658      	mov	r0, fp
 81136d6:	f000 fc49 	bl	8113f6c <__lshift>
 81136da:	4604      	mov	r4, r0
 81136dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81136de:	2b00      	cmp	r3, #0
 81136e0:	d059      	beq.n	8113796 <_dtoa_r+0x8f6>
 81136e2:	4621      	mov	r1, r4
 81136e4:	4648      	mov	r0, r9
 81136e6:	f000 fcad 	bl	8114044 <__mcmp>
 81136ea:	2800      	cmp	r0, #0
 81136ec:	da53      	bge.n	8113796 <_dtoa_r+0x8f6>
 81136ee:	1e7b      	subs	r3, r7, #1
 81136f0:	9304      	str	r3, [sp, #16]
 81136f2:	4649      	mov	r1, r9
 81136f4:	2300      	movs	r3, #0
 81136f6:	220a      	movs	r2, #10
 81136f8:	4658      	mov	r0, fp
 81136fa:	f000 fa41 	bl	8113b80 <__multadd>
 81136fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113700:	4681      	mov	r9, r0
 8113702:	2b00      	cmp	r3, #0
 8113704:	f000 8172 	beq.w	81139ec <_dtoa_r+0xb4c>
 8113708:	2300      	movs	r3, #0
 811370a:	4629      	mov	r1, r5
 811370c:	220a      	movs	r2, #10
 811370e:	4658      	mov	r0, fp
 8113710:	f000 fa36 	bl	8113b80 <__multadd>
 8113714:	9b00      	ldr	r3, [sp, #0]
 8113716:	2b00      	cmp	r3, #0
 8113718:	4605      	mov	r5, r0
 811371a:	dc67      	bgt.n	81137ec <_dtoa_r+0x94c>
 811371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811371e:	2b02      	cmp	r3, #2
 8113720:	dc41      	bgt.n	81137a6 <_dtoa_r+0x906>
 8113722:	e063      	b.n	81137ec <_dtoa_r+0x94c>
 8113724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8113726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 811372a:	e746      	b.n	81135ba <_dtoa_r+0x71a>
 811372c:	9b07      	ldr	r3, [sp, #28]
 811372e:	1e5c      	subs	r4, r3, #1
 8113730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113732:	42a3      	cmp	r3, r4
 8113734:	bfbf      	itttt	lt
 8113736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8113738:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 811373a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 811373c:	1ae3      	sublt	r3, r4, r3
 811373e:	bfb4      	ite	lt
 8113740:	18d2      	addlt	r2, r2, r3
 8113742:	1b1c      	subge	r4, r3, r4
 8113744:	9b07      	ldr	r3, [sp, #28]
 8113746:	bfbc      	itt	lt
 8113748:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 811374a:	2400      	movlt	r4, #0
 811374c:	2b00      	cmp	r3, #0
 811374e:	bfb5      	itete	lt
 8113750:	eba8 0603 	sublt.w	r6, r8, r3
 8113754:	9b07      	ldrge	r3, [sp, #28]
 8113756:	2300      	movlt	r3, #0
 8113758:	4646      	movge	r6, r8
 811375a:	e730      	b.n	81135be <_dtoa_r+0x71e>
 811375c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 811375e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8113760:	4646      	mov	r6, r8
 8113762:	e735      	b.n	81135d0 <_dtoa_r+0x730>
 8113764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8113766:	e75c      	b.n	8113622 <_dtoa_r+0x782>
 8113768:	2300      	movs	r3, #0
 811376a:	e788      	b.n	811367e <_dtoa_r+0x7de>
 811376c:	3fe00000 	.word	0x3fe00000
 8113770:	40240000 	.word	0x40240000
 8113774:	40140000 	.word	0x40140000
 8113778:	9b02      	ldr	r3, [sp, #8]
 811377a:	e780      	b.n	811367e <_dtoa_r+0x7de>
 811377c:	2300      	movs	r3, #0
 811377e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113780:	e782      	b.n	8113688 <_dtoa_r+0x7e8>
 8113782:	d099      	beq.n	81136b8 <_dtoa_r+0x818>
 8113784:	9a08      	ldr	r2, [sp, #32]
 8113786:	331c      	adds	r3, #28
 8113788:	441a      	add	r2, r3
 811378a:	4498      	add	r8, r3
 811378c:	441e      	add	r6, r3
 811378e:	9208      	str	r2, [sp, #32]
 8113790:	e792      	b.n	81136b8 <_dtoa_r+0x818>
 8113792:	4603      	mov	r3, r0
 8113794:	e7f6      	b.n	8113784 <_dtoa_r+0x8e4>
 8113796:	9b07      	ldr	r3, [sp, #28]
 8113798:	9704      	str	r7, [sp, #16]
 811379a:	2b00      	cmp	r3, #0
 811379c:	dc20      	bgt.n	81137e0 <_dtoa_r+0x940>
 811379e:	9300      	str	r3, [sp, #0]
 81137a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81137a2:	2b02      	cmp	r3, #2
 81137a4:	dd1e      	ble.n	81137e4 <_dtoa_r+0x944>
 81137a6:	9b00      	ldr	r3, [sp, #0]
 81137a8:	2b00      	cmp	r3, #0
 81137aa:	f47f aec0 	bne.w	811352e <_dtoa_r+0x68e>
 81137ae:	4621      	mov	r1, r4
 81137b0:	2205      	movs	r2, #5
 81137b2:	4658      	mov	r0, fp
 81137b4:	f000 f9e4 	bl	8113b80 <__multadd>
 81137b8:	4601      	mov	r1, r0
 81137ba:	4604      	mov	r4, r0
 81137bc:	4648      	mov	r0, r9
 81137be:	f000 fc41 	bl	8114044 <__mcmp>
 81137c2:	2800      	cmp	r0, #0
 81137c4:	f77f aeb3 	ble.w	811352e <_dtoa_r+0x68e>
 81137c8:	4656      	mov	r6, sl
 81137ca:	2331      	movs	r3, #49	@ 0x31
 81137cc:	f806 3b01 	strb.w	r3, [r6], #1
 81137d0:	9b04      	ldr	r3, [sp, #16]
 81137d2:	3301      	adds	r3, #1
 81137d4:	9304      	str	r3, [sp, #16]
 81137d6:	e6ae      	b.n	8113536 <_dtoa_r+0x696>
 81137d8:	9c07      	ldr	r4, [sp, #28]
 81137da:	9704      	str	r7, [sp, #16]
 81137dc:	4625      	mov	r5, r4
 81137de:	e7f3      	b.n	81137c8 <_dtoa_r+0x928>
 81137e0:	9b07      	ldr	r3, [sp, #28]
 81137e2:	9300      	str	r3, [sp, #0]
 81137e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81137e6:	2b00      	cmp	r3, #0
 81137e8:	f000 8104 	beq.w	81139f4 <_dtoa_r+0xb54>
 81137ec:	2e00      	cmp	r6, #0
 81137ee:	dd05      	ble.n	81137fc <_dtoa_r+0x95c>
 81137f0:	4629      	mov	r1, r5
 81137f2:	4632      	mov	r2, r6
 81137f4:	4658      	mov	r0, fp
 81137f6:	f000 fbb9 	bl	8113f6c <__lshift>
 81137fa:	4605      	mov	r5, r0
 81137fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81137fe:	2b00      	cmp	r3, #0
 8113800:	d05a      	beq.n	81138b8 <_dtoa_r+0xa18>
 8113802:	6869      	ldr	r1, [r5, #4]
 8113804:	4658      	mov	r0, fp
 8113806:	f000 f959 	bl	8113abc <_Balloc>
 811380a:	4606      	mov	r6, r0
 811380c:	b928      	cbnz	r0, 811381a <_dtoa_r+0x97a>
 811380e:	4b84      	ldr	r3, [pc, #528]	@ (8113a20 <_dtoa_r+0xb80>)
 8113810:	4602      	mov	r2, r0
 8113812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8113816:	f7ff bb5a 	b.w	8112ece <_dtoa_r+0x2e>
 811381a:	692a      	ldr	r2, [r5, #16]
 811381c:	3202      	adds	r2, #2
 811381e:	0092      	lsls	r2, r2, #2
 8113820:	f105 010c 	add.w	r1, r5, #12
 8113824:	300c      	adds	r0, #12
 8113826:	f7ff fa96 	bl	8112d56 <memcpy>
 811382a:	2201      	movs	r2, #1
 811382c:	4631      	mov	r1, r6
 811382e:	4658      	mov	r0, fp
 8113830:	f000 fb9c 	bl	8113f6c <__lshift>
 8113834:	f10a 0301 	add.w	r3, sl, #1
 8113838:	9307      	str	r3, [sp, #28]
 811383a:	9b00      	ldr	r3, [sp, #0]
 811383c:	4453      	add	r3, sl
 811383e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113840:	9b02      	ldr	r3, [sp, #8]
 8113842:	f003 0301 	and.w	r3, r3, #1
 8113846:	462f      	mov	r7, r5
 8113848:	930a      	str	r3, [sp, #40]	@ 0x28
 811384a:	4605      	mov	r5, r0
 811384c:	9b07      	ldr	r3, [sp, #28]
 811384e:	4621      	mov	r1, r4
 8113850:	3b01      	subs	r3, #1
 8113852:	4648      	mov	r0, r9
 8113854:	9300      	str	r3, [sp, #0]
 8113856:	f7ff fa9a 	bl	8112d8e <quorem>
 811385a:	4639      	mov	r1, r7
 811385c:	9002      	str	r0, [sp, #8]
 811385e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8113862:	4648      	mov	r0, r9
 8113864:	f000 fbee 	bl	8114044 <__mcmp>
 8113868:	462a      	mov	r2, r5
 811386a:	9008      	str	r0, [sp, #32]
 811386c:	4621      	mov	r1, r4
 811386e:	4658      	mov	r0, fp
 8113870:	f000 fc04 	bl	811407c <__mdiff>
 8113874:	68c2      	ldr	r2, [r0, #12]
 8113876:	4606      	mov	r6, r0
 8113878:	bb02      	cbnz	r2, 81138bc <_dtoa_r+0xa1c>
 811387a:	4601      	mov	r1, r0
 811387c:	4648      	mov	r0, r9
 811387e:	f000 fbe1 	bl	8114044 <__mcmp>
 8113882:	4602      	mov	r2, r0
 8113884:	4631      	mov	r1, r6
 8113886:	4658      	mov	r0, fp
 8113888:	920e      	str	r2, [sp, #56]	@ 0x38
 811388a:	f000 f957 	bl	8113b3c <_Bfree>
 811388e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8113892:	9e07      	ldr	r6, [sp, #28]
 8113894:	ea43 0102 	orr.w	r1, r3, r2
 8113898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811389a:	4319      	orrs	r1, r3
 811389c:	d110      	bne.n	81138c0 <_dtoa_r+0xa20>
 811389e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81138a2:	d029      	beq.n	81138f8 <_dtoa_r+0xa58>
 81138a4:	9b08      	ldr	r3, [sp, #32]
 81138a6:	2b00      	cmp	r3, #0
 81138a8:	dd02      	ble.n	81138b0 <_dtoa_r+0xa10>
 81138aa:	9b02      	ldr	r3, [sp, #8]
 81138ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 81138b0:	9b00      	ldr	r3, [sp, #0]
 81138b2:	f883 8000 	strb.w	r8, [r3]
 81138b6:	e63f      	b.n	8113538 <_dtoa_r+0x698>
 81138b8:	4628      	mov	r0, r5
 81138ba:	e7bb      	b.n	8113834 <_dtoa_r+0x994>
 81138bc:	2201      	movs	r2, #1
 81138be:	e7e1      	b.n	8113884 <_dtoa_r+0x9e4>
 81138c0:	9b08      	ldr	r3, [sp, #32]
 81138c2:	2b00      	cmp	r3, #0
 81138c4:	db04      	blt.n	81138d0 <_dtoa_r+0xa30>
 81138c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81138c8:	430b      	orrs	r3, r1
 81138ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81138cc:	430b      	orrs	r3, r1
 81138ce:	d120      	bne.n	8113912 <_dtoa_r+0xa72>
 81138d0:	2a00      	cmp	r2, #0
 81138d2:	dded      	ble.n	81138b0 <_dtoa_r+0xa10>
 81138d4:	4649      	mov	r1, r9
 81138d6:	2201      	movs	r2, #1
 81138d8:	4658      	mov	r0, fp
 81138da:	f000 fb47 	bl	8113f6c <__lshift>
 81138de:	4621      	mov	r1, r4
 81138e0:	4681      	mov	r9, r0
 81138e2:	f000 fbaf 	bl	8114044 <__mcmp>
 81138e6:	2800      	cmp	r0, #0
 81138e8:	dc03      	bgt.n	81138f2 <_dtoa_r+0xa52>
 81138ea:	d1e1      	bne.n	81138b0 <_dtoa_r+0xa10>
 81138ec:	f018 0f01 	tst.w	r8, #1
 81138f0:	d0de      	beq.n	81138b0 <_dtoa_r+0xa10>
 81138f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81138f6:	d1d8      	bne.n	81138aa <_dtoa_r+0xa0a>
 81138f8:	9a00      	ldr	r2, [sp, #0]
 81138fa:	2339      	movs	r3, #57	@ 0x39
 81138fc:	7013      	strb	r3, [r2, #0]
 81138fe:	4633      	mov	r3, r6
 8113900:	461e      	mov	r6, r3
 8113902:	3b01      	subs	r3, #1
 8113904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8113908:	2a39      	cmp	r2, #57	@ 0x39
 811390a:	d052      	beq.n	81139b2 <_dtoa_r+0xb12>
 811390c:	3201      	adds	r2, #1
 811390e:	701a      	strb	r2, [r3, #0]
 8113910:	e612      	b.n	8113538 <_dtoa_r+0x698>
 8113912:	2a00      	cmp	r2, #0
 8113914:	dd07      	ble.n	8113926 <_dtoa_r+0xa86>
 8113916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 811391a:	d0ed      	beq.n	81138f8 <_dtoa_r+0xa58>
 811391c:	9a00      	ldr	r2, [sp, #0]
 811391e:	f108 0301 	add.w	r3, r8, #1
 8113922:	7013      	strb	r3, [r2, #0]
 8113924:	e608      	b.n	8113538 <_dtoa_r+0x698>
 8113926:	9b07      	ldr	r3, [sp, #28]
 8113928:	9a07      	ldr	r2, [sp, #28]
 811392a:	f803 8c01 	strb.w	r8, [r3, #-1]
 811392e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113930:	4293      	cmp	r3, r2
 8113932:	d028      	beq.n	8113986 <_dtoa_r+0xae6>
 8113934:	4649      	mov	r1, r9
 8113936:	2300      	movs	r3, #0
 8113938:	220a      	movs	r2, #10
 811393a:	4658      	mov	r0, fp
 811393c:	f000 f920 	bl	8113b80 <__multadd>
 8113940:	42af      	cmp	r7, r5
 8113942:	4681      	mov	r9, r0
 8113944:	f04f 0300 	mov.w	r3, #0
 8113948:	f04f 020a 	mov.w	r2, #10
 811394c:	4639      	mov	r1, r7
 811394e:	4658      	mov	r0, fp
 8113950:	d107      	bne.n	8113962 <_dtoa_r+0xac2>
 8113952:	f000 f915 	bl	8113b80 <__multadd>
 8113956:	4607      	mov	r7, r0
 8113958:	4605      	mov	r5, r0
 811395a:	9b07      	ldr	r3, [sp, #28]
 811395c:	3301      	adds	r3, #1
 811395e:	9307      	str	r3, [sp, #28]
 8113960:	e774      	b.n	811384c <_dtoa_r+0x9ac>
 8113962:	f000 f90d 	bl	8113b80 <__multadd>
 8113966:	4629      	mov	r1, r5
 8113968:	4607      	mov	r7, r0
 811396a:	2300      	movs	r3, #0
 811396c:	220a      	movs	r2, #10
 811396e:	4658      	mov	r0, fp
 8113970:	f000 f906 	bl	8113b80 <__multadd>
 8113974:	4605      	mov	r5, r0
 8113976:	e7f0      	b.n	811395a <_dtoa_r+0xaba>
 8113978:	9b00      	ldr	r3, [sp, #0]
 811397a:	2b00      	cmp	r3, #0
 811397c:	bfcc      	ite	gt
 811397e:	461e      	movgt	r6, r3
 8113980:	2601      	movle	r6, #1
 8113982:	4456      	add	r6, sl
 8113984:	2700      	movs	r7, #0
 8113986:	4649      	mov	r1, r9
 8113988:	2201      	movs	r2, #1
 811398a:	4658      	mov	r0, fp
 811398c:	f000 faee 	bl	8113f6c <__lshift>
 8113990:	4621      	mov	r1, r4
 8113992:	4681      	mov	r9, r0
 8113994:	f000 fb56 	bl	8114044 <__mcmp>
 8113998:	2800      	cmp	r0, #0
 811399a:	dcb0      	bgt.n	81138fe <_dtoa_r+0xa5e>
 811399c:	d102      	bne.n	81139a4 <_dtoa_r+0xb04>
 811399e:	f018 0f01 	tst.w	r8, #1
 81139a2:	d1ac      	bne.n	81138fe <_dtoa_r+0xa5e>
 81139a4:	4633      	mov	r3, r6
 81139a6:	461e      	mov	r6, r3
 81139a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81139ac:	2a30      	cmp	r2, #48	@ 0x30
 81139ae:	d0fa      	beq.n	81139a6 <_dtoa_r+0xb06>
 81139b0:	e5c2      	b.n	8113538 <_dtoa_r+0x698>
 81139b2:	459a      	cmp	sl, r3
 81139b4:	d1a4      	bne.n	8113900 <_dtoa_r+0xa60>
 81139b6:	9b04      	ldr	r3, [sp, #16]
 81139b8:	3301      	adds	r3, #1
 81139ba:	9304      	str	r3, [sp, #16]
 81139bc:	2331      	movs	r3, #49	@ 0x31
 81139be:	f88a 3000 	strb.w	r3, [sl]
 81139c2:	e5b9      	b.n	8113538 <_dtoa_r+0x698>
 81139c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81139c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8113a24 <_dtoa_r+0xb84>
 81139ca:	b11b      	cbz	r3, 81139d4 <_dtoa_r+0xb34>
 81139cc:	f10a 0308 	add.w	r3, sl, #8
 81139d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 81139d2:	6013      	str	r3, [r2, #0]
 81139d4:	4650      	mov	r0, sl
 81139d6:	b019      	add	sp, #100	@ 0x64
 81139d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81139dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81139de:	2b01      	cmp	r3, #1
 81139e0:	f77f ae37 	ble.w	8113652 <_dtoa_r+0x7b2>
 81139e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81139e6:	930a      	str	r3, [sp, #40]	@ 0x28
 81139e8:	2001      	movs	r0, #1
 81139ea:	e655      	b.n	8113698 <_dtoa_r+0x7f8>
 81139ec:	9b00      	ldr	r3, [sp, #0]
 81139ee:	2b00      	cmp	r3, #0
 81139f0:	f77f aed6 	ble.w	81137a0 <_dtoa_r+0x900>
 81139f4:	4656      	mov	r6, sl
 81139f6:	4621      	mov	r1, r4
 81139f8:	4648      	mov	r0, r9
 81139fa:	f7ff f9c8 	bl	8112d8e <quorem>
 81139fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8113a02:	f806 8b01 	strb.w	r8, [r6], #1
 8113a06:	9b00      	ldr	r3, [sp, #0]
 8113a08:	eba6 020a 	sub.w	r2, r6, sl
 8113a0c:	4293      	cmp	r3, r2
 8113a0e:	ddb3      	ble.n	8113978 <_dtoa_r+0xad8>
 8113a10:	4649      	mov	r1, r9
 8113a12:	2300      	movs	r3, #0
 8113a14:	220a      	movs	r2, #10
 8113a16:	4658      	mov	r0, fp
 8113a18:	f000 f8b2 	bl	8113b80 <__multadd>
 8113a1c:	4681      	mov	r9, r0
 8113a1e:	e7ea      	b.n	81139f6 <_dtoa_r+0xb56>
 8113a20:	08117746 	.word	0x08117746
 8113a24:	081176e1 	.word	0x081176e1

08113a28 <_free_r>:
 8113a28:	b538      	push	{r3, r4, r5, lr}
 8113a2a:	4605      	mov	r5, r0
 8113a2c:	2900      	cmp	r1, #0
 8113a2e:	d041      	beq.n	8113ab4 <_free_r+0x8c>
 8113a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8113a34:	1f0c      	subs	r4, r1, #4
 8113a36:	2b00      	cmp	r3, #0
 8113a38:	bfb8      	it	lt
 8113a3a:	18e4      	addlt	r4, r4, r3
 8113a3c:	f7fe f846 	bl	8111acc <__malloc_lock>
 8113a40:	4a1d      	ldr	r2, [pc, #116]	@ (8113ab8 <_free_r+0x90>)
 8113a42:	6813      	ldr	r3, [r2, #0]
 8113a44:	b933      	cbnz	r3, 8113a54 <_free_r+0x2c>
 8113a46:	6063      	str	r3, [r4, #4]
 8113a48:	6014      	str	r4, [r2, #0]
 8113a4a:	4628      	mov	r0, r5
 8113a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113a50:	f7fe b842 	b.w	8111ad8 <__malloc_unlock>
 8113a54:	42a3      	cmp	r3, r4
 8113a56:	d908      	bls.n	8113a6a <_free_r+0x42>
 8113a58:	6820      	ldr	r0, [r4, #0]
 8113a5a:	1821      	adds	r1, r4, r0
 8113a5c:	428b      	cmp	r3, r1
 8113a5e:	bf01      	itttt	eq
 8113a60:	6819      	ldreq	r1, [r3, #0]
 8113a62:	685b      	ldreq	r3, [r3, #4]
 8113a64:	1809      	addeq	r1, r1, r0
 8113a66:	6021      	streq	r1, [r4, #0]
 8113a68:	e7ed      	b.n	8113a46 <_free_r+0x1e>
 8113a6a:	461a      	mov	r2, r3
 8113a6c:	685b      	ldr	r3, [r3, #4]
 8113a6e:	b10b      	cbz	r3, 8113a74 <_free_r+0x4c>
 8113a70:	42a3      	cmp	r3, r4
 8113a72:	d9fa      	bls.n	8113a6a <_free_r+0x42>
 8113a74:	6811      	ldr	r1, [r2, #0]
 8113a76:	1850      	adds	r0, r2, r1
 8113a78:	42a0      	cmp	r0, r4
 8113a7a:	d10b      	bne.n	8113a94 <_free_r+0x6c>
 8113a7c:	6820      	ldr	r0, [r4, #0]
 8113a7e:	4401      	add	r1, r0
 8113a80:	1850      	adds	r0, r2, r1
 8113a82:	4283      	cmp	r3, r0
 8113a84:	6011      	str	r1, [r2, #0]
 8113a86:	d1e0      	bne.n	8113a4a <_free_r+0x22>
 8113a88:	6818      	ldr	r0, [r3, #0]
 8113a8a:	685b      	ldr	r3, [r3, #4]
 8113a8c:	6053      	str	r3, [r2, #4]
 8113a8e:	4408      	add	r0, r1
 8113a90:	6010      	str	r0, [r2, #0]
 8113a92:	e7da      	b.n	8113a4a <_free_r+0x22>
 8113a94:	d902      	bls.n	8113a9c <_free_r+0x74>
 8113a96:	230c      	movs	r3, #12
 8113a98:	602b      	str	r3, [r5, #0]
 8113a9a:	e7d6      	b.n	8113a4a <_free_r+0x22>
 8113a9c:	6820      	ldr	r0, [r4, #0]
 8113a9e:	1821      	adds	r1, r4, r0
 8113aa0:	428b      	cmp	r3, r1
 8113aa2:	bf04      	itt	eq
 8113aa4:	6819      	ldreq	r1, [r3, #0]
 8113aa6:	685b      	ldreq	r3, [r3, #4]
 8113aa8:	6063      	str	r3, [r4, #4]
 8113aaa:	bf04      	itt	eq
 8113aac:	1809      	addeq	r1, r1, r0
 8113aae:	6021      	streq	r1, [r4, #0]
 8113ab0:	6054      	str	r4, [r2, #4]
 8113ab2:	e7ca      	b.n	8113a4a <_free_r+0x22>
 8113ab4:	bd38      	pop	{r3, r4, r5, pc}
 8113ab6:	bf00      	nop
 8113ab8:	10005004 	.word	0x10005004

08113abc <_Balloc>:
 8113abc:	b570      	push	{r4, r5, r6, lr}
 8113abe:	69c6      	ldr	r6, [r0, #28]
 8113ac0:	4604      	mov	r4, r0
 8113ac2:	460d      	mov	r5, r1
 8113ac4:	b976      	cbnz	r6, 8113ae4 <_Balloc+0x28>
 8113ac6:	2010      	movs	r0, #16
 8113ac8:	f7fd ff4e 	bl	8111968 <malloc>
 8113acc:	4602      	mov	r2, r0
 8113ace:	61e0      	str	r0, [r4, #28]
 8113ad0:	b920      	cbnz	r0, 8113adc <_Balloc+0x20>
 8113ad2:	4b18      	ldr	r3, [pc, #96]	@ (8113b34 <_Balloc+0x78>)
 8113ad4:	4818      	ldr	r0, [pc, #96]	@ (8113b38 <_Balloc+0x7c>)
 8113ad6:	216b      	movs	r1, #107	@ 0x6b
 8113ad8:	f7fd ff24 	bl	8111924 <__assert_func>
 8113adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8113ae0:	6006      	str	r6, [r0, #0]
 8113ae2:	60c6      	str	r6, [r0, #12]
 8113ae4:	69e6      	ldr	r6, [r4, #28]
 8113ae6:	68f3      	ldr	r3, [r6, #12]
 8113ae8:	b183      	cbz	r3, 8113b0c <_Balloc+0x50>
 8113aea:	69e3      	ldr	r3, [r4, #28]
 8113aec:	68db      	ldr	r3, [r3, #12]
 8113aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8113af2:	b9b8      	cbnz	r0, 8113b24 <_Balloc+0x68>
 8113af4:	2101      	movs	r1, #1
 8113af6:	fa01 f605 	lsl.w	r6, r1, r5
 8113afa:	1d72      	adds	r2, r6, #5
 8113afc:	0092      	lsls	r2, r2, #2
 8113afe:	4620      	mov	r0, r4
 8113b00:	f001 feda 	bl	81158b8 <_calloc_r>
 8113b04:	b160      	cbz	r0, 8113b20 <_Balloc+0x64>
 8113b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8113b0a:	e00e      	b.n	8113b2a <_Balloc+0x6e>
 8113b0c:	2221      	movs	r2, #33	@ 0x21
 8113b0e:	2104      	movs	r1, #4
 8113b10:	4620      	mov	r0, r4
 8113b12:	f001 fed1 	bl	81158b8 <_calloc_r>
 8113b16:	69e3      	ldr	r3, [r4, #28]
 8113b18:	60f0      	str	r0, [r6, #12]
 8113b1a:	68db      	ldr	r3, [r3, #12]
 8113b1c:	2b00      	cmp	r3, #0
 8113b1e:	d1e4      	bne.n	8113aea <_Balloc+0x2e>
 8113b20:	2000      	movs	r0, #0
 8113b22:	bd70      	pop	{r4, r5, r6, pc}
 8113b24:	6802      	ldr	r2, [r0, #0]
 8113b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8113b2a:	2300      	movs	r3, #0
 8113b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8113b30:	e7f7      	b.n	8113b22 <_Balloc+0x66>
 8113b32:	bf00      	nop
 8113b34:	08117670 	.word	0x08117670
 8113b38:	08117757 	.word	0x08117757

08113b3c <_Bfree>:
 8113b3c:	b570      	push	{r4, r5, r6, lr}
 8113b3e:	69c6      	ldr	r6, [r0, #28]
 8113b40:	4605      	mov	r5, r0
 8113b42:	460c      	mov	r4, r1
 8113b44:	b976      	cbnz	r6, 8113b64 <_Bfree+0x28>
 8113b46:	2010      	movs	r0, #16
 8113b48:	f7fd ff0e 	bl	8111968 <malloc>
 8113b4c:	4602      	mov	r2, r0
 8113b4e:	61e8      	str	r0, [r5, #28]
 8113b50:	b920      	cbnz	r0, 8113b5c <_Bfree+0x20>
 8113b52:	4b09      	ldr	r3, [pc, #36]	@ (8113b78 <_Bfree+0x3c>)
 8113b54:	4809      	ldr	r0, [pc, #36]	@ (8113b7c <_Bfree+0x40>)
 8113b56:	218f      	movs	r1, #143	@ 0x8f
 8113b58:	f7fd fee4 	bl	8111924 <__assert_func>
 8113b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8113b60:	6006      	str	r6, [r0, #0]
 8113b62:	60c6      	str	r6, [r0, #12]
 8113b64:	b13c      	cbz	r4, 8113b76 <_Bfree+0x3a>
 8113b66:	69eb      	ldr	r3, [r5, #28]
 8113b68:	6862      	ldr	r2, [r4, #4]
 8113b6a:	68db      	ldr	r3, [r3, #12]
 8113b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8113b70:	6021      	str	r1, [r4, #0]
 8113b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8113b76:	bd70      	pop	{r4, r5, r6, pc}
 8113b78:	08117670 	.word	0x08117670
 8113b7c:	08117757 	.word	0x08117757

08113b80 <__multadd>:
 8113b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113b84:	690d      	ldr	r5, [r1, #16]
 8113b86:	4607      	mov	r7, r0
 8113b88:	460c      	mov	r4, r1
 8113b8a:	461e      	mov	r6, r3
 8113b8c:	f101 0c14 	add.w	ip, r1, #20
 8113b90:	2000      	movs	r0, #0
 8113b92:	f8dc 3000 	ldr.w	r3, [ip]
 8113b96:	b299      	uxth	r1, r3
 8113b98:	fb02 6101 	mla	r1, r2, r1, r6
 8113b9c:	0c1e      	lsrs	r6, r3, #16
 8113b9e:	0c0b      	lsrs	r3, r1, #16
 8113ba0:	fb02 3306 	mla	r3, r2, r6, r3
 8113ba4:	b289      	uxth	r1, r1
 8113ba6:	3001      	adds	r0, #1
 8113ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8113bac:	4285      	cmp	r5, r0
 8113bae:	f84c 1b04 	str.w	r1, [ip], #4
 8113bb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8113bb6:	dcec      	bgt.n	8113b92 <__multadd+0x12>
 8113bb8:	b30e      	cbz	r6, 8113bfe <__multadd+0x7e>
 8113bba:	68a3      	ldr	r3, [r4, #8]
 8113bbc:	42ab      	cmp	r3, r5
 8113bbe:	dc19      	bgt.n	8113bf4 <__multadd+0x74>
 8113bc0:	6861      	ldr	r1, [r4, #4]
 8113bc2:	4638      	mov	r0, r7
 8113bc4:	3101      	adds	r1, #1
 8113bc6:	f7ff ff79 	bl	8113abc <_Balloc>
 8113bca:	4680      	mov	r8, r0
 8113bcc:	b928      	cbnz	r0, 8113bda <__multadd+0x5a>
 8113bce:	4602      	mov	r2, r0
 8113bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8113c04 <__multadd+0x84>)
 8113bd2:	480d      	ldr	r0, [pc, #52]	@ (8113c08 <__multadd+0x88>)
 8113bd4:	21ba      	movs	r1, #186	@ 0xba
 8113bd6:	f7fd fea5 	bl	8111924 <__assert_func>
 8113bda:	6922      	ldr	r2, [r4, #16]
 8113bdc:	3202      	adds	r2, #2
 8113bde:	f104 010c 	add.w	r1, r4, #12
 8113be2:	0092      	lsls	r2, r2, #2
 8113be4:	300c      	adds	r0, #12
 8113be6:	f7ff f8b6 	bl	8112d56 <memcpy>
 8113bea:	4621      	mov	r1, r4
 8113bec:	4638      	mov	r0, r7
 8113bee:	f7ff ffa5 	bl	8113b3c <_Bfree>
 8113bf2:	4644      	mov	r4, r8
 8113bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8113bf8:	3501      	adds	r5, #1
 8113bfa:	615e      	str	r6, [r3, #20]
 8113bfc:	6125      	str	r5, [r4, #16]
 8113bfe:	4620      	mov	r0, r4
 8113c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113c04:	08117746 	.word	0x08117746
 8113c08:	08117757 	.word	0x08117757

08113c0c <__s2b>:
 8113c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113c10:	460c      	mov	r4, r1
 8113c12:	4615      	mov	r5, r2
 8113c14:	461f      	mov	r7, r3
 8113c16:	2209      	movs	r2, #9
 8113c18:	3308      	adds	r3, #8
 8113c1a:	4606      	mov	r6, r0
 8113c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8113c20:	2100      	movs	r1, #0
 8113c22:	2201      	movs	r2, #1
 8113c24:	429a      	cmp	r2, r3
 8113c26:	db09      	blt.n	8113c3c <__s2b+0x30>
 8113c28:	4630      	mov	r0, r6
 8113c2a:	f7ff ff47 	bl	8113abc <_Balloc>
 8113c2e:	b940      	cbnz	r0, 8113c42 <__s2b+0x36>
 8113c30:	4602      	mov	r2, r0
 8113c32:	4b19      	ldr	r3, [pc, #100]	@ (8113c98 <__s2b+0x8c>)
 8113c34:	4819      	ldr	r0, [pc, #100]	@ (8113c9c <__s2b+0x90>)
 8113c36:	21d3      	movs	r1, #211	@ 0xd3
 8113c38:	f7fd fe74 	bl	8111924 <__assert_func>
 8113c3c:	0052      	lsls	r2, r2, #1
 8113c3e:	3101      	adds	r1, #1
 8113c40:	e7f0      	b.n	8113c24 <__s2b+0x18>
 8113c42:	9b08      	ldr	r3, [sp, #32]
 8113c44:	6143      	str	r3, [r0, #20]
 8113c46:	2d09      	cmp	r5, #9
 8113c48:	f04f 0301 	mov.w	r3, #1
 8113c4c:	6103      	str	r3, [r0, #16]
 8113c4e:	dd16      	ble.n	8113c7e <__s2b+0x72>
 8113c50:	f104 0909 	add.w	r9, r4, #9
 8113c54:	46c8      	mov	r8, r9
 8113c56:	442c      	add	r4, r5
 8113c58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8113c5c:	4601      	mov	r1, r0
 8113c5e:	3b30      	subs	r3, #48	@ 0x30
 8113c60:	220a      	movs	r2, #10
 8113c62:	4630      	mov	r0, r6
 8113c64:	f7ff ff8c 	bl	8113b80 <__multadd>
 8113c68:	45a0      	cmp	r8, r4
 8113c6a:	d1f5      	bne.n	8113c58 <__s2b+0x4c>
 8113c6c:	f1a5 0408 	sub.w	r4, r5, #8
 8113c70:	444c      	add	r4, r9
 8113c72:	1b2d      	subs	r5, r5, r4
 8113c74:	1963      	adds	r3, r4, r5
 8113c76:	42bb      	cmp	r3, r7
 8113c78:	db04      	blt.n	8113c84 <__s2b+0x78>
 8113c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113c7e:	340a      	adds	r4, #10
 8113c80:	2509      	movs	r5, #9
 8113c82:	e7f6      	b.n	8113c72 <__s2b+0x66>
 8113c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8113c88:	4601      	mov	r1, r0
 8113c8a:	3b30      	subs	r3, #48	@ 0x30
 8113c8c:	220a      	movs	r2, #10
 8113c8e:	4630      	mov	r0, r6
 8113c90:	f7ff ff76 	bl	8113b80 <__multadd>
 8113c94:	e7ee      	b.n	8113c74 <__s2b+0x68>
 8113c96:	bf00      	nop
 8113c98:	08117746 	.word	0x08117746
 8113c9c:	08117757 	.word	0x08117757

08113ca0 <__hi0bits>:
 8113ca0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8113ca4:	4603      	mov	r3, r0
 8113ca6:	bf36      	itet	cc
 8113ca8:	0403      	lslcc	r3, r0, #16
 8113caa:	2000      	movcs	r0, #0
 8113cac:	2010      	movcc	r0, #16
 8113cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8113cb2:	bf3c      	itt	cc
 8113cb4:	021b      	lslcc	r3, r3, #8
 8113cb6:	3008      	addcc	r0, #8
 8113cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8113cbc:	bf3c      	itt	cc
 8113cbe:	011b      	lslcc	r3, r3, #4
 8113cc0:	3004      	addcc	r0, #4
 8113cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8113cc6:	bf3c      	itt	cc
 8113cc8:	009b      	lslcc	r3, r3, #2
 8113cca:	3002      	addcc	r0, #2
 8113ccc:	2b00      	cmp	r3, #0
 8113cce:	db05      	blt.n	8113cdc <__hi0bits+0x3c>
 8113cd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8113cd4:	f100 0001 	add.w	r0, r0, #1
 8113cd8:	bf08      	it	eq
 8113cda:	2020      	moveq	r0, #32
 8113cdc:	4770      	bx	lr

08113cde <__lo0bits>:
 8113cde:	6803      	ldr	r3, [r0, #0]
 8113ce0:	4602      	mov	r2, r0
 8113ce2:	f013 0007 	ands.w	r0, r3, #7
 8113ce6:	d00b      	beq.n	8113d00 <__lo0bits+0x22>
 8113ce8:	07d9      	lsls	r1, r3, #31
 8113cea:	d421      	bmi.n	8113d30 <__lo0bits+0x52>
 8113cec:	0798      	lsls	r0, r3, #30
 8113cee:	bf49      	itett	mi
 8113cf0:	085b      	lsrmi	r3, r3, #1
 8113cf2:	089b      	lsrpl	r3, r3, #2
 8113cf4:	2001      	movmi	r0, #1
 8113cf6:	6013      	strmi	r3, [r2, #0]
 8113cf8:	bf5c      	itt	pl
 8113cfa:	6013      	strpl	r3, [r2, #0]
 8113cfc:	2002      	movpl	r0, #2
 8113cfe:	4770      	bx	lr
 8113d00:	b299      	uxth	r1, r3
 8113d02:	b909      	cbnz	r1, 8113d08 <__lo0bits+0x2a>
 8113d04:	0c1b      	lsrs	r3, r3, #16
 8113d06:	2010      	movs	r0, #16
 8113d08:	b2d9      	uxtb	r1, r3
 8113d0a:	b909      	cbnz	r1, 8113d10 <__lo0bits+0x32>
 8113d0c:	3008      	adds	r0, #8
 8113d0e:	0a1b      	lsrs	r3, r3, #8
 8113d10:	0719      	lsls	r1, r3, #28
 8113d12:	bf04      	itt	eq
 8113d14:	091b      	lsreq	r3, r3, #4
 8113d16:	3004      	addeq	r0, #4
 8113d18:	0799      	lsls	r1, r3, #30
 8113d1a:	bf04      	itt	eq
 8113d1c:	089b      	lsreq	r3, r3, #2
 8113d1e:	3002      	addeq	r0, #2
 8113d20:	07d9      	lsls	r1, r3, #31
 8113d22:	d403      	bmi.n	8113d2c <__lo0bits+0x4e>
 8113d24:	085b      	lsrs	r3, r3, #1
 8113d26:	f100 0001 	add.w	r0, r0, #1
 8113d2a:	d003      	beq.n	8113d34 <__lo0bits+0x56>
 8113d2c:	6013      	str	r3, [r2, #0]
 8113d2e:	4770      	bx	lr
 8113d30:	2000      	movs	r0, #0
 8113d32:	4770      	bx	lr
 8113d34:	2020      	movs	r0, #32
 8113d36:	4770      	bx	lr

08113d38 <__i2b>:
 8113d38:	b510      	push	{r4, lr}
 8113d3a:	460c      	mov	r4, r1
 8113d3c:	2101      	movs	r1, #1
 8113d3e:	f7ff febd 	bl	8113abc <_Balloc>
 8113d42:	4602      	mov	r2, r0
 8113d44:	b928      	cbnz	r0, 8113d52 <__i2b+0x1a>
 8113d46:	4b05      	ldr	r3, [pc, #20]	@ (8113d5c <__i2b+0x24>)
 8113d48:	4805      	ldr	r0, [pc, #20]	@ (8113d60 <__i2b+0x28>)
 8113d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8113d4e:	f7fd fde9 	bl	8111924 <__assert_func>
 8113d52:	2301      	movs	r3, #1
 8113d54:	6144      	str	r4, [r0, #20]
 8113d56:	6103      	str	r3, [r0, #16]
 8113d58:	bd10      	pop	{r4, pc}
 8113d5a:	bf00      	nop
 8113d5c:	08117746 	.word	0x08117746
 8113d60:	08117757 	.word	0x08117757

08113d64 <__multiply>:
 8113d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113d68:	4614      	mov	r4, r2
 8113d6a:	690a      	ldr	r2, [r1, #16]
 8113d6c:	6923      	ldr	r3, [r4, #16]
 8113d6e:	429a      	cmp	r2, r3
 8113d70:	bfa8      	it	ge
 8113d72:	4623      	movge	r3, r4
 8113d74:	460f      	mov	r7, r1
 8113d76:	bfa4      	itt	ge
 8113d78:	460c      	movge	r4, r1
 8113d7a:	461f      	movge	r7, r3
 8113d7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8113d80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8113d84:	68a3      	ldr	r3, [r4, #8]
 8113d86:	6861      	ldr	r1, [r4, #4]
 8113d88:	eb0a 0609 	add.w	r6, sl, r9
 8113d8c:	42b3      	cmp	r3, r6
 8113d8e:	b085      	sub	sp, #20
 8113d90:	bfb8      	it	lt
 8113d92:	3101      	addlt	r1, #1
 8113d94:	f7ff fe92 	bl	8113abc <_Balloc>
 8113d98:	b930      	cbnz	r0, 8113da8 <__multiply+0x44>
 8113d9a:	4602      	mov	r2, r0
 8113d9c:	4b44      	ldr	r3, [pc, #272]	@ (8113eb0 <__multiply+0x14c>)
 8113d9e:	4845      	ldr	r0, [pc, #276]	@ (8113eb4 <__multiply+0x150>)
 8113da0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8113da4:	f7fd fdbe 	bl	8111924 <__assert_func>
 8113da8:	f100 0514 	add.w	r5, r0, #20
 8113dac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8113db0:	462b      	mov	r3, r5
 8113db2:	2200      	movs	r2, #0
 8113db4:	4543      	cmp	r3, r8
 8113db6:	d321      	bcc.n	8113dfc <__multiply+0x98>
 8113db8:	f107 0114 	add.w	r1, r7, #20
 8113dbc:	f104 0214 	add.w	r2, r4, #20
 8113dc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8113dc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8113dc8:	9302      	str	r3, [sp, #8]
 8113dca:	1b13      	subs	r3, r2, r4
 8113dcc:	3b15      	subs	r3, #21
 8113dce:	f023 0303 	bic.w	r3, r3, #3
 8113dd2:	3304      	adds	r3, #4
 8113dd4:	f104 0715 	add.w	r7, r4, #21
 8113dd8:	42ba      	cmp	r2, r7
 8113dda:	bf38      	it	cc
 8113ddc:	2304      	movcc	r3, #4
 8113dde:	9301      	str	r3, [sp, #4]
 8113de0:	9b02      	ldr	r3, [sp, #8]
 8113de2:	9103      	str	r1, [sp, #12]
 8113de4:	428b      	cmp	r3, r1
 8113de6:	d80c      	bhi.n	8113e02 <__multiply+0x9e>
 8113de8:	2e00      	cmp	r6, #0
 8113dea:	dd03      	ble.n	8113df4 <__multiply+0x90>
 8113dec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8113df0:	2b00      	cmp	r3, #0
 8113df2:	d05b      	beq.n	8113eac <__multiply+0x148>
 8113df4:	6106      	str	r6, [r0, #16]
 8113df6:	b005      	add	sp, #20
 8113df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113dfc:	f843 2b04 	str.w	r2, [r3], #4
 8113e00:	e7d8      	b.n	8113db4 <__multiply+0x50>
 8113e02:	f8b1 a000 	ldrh.w	sl, [r1]
 8113e06:	f1ba 0f00 	cmp.w	sl, #0
 8113e0a:	d024      	beq.n	8113e56 <__multiply+0xf2>
 8113e0c:	f104 0e14 	add.w	lr, r4, #20
 8113e10:	46a9      	mov	r9, r5
 8113e12:	f04f 0c00 	mov.w	ip, #0
 8113e16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8113e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8113e1e:	fa1f fb87 	uxth.w	fp, r7
 8113e22:	b29b      	uxth	r3, r3
 8113e24:	fb0a 330b 	mla	r3, sl, fp, r3
 8113e28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8113e2c:	f8d9 7000 	ldr.w	r7, [r9]
 8113e30:	4463      	add	r3, ip
 8113e32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8113e36:	fb0a c70b 	mla	r7, sl, fp, ip
 8113e3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8113e3e:	b29b      	uxth	r3, r3
 8113e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8113e44:	4572      	cmp	r2, lr
 8113e46:	f849 3b04 	str.w	r3, [r9], #4
 8113e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8113e4e:	d8e2      	bhi.n	8113e16 <__multiply+0xb2>
 8113e50:	9b01      	ldr	r3, [sp, #4]
 8113e52:	f845 c003 	str.w	ip, [r5, r3]
 8113e56:	9b03      	ldr	r3, [sp, #12]
 8113e58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8113e5c:	3104      	adds	r1, #4
 8113e5e:	f1b9 0f00 	cmp.w	r9, #0
 8113e62:	d021      	beq.n	8113ea8 <__multiply+0x144>
 8113e64:	682b      	ldr	r3, [r5, #0]
 8113e66:	f104 0c14 	add.w	ip, r4, #20
 8113e6a:	46ae      	mov	lr, r5
 8113e6c:	f04f 0a00 	mov.w	sl, #0
 8113e70:	f8bc b000 	ldrh.w	fp, [ip]
 8113e74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8113e78:	fb09 770b 	mla	r7, r9, fp, r7
 8113e7c:	4457      	add	r7, sl
 8113e7e:	b29b      	uxth	r3, r3
 8113e80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8113e84:	f84e 3b04 	str.w	r3, [lr], #4
 8113e88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8113e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8113e90:	f8be 3000 	ldrh.w	r3, [lr]
 8113e94:	fb09 330a 	mla	r3, r9, sl, r3
 8113e98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8113e9c:	4562      	cmp	r2, ip
 8113e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8113ea2:	d8e5      	bhi.n	8113e70 <__multiply+0x10c>
 8113ea4:	9f01      	ldr	r7, [sp, #4]
 8113ea6:	51eb      	str	r3, [r5, r7]
 8113ea8:	3504      	adds	r5, #4
 8113eaa:	e799      	b.n	8113de0 <__multiply+0x7c>
 8113eac:	3e01      	subs	r6, #1
 8113eae:	e79b      	b.n	8113de8 <__multiply+0x84>
 8113eb0:	08117746 	.word	0x08117746
 8113eb4:	08117757 	.word	0x08117757

08113eb8 <__pow5mult>:
 8113eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113ebc:	4615      	mov	r5, r2
 8113ebe:	f012 0203 	ands.w	r2, r2, #3
 8113ec2:	4607      	mov	r7, r0
 8113ec4:	460e      	mov	r6, r1
 8113ec6:	d007      	beq.n	8113ed8 <__pow5mult+0x20>
 8113ec8:	4c25      	ldr	r4, [pc, #148]	@ (8113f60 <__pow5mult+0xa8>)
 8113eca:	3a01      	subs	r2, #1
 8113ecc:	2300      	movs	r3, #0
 8113ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8113ed2:	f7ff fe55 	bl	8113b80 <__multadd>
 8113ed6:	4606      	mov	r6, r0
 8113ed8:	10ad      	asrs	r5, r5, #2
 8113eda:	d03d      	beq.n	8113f58 <__pow5mult+0xa0>
 8113edc:	69fc      	ldr	r4, [r7, #28]
 8113ede:	b97c      	cbnz	r4, 8113f00 <__pow5mult+0x48>
 8113ee0:	2010      	movs	r0, #16
 8113ee2:	f7fd fd41 	bl	8111968 <malloc>
 8113ee6:	4602      	mov	r2, r0
 8113ee8:	61f8      	str	r0, [r7, #28]
 8113eea:	b928      	cbnz	r0, 8113ef8 <__pow5mult+0x40>
 8113eec:	4b1d      	ldr	r3, [pc, #116]	@ (8113f64 <__pow5mult+0xac>)
 8113eee:	481e      	ldr	r0, [pc, #120]	@ (8113f68 <__pow5mult+0xb0>)
 8113ef0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8113ef4:	f7fd fd16 	bl	8111924 <__assert_func>
 8113ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8113efc:	6004      	str	r4, [r0, #0]
 8113efe:	60c4      	str	r4, [r0, #12]
 8113f00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8113f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8113f08:	b94c      	cbnz	r4, 8113f1e <__pow5mult+0x66>
 8113f0a:	f240 2171 	movw	r1, #625	@ 0x271
 8113f0e:	4638      	mov	r0, r7
 8113f10:	f7ff ff12 	bl	8113d38 <__i2b>
 8113f14:	2300      	movs	r3, #0
 8113f16:	f8c8 0008 	str.w	r0, [r8, #8]
 8113f1a:	4604      	mov	r4, r0
 8113f1c:	6003      	str	r3, [r0, #0]
 8113f1e:	f04f 0900 	mov.w	r9, #0
 8113f22:	07eb      	lsls	r3, r5, #31
 8113f24:	d50a      	bpl.n	8113f3c <__pow5mult+0x84>
 8113f26:	4631      	mov	r1, r6
 8113f28:	4622      	mov	r2, r4
 8113f2a:	4638      	mov	r0, r7
 8113f2c:	f7ff ff1a 	bl	8113d64 <__multiply>
 8113f30:	4631      	mov	r1, r6
 8113f32:	4680      	mov	r8, r0
 8113f34:	4638      	mov	r0, r7
 8113f36:	f7ff fe01 	bl	8113b3c <_Bfree>
 8113f3a:	4646      	mov	r6, r8
 8113f3c:	106d      	asrs	r5, r5, #1
 8113f3e:	d00b      	beq.n	8113f58 <__pow5mult+0xa0>
 8113f40:	6820      	ldr	r0, [r4, #0]
 8113f42:	b938      	cbnz	r0, 8113f54 <__pow5mult+0x9c>
 8113f44:	4622      	mov	r2, r4
 8113f46:	4621      	mov	r1, r4
 8113f48:	4638      	mov	r0, r7
 8113f4a:	f7ff ff0b 	bl	8113d64 <__multiply>
 8113f4e:	6020      	str	r0, [r4, #0]
 8113f50:	f8c0 9000 	str.w	r9, [r0]
 8113f54:	4604      	mov	r4, r0
 8113f56:	e7e4      	b.n	8113f22 <__pow5mult+0x6a>
 8113f58:	4630      	mov	r0, r6
 8113f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113f5e:	bf00      	nop
 8113f60:	081177b0 	.word	0x081177b0
 8113f64:	08117670 	.word	0x08117670
 8113f68:	08117757 	.word	0x08117757

08113f6c <__lshift>:
 8113f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8113f70:	460c      	mov	r4, r1
 8113f72:	6849      	ldr	r1, [r1, #4]
 8113f74:	6923      	ldr	r3, [r4, #16]
 8113f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8113f7a:	68a3      	ldr	r3, [r4, #8]
 8113f7c:	4607      	mov	r7, r0
 8113f7e:	4691      	mov	r9, r2
 8113f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8113f84:	f108 0601 	add.w	r6, r8, #1
 8113f88:	42b3      	cmp	r3, r6
 8113f8a:	db0b      	blt.n	8113fa4 <__lshift+0x38>
 8113f8c:	4638      	mov	r0, r7
 8113f8e:	f7ff fd95 	bl	8113abc <_Balloc>
 8113f92:	4605      	mov	r5, r0
 8113f94:	b948      	cbnz	r0, 8113faa <__lshift+0x3e>
 8113f96:	4602      	mov	r2, r0
 8113f98:	4b28      	ldr	r3, [pc, #160]	@ (811403c <__lshift+0xd0>)
 8113f9a:	4829      	ldr	r0, [pc, #164]	@ (8114040 <__lshift+0xd4>)
 8113f9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8113fa0:	f7fd fcc0 	bl	8111924 <__assert_func>
 8113fa4:	3101      	adds	r1, #1
 8113fa6:	005b      	lsls	r3, r3, #1
 8113fa8:	e7ee      	b.n	8113f88 <__lshift+0x1c>
 8113faa:	2300      	movs	r3, #0
 8113fac:	f100 0114 	add.w	r1, r0, #20
 8113fb0:	f100 0210 	add.w	r2, r0, #16
 8113fb4:	4618      	mov	r0, r3
 8113fb6:	4553      	cmp	r3, sl
 8113fb8:	db33      	blt.n	8114022 <__lshift+0xb6>
 8113fba:	6920      	ldr	r0, [r4, #16]
 8113fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8113fc0:	f104 0314 	add.w	r3, r4, #20
 8113fc4:	f019 091f 	ands.w	r9, r9, #31
 8113fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8113fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8113fd0:	d02b      	beq.n	811402a <__lshift+0xbe>
 8113fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8113fd6:	468a      	mov	sl, r1
 8113fd8:	2200      	movs	r2, #0
 8113fda:	6818      	ldr	r0, [r3, #0]
 8113fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8113fe0:	4310      	orrs	r0, r2
 8113fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8113fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8113fea:	459c      	cmp	ip, r3
 8113fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8113ff0:	d8f3      	bhi.n	8113fda <__lshift+0x6e>
 8113ff2:	ebac 0304 	sub.w	r3, ip, r4
 8113ff6:	3b15      	subs	r3, #21
 8113ff8:	f023 0303 	bic.w	r3, r3, #3
 8113ffc:	3304      	adds	r3, #4
 8113ffe:	f104 0015 	add.w	r0, r4, #21
 8114002:	4584      	cmp	ip, r0
 8114004:	bf38      	it	cc
 8114006:	2304      	movcc	r3, #4
 8114008:	50ca      	str	r2, [r1, r3]
 811400a:	b10a      	cbz	r2, 8114010 <__lshift+0xa4>
 811400c:	f108 0602 	add.w	r6, r8, #2
 8114010:	3e01      	subs	r6, #1
 8114012:	4638      	mov	r0, r7
 8114014:	612e      	str	r6, [r5, #16]
 8114016:	4621      	mov	r1, r4
 8114018:	f7ff fd90 	bl	8113b3c <_Bfree>
 811401c:	4628      	mov	r0, r5
 811401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114022:	f842 0f04 	str.w	r0, [r2, #4]!
 8114026:	3301      	adds	r3, #1
 8114028:	e7c5      	b.n	8113fb6 <__lshift+0x4a>
 811402a:	3904      	subs	r1, #4
 811402c:	f853 2b04 	ldr.w	r2, [r3], #4
 8114030:	f841 2f04 	str.w	r2, [r1, #4]!
 8114034:	459c      	cmp	ip, r3
 8114036:	d8f9      	bhi.n	811402c <__lshift+0xc0>
 8114038:	e7ea      	b.n	8114010 <__lshift+0xa4>
 811403a:	bf00      	nop
 811403c:	08117746 	.word	0x08117746
 8114040:	08117757 	.word	0x08117757

08114044 <__mcmp>:
 8114044:	690a      	ldr	r2, [r1, #16]
 8114046:	4603      	mov	r3, r0
 8114048:	6900      	ldr	r0, [r0, #16]
 811404a:	1a80      	subs	r0, r0, r2
 811404c:	b530      	push	{r4, r5, lr}
 811404e:	d10e      	bne.n	811406e <__mcmp+0x2a>
 8114050:	3314      	adds	r3, #20
 8114052:	3114      	adds	r1, #20
 8114054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8114058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 811405c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8114060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8114064:	4295      	cmp	r5, r2
 8114066:	d003      	beq.n	8114070 <__mcmp+0x2c>
 8114068:	d205      	bcs.n	8114076 <__mcmp+0x32>
 811406a:	f04f 30ff 	mov.w	r0, #4294967295
 811406e:	bd30      	pop	{r4, r5, pc}
 8114070:	42a3      	cmp	r3, r4
 8114072:	d3f3      	bcc.n	811405c <__mcmp+0x18>
 8114074:	e7fb      	b.n	811406e <__mcmp+0x2a>
 8114076:	2001      	movs	r0, #1
 8114078:	e7f9      	b.n	811406e <__mcmp+0x2a>
	...

0811407c <__mdiff>:
 811407c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114080:	4689      	mov	r9, r1
 8114082:	4606      	mov	r6, r0
 8114084:	4611      	mov	r1, r2
 8114086:	4648      	mov	r0, r9
 8114088:	4614      	mov	r4, r2
 811408a:	f7ff ffdb 	bl	8114044 <__mcmp>
 811408e:	1e05      	subs	r5, r0, #0
 8114090:	d112      	bne.n	81140b8 <__mdiff+0x3c>
 8114092:	4629      	mov	r1, r5
 8114094:	4630      	mov	r0, r6
 8114096:	f7ff fd11 	bl	8113abc <_Balloc>
 811409a:	4602      	mov	r2, r0
 811409c:	b928      	cbnz	r0, 81140aa <__mdiff+0x2e>
 811409e:	4b3f      	ldr	r3, [pc, #252]	@ (811419c <__mdiff+0x120>)
 81140a0:	f240 2137 	movw	r1, #567	@ 0x237
 81140a4:	483e      	ldr	r0, [pc, #248]	@ (81141a0 <__mdiff+0x124>)
 81140a6:	f7fd fc3d 	bl	8111924 <__assert_func>
 81140aa:	2301      	movs	r3, #1
 81140ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81140b0:	4610      	mov	r0, r2
 81140b2:	b003      	add	sp, #12
 81140b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81140b8:	bfbc      	itt	lt
 81140ba:	464b      	movlt	r3, r9
 81140bc:	46a1      	movlt	r9, r4
 81140be:	4630      	mov	r0, r6
 81140c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 81140c4:	bfba      	itte	lt
 81140c6:	461c      	movlt	r4, r3
 81140c8:	2501      	movlt	r5, #1
 81140ca:	2500      	movge	r5, #0
 81140cc:	f7ff fcf6 	bl	8113abc <_Balloc>
 81140d0:	4602      	mov	r2, r0
 81140d2:	b918      	cbnz	r0, 81140dc <__mdiff+0x60>
 81140d4:	4b31      	ldr	r3, [pc, #196]	@ (811419c <__mdiff+0x120>)
 81140d6:	f240 2145 	movw	r1, #581	@ 0x245
 81140da:	e7e3      	b.n	81140a4 <__mdiff+0x28>
 81140dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 81140e0:	6926      	ldr	r6, [r4, #16]
 81140e2:	60c5      	str	r5, [r0, #12]
 81140e4:	f109 0310 	add.w	r3, r9, #16
 81140e8:	f109 0514 	add.w	r5, r9, #20
 81140ec:	f104 0e14 	add.w	lr, r4, #20
 81140f0:	f100 0b14 	add.w	fp, r0, #20
 81140f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 81140f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 81140fc:	9301      	str	r3, [sp, #4]
 81140fe:	46d9      	mov	r9, fp
 8114100:	f04f 0c00 	mov.w	ip, #0
 8114104:	9b01      	ldr	r3, [sp, #4]
 8114106:	f85e 0b04 	ldr.w	r0, [lr], #4
 811410a:	f853 af04 	ldr.w	sl, [r3, #4]!
 811410e:	9301      	str	r3, [sp, #4]
 8114110:	fa1f f38a 	uxth.w	r3, sl
 8114114:	4619      	mov	r1, r3
 8114116:	b283      	uxth	r3, r0
 8114118:	1acb      	subs	r3, r1, r3
 811411a:	0c00      	lsrs	r0, r0, #16
 811411c:	4463      	add	r3, ip
 811411e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8114122:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8114126:	b29b      	uxth	r3, r3
 8114128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 811412c:	4576      	cmp	r6, lr
 811412e:	f849 3b04 	str.w	r3, [r9], #4
 8114132:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8114136:	d8e5      	bhi.n	8114104 <__mdiff+0x88>
 8114138:	1b33      	subs	r3, r6, r4
 811413a:	3b15      	subs	r3, #21
 811413c:	f023 0303 	bic.w	r3, r3, #3
 8114140:	3415      	adds	r4, #21
 8114142:	3304      	adds	r3, #4
 8114144:	42a6      	cmp	r6, r4
 8114146:	bf38      	it	cc
 8114148:	2304      	movcc	r3, #4
 811414a:	441d      	add	r5, r3
 811414c:	445b      	add	r3, fp
 811414e:	461e      	mov	r6, r3
 8114150:	462c      	mov	r4, r5
 8114152:	4544      	cmp	r4, r8
 8114154:	d30e      	bcc.n	8114174 <__mdiff+0xf8>
 8114156:	f108 0103 	add.w	r1, r8, #3
 811415a:	1b49      	subs	r1, r1, r5
 811415c:	f021 0103 	bic.w	r1, r1, #3
 8114160:	3d03      	subs	r5, #3
 8114162:	45a8      	cmp	r8, r5
 8114164:	bf38      	it	cc
 8114166:	2100      	movcc	r1, #0
 8114168:	440b      	add	r3, r1
 811416a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 811416e:	b191      	cbz	r1, 8114196 <__mdiff+0x11a>
 8114170:	6117      	str	r7, [r2, #16]
 8114172:	e79d      	b.n	81140b0 <__mdiff+0x34>
 8114174:	f854 1b04 	ldr.w	r1, [r4], #4
 8114178:	46e6      	mov	lr, ip
 811417a:	0c08      	lsrs	r0, r1, #16
 811417c:	fa1c fc81 	uxtah	ip, ip, r1
 8114180:	4471      	add	r1, lr
 8114182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8114186:	b289      	uxth	r1, r1
 8114188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 811418c:	f846 1b04 	str.w	r1, [r6], #4
 8114190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8114194:	e7dd      	b.n	8114152 <__mdiff+0xd6>
 8114196:	3f01      	subs	r7, #1
 8114198:	e7e7      	b.n	811416a <__mdiff+0xee>
 811419a:	bf00      	nop
 811419c:	08117746 	.word	0x08117746
 81141a0:	08117757 	.word	0x08117757

081141a4 <__ulp>:
 81141a4:	b082      	sub	sp, #8
 81141a6:	ed8d 0b00 	vstr	d0, [sp]
 81141aa:	9a01      	ldr	r2, [sp, #4]
 81141ac:	4b0f      	ldr	r3, [pc, #60]	@ (81141ec <__ulp+0x48>)
 81141ae:	4013      	ands	r3, r2
 81141b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 81141b4:	2b00      	cmp	r3, #0
 81141b6:	dc08      	bgt.n	81141ca <__ulp+0x26>
 81141b8:	425b      	negs	r3, r3
 81141ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 81141be:	ea4f 5223 	mov.w	r2, r3, asr #20
 81141c2:	da04      	bge.n	81141ce <__ulp+0x2a>
 81141c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 81141c8:	4113      	asrs	r3, r2
 81141ca:	2200      	movs	r2, #0
 81141cc:	e008      	b.n	81141e0 <__ulp+0x3c>
 81141ce:	f1a2 0314 	sub.w	r3, r2, #20
 81141d2:	2b1e      	cmp	r3, #30
 81141d4:	bfda      	itte	le
 81141d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 81141da:	40da      	lsrle	r2, r3
 81141dc:	2201      	movgt	r2, #1
 81141de:	2300      	movs	r3, #0
 81141e0:	4619      	mov	r1, r3
 81141e2:	4610      	mov	r0, r2
 81141e4:	ec41 0b10 	vmov	d0, r0, r1
 81141e8:	b002      	add	sp, #8
 81141ea:	4770      	bx	lr
 81141ec:	7ff00000 	.word	0x7ff00000

081141f0 <__b2d>:
 81141f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81141f4:	6906      	ldr	r6, [r0, #16]
 81141f6:	f100 0814 	add.w	r8, r0, #20
 81141fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 81141fe:	1f37      	subs	r7, r6, #4
 8114200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8114204:	4610      	mov	r0, r2
 8114206:	f7ff fd4b 	bl	8113ca0 <__hi0bits>
 811420a:	f1c0 0320 	rsb	r3, r0, #32
 811420e:	280a      	cmp	r0, #10
 8114210:	600b      	str	r3, [r1, #0]
 8114212:	491b      	ldr	r1, [pc, #108]	@ (8114280 <__b2d+0x90>)
 8114214:	dc15      	bgt.n	8114242 <__b2d+0x52>
 8114216:	f1c0 0c0b 	rsb	ip, r0, #11
 811421a:	fa22 f30c 	lsr.w	r3, r2, ip
 811421e:	45b8      	cmp	r8, r7
 8114220:	ea43 0501 	orr.w	r5, r3, r1
 8114224:	bf34      	ite	cc
 8114226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811422a:	2300      	movcs	r3, #0
 811422c:	3015      	adds	r0, #21
 811422e:	fa02 f000 	lsl.w	r0, r2, r0
 8114232:	fa23 f30c 	lsr.w	r3, r3, ip
 8114236:	4303      	orrs	r3, r0
 8114238:	461c      	mov	r4, r3
 811423a:	ec45 4b10 	vmov	d0, r4, r5
 811423e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8114242:	45b8      	cmp	r8, r7
 8114244:	bf3a      	itte	cc
 8114246:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811424a:	f1a6 0708 	subcc.w	r7, r6, #8
 811424e:	2300      	movcs	r3, #0
 8114250:	380b      	subs	r0, #11
 8114252:	d012      	beq.n	811427a <__b2d+0x8a>
 8114254:	f1c0 0120 	rsb	r1, r0, #32
 8114258:	fa23 f401 	lsr.w	r4, r3, r1
 811425c:	4082      	lsls	r2, r0
 811425e:	4322      	orrs	r2, r4
 8114260:	4547      	cmp	r7, r8
 8114262:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8114266:	bf8c      	ite	hi
 8114268:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 811426c:	2200      	movls	r2, #0
 811426e:	4083      	lsls	r3, r0
 8114270:	40ca      	lsrs	r2, r1
 8114272:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8114276:	4313      	orrs	r3, r2
 8114278:	e7de      	b.n	8114238 <__b2d+0x48>
 811427a:	ea42 0501 	orr.w	r5, r2, r1
 811427e:	e7db      	b.n	8114238 <__b2d+0x48>
 8114280:	3ff00000 	.word	0x3ff00000

08114284 <__d2b>:
 8114284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8114288:	460f      	mov	r7, r1
 811428a:	2101      	movs	r1, #1
 811428c:	ec59 8b10 	vmov	r8, r9, d0
 8114290:	4616      	mov	r6, r2
 8114292:	f7ff fc13 	bl	8113abc <_Balloc>
 8114296:	4604      	mov	r4, r0
 8114298:	b930      	cbnz	r0, 81142a8 <__d2b+0x24>
 811429a:	4602      	mov	r2, r0
 811429c:	4b23      	ldr	r3, [pc, #140]	@ (811432c <__d2b+0xa8>)
 811429e:	4824      	ldr	r0, [pc, #144]	@ (8114330 <__d2b+0xac>)
 81142a0:	f240 310f 	movw	r1, #783	@ 0x30f
 81142a4:	f7fd fb3e 	bl	8111924 <__assert_func>
 81142a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81142ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81142b0:	b10d      	cbz	r5, 81142b6 <__d2b+0x32>
 81142b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81142b6:	9301      	str	r3, [sp, #4]
 81142b8:	f1b8 0300 	subs.w	r3, r8, #0
 81142bc:	d023      	beq.n	8114306 <__d2b+0x82>
 81142be:	4668      	mov	r0, sp
 81142c0:	9300      	str	r3, [sp, #0]
 81142c2:	f7ff fd0c 	bl	8113cde <__lo0bits>
 81142c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 81142ca:	b1d0      	cbz	r0, 8114302 <__d2b+0x7e>
 81142cc:	f1c0 0320 	rsb	r3, r0, #32
 81142d0:	fa02 f303 	lsl.w	r3, r2, r3
 81142d4:	430b      	orrs	r3, r1
 81142d6:	40c2      	lsrs	r2, r0
 81142d8:	6163      	str	r3, [r4, #20]
 81142da:	9201      	str	r2, [sp, #4]
 81142dc:	9b01      	ldr	r3, [sp, #4]
 81142de:	61a3      	str	r3, [r4, #24]
 81142e0:	2b00      	cmp	r3, #0
 81142e2:	bf0c      	ite	eq
 81142e4:	2201      	moveq	r2, #1
 81142e6:	2202      	movne	r2, #2
 81142e8:	6122      	str	r2, [r4, #16]
 81142ea:	b1a5      	cbz	r5, 8114316 <__d2b+0x92>
 81142ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 81142f0:	4405      	add	r5, r0
 81142f2:	603d      	str	r5, [r7, #0]
 81142f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 81142f8:	6030      	str	r0, [r6, #0]
 81142fa:	4620      	mov	r0, r4
 81142fc:	b003      	add	sp, #12
 81142fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8114302:	6161      	str	r1, [r4, #20]
 8114304:	e7ea      	b.n	81142dc <__d2b+0x58>
 8114306:	a801      	add	r0, sp, #4
 8114308:	f7ff fce9 	bl	8113cde <__lo0bits>
 811430c:	9b01      	ldr	r3, [sp, #4]
 811430e:	6163      	str	r3, [r4, #20]
 8114310:	3020      	adds	r0, #32
 8114312:	2201      	movs	r2, #1
 8114314:	e7e8      	b.n	81142e8 <__d2b+0x64>
 8114316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811431a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 811431e:	6038      	str	r0, [r7, #0]
 8114320:	6918      	ldr	r0, [r3, #16]
 8114322:	f7ff fcbd 	bl	8113ca0 <__hi0bits>
 8114326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811432a:	e7e5      	b.n	81142f8 <__d2b+0x74>
 811432c:	08117746 	.word	0x08117746
 8114330:	08117757 	.word	0x08117757

08114334 <__ratio>:
 8114334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114338:	b085      	sub	sp, #20
 811433a:	e9cd 1000 	strd	r1, r0, [sp]
 811433e:	a902      	add	r1, sp, #8
 8114340:	f7ff ff56 	bl	81141f0 <__b2d>
 8114344:	9800      	ldr	r0, [sp, #0]
 8114346:	a903      	add	r1, sp, #12
 8114348:	ec55 4b10 	vmov	r4, r5, d0
 811434c:	f7ff ff50 	bl	81141f0 <__b2d>
 8114350:	9b01      	ldr	r3, [sp, #4]
 8114352:	6919      	ldr	r1, [r3, #16]
 8114354:	9b00      	ldr	r3, [sp, #0]
 8114356:	691b      	ldr	r3, [r3, #16]
 8114358:	1ac9      	subs	r1, r1, r3
 811435a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 811435e:	1a9b      	subs	r3, r3, r2
 8114360:	ec5b ab10 	vmov	sl, fp, d0
 8114364:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8114368:	2b00      	cmp	r3, #0
 811436a:	bfce      	itee	gt
 811436c:	462a      	movgt	r2, r5
 811436e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8114372:	465a      	movle	r2, fp
 8114374:	462f      	mov	r7, r5
 8114376:	46d9      	mov	r9, fp
 8114378:	bfcc      	ite	gt
 811437a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 811437e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8114382:	464b      	mov	r3, r9
 8114384:	4652      	mov	r2, sl
 8114386:	4620      	mov	r0, r4
 8114388:	4639      	mov	r1, r7
 811438a:	f7ec faf7 	bl	810097c <__aeabi_ddiv>
 811438e:	ec41 0b10 	vmov	d0, r0, r1
 8114392:	b005      	add	sp, #20
 8114394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08114398 <__copybits>:
 8114398:	3901      	subs	r1, #1
 811439a:	b570      	push	{r4, r5, r6, lr}
 811439c:	1149      	asrs	r1, r1, #5
 811439e:	6914      	ldr	r4, [r2, #16]
 81143a0:	3101      	adds	r1, #1
 81143a2:	f102 0314 	add.w	r3, r2, #20
 81143a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 81143aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 81143ae:	1f05      	subs	r5, r0, #4
 81143b0:	42a3      	cmp	r3, r4
 81143b2:	d30c      	bcc.n	81143ce <__copybits+0x36>
 81143b4:	1aa3      	subs	r3, r4, r2
 81143b6:	3b11      	subs	r3, #17
 81143b8:	f023 0303 	bic.w	r3, r3, #3
 81143bc:	3211      	adds	r2, #17
 81143be:	42a2      	cmp	r2, r4
 81143c0:	bf88      	it	hi
 81143c2:	2300      	movhi	r3, #0
 81143c4:	4418      	add	r0, r3
 81143c6:	2300      	movs	r3, #0
 81143c8:	4288      	cmp	r0, r1
 81143ca:	d305      	bcc.n	81143d8 <__copybits+0x40>
 81143cc:	bd70      	pop	{r4, r5, r6, pc}
 81143ce:	f853 6b04 	ldr.w	r6, [r3], #4
 81143d2:	f845 6f04 	str.w	r6, [r5, #4]!
 81143d6:	e7eb      	b.n	81143b0 <__copybits+0x18>
 81143d8:	f840 3b04 	str.w	r3, [r0], #4
 81143dc:	e7f4      	b.n	81143c8 <__copybits+0x30>

081143de <__any_on>:
 81143de:	f100 0214 	add.w	r2, r0, #20
 81143e2:	6900      	ldr	r0, [r0, #16]
 81143e4:	114b      	asrs	r3, r1, #5
 81143e6:	4298      	cmp	r0, r3
 81143e8:	b510      	push	{r4, lr}
 81143ea:	db11      	blt.n	8114410 <__any_on+0x32>
 81143ec:	dd0a      	ble.n	8114404 <__any_on+0x26>
 81143ee:	f011 011f 	ands.w	r1, r1, #31
 81143f2:	d007      	beq.n	8114404 <__any_on+0x26>
 81143f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 81143f8:	fa24 f001 	lsr.w	r0, r4, r1
 81143fc:	fa00 f101 	lsl.w	r1, r0, r1
 8114400:	428c      	cmp	r4, r1
 8114402:	d10b      	bne.n	811441c <__any_on+0x3e>
 8114404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8114408:	4293      	cmp	r3, r2
 811440a:	d803      	bhi.n	8114414 <__any_on+0x36>
 811440c:	2000      	movs	r0, #0
 811440e:	bd10      	pop	{r4, pc}
 8114410:	4603      	mov	r3, r0
 8114412:	e7f7      	b.n	8114404 <__any_on+0x26>
 8114414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8114418:	2900      	cmp	r1, #0
 811441a:	d0f5      	beq.n	8114408 <__any_on+0x2a>
 811441c:	2001      	movs	r0, #1
 811441e:	e7f6      	b.n	811440e <__any_on+0x30>

08114420 <sulp>:
 8114420:	b570      	push	{r4, r5, r6, lr}
 8114422:	4604      	mov	r4, r0
 8114424:	460d      	mov	r5, r1
 8114426:	ec45 4b10 	vmov	d0, r4, r5
 811442a:	4616      	mov	r6, r2
 811442c:	f7ff feba 	bl	81141a4 <__ulp>
 8114430:	ec51 0b10 	vmov	r0, r1, d0
 8114434:	b17e      	cbz	r6, 8114456 <sulp+0x36>
 8114436:	f3c5 530a 	ubfx	r3, r5, #20, #11
 811443a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 811443e:	2b00      	cmp	r3, #0
 8114440:	dd09      	ble.n	8114456 <sulp+0x36>
 8114442:	051b      	lsls	r3, r3, #20
 8114444:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8114448:	2400      	movs	r4, #0
 811444a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 811444e:	4622      	mov	r2, r4
 8114450:	462b      	mov	r3, r5
 8114452:	f7ec f969 	bl	8100728 <__aeabi_dmul>
 8114456:	ec41 0b10 	vmov	d0, r0, r1
 811445a:	bd70      	pop	{r4, r5, r6, pc}
 811445c:	0000      	movs	r0, r0
	...

08114460 <_strtod_l>:
 8114460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114464:	b09f      	sub	sp, #124	@ 0x7c
 8114466:	460c      	mov	r4, r1
 8114468:	9217      	str	r2, [sp, #92]	@ 0x5c
 811446a:	2200      	movs	r2, #0
 811446c:	921a      	str	r2, [sp, #104]	@ 0x68
 811446e:	9005      	str	r0, [sp, #20]
 8114470:	f04f 0a00 	mov.w	sl, #0
 8114474:	f04f 0b00 	mov.w	fp, #0
 8114478:	460a      	mov	r2, r1
 811447a:	9219      	str	r2, [sp, #100]	@ 0x64
 811447c:	7811      	ldrb	r1, [r2, #0]
 811447e:	292b      	cmp	r1, #43	@ 0x2b
 8114480:	d04a      	beq.n	8114518 <_strtod_l+0xb8>
 8114482:	d838      	bhi.n	81144f6 <_strtod_l+0x96>
 8114484:	290d      	cmp	r1, #13
 8114486:	d832      	bhi.n	81144ee <_strtod_l+0x8e>
 8114488:	2908      	cmp	r1, #8
 811448a:	d832      	bhi.n	81144f2 <_strtod_l+0x92>
 811448c:	2900      	cmp	r1, #0
 811448e:	d03b      	beq.n	8114508 <_strtod_l+0xa8>
 8114490:	2200      	movs	r2, #0
 8114492:	920b      	str	r2, [sp, #44]	@ 0x2c
 8114494:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8114496:	782a      	ldrb	r2, [r5, #0]
 8114498:	2a30      	cmp	r2, #48	@ 0x30
 811449a:	f040 80b3 	bne.w	8114604 <_strtod_l+0x1a4>
 811449e:	786a      	ldrb	r2, [r5, #1]
 81144a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 81144a4:	2a58      	cmp	r2, #88	@ 0x58
 81144a6:	d16e      	bne.n	8114586 <_strtod_l+0x126>
 81144a8:	9302      	str	r3, [sp, #8]
 81144aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81144ac:	9301      	str	r3, [sp, #4]
 81144ae:	ab1a      	add	r3, sp, #104	@ 0x68
 81144b0:	9300      	str	r3, [sp, #0]
 81144b2:	4a8e      	ldr	r2, [pc, #568]	@ (81146ec <_strtod_l+0x28c>)
 81144b4:	9805      	ldr	r0, [sp, #20]
 81144b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 81144b8:	a919      	add	r1, sp, #100	@ 0x64
 81144ba:	f001 fa79 	bl	81159b0 <__gethex>
 81144be:	f010 060f 	ands.w	r6, r0, #15
 81144c2:	4604      	mov	r4, r0
 81144c4:	d005      	beq.n	81144d2 <_strtod_l+0x72>
 81144c6:	2e06      	cmp	r6, #6
 81144c8:	d128      	bne.n	811451c <_strtod_l+0xbc>
 81144ca:	3501      	adds	r5, #1
 81144cc:	2300      	movs	r3, #0
 81144ce:	9519      	str	r5, [sp, #100]	@ 0x64
 81144d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 81144d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81144d4:	2b00      	cmp	r3, #0
 81144d6:	f040 858e 	bne.w	8114ff6 <_strtod_l+0xb96>
 81144da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81144dc:	b1cb      	cbz	r3, 8114512 <_strtod_l+0xb2>
 81144de:	4652      	mov	r2, sl
 81144e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 81144e4:	ec43 2b10 	vmov	d0, r2, r3
 81144e8:	b01f      	add	sp, #124	@ 0x7c
 81144ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81144ee:	2920      	cmp	r1, #32
 81144f0:	d1ce      	bne.n	8114490 <_strtod_l+0x30>
 81144f2:	3201      	adds	r2, #1
 81144f4:	e7c1      	b.n	811447a <_strtod_l+0x1a>
 81144f6:	292d      	cmp	r1, #45	@ 0x2d
 81144f8:	d1ca      	bne.n	8114490 <_strtod_l+0x30>
 81144fa:	2101      	movs	r1, #1
 81144fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 81144fe:	1c51      	adds	r1, r2, #1
 8114500:	9119      	str	r1, [sp, #100]	@ 0x64
 8114502:	7852      	ldrb	r2, [r2, #1]
 8114504:	2a00      	cmp	r2, #0
 8114506:	d1c5      	bne.n	8114494 <_strtod_l+0x34>
 8114508:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 811450a:	9419      	str	r4, [sp, #100]	@ 0x64
 811450c:	2b00      	cmp	r3, #0
 811450e:	f040 8570 	bne.w	8114ff2 <_strtod_l+0xb92>
 8114512:	4652      	mov	r2, sl
 8114514:	465b      	mov	r3, fp
 8114516:	e7e5      	b.n	81144e4 <_strtod_l+0x84>
 8114518:	2100      	movs	r1, #0
 811451a:	e7ef      	b.n	81144fc <_strtod_l+0x9c>
 811451c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811451e:	b13a      	cbz	r2, 8114530 <_strtod_l+0xd0>
 8114520:	2135      	movs	r1, #53	@ 0x35
 8114522:	a81c      	add	r0, sp, #112	@ 0x70
 8114524:	f7ff ff38 	bl	8114398 <__copybits>
 8114528:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811452a:	9805      	ldr	r0, [sp, #20]
 811452c:	f7ff fb06 	bl	8113b3c <_Bfree>
 8114530:	3e01      	subs	r6, #1
 8114532:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8114534:	2e04      	cmp	r6, #4
 8114536:	d806      	bhi.n	8114546 <_strtod_l+0xe6>
 8114538:	e8df f006 	tbb	[pc, r6]
 811453c:	201d0314 	.word	0x201d0314
 8114540:	14          	.byte	0x14
 8114541:	00          	.byte	0x00
 8114542:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8114546:	05e1      	lsls	r1, r4, #23
 8114548:	bf48      	it	mi
 811454a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 811454e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114552:	0d1b      	lsrs	r3, r3, #20
 8114554:	051b      	lsls	r3, r3, #20
 8114556:	2b00      	cmp	r3, #0
 8114558:	d1bb      	bne.n	81144d2 <_strtod_l+0x72>
 811455a:	f7fe fbcf 	bl	8112cfc <__errno>
 811455e:	2322      	movs	r3, #34	@ 0x22
 8114560:	6003      	str	r3, [r0, #0]
 8114562:	e7b6      	b.n	81144d2 <_strtod_l+0x72>
 8114564:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8114568:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 811456c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8114570:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8114574:	e7e7      	b.n	8114546 <_strtod_l+0xe6>
 8114576:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 81146f4 <_strtod_l+0x294>
 811457a:	e7e4      	b.n	8114546 <_strtod_l+0xe6>
 811457c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8114580:	f04f 3aff 	mov.w	sl, #4294967295
 8114584:	e7df      	b.n	8114546 <_strtod_l+0xe6>
 8114586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114588:	1c5a      	adds	r2, r3, #1
 811458a:	9219      	str	r2, [sp, #100]	@ 0x64
 811458c:	785b      	ldrb	r3, [r3, #1]
 811458e:	2b30      	cmp	r3, #48	@ 0x30
 8114590:	d0f9      	beq.n	8114586 <_strtod_l+0x126>
 8114592:	2b00      	cmp	r3, #0
 8114594:	d09d      	beq.n	81144d2 <_strtod_l+0x72>
 8114596:	2301      	movs	r3, #1
 8114598:	9309      	str	r3, [sp, #36]	@ 0x24
 811459a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811459c:	930c      	str	r3, [sp, #48]	@ 0x30
 811459e:	2300      	movs	r3, #0
 81145a0:	9308      	str	r3, [sp, #32]
 81145a2:	930a      	str	r3, [sp, #40]	@ 0x28
 81145a4:	461f      	mov	r7, r3
 81145a6:	220a      	movs	r2, #10
 81145a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 81145aa:	7805      	ldrb	r5, [r0, #0]
 81145ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 81145b0:	b2d9      	uxtb	r1, r3
 81145b2:	2909      	cmp	r1, #9
 81145b4:	d928      	bls.n	8114608 <_strtod_l+0x1a8>
 81145b6:	494e      	ldr	r1, [pc, #312]	@ (81146f0 <_strtod_l+0x290>)
 81145b8:	2201      	movs	r2, #1
 81145ba:	f7fe fac4 	bl	8112b46 <strncmp>
 81145be:	2800      	cmp	r0, #0
 81145c0:	d032      	beq.n	8114628 <_strtod_l+0x1c8>
 81145c2:	2000      	movs	r0, #0
 81145c4:	462a      	mov	r2, r5
 81145c6:	4681      	mov	r9, r0
 81145c8:	463d      	mov	r5, r7
 81145ca:	4603      	mov	r3, r0
 81145cc:	2a65      	cmp	r2, #101	@ 0x65
 81145ce:	d001      	beq.n	81145d4 <_strtod_l+0x174>
 81145d0:	2a45      	cmp	r2, #69	@ 0x45
 81145d2:	d114      	bne.n	81145fe <_strtod_l+0x19e>
 81145d4:	b91d      	cbnz	r5, 81145de <_strtod_l+0x17e>
 81145d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81145d8:	4302      	orrs	r2, r0
 81145da:	d095      	beq.n	8114508 <_strtod_l+0xa8>
 81145dc:	2500      	movs	r5, #0
 81145de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 81145e0:	1c62      	adds	r2, r4, #1
 81145e2:	9219      	str	r2, [sp, #100]	@ 0x64
 81145e4:	7862      	ldrb	r2, [r4, #1]
 81145e6:	2a2b      	cmp	r2, #43	@ 0x2b
 81145e8:	d077      	beq.n	81146da <_strtod_l+0x27a>
 81145ea:	2a2d      	cmp	r2, #45	@ 0x2d
 81145ec:	d07b      	beq.n	81146e6 <_strtod_l+0x286>
 81145ee:	f04f 0c00 	mov.w	ip, #0
 81145f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 81145f6:	2909      	cmp	r1, #9
 81145f8:	f240 8082 	bls.w	8114700 <_strtod_l+0x2a0>
 81145fc:	9419      	str	r4, [sp, #100]	@ 0x64
 81145fe:	f04f 0800 	mov.w	r8, #0
 8114602:	e0a2      	b.n	811474a <_strtod_l+0x2ea>
 8114604:	2300      	movs	r3, #0
 8114606:	e7c7      	b.n	8114598 <_strtod_l+0x138>
 8114608:	2f08      	cmp	r7, #8
 811460a:	bfd5      	itete	le
 811460c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 811460e:	9908      	ldrgt	r1, [sp, #32]
 8114610:	fb02 3301 	mlale	r3, r2, r1, r3
 8114614:	fb02 3301 	mlagt	r3, r2, r1, r3
 8114618:	f100 0001 	add.w	r0, r0, #1
 811461c:	bfd4      	ite	le
 811461e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8114620:	9308      	strgt	r3, [sp, #32]
 8114622:	3701      	adds	r7, #1
 8114624:	9019      	str	r0, [sp, #100]	@ 0x64
 8114626:	e7bf      	b.n	81145a8 <_strtod_l+0x148>
 8114628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811462a:	1c5a      	adds	r2, r3, #1
 811462c:	9219      	str	r2, [sp, #100]	@ 0x64
 811462e:	785a      	ldrb	r2, [r3, #1]
 8114630:	b37f      	cbz	r7, 8114692 <_strtod_l+0x232>
 8114632:	4681      	mov	r9, r0
 8114634:	463d      	mov	r5, r7
 8114636:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 811463a:	2b09      	cmp	r3, #9
 811463c:	d912      	bls.n	8114664 <_strtod_l+0x204>
 811463e:	2301      	movs	r3, #1
 8114640:	e7c4      	b.n	81145cc <_strtod_l+0x16c>
 8114642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114644:	1c5a      	adds	r2, r3, #1
 8114646:	9219      	str	r2, [sp, #100]	@ 0x64
 8114648:	785a      	ldrb	r2, [r3, #1]
 811464a:	3001      	adds	r0, #1
 811464c:	2a30      	cmp	r2, #48	@ 0x30
 811464e:	d0f8      	beq.n	8114642 <_strtod_l+0x1e2>
 8114650:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8114654:	2b08      	cmp	r3, #8
 8114656:	f200 84d3 	bhi.w	8115000 <_strtod_l+0xba0>
 811465a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811465c:	930c      	str	r3, [sp, #48]	@ 0x30
 811465e:	4681      	mov	r9, r0
 8114660:	2000      	movs	r0, #0
 8114662:	4605      	mov	r5, r0
 8114664:	3a30      	subs	r2, #48	@ 0x30
 8114666:	f100 0301 	add.w	r3, r0, #1
 811466a:	d02a      	beq.n	81146c2 <_strtod_l+0x262>
 811466c:	4499      	add	r9, r3
 811466e:	eb00 0c05 	add.w	ip, r0, r5
 8114672:	462b      	mov	r3, r5
 8114674:	210a      	movs	r1, #10
 8114676:	4563      	cmp	r3, ip
 8114678:	d10d      	bne.n	8114696 <_strtod_l+0x236>
 811467a:	1c69      	adds	r1, r5, #1
 811467c:	4401      	add	r1, r0
 811467e:	4428      	add	r0, r5
 8114680:	2808      	cmp	r0, #8
 8114682:	dc16      	bgt.n	81146b2 <_strtod_l+0x252>
 8114684:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8114686:	230a      	movs	r3, #10
 8114688:	fb03 2300 	mla	r3, r3, r0, r2
 811468c:	930a      	str	r3, [sp, #40]	@ 0x28
 811468e:	2300      	movs	r3, #0
 8114690:	e018      	b.n	81146c4 <_strtod_l+0x264>
 8114692:	4638      	mov	r0, r7
 8114694:	e7da      	b.n	811464c <_strtod_l+0x1ec>
 8114696:	2b08      	cmp	r3, #8
 8114698:	f103 0301 	add.w	r3, r3, #1
 811469c:	dc03      	bgt.n	81146a6 <_strtod_l+0x246>
 811469e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 81146a0:	434e      	muls	r6, r1
 81146a2:	960a      	str	r6, [sp, #40]	@ 0x28
 81146a4:	e7e7      	b.n	8114676 <_strtod_l+0x216>
 81146a6:	2b10      	cmp	r3, #16
 81146a8:	bfde      	ittt	le
 81146aa:	9e08      	ldrle	r6, [sp, #32]
 81146ac:	434e      	mulle	r6, r1
 81146ae:	9608      	strle	r6, [sp, #32]
 81146b0:	e7e1      	b.n	8114676 <_strtod_l+0x216>
 81146b2:	280f      	cmp	r0, #15
 81146b4:	dceb      	bgt.n	811468e <_strtod_l+0x22e>
 81146b6:	9808      	ldr	r0, [sp, #32]
 81146b8:	230a      	movs	r3, #10
 81146ba:	fb03 2300 	mla	r3, r3, r0, r2
 81146be:	9308      	str	r3, [sp, #32]
 81146c0:	e7e5      	b.n	811468e <_strtod_l+0x22e>
 81146c2:	4629      	mov	r1, r5
 81146c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81146c6:	1c50      	adds	r0, r2, #1
 81146c8:	9019      	str	r0, [sp, #100]	@ 0x64
 81146ca:	7852      	ldrb	r2, [r2, #1]
 81146cc:	4618      	mov	r0, r3
 81146ce:	460d      	mov	r5, r1
 81146d0:	e7b1      	b.n	8114636 <_strtod_l+0x1d6>
 81146d2:	f04f 0900 	mov.w	r9, #0
 81146d6:	2301      	movs	r3, #1
 81146d8:	e77d      	b.n	81145d6 <_strtod_l+0x176>
 81146da:	f04f 0c00 	mov.w	ip, #0
 81146de:	1ca2      	adds	r2, r4, #2
 81146e0:	9219      	str	r2, [sp, #100]	@ 0x64
 81146e2:	78a2      	ldrb	r2, [r4, #2]
 81146e4:	e785      	b.n	81145f2 <_strtod_l+0x192>
 81146e6:	f04f 0c01 	mov.w	ip, #1
 81146ea:	e7f8      	b.n	81146de <_strtod_l+0x27e>
 81146ec:	081178c8 	.word	0x081178c8
 81146f0:	081178b0 	.word	0x081178b0
 81146f4:	7ff00000 	.word	0x7ff00000
 81146f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81146fa:	1c51      	adds	r1, r2, #1
 81146fc:	9119      	str	r1, [sp, #100]	@ 0x64
 81146fe:	7852      	ldrb	r2, [r2, #1]
 8114700:	2a30      	cmp	r2, #48	@ 0x30
 8114702:	d0f9      	beq.n	81146f8 <_strtod_l+0x298>
 8114704:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8114708:	2908      	cmp	r1, #8
 811470a:	f63f af78 	bhi.w	81145fe <_strtod_l+0x19e>
 811470e:	3a30      	subs	r2, #48	@ 0x30
 8114710:	920e      	str	r2, [sp, #56]	@ 0x38
 8114712:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114714:	920f      	str	r2, [sp, #60]	@ 0x3c
 8114716:	f04f 080a 	mov.w	r8, #10
 811471a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811471c:	1c56      	adds	r6, r2, #1
 811471e:	9619      	str	r6, [sp, #100]	@ 0x64
 8114720:	7852      	ldrb	r2, [r2, #1]
 8114722:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8114726:	f1be 0f09 	cmp.w	lr, #9
 811472a:	d939      	bls.n	81147a0 <_strtod_l+0x340>
 811472c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 811472e:	1a76      	subs	r6, r6, r1
 8114730:	2e08      	cmp	r6, #8
 8114732:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8114736:	dc03      	bgt.n	8114740 <_strtod_l+0x2e0>
 8114738:	990e      	ldr	r1, [sp, #56]	@ 0x38
 811473a:	4588      	cmp	r8, r1
 811473c:	bfa8      	it	ge
 811473e:	4688      	movge	r8, r1
 8114740:	f1bc 0f00 	cmp.w	ip, #0
 8114744:	d001      	beq.n	811474a <_strtod_l+0x2ea>
 8114746:	f1c8 0800 	rsb	r8, r8, #0
 811474a:	2d00      	cmp	r5, #0
 811474c:	d14e      	bne.n	81147ec <_strtod_l+0x38c>
 811474e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8114750:	4308      	orrs	r0, r1
 8114752:	f47f aebe 	bne.w	81144d2 <_strtod_l+0x72>
 8114756:	2b00      	cmp	r3, #0
 8114758:	f47f aed6 	bne.w	8114508 <_strtod_l+0xa8>
 811475c:	2a69      	cmp	r2, #105	@ 0x69
 811475e:	d028      	beq.n	81147b2 <_strtod_l+0x352>
 8114760:	dc25      	bgt.n	81147ae <_strtod_l+0x34e>
 8114762:	2a49      	cmp	r2, #73	@ 0x49
 8114764:	d025      	beq.n	81147b2 <_strtod_l+0x352>
 8114766:	2a4e      	cmp	r2, #78	@ 0x4e
 8114768:	f47f aece 	bne.w	8114508 <_strtod_l+0xa8>
 811476c:	499b      	ldr	r1, [pc, #620]	@ (81149dc <_strtod_l+0x57c>)
 811476e:	a819      	add	r0, sp, #100	@ 0x64
 8114770:	f001 fb40 	bl	8115df4 <__match>
 8114774:	2800      	cmp	r0, #0
 8114776:	f43f aec7 	beq.w	8114508 <_strtod_l+0xa8>
 811477a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811477c:	781b      	ldrb	r3, [r3, #0]
 811477e:	2b28      	cmp	r3, #40	@ 0x28
 8114780:	d12e      	bne.n	81147e0 <_strtod_l+0x380>
 8114782:	4997      	ldr	r1, [pc, #604]	@ (81149e0 <_strtod_l+0x580>)
 8114784:	aa1c      	add	r2, sp, #112	@ 0x70
 8114786:	a819      	add	r0, sp, #100	@ 0x64
 8114788:	f001 fb48 	bl	8115e1c <__hexnan>
 811478c:	2805      	cmp	r0, #5
 811478e:	d127      	bne.n	81147e0 <_strtod_l+0x380>
 8114790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8114792:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8114796:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 811479a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 811479e:	e698      	b.n	81144d2 <_strtod_l+0x72>
 81147a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 81147a2:	fb08 2101 	mla	r1, r8, r1, r2
 81147a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 81147aa:	920e      	str	r2, [sp, #56]	@ 0x38
 81147ac:	e7b5      	b.n	811471a <_strtod_l+0x2ba>
 81147ae:	2a6e      	cmp	r2, #110	@ 0x6e
 81147b0:	e7da      	b.n	8114768 <_strtod_l+0x308>
 81147b2:	498c      	ldr	r1, [pc, #560]	@ (81149e4 <_strtod_l+0x584>)
 81147b4:	a819      	add	r0, sp, #100	@ 0x64
 81147b6:	f001 fb1d 	bl	8115df4 <__match>
 81147ba:	2800      	cmp	r0, #0
 81147bc:	f43f aea4 	beq.w	8114508 <_strtod_l+0xa8>
 81147c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81147c2:	4989      	ldr	r1, [pc, #548]	@ (81149e8 <_strtod_l+0x588>)
 81147c4:	3b01      	subs	r3, #1
 81147c6:	a819      	add	r0, sp, #100	@ 0x64
 81147c8:	9319      	str	r3, [sp, #100]	@ 0x64
 81147ca:	f001 fb13 	bl	8115df4 <__match>
 81147ce:	b910      	cbnz	r0, 81147d6 <_strtod_l+0x376>
 81147d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81147d2:	3301      	adds	r3, #1
 81147d4:	9319      	str	r3, [sp, #100]	@ 0x64
 81147d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 81149f8 <_strtod_l+0x598>
 81147da:	f04f 0a00 	mov.w	sl, #0
 81147de:	e678      	b.n	81144d2 <_strtod_l+0x72>
 81147e0:	4882      	ldr	r0, [pc, #520]	@ (81149ec <_strtod_l+0x58c>)
 81147e2:	f001 f861 	bl	81158a8 <nan>
 81147e6:	ec5b ab10 	vmov	sl, fp, d0
 81147ea:	e672      	b.n	81144d2 <_strtod_l+0x72>
 81147ec:	eba8 0309 	sub.w	r3, r8, r9
 81147f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 81147f2:	9309      	str	r3, [sp, #36]	@ 0x24
 81147f4:	2f00      	cmp	r7, #0
 81147f6:	bf08      	it	eq
 81147f8:	462f      	moveq	r7, r5
 81147fa:	2d10      	cmp	r5, #16
 81147fc:	462c      	mov	r4, r5
 81147fe:	bfa8      	it	ge
 8114800:	2410      	movge	r4, #16
 8114802:	f7eb ff17 	bl	8100634 <__aeabi_ui2d>
 8114806:	2d09      	cmp	r5, #9
 8114808:	4682      	mov	sl, r0
 811480a:	468b      	mov	fp, r1
 811480c:	dc13      	bgt.n	8114836 <_strtod_l+0x3d6>
 811480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114810:	2b00      	cmp	r3, #0
 8114812:	f43f ae5e 	beq.w	81144d2 <_strtod_l+0x72>
 8114816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114818:	dd78      	ble.n	811490c <_strtod_l+0x4ac>
 811481a:	2b16      	cmp	r3, #22
 811481c:	dc5f      	bgt.n	81148de <_strtod_l+0x47e>
 811481e:	4974      	ldr	r1, [pc, #464]	@ (81149f0 <_strtod_l+0x590>)
 8114820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8114824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114828:	4652      	mov	r2, sl
 811482a:	465b      	mov	r3, fp
 811482c:	f7eb ff7c 	bl	8100728 <__aeabi_dmul>
 8114830:	4682      	mov	sl, r0
 8114832:	468b      	mov	fp, r1
 8114834:	e64d      	b.n	81144d2 <_strtod_l+0x72>
 8114836:	4b6e      	ldr	r3, [pc, #440]	@ (81149f0 <_strtod_l+0x590>)
 8114838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 811483c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8114840:	f7eb ff72 	bl	8100728 <__aeabi_dmul>
 8114844:	4682      	mov	sl, r0
 8114846:	9808      	ldr	r0, [sp, #32]
 8114848:	468b      	mov	fp, r1
 811484a:	f7eb fef3 	bl	8100634 <__aeabi_ui2d>
 811484e:	4602      	mov	r2, r0
 8114850:	460b      	mov	r3, r1
 8114852:	4650      	mov	r0, sl
 8114854:	4659      	mov	r1, fp
 8114856:	f7eb fdb1 	bl	81003bc <__adddf3>
 811485a:	2d0f      	cmp	r5, #15
 811485c:	4682      	mov	sl, r0
 811485e:	468b      	mov	fp, r1
 8114860:	ddd5      	ble.n	811480e <_strtod_l+0x3ae>
 8114862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114864:	1b2c      	subs	r4, r5, r4
 8114866:	441c      	add	r4, r3
 8114868:	2c00      	cmp	r4, #0
 811486a:	f340 8096 	ble.w	811499a <_strtod_l+0x53a>
 811486e:	f014 030f 	ands.w	r3, r4, #15
 8114872:	d00a      	beq.n	811488a <_strtod_l+0x42a>
 8114874:	495e      	ldr	r1, [pc, #376]	@ (81149f0 <_strtod_l+0x590>)
 8114876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 811487a:	4652      	mov	r2, sl
 811487c:	465b      	mov	r3, fp
 811487e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114882:	f7eb ff51 	bl	8100728 <__aeabi_dmul>
 8114886:	4682      	mov	sl, r0
 8114888:	468b      	mov	fp, r1
 811488a:	f034 040f 	bics.w	r4, r4, #15
 811488e:	d073      	beq.n	8114978 <_strtod_l+0x518>
 8114890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8114894:	dd48      	ble.n	8114928 <_strtod_l+0x4c8>
 8114896:	2400      	movs	r4, #0
 8114898:	46a0      	mov	r8, r4
 811489a:	940a      	str	r4, [sp, #40]	@ 0x28
 811489c:	46a1      	mov	r9, r4
 811489e:	9a05      	ldr	r2, [sp, #20]
 81148a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 81149f8 <_strtod_l+0x598>
 81148a4:	2322      	movs	r3, #34	@ 0x22
 81148a6:	6013      	str	r3, [r2, #0]
 81148a8:	f04f 0a00 	mov.w	sl, #0
 81148ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81148ae:	2b00      	cmp	r3, #0
 81148b0:	f43f ae0f 	beq.w	81144d2 <_strtod_l+0x72>
 81148b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81148b6:	9805      	ldr	r0, [sp, #20]
 81148b8:	f7ff f940 	bl	8113b3c <_Bfree>
 81148bc:	9805      	ldr	r0, [sp, #20]
 81148be:	4649      	mov	r1, r9
 81148c0:	f7ff f93c 	bl	8113b3c <_Bfree>
 81148c4:	9805      	ldr	r0, [sp, #20]
 81148c6:	4641      	mov	r1, r8
 81148c8:	f7ff f938 	bl	8113b3c <_Bfree>
 81148cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81148ce:	9805      	ldr	r0, [sp, #20]
 81148d0:	f7ff f934 	bl	8113b3c <_Bfree>
 81148d4:	9805      	ldr	r0, [sp, #20]
 81148d6:	4621      	mov	r1, r4
 81148d8:	f7ff f930 	bl	8113b3c <_Bfree>
 81148dc:	e5f9      	b.n	81144d2 <_strtod_l+0x72>
 81148de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81148e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 81148e4:	4293      	cmp	r3, r2
 81148e6:	dbbc      	blt.n	8114862 <_strtod_l+0x402>
 81148e8:	4c41      	ldr	r4, [pc, #260]	@ (81149f0 <_strtod_l+0x590>)
 81148ea:	f1c5 050f 	rsb	r5, r5, #15
 81148ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81148f2:	4652      	mov	r2, sl
 81148f4:	465b      	mov	r3, fp
 81148f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81148fa:	f7eb ff15 	bl	8100728 <__aeabi_dmul>
 81148fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114900:	1b5d      	subs	r5, r3, r5
 8114902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8114906:	e9d4 2300 	ldrd	r2, r3, [r4]
 811490a:	e78f      	b.n	811482c <_strtod_l+0x3cc>
 811490c:	3316      	adds	r3, #22
 811490e:	dba8      	blt.n	8114862 <_strtod_l+0x402>
 8114910:	4b37      	ldr	r3, [pc, #220]	@ (81149f0 <_strtod_l+0x590>)
 8114912:	eba9 0808 	sub.w	r8, r9, r8
 8114916:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 811491a:	e9d8 2300 	ldrd	r2, r3, [r8]
 811491e:	4650      	mov	r0, sl
 8114920:	4659      	mov	r1, fp
 8114922:	f7ec f82b 	bl	810097c <__aeabi_ddiv>
 8114926:	e783      	b.n	8114830 <_strtod_l+0x3d0>
 8114928:	4b32      	ldr	r3, [pc, #200]	@ (81149f4 <_strtod_l+0x594>)
 811492a:	9308      	str	r3, [sp, #32]
 811492c:	2300      	movs	r3, #0
 811492e:	1124      	asrs	r4, r4, #4
 8114930:	4650      	mov	r0, sl
 8114932:	4659      	mov	r1, fp
 8114934:	461e      	mov	r6, r3
 8114936:	2c01      	cmp	r4, #1
 8114938:	dc21      	bgt.n	811497e <_strtod_l+0x51e>
 811493a:	b10b      	cbz	r3, 8114940 <_strtod_l+0x4e0>
 811493c:	4682      	mov	sl, r0
 811493e:	468b      	mov	fp, r1
 8114940:	492c      	ldr	r1, [pc, #176]	@ (81149f4 <_strtod_l+0x594>)
 8114942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8114946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 811494a:	4652      	mov	r2, sl
 811494c:	465b      	mov	r3, fp
 811494e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114952:	f7eb fee9 	bl	8100728 <__aeabi_dmul>
 8114956:	4b28      	ldr	r3, [pc, #160]	@ (81149f8 <_strtod_l+0x598>)
 8114958:	460a      	mov	r2, r1
 811495a:	400b      	ands	r3, r1
 811495c:	4927      	ldr	r1, [pc, #156]	@ (81149fc <_strtod_l+0x59c>)
 811495e:	428b      	cmp	r3, r1
 8114960:	4682      	mov	sl, r0
 8114962:	d898      	bhi.n	8114896 <_strtod_l+0x436>
 8114964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8114968:	428b      	cmp	r3, r1
 811496a:	bf86      	itte	hi
 811496c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8114a00 <_strtod_l+0x5a0>
 8114970:	f04f 3aff 	movhi.w	sl, #4294967295
 8114974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8114978:	2300      	movs	r3, #0
 811497a:	9308      	str	r3, [sp, #32]
 811497c:	e07a      	b.n	8114a74 <_strtod_l+0x614>
 811497e:	07e2      	lsls	r2, r4, #31
 8114980:	d505      	bpl.n	811498e <_strtod_l+0x52e>
 8114982:	9b08      	ldr	r3, [sp, #32]
 8114984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114988:	f7eb fece 	bl	8100728 <__aeabi_dmul>
 811498c:	2301      	movs	r3, #1
 811498e:	9a08      	ldr	r2, [sp, #32]
 8114990:	3208      	adds	r2, #8
 8114992:	3601      	adds	r6, #1
 8114994:	1064      	asrs	r4, r4, #1
 8114996:	9208      	str	r2, [sp, #32]
 8114998:	e7cd      	b.n	8114936 <_strtod_l+0x4d6>
 811499a:	d0ed      	beq.n	8114978 <_strtod_l+0x518>
 811499c:	4264      	negs	r4, r4
 811499e:	f014 020f 	ands.w	r2, r4, #15
 81149a2:	d00a      	beq.n	81149ba <_strtod_l+0x55a>
 81149a4:	4b12      	ldr	r3, [pc, #72]	@ (81149f0 <_strtod_l+0x590>)
 81149a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81149aa:	4650      	mov	r0, sl
 81149ac:	4659      	mov	r1, fp
 81149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81149b2:	f7eb ffe3 	bl	810097c <__aeabi_ddiv>
 81149b6:	4682      	mov	sl, r0
 81149b8:	468b      	mov	fp, r1
 81149ba:	1124      	asrs	r4, r4, #4
 81149bc:	d0dc      	beq.n	8114978 <_strtod_l+0x518>
 81149be:	2c1f      	cmp	r4, #31
 81149c0:	dd20      	ble.n	8114a04 <_strtod_l+0x5a4>
 81149c2:	2400      	movs	r4, #0
 81149c4:	46a0      	mov	r8, r4
 81149c6:	940a      	str	r4, [sp, #40]	@ 0x28
 81149c8:	46a1      	mov	r9, r4
 81149ca:	9a05      	ldr	r2, [sp, #20]
 81149cc:	2322      	movs	r3, #34	@ 0x22
 81149ce:	f04f 0a00 	mov.w	sl, #0
 81149d2:	f04f 0b00 	mov.w	fp, #0
 81149d6:	6013      	str	r3, [r2, #0]
 81149d8:	e768      	b.n	81148ac <_strtod_l+0x44c>
 81149da:	bf00      	nop
 81149dc:	08117644 	.word	0x08117644
 81149e0:	081178b4 	.word	0x081178b4
 81149e4:	0811763c 	.word	0x0811763c
 81149e8:	081176e4 	.word	0x081176e4
 81149ec:	08117535 	.word	0x08117535
 81149f0:	081177e8 	.word	0x081177e8
 81149f4:	081177c0 	.word	0x081177c0
 81149f8:	7ff00000 	.word	0x7ff00000
 81149fc:	7ca00000 	.word	0x7ca00000
 8114a00:	7fefffff 	.word	0x7fefffff
 8114a04:	f014 0310 	ands.w	r3, r4, #16
 8114a08:	bf18      	it	ne
 8114a0a:	236a      	movne	r3, #106	@ 0x6a
 8114a0c:	4ea9      	ldr	r6, [pc, #676]	@ (8114cb4 <_strtod_l+0x854>)
 8114a0e:	9308      	str	r3, [sp, #32]
 8114a10:	4650      	mov	r0, sl
 8114a12:	4659      	mov	r1, fp
 8114a14:	2300      	movs	r3, #0
 8114a16:	07e2      	lsls	r2, r4, #31
 8114a18:	d504      	bpl.n	8114a24 <_strtod_l+0x5c4>
 8114a1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8114a1e:	f7eb fe83 	bl	8100728 <__aeabi_dmul>
 8114a22:	2301      	movs	r3, #1
 8114a24:	1064      	asrs	r4, r4, #1
 8114a26:	f106 0608 	add.w	r6, r6, #8
 8114a2a:	d1f4      	bne.n	8114a16 <_strtod_l+0x5b6>
 8114a2c:	b10b      	cbz	r3, 8114a32 <_strtod_l+0x5d2>
 8114a2e:	4682      	mov	sl, r0
 8114a30:	468b      	mov	fp, r1
 8114a32:	9b08      	ldr	r3, [sp, #32]
 8114a34:	b1b3      	cbz	r3, 8114a64 <_strtod_l+0x604>
 8114a36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8114a3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8114a3e:	2b00      	cmp	r3, #0
 8114a40:	4659      	mov	r1, fp
 8114a42:	dd0f      	ble.n	8114a64 <_strtod_l+0x604>
 8114a44:	2b1f      	cmp	r3, #31
 8114a46:	dd55      	ble.n	8114af4 <_strtod_l+0x694>
 8114a48:	2b34      	cmp	r3, #52	@ 0x34
 8114a4a:	bfde      	ittt	le
 8114a4c:	f04f 33ff 	movle.w	r3, #4294967295
 8114a50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8114a54:	4093      	lslle	r3, r2
 8114a56:	f04f 0a00 	mov.w	sl, #0
 8114a5a:	bfcc      	ite	gt
 8114a5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8114a60:	ea03 0b01 	andle.w	fp, r3, r1
 8114a64:	2200      	movs	r2, #0
 8114a66:	2300      	movs	r3, #0
 8114a68:	4650      	mov	r0, sl
 8114a6a:	4659      	mov	r1, fp
 8114a6c:	f7ec f8c4 	bl	8100bf8 <__aeabi_dcmpeq>
 8114a70:	2800      	cmp	r0, #0
 8114a72:	d1a6      	bne.n	81149c2 <_strtod_l+0x562>
 8114a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114a76:	9300      	str	r3, [sp, #0]
 8114a78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8114a7a:	9805      	ldr	r0, [sp, #20]
 8114a7c:	462b      	mov	r3, r5
 8114a7e:	463a      	mov	r2, r7
 8114a80:	f7ff f8c4 	bl	8113c0c <__s2b>
 8114a84:	900a      	str	r0, [sp, #40]	@ 0x28
 8114a86:	2800      	cmp	r0, #0
 8114a88:	f43f af05 	beq.w	8114896 <_strtod_l+0x436>
 8114a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114a8e:	2a00      	cmp	r2, #0
 8114a90:	eba9 0308 	sub.w	r3, r9, r8
 8114a94:	bfa8      	it	ge
 8114a96:	2300      	movge	r3, #0
 8114a98:	9312      	str	r3, [sp, #72]	@ 0x48
 8114a9a:	2400      	movs	r4, #0
 8114a9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8114aa0:	9316      	str	r3, [sp, #88]	@ 0x58
 8114aa2:	46a0      	mov	r8, r4
 8114aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114aa6:	9805      	ldr	r0, [sp, #20]
 8114aa8:	6859      	ldr	r1, [r3, #4]
 8114aaa:	f7ff f807 	bl	8113abc <_Balloc>
 8114aae:	4681      	mov	r9, r0
 8114ab0:	2800      	cmp	r0, #0
 8114ab2:	f43f aef4 	beq.w	811489e <_strtod_l+0x43e>
 8114ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114ab8:	691a      	ldr	r2, [r3, #16]
 8114aba:	3202      	adds	r2, #2
 8114abc:	f103 010c 	add.w	r1, r3, #12
 8114ac0:	0092      	lsls	r2, r2, #2
 8114ac2:	300c      	adds	r0, #12
 8114ac4:	f7fe f947 	bl	8112d56 <memcpy>
 8114ac8:	ec4b ab10 	vmov	d0, sl, fp
 8114acc:	9805      	ldr	r0, [sp, #20]
 8114ace:	aa1c      	add	r2, sp, #112	@ 0x70
 8114ad0:	a91b      	add	r1, sp, #108	@ 0x6c
 8114ad2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8114ad6:	f7ff fbd5 	bl	8114284 <__d2b>
 8114ada:	901a      	str	r0, [sp, #104]	@ 0x68
 8114adc:	2800      	cmp	r0, #0
 8114ade:	f43f aede 	beq.w	811489e <_strtod_l+0x43e>
 8114ae2:	9805      	ldr	r0, [sp, #20]
 8114ae4:	2101      	movs	r1, #1
 8114ae6:	f7ff f927 	bl	8113d38 <__i2b>
 8114aea:	4680      	mov	r8, r0
 8114aec:	b948      	cbnz	r0, 8114b02 <_strtod_l+0x6a2>
 8114aee:	f04f 0800 	mov.w	r8, #0
 8114af2:	e6d4      	b.n	811489e <_strtod_l+0x43e>
 8114af4:	f04f 32ff 	mov.w	r2, #4294967295
 8114af8:	fa02 f303 	lsl.w	r3, r2, r3
 8114afc:	ea03 0a0a 	and.w	sl, r3, sl
 8114b00:	e7b0      	b.n	8114a64 <_strtod_l+0x604>
 8114b02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8114b04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8114b06:	2d00      	cmp	r5, #0
 8114b08:	bfab      	itete	ge
 8114b0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8114b0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8114b0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8114b10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8114b12:	bfac      	ite	ge
 8114b14:	18ef      	addge	r7, r5, r3
 8114b16:	1b5e      	sublt	r6, r3, r5
 8114b18:	9b08      	ldr	r3, [sp, #32]
 8114b1a:	1aed      	subs	r5, r5, r3
 8114b1c:	4415      	add	r5, r2
 8114b1e:	4b66      	ldr	r3, [pc, #408]	@ (8114cb8 <_strtod_l+0x858>)
 8114b20:	3d01      	subs	r5, #1
 8114b22:	429d      	cmp	r5, r3
 8114b24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8114b28:	da50      	bge.n	8114bcc <_strtod_l+0x76c>
 8114b2a:	1b5b      	subs	r3, r3, r5
 8114b2c:	2b1f      	cmp	r3, #31
 8114b2e:	eba2 0203 	sub.w	r2, r2, r3
 8114b32:	f04f 0101 	mov.w	r1, #1
 8114b36:	dc3d      	bgt.n	8114bb4 <_strtod_l+0x754>
 8114b38:	fa01 f303 	lsl.w	r3, r1, r3
 8114b3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114b3e:	2300      	movs	r3, #0
 8114b40:	9310      	str	r3, [sp, #64]	@ 0x40
 8114b42:	18bd      	adds	r5, r7, r2
 8114b44:	9b08      	ldr	r3, [sp, #32]
 8114b46:	42af      	cmp	r7, r5
 8114b48:	4416      	add	r6, r2
 8114b4a:	441e      	add	r6, r3
 8114b4c:	463b      	mov	r3, r7
 8114b4e:	bfa8      	it	ge
 8114b50:	462b      	movge	r3, r5
 8114b52:	42b3      	cmp	r3, r6
 8114b54:	bfa8      	it	ge
 8114b56:	4633      	movge	r3, r6
 8114b58:	2b00      	cmp	r3, #0
 8114b5a:	bfc2      	ittt	gt
 8114b5c:	1aed      	subgt	r5, r5, r3
 8114b5e:	1af6      	subgt	r6, r6, r3
 8114b60:	1aff      	subgt	r7, r7, r3
 8114b62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8114b64:	2b00      	cmp	r3, #0
 8114b66:	dd16      	ble.n	8114b96 <_strtod_l+0x736>
 8114b68:	4641      	mov	r1, r8
 8114b6a:	9805      	ldr	r0, [sp, #20]
 8114b6c:	461a      	mov	r2, r3
 8114b6e:	f7ff f9a3 	bl	8113eb8 <__pow5mult>
 8114b72:	4680      	mov	r8, r0
 8114b74:	2800      	cmp	r0, #0
 8114b76:	d0ba      	beq.n	8114aee <_strtod_l+0x68e>
 8114b78:	4601      	mov	r1, r0
 8114b7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8114b7c:	9805      	ldr	r0, [sp, #20]
 8114b7e:	f7ff f8f1 	bl	8113d64 <__multiply>
 8114b82:	900e      	str	r0, [sp, #56]	@ 0x38
 8114b84:	2800      	cmp	r0, #0
 8114b86:	f43f ae8a 	beq.w	811489e <_strtod_l+0x43e>
 8114b8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114b8c:	9805      	ldr	r0, [sp, #20]
 8114b8e:	f7fe ffd5 	bl	8113b3c <_Bfree>
 8114b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8114b96:	2d00      	cmp	r5, #0
 8114b98:	dc1d      	bgt.n	8114bd6 <_strtod_l+0x776>
 8114b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114b9c:	2b00      	cmp	r3, #0
 8114b9e:	dd23      	ble.n	8114be8 <_strtod_l+0x788>
 8114ba0:	4649      	mov	r1, r9
 8114ba2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8114ba4:	9805      	ldr	r0, [sp, #20]
 8114ba6:	f7ff f987 	bl	8113eb8 <__pow5mult>
 8114baa:	4681      	mov	r9, r0
 8114bac:	b9e0      	cbnz	r0, 8114be8 <_strtod_l+0x788>
 8114bae:	f04f 0900 	mov.w	r9, #0
 8114bb2:	e674      	b.n	811489e <_strtod_l+0x43e>
 8114bb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8114bb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8114bbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8114bc0:	35e2      	adds	r5, #226	@ 0xe2
 8114bc2:	fa01 f305 	lsl.w	r3, r1, r5
 8114bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8114bc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8114bca:	e7ba      	b.n	8114b42 <_strtod_l+0x6e2>
 8114bcc:	2300      	movs	r3, #0
 8114bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8114bd0:	2301      	movs	r3, #1
 8114bd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114bd4:	e7b5      	b.n	8114b42 <_strtod_l+0x6e2>
 8114bd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114bd8:	9805      	ldr	r0, [sp, #20]
 8114bda:	462a      	mov	r2, r5
 8114bdc:	f7ff f9c6 	bl	8113f6c <__lshift>
 8114be0:	901a      	str	r0, [sp, #104]	@ 0x68
 8114be2:	2800      	cmp	r0, #0
 8114be4:	d1d9      	bne.n	8114b9a <_strtod_l+0x73a>
 8114be6:	e65a      	b.n	811489e <_strtod_l+0x43e>
 8114be8:	2e00      	cmp	r6, #0
 8114bea:	dd07      	ble.n	8114bfc <_strtod_l+0x79c>
 8114bec:	4649      	mov	r1, r9
 8114bee:	9805      	ldr	r0, [sp, #20]
 8114bf0:	4632      	mov	r2, r6
 8114bf2:	f7ff f9bb 	bl	8113f6c <__lshift>
 8114bf6:	4681      	mov	r9, r0
 8114bf8:	2800      	cmp	r0, #0
 8114bfa:	d0d8      	beq.n	8114bae <_strtod_l+0x74e>
 8114bfc:	2f00      	cmp	r7, #0
 8114bfe:	dd08      	ble.n	8114c12 <_strtod_l+0x7b2>
 8114c00:	4641      	mov	r1, r8
 8114c02:	9805      	ldr	r0, [sp, #20]
 8114c04:	463a      	mov	r2, r7
 8114c06:	f7ff f9b1 	bl	8113f6c <__lshift>
 8114c0a:	4680      	mov	r8, r0
 8114c0c:	2800      	cmp	r0, #0
 8114c0e:	f43f ae46 	beq.w	811489e <_strtod_l+0x43e>
 8114c12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114c14:	9805      	ldr	r0, [sp, #20]
 8114c16:	464a      	mov	r2, r9
 8114c18:	f7ff fa30 	bl	811407c <__mdiff>
 8114c1c:	4604      	mov	r4, r0
 8114c1e:	2800      	cmp	r0, #0
 8114c20:	f43f ae3d 	beq.w	811489e <_strtod_l+0x43e>
 8114c24:	68c3      	ldr	r3, [r0, #12]
 8114c26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8114c28:	2300      	movs	r3, #0
 8114c2a:	60c3      	str	r3, [r0, #12]
 8114c2c:	4641      	mov	r1, r8
 8114c2e:	f7ff fa09 	bl	8114044 <__mcmp>
 8114c32:	2800      	cmp	r0, #0
 8114c34:	da46      	bge.n	8114cc4 <_strtod_l+0x864>
 8114c36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114c38:	ea53 030a 	orrs.w	r3, r3, sl
 8114c3c:	d16c      	bne.n	8114d18 <_strtod_l+0x8b8>
 8114c3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8114c42:	2b00      	cmp	r3, #0
 8114c44:	d168      	bne.n	8114d18 <_strtod_l+0x8b8>
 8114c46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114c4a:	0d1b      	lsrs	r3, r3, #20
 8114c4c:	051b      	lsls	r3, r3, #20
 8114c4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8114c52:	d961      	bls.n	8114d18 <_strtod_l+0x8b8>
 8114c54:	6963      	ldr	r3, [r4, #20]
 8114c56:	b913      	cbnz	r3, 8114c5e <_strtod_l+0x7fe>
 8114c58:	6923      	ldr	r3, [r4, #16]
 8114c5a:	2b01      	cmp	r3, #1
 8114c5c:	dd5c      	ble.n	8114d18 <_strtod_l+0x8b8>
 8114c5e:	4621      	mov	r1, r4
 8114c60:	2201      	movs	r2, #1
 8114c62:	9805      	ldr	r0, [sp, #20]
 8114c64:	f7ff f982 	bl	8113f6c <__lshift>
 8114c68:	4641      	mov	r1, r8
 8114c6a:	4604      	mov	r4, r0
 8114c6c:	f7ff f9ea 	bl	8114044 <__mcmp>
 8114c70:	2800      	cmp	r0, #0
 8114c72:	dd51      	ble.n	8114d18 <_strtod_l+0x8b8>
 8114c74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114c78:	9a08      	ldr	r2, [sp, #32]
 8114c7a:	0d1b      	lsrs	r3, r3, #20
 8114c7c:	051b      	lsls	r3, r3, #20
 8114c7e:	2a00      	cmp	r2, #0
 8114c80:	d06b      	beq.n	8114d5a <_strtod_l+0x8fa>
 8114c82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8114c86:	d868      	bhi.n	8114d5a <_strtod_l+0x8fa>
 8114c88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8114c8c:	f67f ae9d 	bls.w	81149ca <_strtod_l+0x56a>
 8114c90:	4b0a      	ldr	r3, [pc, #40]	@ (8114cbc <_strtod_l+0x85c>)
 8114c92:	4650      	mov	r0, sl
 8114c94:	4659      	mov	r1, fp
 8114c96:	2200      	movs	r2, #0
 8114c98:	f7eb fd46 	bl	8100728 <__aeabi_dmul>
 8114c9c:	4b08      	ldr	r3, [pc, #32]	@ (8114cc0 <_strtod_l+0x860>)
 8114c9e:	400b      	ands	r3, r1
 8114ca0:	4682      	mov	sl, r0
 8114ca2:	468b      	mov	fp, r1
 8114ca4:	2b00      	cmp	r3, #0
 8114ca6:	f47f ae05 	bne.w	81148b4 <_strtod_l+0x454>
 8114caa:	9a05      	ldr	r2, [sp, #20]
 8114cac:	2322      	movs	r3, #34	@ 0x22
 8114cae:	6013      	str	r3, [r2, #0]
 8114cb0:	e600      	b.n	81148b4 <_strtod_l+0x454>
 8114cb2:	bf00      	nop
 8114cb4:	081178e0 	.word	0x081178e0
 8114cb8:	fffffc02 	.word	0xfffffc02
 8114cbc:	39500000 	.word	0x39500000
 8114cc0:	7ff00000 	.word	0x7ff00000
 8114cc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114cc8:	d165      	bne.n	8114d96 <_strtod_l+0x936>
 8114cca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8114ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8114cd0:	b35a      	cbz	r2, 8114d2a <_strtod_l+0x8ca>
 8114cd2:	4a9f      	ldr	r2, [pc, #636]	@ (8114f50 <_strtod_l+0xaf0>)
 8114cd4:	4293      	cmp	r3, r2
 8114cd6:	d12b      	bne.n	8114d30 <_strtod_l+0x8d0>
 8114cd8:	9b08      	ldr	r3, [sp, #32]
 8114cda:	4651      	mov	r1, sl
 8114cdc:	b303      	cbz	r3, 8114d20 <_strtod_l+0x8c0>
 8114cde:	4b9d      	ldr	r3, [pc, #628]	@ (8114f54 <_strtod_l+0xaf4>)
 8114ce0:	465a      	mov	r2, fp
 8114ce2:	4013      	ands	r3, r2
 8114ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8114ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8114cec:	d81b      	bhi.n	8114d26 <_strtod_l+0x8c6>
 8114cee:	0d1b      	lsrs	r3, r3, #20
 8114cf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8114cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8114cf8:	4299      	cmp	r1, r3
 8114cfa:	d119      	bne.n	8114d30 <_strtod_l+0x8d0>
 8114cfc:	4b96      	ldr	r3, [pc, #600]	@ (8114f58 <_strtod_l+0xaf8>)
 8114cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114d00:	429a      	cmp	r2, r3
 8114d02:	d102      	bne.n	8114d0a <_strtod_l+0x8aa>
 8114d04:	3101      	adds	r1, #1
 8114d06:	f43f adca 	beq.w	811489e <_strtod_l+0x43e>
 8114d0a:	4b92      	ldr	r3, [pc, #584]	@ (8114f54 <_strtod_l+0xaf4>)
 8114d0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114d0e:	401a      	ands	r2, r3
 8114d10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8114d14:	f04f 0a00 	mov.w	sl, #0
 8114d18:	9b08      	ldr	r3, [sp, #32]
 8114d1a:	2b00      	cmp	r3, #0
 8114d1c:	d1b8      	bne.n	8114c90 <_strtod_l+0x830>
 8114d1e:	e5c9      	b.n	81148b4 <_strtod_l+0x454>
 8114d20:	f04f 33ff 	mov.w	r3, #4294967295
 8114d24:	e7e8      	b.n	8114cf8 <_strtod_l+0x898>
 8114d26:	4613      	mov	r3, r2
 8114d28:	e7e6      	b.n	8114cf8 <_strtod_l+0x898>
 8114d2a:	ea53 030a 	orrs.w	r3, r3, sl
 8114d2e:	d0a1      	beq.n	8114c74 <_strtod_l+0x814>
 8114d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8114d32:	b1db      	cbz	r3, 8114d6c <_strtod_l+0x90c>
 8114d34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114d36:	4213      	tst	r3, r2
 8114d38:	d0ee      	beq.n	8114d18 <_strtod_l+0x8b8>
 8114d3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114d3c:	9a08      	ldr	r2, [sp, #32]
 8114d3e:	4650      	mov	r0, sl
 8114d40:	4659      	mov	r1, fp
 8114d42:	b1bb      	cbz	r3, 8114d74 <_strtod_l+0x914>
 8114d44:	f7ff fb6c 	bl	8114420 <sulp>
 8114d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8114d4c:	ec53 2b10 	vmov	r2, r3, d0
 8114d50:	f7eb fb34 	bl	81003bc <__adddf3>
 8114d54:	4682      	mov	sl, r0
 8114d56:	468b      	mov	fp, r1
 8114d58:	e7de      	b.n	8114d18 <_strtod_l+0x8b8>
 8114d5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8114d5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8114d62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8114d66:	f04f 3aff 	mov.w	sl, #4294967295
 8114d6a:	e7d5      	b.n	8114d18 <_strtod_l+0x8b8>
 8114d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8114d6e:	ea13 0f0a 	tst.w	r3, sl
 8114d72:	e7e1      	b.n	8114d38 <_strtod_l+0x8d8>
 8114d74:	f7ff fb54 	bl	8114420 <sulp>
 8114d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8114d7c:	ec53 2b10 	vmov	r2, r3, d0
 8114d80:	f7eb fb1a 	bl	81003b8 <__aeabi_dsub>
 8114d84:	2200      	movs	r2, #0
 8114d86:	2300      	movs	r3, #0
 8114d88:	4682      	mov	sl, r0
 8114d8a:	468b      	mov	fp, r1
 8114d8c:	f7eb ff34 	bl	8100bf8 <__aeabi_dcmpeq>
 8114d90:	2800      	cmp	r0, #0
 8114d92:	d0c1      	beq.n	8114d18 <_strtod_l+0x8b8>
 8114d94:	e619      	b.n	81149ca <_strtod_l+0x56a>
 8114d96:	4641      	mov	r1, r8
 8114d98:	4620      	mov	r0, r4
 8114d9a:	f7ff facb 	bl	8114334 <__ratio>
 8114d9e:	ec57 6b10 	vmov	r6, r7, d0
 8114da2:	2200      	movs	r2, #0
 8114da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8114da8:	4630      	mov	r0, r6
 8114daa:	4639      	mov	r1, r7
 8114dac:	f7eb ff38 	bl	8100c20 <__aeabi_dcmple>
 8114db0:	2800      	cmp	r0, #0
 8114db2:	d06f      	beq.n	8114e94 <_strtod_l+0xa34>
 8114db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114db6:	2b00      	cmp	r3, #0
 8114db8:	d17a      	bne.n	8114eb0 <_strtod_l+0xa50>
 8114dba:	f1ba 0f00 	cmp.w	sl, #0
 8114dbe:	d158      	bne.n	8114e72 <_strtod_l+0xa12>
 8114dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8114dc6:	2b00      	cmp	r3, #0
 8114dc8:	d15a      	bne.n	8114e80 <_strtod_l+0xa20>
 8114dca:	4b64      	ldr	r3, [pc, #400]	@ (8114f5c <_strtod_l+0xafc>)
 8114dcc:	2200      	movs	r2, #0
 8114dce:	4630      	mov	r0, r6
 8114dd0:	4639      	mov	r1, r7
 8114dd2:	f7eb ff1b 	bl	8100c0c <__aeabi_dcmplt>
 8114dd6:	2800      	cmp	r0, #0
 8114dd8:	d159      	bne.n	8114e8e <_strtod_l+0xa2e>
 8114dda:	4630      	mov	r0, r6
 8114ddc:	4639      	mov	r1, r7
 8114dde:	4b60      	ldr	r3, [pc, #384]	@ (8114f60 <_strtod_l+0xb00>)
 8114de0:	2200      	movs	r2, #0
 8114de2:	f7eb fca1 	bl	8100728 <__aeabi_dmul>
 8114de6:	4606      	mov	r6, r0
 8114de8:	460f      	mov	r7, r1
 8114dea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8114dee:	9606      	str	r6, [sp, #24]
 8114df0:	9307      	str	r3, [sp, #28]
 8114df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8114df6:	4d57      	ldr	r5, [pc, #348]	@ (8114f54 <_strtod_l+0xaf4>)
 8114df8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8114dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114dfe:	401d      	ands	r5, r3
 8114e00:	4b58      	ldr	r3, [pc, #352]	@ (8114f64 <_strtod_l+0xb04>)
 8114e02:	429d      	cmp	r5, r3
 8114e04:	f040 80b2 	bne.w	8114f6c <_strtod_l+0xb0c>
 8114e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114e0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8114e0e:	ec4b ab10 	vmov	d0, sl, fp
 8114e12:	f7ff f9c7 	bl	81141a4 <__ulp>
 8114e16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8114e1a:	ec51 0b10 	vmov	r0, r1, d0
 8114e1e:	f7eb fc83 	bl	8100728 <__aeabi_dmul>
 8114e22:	4652      	mov	r2, sl
 8114e24:	465b      	mov	r3, fp
 8114e26:	f7eb fac9 	bl	81003bc <__adddf3>
 8114e2a:	460b      	mov	r3, r1
 8114e2c:	4949      	ldr	r1, [pc, #292]	@ (8114f54 <_strtod_l+0xaf4>)
 8114e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8114f68 <_strtod_l+0xb08>)
 8114e30:	4019      	ands	r1, r3
 8114e32:	4291      	cmp	r1, r2
 8114e34:	4682      	mov	sl, r0
 8114e36:	d942      	bls.n	8114ebe <_strtod_l+0xa5e>
 8114e38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8114e3a:	4b47      	ldr	r3, [pc, #284]	@ (8114f58 <_strtod_l+0xaf8>)
 8114e3c:	429a      	cmp	r2, r3
 8114e3e:	d103      	bne.n	8114e48 <_strtod_l+0x9e8>
 8114e40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8114e42:	3301      	adds	r3, #1
 8114e44:	f43f ad2b 	beq.w	811489e <_strtod_l+0x43e>
 8114e48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8114f58 <_strtod_l+0xaf8>
 8114e4c:	f04f 3aff 	mov.w	sl, #4294967295
 8114e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114e52:	9805      	ldr	r0, [sp, #20]
 8114e54:	f7fe fe72 	bl	8113b3c <_Bfree>
 8114e58:	9805      	ldr	r0, [sp, #20]
 8114e5a:	4649      	mov	r1, r9
 8114e5c:	f7fe fe6e 	bl	8113b3c <_Bfree>
 8114e60:	9805      	ldr	r0, [sp, #20]
 8114e62:	4641      	mov	r1, r8
 8114e64:	f7fe fe6a 	bl	8113b3c <_Bfree>
 8114e68:	9805      	ldr	r0, [sp, #20]
 8114e6a:	4621      	mov	r1, r4
 8114e6c:	f7fe fe66 	bl	8113b3c <_Bfree>
 8114e70:	e618      	b.n	8114aa4 <_strtod_l+0x644>
 8114e72:	f1ba 0f01 	cmp.w	sl, #1
 8114e76:	d103      	bne.n	8114e80 <_strtod_l+0xa20>
 8114e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114e7a:	2b00      	cmp	r3, #0
 8114e7c:	f43f ada5 	beq.w	81149ca <_strtod_l+0x56a>
 8114e80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8114f30 <_strtod_l+0xad0>
 8114e84:	4f35      	ldr	r7, [pc, #212]	@ (8114f5c <_strtod_l+0xafc>)
 8114e86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8114e8a:	2600      	movs	r6, #0
 8114e8c:	e7b1      	b.n	8114df2 <_strtod_l+0x992>
 8114e8e:	4f34      	ldr	r7, [pc, #208]	@ (8114f60 <_strtod_l+0xb00>)
 8114e90:	2600      	movs	r6, #0
 8114e92:	e7aa      	b.n	8114dea <_strtod_l+0x98a>
 8114e94:	4b32      	ldr	r3, [pc, #200]	@ (8114f60 <_strtod_l+0xb00>)
 8114e96:	4630      	mov	r0, r6
 8114e98:	4639      	mov	r1, r7
 8114e9a:	2200      	movs	r2, #0
 8114e9c:	f7eb fc44 	bl	8100728 <__aeabi_dmul>
 8114ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114ea2:	4606      	mov	r6, r0
 8114ea4:	460f      	mov	r7, r1
 8114ea6:	2b00      	cmp	r3, #0
 8114ea8:	d09f      	beq.n	8114dea <_strtod_l+0x98a>
 8114eaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8114eae:	e7a0      	b.n	8114df2 <_strtod_l+0x992>
 8114eb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8114f38 <_strtod_l+0xad8>
 8114eb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8114eb8:	ec57 6b17 	vmov	r6, r7, d7
 8114ebc:	e799      	b.n	8114df2 <_strtod_l+0x992>
 8114ebe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8114ec2:	9b08      	ldr	r3, [sp, #32]
 8114ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114ec8:	2b00      	cmp	r3, #0
 8114eca:	d1c1      	bne.n	8114e50 <_strtod_l+0x9f0>
 8114ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114ed0:	0d1b      	lsrs	r3, r3, #20
 8114ed2:	051b      	lsls	r3, r3, #20
 8114ed4:	429d      	cmp	r5, r3
 8114ed6:	d1bb      	bne.n	8114e50 <_strtod_l+0x9f0>
 8114ed8:	4630      	mov	r0, r6
 8114eda:	4639      	mov	r1, r7
 8114edc:	f7eb ff84 	bl	8100de8 <__aeabi_d2lz>
 8114ee0:	f7eb fbf4 	bl	81006cc <__aeabi_l2d>
 8114ee4:	4602      	mov	r2, r0
 8114ee6:	460b      	mov	r3, r1
 8114ee8:	4630      	mov	r0, r6
 8114eea:	4639      	mov	r1, r7
 8114eec:	f7eb fa64 	bl	81003b8 <__aeabi_dsub>
 8114ef0:	460b      	mov	r3, r1
 8114ef2:	4602      	mov	r2, r0
 8114ef4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8114ef8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8114efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114efe:	ea46 060a 	orr.w	r6, r6, sl
 8114f02:	431e      	orrs	r6, r3
 8114f04:	d06f      	beq.n	8114fe6 <_strtod_l+0xb86>
 8114f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8114f40 <_strtod_l+0xae0>)
 8114f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f0c:	f7eb fe7e 	bl	8100c0c <__aeabi_dcmplt>
 8114f10:	2800      	cmp	r0, #0
 8114f12:	f47f accf 	bne.w	81148b4 <_strtod_l+0x454>
 8114f16:	a30c      	add	r3, pc, #48	@ (adr r3, 8114f48 <_strtod_l+0xae8>)
 8114f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8114f20:	f7eb fe92 	bl	8100c48 <__aeabi_dcmpgt>
 8114f24:	2800      	cmp	r0, #0
 8114f26:	d093      	beq.n	8114e50 <_strtod_l+0x9f0>
 8114f28:	e4c4      	b.n	81148b4 <_strtod_l+0x454>
 8114f2a:	bf00      	nop
 8114f2c:	f3af 8000 	nop.w
 8114f30:	00000000 	.word	0x00000000
 8114f34:	bff00000 	.word	0xbff00000
 8114f38:	00000000 	.word	0x00000000
 8114f3c:	3ff00000 	.word	0x3ff00000
 8114f40:	94a03595 	.word	0x94a03595
 8114f44:	3fdfffff 	.word	0x3fdfffff
 8114f48:	35afe535 	.word	0x35afe535
 8114f4c:	3fe00000 	.word	0x3fe00000
 8114f50:	000fffff 	.word	0x000fffff
 8114f54:	7ff00000 	.word	0x7ff00000
 8114f58:	7fefffff 	.word	0x7fefffff
 8114f5c:	3ff00000 	.word	0x3ff00000
 8114f60:	3fe00000 	.word	0x3fe00000
 8114f64:	7fe00000 	.word	0x7fe00000
 8114f68:	7c9fffff 	.word	0x7c9fffff
 8114f6c:	9b08      	ldr	r3, [sp, #32]
 8114f6e:	b323      	cbz	r3, 8114fba <_strtod_l+0xb5a>
 8114f70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8114f74:	d821      	bhi.n	8114fba <_strtod_l+0xb5a>
 8114f76:	a328      	add	r3, pc, #160	@ (adr r3, 8115018 <_strtod_l+0xbb8>)
 8114f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f7c:	4630      	mov	r0, r6
 8114f7e:	4639      	mov	r1, r7
 8114f80:	f7eb fe4e 	bl	8100c20 <__aeabi_dcmple>
 8114f84:	b1a0      	cbz	r0, 8114fb0 <_strtod_l+0xb50>
 8114f86:	4639      	mov	r1, r7
 8114f88:	4630      	mov	r0, r6
 8114f8a:	f7eb fea5 	bl	8100cd8 <__aeabi_d2uiz>
 8114f8e:	2801      	cmp	r0, #1
 8114f90:	bf38      	it	cc
 8114f92:	2001      	movcc	r0, #1
 8114f94:	f7eb fb4e 	bl	8100634 <__aeabi_ui2d>
 8114f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114f9a:	4606      	mov	r6, r0
 8114f9c:	460f      	mov	r7, r1
 8114f9e:	b9fb      	cbnz	r3, 8114fe0 <_strtod_l+0xb80>
 8114fa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8114fa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8114fa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8114fa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8114fac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8114fb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8114fb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8114fb6:	1b5b      	subs	r3, r3, r5
 8114fb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8114fba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8114fbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8114fc2:	f7ff f8ef 	bl	81141a4 <__ulp>
 8114fc6:	4650      	mov	r0, sl
 8114fc8:	ec53 2b10 	vmov	r2, r3, d0
 8114fcc:	4659      	mov	r1, fp
 8114fce:	f7eb fbab 	bl	8100728 <__aeabi_dmul>
 8114fd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8114fd6:	f7eb f9f1 	bl	81003bc <__adddf3>
 8114fda:	4682      	mov	sl, r0
 8114fdc:	468b      	mov	fp, r1
 8114fde:	e770      	b.n	8114ec2 <_strtod_l+0xa62>
 8114fe0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8114fe4:	e7e0      	b.n	8114fa8 <_strtod_l+0xb48>
 8114fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 8115020 <_strtod_l+0xbc0>)
 8114fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114fec:	f7eb fe0e 	bl	8100c0c <__aeabi_dcmplt>
 8114ff0:	e798      	b.n	8114f24 <_strtod_l+0xac4>
 8114ff2:	2300      	movs	r3, #0
 8114ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8114ff6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8114ff8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114ffa:	6013      	str	r3, [r2, #0]
 8114ffc:	f7ff ba6d 	b.w	81144da <_strtod_l+0x7a>
 8115000:	2a65      	cmp	r2, #101	@ 0x65
 8115002:	f43f ab66 	beq.w	81146d2 <_strtod_l+0x272>
 8115006:	2a45      	cmp	r2, #69	@ 0x45
 8115008:	f43f ab63 	beq.w	81146d2 <_strtod_l+0x272>
 811500c:	2301      	movs	r3, #1
 811500e:	f7ff bb9e 	b.w	811474e <_strtod_l+0x2ee>
 8115012:	bf00      	nop
 8115014:	f3af 8000 	nop.w
 8115018:	ffc00000 	.word	0xffc00000
 811501c:	41dfffff 	.word	0x41dfffff
 8115020:	94a03595 	.word	0x94a03595
 8115024:	3fcfffff 	.word	0x3fcfffff

08115028 <_strtod_r>:
 8115028:	4b01      	ldr	r3, [pc, #4]	@ (8115030 <_strtod_r+0x8>)
 811502a:	f7ff ba19 	b.w	8114460 <_strtod_l>
 811502e:	bf00      	nop
 8115030:	10000118 	.word	0x10000118

08115034 <__ssputs_r>:
 8115034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8115038:	688e      	ldr	r6, [r1, #8]
 811503a:	461f      	mov	r7, r3
 811503c:	42be      	cmp	r6, r7
 811503e:	680b      	ldr	r3, [r1, #0]
 8115040:	4682      	mov	sl, r0
 8115042:	460c      	mov	r4, r1
 8115044:	4690      	mov	r8, r2
 8115046:	d82d      	bhi.n	81150a4 <__ssputs_r+0x70>
 8115048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811504c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8115050:	d026      	beq.n	81150a0 <__ssputs_r+0x6c>
 8115052:	6965      	ldr	r5, [r4, #20]
 8115054:	6909      	ldr	r1, [r1, #16]
 8115056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 811505a:	eba3 0901 	sub.w	r9, r3, r1
 811505e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8115062:	1c7b      	adds	r3, r7, #1
 8115064:	444b      	add	r3, r9
 8115066:	106d      	asrs	r5, r5, #1
 8115068:	429d      	cmp	r5, r3
 811506a:	bf38      	it	cc
 811506c:	461d      	movcc	r5, r3
 811506e:	0553      	lsls	r3, r2, #21
 8115070:	d527      	bpl.n	81150c2 <__ssputs_r+0x8e>
 8115072:	4629      	mov	r1, r5
 8115074:	f7fc fcaa 	bl	81119cc <_malloc_r>
 8115078:	4606      	mov	r6, r0
 811507a:	b360      	cbz	r0, 81150d6 <__ssputs_r+0xa2>
 811507c:	6921      	ldr	r1, [r4, #16]
 811507e:	464a      	mov	r2, r9
 8115080:	f7fd fe69 	bl	8112d56 <memcpy>
 8115084:	89a3      	ldrh	r3, [r4, #12]
 8115086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 811508a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811508e:	81a3      	strh	r3, [r4, #12]
 8115090:	6126      	str	r6, [r4, #16]
 8115092:	6165      	str	r5, [r4, #20]
 8115094:	444e      	add	r6, r9
 8115096:	eba5 0509 	sub.w	r5, r5, r9
 811509a:	6026      	str	r6, [r4, #0]
 811509c:	60a5      	str	r5, [r4, #8]
 811509e:	463e      	mov	r6, r7
 81150a0:	42be      	cmp	r6, r7
 81150a2:	d900      	bls.n	81150a6 <__ssputs_r+0x72>
 81150a4:	463e      	mov	r6, r7
 81150a6:	6820      	ldr	r0, [r4, #0]
 81150a8:	4632      	mov	r2, r6
 81150aa:	4641      	mov	r1, r8
 81150ac:	f000 fb9c 	bl	81157e8 <memmove>
 81150b0:	68a3      	ldr	r3, [r4, #8]
 81150b2:	1b9b      	subs	r3, r3, r6
 81150b4:	60a3      	str	r3, [r4, #8]
 81150b6:	6823      	ldr	r3, [r4, #0]
 81150b8:	4433      	add	r3, r6
 81150ba:	6023      	str	r3, [r4, #0]
 81150bc:	2000      	movs	r0, #0
 81150be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81150c2:	462a      	mov	r2, r5
 81150c4:	f000 ff57 	bl	8115f76 <_realloc_r>
 81150c8:	4606      	mov	r6, r0
 81150ca:	2800      	cmp	r0, #0
 81150cc:	d1e0      	bne.n	8115090 <__ssputs_r+0x5c>
 81150ce:	6921      	ldr	r1, [r4, #16]
 81150d0:	4650      	mov	r0, sl
 81150d2:	f7fe fca9 	bl	8113a28 <_free_r>
 81150d6:	230c      	movs	r3, #12
 81150d8:	f8ca 3000 	str.w	r3, [sl]
 81150dc:	89a3      	ldrh	r3, [r4, #12]
 81150de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81150e2:	81a3      	strh	r3, [r4, #12]
 81150e4:	f04f 30ff 	mov.w	r0, #4294967295
 81150e8:	e7e9      	b.n	81150be <__ssputs_r+0x8a>
	...

081150ec <_svfiprintf_r>:
 81150ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81150f0:	4698      	mov	r8, r3
 81150f2:	898b      	ldrh	r3, [r1, #12]
 81150f4:	061b      	lsls	r3, r3, #24
 81150f6:	b09d      	sub	sp, #116	@ 0x74
 81150f8:	4607      	mov	r7, r0
 81150fa:	460d      	mov	r5, r1
 81150fc:	4614      	mov	r4, r2
 81150fe:	d510      	bpl.n	8115122 <_svfiprintf_r+0x36>
 8115100:	690b      	ldr	r3, [r1, #16]
 8115102:	b973      	cbnz	r3, 8115122 <_svfiprintf_r+0x36>
 8115104:	2140      	movs	r1, #64	@ 0x40
 8115106:	f7fc fc61 	bl	81119cc <_malloc_r>
 811510a:	6028      	str	r0, [r5, #0]
 811510c:	6128      	str	r0, [r5, #16]
 811510e:	b930      	cbnz	r0, 811511e <_svfiprintf_r+0x32>
 8115110:	230c      	movs	r3, #12
 8115112:	603b      	str	r3, [r7, #0]
 8115114:	f04f 30ff 	mov.w	r0, #4294967295
 8115118:	b01d      	add	sp, #116	@ 0x74
 811511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811511e:	2340      	movs	r3, #64	@ 0x40
 8115120:	616b      	str	r3, [r5, #20]
 8115122:	2300      	movs	r3, #0
 8115124:	9309      	str	r3, [sp, #36]	@ 0x24
 8115126:	2320      	movs	r3, #32
 8115128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811512c:	f8cd 800c 	str.w	r8, [sp, #12]
 8115130:	2330      	movs	r3, #48	@ 0x30
 8115132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 81152d0 <_svfiprintf_r+0x1e4>
 8115136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811513a:	f04f 0901 	mov.w	r9, #1
 811513e:	4623      	mov	r3, r4
 8115140:	469a      	mov	sl, r3
 8115142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8115146:	b10a      	cbz	r2, 811514c <_svfiprintf_r+0x60>
 8115148:	2a25      	cmp	r2, #37	@ 0x25
 811514a:	d1f9      	bne.n	8115140 <_svfiprintf_r+0x54>
 811514c:	ebba 0b04 	subs.w	fp, sl, r4
 8115150:	d00b      	beq.n	811516a <_svfiprintf_r+0x7e>
 8115152:	465b      	mov	r3, fp
 8115154:	4622      	mov	r2, r4
 8115156:	4629      	mov	r1, r5
 8115158:	4638      	mov	r0, r7
 811515a:	f7ff ff6b 	bl	8115034 <__ssputs_r>
 811515e:	3001      	adds	r0, #1
 8115160:	f000 80a7 	beq.w	81152b2 <_svfiprintf_r+0x1c6>
 8115164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8115166:	445a      	add	r2, fp
 8115168:	9209      	str	r2, [sp, #36]	@ 0x24
 811516a:	f89a 3000 	ldrb.w	r3, [sl]
 811516e:	2b00      	cmp	r3, #0
 8115170:	f000 809f 	beq.w	81152b2 <_svfiprintf_r+0x1c6>
 8115174:	2300      	movs	r3, #0
 8115176:	f04f 32ff 	mov.w	r2, #4294967295
 811517a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811517e:	f10a 0a01 	add.w	sl, sl, #1
 8115182:	9304      	str	r3, [sp, #16]
 8115184:	9307      	str	r3, [sp, #28]
 8115186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811518a:	931a      	str	r3, [sp, #104]	@ 0x68
 811518c:	4654      	mov	r4, sl
 811518e:	2205      	movs	r2, #5
 8115190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115194:	484e      	ldr	r0, [pc, #312]	@ (81152d0 <_svfiprintf_r+0x1e4>)
 8115196:	f7eb f8b3 	bl	8100300 <memchr>
 811519a:	9a04      	ldr	r2, [sp, #16]
 811519c:	b9d8      	cbnz	r0, 81151d6 <_svfiprintf_r+0xea>
 811519e:	06d0      	lsls	r0, r2, #27
 81151a0:	bf44      	itt	mi
 81151a2:	2320      	movmi	r3, #32
 81151a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81151a8:	0711      	lsls	r1, r2, #28
 81151aa:	bf44      	itt	mi
 81151ac:	232b      	movmi	r3, #43	@ 0x2b
 81151ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81151b2:	f89a 3000 	ldrb.w	r3, [sl]
 81151b6:	2b2a      	cmp	r3, #42	@ 0x2a
 81151b8:	d015      	beq.n	81151e6 <_svfiprintf_r+0xfa>
 81151ba:	9a07      	ldr	r2, [sp, #28]
 81151bc:	4654      	mov	r4, sl
 81151be:	2000      	movs	r0, #0
 81151c0:	f04f 0c0a 	mov.w	ip, #10
 81151c4:	4621      	mov	r1, r4
 81151c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 81151ca:	3b30      	subs	r3, #48	@ 0x30
 81151cc:	2b09      	cmp	r3, #9
 81151ce:	d94b      	bls.n	8115268 <_svfiprintf_r+0x17c>
 81151d0:	b1b0      	cbz	r0, 8115200 <_svfiprintf_r+0x114>
 81151d2:	9207      	str	r2, [sp, #28]
 81151d4:	e014      	b.n	8115200 <_svfiprintf_r+0x114>
 81151d6:	eba0 0308 	sub.w	r3, r0, r8
 81151da:	fa09 f303 	lsl.w	r3, r9, r3
 81151de:	4313      	orrs	r3, r2
 81151e0:	9304      	str	r3, [sp, #16]
 81151e2:	46a2      	mov	sl, r4
 81151e4:	e7d2      	b.n	811518c <_svfiprintf_r+0xa0>
 81151e6:	9b03      	ldr	r3, [sp, #12]
 81151e8:	1d19      	adds	r1, r3, #4
 81151ea:	681b      	ldr	r3, [r3, #0]
 81151ec:	9103      	str	r1, [sp, #12]
 81151ee:	2b00      	cmp	r3, #0
 81151f0:	bfbb      	ittet	lt
 81151f2:	425b      	neglt	r3, r3
 81151f4:	f042 0202 	orrlt.w	r2, r2, #2
 81151f8:	9307      	strge	r3, [sp, #28]
 81151fa:	9307      	strlt	r3, [sp, #28]
 81151fc:	bfb8      	it	lt
 81151fe:	9204      	strlt	r2, [sp, #16]
 8115200:	7823      	ldrb	r3, [r4, #0]
 8115202:	2b2e      	cmp	r3, #46	@ 0x2e
 8115204:	d10a      	bne.n	811521c <_svfiprintf_r+0x130>
 8115206:	7863      	ldrb	r3, [r4, #1]
 8115208:	2b2a      	cmp	r3, #42	@ 0x2a
 811520a:	d132      	bne.n	8115272 <_svfiprintf_r+0x186>
 811520c:	9b03      	ldr	r3, [sp, #12]
 811520e:	1d1a      	adds	r2, r3, #4
 8115210:	681b      	ldr	r3, [r3, #0]
 8115212:	9203      	str	r2, [sp, #12]
 8115214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8115218:	3402      	adds	r4, #2
 811521a:	9305      	str	r3, [sp, #20]
 811521c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 81152e0 <_svfiprintf_r+0x1f4>
 8115220:	7821      	ldrb	r1, [r4, #0]
 8115222:	2203      	movs	r2, #3
 8115224:	4650      	mov	r0, sl
 8115226:	f7eb f86b 	bl	8100300 <memchr>
 811522a:	b138      	cbz	r0, 811523c <_svfiprintf_r+0x150>
 811522c:	9b04      	ldr	r3, [sp, #16]
 811522e:	eba0 000a 	sub.w	r0, r0, sl
 8115232:	2240      	movs	r2, #64	@ 0x40
 8115234:	4082      	lsls	r2, r0
 8115236:	4313      	orrs	r3, r2
 8115238:	3401      	adds	r4, #1
 811523a:	9304      	str	r3, [sp, #16]
 811523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115240:	4824      	ldr	r0, [pc, #144]	@ (81152d4 <_svfiprintf_r+0x1e8>)
 8115242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8115246:	2206      	movs	r2, #6
 8115248:	f7eb f85a 	bl	8100300 <memchr>
 811524c:	2800      	cmp	r0, #0
 811524e:	d036      	beq.n	81152be <_svfiprintf_r+0x1d2>
 8115250:	4b21      	ldr	r3, [pc, #132]	@ (81152d8 <_svfiprintf_r+0x1ec>)
 8115252:	bb1b      	cbnz	r3, 811529c <_svfiprintf_r+0x1b0>
 8115254:	9b03      	ldr	r3, [sp, #12]
 8115256:	3307      	adds	r3, #7
 8115258:	f023 0307 	bic.w	r3, r3, #7
 811525c:	3308      	adds	r3, #8
 811525e:	9303      	str	r3, [sp, #12]
 8115260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8115262:	4433      	add	r3, r6
 8115264:	9309      	str	r3, [sp, #36]	@ 0x24
 8115266:	e76a      	b.n	811513e <_svfiprintf_r+0x52>
 8115268:	fb0c 3202 	mla	r2, ip, r2, r3
 811526c:	460c      	mov	r4, r1
 811526e:	2001      	movs	r0, #1
 8115270:	e7a8      	b.n	81151c4 <_svfiprintf_r+0xd8>
 8115272:	2300      	movs	r3, #0
 8115274:	3401      	adds	r4, #1
 8115276:	9305      	str	r3, [sp, #20]
 8115278:	4619      	mov	r1, r3
 811527a:	f04f 0c0a 	mov.w	ip, #10
 811527e:	4620      	mov	r0, r4
 8115280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8115284:	3a30      	subs	r2, #48	@ 0x30
 8115286:	2a09      	cmp	r2, #9
 8115288:	d903      	bls.n	8115292 <_svfiprintf_r+0x1a6>
 811528a:	2b00      	cmp	r3, #0
 811528c:	d0c6      	beq.n	811521c <_svfiprintf_r+0x130>
 811528e:	9105      	str	r1, [sp, #20]
 8115290:	e7c4      	b.n	811521c <_svfiprintf_r+0x130>
 8115292:	fb0c 2101 	mla	r1, ip, r1, r2
 8115296:	4604      	mov	r4, r0
 8115298:	2301      	movs	r3, #1
 811529a:	e7f0      	b.n	811527e <_svfiprintf_r+0x192>
 811529c:	ab03      	add	r3, sp, #12
 811529e:	9300      	str	r3, [sp, #0]
 81152a0:	462a      	mov	r2, r5
 81152a2:	4b0e      	ldr	r3, [pc, #56]	@ (81152dc <_svfiprintf_r+0x1f0>)
 81152a4:	a904      	add	r1, sp, #16
 81152a6:	4638      	mov	r0, r7
 81152a8:	f7fc fd42 	bl	8111d30 <_printf_float>
 81152ac:	1c42      	adds	r2, r0, #1
 81152ae:	4606      	mov	r6, r0
 81152b0:	d1d6      	bne.n	8115260 <_svfiprintf_r+0x174>
 81152b2:	89ab      	ldrh	r3, [r5, #12]
 81152b4:	065b      	lsls	r3, r3, #25
 81152b6:	f53f af2d 	bmi.w	8115114 <_svfiprintf_r+0x28>
 81152ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81152bc:	e72c      	b.n	8115118 <_svfiprintf_r+0x2c>
 81152be:	ab03      	add	r3, sp, #12
 81152c0:	9300      	str	r3, [sp, #0]
 81152c2:	462a      	mov	r2, r5
 81152c4:	4b05      	ldr	r3, [pc, #20]	@ (81152dc <_svfiprintf_r+0x1f0>)
 81152c6:	a904      	add	r1, sp, #16
 81152c8:	4638      	mov	r0, r7
 81152ca:	f7fc ffc9 	bl	8112260 <_printf_i>
 81152ce:	e7ed      	b.n	81152ac <_svfiprintf_r+0x1c0>
 81152d0:	08117908 	.word	0x08117908
 81152d4:	08117912 	.word	0x08117912
 81152d8:	08111d31 	.word	0x08111d31
 81152dc:	08115035 	.word	0x08115035
 81152e0:	0811790e 	.word	0x0811790e

081152e4 <__sfputc_r>:
 81152e4:	6893      	ldr	r3, [r2, #8]
 81152e6:	3b01      	subs	r3, #1
 81152e8:	2b00      	cmp	r3, #0
 81152ea:	b410      	push	{r4}
 81152ec:	6093      	str	r3, [r2, #8]
 81152ee:	da08      	bge.n	8115302 <__sfputc_r+0x1e>
 81152f0:	6994      	ldr	r4, [r2, #24]
 81152f2:	42a3      	cmp	r3, r4
 81152f4:	db01      	blt.n	81152fa <__sfputc_r+0x16>
 81152f6:	290a      	cmp	r1, #10
 81152f8:	d103      	bne.n	8115302 <__sfputc_r+0x1e>
 81152fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 81152fe:	f000 b9df 	b.w	81156c0 <__swbuf_r>
 8115302:	6813      	ldr	r3, [r2, #0]
 8115304:	1c58      	adds	r0, r3, #1
 8115306:	6010      	str	r0, [r2, #0]
 8115308:	7019      	strb	r1, [r3, #0]
 811530a:	4608      	mov	r0, r1
 811530c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8115310:	4770      	bx	lr

08115312 <__sfputs_r>:
 8115312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8115314:	4606      	mov	r6, r0
 8115316:	460f      	mov	r7, r1
 8115318:	4614      	mov	r4, r2
 811531a:	18d5      	adds	r5, r2, r3
 811531c:	42ac      	cmp	r4, r5
 811531e:	d101      	bne.n	8115324 <__sfputs_r+0x12>
 8115320:	2000      	movs	r0, #0
 8115322:	e007      	b.n	8115334 <__sfputs_r+0x22>
 8115324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115328:	463a      	mov	r2, r7
 811532a:	4630      	mov	r0, r6
 811532c:	f7ff ffda 	bl	81152e4 <__sfputc_r>
 8115330:	1c43      	adds	r3, r0, #1
 8115332:	d1f3      	bne.n	811531c <__sfputs_r+0xa>
 8115334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08115338 <_vfiprintf_r>:
 8115338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811533c:	460d      	mov	r5, r1
 811533e:	b09d      	sub	sp, #116	@ 0x74
 8115340:	4614      	mov	r4, r2
 8115342:	4698      	mov	r8, r3
 8115344:	4606      	mov	r6, r0
 8115346:	b118      	cbz	r0, 8115350 <_vfiprintf_r+0x18>
 8115348:	6a03      	ldr	r3, [r0, #32]
 811534a:	b90b      	cbnz	r3, 8115350 <_vfiprintf_r+0x18>
 811534c:	f7fd fb48 	bl	81129e0 <__sinit>
 8115350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115352:	07d9      	lsls	r1, r3, #31
 8115354:	d405      	bmi.n	8115362 <_vfiprintf_r+0x2a>
 8115356:	89ab      	ldrh	r3, [r5, #12]
 8115358:	059a      	lsls	r2, r3, #22
 811535a:	d402      	bmi.n	8115362 <_vfiprintf_r+0x2a>
 811535c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811535e:	f7fd fcf8 	bl	8112d52 <__retarget_lock_acquire_recursive>
 8115362:	89ab      	ldrh	r3, [r5, #12]
 8115364:	071b      	lsls	r3, r3, #28
 8115366:	d501      	bpl.n	811536c <_vfiprintf_r+0x34>
 8115368:	692b      	ldr	r3, [r5, #16]
 811536a:	b99b      	cbnz	r3, 8115394 <_vfiprintf_r+0x5c>
 811536c:	4629      	mov	r1, r5
 811536e:	4630      	mov	r0, r6
 8115370:	f000 f9e4 	bl	811573c <__swsetup_r>
 8115374:	b170      	cbz	r0, 8115394 <_vfiprintf_r+0x5c>
 8115376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115378:	07dc      	lsls	r4, r3, #31
 811537a:	d504      	bpl.n	8115386 <_vfiprintf_r+0x4e>
 811537c:	f04f 30ff 	mov.w	r0, #4294967295
 8115380:	b01d      	add	sp, #116	@ 0x74
 8115382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115386:	89ab      	ldrh	r3, [r5, #12]
 8115388:	0598      	lsls	r0, r3, #22
 811538a:	d4f7      	bmi.n	811537c <_vfiprintf_r+0x44>
 811538c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811538e:	f7fd fce1 	bl	8112d54 <__retarget_lock_release_recursive>
 8115392:	e7f3      	b.n	811537c <_vfiprintf_r+0x44>
 8115394:	2300      	movs	r3, #0
 8115396:	9309      	str	r3, [sp, #36]	@ 0x24
 8115398:	2320      	movs	r3, #32
 811539a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811539e:	f8cd 800c 	str.w	r8, [sp, #12]
 81153a2:	2330      	movs	r3, #48	@ 0x30
 81153a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8115554 <_vfiprintf_r+0x21c>
 81153a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81153ac:	f04f 0901 	mov.w	r9, #1
 81153b0:	4623      	mov	r3, r4
 81153b2:	469a      	mov	sl, r3
 81153b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 81153b8:	b10a      	cbz	r2, 81153be <_vfiprintf_r+0x86>
 81153ba:	2a25      	cmp	r2, #37	@ 0x25
 81153bc:	d1f9      	bne.n	81153b2 <_vfiprintf_r+0x7a>
 81153be:	ebba 0b04 	subs.w	fp, sl, r4
 81153c2:	d00b      	beq.n	81153dc <_vfiprintf_r+0xa4>
 81153c4:	465b      	mov	r3, fp
 81153c6:	4622      	mov	r2, r4
 81153c8:	4629      	mov	r1, r5
 81153ca:	4630      	mov	r0, r6
 81153cc:	f7ff ffa1 	bl	8115312 <__sfputs_r>
 81153d0:	3001      	adds	r0, #1
 81153d2:	f000 80a7 	beq.w	8115524 <_vfiprintf_r+0x1ec>
 81153d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81153d8:	445a      	add	r2, fp
 81153da:	9209      	str	r2, [sp, #36]	@ 0x24
 81153dc:	f89a 3000 	ldrb.w	r3, [sl]
 81153e0:	2b00      	cmp	r3, #0
 81153e2:	f000 809f 	beq.w	8115524 <_vfiprintf_r+0x1ec>
 81153e6:	2300      	movs	r3, #0
 81153e8:	f04f 32ff 	mov.w	r2, #4294967295
 81153ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81153f0:	f10a 0a01 	add.w	sl, sl, #1
 81153f4:	9304      	str	r3, [sp, #16]
 81153f6:	9307      	str	r3, [sp, #28]
 81153f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81153fc:	931a      	str	r3, [sp, #104]	@ 0x68
 81153fe:	4654      	mov	r4, sl
 8115400:	2205      	movs	r2, #5
 8115402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115406:	4853      	ldr	r0, [pc, #332]	@ (8115554 <_vfiprintf_r+0x21c>)
 8115408:	f7ea ff7a 	bl	8100300 <memchr>
 811540c:	9a04      	ldr	r2, [sp, #16]
 811540e:	b9d8      	cbnz	r0, 8115448 <_vfiprintf_r+0x110>
 8115410:	06d1      	lsls	r1, r2, #27
 8115412:	bf44      	itt	mi
 8115414:	2320      	movmi	r3, #32
 8115416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811541a:	0713      	lsls	r3, r2, #28
 811541c:	bf44      	itt	mi
 811541e:	232b      	movmi	r3, #43	@ 0x2b
 8115420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8115424:	f89a 3000 	ldrb.w	r3, [sl]
 8115428:	2b2a      	cmp	r3, #42	@ 0x2a
 811542a:	d015      	beq.n	8115458 <_vfiprintf_r+0x120>
 811542c:	9a07      	ldr	r2, [sp, #28]
 811542e:	4654      	mov	r4, sl
 8115430:	2000      	movs	r0, #0
 8115432:	f04f 0c0a 	mov.w	ip, #10
 8115436:	4621      	mov	r1, r4
 8115438:	f811 3b01 	ldrb.w	r3, [r1], #1
 811543c:	3b30      	subs	r3, #48	@ 0x30
 811543e:	2b09      	cmp	r3, #9
 8115440:	d94b      	bls.n	81154da <_vfiprintf_r+0x1a2>
 8115442:	b1b0      	cbz	r0, 8115472 <_vfiprintf_r+0x13a>
 8115444:	9207      	str	r2, [sp, #28]
 8115446:	e014      	b.n	8115472 <_vfiprintf_r+0x13a>
 8115448:	eba0 0308 	sub.w	r3, r0, r8
 811544c:	fa09 f303 	lsl.w	r3, r9, r3
 8115450:	4313      	orrs	r3, r2
 8115452:	9304      	str	r3, [sp, #16]
 8115454:	46a2      	mov	sl, r4
 8115456:	e7d2      	b.n	81153fe <_vfiprintf_r+0xc6>
 8115458:	9b03      	ldr	r3, [sp, #12]
 811545a:	1d19      	adds	r1, r3, #4
 811545c:	681b      	ldr	r3, [r3, #0]
 811545e:	9103      	str	r1, [sp, #12]
 8115460:	2b00      	cmp	r3, #0
 8115462:	bfbb      	ittet	lt
 8115464:	425b      	neglt	r3, r3
 8115466:	f042 0202 	orrlt.w	r2, r2, #2
 811546a:	9307      	strge	r3, [sp, #28]
 811546c:	9307      	strlt	r3, [sp, #28]
 811546e:	bfb8      	it	lt
 8115470:	9204      	strlt	r2, [sp, #16]
 8115472:	7823      	ldrb	r3, [r4, #0]
 8115474:	2b2e      	cmp	r3, #46	@ 0x2e
 8115476:	d10a      	bne.n	811548e <_vfiprintf_r+0x156>
 8115478:	7863      	ldrb	r3, [r4, #1]
 811547a:	2b2a      	cmp	r3, #42	@ 0x2a
 811547c:	d132      	bne.n	81154e4 <_vfiprintf_r+0x1ac>
 811547e:	9b03      	ldr	r3, [sp, #12]
 8115480:	1d1a      	adds	r2, r3, #4
 8115482:	681b      	ldr	r3, [r3, #0]
 8115484:	9203      	str	r2, [sp, #12]
 8115486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811548a:	3402      	adds	r4, #2
 811548c:	9305      	str	r3, [sp, #20]
 811548e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8115564 <_vfiprintf_r+0x22c>
 8115492:	7821      	ldrb	r1, [r4, #0]
 8115494:	2203      	movs	r2, #3
 8115496:	4650      	mov	r0, sl
 8115498:	f7ea ff32 	bl	8100300 <memchr>
 811549c:	b138      	cbz	r0, 81154ae <_vfiprintf_r+0x176>
 811549e:	9b04      	ldr	r3, [sp, #16]
 81154a0:	eba0 000a 	sub.w	r0, r0, sl
 81154a4:	2240      	movs	r2, #64	@ 0x40
 81154a6:	4082      	lsls	r2, r0
 81154a8:	4313      	orrs	r3, r2
 81154aa:	3401      	adds	r4, #1
 81154ac:	9304      	str	r3, [sp, #16]
 81154ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 81154b2:	4829      	ldr	r0, [pc, #164]	@ (8115558 <_vfiprintf_r+0x220>)
 81154b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81154b8:	2206      	movs	r2, #6
 81154ba:	f7ea ff21 	bl	8100300 <memchr>
 81154be:	2800      	cmp	r0, #0
 81154c0:	d03f      	beq.n	8115542 <_vfiprintf_r+0x20a>
 81154c2:	4b26      	ldr	r3, [pc, #152]	@ (811555c <_vfiprintf_r+0x224>)
 81154c4:	bb1b      	cbnz	r3, 811550e <_vfiprintf_r+0x1d6>
 81154c6:	9b03      	ldr	r3, [sp, #12]
 81154c8:	3307      	adds	r3, #7
 81154ca:	f023 0307 	bic.w	r3, r3, #7
 81154ce:	3308      	adds	r3, #8
 81154d0:	9303      	str	r3, [sp, #12]
 81154d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81154d4:	443b      	add	r3, r7
 81154d6:	9309      	str	r3, [sp, #36]	@ 0x24
 81154d8:	e76a      	b.n	81153b0 <_vfiprintf_r+0x78>
 81154da:	fb0c 3202 	mla	r2, ip, r2, r3
 81154de:	460c      	mov	r4, r1
 81154e0:	2001      	movs	r0, #1
 81154e2:	e7a8      	b.n	8115436 <_vfiprintf_r+0xfe>
 81154e4:	2300      	movs	r3, #0
 81154e6:	3401      	adds	r4, #1
 81154e8:	9305      	str	r3, [sp, #20]
 81154ea:	4619      	mov	r1, r3
 81154ec:	f04f 0c0a 	mov.w	ip, #10
 81154f0:	4620      	mov	r0, r4
 81154f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81154f6:	3a30      	subs	r2, #48	@ 0x30
 81154f8:	2a09      	cmp	r2, #9
 81154fa:	d903      	bls.n	8115504 <_vfiprintf_r+0x1cc>
 81154fc:	2b00      	cmp	r3, #0
 81154fe:	d0c6      	beq.n	811548e <_vfiprintf_r+0x156>
 8115500:	9105      	str	r1, [sp, #20]
 8115502:	e7c4      	b.n	811548e <_vfiprintf_r+0x156>
 8115504:	fb0c 2101 	mla	r1, ip, r1, r2
 8115508:	4604      	mov	r4, r0
 811550a:	2301      	movs	r3, #1
 811550c:	e7f0      	b.n	81154f0 <_vfiprintf_r+0x1b8>
 811550e:	ab03      	add	r3, sp, #12
 8115510:	9300      	str	r3, [sp, #0]
 8115512:	462a      	mov	r2, r5
 8115514:	4b12      	ldr	r3, [pc, #72]	@ (8115560 <_vfiprintf_r+0x228>)
 8115516:	a904      	add	r1, sp, #16
 8115518:	4630      	mov	r0, r6
 811551a:	f7fc fc09 	bl	8111d30 <_printf_float>
 811551e:	4607      	mov	r7, r0
 8115520:	1c78      	adds	r0, r7, #1
 8115522:	d1d6      	bne.n	81154d2 <_vfiprintf_r+0x19a>
 8115524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115526:	07d9      	lsls	r1, r3, #31
 8115528:	d405      	bmi.n	8115536 <_vfiprintf_r+0x1fe>
 811552a:	89ab      	ldrh	r3, [r5, #12]
 811552c:	059a      	lsls	r2, r3, #22
 811552e:	d402      	bmi.n	8115536 <_vfiprintf_r+0x1fe>
 8115530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8115532:	f7fd fc0f 	bl	8112d54 <__retarget_lock_release_recursive>
 8115536:	89ab      	ldrh	r3, [r5, #12]
 8115538:	065b      	lsls	r3, r3, #25
 811553a:	f53f af1f 	bmi.w	811537c <_vfiprintf_r+0x44>
 811553e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8115540:	e71e      	b.n	8115380 <_vfiprintf_r+0x48>
 8115542:	ab03      	add	r3, sp, #12
 8115544:	9300      	str	r3, [sp, #0]
 8115546:	462a      	mov	r2, r5
 8115548:	4b05      	ldr	r3, [pc, #20]	@ (8115560 <_vfiprintf_r+0x228>)
 811554a:	a904      	add	r1, sp, #16
 811554c:	4630      	mov	r0, r6
 811554e:	f7fc fe87 	bl	8112260 <_printf_i>
 8115552:	e7e4      	b.n	811551e <_vfiprintf_r+0x1e6>
 8115554:	08117908 	.word	0x08117908
 8115558:	08117912 	.word	0x08117912
 811555c:	08111d31 	.word	0x08111d31
 8115560:	08115313 	.word	0x08115313
 8115564:	0811790e 	.word	0x0811790e

08115568 <__sflush_r>:
 8115568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115570:	0716      	lsls	r6, r2, #28
 8115572:	4605      	mov	r5, r0
 8115574:	460c      	mov	r4, r1
 8115576:	d454      	bmi.n	8115622 <__sflush_r+0xba>
 8115578:	684b      	ldr	r3, [r1, #4]
 811557a:	2b00      	cmp	r3, #0
 811557c:	dc02      	bgt.n	8115584 <__sflush_r+0x1c>
 811557e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8115580:	2b00      	cmp	r3, #0
 8115582:	dd48      	ble.n	8115616 <__sflush_r+0xae>
 8115584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8115586:	2e00      	cmp	r6, #0
 8115588:	d045      	beq.n	8115616 <__sflush_r+0xae>
 811558a:	2300      	movs	r3, #0
 811558c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8115590:	682f      	ldr	r7, [r5, #0]
 8115592:	6a21      	ldr	r1, [r4, #32]
 8115594:	602b      	str	r3, [r5, #0]
 8115596:	d030      	beq.n	81155fa <__sflush_r+0x92>
 8115598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811559a:	89a3      	ldrh	r3, [r4, #12]
 811559c:	0759      	lsls	r1, r3, #29
 811559e:	d505      	bpl.n	81155ac <__sflush_r+0x44>
 81155a0:	6863      	ldr	r3, [r4, #4]
 81155a2:	1ad2      	subs	r2, r2, r3
 81155a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81155a6:	b10b      	cbz	r3, 81155ac <__sflush_r+0x44>
 81155a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81155aa:	1ad2      	subs	r2, r2, r3
 81155ac:	2300      	movs	r3, #0
 81155ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81155b0:	6a21      	ldr	r1, [r4, #32]
 81155b2:	4628      	mov	r0, r5
 81155b4:	47b0      	blx	r6
 81155b6:	1c43      	adds	r3, r0, #1
 81155b8:	89a3      	ldrh	r3, [r4, #12]
 81155ba:	d106      	bne.n	81155ca <__sflush_r+0x62>
 81155bc:	6829      	ldr	r1, [r5, #0]
 81155be:	291d      	cmp	r1, #29
 81155c0:	d82b      	bhi.n	811561a <__sflush_r+0xb2>
 81155c2:	4a2a      	ldr	r2, [pc, #168]	@ (811566c <__sflush_r+0x104>)
 81155c4:	410a      	asrs	r2, r1
 81155c6:	07d6      	lsls	r6, r2, #31
 81155c8:	d427      	bmi.n	811561a <__sflush_r+0xb2>
 81155ca:	2200      	movs	r2, #0
 81155cc:	6062      	str	r2, [r4, #4]
 81155ce:	04d9      	lsls	r1, r3, #19
 81155d0:	6922      	ldr	r2, [r4, #16]
 81155d2:	6022      	str	r2, [r4, #0]
 81155d4:	d504      	bpl.n	81155e0 <__sflush_r+0x78>
 81155d6:	1c42      	adds	r2, r0, #1
 81155d8:	d101      	bne.n	81155de <__sflush_r+0x76>
 81155da:	682b      	ldr	r3, [r5, #0]
 81155dc:	b903      	cbnz	r3, 81155e0 <__sflush_r+0x78>
 81155de:	6560      	str	r0, [r4, #84]	@ 0x54
 81155e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81155e2:	602f      	str	r7, [r5, #0]
 81155e4:	b1b9      	cbz	r1, 8115616 <__sflush_r+0xae>
 81155e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81155ea:	4299      	cmp	r1, r3
 81155ec:	d002      	beq.n	81155f4 <__sflush_r+0x8c>
 81155ee:	4628      	mov	r0, r5
 81155f0:	f7fe fa1a 	bl	8113a28 <_free_r>
 81155f4:	2300      	movs	r3, #0
 81155f6:	6363      	str	r3, [r4, #52]	@ 0x34
 81155f8:	e00d      	b.n	8115616 <__sflush_r+0xae>
 81155fa:	2301      	movs	r3, #1
 81155fc:	4628      	mov	r0, r5
 81155fe:	47b0      	blx	r6
 8115600:	4602      	mov	r2, r0
 8115602:	1c50      	adds	r0, r2, #1
 8115604:	d1c9      	bne.n	811559a <__sflush_r+0x32>
 8115606:	682b      	ldr	r3, [r5, #0]
 8115608:	2b00      	cmp	r3, #0
 811560a:	d0c6      	beq.n	811559a <__sflush_r+0x32>
 811560c:	2b1d      	cmp	r3, #29
 811560e:	d001      	beq.n	8115614 <__sflush_r+0xac>
 8115610:	2b16      	cmp	r3, #22
 8115612:	d11e      	bne.n	8115652 <__sflush_r+0xea>
 8115614:	602f      	str	r7, [r5, #0]
 8115616:	2000      	movs	r0, #0
 8115618:	e022      	b.n	8115660 <__sflush_r+0xf8>
 811561a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811561e:	b21b      	sxth	r3, r3
 8115620:	e01b      	b.n	811565a <__sflush_r+0xf2>
 8115622:	690f      	ldr	r7, [r1, #16]
 8115624:	2f00      	cmp	r7, #0
 8115626:	d0f6      	beq.n	8115616 <__sflush_r+0xae>
 8115628:	0793      	lsls	r3, r2, #30
 811562a:	680e      	ldr	r6, [r1, #0]
 811562c:	bf08      	it	eq
 811562e:	694b      	ldreq	r3, [r1, #20]
 8115630:	600f      	str	r7, [r1, #0]
 8115632:	bf18      	it	ne
 8115634:	2300      	movne	r3, #0
 8115636:	eba6 0807 	sub.w	r8, r6, r7
 811563a:	608b      	str	r3, [r1, #8]
 811563c:	f1b8 0f00 	cmp.w	r8, #0
 8115640:	dde9      	ble.n	8115616 <__sflush_r+0xae>
 8115642:	6a21      	ldr	r1, [r4, #32]
 8115644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8115646:	4643      	mov	r3, r8
 8115648:	463a      	mov	r2, r7
 811564a:	4628      	mov	r0, r5
 811564c:	47b0      	blx	r6
 811564e:	2800      	cmp	r0, #0
 8115650:	dc08      	bgt.n	8115664 <__sflush_r+0xfc>
 8115652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811565a:	81a3      	strh	r3, [r4, #12]
 811565c:	f04f 30ff 	mov.w	r0, #4294967295
 8115660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8115664:	4407      	add	r7, r0
 8115666:	eba8 0800 	sub.w	r8, r8, r0
 811566a:	e7e7      	b.n	811563c <__sflush_r+0xd4>
 811566c:	dfbffffe 	.word	0xdfbffffe

08115670 <_fflush_r>:
 8115670:	b538      	push	{r3, r4, r5, lr}
 8115672:	690b      	ldr	r3, [r1, #16]
 8115674:	4605      	mov	r5, r0
 8115676:	460c      	mov	r4, r1
 8115678:	b913      	cbnz	r3, 8115680 <_fflush_r+0x10>
 811567a:	2500      	movs	r5, #0
 811567c:	4628      	mov	r0, r5
 811567e:	bd38      	pop	{r3, r4, r5, pc}
 8115680:	b118      	cbz	r0, 811568a <_fflush_r+0x1a>
 8115682:	6a03      	ldr	r3, [r0, #32]
 8115684:	b90b      	cbnz	r3, 811568a <_fflush_r+0x1a>
 8115686:	f7fd f9ab 	bl	81129e0 <__sinit>
 811568a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811568e:	2b00      	cmp	r3, #0
 8115690:	d0f3      	beq.n	811567a <_fflush_r+0xa>
 8115692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8115694:	07d0      	lsls	r0, r2, #31
 8115696:	d404      	bmi.n	81156a2 <_fflush_r+0x32>
 8115698:	0599      	lsls	r1, r3, #22
 811569a:	d402      	bmi.n	81156a2 <_fflush_r+0x32>
 811569c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811569e:	f7fd fb58 	bl	8112d52 <__retarget_lock_acquire_recursive>
 81156a2:	4628      	mov	r0, r5
 81156a4:	4621      	mov	r1, r4
 81156a6:	f7ff ff5f 	bl	8115568 <__sflush_r>
 81156aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81156ac:	07da      	lsls	r2, r3, #31
 81156ae:	4605      	mov	r5, r0
 81156b0:	d4e4      	bmi.n	811567c <_fflush_r+0xc>
 81156b2:	89a3      	ldrh	r3, [r4, #12]
 81156b4:	059b      	lsls	r3, r3, #22
 81156b6:	d4e1      	bmi.n	811567c <_fflush_r+0xc>
 81156b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81156ba:	f7fd fb4b 	bl	8112d54 <__retarget_lock_release_recursive>
 81156be:	e7dd      	b.n	811567c <_fflush_r+0xc>

081156c0 <__swbuf_r>:
 81156c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81156c2:	460e      	mov	r6, r1
 81156c4:	4614      	mov	r4, r2
 81156c6:	4605      	mov	r5, r0
 81156c8:	b118      	cbz	r0, 81156d2 <__swbuf_r+0x12>
 81156ca:	6a03      	ldr	r3, [r0, #32]
 81156cc:	b90b      	cbnz	r3, 81156d2 <__swbuf_r+0x12>
 81156ce:	f7fd f987 	bl	81129e0 <__sinit>
 81156d2:	69a3      	ldr	r3, [r4, #24]
 81156d4:	60a3      	str	r3, [r4, #8]
 81156d6:	89a3      	ldrh	r3, [r4, #12]
 81156d8:	071a      	lsls	r2, r3, #28
 81156da:	d501      	bpl.n	81156e0 <__swbuf_r+0x20>
 81156dc:	6923      	ldr	r3, [r4, #16]
 81156de:	b943      	cbnz	r3, 81156f2 <__swbuf_r+0x32>
 81156e0:	4621      	mov	r1, r4
 81156e2:	4628      	mov	r0, r5
 81156e4:	f000 f82a 	bl	811573c <__swsetup_r>
 81156e8:	b118      	cbz	r0, 81156f2 <__swbuf_r+0x32>
 81156ea:	f04f 37ff 	mov.w	r7, #4294967295
 81156ee:	4638      	mov	r0, r7
 81156f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81156f2:	6823      	ldr	r3, [r4, #0]
 81156f4:	6922      	ldr	r2, [r4, #16]
 81156f6:	1a98      	subs	r0, r3, r2
 81156f8:	6963      	ldr	r3, [r4, #20]
 81156fa:	b2f6      	uxtb	r6, r6
 81156fc:	4283      	cmp	r3, r0
 81156fe:	4637      	mov	r7, r6
 8115700:	dc05      	bgt.n	811570e <__swbuf_r+0x4e>
 8115702:	4621      	mov	r1, r4
 8115704:	4628      	mov	r0, r5
 8115706:	f7ff ffb3 	bl	8115670 <_fflush_r>
 811570a:	2800      	cmp	r0, #0
 811570c:	d1ed      	bne.n	81156ea <__swbuf_r+0x2a>
 811570e:	68a3      	ldr	r3, [r4, #8]
 8115710:	3b01      	subs	r3, #1
 8115712:	60a3      	str	r3, [r4, #8]
 8115714:	6823      	ldr	r3, [r4, #0]
 8115716:	1c5a      	adds	r2, r3, #1
 8115718:	6022      	str	r2, [r4, #0]
 811571a:	701e      	strb	r6, [r3, #0]
 811571c:	6962      	ldr	r2, [r4, #20]
 811571e:	1c43      	adds	r3, r0, #1
 8115720:	429a      	cmp	r2, r3
 8115722:	d004      	beq.n	811572e <__swbuf_r+0x6e>
 8115724:	89a3      	ldrh	r3, [r4, #12]
 8115726:	07db      	lsls	r3, r3, #31
 8115728:	d5e1      	bpl.n	81156ee <__swbuf_r+0x2e>
 811572a:	2e0a      	cmp	r6, #10
 811572c:	d1df      	bne.n	81156ee <__swbuf_r+0x2e>
 811572e:	4621      	mov	r1, r4
 8115730:	4628      	mov	r0, r5
 8115732:	f7ff ff9d 	bl	8115670 <_fflush_r>
 8115736:	2800      	cmp	r0, #0
 8115738:	d0d9      	beq.n	81156ee <__swbuf_r+0x2e>
 811573a:	e7d6      	b.n	81156ea <__swbuf_r+0x2a>

0811573c <__swsetup_r>:
 811573c:	b538      	push	{r3, r4, r5, lr}
 811573e:	4b29      	ldr	r3, [pc, #164]	@ (81157e4 <__swsetup_r+0xa8>)
 8115740:	4605      	mov	r5, r0
 8115742:	6818      	ldr	r0, [r3, #0]
 8115744:	460c      	mov	r4, r1
 8115746:	b118      	cbz	r0, 8115750 <__swsetup_r+0x14>
 8115748:	6a03      	ldr	r3, [r0, #32]
 811574a:	b90b      	cbnz	r3, 8115750 <__swsetup_r+0x14>
 811574c:	f7fd f948 	bl	81129e0 <__sinit>
 8115750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115754:	0719      	lsls	r1, r3, #28
 8115756:	d422      	bmi.n	811579e <__swsetup_r+0x62>
 8115758:	06da      	lsls	r2, r3, #27
 811575a:	d407      	bmi.n	811576c <__swsetup_r+0x30>
 811575c:	2209      	movs	r2, #9
 811575e:	602a      	str	r2, [r5, #0]
 8115760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115764:	81a3      	strh	r3, [r4, #12]
 8115766:	f04f 30ff 	mov.w	r0, #4294967295
 811576a:	e033      	b.n	81157d4 <__swsetup_r+0x98>
 811576c:	0758      	lsls	r0, r3, #29
 811576e:	d512      	bpl.n	8115796 <__swsetup_r+0x5a>
 8115770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8115772:	b141      	cbz	r1, 8115786 <__swsetup_r+0x4a>
 8115774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8115778:	4299      	cmp	r1, r3
 811577a:	d002      	beq.n	8115782 <__swsetup_r+0x46>
 811577c:	4628      	mov	r0, r5
 811577e:	f7fe f953 	bl	8113a28 <_free_r>
 8115782:	2300      	movs	r3, #0
 8115784:	6363      	str	r3, [r4, #52]	@ 0x34
 8115786:	89a3      	ldrh	r3, [r4, #12]
 8115788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811578c:	81a3      	strh	r3, [r4, #12]
 811578e:	2300      	movs	r3, #0
 8115790:	6063      	str	r3, [r4, #4]
 8115792:	6923      	ldr	r3, [r4, #16]
 8115794:	6023      	str	r3, [r4, #0]
 8115796:	89a3      	ldrh	r3, [r4, #12]
 8115798:	f043 0308 	orr.w	r3, r3, #8
 811579c:	81a3      	strh	r3, [r4, #12]
 811579e:	6923      	ldr	r3, [r4, #16]
 81157a0:	b94b      	cbnz	r3, 81157b6 <__swsetup_r+0x7a>
 81157a2:	89a3      	ldrh	r3, [r4, #12]
 81157a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81157a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81157ac:	d003      	beq.n	81157b6 <__swsetup_r+0x7a>
 81157ae:	4621      	mov	r1, r4
 81157b0:	4628      	mov	r0, r5
 81157b2:	f000 fc41 	bl	8116038 <__smakebuf_r>
 81157b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81157ba:	f013 0201 	ands.w	r2, r3, #1
 81157be:	d00a      	beq.n	81157d6 <__swsetup_r+0x9a>
 81157c0:	2200      	movs	r2, #0
 81157c2:	60a2      	str	r2, [r4, #8]
 81157c4:	6962      	ldr	r2, [r4, #20]
 81157c6:	4252      	negs	r2, r2
 81157c8:	61a2      	str	r2, [r4, #24]
 81157ca:	6922      	ldr	r2, [r4, #16]
 81157cc:	b942      	cbnz	r2, 81157e0 <__swsetup_r+0xa4>
 81157ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81157d2:	d1c5      	bne.n	8115760 <__swsetup_r+0x24>
 81157d4:	bd38      	pop	{r3, r4, r5, pc}
 81157d6:	0799      	lsls	r1, r3, #30
 81157d8:	bf58      	it	pl
 81157da:	6962      	ldrpl	r2, [r4, #20]
 81157dc:	60a2      	str	r2, [r4, #8]
 81157de:	e7f4      	b.n	81157ca <__swsetup_r+0x8e>
 81157e0:	2000      	movs	r0, #0
 81157e2:	e7f7      	b.n	81157d4 <__swsetup_r+0x98>
 81157e4:	100000c8 	.word	0x100000c8

081157e8 <memmove>:
 81157e8:	4288      	cmp	r0, r1
 81157ea:	b510      	push	{r4, lr}
 81157ec:	eb01 0402 	add.w	r4, r1, r2
 81157f0:	d902      	bls.n	81157f8 <memmove+0x10>
 81157f2:	4284      	cmp	r4, r0
 81157f4:	4623      	mov	r3, r4
 81157f6:	d807      	bhi.n	8115808 <memmove+0x20>
 81157f8:	1e43      	subs	r3, r0, #1
 81157fa:	42a1      	cmp	r1, r4
 81157fc:	d008      	beq.n	8115810 <memmove+0x28>
 81157fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8115802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8115806:	e7f8      	b.n	81157fa <memmove+0x12>
 8115808:	4402      	add	r2, r0
 811580a:	4601      	mov	r1, r0
 811580c:	428a      	cmp	r2, r1
 811580e:	d100      	bne.n	8115812 <memmove+0x2a>
 8115810:	bd10      	pop	{r4, pc}
 8115812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8115816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811581a:	e7f7      	b.n	811580c <memmove+0x24>

0811581c <_raise_r>:
 811581c:	291f      	cmp	r1, #31
 811581e:	b538      	push	{r3, r4, r5, lr}
 8115820:	4605      	mov	r5, r0
 8115822:	460c      	mov	r4, r1
 8115824:	d904      	bls.n	8115830 <_raise_r+0x14>
 8115826:	2316      	movs	r3, #22
 8115828:	6003      	str	r3, [r0, #0]
 811582a:	f04f 30ff 	mov.w	r0, #4294967295
 811582e:	bd38      	pop	{r3, r4, r5, pc}
 8115830:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8115832:	b112      	cbz	r2, 811583a <_raise_r+0x1e>
 8115834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8115838:	b94b      	cbnz	r3, 811584e <_raise_r+0x32>
 811583a:	4628      	mov	r0, r5
 811583c:	f000 f830 	bl	81158a0 <_getpid_r>
 8115840:	4622      	mov	r2, r4
 8115842:	4601      	mov	r1, r0
 8115844:	4628      	mov	r0, r5
 8115846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811584a:	f000 b817 	b.w	811587c <_kill_r>
 811584e:	2b01      	cmp	r3, #1
 8115850:	d00a      	beq.n	8115868 <_raise_r+0x4c>
 8115852:	1c59      	adds	r1, r3, #1
 8115854:	d103      	bne.n	811585e <_raise_r+0x42>
 8115856:	2316      	movs	r3, #22
 8115858:	6003      	str	r3, [r0, #0]
 811585a:	2001      	movs	r0, #1
 811585c:	e7e7      	b.n	811582e <_raise_r+0x12>
 811585e:	2100      	movs	r1, #0
 8115860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8115864:	4620      	mov	r0, r4
 8115866:	4798      	blx	r3
 8115868:	2000      	movs	r0, #0
 811586a:	e7e0      	b.n	811582e <_raise_r+0x12>

0811586c <raise>:
 811586c:	4b02      	ldr	r3, [pc, #8]	@ (8115878 <raise+0xc>)
 811586e:	4601      	mov	r1, r0
 8115870:	6818      	ldr	r0, [r3, #0]
 8115872:	f7ff bfd3 	b.w	811581c <_raise_r>
 8115876:	bf00      	nop
 8115878:	100000c8 	.word	0x100000c8

0811587c <_kill_r>:
 811587c:	b538      	push	{r3, r4, r5, lr}
 811587e:	4d07      	ldr	r5, [pc, #28]	@ (811589c <_kill_r+0x20>)
 8115880:	2300      	movs	r3, #0
 8115882:	4604      	mov	r4, r0
 8115884:	4608      	mov	r0, r1
 8115886:	4611      	mov	r1, r2
 8115888:	602b      	str	r3, [r5, #0]
 811588a:	f7ec fd49 	bl	8102320 <_kill>
 811588e:	1c43      	adds	r3, r0, #1
 8115890:	d102      	bne.n	8115898 <_kill_r+0x1c>
 8115892:	682b      	ldr	r3, [r5, #0]
 8115894:	b103      	cbz	r3, 8115898 <_kill_r+0x1c>
 8115896:	6023      	str	r3, [r4, #0]
 8115898:	bd38      	pop	{r3, r4, r5, pc}
 811589a:	bf00      	nop
 811589c:	10005144 	.word	0x10005144

081158a0 <_getpid_r>:
 81158a0:	f7ec bd36 	b.w	8102310 <_getpid>
 81158a4:	0000      	movs	r0, r0
	...

081158a8 <nan>:
 81158a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81158b0 <nan+0x8>
 81158ac:	4770      	bx	lr
 81158ae:	bf00      	nop
 81158b0:	00000000 	.word	0x00000000
 81158b4:	7ff80000 	.word	0x7ff80000

081158b8 <_calloc_r>:
 81158b8:	b570      	push	{r4, r5, r6, lr}
 81158ba:	fba1 5402 	umull	r5, r4, r1, r2
 81158be:	b93c      	cbnz	r4, 81158d0 <_calloc_r+0x18>
 81158c0:	4629      	mov	r1, r5
 81158c2:	f7fc f883 	bl	81119cc <_malloc_r>
 81158c6:	4606      	mov	r6, r0
 81158c8:	b928      	cbnz	r0, 81158d6 <_calloc_r+0x1e>
 81158ca:	2600      	movs	r6, #0
 81158cc:	4630      	mov	r0, r6
 81158ce:	bd70      	pop	{r4, r5, r6, pc}
 81158d0:	220c      	movs	r2, #12
 81158d2:	6002      	str	r2, [r0, #0]
 81158d4:	e7f9      	b.n	81158ca <_calloc_r+0x12>
 81158d6:	462a      	mov	r2, r5
 81158d8:	4621      	mov	r1, r4
 81158da:	f7fd f92c 	bl	8112b36 <memset>
 81158de:	e7f5      	b.n	81158cc <_calloc_r+0x14>

081158e0 <rshift>:
 81158e0:	6903      	ldr	r3, [r0, #16]
 81158e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 81158e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81158ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 81158ee:	f100 0414 	add.w	r4, r0, #20
 81158f2:	dd45      	ble.n	8115980 <rshift+0xa0>
 81158f4:	f011 011f 	ands.w	r1, r1, #31
 81158f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 81158fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8115900:	d10c      	bne.n	811591c <rshift+0x3c>
 8115902:	f100 0710 	add.w	r7, r0, #16
 8115906:	4629      	mov	r1, r5
 8115908:	42b1      	cmp	r1, r6
 811590a:	d334      	bcc.n	8115976 <rshift+0x96>
 811590c:	1a9b      	subs	r3, r3, r2
 811590e:	009b      	lsls	r3, r3, #2
 8115910:	1eea      	subs	r2, r5, #3
 8115912:	4296      	cmp	r6, r2
 8115914:	bf38      	it	cc
 8115916:	2300      	movcc	r3, #0
 8115918:	4423      	add	r3, r4
 811591a:	e015      	b.n	8115948 <rshift+0x68>
 811591c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8115920:	f1c1 0820 	rsb	r8, r1, #32
 8115924:	40cf      	lsrs	r7, r1
 8115926:	f105 0e04 	add.w	lr, r5, #4
 811592a:	46a1      	mov	r9, r4
 811592c:	4576      	cmp	r6, lr
 811592e:	46f4      	mov	ip, lr
 8115930:	d815      	bhi.n	811595e <rshift+0x7e>
 8115932:	1a9a      	subs	r2, r3, r2
 8115934:	0092      	lsls	r2, r2, #2
 8115936:	3a04      	subs	r2, #4
 8115938:	3501      	adds	r5, #1
 811593a:	42ae      	cmp	r6, r5
 811593c:	bf38      	it	cc
 811593e:	2200      	movcc	r2, #0
 8115940:	18a3      	adds	r3, r4, r2
 8115942:	50a7      	str	r7, [r4, r2]
 8115944:	b107      	cbz	r7, 8115948 <rshift+0x68>
 8115946:	3304      	adds	r3, #4
 8115948:	1b1a      	subs	r2, r3, r4
 811594a:	42a3      	cmp	r3, r4
 811594c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8115950:	bf08      	it	eq
 8115952:	2300      	moveq	r3, #0
 8115954:	6102      	str	r2, [r0, #16]
 8115956:	bf08      	it	eq
 8115958:	6143      	streq	r3, [r0, #20]
 811595a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811595e:	f8dc c000 	ldr.w	ip, [ip]
 8115962:	fa0c fc08 	lsl.w	ip, ip, r8
 8115966:	ea4c 0707 	orr.w	r7, ip, r7
 811596a:	f849 7b04 	str.w	r7, [r9], #4
 811596e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8115972:	40cf      	lsrs	r7, r1
 8115974:	e7da      	b.n	811592c <rshift+0x4c>
 8115976:	f851 cb04 	ldr.w	ip, [r1], #4
 811597a:	f847 cf04 	str.w	ip, [r7, #4]!
 811597e:	e7c3      	b.n	8115908 <rshift+0x28>
 8115980:	4623      	mov	r3, r4
 8115982:	e7e1      	b.n	8115948 <rshift+0x68>

08115984 <__hexdig_fun>:
 8115984:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8115988:	2b09      	cmp	r3, #9
 811598a:	d802      	bhi.n	8115992 <__hexdig_fun+0xe>
 811598c:	3820      	subs	r0, #32
 811598e:	b2c0      	uxtb	r0, r0
 8115990:	4770      	bx	lr
 8115992:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8115996:	2b05      	cmp	r3, #5
 8115998:	d801      	bhi.n	811599e <__hexdig_fun+0x1a>
 811599a:	3847      	subs	r0, #71	@ 0x47
 811599c:	e7f7      	b.n	811598e <__hexdig_fun+0xa>
 811599e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 81159a2:	2b05      	cmp	r3, #5
 81159a4:	d801      	bhi.n	81159aa <__hexdig_fun+0x26>
 81159a6:	3827      	subs	r0, #39	@ 0x27
 81159a8:	e7f1      	b.n	811598e <__hexdig_fun+0xa>
 81159aa:	2000      	movs	r0, #0
 81159ac:	4770      	bx	lr
	...

081159b0 <__gethex>:
 81159b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81159b4:	b085      	sub	sp, #20
 81159b6:	468a      	mov	sl, r1
 81159b8:	9302      	str	r3, [sp, #8]
 81159ba:	680b      	ldr	r3, [r1, #0]
 81159bc:	9001      	str	r0, [sp, #4]
 81159be:	4690      	mov	r8, r2
 81159c0:	1c9c      	adds	r4, r3, #2
 81159c2:	46a1      	mov	r9, r4
 81159c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 81159c8:	2830      	cmp	r0, #48	@ 0x30
 81159ca:	d0fa      	beq.n	81159c2 <__gethex+0x12>
 81159cc:	eba9 0303 	sub.w	r3, r9, r3
 81159d0:	f1a3 0b02 	sub.w	fp, r3, #2
 81159d4:	f7ff ffd6 	bl	8115984 <__hexdig_fun>
 81159d8:	4605      	mov	r5, r0
 81159da:	2800      	cmp	r0, #0
 81159dc:	d168      	bne.n	8115ab0 <__gethex+0x100>
 81159de:	49a0      	ldr	r1, [pc, #640]	@ (8115c60 <__gethex+0x2b0>)
 81159e0:	2201      	movs	r2, #1
 81159e2:	4648      	mov	r0, r9
 81159e4:	f7fd f8af 	bl	8112b46 <strncmp>
 81159e8:	4607      	mov	r7, r0
 81159ea:	2800      	cmp	r0, #0
 81159ec:	d167      	bne.n	8115abe <__gethex+0x10e>
 81159ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 81159f2:	4626      	mov	r6, r4
 81159f4:	f7ff ffc6 	bl	8115984 <__hexdig_fun>
 81159f8:	2800      	cmp	r0, #0
 81159fa:	d062      	beq.n	8115ac2 <__gethex+0x112>
 81159fc:	4623      	mov	r3, r4
 81159fe:	7818      	ldrb	r0, [r3, #0]
 8115a00:	2830      	cmp	r0, #48	@ 0x30
 8115a02:	4699      	mov	r9, r3
 8115a04:	f103 0301 	add.w	r3, r3, #1
 8115a08:	d0f9      	beq.n	81159fe <__gethex+0x4e>
 8115a0a:	f7ff ffbb 	bl	8115984 <__hexdig_fun>
 8115a0e:	fab0 f580 	clz	r5, r0
 8115a12:	096d      	lsrs	r5, r5, #5
 8115a14:	f04f 0b01 	mov.w	fp, #1
 8115a18:	464a      	mov	r2, r9
 8115a1a:	4616      	mov	r6, r2
 8115a1c:	3201      	adds	r2, #1
 8115a1e:	7830      	ldrb	r0, [r6, #0]
 8115a20:	f7ff ffb0 	bl	8115984 <__hexdig_fun>
 8115a24:	2800      	cmp	r0, #0
 8115a26:	d1f8      	bne.n	8115a1a <__gethex+0x6a>
 8115a28:	498d      	ldr	r1, [pc, #564]	@ (8115c60 <__gethex+0x2b0>)
 8115a2a:	2201      	movs	r2, #1
 8115a2c:	4630      	mov	r0, r6
 8115a2e:	f7fd f88a 	bl	8112b46 <strncmp>
 8115a32:	2800      	cmp	r0, #0
 8115a34:	d13f      	bne.n	8115ab6 <__gethex+0x106>
 8115a36:	b944      	cbnz	r4, 8115a4a <__gethex+0x9a>
 8115a38:	1c74      	adds	r4, r6, #1
 8115a3a:	4622      	mov	r2, r4
 8115a3c:	4616      	mov	r6, r2
 8115a3e:	3201      	adds	r2, #1
 8115a40:	7830      	ldrb	r0, [r6, #0]
 8115a42:	f7ff ff9f 	bl	8115984 <__hexdig_fun>
 8115a46:	2800      	cmp	r0, #0
 8115a48:	d1f8      	bne.n	8115a3c <__gethex+0x8c>
 8115a4a:	1ba4      	subs	r4, r4, r6
 8115a4c:	00a7      	lsls	r7, r4, #2
 8115a4e:	7833      	ldrb	r3, [r6, #0]
 8115a50:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8115a54:	2b50      	cmp	r3, #80	@ 0x50
 8115a56:	d13e      	bne.n	8115ad6 <__gethex+0x126>
 8115a58:	7873      	ldrb	r3, [r6, #1]
 8115a5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8115a5c:	d033      	beq.n	8115ac6 <__gethex+0x116>
 8115a5e:	2b2d      	cmp	r3, #45	@ 0x2d
 8115a60:	d034      	beq.n	8115acc <__gethex+0x11c>
 8115a62:	1c71      	adds	r1, r6, #1
 8115a64:	2400      	movs	r4, #0
 8115a66:	7808      	ldrb	r0, [r1, #0]
 8115a68:	f7ff ff8c 	bl	8115984 <__hexdig_fun>
 8115a6c:	1e43      	subs	r3, r0, #1
 8115a6e:	b2db      	uxtb	r3, r3
 8115a70:	2b18      	cmp	r3, #24
 8115a72:	d830      	bhi.n	8115ad6 <__gethex+0x126>
 8115a74:	f1a0 0210 	sub.w	r2, r0, #16
 8115a78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8115a7c:	f7ff ff82 	bl	8115984 <__hexdig_fun>
 8115a80:	f100 3cff 	add.w	ip, r0, #4294967295
 8115a84:	fa5f fc8c 	uxtb.w	ip, ip
 8115a88:	f1bc 0f18 	cmp.w	ip, #24
 8115a8c:	f04f 030a 	mov.w	r3, #10
 8115a90:	d91e      	bls.n	8115ad0 <__gethex+0x120>
 8115a92:	b104      	cbz	r4, 8115a96 <__gethex+0xe6>
 8115a94:	4252      	negs	r2, r2
 8115a96:	4417      	add	r7, r2
 8115a98:	f8ca 1000 	str.w	r1, [sl]
 8115a9c:	b1ed      	cbz	r5, 8115ada <__gethex+0x12a>
 8115a9e:	f1bb 0f00 	cmp.w	fp, #0
 8115aa2:	bf0c      	ite	eq
 8115aa4:	2506      	moveq	r5, #6
 8115aa6:	2500      	movne	r5, #0
 8115aa8:	4628      	mov	r0, r5
 8115aaa:	b005      	add	sp, #20
 8115aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115ab0:	2500      	movs	r5, #0
 8115ab2:	462c      	mov	r4, r5
 8115ab4:	e7b0      	b.n	8115a18 <__gethex+0x68>
 8115ab6:	2c00      	cmp	r4, #0
 8115ab8:	d1c7      	bne.n	8115a4a <__gethex+0x9a>
 8115aba:	4627      	mov	r7, r4
 8115abc:	e7c7      	b.n	8115a4e <__gethex+0x9e>
 8115abe:	464e      	mov	r6, r9
 8115ac0:	462f      	mov	r7, r5
 8115ac2:	2501      	movs	r5, #1
 8115ac4:	e7c3      	b.n	8115a4e <__gethex+0x9e>
 8115ac6:	2400      	movs	r4, #0
 8115ac8:	1cb1      	adds	r1, r6, #2
 8115aca:	e7cc      	b.n	8115a66 <__gethex+0xb6>
 8115acc:	2401      	movs	r4, #1
 8115ace:	e7fb      	b.n	8115ac8 <__gethex+0x118>
 8115ad0:	fb03 0002 	mla	r0, r3, r2, r0
 8115ad4:	e7ce      	b.n	8115a74 <__gethex+0xc4>
 8115ad6:	4631      	mov	r1, r6
 8115ad8:	e7de      	b.n	8115a98 <__gethex+0xe8>
 8115ada:	eba6 0309 	sub.w	r3, r6, r9
 8115ade:	3b01      	subs	r3, #1
 8115ae0:	4629      	mov	r1, r5
 8115ae2:	2b07      	cmp	r3, #7
 8115ae4:	dc0a      	bgt.n	8115afc <__gethex+0x14c>
 8115ae6:	9801      	ldr	r0, [sp, #4]
 8115ae8:	f7fd ffe8 	bl	8113abc <_Balloc>
 8115aec:	4604      	mov	r4, r0
 8115aee:	b940      	cbnz	r0, 8115b02 <__gethex+0x152>
 8115af0:	4b5c      	ldr	r3, [pc, #368]	@ (8115c64 <__gethex+0x2b4>)
 8115af2:	4602      	mov	r2, r0
 8115af4:	21e4      	movs	r1, #228	@ 0xe4
 8115af6:	485c      	ldr	r0, [pc, #368]	@ (8115c68 <__gethex+0x2b8>)
 8115af8:	f7fb ff14 	bl	8111924 <__assert_func>
 8115afc:	3101      	adds	r1, #1
 8115afe:	105b      	asrs	r3, r3, #1
 8115b00:	e7ef      	b.n	8115ae2 <__gethex+0x132>
 8115b02:	f100 0a14 	add.w	sl, r0, #20
 8115b06:	2300      	movs	r3, #0
 8115b08:	4655      	mov	r5, sl
 8115b0a:	469b      	mov	fp, r3
 8115b0c:	45b1      	cmp	r9, r6
 8115b0e:	d337      	bcc.n	8115b80 <__gethex+0x1d0>
 8115b10:	f845 bb04 	str.w	fp, [r5], #4
 8115b14:	eba5 050a 	sub.w	r5, r5, sl
 8115b18:	10ad      	asrs	r5, r5, #2
 8115b1a:	6125      	str	r5, [r4, #16]
 8115b1c:	4658      	mov	r0, fp
 8115b1e:	f7fe f8bf 	bl	8113ca0 <__hi0bits>
 8115b22:	016d      	lsls	r5, r5, #5
 8115b24:	f8d8 6000 	ldr.w	r6, [r8]
 8115b28:	1a2d      	subs	r5, r5, r0
 8115b2a:	42b5      	cmp	r5, r6
 8115b2c:	dd54      	ble.n	8115bd8 <__gethex+0x228>
 8115b2e:	1bad      	subs	r5, r5, r6
 8115b30:	4629      	mov	r1, r5
 8115b32:	4620      	mov	r0, r4
 8115b34:	f7fe fc53 	bl	81143de <__any_on>
 8115b38:	4681      	mov	r9, r0
 8115b3a:	b178      	cbz	r0, 8115b5c <__gethex+0x1ac>
 8115b3c:	1e6b      	subs	r3, r5, #1
 8115b3e:	1159      	asrs	r1, r3, #5
 8115b40:	f003 021f 	and.w	r2, r3, #31
 8115b44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8115b48:	f04f 0901 	mov.w	r9, #1
 8115b4c:	fa09 f202 	lsl.w	r2, r9, r2
 8115b50:	420a      	tst	r2, r1
 8115b52:	d003      	beq.n	8115b5c <__gethex+0x1ac>
 8115b54:	454b      	cmp	r3, r9
 8115b56:	dc36      	bgt.n	8115bc6 <__gethex+0x216>
 8115b58:	f04f 0902 	mov.w	r9, #2
 8115b5c:	4629      	mov	r1, r5
 8115b5e:	4620      	mov	r0, r4
 8115b60:	f7ff febe 	bl	81158e0 <rshift>
 8115b64:	442f      	add	r7, r5
 8115b66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8115b6a:	42bb      	cmp	r3, r7
 8115b6c:	da42      	bge.n	8115bf4 <__gethex+0x244>
 8115b6e:	9801      	ldr	r0, [sp, #4]
 8115b70:	4621      	mov	r1, r4
 8115b72:	f7fd ffe3 	bl	8113b3c <_Bfree>
 8115b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115b78:	2300      	movs	r3, #0
 8115b7a:	6013      	str	r3, [r2, #0]
 8115b7c:	25a3      	movs	r5, #163	@ 0xa3
 8115b7e:	e793      	b.n	8115aa8 <__gethex+0xf8>
 8115b80:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8115b84:	2a2e      	cmp	r2, #46	@ 0x2e
 8115b86:	d012      	beq.n	8115bae <__gethex+0x1fe>
 8115b88:	2b20      	cmp	r3, #32
 8115b8a:	d104      	bne.n	8115b96 <__gethex+0x1e6>
 8115b8c:	f845 bb04 	str.w	fp, [r5], #4
 8115b90:	f04f 0b00 	mov.w	fp, #0
 8115b94:	465b      	mov	r3, fp
 8115b96:	7830      	ldrb	r0, [r6, #0]
 8115b98:	9303      	str	r3, [sp, #12]
 8115b9a:	f7ff fef3 	bl	8115984 <__hexdig_fun>
 8115b9e:	9b03      	ldr	r3, [sp, #12]
 8115ba0:	f000 000f 	and.w	r0, r0, #15
 8115ba4:	4098      	lsls	r0, r3
 8115ba6:	ea4b 0b00 	orr.w	fp, fp, r0
 8115baa:	3304      	adds	r3, #4
 8115bac:	e7ae      	b.n	8115b0c <__gethex+0x15c>
 8115bae:	45b1      	cmp	r9, r6
 8115bb0:	d8ea      	bhi.n	8115b88 <__gethex+0x1d8>
 8115bb2:	492b      	ldr	r1, [pc, #172]	@ (8115c60 <__gethex+0x2b0>)
 8115bb4:	9303      	str	r3, [sp, #12]
 8115bb6:	2201      	movs	r2, #1
 8115bb8:	4630      	mov	r0, r6
 8115bba:	f7fc ffc4 	bl	8112b46 <strncmp>
 8115bbe:	9b03      	ldr	r3, [sp, #12]
 8115bc0:	2800      	cmp	r0, #0
 8115bc2:	d1e1      	bne.n	8115b88 <__gethex+0x1d8>
 8115bc4:	e7a2      	b.n	8115b0c <__gethex+0x15c>
 8115bc6:	1ea9      	subs	r1, r5, #2
 8115bc8:	4620      	mov	r0, r4
 8115bca:	f7fe fc08 	bl	81143de <__any_on>
 8115bce:	2800      	cmp	r0, #0
 8115bd0:	d0c2      	beq.n	8115b58 <__gethex+0x1a8>
 8115bd2:	f04f 0903 	mov.w	r9, #3
 8115bd6:	e7c1      	b.n	8115b5c <__gethex+0x1ac>
 8115bd8:	da09      	bge.n	8115bee <__gethex+0x23e>
 8115bda:	1b75      	subs	r5, r6, r5
 8115bdc:	4621      	mov	r1, r4
 8115bde:	9801      	ldr	r0, [sp, #4]
 8115be0:	462a      	mov	r2, r5
 8115be2:	f7fe f9c3 	bl	8113f6c <__lshift>
 8115be6:	1b7f      	subs	r7, r7, r5
 8115be8:	4604      	mov	r4, r0
 8115bea:	f100 0a14 	add.w	sl, r0, #20
 8115bee:	f04f 0900 	mov.w	r9, #0
 8115bf2:	e7b8      	b.n	8115b66 <__gethex+0x1b6>
 8115bf4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8115bf8:	42bd      	cmp	r5, r7
 8115bfa:	dd6f      	ble.n	8115cdc <__gethex+0x32c>
 8115bfc:	1bed      	subs	r5, r5, r7
 8115bfe:	42ae      	cmp	r6, r5
 8115c00:	dc34      	bgt.n	8115c6c <__gethex+0x2bc>
 8115c02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8115c06:	2b02      	cmp	r3, #2
 8115c08:	d022      	beq.n	8115c50 <__gethex+0x2a0>
 8115c0a:	2b03      	cmp	r3, #3
 8115c0c:	d024      	beq.n	8115c58 <__gethex+0x2a8>
 8115c0e:	2b01      	cmp	r3, #1
 8115c10:	d115      	bne.n	8115c3e <__gethex+0x28e>
 8115c12:	42ae      	cmp	r6, r5
 8115c14:	d113      	bne.n	8115c3e <__gethex+0x28e>
 8115c16:	2e01      	cmp	r6, #1
 8115c18:	d10b      	bne.n	8115c32 <__gethex+0x282>
 8115c1a:	9a02      	ldr	r2, [sp, #8]
 8115c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8115c20:	6013      	str	r3, [r2, #0]
 8115c22:	2301      	movs	r3, #1
 8115c24:	6123      	str	r3, [r4, #16]
 8115c26:	f8ca 3000 	str.w	r3, [sl]
 8115c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8115c2c:	2562      	movs	r5, #98	@ 0x62
 8115c2e:	601c      	str	r4, [r3, #0]
 8115c30:	e73a      	b.n	8115aa8 <__gethex+0xf8>
 8115c32:	1e71      	subs	r1, r6, #1
 8115c34:	4620      	mov	r0, r4
 8115c36:	f7fe fbd2 	bl	81143de <__any_on>
 8115c3a:	2800      	cmp	r0, #0
 8115c3c:	d1ed      	bne.n	8115c1a <__gethex+0x26a>
 8115c3e:	9801      	ldr	r0, [sp, #4]
 8115c40:	4621      	mov	r1, r4
 8115c42:	f7fd ff7b 	bl	8113b3c <_Bfree>
 8115c46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115c48:	2300      	movs	r3, #0
 8115c4a:	6013      	str	r3, [r2, #0]
 8115c4c:	2550      	movs	r5, #80	@ 0x50
 8115c4e:	e72b      	b.n	8115aa8 <__gethex+0xf8>
 8115c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115c52:	2b00      	cmp	r3, #0
 8115c54:	d1f3      	bne.n	8115c3e <__gethex+0x28e>
 8115c56:	e7e0      	b.n	8115c1a <__gethex+0x26a>
 8115c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115c5a:	2b00      	cmp	r3, #0
 8115c5c:	d1dd      	bne.n	8115c1a <__gethex+0x26a>
 8115c5e:	e7ee      	b.n	8115c3e <__gethex+0x28e>
 8115c60:	081178b0 	.word	0x081178b0
 8115c64:	08117746 	.word	0x08117746
 8115c68:	08117921 	.word	0x08117921
 8115c6c:	1e6f      	subs	r7, r5, #1
 8115c6e:	f1b9 0f00 	cmp.w	r9, #0
 8115c72:	d130      	bne.n	8115cd6 <__gethex+0x326>
 8115c74:	b127      	cbz	r7, 8115c80 <__gethex+0x2d0>
 8115c76:	4639      	mov	r1, r7
 8115c78:	4620      	mov	r0, r4
 8115c7a:	f7fe fbb0 	bl	81143de <__any_on>
 8115c7e:	4681      	mov	r9, r0
 8115c80:	117a      	asrs	r2, r7, #5
 8115c82:	2301      	movs	r3, #1
 8115c84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8115c88:	f007 071f 	and.w	r7, r7, #31
 8115c8c:	40bb      	lsls	r3, r7
 8115c8e:	4213      	tst	r3, r2
 8115c90:	4629      	mov	r1, r5
 8115c92:	4620      	mov	r0, r4
 8115c94:	bf18      	it	ne
 8115c96:	f049 0902 	orrne.w	r9, r9, #2
 8115c9a:	f7ff fe21 	bl	81158e0 <rshift>
 8115c9e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8115ca2:	1b76      	subs	r6, r6, r5
 8115ca4:	2502      	movs	r5, #2
 8115ca6:	f1b9 0f00 	cmp.w	r9, #0
 8115caa:	d047      	beq.n	8115d3c <__gethex+0x38c>
 8115cac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8115cb0:	2b02      	cmp	r3, #2
 8115cb2:	d015      	beq.n	8115ce0 <__gethex+0x330>
 8115cb4:	2b03      	cmp	r3, #3
 8115cb6:	d017      	beq.n	8115ce8 <__gethex+0x338>
 8115cb8:	2b01      	cmp	r3, #1
 8115cba:	d109      	bne.n	8115cd0 <__gethex+0x320>
 8115cbc:	f019 0f02 	tst.w	r9, #2
 8115cc0:	d006      	beq.n	8115cd0 <__gethex+0x320>
 8115cc2:	f8da 3000 	ldr.w	r3, [sl]
 8115cc6:	ea49 0903 	orr.w	r9, r9, r3
 8115cca:	f019 0f01 	tst.w	r9, #1
 8115cce:	d10e      	bne.n	8115cee <__gethex+0x33e>
 8115cd0:	f045 0510 	orr.w	r5, r5, #16
 8115cd4:	e032      	b.n	8115d3c <__gethex+0x38c>
 8115cd6:	f04f 0901 	mov.w	r9, #1
 8115cda:	e7d1      	b.n	8115c80 <__gethex+0x2d0>
 8115cdc:	2501      	movs	r5, #1
 8115cde:	e7e2      	b.n	8115ca6 <__gethex+0x2f6>
 8115ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115ce2:	f1c3 0301 	rsb	r3, r3, #1
 8115ce6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8115ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115cea:	2b00      	cmp	r3, #0
 8115cec:	d0f0      	beq.n	8115cd0 <__gethex+0x320>
 8115cee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8115cf2:	f104 0314 	add.w	r3, r4, #20
 8115cf6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8115cfa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8115cfe:	f04f 0c00 	mov.w	ip, #0
 8115d02:	4618      	mov	r0, r3
 8115d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8115d08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8115d0c:	d01b      	beq.n	8115d46 <__gethex+0x396>
 8115d0e:	3201      	adds	r2, #1
 8115d10:	6002      	str	r2, [r0, #0]
 8115d12:	2d02      	cmp	r5, #2
 8115d14:	f104 0314 	add.w	r3, r4, #20
 8115d18:	d13c      	bne.n	8115d94 <__gethex+0x3e4>
 8115d1a:	f8d8 2000 	ldr.w	r2, [r8]
 8115d1e:	3a01      	subs	r2, #1
 8115d20:	42b2      	cmp	r2, r6
 8115d22:	d109      	bne.n	8115d38 <__gethex+0x388>
 8115d24:	1171      	asrs	r1, r6, #5
 8115d26:	2201      	movs	r2, #1
 8115d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8115d2c:	f006 061f 	and.w	r6, r6, #31
 8115d30:	fa02 f606 	lsl.w	r6, r2, r6
 8115d34:	421e      	tst	r6, r3
 8115d36:	d13a      	bne.n	8115dae <__gethex+0x3fe>
 8115d38:	f045 0520 	orr.w	r5, r5, #32
 8115d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8115d3e:	601c      	str	r4, [r3, #0]
 8115d40:	9b02      	ldr	r3, [sp, #8]
 8115d42:	601f      	str	r7, [r3, #0]
 8115d44:	e6b0      	b.n	8115aa8 <__gethex+0xf8>
 8115d46:	4299      	cmp	r1, r3
 8115d48:	f843 cc04 	str.w	ip, [r3, #-4]
 8115d4c:	d8d9      	bhi.n	8115d02 <__gethex+0x352>
 8115d4e:	68a3      	ldr	r3, [r4, #8]
 8115d50:	459b      	cmp	fp, r3
 8115d52:	db17      	blt.n	8115d84 <__gethex+0x3d4>
 8115d54:	6861      	ldr	r1, [r4, #4]
 8115d56:	9801      	ldr	r0, [sp, #4]
 8115d58:	3101      	adds	r1, #1
 8115d5a:	f7fd feaf 	bl	8113abc <_Balloc>
 8115d5e:	4681      	mov	r9, r0
 8115d60:	b918      	cbnz	r0, 8115d6a <__gethex+0x3ba>
 8115d62:	4b1a      	ldr	r3, [pc, #104]	@ (8115dcc <__gethex+0x41c>)
 8115d64:	4602      	mov	r2, r0
 8115d66:	2184      	movs	r1, #132	@ 0x84
 8115d68:	e6c5      	b.n	8115af6 <__gethex+0x146>
 8115d6a:	6922      	ldr	r2, [r4, #16]
 8115d6c:	3202      	adds	r2, #2
 8115d6e:	f104 010c 	add.w	r1, r4, #12
 8115d72:	0092      	lsls	r2, r2, #2
 8115d74:	300c      	adds	r0, #12
 8115d76:	f7fc ffee 	bl	8112d56 <memcpy>
 8115d7a:	4621      	mov	r1, r4
 8115d7c:	9801      	ldr	r0, [sp, #4]
 8115d7e:	f7fd fedd 	bl	8113b3c <_Bfree>
 8115d82:	464c      	mov	r4, r9
 8115d84:	6923      	ldr	r3, [r4, #16]
 8115d86:	1c5a      	adds	r2, r3, #1
 8115d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8115d8c:	6122      	str	r2, [r4, #16]
 8115d8e:	2201      	movs	r2, #1
 8115d90:	615a      	str	r2, [r3, #20]
 8115d92:	e7be      	b.n	8115d12 <__gethex+0x362>
 8115d94:	6922      	ldr	r2, [r4, #16]
 8115d96:	455a      	cmp	r2, fp
 8115d98:	dd0b      	ble.n	8115db2 <__gethex+0x402>
 8115d9a:	2101      	movs	r1, #1
 8115d9c:	4620      	mov	r0, r4
 8115d9e:	f7ff fd9f 	bl	81158e0 <rshift>
 8115da2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8115da6:	3701      	adds	r7, #1
 8115da8:	42bb      	cmp	r3, r7
 8115daa:	f6ff aee0 	blt.w	8115b6e <__gethex+0x1be>
 8115dae:	2501      	movs	r5, #1
 8115db0:	e7c2      	b.n	8115d38 <__gethex+0x388>
 8115db2:	f016 061f 	ands.w	r6, r6, #31
 8115db6:	d0fa      	beq.n	8115dae <__gethex+0x3fe>
 8115db8:	4453      	add	r3, sl
 8115dba:	f1c6 0620 	rsb	r6, r6, #32
 8115dbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8115dc2:	f7fd ff6d 	bl	8113ca0 <__hi0bits>
 8115dc6:	42b0      	cmp	r0, r6
 8115dc8:	dbe7      	blt.n	8115d9a <__gethex+0x3ea>
 8115dca:	e7f0      	b.n	8115dae <__gethex+0x3fe>
 8115dcc:	08117746 	.word	0x08117746

08115dd0 <L_shift>:
 8115dd0:	f1c2 0208 	rsb	r2, r2, #8
 8115dd4:	0092      	lsls	r2, r2, #2
 8115dd6:	b570      	push	{r4, r5, r6, lr}
 8115dd8:	f1c2 0620 	rsb	r6, r2, #32
 8115ddc:	6843      	ldr	r3, [r0, #4]
 8115dde:	6804      	ldr	r4, [r0, #0]
 8115de0:	fa03 f506 	lsl.w	r5, r3, r6
 8115de4:	432c      	orrs	r4, r5
 8115de6:	40d3      	lsrs	r3, r2
 8115de8:	6004      	str	r4, [r0, #0]
 8115dea:	f840 3f04 	str.w	r3, [r0, #4]!
 8115dee:	4288      	cmp	r0, r1
 8115df0:	d3f4      	bcc.n	8115ddc <L_shift+0xc>
 8115df2:	bd70      	pop	{r4, r5, r6, pc}

08115df4 <__match>:
 8115df4:	b530      	push	{r4, r5, lr}
 8115df6:	6803      	ldr	r3, [r0, #0]
 8115df8:	3301      	adds	r3, #1
 8115dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8115dfe:	b914      	cbnz	r4, 8115e06 <__match+0x12>
 8115e00:	6003      	str	r3, [r0, #0]
 8115e02:	2001      	movs	r0, #1
 8115e04:	bd30      	pop	{r4, r5, pc}
 8115e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8115e0a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8115e0e:	2d19      	cmp	r5, #25
 8115e10:	bf98      	it	ls
 8115e12:	3220      	addls	r2, #32
 8115e14:	42a2      	cmp	r2, r4
 8115e16:	d0f0      	beq.n	8115dfa <__match+0x6>
 8115e18:	2000      	movs	r0, #0
 8115e1a:	e7f3      	b.n	8115e04 <__match+0x10>

08115e1c <__hexnan>:
 8115e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115e20:	680b      	ldr	r3, [r1, #0]
 8115e22:	6801      	ldr	r1, [r0, #0]
 8115e24:	115e      	asrs	r6, r3, #5
 8115e26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8115e2a:	f013 031f 	ands.w	r3, r3, #31
 8115e2e:	b087      	sub	sp, #28
 8115e30:	bf18      	it	ne
 8115e32:	3604      	addne	r6, #4
 8115e34:	2500      	movs	r5, #0
 8115e36:	1f37      	subs	r7, r6, #4
 8115e38:	4682      	mov	sl, r0
 8115e3a:	4690      	mov	r8, r2
 8115e3c:	9301      	str	r3, [sp, #4]
 8115e3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8115e42:	46b9      	mov	r9, r7
 8115e44:	463c      	mov	r4, r7
 8115e46:	9502      	str	r5, [sp, #8]
 8115e48:	46ab      	mov	fp, r5
 8115e4a:	784a      	ldrb	r2, [r1, #1]
 8115e4c:	1c4b      	adds	r3, r1, #1
 8115e4e:	9303      	str	r3, [sp, #12]
 8115e50:	b342      	cbz	r2, 8115ea4 <__hexnan+0x88>
 8115e52:	4610      	mov	r0, r2
 8115e54:	9105      	str	r1, [sp, #20]
 8115e56:	9204      	str	r2, [sp, #16]
 8115e58:	f7ff fd94 	bl	8115984 <__hexdig_fun>
 8115e5c:	2800      	cmp	r0, #0
 8115e5e:	d151      	bne.n	8115f04 <__hexnan+0xe8>
 8115e60:	9a04      	ldr	r2, [sp, #16]
 8115e62:	9905      	ldr	r1, [sp, #20]
 8115e64:	2a20      	cmp	r2, #32
 8115e66:	d818      	bhi.n	8115e9a <__hexnan+0x7e>
 8115e68:	9b02      	ldr	r3, [sp, #8]
 8115e6a:	459b      	cmp	fp, r3
 8115e6c:	dd13      	ble.n	8115e96 <__hexnan+0x7a>
 8115e6e:	454c      	cmp	r4, r9
 8115e70:	d206      	bcs.n	8115e80 <__hexnan+0x64>
 8115e72:	2d07      	cmp	r5, #7
 8115e74:	dc04      	bgt.n	8115e80 <__hexnan+0x64>
 8115e76:	462a      	mov	r2, r5
 8115e78:	4649      	mov	r1, r9
 8115e7a:	4620      	mov	r0, r4
 8115e7c:	f7ff ffa8 	bl	8115dd0 <L_shift>
 8115e80:	4544      	cmp	r4, r8
 8115e82:	d952      	bls.n	8115f2a <__hexnan+0x10e>
 8115e84:	2300      	movs	r3, #0
 8115e86:	f1a4 0904 	sub.w	r9, r4, #4
 8115e8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8115e8e:	f8cd b008 	str.w	fp, [sp, #8]
 8115e92:	464c      	mov	r4, r9
 8115e94:	461d      	mov	r5, r3
 8115e96:	9903      	ldr	r1, [sp, #12]
 8115e98:	e7d7      	b.n	8115e4a <__hexnan+0x2e>
 8115e9a:	2a29      	cmp	r2, #41	@ 0x29
 8115e9c:	d157      	bne.n	8115f4e <__hexnan+0x132>
 8115e9e:	3102      	adds	r1, #2
 8115ea0:	f8ca 1000 	str.w	r1, [sl]
 8115ea4:	f1bb 0f00 	cmp.w	fp, #0
 8115ea8:	d051      	beq.n	8115f4e <__hexnan+0x132>
 8115eaa:	454c      	cmp	r4, r9
 8115eac:	d206      	bcs.n	8115ebc <__hexnan+0xa0>
 8115eae:	2d07      	cmp	r5, #7
 8115eb0:	dc04      	bgt.n	8115ebc <__hexnan+0xa0>
 8115eb2:	462a      	mov	r2, r5
 8115eb4:	4649      	mov	r1, r9
 8115eb6:	4620      	mov	r0, r4
 8115eb8:	f7ff ff8a 	bl	8115dd0 <L_shift>
 8115ebc:	4544      	cmp	r4, r8
 8115ebe:	d936      	bls.n	8115f2e <__hexnan+0x112>
 8115ec0:	f1a8 0204 	sub.w	r2, r8, #4
 8115ec4:	4623      	mov	r3, r4
 8115ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 8115eca:	f842 1f04 	str.w	r1, [r2, #4]!
 8115ece:	429f      	cmp	r7, r3
 8115ed0:	d2f9      	bcs.n	8115ec6 <__hexnan+0xaa>
 8115ed2:	1b3b      	subs	r3, r7, r4
 8115ed4:	f023 0303 	bic.w	r3, r3, #3
 8115ed8:	3304      	adds	r3, #4
 8115eda:	3401      	adds	r4, #1
 8115edc:	3e03      	subs	r6, #3
 8115ede:	42b4      	cmp	r4, r6
 8115ee0:	bf88      	it	hi
 8115ee2:	2304      	movhi	r3, #4
 8115ee4:	4443      	add	r3, r8
 8115ee6:	2200      	movs	r2, #0
 8115ee8:	f843 2b04 	str.w	r2, [r3], #4
 8115eec:	429f      	cmp	r7, r3
 8115eee:	d2fb      	bcs.n	8115ee8 <__hexnan+0xcc>
 8115ef0:	683b      	ldr	r3, [r7, #0]
 8115ef2:	b91b      	cbnz	r3, 8115efc <__hexnan+0xe0>
 8115ef4:	4547      	cmp	r7, r8
 8115ef6:	d128      	bne.n	8115f4a <__hexnan+0x12e>
 8115ef8:	2301      	movs	r3, #1
 8115efa:	603b      	str	r3, [r7, #0]
 8115efc:	2005      	movs	r0, #5
 8115efe:	b007      	add	sp, #28
 8115f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115f04:	3501      	adds	r5, #1
 8115f06:	2d08      	cmp	r5, #8
 8115f08:	f10b 0b01 	add.w	fp, fp, #1
 8115f0c:	dd06      	ble.n	8115f1c <__hexnan+0x100>
 8115f0e:	4544      	cmp	r4, r8
 8115f10:	d9c1      	bls.n	8115e96 <__hexnan+0x7a>
 8115f12:	2300      	movs	r3, #0
 8115f14:	f844 3c04 	str.w	r3, [r4, #-4]
 8115f18:	2501      	movs	r5, #1
 8115f1a:	3c04      	subs	r4, #4
 8115f1c:	6822      	ldr	r2, [r4, #0]
 8115f1e:	f000 000f 	and.w	r0, r0, #15
 8115f22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8115f26:	6020      	str	r0, [r4, #0]
 8115f28:	e7b5      	b.n	8115e96 <__hexnan+0x7a>
 8115f2a:	2508      	movs	r5, #8
 8115f2c:	e7b3      	b.n	8115e96 <__hexnan+0x7a>
 8115f2e:	9b01      	ldr	r3, [sp, #4]
 8115f30:	2b00      	cmp	r3, #0
 8115f32:	d0dd      	beq.n	8115ef0 <__hexnan+0xd4>
 8115f34:	f1c3 0320 	rsb	r3, r3, #32
 8115f38:	f04f 32ff 	mov.w	r2, #4294967295
 8115f3c:	40da      	lsrs	r2, r3
 8115f3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8115f42:	4013      	ands	r3, r2
 8115f44:	f846 3c04 	str.w	r3, [r6, #-4]
 8115f48:	e7d2      	b.n	8115ef0 <__hexnan+0xd4>
 8115f4a:	3f04      	subs	r7, #4
 8115f4c:	e7d0      	b.n	8115ef0 <__hexnan+0xd4>
 8115f4e:	2004      	movs	r0, #4
 8115f50:	e7d5      	b.n	8115efe <__hexnan+0xe2>

08115f52 <__ascii_mbtowc>:
 8115f52:	b082      	sub	sp, #8
 8115f54:	b901      	cbnz	r1, 8115f58 <__ascii_mbtowc+0x6>
 8115f56:	a901      	add	r1, sp, #4
 8115f58:	b142      	cbz	r2, 8115f6c <__ascii_mbtowc+0x1a>
 8115f5a:	b14b      	cbz	r3, 8115f70 <__ascii_mbtowc+0x1e>
 8115f5c:	7813      	ldrb	r3, [r2, #0]
 8115f5e:	600b      	str	r3, [r1, #0]
 8115f60:	7812      	ldrb	r2, [r2, #0]
 8115f62:	1e10      	subs	r0, r2, #0
 8115f64:	bf18      	it	ne
 8115f66:	2001      	movne	r0, #1
 8115f68:	b002      	add	sp, #8
 8115f6a:	4770      	bx	lr
 8115f6c:	4610      	mov	r0, r2
 8115f6e:	e7fb      	b.n	8115f68 <__ascii_mbtowc+0x16>
 8115f70:	f06f 0001 	mvn.w	r0, #1
 8115f74:	e7f8      	b.n	8115f68 <__ascii_mbtowc+0x16>

08115f76 <_realloc_r>:
 8115f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115f7a:	4680      	mov	r8, r0
 8115f7c:	4615      	mov	r5, r2
 8115f7e:	460c      	mov	r4, r1
 8115f80:	b921      	cbnz	r1, 8115f8c <_realloc_r+0x16>
 8115f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8115f86:	4611      	mov	r1, r2
 8115f88:	f7fb bd20 	b.w	81119cc <_malloc_r>
 8115f8c:	b92a      	cbnz	r2, 8115f9a <_realloc_r+0x24>
 8115f8e:	f7fd fd4b 	bl	8113a28 <_free_r>
 8115f92:	2400      	movs	r4, #0
 8115f94:	4620      	mov	r0, r4
 8115f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8115f9a:	f000 f8ab 	bl	81160f4 <_malloc_usable_size_r>
 8115f9e:	4285      	cmp	r5, r0
 8115fa0:	4606      	mov	r6, r0
 8115fa2:	d802      	bhi.n	8115faa <_realloc_r+0x34>
 8115fa4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8115fa8:	d8f4      	bhi.n	8115f94 <_realloc_r+0x1e>
 8115faa:	4629      	mov	r1, r5
 8115fac:	4640      	mov	r0, r8
 8115fae:	f7fb fd0d 	bl	81119cc <_malloc_r>
 8115fb2:	4607      	mov	r7, r0
 8115fb4:	2800      	cmp	r0, #0
 8115fb6:	d0ec      	beq.n	8115f92 <_realloc_r+0x1c>
 8115fb8:	42b5      	cmp	r5, r6
 8115fba:	462a      	mov	r2, r5
 8115fbc:	4621      	mov	r1, r4
 8115fbe:	bf28      	it	cs
 8115fc0:	4632      	movcs	r2, r6
 8115fc2:	f7fc fec8 	bl	8112d56 <memcpy>
 8115fc6:	4621      	mov	r1, r4
 8115fc8:	4640      	mov	r0, r8
 8115fca:	f7fd fd2d 	bl	8113a28 <_free_r>
 8115fce:	463c      	mov	r4, r7
 8115fd0:	e7e0      	b.n	8115f94 <_realloc_r+0x1e>

08115fd2 <__ascii_wctomb>:
 8115fd2:	4603      	mov	r3, r0
 8115fd4:	4608      	mov	r0, r1
 8115fd6:	b141      	cbz	r1, 8115fea <__ascii_wctomb+0x18>
 8115fd8:	2aff      	cmp	r2, #255	@ 0xff
 8115fda:	d904      	bls.n	8115fe6 <__ascii_wctomb+0x14>
 8115fdc:	228a      	movs	r2, #138	@ 0x8a
 8115fde:	601a      	str	r2, [r3, #0]
 8115fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8115fe4:	4770      	bx	lr
 8115fe6:	700a      	strb	r2, [r1, #0]
 8115fe8:	2001      	movs	r0, #1
 8115fea:	4770      	bx	lr

08115fec <__swhatbuf_r>:
 8115fec:	b570      	push	{r4, r5, r6, lr}
 8115fee:	460c      	mov	r4, r1
 8115ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115ff4:	2900      	cmp	r1, #0
 8115ff6:	b096      	sub	sp, #88	@ 0x58
 8115ff8:	4615      	mov	r5, r2
 8115ffa:	461e      	mov	r6, r3
 8115ffc:	da0d      	bge.n	811601a <__swhatbuf_r+0x2e>
 8115ffe:	89a3      	ldrh	r3, [r4, #12]
 8116000:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8116004:	f04f 0100 	mov.w	r1, #0
 8116008:	bf14      	ite	ne
 811600a:	2340      	movne	r3, #64	@ 0x40
 811600c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8116010:	2000      	movs	r0, #0
 8116012:	6031      	str	r1, [r6, #0]
 8116014:	602b      	str	r3, [r5, #0]
 8116016:	b016      	add	sp, #88	@ 0x58
 8116018:	bd70      	pop	{r4, r5, r6, pc}
 811601a:	466a      	mov	r2, sp
 811601c:	f000 f848 	bl	81160b0 <_fstat_r>
 8116020:	2800      	cmp	r0, #0
 8116022:	dbec      	blt.n	8115ffe <__swhatbuf_r+0x12>
 8116024:	9901      	ldr	r1, [sp, #4]
 8116026:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811602a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811602e:	4259      	negs	r1, r3
 8116030:	4159      	adcs	r1, r3
 8116032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8116036:	e7eb      	b.n	8116010 <__swhatbuf_r+0x24>

08116038 <__smakebuf_r>:
 8116038:	898b      	ldrh	r3, [r1, #12]
 811603a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811603c:	079d      	lsls	r5, r3, #30
 811603e:	4606      	mov	r6, r0
 8116040:	460c      	mov	r4, r1
 8116042:	d507      	bpl.n	8116054 <__smakebuf_r+0x1c>
 8116044:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8116048:	6023      	str	r3, [r4, #0]
 811604a:	6123      	str	r3, [r4, #16]
 811604c:	2301      	movs	r3, #1
 811604e:	6163      	str	r3, [r4, #20]
 8116050:	b003      	add	sp, #12
 8116052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8116054:	ab01      	add	r3, sp, #4
 8116056:	466a      	mov	r2, sp
 8116058:	f7ff ffc8 	bl	8115fec <__swhatbuf_r>
 811605c:	9f00      	ldr	r7, [sp, #0]
 811605e:	4605      	mov	r5, r0
 8116060:	4639      	mov	r1, r7
 8116062:	4630      	mov	r0, r6
 8116064:	f7fb fcb2 	bl	81119cc <_malloc_r>
 8116068:	b948      	cbnz	r0, 811607e <__smakebuf_r+0x46>
 811606a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811606e:	059a      	lsls	r2, r3, #22
 8116070:	d4ee      	bmi.n	8116050 <__smakebuf_r+0x18>
 8116072:	f023 0303 	bic.w	r3, r3, #3
 8116076:	f043 0302 	orr.w	r3, r3, #2
 811607a:	81a3      	strh	r3, [r4, #12]
 811607c:	e7e2      	b.n	8116044 <__smakebuf_r+0xc>
 811607e:	89a3      	ldrh	r3, [r4, #12]
 8116080:	6020      	str	r0, [r4, #0]
 8116082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8116086:	81a3      	strh	r3, [r4, #12]
 8116088:	9b01      	ldr	r3, [sp, #4]
 811608a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811608e:	b15b      	cbz	r3, 81160a8 <__smakebuf_r+0x70>
 8116090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8116094:	4630      	mov	r0, r6
 8116096:	f000 f81d 	bl	81160d4 <_isatty_r>
 811609a:	b128      	cbz	r0, 81160a8 <__smakebuf_r+0x70>
 811609c:	89a3      	ldrh	r3, [r4, #12]
 811609e:	f023 0303 	bic.w	r3, r3, #3
 81160a2:	f043 0301 	orr.w	r3, r3, #1
 81160a6:	81a3      	strh	r3, [r4, #12]
 81160a8:	89a3      	ldrh	r3, [r4, #12]
 81160aa:	431d      	orrs	r5, r3
 81160ac:	81a5      	strh	r5, [r4, #12]
 81160ae:	e7cf      	b.n	8116050 <__smakebuf_r+0x18>

081160b0 <_fstat_r>:
 81160b0:	b538      	push	{r3, r4, r5, lr}
 81160b2:	4d07      	ldr	r5, [pc, #28]	@ (81160d0 <_fstat_r+0x20>)
 81160b4:	2300      	movs	r3, #0
 81160b6:	4604      	mov	r4, r0
 81160b8:	4608      	mov	r0, r1
 81160ba:	4611      	mov	r1, r2
 81160bc:	602b      	str	r3, [r5, #0]
 81160be:	f7ec f98f 	bl	81023e0 <_fstat>
 81160c2:	1c43      	adds	r3, r0, #1
 81160c4:	d102      	bne.n	81160cc <_fstat_r+0x1c>
 81160c6:	682b      	ldr	r3, [r5, #0]
 81160c8:	b103      	cbz	r3, 81160cc <_fstat_r+0x1c>
 81160ca:	6023      	str	r3, [r4, #0]
 81160cc:	bd38      	pop	{r3, r4, r5, pc}
 81160ce:	bf00      	nop
 81160d0:	10005144 	.word	0x10005144

081160d4 <_isatty_r>:
 81160d4:	b538      	push	{r3, r4, r5, lr}
 81160d6:	4d06      	ldr	r5, [pc, #24]	@ (81160f0 <_isatty_r+0x1c>)
 81160d8:	2300      	movs	r3, #0
 81160da:	4604      	mov	r4, r0
 81160dc:	4608      	mov	r0, r1
 81160de:	602b      	str	r3, [r5, #0]
 81160e0:	f7ec f98e 	bl	8102400 <_isatty>
 81160e4:	1c43      	adds	r3, r0, #1
 81160e6:	d102      	bne.n	81160ee <_isatty_r+0x1a>
 81160e8:	682b      	ldr	r3, [r5, #0]
 81160ea:	b103      	cbz	r3, 81160ee <_isatty_r+0x1a>
 81160ec:	6023      	str	r3, [r4, #0]
 81160ee:	bd38      	pop	{r3, r4, r5, pc}
 81160f0:	10005144 	.word	0x10005144

081160f4 <_malloc_usable_size_r>:
 81160f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81160f8:	1f18      	subs	r0, r3, #4
 81160fa:	2b00      	cmp	r3, #0
 81160fc:	bfbc      	itt	lt
 81160fe:	580b      	ldrlt	r3, [r1, r0]
 8116100:	18c0      	addlt	r0, r0, r3
 8116102:	4770      	bx	lr

08116104 <pow>:
 8116104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116106:	ed2d 8b02 	vpush	{d8}
 811610a:	eeb0 8a40 	vmov.f32	s16, s0
 811610e:	eef0 8a60 	vmov.f32	s17, s1
 8116112:	ec55 4b11 	vmov	r4, r5, d1
 8116116:	f000 f8ab 	bl	8116270 <__ieee754_pow>
 811611a:	4622      	mov	r2, r4
 811611c:	462b      	mov	r3, r5
 811611e:	4620      	mov	r0, r4
 8116120:	4629      	mov	r1, r5
 8116122:	ec57 6b10 	vmov	r6, r7, d0
 8116126:	f7ea fd99 	bl	8100c5c <__aeabi_dcmpun>
 811612a:	2800      	cmp	r0, #0
 811612c:	d13b      	bne.n	81161a6 <pow+0xa2>
 811612e:	ec51 0b18 	vmov	r0, r1, d8
 8116132:	2200      	movs	r2, #0
 8116134:	2300      	movs	r3, #0
 8116136:	f7ea fd5f 	bl	8100bf8 <__aeabi_dcmpeq>
 811613a:	b1b8      	cbz	r0, 811616c <pow+0x68>
 811613c:	2200      	movs	r2, #0
 811613e:	2300      	movs	r3, #0
 8116140:	4620      	mov	r0, r4
 8116142:	4629      	mov	r1, r5
 8116144:	f7ea fd58 	bl	8100bf8 <__aeabi_dcmpeq>
 8116148:	2800      	cmp	r0, #0
 811614a:	d146      	bne.n	81161da <pow+0xd6>
 811614c:	ec45 4b10 	vmov	d0, r4, r5
 8116150:	f000 f848 	bl	81161e4 <finite>
 8116154:	b338      	cbz	r0, 81161a6 <pow+0xa2>
 8116156:	2200      	movs	r2, #0
 8116158:	2300      	movs	r3, #0
 811615a:	4620      	mov	r0, r4
 811615c:	4629      	mov	r1, r5
 811615e:	f7ea fd55 	bl	8100c0c <__aeabi_dcmplt>
 8116162:	b300      	cbz	r0, 81161a6 <pow+0xa2>
 8116164:	f7fc fdca 	bl	8112cfc <__errno>
 8116168:	2322      	movs	r3, #34	@ 0x22
 811616a:	e01b      	b.n	81161a4 <pow+0xa0>
 811616c:	ec47 6b10 	vmov	d0, r6, r7
 8116170:	f000 f838 	bl	81161e4 <finite>
 8116174:	b9e0      	cbnz	r0, 81161b0 <pow+0xac>
 8116176:	eeb0 0a48 	vmov.f32	s0, s16
 811617a:	eef0 0a68 	vmov.f32	s1, s17
 811617e:	f000 f831 	bl	81161e4 <finite>
 8116182:	b1a8      	cbz	r0, 81161b0 <pow+0xac>
 8116184:	ec45 4b10 	vmov	d0, r4, r5
 8116188:	f000 f82c 	bl	81161e4 <finite>
 811618c:	b180      	cbz	r0, 81161b0 <pow+0xac>
 811618e:	4632      	mov	r2, r6
 8116190:	463b      	mov	r3, r7
 8116192:	4630      	mov	r0, r6
 8116194:	4639      	mov	r1, r7
 8116196:	f7ea fd61 	bl	8100c5c <__aeabi_dcmpun>
 811619a:	2800      	cmp	r0, #0
 811619c:	d0e2      	beq.n	8116164 <pow+0x60>
 811619e:	f7fc fdad 	bl	8112cfc <__errno>
 81161a2:	2321      	movs	r3, #33	@ 0x21
 81161a4:	6003      	str	r3, [r0, #0]
 81161a6:	ecbd 8b02 	vpop	{d8}
 81161aa:	ec47 6b10 	vmov	d0, r6, r7
 81161ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81161b0:	2200      	movs	r2, #0
 81161b2:	2300      	movs	r3, #0
 81161b4:	4630      	mov	r0, r6
 81161b6:	4639      	mov	r1, r7
 81161b8:	f7ea fd1e 	bl	8100bf8 <__aeabi_dcmpeq>
 81161bc:	2800      	cmp	r0, #0
 81161be:	d0f2      	beq.n	81161a6 <pow+0xa2>
 81161c0:	eeb0 0a48 	vmov.f32	s0, s16
 81161c4:	eef0 0a68 	vmov.f32	s1, s17
 81161c8:	f000 f80c 	bl	81161e4 <finite>
 81161cc:	2800      	cmp	r0, #0
 81161ce:	d0ea      	beq.n	81161a6 <pow+0xa2>
 81161d0:	ec45 4b10 	vmov	d0, r4, r5
 81161d4:	f000 f806 	bl	81161e4 <finite>
 81161d8:	e7c3      	b.n	8116162 <pow+0x5e>
 81161da:	4f01      	ldr	r7, [pc, #4]	@ (81161e0 <pow+0xdc>)
 81161dc:	2600      	movs	r6, #0
 81161de:	e7e2      	b.n	81161a6 <pow+0xa2>
 81161e0:	3ff00000 	.word	0x3ff00000

081161e4 <finite>:
 81161e4:	b082      	sub	sp, #8
 81161e6:	ed8d 0b00 	vstr	d0, [sp]
 81161ea:	9801      	ldr	r0, [sp, #4]
 81161ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 81161f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 81161f4:	0fc0      	lsrs	r0, r0, #31
 81161f6:	b002      	add	sp, #8
 81161f8:	4770      	bx	lr
	...

081161fc <trunc>:
 81161fc:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8116200:	ec5c bb10 	vmov	fp, ip, d0
 8116204:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8116208:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 811620c:	2913      	cmp	r1, #19
 811620e:	4664      	mov	r4, ip
 8116210:	dc14      	bgt.n	811623c <trunc+0x40>
 8116212:	2900      	cmp	r1, #0
 8116214:	bfa4      	itt	ge
 8116216:	4b15      	ldrge	r3, [pc, #84]	@ (811626c <trunc+0x70>)
 8116218:	fa43 f101 	asrge.w	r1, r3, r1
 811621c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8116220:	bfad      	iteet	ge
 8116222:	4021      	andge	r1, r4
 8116224:	2200      	movlt	r2, #0
 8116226:	4603      	movlt	r3, r0
 8116228:	2200      	movge	r2, #0
 811622a:	bfa8      	it	ge
 811622c:	ea41 0300 	orrge.w	r3, r1, r0
 8116230:	4693      	mov	fp, r2
 8116232:	469c      	mov	ip, r3
 8116234:	ec4c bb10 	vmov	d0, fp, ip
 8116238:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 811623c:	2933      	cmp	r1, #51	@ 0x33
 811623e:	dd0b      	ble.n	8116258 <trunc+0x5c>
 8116240:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8116244:	d1f6      	bne.n	8116234 <trunc+0x38>
 8116246:	465a      	mov	r2, fp
 8116248:	4663      	mov	r3, ip
 811624a:	4658      	mov	r0, fp
 811624c:	4621      	mov	r1, r4
 811624e:	f7ea f8b5 	bl	81003bc <__adddf3>
 8116252:	4683      	mov	fp, r0
 8116254:	468c      	mov	ip, r1
 8116256:	e7ed      	b.n	8116234 <trunc+0x38>
 8116258:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 811625c:	f04f 33ff 	mov.w	r3, #4294967295
 8116260:	40c3      	lsrs	r3, r0
 8116262:	ea2b 0603 	bic.w	r6, fp, r3
 8116266:	46b3      	mov	fp, r6
 8116268:	46a4      	mov	ip, r4
 811626a:	e7e3      	b.n	8116234 <trunc+0x38>
 811626c:	fff00000 	.word	0xfff00000

08116270 <__ieee754_pow>:
 8116270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116274:	b091      	sub	sp, #68	@ 0x44
 8116276:	ed8d 1b00 	vstr	d1, [sp]
 811627a:	e9dd 1900 	ldrd	r1, r9, [sp]
 811627e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8116282:	ea5a 0001 	orrs.w	r0, sl, r1
 8116286:	ec57 6b10 	vmov	r6, r7, d0
 811628a:	d113      	bne.n	81162b4 <__ieee754_pow+0x44>
 811628c:	19b3      	adds	r3, r6, r6
 811628e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8116292:	4152      	adcs	r2, r2
 8116294:	4298      	cmp	r0, r3
 8116296:	4b98      	ldr	r3, [pc, #608]	@ (81164f8 <__ieee754_pow+0x288>)
 8116298:	4193      	sbcs	r3, r2
 811629a:	f080 84ea 	bcs.w	8116c72 <__ieee754_pow+0xa02>
 811629e:	e9dd 2300 	ldrd	r2, r3, [sp]
 81162a2:	4630      	mov	r0, r6
 81162a4:	4639      	mov	r1, r7
 81162a6:	f7ea f889 	bl	81003bc <__adddf3>
 81162aa:	ec41 0b10 	vmov	d0, r0, r1
 81162ae:	b011      	add	sp, #68	@ 0x44
 81162b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81162b4:	4a91      	ldr	r2, [pc, #580]	@ (81164fc <__ieee754_pow+0x28c>)
 81162b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 81162ba:	4590      	cmp	r8, r2
 81162bc:	463d      	mov	r5, r7
 81162be:	4633      	mov	r3, r6
 81162c0:	d806      	bhi.n	81162d0 <__ieee754_pow+0x60>
 81162c2:	d101      	bne.n	81162c8 <__ieee754_pow+0x58>
 81162c4:	2e00      	cmp	r6, #0
 81162c6:	d1ea      	bne.n	811629e <__ieee754_pow+0x2e>
 81162c8:	4592      	cmp	sl, r2
 81162ca:	d801      	bhi.n	81162d0 <__ieee754_pow+0x60>
 81162cc:	d10e      	bne.n	81162ec <__ieee754_pow+0x7c>
 81162ce:	b169      	cbz	r1, 81162ec <__ieee754_pow+0x7c>
 81162d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 81162d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 81162d8:	431d      	orrs	r5, r3
 81162da:	d1e0      	bne.n	811629e <__ieee754_pow+0x2e>
 81162dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 81162e0:	18db      	adds	r3, r3, r3
 81162e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 81162e6:	4152      	adcs	r2, r2
 81162e8:	429d      	cmp	r5, r3
 81162ea:	e7d4      	b.n	8116296 <__ieee754_pow+0x26>
 81162ec:	2d00      	cmp	r5, #0
 81162ee:	46c3      	mov	fp, r8
 81162f0:	da3a      	bge.n	8116368 <__ieee754_pow+0xf8>
 81162f2:	4a83      	ldr	r2, [pc, #524]	@ (8116500 <__ieee754_pow+0x290>)
 81162f4:	4592      	cmp	sl, r2
 81162f6:	d84d      	bhi.n	8116394 <__ieee754_pow+0x124>
 81162f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 81162fc:	4592      	cmp	sl, r2
 81162fe:	f240 84c7 	bls.w	8116c90 <__ieee754_pow+0xa20>
 8116302:	ea4f 522a 	mov.w	r2, sl, asr #20
 8116306:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 811630a:	2a14      	cmp	r2, #20
 811630c:	dd0f      	ble.n	811632e <__ieee754_pow+0xbe>
 811630e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8116312:	fa21 f402 	lsr.w	r4, r1, r2
 8116316:	fa04 f202 	lsl.w	r2, r4, r2
 811631a:	428a      	cmp	r2, r1
 811631c:	f040 84b8 	bne.w	8116c90 <__ieee754_pow+0xa20>
 8116320:	f004 0401 	and.w	r4, r4, #1
 8116324:	f1c4 0402 	rsb	r4, r4, #2
 8116328:	2900      	cmp	r1, #0
 811632a:	d158      	bne.n	81163de <__ieee754_pow+0x16e>
 811632c:	e00e      	b.n	811634c <__ieee754_pow+0xdc>
 811632e:	2900      	cmp	r1, #0
 8116330:	d154      	bne.n	81163dc <__ieee754_pow+0x16c>
 8116332:	f1c2 0214 	rsb	r2, r2, #20
 8116336:	fa4a f402 	asr.w	r4, sl, r2
 811633a:	fa04 f202 	lsl.w	r2, r4, r2
 811633e:	4552      	cmp	r2, sl
 8116340:	f040 84a3 	bne.w	8116c8a <__ieee754_pow+0xa1a>
 8116344:	f004 0401 	and.w	r4, r4, #1
 8116348:	f1c4 0402 	rsb	r4, r4, #2
 811634c:	4a6d      	ldr	r2, [pc, #436]	@ (8116504 <__ieee754_pow+0x294>)
 811634e:	4592      	cmp	sl, r2
 8116350:	d12e      	bne.n	81163b0 <__ieee754_pow+0x140>
 8116352:	f1b9 0f00 	cmp.w	r9, #0
 8116356:	f280 8494 	bge.w	8116c82 <__ieee754_pow+0xa12>
 811635a:	496a      	ldr	r1, [pc, #424]	@ (8116504 <__ieee754_pow+0x294>)
 811635c:	4632      	mov	r2, r6
 811635e:	463b      	mov	r3, r7
 8116360:	2000      	movs	r0, #0
 8116362:	f7ea fb0b 	bl	810097c <__aeabi_ddiv>
 8116366:	e7a0      	b.n	81162aa <__ieee754_pow+0x3a>
 8116368:	2400      	movs	r4, #0
 811636a:	bbc1      	cbnz	r1, 81163de <__ieee754_pow+0x16e>
 811636c:	4a63      	ldr	r2, [pc, #396]	@ (81164fc <__ieee754_pow+0x28c>)
 811636e:	4592      	cmp	sl, r2
 8116370:	d1ec      	bne.n	811634c <__ieee754_pow+0xdc>
 8116372:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8116376:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 811637a:	431a      	orrs	r2, r3
 811637c:	f000 8479 	beq.w	8116c72 <__ieee754_pow+0xa02>
 8116380:	4b61      	ldr	r3, [pc, #388]	@ (8116508 <__ieee754_pow+0x298>)
 8116382:	4598      	cmp	r8, r3
 8116384:	d908      	bls.n	8116398 <__ieee754_pow+0x128>
 8116386:	f1b9 0f00 	cmp.w	r9, #0
 811638a:	f2c0 8476 	blt.w	8116c7a <__ieee754_pow+0xa0a>
 811638e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116392:	e78a      	b.n	81162aa <__ieee754_pow+0x3a>
 8116394:	2402      	movs	r4, #2
 8116396:	e7e8      	b.n	811636a <__ieee754_pow+0xfa>
 8116398:	f1b9 0f00 	cmp.w	r9, #0
 811639c:	f04f 0000 	mov.w	r0, #0
 81163a0:	f04f 0100 	mov.w	r1, #0
 81163a4:	da81      	bge.n	81162aa <__ieee754_pow+0x3a>
 81163a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 81163aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 81163ae:	e77c      	b.n	81162aa <__ieee754_pow+0x3a>
 81163b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 81163b4:	d106      	bne.n	81163c4 <__ieee754_pow+0x154>
 81163b6:	4632      	mov	r2, r6
 81163b8:	463b      	mov	r3, r7
 81163ba:	4630      	mov	r0, r6
 81163bc:	4639      	mov	r1, r7
 81163be:	f7ea f9b3 	bl	8100728 <__aeabi_dmul>
 81163c2:	e772      	b.n	81162aa <__ieee754_pow+0x3a>
 81163c4:	4a51      	ldr	r2, [pc, #324]	@ (811650c <__ieee754_pow+0x29c>)
 81163c6:	4591      	cmp	r9, r2
 81163c8:	d109      	bne.n	81163de <__ieee754_pow+0x16e>
 81163ca:	2d00      	cmp	r5, #0
 81163cc:	db07      	blt.n	81163de <__ieee754_pow+0x16e>
 81163ce:	ec47 6b10 	vmov	d0, r6, r7
 81163d2:	b011      	add	sp, #68	@ 0x44
 81163d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81163d8:	f000 bd52 	b.w	8116e80 <__ieee754_sqrt>
 81163dc:	2400      	movs	r4, #0
 81163de:	ec47 6b10 	vmov	d0, r6, r7
 81163e2:	9302      	str	r3, [sp, #8]
 81163e4:	f000 fc88 	bl	8116cf8 <fabs>
 81163e8:	9b02      	ldr	r3, [sp, #8]
 81163ea:	ec51 0b10 	vmov	r0, r1, d0
 81163ee:	bb53      	cbnz	r3, 8116446 <__ieee754_pow+0x1d6>
 81163f0:	4b44      	ldr	r3, [pc, #272]	@ (8116504 <__ieee754_pow+0x294>)
 81163f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 81163f6:	429a      	cmp	r2, r3
 81163f8:	d002      	beq.n	8116400 <__ieee754_pow+0x190>
 81163fa:	f1b8 0f00 	cmp.w	r8, #0
 81163fe:	d122      	bne.n	8116446 <__ieee754_pow+0x1d6>
 8116400:	f1b9 0f00 	cmp.w	r9, #0
 8116404:	da05      	bge.n	8116412 <__ieee754_pow+0x1a2>
 8116406:	4602      	mov	r2, r0
 8116408:	460b      	mov	r3, r1
 811640a:	2000      	movs	r0, #0
 811640c:	493d      	ldr	r1, [pc, #244]	@ (8116504 <__ieee754_pow+0x294>)
 811640e:	f7ea fab5 	bl	810097c <__aeabi_ddiv>
 8116412:	2d00      	cmp	r5, #0
 8116414:	f6bf af49 	bge.w	81162aa <__ieee754_pow+0x3a>
 8116418:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 811641c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8116420:	ea58 0804 	orrs.w	r8, r8, r4
 8116424:	d108      	bne.n	8116438 <__ieee754_pow+0x1c8>
 8116426:	4602      	mov	r2, r0
 8116428:	460b      	mov	r3, r1
 811642a:	4610      	mov	r0, r2
 811642c:	4619      	mov	r1, r3
 811642e:	f7e9 ffc3 	bl	81003b8 <__aeabi_dsub>
 8116432:	4602      	mov	r2, r0
 8116434:	460b      	mov	r3, r1
 8116436:	e794      	b.n	8116362 <__ieee754_pow+0xf2>
 8116438:	2c01      	cmp	r4, #1
 811643a:	f47f af36 	bne.w	81162aa <__ieee754_pow+0x3a>
 811643e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116442:	4619      	mov	r1, r3
 8116444:	e731      	b.n	81162aa <__ieee754_pow+0x3a>
 8116446:	0feb      	lsrs	r3, r5, #31
 8116448:	3b01      	subs	r3, #1
 811644a:	ea53 0204 	orrs.w	r2, r3, r4
 811644e:	d102      	bne.n	8116456 <__ieee754_pow+0x1e6>
 8116450:	4632      	mov	r2, r6
 8116452:	463b      	mov	r3, r7
 8116454:	e7e9      	b.n	811642a <__ieee754_pow+0x1ba>
 8116456:	3c01      	subs	r4, #1
 8116458:	431c      	orrs	r4, r3
 811645a:	d016      	beq.n	811648a <__ieee754_pow+0x21a>
 811645c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 81164e8 <__ieee754_pow+0x278>
 8116460:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8116464:	ed8d 7b02 	vstr	d7, [sp, #8]
 8116468:	f240 8112 	bls.w	8116690 <__ieee754_pow+0x420>
 811646c:	4b28      	ldr	r3, [pc, #160]	@ (8116510 <__ieee754_pow+0x2a0>)
 811646e:	459a      	cmp	sl, r3
 8116470:	4b25      	ldr	r3, [pc, #148]	@ (8116508 <__ieee754_pow+0x298>)
 8116472:	d916      	bls.n	81164a2 <__ieee754_pow+0x232>
 8116474:	4598      	cmp	r8, r3
 8116476:	d80b      	bhi.n	8116490 <__ieee754_pow+0x220>
 8116478:	f1b9 0f00 	cmp.w	r9, #0
 811647c:	da0b      	bge.n	8116496 <__ieee754_pow+0x226>
 811647e:	2000      	movs	r0, #0
 8116480:	b011      	add	sp, #68	@ 0x44
 8116482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116486:	f000 bcf3 	b.w	8116e70 <__math_oflow>
 811648a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 81164f0 <__ieee754_pow+0x280>
 811648e:	e7e7      	b.n	8116460 <__ieee754_pow+0x1f0>
 8116490:	f1b9 0f00 	cmp.w	r9, #0
 8116494:	dcf3      	bgt.n	811647e <__ieee754_pow+0x20e>
 8116496:	2000      	movs	r0, #0
 8116498:	b011      	add	sp, #68	@ 0x44
 811649a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811649e:	f000 bcdf 	b.w	8116e60 <__math_uflow>
 81164a2:	4598      	cmp	r8, r3
 81164a4:	d20c      	bcs.n	81164c0 <__ieee754_pow+0x250>
 81164a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81164aa:	2200      	movs	r2, #0
 81164ac:	2300      	movs	r3, #0
 81164ae:	f7ea fbad 	bl	8100c0c <__aeabi_dcmplt>
 81164b2:	3800      	subs	r0, #0
 81164b4:	bf18      	it	ne
 81164b6:	2001      	movne	r0, #1
 81164b8:	f1b9 0f00 	cmp.w	r9, #0
 81164bc:	daec      	bge.n	8116498 <__ieee754_pow+0x228>
 81164be:	e7df      	b.n	8116480 <__ieee754_pow+0x210>
 81164c0:	4b10      	ldr	r3, [pc, #64]	@ (8116504 <__ieee754_pow+0x294>)
 81164c2:	4598      	cmp	r8, r3
 81164c4:	f04f 0200 	mov.w	r2, #0
 81164c8:	d924      	bls.n	8116514 <__ieee754_pow+0x2a4>
 81164ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81164ce:	2300      	movs	r3, #0
 81164d0:	f7ea fb9c 	bl	8100c0c <__aeabi_dcmplt>
 81164d4:	3800      	subs	r0, #0
 81164d6:	bf18      	it	ne
 81164d8:	2001      	movne	r0, #1
 81164da:	f1b9 0f00 	cmp.w	r9, #0
 81164de:	dccf      	bgt.n	8116480 <__ieee754_pow+0x210>
 81164e0:	e7da      	b.n	8116498 <__ieee754_pow+0x228>
 81164e2:	bf00      	nop
 81164e4:	f3af 8000 	nop.w
 81164e8:	00000000 	.word	0x00000000
 81164ec:	3ff00000 	.word	0x3ff00000
 81164f0:	00000000 	.word	0x00000000
 81164f4:	bff00000 	.word	0xbff00000
 81164f8:	fff00000 	.word	0xfff00000
 81164fc:	7ff00000 	.word	0x7ff00000
 8116500:	433fffff 	.word	0x433fffff
 8116504:	3ff00000 	.word	0x3ff00000
 8116508:	3fefffff 	.word	0x3fefffff
 811650c:	3fe00000 	.word	0x3fe00000
 8116510:	43f00000 	.word	0x43f00000
 8116514:	4b5a      	ldr	r3, [pc, #360]	@ (8116680 <__ieee754_pow+0x410>)
 8116516:	f7e9 ff4f 	bl	81003b8 <__aeabi_dsub>
 811651a:	a351      	add	r3, pc, #324	@ (adr r3, 8116660 <__ieee754_pow+0x3f0>)
 811651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116520:	4604      	mov	r4, r0
 8116522:	460d      	mov	r5, r1
 8116524:	f7ea f900 	bl	8100728 <__aeabi_dmul>
 8116528:	a34f      	add	r3, pc, #316	@ (adr r3, 8116668 <__ieee754_pow+0x3f8>)
 811652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811652e:	4606      	mov	r6, r0
 8116530:	460f      	mov	r7, r1
 8116532:	4620      	mov	r0, r4
 8116534:	4629      	mov	r1, r5
 8116536:	f7ea f8f7 	bl	8100728 <__aeabi_dmul>
 811653a:	4b52      	ldr	r3, [pc, #328]	@ (8116684 <__ieee754_pow+0x414>)
 811653c:	4682      	mov	sl, r0
 811653e:	468b      	mov	fp, r1
 8116540:	2200      	movs	r2, #0
 8116542:	4620      	mov	r0, r4
 8116544:	4629      	mov	r1, r5
 8116546:	f7ea f8ef 	bl	8100728 <__aeabi_dmul>
 811654a:	4602      	mov	r2, r0
 811654c:	460b      	mov	r3, r1
 811654e:	a148      	add	r1, pc, #288	@ (adr r1, 8116670 <__ieee754_pow+0x400>)
 8116550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116554:	f7e9 ff30 	bl	81003b8 <__aeabi_dsub>
 8116558:	4622      	mov	r2, r4
 811655a:	462b      	mov	r3, r5
 811655c:	f7ea f8e4 	bl	8100728 <__aeabi_dmul>
 8116560:	4602      	mov	r2, r0
 8116562:	460b      	mov	r3, r1
 8116564:	2000      	movs	r0, #0
 8116566:	4948      	ldr	r1, [pc, #288]	@ (8116688 <__ieee754_pow+0x418>)
 8116568:	f7e9 ff26 	bl	81003b8 <__aeabi_dsub>
 811656c:	4622      	mov	r2, r4
 811656e:	4680      	mov	r8, r0
 8116570:	4689      	mov	r9, r1
 8116572:	462b      	mov	r3, r5
 8116574:	4620      	mov	r0, r4
 8116576:	4629      	mov	r1, r5
 8116578:	f7ea f8d6 	bl	8100728 <__aeabi_dmul>
 811657c:	4602      	mov	r2, r0
 811657e:	460b      	mov	r3, r1
 8116580:	4640      	mov	r0, r8
 8116582:	4649      	mov	r1, r9
 8116584:	f7ea f8d0 	bl	8100728 <__aeabi_dmul>
 8116588:	a33b      	add	r3, pc, #236	@ (adr r3, 8116678 <__ieee754_pow+0x408>)
 811658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811658e:	f7ea f8cb 	bl	8100728 <__aeabi_dmul>
 8116592:	4602      	mov	r2, r0
 8116594:	460b      	mov	r3, r1
 8116596:	4650      	mov	r0, sl
 8116598:	4659      	mov	r1, fp
 811659a:	f7e9 ff0d 	bl	81003b8 <__aeabi_dsub>
 811659e:	4602      	mov	r2, r0
 81165a0:	460b      	mov	r3, r1
 81165a2:	4680      	mov	r8, r0
 81165a4:	4689      	mov	r9, r1
 81165a6:	4630      	mov	r0, r6
 81165a8:	4639      	mov	r1, r7
 81165aa:	f7e9 ff07 	bl	81003bc <__adddf3>
 81165ae:	2400      	movs	r4, #0
 81165b0:	4632      	mov	r2, r6
 81165b2:	463b      	mov	r3, r7
 81165b4:	4620      	mov	r0, r4
 81165b6:	460d      	mov	r5, r1
 81165b8:	f7e9 fefe 	bl	81003b8 <__aeabi_dsub>
 81165bc:	4602      	mov	r2, r0
 81165be:	460b      	mov	r3, r1
 81165c0:	4640      	mov	r0, r8
 81165c2:	4649      	mov	r1, r9
 81165c4:	f7e9 fef8 	bl	81003b8 <__aeabi_dsub>
 81165c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81165cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81165d0:	2300      	movs	r3, #0
 81165d2:	9304      	str	r3, [sp, #16]
 81165d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 81165d8:	4606      	mov	r6, r0
 81165da:	460f      	mov	r7, r1
 81165dc:	4652      	mov	r2, sl
 81165de:	465b      	mov	r3, fp
 81165e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 81165e4:	f7e9 fee8 	bl	81003b8 <__aeabi_dsub>
 81165e8:	4622      	mov	r2, r4
 81165ea:	462b      	mov	r3, r5
 81165ec:	f7ea f89c 	bl	8100728 <__aeabi_dmul>
 81165f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81165f4:	4680      	mov	r8, r0
 81165f6:	4689      	mov	r9, r1
 81165f8:	4630      	mov	r0, r6
 81165fa:	4639      	mov	r1, r7
 81165fc:	f7ea f894 	bl	8100728 <__aeabi_dmul>
 8116600:	4602      	mov	r2, r0
 8116602:	460b      	mov	r3, r1
 8116604:	4640      	mov	r0, r8
 8116606:	4649      	mov	r1, r9
 8116608:	f7e9 fed8 	bl	81003bc <__adddf3>
 811660c:	4652      	mov	r2, sl
 811660e:	465b      	mov	r3, fp
 8116610:	4606      	mov	r6, r0
 8116612:	460f      	mov	r7, r1
 8116614:	4620      	mov	r0, r4
 8116616:	4629      	mov	r1, r5
 8116618:	f7ea f886 	bl	8100728 <__aeabi_dmul>
 811661c:	460b      	mov	r3, r1
 811661e:	4602      	mov	r2, r0
 8116620:	4680      	mov	r8, r0
 8116622:	4689      	mov	r9, r1
 8116624:	4630      	mov	r0, r6
 8116626:	4639      	mov	r1, r7
 8116628:	f7e9 fec8 	bl	81003bc <__adddf3>
 811662c:	4b17      	ldr	r3, [pc, #92]	@ (811668c <__ieee754_pow+0x41c>)
 811662e:	4299      	cmp	r1, r3
 8116630:	4604      	mov	r4, r0
 8116632:	460d      	mov	r5, r1
 8116634:	468a      	mov	sl, r1
 8116636:	468b      	mov	fp, r1
 8116638:	f340 82ef 	ble.w	8116c1a <__ieee754_pow+0x9aa>
 811663c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8116640:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8116644:	4303      	orrs	r3, r0
 8116646:	f000 81e8 	beq.w	8116a1a <__ieee754_pow+0x7aa>
 811664a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811664e:	2200      	movs	r2, #0
 8116650:	2300      	movs	r3, #0
 8116652:	f7ea fadb 	bl	8100c0c <__aeabi_dcmplt>
 8116656:	3800      	subs	r0, #0
 8116658:	bf18      	it	ne
 811665a:	2001      	movne	r0, #1
 811665c:	e710      	b.n	8116480 <__ieee754_pow+0x210>
 811665e:	bf00      	nop
 8116660:	60000000 	.word	0x60000000
 8116664:	3ff71547 	.word	0x3ff71547
 8116668:	f85ddf44 	.word	0xf85ddf44
 811666c:	3e54ae0b 	.word	0x3e54ae0b
 8116670:	55555555 	.word	0x55555555
 8116674:	3fd55555 	.word	0x3fd55555
 8116678:	652b82fe 	.word	0x652b82fe
 811667c:	3ff71547 	.word	0x3ff71547
 8116680:	3ff00000 	.word	0x3ff00000
 8116684:	3fd00000 	.word	0x3fd00000
 8116688:	3fe00000 	.word	0x3fe00000
 811668c:	408fffff 	.word	0x408fffff
 8116690:	4bd5      	ldr	r3, [pc, #852]	@ (81169e8 <__ieee754_pow+0x778>)
 8116692:	402b      	ands	r3, r5
 8116694:	2200      	movs	r2, #0
 8116696:	b92b      	cbnz	r3, 81166a4 <__ieee754_pow+0x434>
 8116698:	4bd4      	ldr	r3, [pc, #848]	@ (81169ec <__ieee754_pow+0x77c>)
 811669a:	f7ea f845 	bl	8100728 <__aeabi_dmul>
 811669e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 81166a2:	468b      	mov	fp, r1
 81166a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 81166a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 81166ac:	4413      	add	r3, r2
 81166ae:	930a      	str	r3, [sp, #40]	@ 0x28
 81166b0:	4bcf      	ldr	r3, [pc, #828]	@ (81169f0 <__ieee754_pow+0x780>)
 81166b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 81166b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 81166ba:	459b      	cmp	fp, r3
 81166bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 81166c0:	dd08      	ble.n	81166d4 <__ieee754_pow+0x464>
 81166c2:	4bcc      	ldr	r3, [pc, #816]	@ (81169f4 <__ieee754_pow+0x784>)
 81166c4:	459b      	cmp	fp, r3
 81166c6:	f340 81a5 	ble.w	8116a14 <__ieee754_pow+0x7a4>
 81166ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81166cc:	3301      	adds	r3, #1
 81166ce:	930a      	str	r3, [sp, #40]	@ 0x28
 81166d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 81166d4:	f04f 0a00 	mov.w	sl, #0
 81166d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 81166dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 81166de:	4bc6      	ldr	r3, [pc, #792]	@ (81169f8 <__ieee754_pow+0x788>)
 81166e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81166e4:	ed93 7b00 	vldr	d7, [r3]
 81166e8:	4629      	mov	r1, r5
 81166ea:	ec53 2b17 	vmov	r2, r3, d7
 81166ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 81166f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81166f6:	f7e9 fe5f 	bl	81003b8 <__aeabi_dsub>
 81166fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 81166fe:	4606      	mov	r6, r0
 8116700:	460f      	mov	r7, r1
 8116702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116706:	f7e9 fe59 	bl	81003bc <__adddf3>
 811670a:	4602      	mov	r2, r0
 811670c:	460b      	mov	r3, r1
 811670e:	2000      	movs	r0, #0
 8116710:	49ba      	ldr	r1, [pc, #744]	@ (81169fc <__ieee754_pow+0x78c>)
 8116712:	f7ea f933 	bl	810097c <__aeabi_ddiv>
 8116716:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 811671a:	4602      	mov	r2, r0
 811671c:	460b      	mov	r3, r1
 811671e:	4630      	mov	r0, r6
 8116720:	4639      	mov	r1, r7
 8116722:	f7ea f801 	bl	8100728 <__aeabi_dmul>
 8116726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 811672a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 811672e:	106d      	asrs	r5, r5, #1
 8116730:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8116734:	f04f 0b00 	mov.w	fp, #0
 8116738:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 811673c:	4661      	mov	r1, ip
 811673e:	2200      	movs	r2, #0
 8116740:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8116744:	4658      	mov	r0, fp
 8116746:	46e1      	mov	r9, ip
 8116748:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 811674c:	4614      	mov	r4, r2
 811674e:	461d      	mov	r5, r3
 8116750:	f7e9 ffea 	bl	8100728 <__aeabi_dmul>
 8116754:	4602      	mov	r2, r0
 8116756:	460b      	mov	r3, r1
 8116758:	4630      	mov	r0, r6
 811675a:	4639      	mov	r1, r7
 811675c:	f7e9 fe2c 	bl	81003b8 <__aeabi_dsub>
 8116760:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116764:	4606      	mov	r6, r0
 8116766:	460f      	mov	r7, r1
 8116768:	4620      	mov	r0, r4
 811676a:	4629      	mov	r1, r5
 811676c:	f7e9 fe24 	bl	81003b8 <__aeabi_dsub>
 8116770:	4602      	mov	r2, r0
 8116772:	460b      	mov	r3, r1
 8116774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8116778:	f7e9 fe1e 	bl	81003b8 <__aeabi_dsub>
 811677c:	465a      	mov	r2, fp
 811677e:	464b      	mov	r3, r9
 8116780:	f7e9 ffd2 	bl	8100728 <__aeabi_dmul>
 8116784:	4602      	mov	r2, r0
 8116786:	460b      	mov	r3, r1
 8116788:	4630      	mov	r0, r6
 811678a:	4639      	mov	r1, r7
 811678c:	f7e9 fe14 	bl	81003b8 <__aeabi_dsub>
 8116790:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8116794:	f7e9 ffc8 	bl	8100728 <__aeabi_dmul>
 8116798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811679c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 81167a0:	4610      	mov	r0, r2
 81167a2:	4619      	mov	r1, r3
 81167a4:	f7e9 ffc0 	bl	8100728 <__aeabi_dmul>
 81167a8:	a37d      	add	r3, pc, #500	@ (adr r3, 81169a0 <__ieee754_pow+0x730>)
 81167aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81167ae:	4604      	mov	r4, r0
 81167b0:	460d      	mov	r5, r1
 81167b2:	f7e9 ffb9 	bl	8100728 <__aeabi_dmul>
 81167b6:	a37c      	add	r3, pc, #496	@ (adr r3, 81169a8 <__ieee754_pow+0x738>)
 81167b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81167bc:	f7e9 fdfe 	bl	81003bc <__adddf3>
 81167c0:	4622      	mov	r2, r4
 81167c2:	462b      	mov	r3, r5
 81167c4:	f7e9 ffb0 	bl	8100728 <__aeabi_dmul>
 81167c8:	a379      	add	r3, pc, #484	@ (adr r3, 81169b0 <__ieee754_pow+0x740>)
 81167ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81167ce:	f7e9 fdf5 	bl	81003bc <__adddf3>
 81167d2:	4622      	mov	r2, r4
 81167d4:	462b      	mov	r3, r5
 81167d6:	f7e9 ffa7 	bl	8100728 <__aeabi_dmul>
 81167da:	a377      	add	r3, pc, #476	@ (adr r3, 81169b8 <__ieee754_pow+0x748>)
 81167dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81167e0:	f7e9 fdec 	bl	81003bc <__adddf3>
 81167e4:	4622      	mov	r2, r4
 81167e6:	462b      	mov	r3, r5
 81167e8:	f7e9 ff9e 	bl	8100728 <__aeabi_dmul>
 81167ec:	a374      	add	r3, pc, #464	@ (adr r3, 81169c0 <__ieee754_pow+0x750>)
 81167ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81167f2:	f7e9 fde3 	bl	81003bc <__adddf3>
 81167f6:	4622      	mov	r2, r4
 81167f8:	462b      	mov	r3, r5
 81167fa:	f7e9 ff95 	bl	8100728 <__aeabi_dmul>
 81167fe:	a372      	add	r3, pc, #456	@ (adr r3, 81169c8 <__ieee754_pow+0x758>)
 8116800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116804:	f7e9 fdda 	bl	81003bc <__adddf3>
 8116808:	4622      	mov	r2, r4
 811680a:	4606      	mov	r6, r0
 811680c:	460f      	mov	r7, r1
 811680e:	462b      	mov	r3, r5
 8116810:	4620      	mov	r0, r4
 8116812:	4629      	mov	r1, r5
 8116814:	f7e9 ff88 	bl	8100728 <__aeabi_dmul>
 8116818:	4602      	mov	r2, r0
 811681a:	460b      	mov	r3, r1
 811681c:	4630      	mov	r0, r6
 811681e:	4639      	mov	r1, r7
 8116820:	f7e9 ff82 	bl	8100728 <__aeabi_dmul>
 8116824:	465a      	mov	r2, fp
 8116826:	4604      	mov	r4, r0
 8116828:	460d      	mov	r5, r1
 811682a:	464b      	mov	r3, r9
 811682c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8116830:	f7e9 fdc4 	bl	81003bc <__adddf3>
 8116834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116838:	f7e9 ff76 	bl	8100728 <__aeabi_dmul>
 811683c:	4622      	mov	r2, r4
 811683e:	462b      	mov	r3, r5
 8116840:	f7e9 fdbc 	bl	81003bc <__adddf3>
 8116844:	465a      	mov	r2, fp
 8116846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 811684a:	464b      	mov	r3, r9
 811684c:	4658      	mov	r0, fp
 811684e:	4649      	mov	r1, r9
 8116850:	f7e9 ff6a 	bl	8100728 <__aeabi_dmul>
 8116854:	4b6a      	ldr	r3, [pc, #424]	@ (8116a00 <__ieee754_pow+0x790>)
 8116856:	2200      	movs	r2, #0
 8116858:	4606      	mov	r6, r0
 811685a:	460f      	mov	r7, r1
 811685c:	f7e9 fdae 	bl	81003bc <__adddf3>
 8116860:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8116864:	f7e9 fdaa 	bl	81003bc <__adddf3>
 8116868:	46d8      	mov	r8, fp
 811686a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 811686e:	460d      	mov	r5, r1
 8116870:	465a      	mov	r2, fp
 8116872:	460b      	mov	r3, r1
 8116874:	4640      	mov	r0, r8
 8116876:	4649      	mov	r1, r9
 8116878:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 811687c:	f7e9 ff54 	bl	8100728 <__aeabi_dmul>
 8116880:	465c      	mov	r4, fp
 8116882:	4680      	mov	r8, r0
 8116884:	4689      	mov	r9, r1
 8116886:	4b5e      	ldr	r3, [pc, #376]	@ (8116a00 <__ieee754_pow+0x790>)
 8116888:	2200      	movs	r2, #0
 811688a:	4620      	mov	r0, r4
 811688c:	4629      	mov	r1, r5
 811688e:	f7e9 fd93 	bl	81003b8 <__aeabi_dsub>
 8116892:	4632      	mov	r2, r6
 8116894:	463b      	mov	r3, r7
 8116896:	f7e9 fd8f 	bl	81003b8 <__aeabi_dsub>
 811689a:	4602      	mov	r2, r0
 811689c:	460b      	mov	r3, r1
 811689e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81168a2:	f7e9 fd89 	bl	81003b8 <__aeabi_dsub>
 81168a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81168aa:	f7e9 ff3d 	bl	8100728 <__aeabi_dmul>
 81168ae:	4622      	mov	r2, r4
 81168b0:	4606      	mov	r6, r0
 81168b2:	460f      	mov	r7, r1
 81168b4:	462b      	mov	r3, r5
 81168b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81168ba:	f7e9 ff35 	bl	8100728 <__aeabi_dmul>
 81168be:	4602      	mov	r2, r0
 81168c0:	460b      	mov	r3, r1
 81168c2:	4630      	mov	r0, r6
 81168c4:	4639      	mov	r1, r7
 81168c6:	f7e9 fd79 	bl	81003bc <__adddf3>
 81168ca:	4606      	mov	r6, r0
 81168cc:	460f      	mov	r7, r1
 81168ce:	4602      	mov	r2, r0
 81168d0:	460b      	mov	r3, r1
 81168d2:	4640      	mov	r0, r8
 81168d4:	4649      	mov	r1, r9
 81168d6:	f7e9 fd71 	bl	81003bc <__adddf3>
 81168da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 81168de:	a33c      	add	r3, pc, #240	@ (adr r3, 81169d0 <__ieee754_pow+0x760>)
 81168e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81168e4:	4658      	mov	r0, fp
 81168e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 81168ea:	460d      	mov	r5, r1
 81168ec:	f7e9 ff1c 	bl	8100728 <__aeabi_dmul>
 81168f0:	465c      	mov	r4, fp
 81168f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81168f6:	4642      	mov	r2, r8
 81168f8:	464b      	mov	r3, r9
 81168fa:	4620      	mov	r0, r4
 81168fc:	4629      	mov	r1, r5
 81168fe:	f7e9 fd5b 	bl	81003b8 <__aeabi_dsub>
 8116902:	4602      	mov	r2, r0
 8116904:	460b      	mov	r3, r1
 8116906:	4630      	mov	r0, r6
 8116908:	4639      	mov	r1, r7
 811690a:	f7e9 fd55 	bl	81003b8 <__aeabi_dsub>
 811690e:	a332      	add	r3, pc, #200	@ (adr r3, 81169d8 <__ieee754_pow+0x768>)
 8116910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116914:	f7e9 ff08 	bl	8100728 <__aeabi_dmul>
 8116918:	a331      	add	r3, pc, #196	@ (adr r3, 81169e0 <__ieee754_pow+0x770>)
 811691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811691e:	4606      	mov	r6, r0
 8116920:	460f      	mov	r7, r1
 8116922:	4620      	mov	r0, r4
 8116924:	4629      	mov	r1, r5
 8116926:	f7e9 feff 	bl	8100728 <__aeabi_dmul>
 811692a:	4602      	mov	r2, r0
 811692c:	460b      	mov	r3, r1
 811692e:	4630      	mov	r0, r6
 8116930:	4639      	mov	r1, r7
 8116932:	f7e9 fd43 	bl	81003bc <__adddf3>
 8116936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8116938:	4b32      	ldr	r3, [pc, #200]	@ (8116a04 <__ieee754_pow+0x794>)
 811693a:	4413      	add	r3, r2
 811693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116940:	f7e9 fd3c 	bl	81003bc <__adddf3>
 8116944:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8116948:	980a      	ldr	r0, [sp, #40]	@ 0x28
 811694a:	f7e9 fe83 	bl	8100654 <__aeabi_i2d>
 811694e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8116950:	4b2d      	ldr	r3, [pc, #180]	@ (8116a08 <__ieee754_pow+0x798>)
 8116952:	4413      	add	r3, r2
 8116954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8116958:	4606      	mov	r6, r0
 811695a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811695e:	460f      	mov	r7, r1
 8116960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8116964:	f7e9 fd2a 	bl	81003bc <__adddf3>
 8116968:	4642      	mov	r2, r8
 811696a:	464b      	mov	r3, r9
 811696c:	f7e9 fd26 	bl	81003bc <__adddf3>
 8116970:	4632      	mov	r2, r6
 8116972:	463b      	mov	r3, r7
 8116974:	f7e9 fd22 	bl	81003bc <__adddf3>
 8116978:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 811697c:	4632      	mov	r2, r6
 811697e:	463b      	mov	r3, r7
 8116980:	4658      	mov	r0, fp
 8116982:	460d      	mov	r5, r1
 8116984:	f7e9 fd18 	bl	81003b8 <__aeabi_dsub>
 8116988:	4642      	mov	r2, r8
 811698a:	464b      	mov	r3, r9
 811698c:	f7e9 fd14 	bl	81003b8 <__aeabi_dsub>
 8116990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116994:	f7e9 fd10 	bl	81003b8 <__aeabi_dsub>
 8116998:	465c      	mov	r4, fp
 811699a:	4602      	mov	r2, r0
 811699c:	e036      	b.n	8116a0c <__ieee754_pow+0x79c>
 811699e:	bf00      	nop
 81169a0:	4a454eef 	.word	0x4a454eef
 81169a4:	3fca7e28 	.word	0x3fca7e28
 81169a8:	93c9db65 	.word	0x93c9db65
 81169ac:	3fcd864a 	.word	0x3fcd864a
 81169b0:	a91d4101 	.word	0xa91d4101
 81169b4:	3fd17460 	.word	0x3fd17460
 81169b8:	518f264d 	.word	0x518f264d
 81169bc:	3fd55555 	.word	0x3fd55555
 81169c0:	db6fabff 	.word	0xdb6fabff
 81169c4:	3fdb6db6 	.word	0x3fdb6db6
 81169c8:	33333303 	.word	0x33333303
 81169cc:	3fe33333 	.word	0x3fe33333
 81169d0:	e0000000 	.word	0xe0000000
 81169d4:	3feec709 	.word	0x3feec709
 81169d8:	dc3a03fd 	.word	0xdc3a03fd
 81169dc:	3feec709 	.word	0x3feec709
 81169e0:	145b01f5 	.word	0x145b01f5
 81169e4:	be3e2fe0 	.word	0xbe3e2fe0
 81169e8:	7ff00000 	.word	0x7ff00000
 81169ec:	43400000 	.word	0x43400000
 81169f0:	0003988e 	.word	0x0003988e
 81169f4:	000bb679 	.word	0x000bb679
 81169f8:	081179a8 	.word	0x081179a8
 81169fc:	3ff00000 	.word	0x3ff00000
 8116a00:	40080000 	.word	0x40080000
 8116a04:	08117988 	.word	0x08117988
 8116a08:	08117998 	.word	0x08117998
 8116a0c:	460b      	mov	r3, r1
 8116a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116a12:	e5d7      	b.n	81165c4 <__ieee754_pow+0x354>
 8116a14:	f04f 0a01 	mov.w	sl, #1
 8116a18:	e65e      	b.n	81166d8 <__ieee754_pow+0x468>
 8116a1a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8116cec <__ieee754_pow+0xa7c>)
 8116a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116a20:	4630      	mov	r0, r6
 8116a22:	4639      	mov	r1, r7
 8116a24:	f7e9 fcca 	bl	81003bc <__adddf3>
 8116a28:	4642      	mov	r2, r8
 8116a2a:	e9cd 0100 	strd	r0, r1, [sp]
 8116a2e:	464b      	mov	r3, r9
 8116a30:	4620      	mov	r0, r4
 8116a32:	4629      	mov	r1, r5
 8116a34:	f7e9 fcc0 	bl	81003b8 <__aeabi_dsub>
 8116a38:	4602      	mov	r2, r0
 8116a3a:	460b      	mov	r3, r1
 8116a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116a40:	f7ea f902 	bl	8100c48 <__aeabi_dcmpgt>
 8116a44:	2800      	cmp	r0, #0
 8116a46:	f47f ae00 	bne.w	811664a <__ieee754_pow+0x3da>
 8116a4a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8116a4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8116a52:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8116a56:	fa43 fa0a 	asr.w	sl, r3, sl
 8116a5a:	44da      	add	sl, fp
 8116a5c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8116a60:	489d      	ldr	r0, [pc, #628]	@ (8116cd8 <__ieee754_pow+0xa68>)
 8116a62:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8116a66:	4108      	asrs	r0, r1
 8116a68:	ea00 030a 	and.w	r3, r0, sl
 8116a6c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8116a70:	f1c1 0114 	rsb	r1, r1, #20
 8116a74:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8116a78:	fa4a fa01 	asr.w	sl, sl, r1
 8116a7c:	f1bb 0f00 	cmp.w	fp, #0
 8116a80:	4640      	mov	r0, r8
 8116a82:	4649      	mov	r1, r9
 8116a84:	f04f 0200 	mov.w	r2, #0
 8116a88:	bfb8      	it	lt
 8116a8a:	f1ca 0a00 	rsblt	sl, sl, #0
 8116a8e:	f7e9 fc93 	bl	81003b8 <__aeabi_dsub>
 8116a92:	4680      	mov	r8, r0
 8116a94:	4689      	mov	r9, r1
 8116a96:	4632      	mov	r2, r6
 8116a98:	463b      	mov	r3, r7
 8116a9a:	4640      	mov	r0, r8
 8116a9c:	4649      	mov	r1, r9
 8116a9e:	f7e9 fc8d 	bl	81003bc <__adddf3>
 8116aa2:	2400      	movs	r4, #0
 8116aa4:	a37c      	add	r3, pc, #496	@ (adr r3, 8116c98 <__ieee754_pow+0xa28>)
 8116aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116aaa:	4620      	mov	r0, r4
 8116aac:	460d      	mov	r5, r1
 8116aae:	f7e9 fe3b 	bl	8100728 <__aeabi_dmul>
 8116ab2:	4642      	mov	r2, r8
 8116ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8116ab8:	464b      	mov	r3, r9
 8116aba:	4620      	mov	r0, r4
 8116abc:	4629      	mov	r1, r5
 8116abe:	f7e9 fc7b 	bl	81003b8 <__aeabi_dsub>
 8116ac2:	4602      	mov	r2, r0
 8116ac4:	460b      	mov	r3, r1
 8116ac6:	4630      	mov	r0, r6
 8116ac8:	4639      	mov	r1, r7
 8116aca:	f7e9 fc75 	bl	81003b8 <__aeabi_dsub>
 8116ace:	a374      	add	r3, pc, #464	@ (adr r3, 8116ca0 <__ieee754_pow+0xa30>)
 8116ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116ad4:	f7e9 fe28 	bl	8100728 <__aeabi_dmul>
 8116ad8:	a373      	add	r3, pc, #460	@ (adr r3, 8116ca8 <__ieee754_pow+0xa38>)
 8116ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116ade:	4680      	mov	r8, r0
 8116ae0:	4689      	mov	r9, r1
 8116ae2:	4620      	mov	r0, r4
 8116ae4:	4629      	mov	r1, r5
 8116ae6:	f7e9 fe1f 	bl	8100728 <__aeabi_dmul>
 8116aea:	4602      	mov	r2, r0
 8116aec:	460b      	mov	r3, r1
 8116aee:	4640      	mov	r0, r8
 8116af0:	4649      	mov	r1, r9
 8116af2:	f7e9 fc63 	bl	81003bc <__adddf3>
 8116af6:	4604      	mov	r4, r0
 8116af8:	460d      	mov	r5, r1
 8116afa:	4602      	mov	r2, r0
 8116afc:	460b      	mov	r3, r1
 8116afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116b02:	f7e9 fc5b 	bl	81003bc <__adddf3>
 8116b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8116b0a:	4680      	mov	r8, r0
 8116b0c:	4689      	mov	r9, r1
 8116b0e:	f7e9 fc53 	bl	81003b8 <__aeabi_dsub>
 8116b12:	4602      	mov	r2, r0
 8116b14:	460b      	mov	r3, r1
 8116b16:	4620      	mov	r0, r4
 8116b18:	4629      	mov	r1, r5
 8116b1a:	f7e9 fc4d 	bl	81003b8 <__aeabi_dsub>
 8116b1e:	4642      	mov	r2, r8
 8116b20:	4606      	mov	r6, r0
 8116b22:	460f      	mov	r7, r1
 8116b24:	464b      	mov	r3, r9
 8116b26:	4640      	mov	r0, r8
 8116b28:	4649      	mov	r1, r9
 8116b2a:	f7e9 fdfd 	bl	8100728 <__aeabi_dmul>
 8116b2e:	a360      	add	r3, pc, #384	@ (adr r3, 8116cb0 <__ieee754_pow+0xa40>)
 8116b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b34:	4604      	mov	r4, r0
 8116b36:	460d      	mov	r5, r1
 8116b38:	f7e9 fdf6 	bl	8100728 <__aeabi_dmul>
 8116b3c:	a35e      	add	r3, pc, #376	@ (adr r3, 8116cb8 <__ieee754_pow+0xa48>)
 8116b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b42:	f7e9 fc39 	bl	81003b8 <__aeabi_dsub>
 8116b46:	4622      	mov	r2, r4
 8116b48:	462b      	mov	r3, r5
 8116b4a:	f7e9 fded 	bl	8100728 <__aeabi_dmul>
 8116b4e:	a35c      	add	r3, pc, #368	@ (adr r3, 8116cc0 <__ieee754_pow+0xa50>)
 8116b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b54:	f7e9 fc32 	bl	81003bc <__adddf3>
 8116b58:	4622      	mov	r2, r4
 8116b5a:	462b      	mov	r3, r5
 8116b5c:	f7e9 fde4 	bl	8100728 <__aeabi_dmul>
 8116b60:	a359      	add	r3, pc, #356	@ (adr r3, 8116cc8 <__ieee754_pow+0xa58>)
 8116b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b66:	f7e9 fc27 	bl	81003b8 <__aeabi_dsub>
 8116b6a:	4622      	mov	r2, r4
 8116b6c:	462b      	mov	r3, r5
 8116b6e:	f7e9 fddb 	bl	8100728 <__aeabi_dmul>
 8116b72:	a357      	add	r3, pc, #348	@ (adr r3, 8116cd0 <__ieee754_pow+0xa60>)
 8116b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b78:	f7e9 fc20 	bl	81003bc <__adddf3>
 8116b7c:	4622      	mov	r2, r4
 8116b7e:	462b      	mov	r3, r5
 8116b80:	f7e9 fdd2 	bl	8100728 <__aeabi_dmul>
 8116b84:	4602      	mov	r2, r0
 8116b86:	460b      	mov	r3, r1
 8116b88:	4640      	mov	r0, r8
 8116b8a:	4649      	mov	r1, r9
 8116b8c:	f7e9 fc14 	bl	81003b8 <__aeabi_dsub>
 8116b90:	4604      	mov	r4, r0
 8116b92:	460d      	mov	r5, r1
 8116b94:	4602      	mov	r2, r0
 8116b96:	460b      	mov	r3, r1
 8116b98:	4640      	mov	r0, r8
 8116b9a:	4649      	mov	r1, r9
 8116b9c:	f7e9 fdc4 	bl	8100728 <__aeabi_dmul>
 8116ba0:	2200      	movs	r2, #0
 8116ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8116ba6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8116baa:	4620      	mov	r0, r4
 8116bac:	4629      	mov	r1, r5
 8116bae:	f7e9 fc03 	bl	81003b8 <__aeabi_dsub>
 8116bb2:	4602      	mov	r2, r0
 8116bb4:	460b      	mov	r3, r1
 8116bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116bba:	f7e9 fedf 	bl	810097c <__aeabi_ddiv>
 8116bbe:	4632      	mov	r2, r6
 8116bc0:	4604      	mov	r4, r0
 8116bc2:	460d      	mov	r5, r1
 8116bc4:	463b      	mov	r3, r7
 8116bc6:	4640      	mov	r0, r8
 8116bc8:	4649      	mov	r1, r9
 8116bca:	f7e9 fdad 	bl	8100728 <__aeabi_dmul>
 8116bce:	4632      	mov	r2, r6
 8116bd0:	463b      	mov	r3, r7
 8116bd2:	f7e9 fbf3 	bl	81003bc <__adddf3>
 8116bd6:	4602      	mov	r2, r0
 8116bd8:	460b      	mov	r3, r1
 8116bda:	4620      	mov	r0, r4
 8116bdc:	4629      	mov	r1, r5
 8116bde:	f7e9 fbeb 	bl	81003b8 <__aeabi_dsub>
 8116be2:	4642      	mov	r2, r8
 8116be4:	464b      	mov	r3, r9
 8116be6:	f7e9 fbe7 	bl	81003b8 <__aeabi_dsub>
 8116bea:	460b      	mov	r3, r1
 8116bec:	4602      	mov	r2, r0
 8116bee:	493b      	ldr	r1, [pc, #236]	@ (8116cdc <__ieee754_pow+0xa6c>)
 8116bf0:	2000      	movs	r0, #0
 8116bf2:	f7e9 fbe1 	bl	81003b8 <__aeabi_dsub>
 8116bf6:	ec41 0b10 	vmov	d0, r0, r1
 8116bfa:	ee10 3a90 	vmov	r3, s1
 8116bfe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8116c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8116c06:	da30      	bge.n	8116c6a <__ieee754_pow+0x9fa>
 8116c08:	4650      	mov	r0, sl
 8116c0a:	f000 f87d 	bl	8116d08 <scalbn>
 8116c0e:	ec51 0b10 	vmov	r0, r1, d0
 8116c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8116c16:	f7ff bbd2 	b.w	81163be <__ieee754_pow+0x14e>
 8116c1a:	4c31      	ldr	r4, [pc, #196]	@ (8116ce0 <__ieee754_pow+0xa70>)
 8116c1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8116c20:	42a3      	cmp	r3, r4
 8116c22:	d91a      	bls.n	8116c5a <__ieee754_pow+0x9ea>
 8116c24:	4b2f      	ldr	r3, [pc, #188]	@ (8116ce4 <__ieee754_pow+0xa74>)
 8116c26:	440b      	add	r3, r1
 8116c28:	4303      	orrs	r3, r0
 8116c2a:	d009      	beq.n	8116c40 <__ieee754_pow+0x9d0>
 8116c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116c30:	2200      	movs	r2, #0
 8116c32:	2300      	movs	r3, #0
 8116c34:	f7e9 ffea 	bl	8100c0c <__aeabi_dcmplt>
 8116c38:	3800      	subs	r0, #0
 8116c3a:	bf18      	it	ne
 8116c3c:	2001      	movne	r0, #1
 8116c3e:	e42b      	b.n	8116498 <__ieee754_pow+0x228>
 8116c40:	4642      	mov	r2, r8
 8116c42:	464b      	mov	r3, r9
 8116c44:	f7e9 fbb8 	bl	81003b8 <__aeabi_dsub>
 8116c48:	4632      	mov	r2, r6
 8116c4a:	463b      	mov	r3, r7
 8116c4c:	f7e9 fff2 	bl	8100c34 <__aeabi_dcmpge>
 8116c50:	2800      	cmp	r0, #0
 8116c52:	d1eb      	bne.n	8116c2c <__ieee754_pow+0x9bc>
 8116c54:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8116cf4 <__ieee754_pow+0xa84>
 8116c58:	e6f7      	b.n	8116a4a <__ieee754_pow+0x7da>
 8116c5a:	469a      	mov	sl, r3
 8116c5c:	4b22      	ldr	r3, [pc, #136]	@ (8116ce8 <__ieee754_pow+0xa78>)
 8116c5e:	459a      	cmp	sl, r3
 8116c60:	f63f aef3 	bhi.w	8116a4a <__ieee754_pow+0x7da>
 8116c64:	f8dd a010 	ldr.w	sl, [sp, #16]
 8116c68:	e715      	b.n	8116a96 <__ieee754_pow+0x826>
 8116c6a:	ec51 0b10 	vmov	r0, r1, d0
 8116c6e:	4619      	mov	r1, r3
 8116c70:	e7cf      	b.n	8116c12 <__ieee754_pow+0x9a2>
 8116c72:	491a      	ldr	r1, [pc, #104]	@ (8116cdc <__ieee754_pow+0xa6c>)
 8116c74:	2000      	movs	r0, #0
 8116c76:	f7ff bb18 	b.w	81162aa <__ieee754_pow+0x3a>
 8116c7a:	2000      	movs	r0, #0
 8116c7c:	2100      	movs	r1, #0
 8116c7e:	f7ff bb14 	b.w	81162aa <__ieee754_pow+0x3a>
 8116c82:	4630      	mov	r0, r6
 8116c84:	4639      	mov	r1, r7
 8116c86:	f7ff bb10 	b.w	81162aa <__ieee754_pow+0x3a>
 8116c8a:	460c      	mov	r4, r1
 8116c8c:	f7ff bb5e 	b.w	811634c <__ieee754_pow+0xdc>
 8116c90:	2400      	movs	r4, #0
 8116c92:	f7ff bb49 	b.w	8116328 <__ieee754_pow+0xb8>
 8116c96:	bf00      	nop
 8116c98:	00000000 	.word	0x00000000
 8116c9c:	3fe62e43 	.word	0x3fe62e43
 8116ca0:	fefa39ef 	.word	0xfefa39ef
 8116ca4:	3fe62e42 	.word	0x3fe62e42
 8116ca8:	0ca86c39 	.word	0x0ca86c39
 8116cac:	be205c61 	.word	0xbe205c61
 8116cb0:	72bea4d0 	.word	0x72bea4d0
 8116cb4:	3e663769 	.word	0x3e663769
 8116cb8:	c5d26bf1 	.word	0xc5d26bf1
 8116cbc:	3ebbbd41 	.word	0x3ebbbd41
 8116cc0:	af25de2c 	.word	0xaf25de2c
 8116cc4:	3f11566a 	.word	0x3f11566a
 8116cc8:	16bebd93 	.word	0x16bebd93
 8116ccc:	3f66c16c 	.word	0x3f66c16c
 8116cd0:	5555553e 	.word	0x5555553e
 8116cd4:	3fc55555 	.word	0x3fc55555
 8116cd8:	fff00000 	.word	0xfff00000
 8116cdc:	3ff00000 	.word	0x3ff00000
 8116ce0:	4090cbff 	.word	0x4090cbff
 8116ce4:	3f6f3400 	.word	0x3f6f3400
 8116ce8:	3fe00000 	.word	0x3fe00000
 8116cec:	652b82fe 	.word	0x652b82fe
 8116cf0:	3c971547 	.word	0x3c971547
 8116cf4:	4090cc00 	.word	0x4090cc00

08116cf8 <fabs>:
 8116cf8:	ec51 0b10 	vmov	r0, r1, d0
 8116cfc:	4602      	mov	r2, r0
 8116cfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8116d02:	ec43 2b10 	vmov	d0, r2, r3
 8116d06:	4770      	bx	lr

08116d08 <scalbn>:
 8116d08:	b570      	push	{r4, r5, r6, lr}
 8116d0a:	ec55 4b10 	vmov	r4, r5, d0
 8116d0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8116d12:	4606      	mov	r6, r0
 8116d14:	462b      	mov	r3, r5
 8116d16:	b991      	cbnz	r1, 8116d3e <scalbn+0x36>
 8116d18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8116d1c:	4323      	orrs	r3, r4
 8116d1e:	d03d      	beq.n	8116d9c <scalbn+0x94>
 8116d20:	4b35      	ldr	r3, [pc, #212]	@ (8116df8 <scalbn+0xf0>)
 8116d22:	4620      	mov	r0, r4
 8116d24:	4629      	mov	r1, r5
 8116d26:	2200      	movs	r2, #0
 8116d28:	f7e9 fcfe 	bl	8100728 <__aeabi_dmul>
 8116d2c:	4b33      	ldr	r3, [pc, #204]	@ (8116dfc <scalbn+0xf4>)
 8116d2e:	429e      	cmp	r6, r3
 8116d30:	4604      	mov	r4, r0
 8116d32:	460d      	mov	r5, r1
 8116d34:	da0f      	bge.n	8116d56 <scalbn+0x4e>
 8116d36:	a328      	add	r3, pc, #160	@ (adr r3, 8116dd8 <scalbn+0xd0>)
 8116d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116d3c:	e01e      	b.n	8116d7c <scalbn+0x74>
 8116d3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8116d42:	4291      	cmp	r1, r2
 8116d44:	d10b      	bne.n	8116d5e <scalbn+0x56>
 8116d46:	4622      	mov	r2, r4
 8116d48:	4620      	mov	r0, r4
 8116d4a:	4629      	mov	r1, r5
 8116d4c:	f7e9 fb36 	bl	81003bc <__adddf3>
 8116d50:	4604      	mov	r4, r0
 8116d52:	460d      	mov	r5, r1
 8116d54:	e022      	b.n	8116d9c <scalbn+0x94>
 8116d56:	460b      	mov	r3, r1
 8116d58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8116d5c:	3936      	subs	r1, #54	@ 0x36
 8116d5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8116d62:	4296      	cmp	r6, r2
 8116d64:	dd0d      	ble.n	8116d82 <scalbn+0x7a>
 8116d66:	2d00      	cmp	r5, #0
 8116d68:	a11d      	add	r1, pc, #116	@ (adr r1, 8116de0 <scalbn+0xd8>)
 8116d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116d6e:	da02      	bge.n	8116d76 <scalbn+0x6e>
 8116d70:	a11d      	add	r1, pc, #116	@ (adr r1, 8116de8 <scalbn+0xe0>)
 8116d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116d76:	a31a      	add	r3, pc, #104	@ (adr r3, 8116de0 <scalbn+0xd8>)
 8116d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116d7c:	f7e9 fcd4 	bl	8100728 <__aeabi_dmul>
 8116d80:	e7e6      	b.n	8116d50 <scalbn+0x48>
 8116d82:	1872      	adds	r2, r6, r1
 8116d84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8116d88:	428a      	cmp	r2, r1
 8116d8a:	dcec      	bgt.n	8116d66 <scalbn+0x5e>
 8116d8c:	2a00      	cmp	r2, #0
 8116d8e:	dd08      	ble.n	8116da2 <scalbn+0x9a>
 8116d90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8116d94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8116d98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116d9c:	ec45 4b10 	vmov	d0, r4, r5
 8116da0:	bd70      	pop	{r4, r5, r6, pc}
 8116da2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8116da6:	da08      	bge.n	8116dba <scalbn+0xb2>
 8116da8:	2d00      	cmp	r5, #0
 8116daa:	a10b      	add	r1, pc, #44	@ (adr r1, 8116dd8 <scalbn+0xd0>)
 8116dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116db0:	dac1      	bge.n	8116d36 <scalbn+0x2e>
 8116db2:	a10f      	add	r1, pc, #60	@ (adr r1, 8116df0 <scalbn+0xe8>)
 8116db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116db8:	e7bd      	b.n	8116d36 <scalbn+0x2e>
 8116dba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8116dbe:	3236      	adds	r2, #54	@ 0x36
 8116dc0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8116dc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116dc8:	4620      	mov	r0, r4
 8116dca:	4b0d      	ldr	r3, [pc, #52]	@ (8116e00 <scalbn+0xf8>)
 8116dcc:	4629      	mov	r1, r5
 8116dce:	2200      	movs	r2, #0
 8116dd0:	e7d4      	b.n	8116d7c <scalbn+0x74>
 8116dd2:	bf00      	nop
 8116dd4:	f3af 8000 	nop.w
 8116dd8:	c2f8f359 	.word	0xc2f8f359
 8116ddc:	01a56e1f 	.word	0x01a56e1f
 8116de0:	8800759c 	.word	0x8800759c
 8116de4:	7e37e43c 	.word	0x7e37e43c
 8116de8:	8800759c 	.word	0x8800759c
 8116dec:	fe37e43c 	.word	0xfe37e43c
 8116df0:	c2f8f359 	.word	0xc2f8f359
 8116df4:	81a56e1f 	.word	0x81a56e1f
 8116df8:	43500000 	.word	0x43500000
 8116dfc:	ffff3cb0 	.word	0xffff3cb0
 8116e00:	3c900000 	.word	0x3c900000

08116e04 <with_errno>:
 8116e04:	b510      	push	{r4, lr}
 8116e06:	ed2d 8b02 	vpush	{d8}
 8116e0a:	eeb0 8a40 	vmov.f32	s16, s0
 8116e0e:	eef0 8a60 	vmov.f32	s17, s1
 8116e12:	4604      	mov	r4, r0
 8116e14:	f7fb ff72 	bl	8112cfc <__errno>
 8116e18:	eeb0 0a48 	vmov.f32	s0, s16
 8116e1c:	eef0 0a68 	vmov.f32	s1, s17
 8116e20:	ecbd 8b02 	vpop	{d8}
 8116e24:	6004      	str	r4, [r0, #0]
 8116e26:	bd10      	pop	{r4, pc}

08116e28 <xflow>:
 8116e28:	4603      	mov	r3, r0
 8116e2a:	b507      	push	{r0, r1, r2, lr}
 8116e2c:	ec51 0b10 	vmov	r0, r1, d0
 8116e30:	b183      	cbz	r3, 8116e54 <xflow+0x2c>
 8116e32:	4602      	mov	r2, r0
 8116e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116e38:	e9cd 2300 	strd	r2, r3, [sp]
 8116e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8116e40:	f7e9 fc72 	bl	8100728 <__aeabi_dmul>
 8116e44:	ec41 0b10 	vmov	d0, r0, r1
 8116e48:	2022      	movs	r0, #34	@ 0x22
 8116e4a:	b003      	add	sp, #12
 8116e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8116e50:	f7ff bfd8 	b.w	8116e04 <with_errno>
 8116e54:	4602      	mov	r2, r0
 8116e56:	460b      	mov	r3, r1
 8116e58:	e7ee      	b.n	8116e38 <xflow+0x10>
 8116e5a:	0000      	movs	r0, r0
 8116e5c:	0000      	movs	r0, r0
	...

08116e60 <__math_uflow>:
 8116e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8116e68 <__math_uflow+0x8>
 8116e64:	f7ff bfe0 	b.w	8116e28 <xflow>
 8116e68:	00000000 	.word	0x00000000
 8116e6c:	10000000 	.word	0x10000000

08116e70 <__math_oflow>:
 8116e70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8116e78 <__math_oflow+0x8>
 8116e74:	f7ff bfd8 	b.w	8116e28 <xflow>
 8116e78:	00000000 	.word	0x00000000
 8116e7c:	70000000 	.word	0x70000000

08116e80 <__ieee754_sqrt>:
 8116e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116e84:	4a68      	ldr	r2, [pc, #416]	@ (8117028 <__ieee754_sqrt+0x1a8>)
 8116e86:	ec55 4b10 	vmov	r4, r5, d0
 8116e8a:	43aa      	bics	r2, r5
 8116e8c:	462b      	mov	r3, r5
 8116e8e:	4621      	mov	r1, r4
 8116e90:	d110      	bne.n	8116eb4 <__ieee754_sqrt+0x34>
 8116e92:	4622      	mov	r2, r4
 8116e94:	4620      	mov	r0, r4
 8116e96:	4629      	mov	r1, r5
 8116e98:	f7e9 fc46 	bl	8100728 <__aeabi_dmul>
 8116e9c:	4602      	mov	r2, r0
 8116e9e:	460b      	mov	r3, r1
 8116ea0:	4620      	mov	r0, r4
 8116ea2:	4629      	mov	r1, r5
 8116ea4:	f7e9 fa8a 	bl	81003bc <__adddf3>
 8116ea8:	4604      	mov	r4, r0
 8116eaa:	460d      	mov	r5, r1
 8116eac:	ec45 4b10 	vmov	d0, r4, r5
 8116eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8116eb4:	2d00      	cmp	r5, #0
 8116eb6:	dc0e      	bgt.n	8116ed6 <__ieee754_sqrt+0x56>
 8116eb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8116ebc:	4322      	orrs	r2, r4
 8116ebe:	d0f5      	beq.n	8116eac <__ieee754_sqrt+0x2c>
 8116ec0:	b19d      	cbz	r5, 8116eea <__ieee754_sqrt+0x6a>
 8116ec2:	4622      	mov	r2, r4
 8116ec4:	4620      	mov	r0, r4
 8116ec6:	4629      	mov	r1, r5
 8116ec8:	f7e9 fa76 	bl	81003b8 <__aeabi_dsub>
 8116ecc:	4602      	mov	r2, r0
 8116ece:	460b      	mov	r3, r1
 8116ed0:	f7e9 fd54 	bl	810097c <__aeabi_ddiv>
 8116ed4:	e7e8      	b.n	8116ea8 <__ieee754_sqrt+0x28>
 8116ed6:	152a      	asrs	r2, r5, #20
 8116ed8:	d115      	bne.n	8116f06 <__ieee754_sqrt+0x86>
 8116eda:	2000      	movs	r0, #0
 8116edc:	e009      	b.n	8116ef2 <__ieee754_sqrt+0x72>
 8116ede:	0acb      	lsrs	r3, r1, #11
 8116ee0:	3a15      	subs	r2, #21
 8116ee2:	0549      	lsls	r1, r1, #21
 8116ee4:	2b00      	cmp	r3, #0
 8116ee6:	d0fa      	beq.n	8116ede <__ieee754_sqrt+0x5e>
 8116ee8:	e7f7      	b.n	8116eda <__ieee754_sqrt+0x5a>
 8116eea:	462a      	mov	r2, r5
 8116eec:	e7fa      	b.n	8116ee4 <__ieee754_sqrt+0x64>
 8116eee:	005b      	lsls	r3, r3, #1
 8116ef0:	3001      	adds	r0, #1
 8116ef2:	02dc      	lsls	r4, r3, #11
 8116ef4:	d5fb      	bpl.n	8116eee <__ieee754_sqrt+0x6e>
 8116ef6:	1e44      	subs	r4, r0, #1
 8116ef8:	1b12      	subs	r2, r2, r4
 8116efa:	f1c0 0420 	rsb	r4, r0, #32
 8116efe:	fa21 f404 	lsr.w	r4, r1, r4
 8116f02:	4323      	orrs	r3, r4
 8116f04:	4081      	lsls	r1, r0
 8116f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8116f0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8116f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8116f12:	07d2      	lsls	r2, r2, #31
 8116f14:	bf5c      	itt	pl
 8116f16:	005b      	lslpl	r3, r3, #1
 8116f18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8116f1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8116f20:	bf58      	it	pl
 8116f22:	0049      	lslpl	r1, r1, #1
 8116f24:	2600      	movs	r6, #0
 8116f26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8116f2a:	106d      	asrs	r5, r5, #1
 8116f2c:	0049      	lsls	r1, r1, #1
 8116f2e:	2016      	movs	r0, #22
 8116f30:	4632      	mov	r2, r6
 8116f32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8116f36:	1917      	adds	r7, r2, r4
 8116f38:	429f      	cmp	r7, r3
 8116f3a:	bfde      	ittt	le
 8116f3c:	193a      	addle	r2, r7, r4
 8116f3e:	1bdb      	suble	r3, r3, r7
 8116f40:	1936      	addle	r6, r6, r4
 8116f42:	0fcf      	lsrs	r7, r1, #31
 8116f44:	3801      	subs	r0, #1
 8116f46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8116f4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8116f4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8116f52:	d1f0      	bne.n	8116f36 <__ieee754_sqrt+0xb6>
 8116f54:	4604      	mov	r4, r0
 8116f56:	2720      	movs	r7, #32
 8116f58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8116f5c:	429a      	cmp	r2, r3
 8116f5e:	eb00 0e0c 	add.w	lr, r0, ip
 8116f62:	db02      	blt.n	8116f6a <__ieee754_sqrt+0xea>
 8116f64:	d113      	bne.n	8116f8e <__ieee754_sqrt+0x10e>
 8116f66:	458e      	cmp	lr, r1
 8116f68:	d811      	bhi.n	8116f8e <__ieee754_sqrt+0x10e>
 8116f6a:	f1be 0f00 	cmp.w	lr, #0
 8116f6e:	eb0e 000c 	add.w	r0, lr, ip
 8116f72:	da42      	bge.n	8116ffa <__ieee754_sqrt+0x17a>
 8116f74:	2800      	cmp	r0, #0
 8116f76:	db40      	blt.n	8116ffa <__ieee754_sqrt+0x17a>
 8116f78:	f102 0801 	add.w	r8, r2, #1
 8116f7c:	1a9b      	subs	r3, r3, r2
 8116f7e:	458e      	cmp	lr, r1
 8116f80:	bf88      	it	hi
 8116f82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8116f86:	eba1 010e 	sub.w	r1, r1, lr
 8116f8a:	4464      	add	r4, ip
 8116f8c:	4642      	mov	r2, r8
 8116f8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8116f92:	3f01      	subs	r7, #1
 8116f94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8116f98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8116f9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8116fa0:	d1dc      	bne.n	8116f5c <__ieee754_sqrt+0xdc>
 8116fa2:	4319      	orrs	r1, r3
 8116fa4:	d01b      	beq.n	8116fde <__ieee754_sqrt+0x15e>
 8116fa6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 811702c <__ieee754_sqrt+0x1ac>
 8116faa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8117030 <__ieee754_sqrt+0x1b0>
 8116fae:	e9da 0100 	ldrd	r0, r1, [sl]
 8116fb2:	e9db 2300 	ldrd	r2, r3, [fp]
 8116fb6:	f7e9 f9ff 	bl	81003b8 <__aeabi_dsub>
 8116fba:	e9da 8900 	ldrd	r8, r9, [sl]
 8116fbe:	4602      	mov	r2, r0
 8116fc0:	460b      	mov	r3, r1
 8116fc2:	4640      	mov	r0, r8
 8116fc4:	4649      	mov	r1, r9
 8116fc6:	f7e9 fe2b 	bl	8100c20 <__aeabi_dcmple>
 8116fca:	b140      	cbz	r0, 8116fde <__ieee754_sqrt+0x15e>
 8116fcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8116fd0:	e9da 0100 	ldrd	r0, r1, [sl]
 8116fd4:	e9db 2300 	ldrd	r2, r3, [fp]
 8116fd8:	d111      	bne.n	8116ffe <__ieee754_sqrt+0x17e>
 8116fda:	3601      	adds	r6, #1
 8116fdc:	463c      	mov	r4, r7
 8116fde:	1072      	asrs	r2, r6, #1
 8116fe0:	0863      	lsrs	r3, r4, #1
 8116fe2:	07f1      	lsls	r1, r6, #31
 8116fe4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8116fe8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8116fec:	bf48      	it	mi
 8116fee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8116ff2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8116ff6:	4618      	mov	r0, r3
 8116ff8:	e756      	b.n	8116ea8 <__ieee754_sqrt+0x28>
 8116ffa:	4690      	mov	r8, r2
 8116ffc:	e7be      	b.n	8116f7c <__ieee754_sqrt+0xfc>
 8116ffe:	f7e9 f9dd 	bl	81003bc <__adddf3>
 8117002:	e9da 8900 	ldrd	r8, r9, [sl]
 8117006:	4602      	mov	r2, r0
 8117008:	460b      	mov	r3, r1
 811700a:	4640      	mov	r0, r8
 811700c:	4649      	mov	r1, r9
 811700e:	f7e9 fdfd 	bl	8100c0c <__aeabi_dcmplt>
 8117012:	b120      	cbz	r0, 811701e <__ieee754_sqrt+0x19e>
 8117014:	1ca0      	adds	r0, r4, #2
 8117016:	bf08      	it	eq
 8117018:	3601      	addeq	r6, #1
 811701a:	3402      	adds	r4, #2
 811701c:	e7df      	b.n	8116fde <__ieee754_sqrt+0x15e>
 811701e:	1c63      	adds	r3, r4, #1
 8117020:	f023 0401 	bic.w	r4, r3, #1
 8117024:	e7db      	b.n	8116fde <__ieee754_sqrt+0x15e>
 8117026:	bf00      	nop
 8117028:	7ff00000 	.word	0x7ff00000
 811702c:	10000290 	.word	0x10000290
 8117030:	10000288 	.word	0x10000288

08117034 <_init>:
 8117034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117036:	bf00      	nop
 8117038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811703a:	bc08      	pop	{r3}
 811703c:	469e      	mov	lr, r3
 811703e:	4770      	bx	lr

08117040 <_fini>:
 8117040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117042:	bf00      	nop
 8117044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117046:	bc08      	pop	{r3}
 8117048:	469e      	mov	lr, r3
 811704a:	4770      	bx	lr
