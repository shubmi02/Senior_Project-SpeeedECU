
SpeeedFreeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001719c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08117440  08117440  00018440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08117cb0  08117cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08117cb8  08117cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08117cbc  08117cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000298  10000000  08117cc0  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004eec  10000298  08117f58  00019298  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10005184  08117f58  0001a184  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  08117f58  0001a000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00019298  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003506a  00000000  00000000  000192c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006dd6  00000000  00000000  0004e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002910  00000000  00000000  00055108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f8c  00000000  00000000  00057a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043fd9  00000000  00000000  000599a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036339  00000000  00000000  0009d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b7900  00000000  00000000  000d3cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028b5b6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c64c  00000000  00000000  0028b5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00297c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000298 	.word	0x10000298
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08117424 	.word	0x08117424

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000029c 	.word	0x1000029c
 81002dc:	08117424 	.word	0x08117424

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <strlen>:
 81003a0:	4603      	mov	r3, r0
 81003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81003a6:	2a00      	cmp	r2, #0
 81003a8:	d1fb      	bne.n	81003a2 <strlen+0x2>
 81003aa:	1a18      	subs	r0, r3, r0
 81003ac:	3801      	subs	r0, #1
 81003ae:	4770      	bx	lr

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	@ 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_uldivmod>:
 8100db8:	b953      	cbnz	r3, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dba:	b94a      	cbnz	r2, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dbc:	2900      	cmp	r1, #0
 8100dbe:	bf08      	it	eq
 8100dc0:	2800      	cmpeq	r0, #0
 8100dc2:	bf1c      	itt	ne
 8100dc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100dc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dcc:	f000 b9a0 	b.w	8101110 <__aeabi_idiv0>
 8100dd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100dd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100dd8:	f000 f83c 	bl	8100e54 <__udivmoddi4>
 8100ddc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100de4:	b004      	add	sp, #16
 8100de6:	4770      	bx	lr

08100de8 <__aeabi_d2lz>:
 8100de8:	b538      	push	{r3, r4, r5, lr}
 8100dea:	2200      	movs	r2, #0
 8100dec:	2300      	movs	r3, #0
 8100dee:	4604      	mov	r4, r0
 8100df0:	460d      	mov	r5, r1
 8100df2:	f7ff ff0b 	bl	8100c0c <__aeabi_dcmplt>
 8100df6:	b928      	cbnz	r0, 8100e04 <__aeabi_d2lz+0x1c>
 8100df8:	4620      	mov	r0, r4
 8100dfa:	4629      	mov	r1, r5
 8100dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100e00:	f000 b80a 	b.w	8100e18 <__aeabi_d2ulz>
 8100e04:	4620      	mov	r0, r4
 8100e06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100e0a:	f000 f805 	bl	8100e18 <__aeabi_d2ulz>
 8100e0e:	4240      	negs	r0, r0
 8100e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e14:	bd38      	pop	{r3, r4, r5, pc}
 8100e16:	bf00      	nop

08100e18 <__aeabi_d2ulz>:
 8100e18:	b5d0      	push	{r4, r6, r7, lr}
 8100e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8100e4c <__aeabi_d2ulz+0x34>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	4606      	mov	r6, r0
 8100e20:	460f      	mov	r7, r1
 8100e22:	f7ff fc81 	bl	8100728 <__aeabi_dmul>
 8100e26:	f7ff ff57 	bl	8100cd8 <__aeabi_d2uiz>
 8100e2a:	4604      	mov	r4, r0
 8100e2c:	f7ff fc02 	bl	8100634 <__aeabi_ui2d>
 8100e30:	4b07      	ldr	r3, [pc, #28]	@ (8100e50 <__aeabi_d2ulz+0x38>)
 8100e32:	2200      	movs	r2, #0
 8100e34:	f7ff fc78 	bl	8100728 <__aeabi_dmul>
 8100e38:	4602      	mov	r2, r0
 8100e3a:	460b      	mov	r3, r1
 8100e3c:	4630      	mov	r0, r6
 8100e3e:	4639      	mov	r1, r7
 8100e40:	f7ff faba 	bl	81003b8 <__aeabi_dsub>
 8100e44:	f7ff ff48 	bl	8100cd8 <__aeabi_d2uiz>
 8100e48:	4621      	mov	r1, r4
 8100e4a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e4c:	3df00000 	.word	0x3df00000
 8100e50:	41f00000 	.word	0x41f00000

08100e54 <__udivmoddi4>:
 8100e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e58:	9d08      	ldr	r5, [sp, #32]
 8100e5a:	460c      	mov	r4, r1
 8100e5c:	2b00      	cmp	r3, #0
 8100e5e:	d14e      	bne.n	8100efe <__udivmoddi4+0xaa>
 8100e60:	4694      	mov	ip, r2
 8100e62:	458c      	cmp	ip, r1
 8100e64:	4686      	mov	lr, r0
 8100e66:	fab2 f282 	clz	r2, r2
 8100e6a:	d962      	bls.n	8100f32 <__udivmoddi4+0xde>
 8100e6c:	b14a      	cbz	r2, 8100e82 <__udivmoddi4+0x2e>
 8100e6e:	f1c2 0320 	rsb	r3, r2, #32
 8100e72:	4091      	lsls	r1, r2
 8100e74:	fa20 f303 	lsr.w	r3, r0, r3
 8100e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e7c:	4319      	orrs	r1, r3
 8100e7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e86:	fa1f f68c 	uxth.w	r6, ip
 8100e8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e92:	fb07 1114 	mls	r1, r7, r4, r1
 8100e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e9a:	fb04 f106 	mul.w	r1, r4, r6
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	d90a      	bls.n	8100eb8 <__udivmoddi4+0x64>
 8100ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8100ea6:	f104 30ff 	add.w	r0, r4, #4294967295
 8100eaa:	f080 8112 	bcs.w	81010d2 <__udivmoddi4+0x27e>
 8100eae:	4299      	cmp	r1, r3
 8100eb0:	f240 810f 	bls.w	81010d2 <__udivmoddi4+0x27e>
 8100eb4:	3c02      	subs	r4, #2
 8100eb6:	4463      	add	r3, ip
 8100eb8:	1a59      	subs	r1, r3, r1
 8100eba:	fa1f f38e 	uxth.w	r3, lr
 8100ebe:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ec2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eca:	fb00 f606 	mul.w	r6, r0, r6
 8100ece:	429e      	cmp	r6, r3
 8100ed0:	d90a      	bls.n	8100ee8 <__udivmoddi4+0x94>
 8100ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8100ed6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eda:	f080 80fc 	bcs.w	81010d6 <__udivmoddi4+0x282>
 8100ede:	429e      	cmp	r6, r3
 8100ee0:	f240 80f9 	bls.w	81010d6 <__udivmoddi4+0x282>
 8100ee4:	4463      	add	r3, ip
 8100ee6:	3802      	subs	r0, #2
 8100ee8:	1b9b      	subs	r3, r3, r6
 8100eea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100eee:	2100      	movs	r1, #0
 8100ef0:	b11d      	cbz	r5, 8100efa <__udivmoddi4+0xa6>
 8100ef2:	40d3      	lsrs	r3, r2
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	e9c5 3200 	strd	r3, r2, [r5]
 8100efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d905      	bls.n	8100f0e <__udivmoddi4+0xba>
 8100f02:	b10d      	cbz	r5, 8100f08 <__udivmoddi4+0xb4>
 8100f04:	e9c5 0100 	strd	r0, r1, [r5]
 8100f08:	2100      	movs	r1, #0
 8100f0a:	4608      	mov	r0, r1
 8100f0c:	e7f5      	b.n	8100efa <__udivmoddi4+0xa6>
 8100f0e:	fab3 f183 	clz	r1, r3
 8100f12:	2900      	cmp	r1, #0
 8100f14:	d146      	bne.n	8100fa4 <__udivmoddi4+0x150>
 8100f16:	42a3      	cmp	r3, r4
 8100f18:	d302      	bcc.n	8100f20 <__udivmoddi4+0xcc>
 8100f1a:	4290      	cmp	r0, r2
 8100f1c:	f0c0 80f0 	bcc.w	8101100 <__udivmoddi4+0x2ac>
 8100f20:	1a86      	subs	r6, r0, r2
 8100f22:	eb64 0303 	sbc.w	r3, r4, r3
 8100f26:	2001      	movs	r0, #1
 8100f28:	2d00      	cmp	r5, #0
 8100f2a:	d0e6      	beq.n	8100efa <__udivmoddi4+0xa6>
 8100f2c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f30:	e7e3      	b.n	8100efa <__udivmoddi4+0xa6>
 8100f32:	2a00      	cmp	r2, #0
 8100f34:	f040 8090 	bne.w	8101058 <__udivmoddi4+0x204>
 8100f38:	eba1 040c 	sub.w	r4, r1, ip
 8100f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f40:	fa1f f78c 	uxth.w	r7, ip
 8100f44:	2101      	movs	r1, #1
 8100f46:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f4e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f56:	fb07 f006 	mul.w	r0, r7, r6
 8100f5a:	4298      	cmp	r0, r3
 8100f5c:	d908      	bls.n	8100f70 <__udivmoddi4+0x11c>
 8100f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f62:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f66:	d202      	bcs.n	8100f6e <__udivmoddi4+0x11a>
 8100f68:	4298      	cmp	r0, r3
 8100f6a:	f200 80cd 	bhi.w	8101108 <__udivmoddi4+0x2b4>
 8100f6e:	4626      	mov	r6, r4
 8100f70:	1a1c      	subs	r4, r3, r0
 8100f72:	fa1f f38e 	uxth.w	r3, lr
 8100f76:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f7a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f82:	fb00 f707 	mul.w	r7, r0, r7
 8100f86:	429f      	cmp	r7, r3
 8100f88:	d908      	bls.n	8100f9c <__udivmoddi4+0x148>
 8100f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f92:	d202      	bcs.n	8100f9a <__udivmoddi4+0x146>
 8100f94:	429f      	cmp	r7, r3
 8100f96:	f200 80b0 	bhi.w	81010fa <__udivmoddi4+0x2a6>
 8100f9a:	4620      	mov	r0, r4
 8100f9c:	1bdb      	subs	r3, r3, r7
 8100f9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fa2:	e7a5      	b.n	8100ef0 <__udivmoddi4+0x9c>
 8100fa4:	f1c1 0620 	rsb	r6, r1, #32
 8100fa8:	408b      	lsls	r3, r1
 8100faa:	fa22 f706 	lsr.w	r7, r2, r6
 8100fae:	431f      	orrs	r7, r3
 8100fb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8100fb4:	fa04 f301 	lsl.w	r3, r4, r1
 8100fb8:	ea43 030c 	orr.w	r3, r3, ip
 8100fbc:	40f4      	lsrs	r4, r6
 8100fbe:	fa00 f801 	lsl.w	r8, r0, r1
 8100fc2:	0c38      	lsrs	r0, r7, #16
 8100fc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fc8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fcc:	fa1f fc87 	uxth.w	ip, r7
 8100fd0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fd8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fdc:	45a1      	cmp	r9, r4
 8100fde:	fa02 f201 	lsl.w	r2, r2, r1
 8100fe2:	d90a      	bls.n	8100ffa <__udivmoddi4+0x1a6>
 8100fe4:	193c      	adds	r4, r7, r4
 8100fe6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fea:	f080 8084 	bcs.w	81010f6 <__udivmoddi4+0x2a2>
 8100fee:	45a1      	cmp	r9, r4
 8100ff0:	f240 8081 	bls.w	81010f6 <__udivmoddi4+0x2a2>
 8100ff4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100ff8:	443c      	add	r4, r7
 8100ffa:	eba4 0409 	sub.w	r4, r4, r9
 8100ffe:	fa1f f983 	uxth.w	r9, r3
 8101002:	fbb4 f3f0 	udiv	r3, r4, r0
 8101006:	fb00 4413 	mls	r4, r0, r3, r4
 810100a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810100e:	fb03 fc0c 	mul.w	ip, r3, ip
 8101012:	45a4      	cmp	ip, r4
 8101014:	d907      	bls.n	8101026 <__udivmoddi4+0x1d2>
 8101016:	193c      	adds	r4, r7, r4
 8101018:	f103 30ff 	add.w	r0, r3, #4294967295
 810101c:	d267      	bcs.n	81010ee <__udivmoddi4+0x29a>
 810101e:	45a4      	cmp	ip, r4
 8101020:	d965      	bls.n	81010ee <__udivmoddi4+0x29a>
 8101022:	3b02      	subs	r3, #2
 8101024:	443c      	add	r4, r7
 8101026:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810102a:	fba0 9302 	umull	r9, r3, r0, r2
 810102e:	eba4 040c 	sub.w	r4, r4, ip
 8101032:	429c      	cmp	r4, r3
 8101034:	46ce      	mov	lr, r9
 8101036:	469c      	mov	ip, r3
 8101038:	d351      	bcc.n	81010de <__udivmoddi4+0x28a>
 810103a:	d04e      	beq.n	81010da <__udivmoddi4+0x286>
 810103c:	b155      	cbz	r5, 8101054 <__udivmoddi4+0x200>
 810103e:	ebb8 030e 	subs.w	r3, r8, lr
 8101042:	eb64 040c 	sbc.w	r4, r4, ip
 8101046:	fa04 f606 	lsl.w	r6, r4, r6
 810104a:	40cb      	lsrs	r3, r1
 810104c:	431e      	orrs	r6, r3
 810104e:	40cc      	lsrs	r4, r1
 8101050:	e9c5 6400 	strd	r6, r4, [r5]
 8101054:	2100      	movs	r1, #0
 8101056:	e750      	b.n	8100efa <__udivmoddi4+0xa6>
 8101058:	f1c2 0320 	rsb	r3, r2, #32
 810105c:	fa20 f103 	lsr.w	r1, r0, r3
 8101060:	fa0c fc02 	lsl.w	ip, ip, r2
 8101064:	fa24 f303 	lsr.w	r3, r4, r3
 8101068:	4094      	lsls	r4, r2
 810106a:	430c      	orrs	r4, r1
 810106c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101070:	fa00 fe02 	lsl.w	lr, r0, r2
 8101074:	fa1f f78c 	uxth.w	r7, ip
 8101078:	fbb3 f0f8 	udiv	r0, r3, r8
 810107c:	fb08 3110 	mls	r1, r8, r0, r3
 8101080:	0c23      	lsrs	r3, r4, #16
 8101082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101086:	fb00 f107 	mul.w	r1, r0, r7
 810108a:	4299      	cmp	r1, r3
 810108c:	d908      	bls.n	81010a0 <__udivmoddi4+0x24c>
 810108e:	eb1c 0303 	adds.w	r3, ip, r3
 8101092:	f100 36ff 	add.w	r6, r0, #4294967295
 8101096:	d22c      	bcs.n	81010f2 <__udivmoddi4+0x29e>
 8101098:	4299      	cmp	r1, r3
 810109a:	d92a      	bls.n	81010f2 <__udivmoddi4+0x29e>
 810109c:	3802      	subs	r0, #2
 810109e:	4463      	add	r3, ip
 81010a0:	1a5b      	subs	r3, r3, r1
 81010a2:	b2a4      	uxth	r4, r4
 81010a4:	fbb3 f1f8 	udiv	r1, r3, r8
 81010a8:	fb08 3311 	mls	r3, r8, r1, r3
 81010ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 81010b0:	fb01 f307 	mul.w	r3, r1, r7
 81010b4:	42a3      	cmp	r3, r4
 81010b6:	d908      	bls.n	81010ca <__udivmoddi4+0x276>
 81010b8:	eb1c 0404 	adds.w	r4, ip, r4
 81010bc:	f101 36ff 	add.w	r6, r1, #4294967295
 81010c0:	d213      	bcs.n	81010ea <__udivmoddi4+0x296>
 81010c2:	42a3      	cmp	r3, r4
 81010c4:	d911      	bls.n	81010ea <__udivmoddi4+0x296>
 81010c6:	3902      	subs	r1, #2
 81010c8:	4464      	add	r4, ip
 81010ca:	1ae4      	subs	r4, r4, r3
 81010cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010d0:	e739      	b.n	8100f46 <__udivmoddi4+0xf2>
 81010d2:	4604      	mov	r4, r0
 81010d4:	e6f0      	b.n	8100eb8 <__udivmoddi4+0x64>
 81010d6:	4608      	mov	r0, r1
 81010d8:	e706      	b.n	8100ee8 <__udivmoddi4+0x94>
 81010da:	45c8      	cmp	r8, r9
 81010dc:	d2ae      	bcs.n	810103c <__udivmoddi4+0x1e8>
 81010de:	ebb9 0e02 	subs.w	lr, r9, r2
 81010e2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010e6:	3801      	subs	r0, #1
 81010e8:	e7a8      	b.n	810103c <__udivmoddi4+0x1e8>
 81010ea:	4631      	mov	r1, r6
 81010ec:	e7ed      	b.n	81010ca <__udivmoddi4+0x276>
 81010ee:	4603      	mov	r3, r0
 81010f0:	e799      	b.n	8101026 <__udivmoddi4+0x1d2>
 81010f2:	4630      	mov	r0, r6
 81010f4:	e7d4      	b.n	81010a0 <__udivmoddi4+0x24c>
 81010f6:	46d6      	mov	lr, sl
 81010f8:	e77f      	b.n	8100ffa <__udivmoddi4+0x1a6>
 81010fa:	4463      	add	r3, ip
 81010fc:	3802      	subs	r0, #2
 81010fe:	e74d      	b.n	8100f9c <__udivmoddi4+0x148>
 8101100:	4606      	mov	r6, r0
 8101102:	4623      	mov	r3, r4
 8101104:	4608      	mov	r0, r1
 8101106:	e70f      	b.n	8100f28 <__udivmoddi4+0xd4>
 8101108:	3e02      	subs	r6, #2
 810110a:	4463      	add	r3, ip
 810110c:	e730      	b.n	8100f70 <__udivmoddi4+0x11c>
 810110e:	bf00      	nop

08101110 <__aeabi_idiv0>:
 8101110:	4770      	bx	lr
 8101112:	bf00      	nop

08101114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101114:	b480      	push	{r7}
 8101116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101118:	4b09      	ldr	r3, [pc, #36]	@ (8101140 <SystemInit+0x2c>)
 810111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810111e:	4a08      	ldr	r2, [pc, #32]	@ (8101140 <SystemInit+0x2c>)
 8101120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101128:	4b05      	ldr	r3, [pc, #20]	@ (8101140 <SystemInit+0x2c>)
 810112a:	691b      	ldr	r3, [r3, #16]
 810112c:	4a04      	ldr	r2, [pc, #16]	@ (8101140 <SystemInit+0x2c>)
 810112e:	f043 0310 	orr.w	r3, r3, #16
 8101132:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101134:	bf00      	nop
 8101136:	46bd      	mov	sp, r7
 8101138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810113c:	4770      	bx	lr
 810113e:	bf00      	nop
 8101140:	e000ed00 	.word	0xe000ed00

08101144 <CAN_SendData>:
#include "can.h"

HAL_StatusTypeDef CAN_SendData(FDCAN_HandleTypeDef* can, uint32_t id, uint8_t *data, uint8_t len) {
 8101144:	b580      	push	{r7, lr}
 8101146:	b08e      	sub	sp, #56	@ 0x38
 8101148:	af00      	add	r7, sp, #0
 810114a:	60f8      	str	r0, [r7, #12]
 810114c:	60b9      	str	r1, [r7, #8]
 810114e:	607a      	str	r2, [r7, #4]
 8101150:	70fb      	strb	r3, [r7, #3]
	FDCAN_TxHeaderTypeDef txHeader;

	// Configure CAN header
	txHeader.Identifier = id;
 8101152:	68bb      	ldr	r3, [r7, #8]
 8101154:	617b      	str	r3, [r7, #20]
	txHeader.IdType = FDCAN_STANDARD_ID;
 8101156:	2300      	movs	r3, #0
 8101158:	61bb      	str	r3, [r7, #24]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 810115a:	2300      	movs	r3, #0
 810115c:	61fb      	str	r3, [r7, #28]
	txHeader.DataLength = FDCAN_DLC_BYTES_8;
 810115e:	2308      	movs	r3, #8
 8101160:	623b      	str	r3, [r7, #32]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8101162:	2300      	movs	r3, #0
 8101164:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8101166:	2300      	movs	r3, #0
 8101168:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 810116a:	2300      	movs	r3, #0
 810116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 810116e:	2300      	movs	r3, #0
 8101170:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.MessageMarker = 0;
 8101172:	2300      	movs	r3, #0
 8101174:	637b      	str	r3, [r7, #52]	@ 0x34

	// Transmit the CAN message
	return HAL_FDCAN_AddMessageToTxFifoQ(can, &txHeader, data);
 8101176:	f107 0314 	add.w	r3, r7, #20
 810117a:	687a      	ldr	r2, [r7, #4]
 810117c:	4619      	mov	r1, r3
 810117e:	68f8      	ldr	r0, [r7, #12]
 8101180:	f003 fe19 	bl	8104db6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8101184:	4603      	mov	r3, r0
}
 8101186:	4618      	mov	r0, r3
 8101188:	3738      	adds	r7, #56	@ 0x38
 810118a:	46bd      	mov	sp, r7
 810118c:	bd80      	pop	{r7, pc}

0810118e <SendMotorCommand>:

void SendMotorCommand(FDCAN_HandleTypeDef* can, uint16_t torque, uint16_t speed, uint8_t direction, uint8_t inverter_en, uint16_t torque_limit)
{
 810118e:	b580      	push	{r7, lr}
 8101190:	b086      	sub	sp, #24
 8101192:	af00      	add	r7, sp, #0
 8101194:	60f8      	str	r0, [r7, #12]
 8101196:	4608      	mov	r0, r1
 8101198:	4611      	mov	r1, r2
 810119a:	461a      	mov	r2, r3
 810119c:	4603      	mov	r3, r0
 810119e:	817b      	strh	r3, [r7, #10]
 81011a0:	460b      	mov	r3, r1
 81011a2:	813b      	strh	r3, [r7, #8]
 81011a4:	4613      	mov	r3, r2
 81011a6:	71fb      	strb	r3, [r7, #7]
    uint8_t motorData[8] = {0};
 81011a8:	2300      	movs	r3, #0
 81011aa:	613b      	str	r3, [r7, #16]
 81011ac:	2300      	movs	r3, #0
 81011ae:	617b      	str	r3, [r7, #20]

    motorData[0] = torque;
 81011b0:	897b      	ldrh	r3, [r7, #10]
 81011b2:	b2db      	uxtb	r3, r3
 81011b4:	743b      	strb	r3, [r7, #16]
    motorData[1] = torque >> 8;
 81011b6:	897b      	ldrh	r3, [r7, #10]
 81011b8:	0a1b      	lsrs	r3, r3, #8
 81011ba:	b29b      	uxth	r3, r3
 81011bc:	b2db      	uxtb	r3, r3
 81011be:	747b      	strb	r3, [r7, #17]
    motorData[2] = speed;
 81011c0:	893b      	ldrh	r3, [r7, #8]
 81011c2:	b2db      	uxtb	r3, r3
 81011c4:	74bb      	strb	r3, [r7, #18]
    motorData[3] = speed >> 8;
 81011c6:	893b      	ldrh	r3, [r7, #8]
 81011c8:	0a1b      	lsrs	r3, r3, #8
 81011ca:	b29b      	uxth	r3, r3
 81011cc:	b2db      	uxtb	r3, r3
 81011ce:	74fb      	strb	r3, [r7, #19]
    motorData[4] = direction;
 81011d0:	79fb      	ldrb	r3, [r7, #7]
 81011d2:	753b      	strb	r3, [r7, #20]
    motorData[5] = inverter_en;
 81011d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 81011d8:	757b      	strb	r3, [r7, #21]
    motorData[6] = torque_limit;
 81011da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81011dc:	b2db      	uxtb	r3, r3
 81011de:	75bb      	strb	r3, [r7, #22]
    motorData[7] = torque_limit >> 8;
 81011e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81011e2:	0a1b      	lsrs	r3, r3, #8
 81011e4:	b29b      	uxth	r3, r3
 81011e6:	b2db      	uxtb	r3, r3
 81011e8:	75fb      	strb	r3, [r7, #23]


    if (CAN_SendData(can, MOTOR_CONTROLLER_CAN_ADDRESS, motorData, 8) != HAL_OK)
 81011ea:	f107 0210 	add.w	r2, r7, #16
 81011ee:	2308      	movs	r3, #8
 81011f0:	21c0      	movs	r1, #192	@ 0xc0
 81011f2:	68f8      	ldr	r0, [r7, #12]
 81011f4:	f7ff ffa6 	bl	8101144 <CAN_SendData>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d001      	beq.n	8101202 <SendMotorCommand+0x74>
    {
        Error_Handler();
 81011fe:	f000 fdf6 	bl	8101dee <Error_Handler>
    }
}
 8101202:	bf00      	nop
 8101204:	3718      	adds	r7, #24
 8101206:	46bd      	mov	sp, r7
 8101208:	bd80      	pop	{r7, pc}

0810120a <SendSensorReading01>:

void SendSensorReading01(FDCAN_HandleTypeDef* can, uint32_t adc_value)
{
 810120a:	b580      	push	{r7, lr}
 810120c:	b084      	sub	sp, #16
 810120e:	af00      	add	r7, sp, #0
 8101210:	6078      	str	r0, [r7, #4]
 8101212:	6039      	str	r1, [r7, #0]
    uint8_t adcData[6] = {0};
 8101214:	2300      	movs	r3, #0
 8101216:	60bb      	str	r3, [r7, #8]
 8101218:	2300      	movs	r3, #0
 810121a:	81bb      	strh	r3, [r7, #12]

    adcData[0] = 0; //
 810121c:	2300      	movs	r3, #0
 810121e:	723b      	strb	r3, [r7, #8]
    adcData[1] = 0; //
 8101220:	2300      	movs	r3, #0
 8101222:	727b      	strb	r3, [r7, #9]
    adcData[2] = adc_value; // TPS1 Voltage
 8101224:	683b      	ldr	r3, [r7, #0]
 8101226:	b2db      	uxtb	r3, r3
 8101228:	72bb      	strb	r3, [r7, #10]
    adcData[3] = adc_value >> 8; // TPS1 Voltage
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	0a1b      	lsrs	r3, r3, #8
 810122e:	b2db      	uxtb	r3, r3
 8101230:	72fb      	strb	r3, [r7, #11]
    adcData[4] = adc_value >> 16; // TPS1 Voltage
 8101232:	683b      	ldr	r3, [r7, #0]
 8101234:	0c1b      	lsrs	r3, r3, #16
 8101236:	b2db      	uxtb	r3, r3
 8101238:	733b      	strb	r3, [r7, #12]
    adcData[5] = adc_value >> 24; // TPS1 Voltage
 810123a:	683b      	ldr	r3, [r7, #0]
 810123c:	0e1b      	lsrs	r3, r3, #24
 810123e:	b2db      	uxtb	r3, r3
 8101240:	737b      	strb	r3, [r7, #13]



    if (CAN_SendData(can, TPS1_CAN_ADDRESS, adcData, 6) != HAL_OK)
 8101242:	f107 0208 	add.w	r2, r7, #8
 8101246:	2306      	movs	r3, #6
 8101248:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 810124c:	6878      	ldr	r0, [r7, #4]
 810124e:	f7ff ff79 	bl	8101144 <CAN_SendData>
 8101252:	4603      	mov	r3, r0
 8101254:	2b00      	cmp	r3, #0
 8101256:	d001      	beq.n	810125c <SendSensorReading01+0x52>
    {
        Error_Handler();
 8101258:	f000 fdc9 	bl	8101dee <Error_Handler>
    }
}
 810125c:	bf00      	nop
 810125e:	3710      	adds	r7, #16
 8101260:	46bd      	mov	sp, r7
 8101262:	bd80      	pop	{r7, pc}

08101264 <bufferPut>:
int readIndx  = 0;
uint32_t buffer[BUFFER_SIZE];


int bufferPut(uint32_t item)
{
 8101264:	b480      	push	{r7}
 8101266:	b083      	sub	sp, #12
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
	if ((writeIndx + 1) % BUFFER_SIZE == readIndx)
 810126c:	4b18      	ldr	r3, [pc, #96]	@ (81012d0 <bufferPut+0x6c>)
 810126e:	681b      	ldr	r3, [r3, #0]
 8101270:	1c59      	adds	r1, r3, #1
 8101272:	4b18      	ldr	r3, [pc, #96]	@ (81012d4 <bufferPut+0x70>)
 8101274:	fb83 2301 	smull	r2, r3, r3, r1
 8101278:	109a      	asrs	r2, r3, #2
 810127a:	17cb      	asrs	r3, r1, #31
 810127c:	1ad2      	subs	r2, r2, r3
 810127e:	4613      	mov	r3, r2
 8101280:	009b      	lsls	r3, r3, #2
 8101282:	4413      	add	r3, r2
 8101284:	005b      	lsls	r3, r3, #1
 8101286:	1aca      	subs	r2, r1, r3
 8101288:	4b13      	ldr	r3, [pc, #76]	@ (81012d8 <bufferPut+0x74>)
 810128a:	681b      	ldr	r3, [r3, #0]
 810128c:	429a      	cmp	r2, r3
 810128e:	d101      	bne.n	8101294 <bufferPut+0x30>
	{
		// buffer is full, avoid overflow
		return 0;
 8101290:	2300      	movs	r3, #0
 8101292:	e016      	b.n	81012c2 <bufferPut+0x5e>
	}
	buffer[writeIndx] = item;
 8101294:	4b0e      	ldr	r3, [pc, #56]	@ (81012d0 <bufferPut+0x6c>)
 8101296:	681b      	ldr	r3, [r3, #0]
 8101298:	4910      	ldr	r1, [pc, #64]	@ (81012dc <bufferPut+0x78>)
 810129a:	687a      	ldr	r2, [r7, #4]
 810129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeIndx = (writeIndx + 1) % BUFFER_SIZE;
 81012a0:	4b0b      	ldr	r3, [pc, #44]	@ (81012d0 <bufferPut+0x6c>)
 81012a2:	681b      	ldr	r3, [r3, #0]
 81012a4:	1c59      	adds	r1, r3, #1
 81012a6:	4b0b      	ldr	r3, [pc, #44]	@ (81012d4 <bufferPut+0x70>)
 81012a8:	fb83 2301 	smull	r2, r3, r3, r1
 81012ac:	109a      	asrs	r2, r3, #2
 81012ae:	17cb      	asrs	r3, r1, #31
 81012b0:	1ad2      	subs	r2, r2, r3
 81012b2:	4613      	mov	r3, r2
 81012b4:	009b      	lsls	r3, r3, #2
 81012b6:	4413      	add	r3, r2
 81012b8:	005b      	lsls	r3, r3, #1
 81012ba:	1aca      	subs	r2, r1, r3
 81012bc:	4b04      	ldr	r3, [pc, #16]	@ (81012d0 <bufferPut+0x6c>)
 81012be:	601a      	str	r2, [r3, #0]
	return 1;
 81012c0:	2301      	movs	r3, #1
}
 81012c2:	4618      	mov	r0, r3
 81012c4:	370c      	adds	r7, #12
 81012c6:	46bd      	mov	sp, r7
 81012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012cc:	4770      	bx	lr
 81012ce:	bf00      	nop
 81012d0:	100002b4 	.word	0x100002b4
 81012d4:	66666667 	.word	0x66666667
 81012d8:	100002b8 	.word	0x100002b8
 81012dc:	100002bc 	.word	0x100002bc

081012e0 <bufferGet>:
int bufferGet(uint32_t * value)
{
 81012e0:	b480      	push	{r7}
 81012e2:	b083      	sub	sp, #12
 81012e4:	af00      	add	r7, sp, #0
 81012e6:	6078      	str	r0, [r7, #4]
	if (readIndx == writeIndx)
 81012e8:	4b12      	ldr	r3, [pc, #72]	@ (8101334 <bufferGet+0x54>)
 81012ea:	681a      	ldr	r2, [r3, #0]
 81012ec:	4b12      	ldr	r3, [pc, #72]	@ (8101338 <bufferGet+0x58>)
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	429a      	cmp	r2, r3
 81012f2:	d101      	bne.n	81012f8 <bufferGet+0x18>
	{
		// buffer is empty
		return 0;
 81012f4:	2300      	movs	r3, #0
 81012f6:	e017      	b.n	8101328 <bufferGet+0x48>
	}

	*value = buffer[readIndx];
 81012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8101334 <bufferGet+0x54>)
 81012fa:	681b      	ldr	r3, [r3, #0]
 81012fc:	4a0f      	ldr	r2, [pc, #60]	@ (810133c <bufferGet+0x5c>)
 81012fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	601a      	str	r2, [r3, #0]
	readIndx = (readIndx + 1) % BUFFER_SIZE;
 8101306:	4b0b      	ldr	r3, [pc, #44]	@ (8101334 <bufferGet+0x54>)
 8101308:	681b      	ldr	r3, [r3, #0]
 810130a:	1c59      	adds	r1, r3, #1
 810130c:	4b0c      	ldr	r3, [pc, #48]	@ (8101340 <bufferGet+0x60>)
 810130e:	fb83 2301 	smull	r2, r3, r3, r1
 8101312:	109a      	asrs	r2, r3, #2
 8101314:	17cb      	asrs	r3, r1, #31
 8101316:	1ad2      	subs	r2, r2, r3
 8101318:	4613      	mov	r3, r2
 810131a:	009b      	lsls	r3, r3, #2
 810131c:	4413      	add	r3, r2
 810131e:	005b      	lsls	r3, r3, #1
 8101320:	1aca      	subs	r2, r1, r3
 8101322:	4b04      	ldr	r3, [pc, #16]	@ (8101334 <bufferGet+0x54>)
 8101324:	601a      	str	r2, [r3, #0]
	return 1;
 8101326:	2301      	movs	r3, #1
}
 8101328:	4618      	mov	r0, r3
 810132a:	370c      	adds	r7, #12
 810132c:	46bd      	mov	sp, r7
 810132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101332:	4770      	bx	lr
 8101334:	100002b8 	.word	0x100002b8
 8101338:	100002b4 	.word	0x100002b4
 810133c:	100002bc 	.word	0x100002bc
 8101340:	66666667 	.word	0x66666667

08101344 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	b086      	sub	sp, #24
 8101348:	af02      	add	r7, sp, #8
 810134a:	60f8      	str	r0, [r7, #12]
 810134c:	60b9      	str	r1, [r7, #8]
 810134e:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8101350:	68fb      	ldr	r3, [r7, #12]
 8101352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101358:	d101      	bne.n	810135e <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 810135a:	4b09      	ldr	r3, [pc, #36]	@ (8101380 <rpmsg_send+0x3c>)
 810135c:	e00c      	b.n	8101378 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8101362:	68fb      	ldr	r3, [r7, #12]
 8101364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101366:	2301      	movs	r3, #1
 8101368:	9301      	str	r3, [sp, #4]
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	9300      	str	r3, [sp, #0]
 810136e:	68bb      	ldr	r3, [r7, #8]
 8101370:	68f8      	ldr	r0, [r7, #12]
 8101372:	f00f fa7f 	bl	8110874 <rpmsg_send_offchannel_raw>
 8101376:	4603      	mov	r3, r0
					 len, true);
}
 8101378:	4618      	mov	r0, r3
 810137a:	3710      	adds	r7, #16
 810137c:	46bd      	mov	sp, r7
 810137e:	bd80      	pop	{r7, pc}
 8101380:	fffff829 	.word	0xfffff829

08101384 <HAL_FDCAN_RxFifo0Callback>:
FDCAN_TxHeaderTypeDef txHeader;
FDCAN_RxHeaderTypeDef rxHeader;
uint8_t txData[8];
uint8_t rxData[8];
uint32_t count = 0;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8101384:	b580      	push	{r7, lr}
 8101386:	b082      	sub	sp, #8
 8101388:	af00      	add	r7, sp, #0
 810138a:	6078      	str	r0, [r7, #4]
 810138c:	6039      	str	r1, [r7, #0]

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) //if new data
 810138e:	683b      	ldr	r3, [r7, #0]
 8101390:	f003 0301 	and.w	r3, r3, #1
 8101394:	2b00      	cmp	r3, #0
 8101396:	d019      	beq.n	81013cc <HAL_FDCAN_RxFifo0Callback+0x48>
			{
		count++;
 8101398:	4b0e      	ldr	r3, [pc, #56]	@ (81013d4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 810139a:	681b      	ldr	r3, [r3, #0]
 810139c:	3301      	adds	r3, #1
 810139e:	4a0d      	ldr	r2, [pc, #52]	@ (81013d4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 81013a0:	6013      	str	r3, [r2, #0]
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData)
 81013a2:	4b0d      	ldr	r3, [pc, #52]	@ (81013d8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 81013a4:	4a0d      	ldr	r2, [pc, #52]	@ (81013dc <HAL_FDCAN_RxFifo0Callback+0x58>)
 81013a6:	2140      	movs	r1, #64	@ 0x40
 81013a8:	6878      	ldr	r0, [r7, #4]
 81013aa:	f003 fd5f 	bl	8104e6c <HAL_FDCAN_GetRxMessage>
 81013ae:	4603      	mov	r3, r0
 81013b0:	2b00      	cmp	r3, #0
 81013b2:	d001      	beq.n	81013b8 <HAL_FDCAN_RxFifo0Callback+0x34>
				!= HAL_OK) {
			Error_Handler();
 81013b4:	f000 fd1b 	bl	8101dee <Error_Handler>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan,
 81013b8:	2200      	movs	r2, #0
 81013ba:	2101      	movs	r1, #1
 81013bc:	6878      	ldr	r0, [r7, #4]
 81013be:	f003 ff11 	bl	81051e4 <HAL_FDCAN_ActivateNotification>
 81013c2:	4603      	mov	r3, r0
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d001      	beq.n	81013cc <HAL_FDCAN_RxFifo0Callback+0x48>
		FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
			Error_Handler();
 81013c8:	f000 fd11 	bl	8101dee <Error_Handler>
		}
	}
}
 81013cc:	bf00      	nop
 81013ce:	3708      	adds	r7, #8
 81013d0:	46bd      	mov	sp, r7
 81013d2:	bd80      	pop	{r7, pc}
 81013d4:	10000528 	.word	0x10000528
 81013d8:	10000520 	.word	0x10000520
 81013dc:	100004f8 	.word	0x100004f8

081013e0 <rpmsg_recv_callback>:

static struct rpmsg_endpoint rp_endpoint;
uint32_t message = 0;

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *prv) {
 81013e0:	b580      	push	{r7, lr}
 81013e2:	b086      	sub	sp, #24
 81013e4:	af00      	add	r7, sp, #0
 81013e6:	60f8      	str	r0, [r7, #12]
 81013e8:	60b9      	str	r1, [r7, #8]
 81013ea:	607a      	str	r2, [r7, #4]
 81013ec:	603b      	str	r3, [r7, #0]
	DataIdentifier *id = (DataIdentifier*) data;
 81013ee:	68bb      	ldr	r3, [r7, #8]
 81013f0:	617b      	str	r3, [r7, #20]
	if (*id == TORQUE_SENSOR) {
 81013f2:	697b      	ldr	r3, [r7, #20]
 81013f4:	781b      	ldrb	r3, [r3, #0]
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d102      	bne.n	8101400 <rpmsg_recv_callback+0x20>
		test = (TorqueEncoder*) data;
 81013fa:	4a0c      	ldr	r2, [pc, #48]	@ (810142c <rpmsg_recv_callback+0x4c>)
 81013fc:	68bb      	ldr	r3, [r7, #8]
 81013fe:	6013      	str	r3, [r2, #0]
	}

//	received_data = test->valueInt; //testing struct(it works)

	if (osSemaphoreRelease(txSemaphoreHandle) != osOK)
 8101400:	4b0b      	ldr	r3, [pc, #44]	@ (8101430 <rpmsg_recv_callback+0x50>)
 8101402:	681b      	ldr	r3, [r3, #0]
 8101404:	4618      	mov	r0, r3
 8101406:	f00a ff67 	bl	810c2d8 <osSemaphoreRelease>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d001      	beq.n	8101414 <rpmsg_recv_callback+0x34>
		Error_Handler();	//free semaphore whenever there is a msg received
 8101410:	f000 fced 	bl	8101dee <Error_Handler>
	xTaskNotifyGive(sendCANTaskHandle); // Notify sendCANTask to start
 8101414:	4b07      	ldr	r3, [pc, #28]	@ (8101434 <rpmsg_recv_callback+0x54>)
 8101416:	6818      	ldr	r0, [r3, #0]
 8101418:	2300      	movs	r3, #0
 810141a:	2202      	movs	r2, #2
 810141c:	2100      	movs	r1, #0
 810141e:	f00d fcf1 	bl	810ee04 <xTaskGenericNotify>

	return 0;
 8101422:	2300      	movs	r3, #0
}
 8101424:	4618      	mov	r0, r3
 8101426:	3718      	adds	r7, #24
 8101428:	46bd      	mov	sp, r7
 810142a:	bd80      	pop	{r7, pc}
 810142c:	1000052c 	.word	0x1000052c
 8101430:	100004f0 	.word	0x100004f0
 8101434:	100004ec 	.word	0x100004ec

08101438 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8101438:	b580      	push	{r7, lr}
 810143a:	b082      	sub	sp, #8
 810143c:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810143e:	4b3c      	ldr	r3, [pc, #240]	@ (8101530 <main+0xf8>)
 8101440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101444:	4a3a      	ldr	r2, [pc, #232]	@ (8101530 <main+0xf8>)
 8101446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810144e:	4b38      	ldr	r3, [pc, #224]	@ (8101530 <main+0xf8>)
 8101450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101458:	607b      	str	r3, [r7, #4]
 810145a:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810145c:	2001      	movs	r0, #1
 810145e:	f004 fe5b 	bl	8106118 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101462:	f004 feff 	bl	8106264 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101466:	2201      	movs	r2, #1
 8101468:	2102      	movs	r1, #2
 810146a:	2000      	movs	r0, #0
 810146c:	f004 fe80 	bl	8106170 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101470:	4b30      	ldr	r3, [pc, #192]	@ (8101534 <main+0xfc>)
 8101472:	681b      	ldr	r3, [r3, #0]
 8101474:	091b      	lsrs	r3, r3, #4
 8101476:	f003 030f 	and.w	r3, r3, #15
 810147a:	2b07      	cmp	r3, #7
 810147c:	d108      	bne.n	8101490 <main+0x58>
 810147e:	4b2e      	ldr	r3, [pc, #184]	@ (8101538 <main+0x100>)
 8101480:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101484:	4a2c      	ldr	r2, [pc, #176]	@ (8101538 <main+0x100>)
 8101486:	f043 0301 	orr.w	r3, r3, #1
 810148a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810148e:	e007      	b.n	81014a0 <main+0x68>
 8101490:	4b29      	ldr	r3, [pc, #164]	@ (8101538 <main+0x100>)
 8101492:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101496:	4a28      	ldr	r2, [pc, #160]	@ (8101538 <main+0x100>)
 8101498:	f043 0301 	orr.w	r3, r3, #1
 810149c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 81014a0:	f000 ffde 	bl	8102460 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 81014a4:	f000 fa30 	bl	8101908 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 81014a8:	f000 f9e2 	bl	8101870 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 81014ac:	f000 f86a 	bl	8101584 <MX_ADC1_Init>
	MX_FDCAN1_Init();
 81014b0:	f000 f95e 	bl	8101770 <MX_FDCAN1_Init>
	MX_ADC2_Init();
 81014b4:	f000 f8ea 	bl	810168c <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	//HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));	// wait for next data
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 81014b8:	2264      	movs	r2, #100	@ 0x64
 81014ba:	4920      	ldr	r1, [pc, #128]	@ (810153c <main+0x104>)
 81014bc:	4820      	ldr	r0, [pc, #128]	@ (8101540 <main+0x108>)
 81014be:	f00a fc56 	bl	810bd6e <HAL_UARTEx_ReceiveToIdle_IT>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 81014c2:	f00a fd37 	bl	810bf34 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of txSemaphore */
	txSemaphoreHandle = osSemaphoreNew(1, 1, &txSemaphore_attributes);
 81014c6:	4a1f      	ldr	r2, [pc, #124]	@ (8101544 <main+0x10c>)
 81014c8:	2101      	movs	r1, #1
 81014ca:	2001      	movs	r0, #1
 81014cc:	f00a fe29 	bl	810c122 <osSemaphoreNew>
 81014d0:	4603      	mov	r3, r0
 81014d2:	4a1d      	ldr	r2, [pc, #116]	@ (8101548 <main+0x110>)
 81014d4:	6013      	str	r3, [r2, #0]

	/* creation of readSensorSemaphore */
	readSensorSemaphoreHandle = osSemaphoreNew(1, 1,
 81014d6:	4a1d      	ldr	r2, [pc, #116]	@ (810154c <main+0x114>)
 81014d8:	2101      	movs	r1, #1
 81014da:	2001      	movs	r0, #1
 81014dc:	f00a fe21 	bl	810c122 <osSemaphoreNew>
 81014e0:	4603      	mov	r3, r0
 81014e2:	4a1b      	ldr	r2, [pc, #108]	@ (8101550 <main+0x118>)
 81014e4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 81014e6:	4a1b      	ldr	r2, [pc, #108]	@ (8101554 <main+0x11c>)
 81014e8:	2100      	movs	r1, #0
 81014ea:	481b      	ldr	r0, [pc, #108]	@ (8101558 <main+0x120>)
 81014ec:	f00a fd6c 	bl	810bfc8 <osThreadNew>
 81014f0:	4603      	mov	r3, r0
 81014f2:	4a1a      	ldr	r2, [pc, #104]	@ (810155c <main+0x124>)
 81014f4:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of txTask */
	txTaskHandle = osThreadNew(startTxTask, NULL, &txTask_attributes);
 81014f6:	4a1a      	ldr	r2, [pc, #104]	@ (8101560 <main+0x128>)
 81014f8:	2100      	movs	r1, #0
 81014fa:	481a      	ldr	r0, [pc, #104]	@ (8101564 <main+0x12c>)
 81014fc:	f00a fd64 	bl	810bfc8 <osThreadNew>
 8101500:	4603      	mov	r3, r0
 8101502:	4a19      	ldr	r2, [pc, #100]	@ (8101568 <main+0x130>)
 8101504:	6013      	str	r3, [r2, #0]

	/* creation of readSensors */
	readSensorsHandle = osThreadNew(startReadSensor, NULL,
 8101506:	4a19      	ldr	r2, [pc, #100]	@ (810156c <main+0x134>)
 8101508:	2100      	movs	r1, #0
 810150a:	4819      	ldr	r0, [pc, #100]	@ (8101570 <main+0x138>)
 810150c:	f00a fd5c 	bl	810bfc8 <osThreadNew>
 8101510:	4603      	mov	r3, r0
 8101512:	4a18      	ldr	r2, [pc, #96]	@ (8101574 <main+0x13c>)
 8101514:	6013      	str	r3, [r2, #0]
			&readSensors_attributes);

	/* creation of sendCANTask */
	sendCANTaskHandle = osThreadNew(startSendCAN, NULL,
 8101516:	4a18      	ldr	r2, [pc, #96]	@ (8101578 <main+0x140>)
 8101518:	2100      	movs	r1, #0
 810151a:	4818      	ldr	r0, [pc, #96]	@ (810157c <main+0x144>)
 810151c:	f00a fd54 	bl	810bfc8 <osThreadNew>
 8101520:	4603      	mov	r3, r0
 8101522:	4a17      	ldr	r2, [pc, #92]	@ (8101580 <main+0x148>)
 8101524:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8101526:	f00a fd29 	bl	810bf7c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 810152a:	bf00      	nop
 810152c:	e7fd      	b.n	810152a <main+0xf2>
 810152e:	bf00      	nop
 8101530:	58024400 	.word	0x58024400
 8101534:	e000ed00 	.word	0xe000ed00
 8101538:	58026400 	.word	0x58026400
 810153c:	10000530 	.word	0x10000530
 8101540:	1000044c 	.word	0x1000044c
 8101544:	081177a0 	.word	0x081177a0
 8101548:	100004f0 	.word	0x100004f0
 810154c:	081177b0 	.word	0x081177b0
 8101550:	100004f4 	.word	0x100004f4
 8101554:	08117710 	.word	0x08117710
 8101558:	08101a61 	.word	0x08101a61
 810155c:	100004e0 	.word	0x100004e0
 8101560:	08117734 	.word	0x08117734
 8101564:	08101ad5 	.word	0x08101ad5
 8101568:	100004e4 	.word	0x100004e4
 810156c:	08117758 	.word	0x08117758
 8101570:	08101bd5 	.word	0x08101bd5
 8101574:	100004e8 	.word	0x100004e8
 8101578:	0811777c 	.word	0x0811777c
 810157c:	08101c71 	.word	0x08101c71
 8101580:	100004ec 	.word	0x100004ec

08101584 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8101584:	b580      	push	{r7, lr}
 8101586:	b08a      	sub	sp, #40	@ 0x28
 8101588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 810158a:	f107 031c 	add.w	r3, r7, #28
 810158e:	2200      	movs	r2, #0
 8101590:	601a      	str	r2, [r3, #0]
 8101592:	605a      	str	r2, [r3, #4]
 8101594:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8101596:	463b      	mov	r3, r7
 8101598:	2200      	movs	r2, #0
 810159a:	601a      	str	r2, [r3, #0]
 810159c:	605a      	str	r2, [r3, #4]
 810159e:	609a      	str	r2, [r3, #8]
 81015a0:	60da      	str	r2, [r3, #12]
 81015a2:	611a      	str	r2, [r3, #16]
 81015a4:	615a      	str	r2, [r3, #20]
 81015a6:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 81015a8:	4b35      	ldr	r3, [pc, #212]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015aa:	4a36      	ldr	r2, [pc, #216]	@ (8101684 <MX_ADC1_Init+0x100>)
 81015ac:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81015ae:	4b34      	ldr	r3, [pc, #208]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015b0:	2200      	movs	r2, #0
 81015b2:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81015b4:	4b32      	ldr	r3, [pc, #200]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015b6:	2204      	movs	r2, #4
 81015b8:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 81015ba:	4b31      	ldr	r3, [pc, #196]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015bc:	2200      	movs	r2, #0
 81015be:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 81015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015c2:	2200      	movs	r2, #0
 81015c4:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 81015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015c8:	2201      	movs	r2, #1
 81015ca:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 81015cc:	4b2c      	ldr	r3, [pc, #176]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015ce:	2200      	movs	r2, #0
 81015d0:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015d4:	2200      	movs	r2, #0
 81015d6:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81015d8:	4b29      	ldr	r3, [pc, #164]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015da:	2200      	movs	r2, #0
 81015dc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81015de:	4b28      	ldr	r3, [pc, #160]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015e0:	2200      	movs	r2, #0
 81015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81015e4:	4b26      	ldr	r3, [pc, #152]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015e6:	2200      	movs	r2, #0
 81015e8:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81015ea:	4b25      	ldr	r3, [pc, #148]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015ec:	2200      	movs	r2, #0
 81015ee:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 81015f0:	4b23      	ldr	r3, [pc, #140]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015f2:	2200      	movs	r2, #0
 81015f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Oversampling.Ratio = 1;
 81015f8:	4b21      	ldr	r3, [pc, #132]	@ (8101680 <MX_ADC1_Init+0xfc>)
 81015fa:	2201      	movs	r2, #1
 81015fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 81015fe:	4820      	ldr	r0, [pc, #128]	@ (8101680 <MX_ADC1_Init+0xfc>)
 8101600:	f001 f99a 	bl	8102938 <HAL_ADC_Init>
 8101604:	4603      	mov	r3, r0
 8101606:	2b00      	cmp	r3, #0
 8101608:	d001      	beq.n	810160e <MX_ADC1_Init+0x8a>
		Error_Handler();
 810160a:	f000 fbf0 	bl	8101dee <Error_Handler>
	}
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810160e:	4b1c      	ldr	r3, [pc, #112]	@ (8101680 <MX_ADC1_Init+0xfc>)
 8101610:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8101614:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8101616:	4b1a      	ldr	r3, [pc, #104]	@ (8101680 <MX_ADC1_Init+0xfc>)
 8101618:	2208      	movs	r2, #8
 810161a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 810161c:	4818      	ldr	r0, [pc, #96]	@ (8101680 <MX_ADC1_Init+0xfc>)
 810161e:	f001 f98b 	bl	8102938 <HAL_ADC_Init>
 8101622:	4603      	mov	r3, r0
 8101624:	2b00      	cmp	r3, #0
 8101626:	d001      	beq.n	810162c <MX_ADC1_Init+0xa8>
		Error_Handler();
 8101628:	f000 fbe1 	bl	8101dee <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 810162c:	2300      	movs	r3, #0
 810162e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8101630:	f107 031c 	add.w	r3, r7, #28
 8101634:	4619      	mov	r1, r3
 8101636:	4812      	ldr	r0, [pc, #72]	@ (8101680 <MX_ADC1_Init+0xfc>)
 8101638:	f002 fa04 	bl	8103a44 <HAL_ADCEx_MultiModeConfigChannel>
 810163c:	4603      	mov	r3, r0
 810163e:	2b00      	cmp	r3, #0
 8101640:	d001      	beq.n	8101646 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8101642:	f000 fbd4 	bl	8101dee <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8101646:	4b10      	ldr	r3, [pc, #64]	@ (8101688 <MX_ADC1_Init+0x104>)
 8101648:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 810164a:	2306      	movs	r3, #6
 810164c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810164e:	2300      	movs	r3, #0
 8101650:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101652:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8101656:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101658:	2304      	movs	r3, #4
 810165a:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 810165c:	2300      	movs	r3, #0
 810165e:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8101660:	2300      	movs	r3, #0
 8101662:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8101664:	463b      	mov	r3, r7
 8101666:	4619      	mov	r1, r3
 8101668:	4805      	ldr	r0, [pc, #20]	@ (8101680 <MX_ADC1_Init+0xfc>)
 810166a:	f001 fcd3 	bl	8103014 <HAL_ADC_ConfigChannel>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <MX_ADC1_Init+0xf4>
		Error_Handler();
 8101674:	f000 fbbb 	bl	8101dee <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8101678:	bf00      	nop
 810167a:	3728      	adds	r7, #40	@ 0x28
 810167c:	46bd      	mov	sp, r7
 810167e:	bd80      	pop	{r7, pc}
 8101680:	100002e4 	.word	0x100002e4
 8101684:	40022000 	.word	0x40022000
 8101688:	3ef08000 	.word	0x3ef08000

0810168c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 810168c:	b580      	push	{r7, lr}
 810168e:	b088      	sub	sp, #32
 8101690:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8101692:	1d3b      	adds	r3, r7, #4
 8101694:	2200      	movs	r2, #0
 8101696:	601a      	str	r2, [r3, #0]
 8101698:	605a      	str	r2, [r3, #4]
 810169a:	609a      	str	r2, [r3, #8]
 810169c:	60da      	str	r2, [r3, #12]
 810169e:	611a      	str	r2, [r3, #16]
 81016a0:	615a      	str	r2, [r3, #20]
 81016a2:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 81016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016a6:	4a30      	ldr	r2, [pc, #192]	@ (8101768 <MX_ADC2_Init+0xdc>)
 81016a8:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81016aa:	4b2e      	ldr	r3, [pc, #184]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016ac:	2200      	movs	r2, #0
 81016ae:	60da      	str	r2, [r3, #12]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016b2:	2204      	movs	r2, #4
 81016b4:	611a      	str	r2, [r3, #16]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 81016b6:	4b2b      	ldr	r3, [pc, #172]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016b8:	2200      	movs	r2, #0
 81016ba:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ContinuousConvMode = DISABLE;
 81016bc:	4b29      	ldr	r3, [pc, #164]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016be:	2200      	movs	r2, #0
 81016c0:	755a      	strb	r2, [r3, #21]
	hadc2.Init.NbrOfConversion = 1;
 81016c2:	4b28      	ldr	r3, [pc, #160]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016c4:	2201      	movs	r2, #1
 81016c6:	619a      	str	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 81016c8:	4b26      	ldr	r3, [pc, #152]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016ca:	2200      	movs	r2, #0
 81016cc:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81016ce:	4b25      	ldr	r3, [pc, #148]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016d0:	2200      	movs	r2, #0
 81016d2:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81016d4:	4b23      	ldr	r3, [pc, #140]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016d6:	2200      	movs	r2, #0
 81016d8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81016da:	4b22      	ldr	r3, [pc, #136]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016dc:	2200      	movs	r2, #0
 81016de:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81016e0:	4b20      	ldr	r3, [pc, #128]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016e2:	2200      	movs	r2, #0
 81016e4:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016e8:	2200      	movs	r2, #0
 81016ea:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 81016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016ee:	2200      	movs	r2, #0
 81016f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Oversampling.Ratio = 1;
 81016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016f6:	2201      	movs	r2, #1
 81016f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 81016fa:	481a      	ldr	r0, [pc, #104]	@ (8101764 <MX_ADC2_Init+0xd8>)
 81016fc:	f001 f91c 	bl	8102938 <HAL_ADC_Init>
 8101700:	4603      	mov	r3, r0
 8101702:	2b00      	cmp	r3, #0
 8101704:	d001      	beq.n	810170a <MX_ADC2_Init+0x7e>
		Error_Handler();
 8101706:	f000 fb72 	bl	8101dee <Error_Handler>
	}
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810170a:	4b16      	ldr	r3, [pc, #88]	@ (8101764 <MX_ADC2_Init+0xd8>)
 810170c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8101710:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8101712:	4b14      	ldr	r3, [pc, #80]	@ (8101764 <MX_ADC2_Init+0xd8>)
 8101714:	2208      	movs	r2, #8
 8101716:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8101718:	4812      	ldr	r0, [pc, #72]	@ (8101764 <MX_ADC2_Init+0xd8>)
 810171a:	f001 f90d 	bl	8102938 <HAL_ADC_Init>
 810171e:	4603      	mov	r3, r0
 8101720:	2b00      	cmp	r3, #0
 8101722:	d001      	beq.n	8101728 <MX_ADC2_Init+0x9c>
		Error_Handler();
 8101724:	f000 fb63 	bl	8101dee <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8101728:	4b10      	ldr	r3, [pc, #64]	@ (810176c <MX_ADC2_Init+0xe0>)
 810172a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 810172c:	2306      	movs	r3, #6
 810172e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101730:	2300      	movs	r3, #0
 8101732:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101734:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8101738:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810173a:	2304      	movs	r3, #4
 810173c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 810173e:	2300      	movs	r3, #0
 8101740:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8101742:	2300      	movs	r3, #0
 8101744:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8101746:	1d3b      	adds	r3, r7, #4
 8101748:	4619      	mov	r1, r3
 810174a:	4806      	ldr	r0, [pc, #24]	@ (8101764 <MX_ADC2_Init+0xd8>)
 810174c:	f001 fc62 	bl	8103014 <HAL_ADC_ConfigChannel>
 8101750:	4603      	mov	r3, r0
 8101752:	2b00      	cmp	r3, #0
 8101754:	d001      	beq.n	810175a <MX_ADC2_Init+0xce>
		Error_Handler();
 8101756:	f000 fb4a 	bl	8101dee <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 810175a:	bf00      	nop
 810175c:	3720      	adds	r7, #32
 810175e:	46bd      	mov	sp, r7
 8101760:	bd80      	pop	{r7, pc}
 8101762:	bf00      	nop
 8101764:	10000348 	.word	0x10000348
 8101768:	40022100 	.word	0x40022100
 810176c:	14f00020 	.word	0x14f00020

08101770 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8101770:	b580      	push	{r7, lr}
 8101772:	b088      	sub	sp, #32
 8101774:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8101776:	4b3c      	ldr	r3, [pc, #240]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101778:	4a3c      	ldr	r2, [pc, #240]	@ (810186c <MX_FDCAN1_Init+0xfc>)
 810177a:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 810177c:	4b3a      	ldr	r3, [pc, #232]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 810177e:	2200      	movs	r2, #0
 8101780:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8101782:	4b39      	ldr	r3, [pc, #228]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101784:	2200      	movs	r2, #0
 8101786:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8101788:	4b37      	ldr	r3, [pc, #220]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 810178a:	2200      	movs	r2, #0
 810178c:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = ENABLE;
 810178e:	4b36      	ldr	r3, [pc, #216]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101790:	2201      	movs	r2, #1
 8101792:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8101794:	4b34      	ldr	r3, [pc, #208]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101796:	2200      	movs	r2, #0
 8101798:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 2;
 810179a:	4b33      	ldr	r3, [pc, #204]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 810179c:	2202      	movs	r2, #2
 810179e:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 81017a0:	4b31      	ldr	r3, [pc, #196]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017a2:	2201      	movs	r2, #1
 81017a4:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 10;
 81017a6:	4b30      	ldr	r3, [pc, #192]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017a8:	220a      	movs	r2, #10
 81017aa:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 81017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017ae:	2202      	movs	r2, #2
 81017b0:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 5;
 81017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017b4:	2205      	movs	r2, #5
 81017b6:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 81017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017ba:	2201      	movs	r2, #1
 81017bc:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 13;
 81017be:	4b2a      	ldr	r3, [pc, #168]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017c0:	220d      	movs	r2, #13
 81017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 81017c4:	4b28      	ldr	r3, [pc, #160]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017c6:	2202      	movs	r2, #2
 81017c8:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 81017ca:	4b27      	ldr	r3, [pc, #156]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017cc:	2200      	movs	r2, #0
 81017ce:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 1;
 81017d0:	4b25      	ldr	r3, [pc, #148]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017d2:	2201      	movs	r2, #1
 81017d4:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 81017d6:	4b24      	ldr	r3, [pc, #144]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017d8:	2200      	movs	r2, #0
 81017da:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 81017dc:	4b22      	ldr	r3, [pc, #136]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017de:	2240      	movs	r2, #64	@ 0x40
 81017e0:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81017e2:	4b21      	ldr	r3, [pc, #132]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017e4:	2204      	movs	r2, #4
 81017e6:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 81017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017ea:	2200      	movs	r2, #0
 81017ec:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017f0:	2204      	movs	r2, #4
 81017f2:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 81017f4:	4b1c      	ldr	r3, [pc, #112]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017f6:	2200      	movs	r2, #0
 81017f8:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 81017fc:	2204      	movs	r2, #4
 81017fe:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8101800:	4b19      	ldr	r3, [pc, #100]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101802:	2200      	movs	r2, #0
 8101804:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8101806:	4b18      	ldr	r3, [pc, #96]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101808:	2200      	movs	r2, #0
 810180a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 810180c:	4b16      	ldr	r3, [pc, #88]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 810180e:	2220      	movs	r2, #32
 8101810:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8101812:	4b15      	ldr	r3, [pc, #84]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101814:	2200      	movs	r2, #0
 8101816:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8101818:	4b13      	ldr	r3, [pc, #76]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 810181a:	2204      	movs	r2, #4
 810181c:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 810181e:	4812      	ldr	r0, [pc, #72]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101820:	f003 f84a 	bl	81048b8 <HAL_FDCAN_Init>
 8101824:	4603      	mov	r3, r0
 8101826:	2b00      	cmp	r3, #0
 8101828:	d001      	beq.n	810182e <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 810182a:	f000 fae0 	bl	8101dee <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	FDCAN_FilterTypeDef canFilterConfig;
	canFilterConfig.IdType = FDCAN_STANDARD_ID; //standard CAN
 810182e:	2300      	movs	r3, #0
 8101830:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIndex = 0; //FILTER BANK
 8101832:	2300      	movs	r3, #0
 8101834:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterType = FDCAN_FILTER_MASK; // SAME AS FILTER MODE FDCAN_FILTER_MASK
 8101836:	2302      	movs	r3, #2
 8101838:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //SAME AS FIFO ASSIGNMENT
 810183a:	2301      	movs	r3, #1
 810183c:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterID1 = 0x000;	//accept from given id
 810183e:	2300      	movs	r3, #0
 8101840:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterID2 = 0x000;
 8101842:	2300      	movs	r3, #0
 8101844:	617b      	str	r3, [r7, #20]
	canFilterConfig.RxBufferIndex = 0;
 8101846:	2300      	movs	r3, #0
 8101848:	61bb      	str	r3, [r7, #24]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK) {
 810184a:	463b      	mov	r3, r7
 810184c:	4619      	mov	r1, r3
 810184e:	4806      	ldr	r0, [pc, #24]	@ (8101868 <MX_FDCAN1_Init+0xf8>)
 8101850:	f003 fa10 	bl	8104c74 <HAL_FDCAN_ConfigFilter>
 8101854:	4603      	mov	r3, r0
 8101856:	2b00      	cmp	r3, #0
 8101858:	d001      	beq.n	810185e <MX_FDCAN1_Init+0xee>
		Error_Handler();
 810185a:	f000 fac8 	bl	8101dee <Error_Handler>
	}

	/* USER CODE END FDCAN1_Init 2 */

}
 810185e:	bf00      	nop
 8101860:	3720      	adds	r7, #32
 8101862:	46bd      	mov	sp, r7
 8101864:	bd80      	pop	{r7, pc}
 8101866:	bf00      	nop
 8101868:	100003ac 	.word	0x100003ac
 810186c:	4000a000 	.word	0x4000a000

08101870 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8101870:	b580      	push	{r7, lr}
 8101872:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8101874:	4b22      	ldr	r3, [pc, #136]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 8101876:	4a23      	ldr	r2, [pc, #140]	@ (8101904 <MX_USART3_UART_Init+0x94>)
 8101878:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 810187a:	4b21      	ldr	r3, [pc, #132]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 810187c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101880:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101882:	4b1f      	ldr	r3, [pc, #124]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 8101884:	2200      	movs	r2, #0
 8101886:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8101888:	4b1d      	ldr	r3, [pc, #116]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 810188a:	2200      	movs	r2, #0
 810188c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 810188e:	4b1c      	ldr	r3, [pc, #112]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 8101890:	2200      	movs	r2, #0
 8101892:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8101894:	4b1a      	ldr	r3, [pc, #104]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 8101896:	220c      	movs	r2, #12
 8101898:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810189a:	4b19      	ldr	r3, [pc, #100]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 810189c:	2200      	movs	r2, #0
 810189e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81018a0:	4b17      	ldr	r3, [pc, #92]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018a2:	2200      	movs	r2, #0
 81018a4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81018a6:	4b16      	ldr	r3, [pc, #88]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018a8:	2200      	movs	r2, #0
 81018aa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81018ac:	4b14      	ldr	r3, [pc, #80]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018ae:	2200      	movs	r2, #0
 81018b0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81018b2:	4b13      	ldr	r3, [pc, #76]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018b4:	2200      	movs	r2, #0
 81018b6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 81018b8:	4811      	ldr	r0, [pc, #68]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018ba:	f007 fec7 	bl	810964c <HAL_UART_Init>
 81018be:	4603      	mov	r3, r0
 81018c0:	2b00      	cmp	r3, #0
 81018c2:	d001      	beq.n	81018c8 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 81018c4:	f000 fa93 	bl	8101dee <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 81018c8:	2100      	movs	r1, #0
 81018ca:	480d      	ldr	r0, [pc, #52]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018cc:	f00a f9d3 	bl	810bc76 <HAL_UARTEx_SetTxFifoThreshold>
 81018d0:	4603      	mov	r3, r0
 81018d2:	2b00      	cmp	r3, #0
 81018d4:	d001      	beq.n	81018da <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 81018d6:	f000 fa8a 	bl	8101dee <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 81018da:	2100      	movs	r1, #0
 81018dc:	4808      	ldr	r0, [pc, #32]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018de:	f00a fa08 	bl	810bcf2 <HAL_UARTEx_SetRxFifoThreshold>
 81018e2:	4603      	mov	r3, r0
 81018e4:	2b00      	cmp	r3, #0
 81018e6:	d001      	beq.n	81018ec <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 81018e8:	f000 fa81 	bl	8101dee <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 81018ec:	4804      	ldr	r0, [pc, #16]	@ (8101900 <MX_USART3_UART_Init+0x90>)
 81018ee:	f00a f989 	bl	810bc04 <HAL_UARTEx_DisableFifoMode>
 81018f2:	4603      	mov	r3, r0
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d001      	beq.n	81018fc <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 81018f8:	f000 fa79 	bl	8101dee <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 81018fc:	bf00      	nop
 81018fe:	bd80      	pop	{r7, pc}
 8101900:	1000044c 	.word	0x1000044c
 8101904:	40004800 	.word	0x40004800

08101908 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8101908:	b580      	push	{r7, lr}
 810190a:	b08a      	sub	sp, #40	@ 0x28
 810190c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 810190e:	f107 0314 	add.w	r3, r7, #20
 8101912:	2200      	movs	r2, #0
 8101914:	601a      	str	r2, [r3, #0]
 8101916:	605a      	str	r2, [r3, #4]
 8101918:	609a      	str	r2, [r3, #8]
 810191a:	60da      	str	r2, [r3, #12]
 810191c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 810191e:	4b35      	ldr	r3, [pc, #212]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101924:	4a33      	ldr	r2, [pc, #204]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101926:	f043 0320 	orr.w	r3, r3, #32
 810192a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810192e:	4b31      	ldr	r3, [pc, #196]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101934:	f003 0320 	and.w	r3, r3, #32
 8101938:	613b      	str	r3, [r7, #16]
 810193a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 810193c:	4b2d      	ldr	r3, [pc, #180]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101942:	4a2c      	ldr	r2, [pc, #176]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101944:	f043 0301 	orr.w	r3, r3, #1
 8101948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810194c:	4b29      	ldr	r3, [pc, #164]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101952:	f003 0301 	and.w	r3, r3, #1
 8101956:	60fb      	str	r3, [r7, #12]
 8101958:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 810195a:	4b26      	ldr	r3, [pc, #152]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101960:	4a24      	ldr	r2, [pc, #144]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101962:	f043 0302 	orr.w	r3, r3, #2
 8101966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810196a:	4b22      	ldr	r3, [pc, #136]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101970:	f003 0302 	and.w	r3, r3, #2
 8101974:	60bb      	str	r3, [r7, #8]
 8101976:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8101978:	4b1e      	ldr	r3, [pc, #120]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810197e:	4a1d      	ldr	r2, [pc, #116]	@ (81019f4 <MX_GPIO_Init+0xec>)
 8101980:	f043 0308 	orr.w	r3, r3, #8
 8101984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101988:	4b1a      	ldr	r3, [pc, #104]	@ (81019f4 <MX_GPIO_Init+0xec>)
 810198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810198e:	f003 0308 	and.w	r3, r3, #8
 8101992:	607b      	str	r3, [r7, #4]
 8101994:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8101996:	2200      	movs	r2, #0
 8101998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810199c:	4816      	ldr	r0, [pc, #88]	@ (81019f8 <MX_GPIO_Init+0xf0>)
 810199e:	f004 fb59 	bl	8106054 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 81019a2:	2200      	movs	r2, #0
 81019a4:	f244 0101 	movw	r1, #16385	@ 0x4001
 81019a8:	4814      	ldr	r0, [pc, #80]	@ (81019fc <MX_GPIO_Init+0xf4>)
 81019aa:	f004 fb53 	bl	8106054 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PF9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 81019ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81019b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81019b4:	2301      	movs	r3, #1
 81019b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019b8:	2300      	movs	r3, #0
 81019ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019bc:	2300      	movs	r3, #0
 81019be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81019c0:	f107 0314 	add.w	r3, r7, #20
 81019c4:	4619      	mov	r1, r3
 81019c6:	480c      	ldr	r0, [pc, #48]	@ (81019f8 <MX_GPIO_Init+0xf0>)
 81019c8:	f004 f994 	bl	8105cf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 81019cc:	f244 0301 	movw	r3, #16385	@ 0x4001
 81019d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81019d2:	2301      	movs	r3, #1
 81019d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019d6:	2300      	movs	r3, #0
 81019d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019da:	2300      	movs	r3, #0
 81019dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81019de:	f107 0314 	add.w	r3, r7, #20
 81019e2:	4619      	mov	r1, r3
 81019e4:	4805      	ldr	r0, [pc, #20]	@ (81019fc <MX_GPIO_Init+0xf4>)
 81019e6:	f004 f985 	bl	8105cf4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 81019ea:	bf00      	nop
 81019ec:	3728      	adds	r7, #40	@ 0x28
 81019ee:	46bd      	mov	sp, r7
 81019f0:	bd80      	pop	{r7, pc}
 81019f2:	bf00      	nop
 81019f4:	58024400 	.word	0x58024400
 81019f8:	58021400 	.word	0x58021400
 81019fc:	58020400 	.word	0x58020400

08101a00 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8101a00:	b580      	push	{r7, lr}
 8101a02:	b084      	sub	sp, #16
 8101a04:	af00      	add	r7, sp, #0
 8101a06:	6078      	str	r0, [r7, #4]
 8101a08:	460b      	mov	r3, r1
 8101a0a:	807b      	strh	r3, [r7, #2]
	indx = Size;
 8101a0c:	887b      	ldrh	r3, [r7, #2]
 8101a0e:	4a10      	ldr	r2, [pc, #64]	@ (8101a50 <HAL_UARTEx_RxEventCallback+0x50>)
 8101a10:	6013      	str	r3, [r2, #0]
	if (huart->Instance == USART3) {
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	4a0f      	ldr	r2, [pc, #60]	@ (8101a54 <HAL_UARTEx_RxEventCallback+0x54>)
 8101a18:	4293      	cmp	r3, r2
 8101a1a:	d114      	bne.n	8101a46 <HAL_UARTEx_RxEventCallback+0x46>
		// Notify the UART task when data is received
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(readSensorsHandle, &xHigherPriorityTaskWoken);//notify given task from ISR, cant use xTaskNotify
 8101a20:	4b0d      	ldr	r3, [pc, #52]	@ (8101a58 <HAL_UARTEx_RxEventCallback+0x58>)
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	f107 020c 	add.w	r2, r7, #12
 8101a28:	4611      	mov	r1, r2
 8101a2a:	4618      	mov	r0, r3
 8101a2c:	f00d faa4 	bl	810ef78 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8101a30:	68fb      	ldr	r3, [r7, #12]
 8101a32:	2b00      	cmp	r3, #0
 8101a34:	d007      	beq.n	8101a46 <HAL_UARTEx_RxEventCallback+0x46>
 8101a36:	4b09      	ldr	r3, [pc, #36]	@ (8101a5c <HAL_UARTEx_RxEventCallback+0x5c>)
 8101a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101a3c:	601a      	str	r2, [r3, #0]
 8101a3e:	f3bf 8f4f 	dsb	sy
 8101a42:	f3bf 8f6f 	isb	sy
	}
}
 8101a46:	bf00      	nop
 8101a48:	3710      	adds	r7, #16
 8101a4a:	46bd      	mov	sp, r7
 8101a4c:	bd80      	pop	{r7, pc}
 8101a4e:	bf00      	nop
 8101a50:	10000594 	.word	0x10000594
 8101a54:	40004800 	.word	0x40004800
 8101a58:	100004e8 	.word	0x100004e8
 8101a5c:	e000ed04 	.word	0xe000ed04

08101a60 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b086      	sub	sp, #24
 8101a64:	af02      	add	r7, sp, #8
 8101a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	//Receive data from m7 IPC OpenAMP task
	//INIT OPEN AMP ENDPOINT SLAVE
	MAILBOX_Init();
 8101a68:	f00f ffde 	bl	8111a28 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL) != HAL_OK)
 8101a6c:	2100      	movs	r1, #0
 8101a6e:	2001      	movs	r0, #1
 8101a70:	f010 f8dc 	bl	8111c2c <MX_OPENAMP_Init>
 8101a74:	4603      	mov	r3, r0
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d001      	beq.n	8101a7e <StartDefaultTask+0x1e>
		Error_Handler();
 8101a7a:	f000 f9b8 	bl	8101dee <Error_Handler>

	int32_t status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME,
 8101a7e:	2300      	movs	r3, #0
 8101a80:	9300      	str	r3, [sp, #0]
 8101a82:	4b10      	ldr	r3, [pc, #64]	@ (8101ac4 <StartDefaultTask+0x64>)
 8101a84:	f04f 32ff 	mov.w	r2, #4294967295
 8101a88:	490f      	ldr	r1, [pc, #60]	@ (8101ac8 <StartDefaultTask+0x68>)
 8101a8a:	4810      	ldr	r0, [pc, #64]	@ (8101acc <StartDefaultTask+0x6c>)
 8101a8c:	f010 f964 	bl	8111d58 <OPENAMP_create_endpoint>
 8101a90:	60f8      	str	r0, [r7, #12]
	RPMSG_ADDR_ANY, rpmsg_recv_callback,
	NULL);
	if (status < 0)
 8101a92:	68fb      	ldr	r3, [r7, #12]
 8101a94:	2b00      	cmp	r3, #0
 8101a96:	da01      	bge.n	8101a9c <StartDefaultTask+0x3c>
		Error_Handler();
 8101a98:	f000 f9a9 	bl	8101dee <Error_Handler>

	if (osSemaphoreAcquire(txSemaphoreHandle, osWaitForever) != osOK)
 8101a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8101ad0 <StartDefaultTask+0x70>)
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f00a fbc5 	bl	810c234 <osSemaphoreAcquire>
 8101aaa:	4603      	mov	r3, r0
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d001      	beq.n	8101ab4 <StartDefaultTask+0x54>
		Error_Handler(); //acquire semaphore so that Nothing is transmitted yet
 8101ab0:	f000 f99d 	bl	8101dee <Error_Handler>
	/* Infinite loop */
	for (;;) {
		OPENAMP_check_for_message();
 8101ab4:	f010 f96e 	bl	8111d94 <OPENAMP_check_for_message>

		osDelay(1);
 8101ab8:	2001      	movs	r0, #1
 8101aba:	f00a fb17 	bl	810c0ec <osDelay>
		OPENAMP_check_for_message();
 8101abe:	bf00      	nop
 8101ac0:	e7f8      	b.n	8101ab4 <StartDefaultTask+0x54>
 8101ac2:	bf00      	nop
 8101ac4:	081013e1 	.word	0x081013e1
 8101ac8:	0811749c 	.word	0x0811749c
 8101acc:	10000598 	.word	0x10000598
 8101ad0:	100004f0 	.word	0x100004f0

08101ad4 <startTxTask>:
 * @brief Function implementing the txTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTxTask */
void startTxTask(void *argument) {
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	b084      	sub	sp, #16
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTxTask */
	uint32_t bufferData = 0;
 8101adc:	2300      	movs	r3, #0
 8101ade:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Block until notified by another task (read sensor task)
 8101ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8101ae4:	2001      	movs	r0, #1
 8101ae6:	f00d f945 	bl	810ed74 <ulTaskNotifyTake>
		TorqueEncoder *test = (TorqueEncoder*) pvPortMalloc(
 8101aea:	2020      	movs	r0, #32
 8101aec:	f00a fc6c 	bl	810c3c8 <pvPortMalloc>
 8101af0:	60f8      	str	r0, [r7, #12]
				sizeof(struct TorqueEncoder));	//testing only
		test->id = TORQUE_SENSOR;
 8101af2:	68fb      	ldr	r3, [r7, #12]
 8101af4:	2200      	movs	r2, #0
 8101af6:	701a      	strb	r2, [r3, #0]
		test->valueFloat = 0;
 8101af8:	68fb      	ldr	r3, [r7, #12]
 8101afa:	f04f 0200 	mov.w	r2, #0
 8101afe:	619a      	str	r2, [r3, #24]
		test->valueInt = 0;
 8101b00:	68fb      	ldr	r3, [r7, #12]
 8101b02:	2200      	movs	r2, #0
 8101b04:	605a      	str	r2, [r3, #4]
		test->sensor1 = 0;
 8101b06:	68fb      	ldr	r3, [r7, #12]
 8101b08:	2200      	movs	r2, #0
 8101b0a:	609a      	str	r2, [r3, #8]
		test->sensorPercent0 = 0;
 8101b0c:	68fb      	ldr	r3, [r7, #12]
 8101b0e:	f04f 0200 	mov.w	r2, #0
 8101b12:	60da      	str	r2, [r3, #12]
		test->sensorPercent1 = 0;
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	f04f 0200 	mov.w	r2, #0
 8101b1a:	611a      	str	r2, [r3, #16]
		test->travelPercent = 0;
 8101b1c:	68fb      	ldr	r3, [r7, #12]
 8101b1e:	f04f 0200 	mov.w	r2, #0
 8101b22:	615a      	str	r2, [r3, #20]
		test->valueBool = false;
 8101b24:	68fb      	ldr	r3, [r7, #12]
 8101b26:	2200      	movs	r2, #0
 8101b28:	771a      	strb	r2, [r3, #28]

		if (osSemaphoreAcquire(readSensorSemaphoreHandle, osWaitForever)
 8101b2a:	4b26      	ldr	r3, [pc, #152]	@ (8101bc4 <startTxTask+0xf0>)
 8101b2c:	681b      	ldr	r3, [r3, #0]
 8101b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8101b32:	4618      	mov	r0, r3
 8101b34:	f00a fb7e 	bl	810c234 <osSemaphoreAcquire>
 8101b38:	4603      	mov	r3, r0
 8101b3a:	2b00      	cmp	r3, #0
 8101b3c:	d001      	beq.n	8101b42 <startTxTask+0x6e>
				!= osOK)
			Error_Handler();	//acquire semaphore for buffer read
 8101b3e:	f000 f956 	bl	8101dee <Error_Handler>

		if (bufferGet(&bufferData)) //get data from buffer if not empty
 8101b42:	f107 0308 	add.w	r3, r7, #8
 8101b46:	4618      	mov	r0, r3
 8101b48:	f7ff fbca 	bl	81012e0 <bufferGet>
 8101b4c:	4603      	mov	r3, r0
 8101b4e:	2b00      	cmp	r3, #0
 8101b50:	d027      	beq.n	8101ba2 <startTxTask+0xce>
				{
			test->valueInt = bufferData;
 8101b52:	68ba      	ldr	r2, [r7, #8]
 8101b54:	68fb      	ldr	r3, [r7, #12]
 8101b56:	605a      	str	r2, [r3, #4]
			if (bufferGet(&bufferData))
 8101b58:	f107 0308 	add.w	r3, r7, #8
 8101b5c:	4618      	mov	r0, r3
 8101b5e:	f7ff fbbf 	bl	81012e0 <bufferGet>
 8101b62:	4603      	mov	r3, r0
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d002      	beq.n	8101b6e <startTxTask+0x9a>
				test->sensor1 = bufferData;
 8101b68:	68ba      	ldr	r2, [r7, #8]
 8101b6a:	68fb      	ldr	r3, [r7, #12]
 8101b6c:	609a      	str	r2, [r3, #8]

			if (osSemaphoreAcquire(txSemaphoreHandle, osWaitForever) != osOK)
 8101b6e:	4b16      	ldr	r3, [pc, #88]	@ (8101bc8 <startTxTask+0xf4>)
 8101b70:	681b      	ldr	r3, [r3, #0]
 8101b72:	f04f 31ff 	mov.w	r1, #4294967295
 8101b76:	4618      	mov	r0, r3
 8101b78:	f00a fb5c 	bl	810c234 <osSemaphoreAcquire>
 8101b7c:	4603      	mov	r3, r0
 8101b7e:	2b00      	cmp	r3, #0
 8101b80:	d001      	beq.n	8101b86 <startTxTask+0xb2>
				Error_Handler(); //SYNC with receiving data task from C7 core
 8101b82:	f000 f934 	bl	8101dee <Error_Handler>

			if (OPENAMP_send(&rp_endpoint, test, sizeof(struct TorqueEncoder))
 8101b86:	2220      	movs	r2, #32
 8101b88:	68f9      	ldr	r1, [r7, #12]
 8101b8a:	4810      	ldr	r0, [pc, #64]	@ (8101bcc <startTxTask+0xf8>)
 8101b8c:	f7ff fbda 	bl	8101344 <rpmsg_send>
 8101b90:	4603      	mov	r3, r0
 8101b92:	2b00      	cmp	r3, #0
 8101b94:	da01      	bge.n	8101b9a <startTxTask+0xc6>
					< 0)
				Error_Handler(); //Send data to m7 core
 8101b96:	f000 f92a 	bl	8101dee <Error_Handler>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8101b9a:	2101      	movs	r1, #1
 8101b9c:	480c      	ldr	r0, [pc, #48]	@ (8101bd0 <startTxTask+0xfc>)
 8101b9e:	f004 fa72 	bl	8106086 <HAL_GPIO_TogglePin>
		}
		if (osSemaphoreRelease(readSensorSemaphoreHandle) != osOK)
 8101ba2:	4b08      	ldr	r3, [pc, #32]	@ (8101bc4 <startTxTask+0xf0>)
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	4618      	mov	r0, r3
 8101ba8:	f00a fb96 	bl	810c2d8 <osSemaphoreRelease>
 8101bac:	4603      	mov	r3, r0
 8101bae:	2b00      	cmp	r3, #0
 8101bb0:	d001      	beq.n	8101bb6 <startTxTask+0xe2>
			Error_Handler();	//free semaphore, done with buffer read
 8101bb2:	f000 f91c 	bl	8101dee <Error_Handler>

		vPortFree(test);
 8101bb6:	68f8      	ldr	r0, [r7, #12]
 8101bb8:	f00a fcd4 	bl	810c564 <vPortFree>
		osDelay(1);
 8101bbc:	2001      	movs	r0, #1
 8101bbe:	f00a fa95 	bl	810c0ec <osDelay>
	for (;;) {
 8101bc2:	e78d      	b.n	8101ae0 <startTxTask+0xc>
 8101bc4:	100004f4 	.word	0x100004f4
 8101bc8:	100004f0 	.word	0x100004f0
 8101bcc:	10000598 	.word	0x10000598
 8101bd0:	58020400 	.word	0x58020400

08101bd4 <startReadSensor>:
 * @brief Function implementing the readSensors thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadSensor */
void startReadSensor(void *argument) {
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b086      	sub	sp, #24
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startReadSensor */
	uint32_t i = 0;
 8101bdc:	2300      	movs	r3, #0
 8101bde:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8101be0:	481f      	ldr	r0, [pc, #124]	@ (8101c60 <startReadSensor+0x8c>)
 8101be2:	f001 f84b 	bl	8102c7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8101be6:	f04f 31ff 	mov.w	r1, #4294967295
 8101bea:	481d      	ldr	r0, [pc, #116]	@ (8101c60 <startReadSensor+0x8c>)
 8101bec:	f001 f910 	bl	8102e10 <HAL_ADC_PollForConversion>
		uint32_t sensor1 = HAL_ADC_GetValue(&hadc1);//rename to more specific sensor
 8101bf0:	481b      	ldr	r0, [pc, #108]	@ (8101c60 <startReadSensor+0x8c>)
 8101bf2:	f001 fa01 	bl	8102ff8 <HAL_ADC_GetValue>
 8101bf6:	6138      	str	r0, [r7, #16]

		HAL_ADC_Start(&hadc2);
 8101bf8:	481a      	ldr	r0, [pc, #104]	@ (8101c64 <startReadSensor+0x90>)
 8101bfa:	f001 f83f 	bl	8102c7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8101bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8101c02:	4818      	ldr	r0, [pc, #96]	@ (8101c64 <startReadSensor+0x90>)
 8101c04:	f001 f904 	bl	8102e10 <HAL_ADC_PollForConversion>
		uint32_t sensor2 = HAL_ADC_GetValue(&hadc2);
 8101c08:	4816      	ldr	r0, [pc, #88]	@ (8101c64 <startReadSensor+0x90>)
 8101c0a:	f001 f9f5 	bl	8102ff8 <HAL_ADC_GetValue>
 8101c0e:	60f8      	str	r0, [r7, #12]

		if (osSemaphoreAcquire(readSensorSemaphoreHandle, osWaitForever)
 8101c10:	4b15      	ldr	r3, [pc, #84]	@ (8101c68 <startReadSensor+0x94>)
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	f04f 31ff 	mov.w	r1, #4294967295
 8101c18:	4618      	mov	r0, r3
 8101c1a:	f00a fb0b 	bl	810c234 <osSemaphoreAcquire>
 8101c1e:	4603      	mov	r3, r0
 8101c20:	2b00      	cmp	r3, #0
 8101c22:	d001      	beq.n	8101c28 <startReadSensor+0x54>
				!= osOK)
			Error_Handler();	//acquire semaphore for buffer write
 8101c24:	f000 f8e3 	bl	8101dee <Error_Handler>
		bufferPut(sensor1);	//read data and put into buffer
 8101c28:	6938      	ldr	r0, [r7, #16]
 8101c2a:	f7ff fb1b 	bl	8101264 <bufferPut>
		bufferPut(sensor2);	//read data and put into buffer
 8101c2e:	68f8      	ldr	r0, [r7, #12]
 8101c30:	f7ff fb18 	bl	8101264 <bufferPut>
		if (osSemaphoreRelease(readSensorSemaphoreHandle) != osOK)
 8101c34:	4b0c      	ldr	r3, [pc, #48]	@ (8101c68 <startReadSensor+0x94>)
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	4618      	mov	r0, r3
 8101c3a:	f00a fb4d 	bl	810c2d8 <osSemaphoreRelease>
 8101c3e:	4603      	mov	r3, r0
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	d001      	beq.n	8101c48 <startReadSensor+0x74>
			Error_Handler();
 8101c44:	f000 f8d3 	bl	8101dee <Error_Handler>

		xTaskNotifyGive(txTaskHandle); // Notify txTask to start
 8101c48:	4b08      	ldr	r3, [pc, #32]	@ (8101c6c <startReadSensor+0x98>)
 8101c4a:	6818      	ldr	r0, [r3, #0]
 8101c4c:	2300      	movs	r3, #0
 8101c4e:	2202      	movs	r2, #2
 8101c50:	2100      	movs	r1, #0
 8101c52:	f00d f8d7 	bl	810ee04 <xTaskGenericNotify>

		osDelay(1);
 8101c56:	2001      	movs	r0, #1
 8101c58:	f00a fa48 	bl	810c0ec <osDelay>
	for (;;) {
 8101c5c:	e7c0      	b.n	8101be0 <startReadSensor+0xc>
 8101c5e:	bf00      	nop
 8101c60:	100002e4 	.word	0x100002e4
 8101c64:	10000348 	.word	0x10000348
 8101c68:	100004f4 	.word	0x100004f4
 8101c6c:	100004e4 	.word	0x100004e4

08101c70 <startSendCAN>:
 * @brief Function implementing the sendCANTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSendCAN */
void startSendCAN(void *argument) {
 8101c70:	b5b0      	push	{r4, r5, r7, lr}
 8101c72:	b096      	sub	sp, #88	@ 0x58
 8101c74:	af02      	add	r7, sp, #8
 8101c76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startSendCAN */

	uint32_t Notifications = FDCAN_IT_RX_FIFO0_NEW_MESSAGE;
 8101c78:	2301      	movs	r3, #1
 8101c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8101c7c:	4850      	ldr	r0, [pc, #320]	@ (8101dc0 <startSendCAN+0x150>)
 8101c7e:	f003 f86f 	bl	8104d60 <HAL_FDCAN_Start>
 8101c82:	4603      	mov	r3, r0
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d001      	beq.n	8101c8c <startSendCAN+0x1c>
		Error_Handler();
 8101c88:	f000 f8b1 	bl	8101dee <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, Notifications, 0) != HAL_OK) {
 8101c8c:	2200      	movs	r2, #0
 8101c8e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8101c90:	484b      	ldr	r0, [pc, #300]	@ (8101dc0 <startSendCAN+0x150>)
 8101c92:	f003 faa7 	bl	81051e4 <HAL_FDCAN_ActivateNotification>
 8101c96:	4603      	mov	r3, r0
 8101c98:	2b00      	cmp	r3, #0
 8101c9a:	d001      	beq.n	8101ca0 <startSendCAN+0x30>
		Error_Handler();
 8101c9c:	f000 f8a7 	bl	8101dee <Error_Handler>
	}
	FDCAN_ProtocolStatusTypeDef protocolStatus;

	/* Infinite loop */
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8101ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8101ca4:	2001      	movs	r0, #1
 8101ca6:	f00d f865 	bl	810ed74 <ulTaskNotifyTake>
		char *data = pvPortMalloc(200); //Malloc 100 char array
 8101caa:	20c8      	movs	r0, #200	@ 0xc8
 8101cac:	f00a fb8c 	bl	810c3c8 <pvPortMalloc>
 8101cb0:	64b8      	str	r0, [r7, #72]	@ 0x48

		int intPart = test->travelPercent;
 8101cb2:	4b44      	ldr	r3, [pc, #272]	@ (8101dc4 <startSendCAN+0x154>)
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8101cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101cbe:	ee17 3a90 	vmov	r3, s15
 8101cc2:	647b      	str	r3, [r7, #68]	@ 0x44
		float fracPart = test->travelPercent - intPart;
 8101cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8101dc4 <startSendCAN+0x154>)
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	ed93 7a05 	vldr	s14, [r3, #20]
 8101ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101cce:	ee07 3a90 	vmov	s15, r3
 8101cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101cda:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		int decimals = 4;
 8101cde:	2304      	movs	r3, #4
 8101ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		int fracToInt = trunc(fracPart * pow(10, decimals));
 8101ce2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8101ce4:	f7fe fcc8 	bl	8100678 <__aeabi_f2d>
 8101ce8:	4604      	mov	r4, r0
 8101cea:	460d      	mov	r5, r1
 8101cec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101cee:	f7fe fcb1 	bl	8100654 <__aeabi_i2d>
 8101cf2:	4602      	mov	r2, r0
 8101cf4:	460b      	mov	r3, r1
 8101cf6:	ec43 2b11 	vmov	d1, r2, r3
 8101cfa:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8101db8 <startSendCAN+0x148>
 8101cfe:	f014 fbf9 	bl	81164f4 <pow>
 8101d02:	ec53 2b10 	vmov	r2, r3, d0
 8101d06:	4620      	mov	r0, r4
 8101d08:	4629      	mov	r1, r5
 8101d0a:	f7fe fd0d 	bl	8100728 <__aeabi_dmul>
 8101d0e:	4602      	mov	r2, r0
 8101d10:	460b      	mov	r3, r1
 8101d12:	ec43 2b17 	vmov	d7, r2, r3
 8101d16:	eeb0 0a47 	vmov.f32	s0, s14
 8101d1a:	eef0 0a67 	vmov.f32	s1, s15
 8101d1e:	f014 fc65 	bl	81165ec <trunc>
 8101d22:	ec53 2b10 	vmov	r2, r3, d0
 8101d26:	4610      	mov	r0, r2
 8101d28:	4619      	mov	r1, r3
 8101d2a:	f7fe ffad 	bl	8100c88 <__aeabi_d2iz>
 8101d2e:	4603      	mov	r3, r0
 8101d30:	63bb      	str	r3, [r7, #56]	@ 0x38
		sprintf(data, "%d\n", intPart);
 8101d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8101d34:	4924      	ldr	r1, [pc, #144]	@ (8101dc8 <startSendCAN+0x158>)
 8101d36:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8101d38:	f011 f8ec 	bl	8112f14 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), 100);
 8101d3c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8101d3e:	f7fe fb2f 	bl	81003a0 <strlen>
 8101d42:	4603      	mov	r3, r0
 8101d44:	b29a      	uxth	r2, r3
 8101d46:	2364      	movs	r3, #100	@ 0x64
 8101d48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8101d4a:	4820      	ldr	r0, [pc, #128]	@ (8101dcc <startSendCAN+0x15c>)
 8101d4c:	f007 fcce 	bl	81096ec <HAL_UART_Transmit>

		HAL_FDCAN_GetProtocolStatus(&hfdcan1, &protocolStatus);
 8101d50:	f107 030c 	add.w	r3, r7, #12
 8101d54:	4619      	mov	r1, r3
 8101d56:	481a      	ldr	r0, [pc, #104]	@ (8101dc0 <startSendCAN+0x150>)
 8101d58:	f003 f9f4 	bl	8105144 <HAL_FDCAN_GetProtocolStatus>
		if (protocolStatus.BusOff) {
 8101d5c:	6a3b      	ldr	r3, [r7, #32]
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d007      	beq.n	8101d72 <startSendCAN+0x102>
			CLEAR_BIT(hfdcan1.Instance->CCCR, FDCAN_CCCR_INIT);
 8101d62:	4b17      	ldr	r3, [pc, #92]	@ (8101dc0 <startSendCAN+0x150>)
 8101d64:	681b      	ldr	r3, [r3, #0]
 8101d66:	699a      	ldr	r2, [r3, #24]
 8101d68:	4b15      	ldr	r3, [pc, #84]	@ (8101dc0 <startSendCAN+0x150>)
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	f022 0201 	bic.w	r2, r2, #1
 8101d70:	619a      	str	r2, [r3, #24]
		}

		//DATA CALCULATION IS IN test-> travel Percent;
		SendMotorCommand(&hfdcan1, test->travelPercent, 0, 1, 0, 2400);
 8101d72:	4b14      	ldr	r3, [pc, #80]	@ (8101dc4 <startSendCAN+0x154>)
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	edd3 7a05 	vldr	s15, [r3, #20]
 8101d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d7e:	ee17 3a90 	vmov	r3, s15
 8101d82:	b299      	uxth	r1, r3
 8101d84:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8101d88:	9301      	str	r3, [sp, #4]
 8101d8a:	2300      	movs	r3, #0
 8101d8c:	9300      	str	r3, [sp, #0]
 8101d8e:	2301      	movs	r3, #1
 8101d90:	2200      	movs	r2, #0
 8101d92:	480b      	ldr	r0, [pc, #44]	@ (8101dc0 <startSendCAN+0x150>)
 8101d94:	f7ff f9fb 	bl	810118e <SendMotorCommand>
		SendSensorReading01(&hfdcan1, test->sensor1);
 8101d98:	4b0a      	ldr	r3, [pc, #40]	@ (8101dc4 <startSendCAN+0x154>)
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	689b      	ldr	r3, [r3, #8]
 8101d9e:	4619      	mov	r1, r3
 8101da0:	4807      	ldr	r0, [pc, #28]	@ (8101dc0 <startSendCAN+0x150>)
 8101da2:	f7ff fa32 	bl	810120a <SendSensorReading01>
//		SendSensorReading02(&hfdcan1, test->sensor2);

		vPortFree(data);
 8101da6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8101da8:	f00a fbdc 	bl	810c564 <vPortFree>
		osDelay(1);
 8101dac:	2001      	movs	r0, #1
 8101dae:	f00a f99d 	bl	810c0ec <osDelay>
	for (;;) {
 8101db2:	e775      	b.n	8101ca0 <startSendCAN+0x30>
 8101db4:	f3af 8000 	nop.w
 8101db8:	00000000 	.word	0x00000000
 8101dbc:	40240000 	.word	0x40240000
 8101dc0:	100003ac 	.word	0x100003ac
 8101dc4:	1000052c 	.word	0x1000052c
 8101dc8:	081174ac 	.word	0x081174ac
 8101dcc:	1000044c 	.word	0x1000044c

08101dd0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8101dd0:	b580      	push	{r7, lr}
 8101dd2:	b082      	sub	sp, #8
 8101dd4:	af00      	add	r7, sp, #0
 8101dd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101de0:	d101      	bne.n	8101de6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8101de2:	f000 fb9b 	bl	810251c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8101de6:	bf00      	nop
 8101de8:	3708      	adds	r7, #8
 8101dea:	46bd      	mov	sp, r7
 8101dec:	bd80      	pop	{r7, pc}

08101dee <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8101dee:	b480      	push	{r7}
 8101df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101df2:	b672      	cpsid	i
}
 8101df4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8101df6:	bf00      	nop
 8101df8:	e7fd      	b.n	8101df6 <Error_Handler+0x8>
	...

08101dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	b082      	sub	sp, #8
 8101e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101e02:	4b10      	ldr	r3, [pc, #64]	@ (8101e44 <HAL_MspInit+0x48>)
 8101e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101e08:	4a0e      	ldr	r2, [pc, #56]	@ (8101e44 <HAL_MspInit+0x48>)
 8101e0a:	f043 0302 	orr.w	r3, r3, #2
 8101e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101e12:	4b0c      	ldr	r3, [pc, #48]	@ (8101e44 <HAL_MspInit+0x48>)
 8101e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101e18:	f003 0302 	and.w	r3, r3, #2
 8101e1c:	607b      	str	r3, [r7, #4]
 8101e1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101e20:	2200      	movs	r2, #0
 8101e22:	210f      	movs	r1, #15
 8101e24:	f06f 0001 	mvn.w	r0, #1
 8101e28:	f001 ffa6 	bl	8103d78 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101e2c:	2200      	movs	r2, #0
 8101e2e:	2105      	movs	r1, #5
 8101e30:	207e      	movs	r0, #126	@ 0x7e
 8101e32:	f001 ffa1 	bl	8103d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101e36:	207e      	movs	r0, #126	@ 0x7e
 8101e38:	f001 ffb8 	bl	8103dac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101e3c:	bf00      	nop
 8101e3e:	3708      	adds	r7, #8
 8101e40:	46bd      	mov	sp, r7
 8101e42:	bd80      	pop	{r7, pc}
 8101e44:	58024400 	.word	0x58024400

08101e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	b08c      	sub	sp, #48	@ 0x30
 8101e4c:	af00      	add	r7, sp, #0
 8101e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e50:	f107 031c 	add.w	r3, r7, #28
 8101e54:	2200      	movs	r2, #0
 8101e56:	601a      	str	r2, [r3, #0]
 8101e58:	605a      	str	r2, [r3, #4]
 8101e5a:	609a      	str	r2, [r3, #8]
 8101e5c:	60da      	str	r2, [r3, #12]
 8101e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	4a39      	ldr	r2, [pc, #228]	@ (8101f4c <HAL_ADC_MspInit+0x104>)
 8101e66:	4293      	cmp	r3, r2
 8101e68:	d133      	bne.n	8101ed2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8101e6a:	4b39      	ldr	r3, [pc, #228]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	3301      	adds	r3, #1
 8101e70:	4a37      	ldr	r2, [pc, #220]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8101e74:	4b36      	ldr	r3, [pc, #216]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	2b01      	cmp	r3, #1
 8101e7a:	d10e      	bne.n	8101e9a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8101e7c:	4b35      	ldr	r3, [pc, #212]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e82:	4a34      	ldr	r2, [pc, #208]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101e84:	f043 0320 	orr.w	r3, r3, #32
 8101e88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e8c:	4b31      	ldr	r3, [pc, #196]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e92:	f003 0320 	and.w	r3, r3, #32
 8101e96:	61bb      	str	r3, [r7, #24]
 8101e98:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101ea2:	f043 0301 	orr.w	r3, r3, #1
 8101ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101eb0:	f003 0301 	and.w	r3, r3, #1
 8101eb4:	617b      	str	r3, [r7, #20]
 8101eb6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101eb8:	2308      	movs	r3, #8
 8101eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101ebc:	2303      	movs	r3, #3
 8101ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ec0:	2300      	movs	r3, #0
 8101ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101ec4:	f107 031c 	add.w	r3, r7, #28
 8101ec8:	4619      	mov	r1, r3
 8101eca:	4823      	ldr	r0, [pc, #140]	@ (8101f58 <HAL_ADC_MspInit+0x110>)
 8101ecc:	f003 ff12 	bl	8105cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8101ed0:	e037      	b.n	8101f42 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	4a21      	ldr	r2, [pc, #132]	@ (8101f5c <HAL_ADC_MspInit+0x114>)
 8101ed8:	4293      	cmp	r3, r2
 8101eda:	d132      	bne.n	8101f42 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8101edc:	4b1c      	ldr	r3, [pc, #112]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	3301      	adds	r3, #1
 8101ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101ee4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8101ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8101f50 <HAL_ADC_MspInit+0x108>)
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	2b01      	cmp	r3, #1
 8101eec:	d10e      	bne.n	8101f0c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8101eee:	4b19      	ldr	r3, [pc, #100]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101ef4:	4a17      	ldr	r2, [pc, #92]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101ef6:	f043 0320 	orr.w	r3, r3, #32
 8101efa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101efe:	4b15      	ldr	r3, [pc, #84]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101f04:	f003 0320 	and.w	r3, r3, #32
 8101f08:	613b      	str	r3, [r7, #16]
 8101f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101f0c:	4b11      	ldr	r3, [pc, #68]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f12:	4a10      	ldr	r2, [pc, #64]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101f14:	f043 0302 	orr.w	r3, r3, #2
 8101f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8101f54 <HAL_ADC_MspInit+0x10c>)
 8101f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f22:	f003 0302 	and.w	r3, r3, #2
 8101f26:	60fb      	str	r3, [r7, #12]
 8101f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101f2a:	2302      	movs	r3, #2
 8101f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101f2e:	2303      	movs	r3, #3
 8101f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f32:	2300      	movs	r3, #0
 8101f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f36:	f107 031c 	add.w	r3, r7, #28
 8101f3a:	4619      	mov	r1, r3
 8101f3c:	4808      	ldr	r0, [pc, #32]	@ (8101f60 <HAL_ADC_MspInit+0x118>)
 8101f3e:	f003 fed9 	bl	8105cf4 <HAL_GPIO_Init>
}
 8101f42:	bf00      	nop
 8101f44:	3730      	adds	r7, #48	@ 0x30
 8101f46:	46bd      	mov	sp, r7
 8101f48:	bd80      	pop	{r7, pc}
 8101f4a:	bf00      	nop
 8101f4c:	40022000 	.word	0x40022000
 8101f50:	100005d8 	.word	0x100005d8
 8101f54:	58024400 	.word	0x58024400
 8101f58:	58020000 	.word	0x58020000
 8101f5c:	40022100 	.word	0x40022100
 8101f60:	58020400 	.word	0x58020400

08101f64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8101f64:	b580      	push	{r7, lr}
 8101f66:	b0ba      	sub	sp, #232	@ 0xe8
 8101f68:	af00      	add	r7, sp, #0
 8101f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101f70:	2200      	movs	r2, #0
 8101f72:	601a      	str	r2, [r3, #0]
 8101f74:	605a      	str	r2, [r3, #4]
 8101f76:	609a      	str	r2, [r3, #8]
 8101f78:	60da      	str	r2, [r3, #12]
 8101f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f7c:	f107 0310 	add.w	r3, r7, #16
 8101f80:	22c0      	movs	r2, #192	@ 0xc0
 8101f82:	2100      	movs	r1, #0
 8101f84:	4618      	mov	r0, r3
 8101f86:	f011 f828 	bl	8112fda <memset>
  if(hfdcan->Instance==FDCAN1)
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	4a2b      	ldr	r2, [pc, #172]	@ (810203c <HAL_FDCAN_MspInit+0xd8>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d14e      	bne.n	8102032 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8101f94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101f98:	f04f 0300 	mov.w	r3, #0
 8101f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8101fa0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8101fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fa8:	f107 0310 	add.w	r3, r7, #16
 8101fac:	4618      	mov	r0, r3
 8101fae:	f004 fb81 	bl	81066b4 <HAL_RCCEx_PeriphCLKConfig>
 8101fb2:	4603      	mov	r3, r0
 8101fb4:	2b00      	cmp	r3, #0
 8101fb6:	d001      	beq.n	8101fbc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8101fb8:	f7ff ff19 	bl	8101dee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8101fbc:	4b20      	ldr	r3, [pc, #128]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8101fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101fc8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8101fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8101fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101fd6:	60fb      	str	r3, [r7, #12]
 8101fd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101fda:	4b19      	ldr	r3, [pc, #100]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fe0:	4a17      	ldr	r2, [pc, #92]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fe2:	f043 0308 	orr.w	r3, r3, #8
 8101fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fea:	4b15      	ldr	r3, [pc, #84]	@ (8102040 <HAL_FDCAN_MspInit+0xdc>)
 8101fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ff0:	f003 0308 	and.w	r3, r3, #8
 8101ff4:	60bb      	str	r3, [r7, #8]
 8101ff6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8101ff8:	2303      	movs	r3, #3
 8101ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ffe:	2302      	movs	r3, #2
 8102000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102004:	2300      	movs	r3, #0
 8102006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810200a:	2300      	movs	r3, #0
 810200c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8102010:	2309      	movs	r3, #9
 8102012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102016:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810201a:	4619      	mov	r1, r3
 810201c:	4809      	ldr	r0, [pc, #36]	@ (8102044 <HAL_FDCAN_MspInit+0xe0>)
 810201e:	f003 fe69 	bl	8105cf4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8102022:	2200      	movs	r2, #0
 8102024:	2105      	movs	r1, #5
 8102026:	2013      	movs	r0, #19
 8102028:	f001 fea6 	bl	8103d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 810202c:	2013      	movs	r0, #19
 810202e:	f001 febd 	bl	8103dac <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8102032:	bf00      	nop
 8102034:	37e8      	adds	r7, #232	@ 0xe8
 8102036:	46bd      	mov	sp, r7
 8102038:	bd80      	pop	{r7, pc}
 810203a:	bf00      	nop
 810203c:	4000a000 	.word	0x4000a000
 8102040:	58024400 	.word	0x58024400
 8102044:	58020c00 	.word	0x58020c00

08102048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102048:	b580      	push	{r7, lr}
 810204a:	b0ba      	sub	sp, #232	@ 0xe8
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102050:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102054:	2200      	movs	r2, #0
 8102056:	601a      	str	r2, [r3, #0]
 8102058:	605a      	str	r2, [r3, #4]
 810205a:	609a      	str	r2, [r3, #8]
 810205c:	60da      	str	r2, [r3, #12]
 810205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102060:	f107 0310 	add.w	r3, r7, #16
 8102064:	22c0      	movs	r2, #192	@ 0xc0
 8102066:	2100      	movs	r1, #0
 8102068:	4618      	mov	r0, r3
 810206a:	f010 ffb6 	bl	8112fda <memset>
  if(huart->Instance==USART3)
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	4a2b      	ldr	r2, [pc, #172]	@ (8102120 <HAL_UART_MspInit+0xd8>)
 8102074:	4293      	cmp	r3, r2
 8102076:	d14e      	bne.n	8102116 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102078:	f04f 0202 	mov.w	r2, #2
 810207c:	f04f 0300 	mov.w	r3, #0
 8102080:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8102084:	2303      	movs	r3, #3
 8102086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810208a:	f107 0310 	add.w	r3, r7, #16
 810208e:	4618      	mov	r0, r3
 8102090:	f004 fb10 	bl	81066b4 <HAL_RCCEx_PeriphCLKConfig>
 8102094:	4603      	mov	r3, r0
 8102096:	2b00      	cmp	r3, #0
 8102098:	d001      	beq.n	810209e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810209a:	f7ff fea8 	bl	8101dee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810209e:	4b21      	ldr	r3, [pc, #132]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81020aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81020b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81020b8:	60fb      	str	r3, [r7, #12]
 81020ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81020bc:	4b19      	ldr	r3, [pc, #100]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020c2:	4a18      	ldr	r2, [pc, #96]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020c4:	f043 0308 	orr.w	r3, r3, #8
 81020c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020cc:	4b15      	ldr	r3, [pc, #84]	@ (8102124 <HAL_UART_MspInit+0xdc>)
 81020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020d2:	f003 0308 	and.w	r3, r3, #8
 81020d6:	60bb      	str	r3, [r7, #8]
 81020d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81020da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81020de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020e2:	2302      	movs	r3, #2
 81020e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020e8:	2300      	movs	r3, #0
 81020ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020ee:	2300      	movs	r3, #0
 81020f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81020f4:	2307      	movs	r3, #7
 81020f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81020fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81020fe:	4619      	mov	r1, r3
 8102100:	4809      	ldr	r0, [pc, #36]	@ (8102128 <HAL_UART_MspInit+0xe0>)
 8102102:	f003 fdf7 	bl	8105cf4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102106:	2200      	movs	r2, #0
 8102108:	2105      	movs	r1, #5
 810210a:	2027      	movs	r0, #39	@ 0x27
 810210c:	f001 fe34 	bl	8103d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102110:	2027      	movs	r0, #39	@ 0x27
 8102112:	f001 fe4b 	bl	8103dac <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8102116:	bf00      	nop
 8102118:	37e8      	adds	r7, #232	@ 0xe8
 810211a:	46bd      	mov	sp, r7
 810211c:	bd80      	pop	{r7, pc}
 810211e:	bf00      	nop
 8102120:	40004800 	.word	0x40004800
 8102124:	58024400 	.word	0x58024400
 8102128:	58020c00 	.word	0x58020c00

0810212c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810212c:	b580      	push	{r7, lr}
 810212e:	b090      	sub	sp, #64	@ 0x40
 8102130:	af00      	add	r7, sp, #0
 8102132:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	2b0f      	cmp	r3, #15
 8102138:	d827      	bhi.n	810218a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 810213a:	2200      	movs	r2, #0
 810213c:	6879      	ldr	r1, [r7, #4]
 810213e:	201c      	movs	r0, #28
 8102140:	f001 fe1a 	bl	8103d78 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102144:	201c      	movs	r0, #28
 8102146:	f001 fe31 	bl	8103dac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810214a:	4a29      	ldr	r2, [pc, #164]	@ (81021f0 <HAL_InitTick+0xc4>)
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8102150:	4b28      	ldr	r3, [pc, #160]	@ (81021f4 <HAL_InitTick+0xc8>)
 8102152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102156:	4a27      	ldr	r2, [pc, #156]	@ (81021f4 <HAL_InitTick+0xc8>)
 8102158:	f043 0301 	orr.w	r3, r3, #1
 810215c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102160:	4b24      	ldr	r3, [pc, #144]	@ (81021f4 <HAL_InitTick+0xc8>)
 8102162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102166:	f003 0301 	and.w	r3, r3, #1
 810216a:	60fb      	str	r3, [r7, #12]
 810216c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810216e:	f107 0210 	add.w	r2, r7, #16
 8102172:	f107 0314 	add.w	r3, r7, #20
 8102176:	4611      	mov	r1, r2
 8102178:	4618      	mov	r0, r3
 810217a:	f004 fa59 	bl	8106630 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102180:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102184:	2b00      	cmp	r3, #0
 8102186:	d106      	bne.n	8102196 <HAL_InitTick+0x6a>
 8102188:	e001      	b.n	810218e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810218a:	2301      	movs	r3, #1
 810218c:	e02c      	b.n	81021e8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810218e:	f004 fa23 	bl	81065d8 <HAL_RCC_GetPCLK1Freq>
 8102192:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102194:	e004      	b.n	81021a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102196:	f004 fa1f 	bl	81065d8 <HAL_RCC_GetPCLK1Freq>
 810219a:	4603      	mov	r3, r0
 810219c:	005b      	lsls	r3, r3, #1
 810219e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81021a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81021a2:	4a15      	ldr	r2, [pc, #84]	@ (81021f8 <HAL_InitTick+0xcc>)
 81021a4:	fba2 2303 	umull	r2, r3, r2, r3
 81021a8:	0c9b      	lsrs	r3, r3, #18
 81021aa:	3b01      	subs	r3, #1
 81021ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 81021ae:	4b13      	ldr	r3, [pc, #76]	@ (81021fc <HAL_InitTick+0xd0>)
 81021b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81021b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 81021b6:	4b11      	ldr	r3, [pc, #68]	@ (81021fc <HAL_InitTick+0xd0>)
 81021b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81021bc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 81021be:	4a0f      	ldr	r2, [pc, #60]	@ (81021fc <HAL_InitTick+0xd0>)
 81021c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81021c2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 81021c4:	4b0d      	ldr	r3, [pc, #52]	@ (81021fc <HAL_InitTick+0xd0>)
 81021c6:	2200      	movs	r2, #0
 81021c8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021ca:	4b0c      	ldr	r3, [pc, #48]	@ (81021fc <HAL_InitTick+0xd0>)
 81021cc:	2200      	movs	r2, #0
 81021ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 81021d0:	480a      	ldr	r0, [pc, #40]	@ (81021fc <HAL_InitTick+0xd0>)
 81021d2:	f006 ff6d 	bl	81090b0 <HAL_TIM_Base_Init>
 81021d6:	4603      	mov	r3, r0
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d104      	bne.n	81021e6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 81021dc:	4807      	ldr	r0, [pc, #28]	@ (81021fc <HAL_InitTick+0xd0>)
 81021de:	f006 ffc9 	bl	8109174 <HAL_TIM_Base_Start_IT>
 81021e2:	4603      	mov	r3, r0
 81021e4:	e000      	b.n	81021e8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 81021e6:	2301      	movs	r3, #1
}
 81021e8:	4618      	mov	r0, r3
 81021ea:	3740      	adds	r7, #64	@ 0x40
 81021ec:	46bd      	mov	sp, r7
 81021ee:	bd80      	pop	{r7, pc}
 81021f0:	10000008 	.word	0x10000008
 81021f4:	58024400 	.word	0x58024400
 81021f8:	431bde83 	.word	0x431bde83
 81021fc:	100005dc 	.word	0x100005dc

08102200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102200:	b480      	push	{r7}
 8102202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102204:	bf00      	nop
 8102206:	e7fd      	b.n	8102204 <NMI_Handler+0x4>

08102208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102208:	b480      	push	{r7}
 810220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810220c:	bf00      	nop
 810220e:	e7fd      	b.n	810220c <HardFault_Handler+0x4>

08102210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102210:	b480      	push	{r7}
 8102212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102214:	bf00      	nop
 8102216:	e7fd      	b.n	8102214 <MemManage_Handler+0x4>

08102218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102218:	b480      	push	{r7}
 810221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810221c:	bf00      	nop
 810221e:	e7fd      	b.n	810221c <BusFault_Handler+0x4>

08102220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102220:	b480      	push	{r7}
 8102222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102224:	bf00      	nop
 8102226:	e7fd      	b.n	8102224 <UsageFault_Handler+0x4>

08102228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102228:	b480      	push	{r7}
 810222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810222c:	bf00      	nop
 810222e:	46bd      	mov	sp, r7
 8102230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102234:	4770      	bx	lr
	...

08102238 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8102238:	b580      	push	{r7, lr}
 810223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 810223c:	4802      	ldr	r0, [pc, #8]	@ (8102248 <FDCAN1_IT0_IRQHandler+0x10>)
 810223e:	f003 f84b 	bl	81052d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8102242:	bf00      	nop
 8102244:	bd80      	pop	{r7, pc}
 8102246:	bf00      	nop
 8102248:	100003ac 	.word	0x100003ac

0810224c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 810224c:	b580      	push	{r7, lr}
 810224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102250:	4802      	ldr	r0, [pc, #8]	@ (810225c <TIM2_IRQHandler+0x10>)
 8102252:	f007 f807 	bl	8109264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102256:	bf00      	nop
 8102258:	bd80      	pop	{r7, pc}
 810225a:	bf00      	nop
 810225c:	100005dc 	.word	0x100005dc

08102260 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102264:	4802      	ldr	r0, [pc, #8]	@ (8102270 <USART3_IRQHandler+0x10>)
 8102266:	f007 facf 	bl	8109808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810226a:	bf00      	nop
 810226c:	bd80      	pop	{r7, pc}
 810226e:	bf00      	nop
 8102270:	1000044c 	.word	0x1000044c

08102274 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102274:	b580      	push	{r7, lr}
 8102276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102278:	f003 ff60 	bl	810613c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810227c:	bf00      	nop
 810227e:	bd80      	pop	{r7, pc}

08102280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102280:	b480      	push	{r7}
 8102282:	af00      	add	r7, sp, #0
  return 1;
 8102284:	2301      	movs	r3, #1
}
 8102286:	4618      	mov	r0, r3
 8102288:	46bd      	mov	sp, r7
 810228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228e:	4770      	bx	lr

08102290 <_kill>:

int _kill(int pid, int sig)
{
 8102290:	b580      	push	{r7, lr}
 8102292:	b082      	sub	sp, #8
 8102294:	af00      	add	r7, sp, #0
 8102296:	6078      	str	r0, [r7, #4]
 8102298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810229a:	f010 ff25 	bl	81130e8 <__errno>
 810229e:	4603      	mov	r3, r0
 81022a0:	2216      	movs	r2, #22
 81022a2:	601a      	str	r2, [r3, #0]
  return -1;
 81022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022a8:	4618      	mov	r0, r3
 81022aa:	3708      	adds	r7, #8
 81022ac:	46bd      	mov	sp, r7
 81022ae:	bd80      	pop	{r7, pc}

081022b0 <_exit>:

void _exit (int status)
{
 81022b0:	b580      	push	{r7, lr}
 81022b2:	b082      	sub	sp, #8
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81022b8:	f04f 31ff 	mov.w	r1, #4294967295
 81022bc:	6878      	ldr	r0, [r7, #4]
 81022be:	f7ff ffe7 	bl	8102290 <_kill>
  while (1) {}    /* Make sure we hang here */
 81022c2:	bf00      	nop
 81022c4:	e7fd      	b.n	81022c2 <_exit+0x12>

081022c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81022c6:	b580      	push	{r7, lr}
 81022c8:	b086      	sub	sp, #24
 81022ca:	af00      	add	r7, sp, #0
 81022cc:	60f8      	str	r0, [r7, #12]
 81022ce:	60b9      	str	r1, [r7, #8]
 81022d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022d2:	2300      	movs	r3, #0
 81022d4:	617b      	str	r3, [r7, #20]
 81022d6:	e00a      	b.n	81022ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81022d8:	f3af 8000 	nop.w
 81022dc:	4601      	mov	r1, r0
 81022de:	68bb      	ldr	r3, [r7, #8]
 81022e0:	1c5a      	adds	r2, r3, #1
 81022e2:	60ba      	str	r2, [r7, #8]
 81022e4:	b2ca      	uxtb	r2, r1
 81022e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022e8:	697b      	ldr	r3, [r7, #20]
 81022ea:	3301      	adds	r3, #1
 81022ec:	617b      	str	r3, [r7, #20]
 81022ee:	697a      	ldr	r2, [r7, #20]
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	429a      	cmp	r2, r3
 81022f4:	dbf0      	blt.n	81022d8 <_read+0x12>
  }

  return len;
 81022f6:	687b      	ldr	r3, [r7, #4]
}
 81022f8:	4618      	mov	r0, r3
 81022fa:	3718      	adds	r7, #24
 81022fc:	46bd      	mov	sp, r7
 81022fe:	bd80      	pop	{r7, pc}

08102300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102300:	b580      	push	{r7, lr}
 8102302:	b086      	sub	sp, #24
 8102304:	af00      	add	r7, sp, #0
 8102306:	60f8      	str	r0, [r7, #12]
 8102308:	60b9      	str	r1, [r7, #8]
 810230a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810230c:	2300      	movs	r3, #0
 810230e:	617b      	str	r3, [r7, #20]
 8102310:	e009      	b.n	8102326 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102312:	68bb      	ldr	r3, [r7, #8]
 8102314:	1c5a      	adds	r2, r3, #1
 8102316:	60ba      	str	r2, [r7, #8]
 8102318:	781b      	ldrb	r3, [r3, #0]
 810231a:	4618      	mov	r0, r3
 810231c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102320:	697b      	ldr	r3, [r7, #20]
 8102322:	3301      	adds	r3, #1
 8102324:	617b      	str	r3, [r7, #20]
 8102326:	697a      	ldr	r2, [r7, #20]
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	429a      	cmp	r2, r3
 810232c:	dbf1      	blt.n	8102312 <_write+0x12>
  }
  return len;
 810232e:	687b      	ldr	r3, [r7, #4]
}
 8102330:	4618      	mov	r0, r3
 8102332:	3718      	adds	r7, #24
 8102334:	46bd      	mov	sp, r7
 8102336:	bd80      	pop	{r7, pc}

08102338 <_close>:

int _close(int file)
{
 8102338:	b480      	push	{r7}
 810233a:	b083      	sub	sp, #12
 810233c:	af00      	add	r7, sp, #0
 810233e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102344:	4618      	mov	r0, r3
 8102346:	370c      	adds	r7, #12
 8102348:	46bd      	mov	sp, r7
 810234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810234e:	4770      	bx	lr

08102350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102350:	b480      	push	{r7}
 8102352:	b083      	sub	sp, #12
 8102354:	af00      	add	r7, sp, #0
 8102356:	6078      	str	r0, [r7, #4]
 8102358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810235a:	683b      	ldr	r3, [r7, #0]
 810235c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8102360:	605a      	str	r2, [r3, #4]
  return 0;
 8102362:	2300      	movs	r3, #0
}
 8102364:	4618      	mov	r0, r3
 8102366:	370c      	adds	r7, #12
 8102368:	46bd      	mov	sp, r7
 810236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810236e:	4770      	bx	lr

08102370 <_isatty>:

int _isatty(int file)
{
 8102370:	b480      	push	{r7}
 8102372:	b083      	sub	sp, #12
 8102374:	af00      	add	r7, sp, #0
 8102376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102378:	2301      	movs	r3, #1
}
 810237a:	4618      	mov	r0, r3
 810237c:	370c      	adds	r7, #12
 810237e:	46bd      	mov	sp, r7
 8102380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102384:	4770      	bx	lr

08102386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102386:	b480      	push	{r7}
 8102388:	b085      	sub	sp, #20
 810238a:	af00      	add	r7, sp, #0
 810238c:	60f8      	str	r0, [r7, #12]
 810238e:	60b9      	str	r1, [r7, #8]
 8102390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102392:	2300      	movs	r3, #0
}
 8102394:	4618      	mov	r0, r3
 8102396:	3714      	adds	r7, #20
 8102398:	46bd      	mov	sp, r7
 810239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239e:	4770      	bx	lr

081023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81023a0:	b580      	push	{r7, lr}
 81023a2:	b086      	sub	sp, #24
 81023a4:	af00      	add	r7, sp, #0
 81023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81023a8:	4a14      	ldr	r2, [pc, #80]	@ (81023fc <_sbrk+0x5c>)
 81023aa:	4b15      	ldr	r3, [pc, #84]	@ (8102400 <_sbrk+0x60>)
 81023ac:	1ad3      	subs	r3, r2, r3
 81023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81023b0:	697b      	ldr	r3, [r7, #20]
 81023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81023b4:	4b13      	ldr	r3, [pc, #76]	@ (8102404 <_sbrk+0x64>)
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	2b00      	cmp	r3, #0
 81023ba:	d102      	bne.n	81023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81023bc:	4b11      	ldr	r3, [pc, #68]	@ (8102404 <_sbrk+0x64>)
 81023be:	4a12      	ldr	r2, [pc, #72]	@ (8102408 <_sbrk+0x68>)
 81023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81023c2:	4b10      	ldr	r3, [pc, #64]	@ (8102404 <_sbrk+0x64>)
 81023c4:	681a      	ldr	r2, [r3, #0]
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	4413      	add	r3, r2
 81023ca:	693a      	ldr	r2, [r7, #16]
 81023cc:	429a      	cmp	r2, r3
 81023ce:	d207      	bcs.n	81023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81023d0:	f010 fe8a 	bl	81130e8 <__errno>
 81023d4:	4603      	mov	r3, r0
 81023d6:	220c      	movs	r2, #12
 81023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81023da:	f04f 33ff 	mov.w	r3, #4294967295
 81023de:	e009      	b.n	81023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81023e0:	4b08      	ldr	r3, [pc, #32]	@ (8102404 <_sbrk+0x64>)
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81023e6:	4b07      	ldr	r3, [pc, #28]	@ (8102404 <_sbrk+0x64>)
 81023e8:	681a      	ldr	r2, [r3, #0]
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	4413      	add	r3, r2
 81023ee:	4a05      	ldr	r2, [pc, #20]	@ (8102404 <_sbrk+0x64>)
 81023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81023f2:	68fb      	ldr	r3, [r7, #12]
}
 81023f4:	4618      	mov	r0, r3
 81023f6:	3718      	adds	r7, #24
 81023f8:	46bd      	mov	sp, r7
 81023fa:	bd80      	pop	{r7, pc}
 81023fc:	10048000 	.word	0x10048000
 8102400:	00000400 	.word	0x00000400
 8102404:	10000628 	.word	0x10000628
 8102408:	10005188 	.word	0x10005188

0810240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8102444 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102410:	f7fe fe80 	bl	8101114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102414:	480c      	ldr	r0, [pc, #48]	@ (8102448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102416:	490d      	ldr	r1, [pc, #52]	@ (810244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102418:	4a0d      	ldr	r2, [pc, #52]	@ (8102450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810241c:	e002      	b.n	8102424 <LoopCopyDataInit>

0810241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102422:	3304      	adds	r3, #4

08102424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102428:	d3f9      	bcc.n	810241e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810242a:	4a0a      	ldr	r2, [pc, #40]	@ (8102454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810242c:	4c0a      	ldr	r4, [pc, #40]	@ (8102458 <LoopFillZerobss+0x22>)
  movs r3, #0
 810242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102430:	e001      	b.n	8102436 <LoopFillZerobss>

08102432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102434:	3204      	adds	r2, #4

08102436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102438:	d3fb      	bcc.n	8102432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810243a:	f010 fe5b 	bl	81130f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810243e:	f7fe fffb 	bl	8101438 <main>
  bx  lr
 8102442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102444:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102448:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810244c:	10000298 	.word	0x10000298
  ldr r2, =_sidata
 8102450:	08117cc0 	.word	0x08117cc0
  ldr r2, =_sbss
 8102454:	10000298 	.word	0x10000298
  ldr r4, =_ebss
 8102458:	10005184 	.word	0x10005184

0810245c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810245c:	e7fe      	b.n	810245c <ADC3_IRQHandler>
	...

08102460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102460:	b580      	push	{r7, lr}
 8102462:	b082      	sub	sp, #8
 8102464:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102466:	4b28      	ldr	r3, [pc, #160]	@ (8102508 <HAL_Init+0xa8>)
 8102468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810246c:	4a26      	ldr	r2, [pc, #152]	@ (8102508 <HAL_Init+0xa8>)
 810246e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102472:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102476:	4b24      	ldr	r3, [pc, #144]	@ (8102508 <HAL_Init+0xa8>)
 8102478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810247c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102480:	603b      	str	r3, [r7, #0]
 8102482:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102484:	4b21      	ldr	r3, [pc, #132]	@ (810250c <HAL_Init+0xac>)
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810248c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102490:	4a1e      	ldr	r2, [pc, #120]	@ (810250c <HAL_Init+0xac>)
 8102492:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102496:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102498:	4b1c      	ldr	r3, [pc, #112]	@ (810250c <HAL_Init+0xac>)
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	4a1b      	ldr	r2, [pc, #108]	@ (810250c <HAL_Init+0xac>)
 810249e:	f043 0301 	orr.w	r3, r3, #1
 81024a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81024a4:	2003      	movs	r0, #3
 81024a6:	f001 fc5c 	bl	8103d62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81024aa:	f003 fee9 	bl	8106280 <HAL_RCC_GetSysClockFreq>
 81024ae:	4602      	mov	r2, r0
 81024b0:	4b15      	ldr	r3, [pc, #84]	@ (8102508 <HAL_Init+0xa8>)
 81024b2:	699b      	ldr	r3, [r3, #24]
 81024b4:	0a1b      	lsrs	r3, r3, #8
 81024b6:	f003 030f 	and.w	r3, r3, #15
 81024ba:	4915      	ldr	r1, [pc, #84]	@ (8102510 <HAL_Init+0xb0>)
 81024bc:	5ccb      	ldrb	r3, [r1, r3]
 81024be:	f003 031f 	and.w	r3, r3, #31
 81024c2:	fa22 f303 	lsr.w	r3, r2, r3
 81024c6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8102508 <HAL_Init+0xa8>)
 81024ca:	699b      	ldr	r3, [r3, #24]
 81024cc:	f003 030f 	and.w	r3, r3, #15
 81024d0:	4a0f      	ldr	r2, [pc, #60]	@ (8102510 <HAL_Init+0xb0>)
 81024d2:	5cd3      	ldrb	r3, [r2, r3]
 81024d4:	f003 031f 	and.w	r3, r3, #31
 81024d8:	687a      	ldr	r2, [r7, #4]
 81024da:	fa22 f303 	lsr.w	r3, r2, r3
 81024de:	4a0d      	ldr	r2, [pc, #52]	@ (8102514 <HAL_Init+0xb4>)
 81024e0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8102514 <HAL_Init+0xb4>)
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	4a0c      	ldr	r2, [pc, #48]	@ (8102518 <HAL_Init+0xb8>)
 81024e8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81024ea:	200f      	movs	r0, #15
 81024ec:	f7ff fe1e 	bl	810212c <HAL_InitTick>
 81024f0:	4603      	mov	r3, r0
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d001      	beq.n	81024fa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81024f6:	2301      	movs	r3, #1
 81024f8:	e002      	b.n	8102500 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81024fa:	f7ff fc7f 	bl	8101dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81024fe:	2300      	movs	r3, #0
}
 8102500:	4618      	mov	r0, r3
 8102502:	3708      	adds	r7, #8
 8102504:	46bd      	mov	sp, r7
 8102506:	bd80      	pop	{r7, pc}
 8102508:	58024400 	.word	0x58024400
 810250c:	40024400 	.word	0x40024400
 8102510:	08117700 	.word	0x08117700
 8102514:	10000004 	.word	0x10000004
 8102518:	10000000 	.word	0x10000000

0810251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810251c:	b480      	push	{r7}
 810251e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102520:	4b06      	ldr	r3, [pc, #24]	@ (810253c <HAL_IncTick+0x20>)
 8102522:	781b      	ldrb	r3, [r3, #0]
 8102524:	461a      	mov	r2, r3
 8102526:	4b06      	ldr	r3, [pc, #24]	@ (8102540 <HAL_IncTick+0x24>)
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	4413      	add	r3, r2
 810252c:	4a04      	ldr	r2, [pc, #16]	@ (8102540 <HAL_IncTick+0x24>)
 810252e:	6013      	str	r3, [r2, #0]
}
 8102530:	bf00      	nop
 8102532:	46bd      	mov	sp, r7
 8102534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102538:	4770      	bx	lr
 810253a:	bf00      	nop
 810253c:	1000000c 	.word	0x1000000c
 8102540:	1000062c 	.word	0x1000062c

08102544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102544:	b480      	push	{r7}
 8102546:	af00      	add	r7, sp, #0
  return uwTick;
 8102548:	4b03      	ldr	r3, [pc, #12]	@ (8102558 <HAL_GetTick+0x14>)
 810254a:	681b      	ldr	r3, [r3, #0]
}
 810254c:	4618      	mov	r0, r3
 810254e:	46bd      	mov	sp, r7
 8102550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102554:	4770      	bx	lr
 8102556:	bf00      	nop
 8102558:	1000062c 	.word	0x1000062c

0810255c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810255c:	b480      	push	{r7}
 810255e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102560:	4b03      	ldr	r3, [pc, #12]	@ (8102570 <HAL_GetREVID+0x14>)
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	0c1b      	lsrs	r3, r3, #16
}
 8102566:	4618      	mov	r0, r3
 8102568:	46bd      	mov	sp, r7
 810256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810256e:	4770      	bx	lr
 8102570:	5c001000 	.word	0x5c001000

08102574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102574:	b480      	push	{r7}
 8102576:	b083      	sub	sp, #12
 8102578:	af00      	add	r7, sp, #0
 810257a:	6078      	str	r0, [r7, #4]
 810257c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	689b      	ldr	r3, [r3, #8]
 8102582:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102586:	683b      	ldr	r3, [r7, #0]
 8102588:	431a      	orrs	r2, r3
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	609a      	str	r2, [r3, #8]
}
 810258e:	bf00      	nop
 8102590:	370c      	adds	r7, #12
 8102592:	46bd      	mov	sp, r7
 8102594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102598:	4770      	bx	lr

0810259a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810259a:	b480      	push	{r7}
 810259c:	b083      	sub	sp, #12
 810259e:	af00      	add	r7, sp, #0
 81025a0:	6078      	str	r0, [r7, #4]
 81025a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	689b      	ldr	r3, [r3, #8]
 81025a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81025ac:	683b      	ldr	r3, [r7, #0]
 81025ae:	431a      	orrs	r2, r3
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	609a      	str	r2, [r3, #8]
}
 81025b4:	bf00      	nop
 81025b6:	370c      	adds	r7, #12
 81025b8:	46bd      	mov	sp, r7
 81025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025be:	4770      	bx	lr

081025c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81025c0:	b480      	push	{r7}
 81025c2:	b083      	sub	sp, #12
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	689b      	ldr	r3, [r3, #8]
 81025cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81025d0:	4618      	mov	r0, r3
 81025d2:	370c      	adds	r7, #12
 81025d4:	46bd      	mov	sp, r7
 81025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025da:	4770      	bx	lr

081025dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81025dc:	b480      	push	{r7}
 81025de:	b087      	sub	sp, #28
 81025e0:	af00      	add	r7, sp, #0
 81025e2:	60f8      	str	r0, [r7, #12]
 81025e4:	60b9      	str	r1, [r7, #8]
 81025e6:	607a      	str	r2, [r7, #4]
 81025e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	3360      	adds	r3, #96	@ 0x60
 81025ee:	461a      	mov	r2, r3
 81025f0:	68bb      	ldr	r3, [r7, #8]
 81025f2:	009b      	lsls	r3, r3, #2
 81025f4:	4413      	add	r3, r2
 81025f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81025f8:	697b      	ldr	r3, [r7, #20]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102606:	683b      	ldr	r3, [r7, #0]
 8102608:	430b      	orrs	r3, r1
 810260a:	431a      	orrs	r2, r3
 810260c:	697b      	ldr	r3, [r7, #20]
 810260e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102610:	bf00      	nop
 8102612:	371c      	adds	r7, #28
 8102614:	46bd      	mov	sp, r7
 8102616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261a:	4770      	bx	lr

0810261c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810261c:	b480      	push	{r7}
 810261e:	b085      	sub	sp, #20
 8102620:	af00      	add	r7, sp, #0
 8102622:	60f8      	str	r0, [r7, #12]
 8102624:	60b9      	str	r1, [r7, #8]
 8102626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	691b      	ldr	r3, [r3, #16]
 810262c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102630:	68bb      	ldr	r3, [r7, #8]
 8102632:	f003 031f 	and.w	r3, r3, #31
 8102636:	6879      	ldr	r1, [r7, #4]
 8102638:	fa01 f303 	lsl.w	r3, r1, r3
 810263c:	431a      	orrs	r2, r3
 810263e:	68fb      	ldr	r3, [r7, #12]
 8102640:	611a      	str	r2, [r3, #16]
}
 8102642:	bf00      	nop
 8102644:	3714      	adds	r7, #20
 8102646:	46bd      	mov	sp, r7
 8102648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264c:	4770      	bx	lr

0810264e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810264e:	b480      	push	{r7}
 8102650:	b087      	sub	sp, #28
 8102652:	af00      	add	r7, sp, #0
 8102654:	60f8      	str	r0, [r7, #12]
 8102656:	60b9      	str	r1, [r7, #8]
 8102658:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810265a:	68fb      	ldr	r3, [r7, #12]
 810265c:	3360      	adds	r3, #96	@ 0x60
 810265e:	461a      	mov	r2, r3
 8102660:	68bb      	ldr	r3, [r7, #8]
 8102662:	009b      	lsls	r3, r3, #2
 8102664:	4413      	add	r3, r2
 8102666:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102668:	697b      	ldr	r3, [r7, #20]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	431a      	orrs	r2, r3
 8102674:	697b      	ldr	r3, [r7, #20]
 8102676:	601a      	str	r2, [r3, #0]
  }
}
 8102678:	bf00      	nop
 810267a:	371c      	adds	r7, #28
 810267c:	46bd      	mov	sp, r7
 810267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102682:	4770      	bx	lr

08102684 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102684:	b480      	push	{r7}
 8102686:	b083      	sub	sp, #12
 8102688:	af00      	add	r7, sp, #0
 810268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	68db      	ldr	r3, [r3, #12]
 8102690:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8102694:	2b00      	cmp	r3, #0
 8102696:	d101      	bne.n	810269c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102698:	2301      	movs	r3, #1
 810269a:	e000      	b.n	810269e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 810269c:	2300      	movs	r3, #0
}
 810269e:	4618      	mov	r0, r3
 81026a0:	370c      	adds	r7, #12
 81026a2:	46bd      	mov	sp, r7
 81026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026a8:	4770      	bx	lr

081026aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81026aa:	b480      	push	{r7}
 81026ac:	b087      	sub	sp, #28
 81026ae:	af00      	add	r7, sp, #0
 81026b0:	60f8      	str	r0, [r7, #12]
 81026b2:	60b9      	str	r1, [r7, #8]
 81026b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81026b6:	68fb      	ldr	r3, [r7, #12]
 81026b8:	3330      	adds	r3, #48	@ 0x30
 81026ba:	461a      	mov	r2, r3
 81026bc:	68bb      	ldr	r3, [r7, #8]
 81026be:	0a1b      	lsrs	r3, r3, #8
 81026c0:	009b      	lsls	r3, r3, #2
 81026c2:	f003 030c 	and.w	r3, r3, #12
 81026c6:	4413      	add	r3, r2
 81026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81026ca:	697b      	ldr	r3, [r7, #20]
 81026cc:	681a      	ldr	r2, [r3, #0]
 81026ce:	68bb      	ldr	r3, [r7, #8]
 81026d0:	f003 031f 	and.w	r3, r3, #31
 81026d4:	211f      	movs	r1, #31
 81026d6:	fa01 f303 	lsl.w	r3, r1, r3
 81026da:	43db      	mvns	r3, r3
 81026dc:	401a      	ands	r2, r3
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	0e9b      	lsrs	r3, r3, #26
 81026e2:	f003 011f 	and.w	r1, r3, #31
 81026e6:	68bb      	ldr	r3, [r7, #8]
 81026e8:	f003 031f 	and.w	r3, r3, #31
 81026ec:	fa01 f303 	lsl.w	r3, r1, r3
 81026f0:	431a      	orrs	r2, r3
 81026f2:	697b      	ldr	r3, [r7, #20]
 81026f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81026f6:	bf00      	nop
 81026f8:	371c      	adds	r7, #28
 81026fa:	46bd      	mov	sp, r7
 81026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102700:	4770      	bx	lr

08102702 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102702:	b480      	push	{r7}
 8102704:	b087      	sub	sp, #28
 8102706:	af00      	add	r7, sp, #0
 8102708:	60f8      	str	r0, [r7, #12]
 810270a:	60b9      	str	r1, [r7, #8]
 810270c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810270e:	68fb      	ldr	r3, [r7, #12]
 8102710:	3314      	adds	r3, #20
 8102712:	461a      	mov	r2, r3
 8102714:	68bb      	ldr	r3, [r7, #8]
 8102716:	0e5b      	lsrs	r3, r3, #25
 8102718:	009b      	lsls	r3, r3, #2
 810271a:	f003 0304 	and.w	r3, r3, #4
 810271e:	4413      	add	r3, r2
 8102720:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102722:	697b      	ldr	r3, [r7, #20]
 8102724:	681a      	ldr	r2, [r3, #0]
 8102726:	68bb      	ldr	r3, [r7, #8]
 8102728:	0d1b      	lsrs	r3, r3, #20
 810272a:	f003 031f 	and.w	r3, r3, #31
 810272e:	2107      	movs	r1, #7
 8102730:	fa01 f303 	lsl.w	r3, r1, r3
 8102734:	43db      	mvns	r3, r3
 8102736:	401a      	ands	r2, r3
 8102738:	68bb      	ldr	r3, [r7, #8]
 810273a:	0d1b      	lsrs	r3, r3, #20
 810273c:	f003 031f 	and.w	r3, r3, #31
 8102740:	6879      	ldr	r1, [r7, #4]
 8102742:	fa01 f303 	lsl.w	r3, r1, r3
 8102746:	431a      	orrs	r2, r3
 8102748:	697b      	ldr	r3, [r7, #20]
 810274a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810274c:	bf00      	nop
 810274e:	371c      	adds	r7, #28
 8102750:	46bd      	mov	sp, r7
 8102752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102756:	4770      	bx	lr

08102758 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102758:	b480      	push	{r7}
 810275a:	b085      	sub	sp, #20
 810275c:	af00      	add	r7, sp, #0
 810275e:	60f8      	str	r0, [r7, #12]
 8102760:	60b9      	str	r1, [r7, #8]
 8102762:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102764:	68fb      	ldr	r3, [r7, #12]
 8102766:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 810276a:	68bb      	ldr	r3, [r7, #8]
 810276c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102770:	43db      	mvns	r3, r3
 8102772:	401a      	ands	r2, r3
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	f003 0318 	and.w	r3, r3, #24
 810277a:	4908      	ldr	r1, [pc, #32]	@ (810279c <LL_ADC_SetChannelSingleDiff+0x44>)
 810277c:	40d9      	lsrs	r1, r3
 810277e:	68bb      	ldr	r3, [r7, #8]
 8102780:	400b      	ands	r3, r1
 8102782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102786:	431a      	orrs	r2, r3
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 810278e:	bf00      	nop
 8102790:	3714      	adds	r7, #20
 8102792:	46bd      	mov	sp, r7
 8102794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102798:	4770      	bx	lr
 810279a:	bf00      	nop
 810279c:	000fffff 	.word	0x000fffff

081027a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81027a0:	b480      	push	{r7}
 81027a2:	b083      	sub	sp, #12
 81027a4:	af00      	add	r7, sp, #0
 81027a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	689b      	ldr	r3, [r3, #8]
 81027ac:	f003 031f 	and.w	r3, r3, #31
}
 81027b0:	4618      	mov	r0, r3
 81027b2:	370c      	adds	r7, #12
 81027b4:	46bd      	mov	sp, r7
 81027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ba:	4770      	bx	lr

081027bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81027bc:	b480      	push	{r7}
 81027be:	b083      	sub	sp, #12
 81027c0:	af00      	add	r7, sp, #0
 81027c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	689b      	ldr	r3, [r3, #8]
 81027c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 81027cc:	4618      	mov	r0, r3
 81027ce:	370c      	adds	r7, #12
 81027d0:	46bd      	mov	sp, r7
 81027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d6:	4770      	bx	lr

081027d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81027d8:	b480      	push	{r7}
 81027da:	b083      	sub	sp, #12
 81027dc:	af00      	add	r7, sp, #0
 81027de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	689b      	ldr	r3, [r3, #8]
 81027e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 81027e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81027ec:	687a      	ldr	r2, [r7, #4]
 81027ee:	6093      	str	r3, [r2, #8]
}
 81027f0:	bf00      	nop
 81027f2:	370c      	adds	r7, #12
 81027f4:	46bd      	mov	sp, r7
 81027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027fa:	4770      	bx	lr

081027fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81027fc:	b480      	push	{r7}
 81027fe:	b083      	sub	sp, #12
 8102800:	af00      	add	r7, sp, #0
 8102802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	689b      	ldr	r3, [r3, #8]
 8102808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810280c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102810:	d101      	bne.n	8102816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102812:	2301      	movs	r3, #1
 8102814:	e000      	b.n	8102818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102816:	2300      	movs	r3, #0
}
 8102818:	4618      	mov	r0, r3
 810281a:	370c      	adds	r7, #12
 810281c:	46bd      	mov	sp, r7
 810281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102822:	4770      	bx	lr

08102824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102824:	b480      	push	{r7}
 8102826:	b083      	sub	sp, #12
 8102828:	af00      	add	r7, sp, #0
 810282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	689b      	ldr	r3, [r3, #8]
 8102830:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102838:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102840:	bf00      	nop
 8102842:	370c      	adds	r7, #12
 8102844:	46bd      	mov	sp, r7
 8102846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810284a:	4770      	bx	lr

0810284c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810284c:	b480      	push	{r7}
 810284e:	b083      	sub	sp, #12
 8102850:	af00      	add	r7, sp, #0
 8102852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	689b      	ldr	r3, [r3, #8]
 8102858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810285c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102860:	d101      	bne.n	8102866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102862:	2301      	movs	r3, #1
 8102864:	e000      	b.n	8102868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102866:	2300      	movs	r3, #0
}
 8102868:	4618      	mov	r0, r3
 810286a:	370c      	adds	r7, #12
 810286c:	46bd      	mov	sp, r7
 810286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102872:	4770      	bx	lr

08102874 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8102874:	b480      	push	{r7}
 8102876:	b083      	sub	sp, #12
 8102878:	af00      	add	r7, sp, #0
 810287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	689b      	ldr	r3, [r3, #8]
 8102880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102888:	f043 0201 	orr.w	r2, r3, #1
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102890:	bf00      	nop
 8102892:	370c      	adds	r7, #12
 8102894:	46bd      	mov	sp, r7
 8102896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810289a:	4770      	bx	lr

0810289c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810289c:	b480      	push	{r7}
 810289e:	b083      	sub	sp, #12
 81028a0:	af00      	add	r7, sp, #0
 81028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	689b      	ldr	r3, [r3, #8]
 81028a8:	f003 0301 	and.w	r3, r3, #1
 81028ac:	2b01      	cmp	r3, #1
 81028ae:	d101      	bne.n	81028b4 <LL_ADC_IsEnabled+0x18>
 81028b0:	2301      	movs	r3, #1
 81028b2:	e000      	b.n	81028b6 <LL_ADC_IsEnabled+0x1a>
 81028b4:	2300      	movs	r3, #0
}
 81028b6:	4618      	mov	r0, r3
 81028b8:	370c      	adds	r7, #12
 81028ba:	46bd      	mov	sp, r7
 81028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c0:	4770      	bx	lr

081028c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 81028c2:	b480      	push	{r7}
 81028c4:	b083      	sub	sp, #12
 81028c6:	af00      	add	r7, sp, #0
 81028c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	689b      	ldr	r3, [r3, #8]
 81028ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81028d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81028d6:	f043 0204 	orr.w	r2, r3, #4
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 81028de:	bf00      	nop
 81028e0:	370c      	adds	r7, #12
 81028e2:	46bd      	mov	sp, r7
 81028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e8:	4770      	bx	lr

081028ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81028ea:	b480      	push	{r7}
 81028ec:	b083      	sub	sp, #12
 81028ee:	af00      	add	r7, sp, #0
 81028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	689b      	ldr	r3, [r3, #8]
 81028f6:	f003 0304 	and.w	r3, r3, #4
 81028fa:	2b04      	cmp	r3, #4
 81028fc:	d101      	bne.n	8102902 <LL_ADC_REG_IsConversionOngoing+0x18>
 81028fe:	2301      	movs	r3, #1
 8102900:	e000      	b.n	8102904 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102902:	2300      	movs	r3, #0
}
 8102904:	4618      	mov	r0, r3
 8102906:	370c      	adds	r7, #12
 8102908:	46bd      	mov	sp, r7
 810290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290e:	4770      	bx	lr

08102910 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102910:	b480      	push	{r7}
 8102912:	b083      	sub	sp, #12
 8102914:	af00      	add	r7, sp, #0
 8102916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	689b      	ldr	r3, [r3, #8]
 810291c:	f003 0308 	and.w	r3, r3, #8
 8102920:	2b08      	cmp	r3, #8
 8102922:	d101      	bne.n	8102928 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102924:	2301      	movs	r3, #1
 8102926:	e000      	b.n	810292a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102928:	2300      	movs	r3, #0
}
 810292a:	4618      	mov	r0, r3
 810292c:	370c      	adds	r7, #12
 810292e:	46bd      	mov	sp, r7
 8102930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102934:	4770      	bx	lr
	...

08102938 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102938:	b590      	push	{r4, r7, lr}
 810293a:	b089      	sub	sp, #36	@ 0x24
 810293c:	af00      	add	r7, sp, #0
 810293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102940:	2300      	movs	r3, #0
 8102942:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102944:	2300      	movs	r3, #0
 8102946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	2b00      	cmp	r3, #0
 810294c:	d101      	bne.n	8102952 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810294e:	2301      	movs	r3, #1
 8102950:	e18f      	b.n	8102c72 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	68db      	ldr	r3, [r3, #12]
 8102956:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810295c:	2b00      	cmp	r3, #0
 810295e:	d109      	bne.n	8102974 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102960:	6878      	ldr	r0, [r7, #4]
 8102962:	f7ff fa71 	bl	8101e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	2200      	movs	r2, #0
 810296a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	2200      	movs	r2, #0
 8102970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	4618      	mov	r0, r3
 810297a:	f7ff ff3f 	bl	81027fc <LL_ADC_IsDeepPowerDownEnabled>
 810297e:	4603      	mov	r3, r0
 8102980:	2b00      	cmp	r3, #0
 8102982:	d004      	beq.n	810298e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4618      	mov	r0, r3
 810298a:	f7ff ff25 	bl	81027d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4618      	mov	r0, r3
 8102994:	f7ff ff5a 	bl	810284c <LL_ADC_IsInternalRegulatorEnabled>
 8102998:	4603      	mov	r3, r0
 810299a:	2b00      	cmp	r3, #0
 810299c:	d114      	bne.n	81029c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4618      	mov	r0, r3
 81029a4:	f7ff ff3e 	bl	8102824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81029a8:	4b88      	ldr	r3, [pc, #544]	@ (8102bcc <HAL_ADC_Init+0x294>)
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	099b      	lsrs	r3, r3, #6
 81029ae:	4a88      	ldr	r2, [pc, #544]	@ (8102bd0 <HAL_ADC_Init+0x298>)
 81029b0:	fba2 2303 	umull	r2, r3, r2, r3
 81029b4:	099b      	lsrs	r3, r3, #6
 81029b6:	3301      	adds	r3, #1
 81029b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81029ba:	e002      	b.n	81029c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81029bc:	68bb      	ldr	r3, [r7, #8]
 81029be:	3b01      	subs	r3, #1
 81029c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81029c2:	68bb      	ldr	r3, [r7, #8]
 81029c4:	2b00      	cmp	r3, #0
 81029c6:	d1f9      	bne.n	81029bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	4618      	mov	r0, r3
 81029ce:	f7ff ff3d 	bl	810284c <LL_ADC_IsInternalRegulatorEnabled>
 81029d2:	4603      	mov	r3, r0
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d10d      	bne.n	81029f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029dc:	f043 0210 	orr.w	r2, r3, #16
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81029e8:	f043 0201 	orr.w	r2, r3, #1
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81029f0:	2301      	movs	r3, #1
 81029f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4618      	mov	r0, r3
 81029fa:	f7ff ff76 	bl	81028ea <LL_ADC_REG_IsConversionOngoing>
 81029fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a04:	f003 0310 	and.w	r3, r3, #16
 8102a08:	2b00      	cmp	r3, #0
 8102a0a:	f040 8129 	bne.w	8102c60 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102a0e:	697b      	ldr	r3, [r7, #20]
 8102a10:	2b00      	cmp	r3, #0
 8102a12:	f040 8125 	bne.w	8102c60 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a1a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8102a1e:	f043 0202 	orr.w	r2, r3, #2
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4618      	mov	r0, r3
 8102a2c:	f7ff ff36 	bl	810289c <LL_ADC_IsEnabled>
 8102a30:	4603      	mov	r3, r0
 8102a32:	2b00      	cmp	r3, #0
 8102a34:	d136      	bne.n	8102aa4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	4a66      	ldr	r2, [pc, #408]	@ (8102bd4 <HAL_ADC_Init+0x29c>)
 8102a3c:	4293      	cmp	r3, r2
 8102a3e:	d004      	beq.n	8102a4a <HAL_ADC_Init+0x112>
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a64      	ldr	r2, [pc, #400]	@ (8102bd8 <HAL_ADC_Init+0x2a0>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d10e      	bne.n	8102a68 <HAL_ADC_Init+0x130>
 8102a4a:	4862      	ldr	r0, [pc, #392]	@ (8102bd4 <HAL_ADC_Init+0x29c>)
 8102a4c:	f7ff ff26 	bl	810289c <LL_ADC_IsEnabled>
 8102a50:	4604      	mov	r4, r0
 8102a52:	4861      	ldr	r0, [pc, #388]	@ (8102bd8 <HAL_ADC_Init+0x2a0>)
 8102a54:	f7ff ff22 	bl	810289c <LL_ADC_IsEnabled>
 8102a58:	4603      	mov	r3, r0
 8102a5a:	4323      	orrs	r3, r4
 8102a5c:	2b00      	cmp	r3, #0
 8102a5e:	bf0c      	ite	eq
 8102a60:	2301      	moveq	r3, #1
 8102a62:	2300      	movne	r3, #0
 8102a64:	b2db      	uxtb	r3, r3
 8102a66:	e008      	b.n	8102a7a <HAL_ADC_Init+0x142>
 8102a68:	485c      	ldr	r0, [pc, #368]	@ (8102bdc <HAL_ADC_Init+0x2a4>)
 8102a6a:	f7ff ff17 	bl	810289c <LL_ADC_IsEnabled>
 8102a6e:	4603      	mov	r3, r0
 8102a70:	2b00      	cmp	r3, #0
 8102a72:	bf0c      	ite	eq
 8102a74:	2301      	moveq	r3, #1
 8102a76:	2300      	movne	r3, #0
 8102a78:	b2db      	uxtb	r3, r3
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d012      	beq.n	8102aa4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	4a54      	ldr	r2, [pc, #336]	@ (8102bd4 <HAL_ADC_Init+0x29c>)
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d004      	beq.n	8102a92 <HAL_ADC_Init+0x15a>
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	4a52      	ldr	r2, [pc, #328]	@ (8102bd8 <HAL_ADC_Init+0x2a0>)
 8102a8e:	4293      	cmp	r3, r2
 8102a90:	d101      	bne.n	8102a96 <HAL_ADC_Init+0x15e>
 8102a92:	4a53      	ldr	r2, [pc, #332]	@ (8102be0 <HAL_ADC_Init+0x2a8>)
 8102a94:	e000      	b.n	8102a98 <HAL_ADC_Init+0x160>
 8102a96:	4a53      	ldr	r2, [pc, #332]	@ (8102be4 <HAL_ADC_Init+0x2ac>)
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	685b      	ldr	r3, [r3, #4]
 8102a9c:	4619      	mov	r1, r3
 8102a9e:	4610      	mov	r0, r2
 8102aa0:	f7ff fd68 	bl	8102574 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102aa4:	f7ff fd5a 	bl	810255c <HAL_GetREVID>
 8102aa8:	4603      	mov	r3, r0
 8102aaa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102aae:	4293      	cmp	r3, r2
 8102ab0:	d914      	bls.n	8102adc <HAL_ADC_Init+0x1a4>
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	689b      	ldr	r3, [r3, #8]
 8102ab6:	2b10      	cmp	r3, #16
 8102ab8:	d110      	bne.n	8102adc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	7d5b      	ldrb	r3, [r3, #21]
 8102abe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ac4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102aca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	7f1b      	ldrb	r3, [r3, #28]
 8102ad0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102ad2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ad4:	f043 030c 	orr.w	r3, r3, #12
 8102ad8:	61bb      	str	r3, [r7, #24]
 8102ada:	e00d      	b.n	8102af8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	7d5b      	ldrb	r3, [r3, #21]
 8102ae0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ae6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102aec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	7f1b      	ldrb	r3, [r3, #28]
 8102af2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102af4:	4313      	orrs	r3, r2
 8102af6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	7f1b      	ldrb	r3, [r3, #28]
 8102afc:	2b01      	cmp	r3, #1
 8102afe:	d106      	bne.n	8102b0e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	6a1b      	ldr	r3, [r3, #32]
 8102b04:	3b01      	subs	r3, #1
 8102b06:	045b      	lsls	r3, r3, #17
 8102b08:	69ba      	ldr	r2, [r7, #24]
 8102b0a:	4313      	orrs	r3, r2
 8102b0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b12:	2b00      	cmp	r3, #0
 8102b14:	d009      	beq.n	8102b2a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b1a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102b22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102b24:	69ba      	ldr	r2, [r7, #24]
 8102b26:	4313      	orrs	r3, r2
 8102b28:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	68da      	ldr	r2, [r3, #12]
 8102b30:	4b2d      	ldr	r3, [pc, #180]	@ (8102be8 <HAL_ADC_Init+0x2b0>)
 8102b32:	4013      	ands	r3, r2
 8102b34:	687a      	ldr	r2, [r7, #4]
 8102b36:	6812      	ldr	r2, [r2, #0]
 8102b38:	69b9      	ldr	r1, [r7, #24]
 8102b3a:	430b      	orrs	r3, r1
 8102b3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102b3e:	687b      	ldr	r3, [r7, #4]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	4618      	mov	r0, r3
 8102b44:	f7ff fed1 	bl	81028ea <LL_ADC_REG_IsConversionOngoing>
 8102b48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4618      	mov	r0, r3
 8102b50:	f7ff fede 	bl	8102910 <LL_ADC_INJ_IsConversionOngoing>
 8102b54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102b56:	693b      	ldr	r3, [r7, #16]
 8102b58:	2b00      	cmp	r3, #0
 8102b5a:	d15f      	bne.n	8102c1c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102b5c:	68fb      	ldr	r3, [r7, #12]
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	d15c      	bne.n	8102c1c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	7d1b      	ldrb	r3, [r3, #20]
 8102b66:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8102b6c:	4313      	orrs	r3, r2
 8102b6e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	68db      	ldr	r3, [r3, #12]
 8102b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8102b7a:	f023 0303 	bic.w	r3, r3, #3
 8102b7e:	687a      	ldr	r2, [r7, #4]
 8102b80:	6812      	ldr	r2, [r2, #0]
 8102b82:	69b9      	ldr	r1, [r7, #24]
 8102b84:	430b      	orrs	r3, r1
 8102b86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102b8e:	2b01      	cmp	r3, #1
 8102b90:	d12e      	bne.n	8102bf0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b96:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	691a      	ldr	r2, [r3, #16]
 8102b9e:	4b13      	ldr	r3, [pc, #76]	@ (8102bec <HAL_ADC_Init+0x2b4>)
 8102ba0:	4013      	ands	r3, r2
 8102ba2:	687a      	ldr	r2, [r7, #4]
 8102ba4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8102ba6:	3a01      	subs	r2, #1
 8102ba8:	0411      	lsls	r1, r2, #16
 8102baa:	687a      	ldr	r2, [r7, #4]
 8102bac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8102bae:	4311      	orrs	r1, r2
 8102bb0:	687a      	ldr	r2, [r7, #4]
 8102bb2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102bb4:	4311      	orrs	r1, r2
 8102bb6:	687a      	ldr	r2, [r7, #4]
 8102bb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8102bba:	430a      	orrs	r2, r1
 8102bbc:	431a      	orrs	r2, r3
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	f042 0201 	orr.w	r2, r2, #1
 8102bc6:	611a      	str	r2, [r3, #16]
 8102bc8:	e01a      	b.n	8102c00 <HAL_ADC_Init+0x2c8>
 8102bca:	bf00      	nop
 8102bcc:	10000000 	.word	0x10000000
 8102bd0:	053e2d63 	.word	0x053e2d63
 8102bd4:	40022000 	.word	0x40022000
 8102bd8:	40022100 	.word	0x40022100
 8102bdc:	58026000 	.word	0x58026000
 8102be0:	40022300 	.word	0x40022300
 8102be4:	58026300 	.word	0x58026300
 8102be8:	fff0c003 	.word	0xfff0c003
 8102bec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	691a      	ldr	r2, [r3, #16]
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	f022 0201 	bic.w	r2, r2, #1
 8102bfe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	691b      	ldr	r3, [r3, #16]
 8102c06:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	430a      	orrs	r2, r1
 8102c14:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102c16:	6878      	ldr	r0, [r7, #4]
 8102c18:	f000 fde2 	bl	81037e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	68db      	ldr	r3, [r3, #12]
 8102c20:	2b01      	cmp	r3, #1
 8102c22:	d10c      	bne.n	8102c3e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102c2a:	f023 010f 	bic.w	r1, r3, #15
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	699b      	ldr	r3, [r3, #24]
 8102c32:	1e5a      	subs	r2, r3, #1
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	430a      	orrs	r2, r1
 8102c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8102c3c:	e007      	b.n	8102c4e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	f022 020f 	bic.w	r2, r2, #15
 8102c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c52:	f023 0303 	bic.w	r3, r3, #3
 8102c56:	f043 0201 	orr.w	r2, r3, #1
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8102c5e:	e007      	b.n	8102c70 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c64:	f043 0210 	orr.w	r2, r3, #16
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102c6c:	2301      	movs	r3, #1
 8102c6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8102c72:	4618      	mov	r0, r3
 8102c74:	3724      	adds	r7, #36	@ 0x24
 8102c76:	46bd      	mov	sp, r7
 8102c78:	bd90      	pop	{r4, r7, pc}
 8102c7a:	bf00      	nop

08102c7c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8102c7c:	b580      	push	{r7, lr}
 8102c7e:	b086      	sub	sp, #24
 8102c80:	af00      	add	r7, sp, #0
 8102c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	4a5d      	ldr	r2, [pc, #372]	@ (8102e00 <HAL_ADC_Start+0x184>)
 8102c8a:	4293      	cmp	r3, r2
 8102c8c:	d004      	beq.n	8102c98 <HAL_ADC_Start+0x1c>
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	681b      	ldr	r3, [r3, #0]
 8102c92:	4a5c      	ldr	r2, [pc, #368]	@ (8102e04 <HAL_ADC_Start+0x188>)
 8102c94:	4293      	cmp	r3, r2
 8102c96:	d101      	bne.n	8102c9c <HAL_ADC_Start+0x20>
 8102c98:	4b5b      	ldr	r3, [pc, #364]	@ (8102e08 <HAL_ADC_Start+0x18c>)
 8102c9a:	e000      	b.n	8102c9e <HAL_ADC_Start+0x22>
 8102c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8102e0c <HAL_ADC_Start+0x190>)
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	f7ff fd7e 	bl	81027a0 <LL_ADC_GetMultimode>
 8102ca4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4618      	mov	r0, r3
 8102cac:	f7ff fe1d 	bl	81028ea <LL_ADC_REG_IsConversionOngoing>
 8102cb0:	4603      	mov	r3, r0
 8102cb2:	2b00      	cmp	r3, #0
 8102cb4:	f040 809c 	bne.w	8102df0 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8102cbe:	2b01      	cmp	r3, #1
 8102cc0:	d101      	bne.n	8102cc6 <HAL_ADC_Start+0x4a>
 8102cc2:	2302      	movs	r3, #2
 8102cc4:	e097      	b.n	8102df6 <HAL_ADC_Start+0x17a>
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	2201      	movs	r2, #1
 8102cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8102cce:	6878      	ldr	r0, [r7, #4]
 8102cd0:	f000 fcfc 	bl	81036cc <ADC_Enable>
 8102cd4:	4603      	mov	r3, r0
 8102cd6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8102cd8:	7dfb      	ldrb	r3, [r7, #23]
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	f040 8083 	bne.w	8102de6 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ce4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102ce8:	f023 0301 	bic.w	r3, r3, #1
 8102cec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	4a42      	ldr	r2, [pc, #264]	@ (8102e04 <HAL_ADC_Start+0x188>)
 8102cfa:	4293      	cmp	r3, r2
 8102cfc:	d002      	beq.n	8102d04 <HAL_ADC_Start+0x88>
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	e000      	b.n	8102d06 <HAL_ADC_Start+0x8a>
 8102d04:	4b3e      	ldr	r3, [pc, #248]	@ (8102e00 <HAL_ADC_Start+0x184>)
 8102d06:	687a      	ldr	r2, [r7, #4]
 8102d08:	6812      	ldr	r2, [r2, #0]
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d002      	beq.n	8102d14 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102d0e:	693b      	ldr	r3, [r7, #16]
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d105      	bne.n	8102d20 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102d2c:	d106      	bne.n	8102d3c <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d32:	f023 0206 	bic.w	r2, r3, #6
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8102d3a:	e002      	b.n	8102d42 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	2200      	movs	r2, #0
 8102d40:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	221c      	movs	r2, #28
 8102d48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	2200      	movs	r2, #0
 8102d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a2b      	ldr	r2, [pc, #172]	@ (8102e04 <HAL_ADC_Start+0x188>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d002      	beq.n	8102d62 <HAL_ADC_Start+0xe6>
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	e000      	b.n	8102d64 <HAL_ADC_Start+0xe8>
 8102d62:	4b27      	ldr	r3, [pc, #156]	@ (8102e00 <HAL_ADC_Start+0x184>)
 8102d64:	687a      	ldr	r2, [r7, #4]
 8102d66:	6812      	ldr	r2, [r2, #0]
 8102d68:	4293      	cmp	r3, r2
 8102d6a:	d008      	beq.n	8102d7e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102d6c:	693b      	ldr	r3, [r7, #16]
 8102d6e:	2b00      	cmp	r3, #0
 8102d70:	d005      	beq.n	8102d7e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102d72:	693b      	ldr	r3, [r7, #16]
 8102d74:	2b05      	cmp	r3, #5
 8102d76:	d002      	beq.n	8102d7e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102d78:	693b      	ldr	r3, [r7, #16]
 8102d7a:	2b09      	cmp	r3, #9
 8102d7c:	d114      	bne.n	8102da8 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	68db      	ldr	r3, [r3, #12]
 8102d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102d88:	2b00      	cmp	r3, #0
 8102d8a:	d007      	beq.n	8102d9c <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8102d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	4618      	mov	r0, r3
 8102da2:	f7ff fd8e 	bl	81028c2 <LL_ADC_REG_StartConversion>
 8102da6:	e025      	b.n	8102df4 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102dac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a12      	ldr	r2, [pc, #72]	@ (8102e04 <HAL_ADC_Start+0x188>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d002      	beq.n	8102dc4 <HAL_ADC_Start+0x148>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	e000      	b.n	8102dc6 <HAL_ADC_Start+0x14a>
 8102dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8102e00 <HAL_ADC_Start+0x184>)
 8102dc6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	68db      	ldr	r3, [r3, #12]
 8102dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102dd0:	2b00      	cmp	r3, #0
 8102dd2:	d00f      	beq.n	8102df4 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102dd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8102ddc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8102de4:	e006      	b.n	8102df4 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	2200      	movs	r2, #0
 8102dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8102dee:	e001      	b.n	8102df4 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102df0:	2302      	movs	r3, #2
 8102df2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8102df6:	4618      	mov	r0, r3
 8102df8:	3718      	adds	r7, #24
 8102dfa:	46bd      	mov	sp, r7
 8102dfc:	bd80      	pop	{r7, pc}
 8102dfe:	bf00      	nop
 8102e00:	40022000 	.word	0x40022000
 8102e04:	40022100 	.word	0x40022100
 8102e08:	40022300 	.word	0x40022300
 8102e0c:	58026300 	.word	0x58026300

08102e10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8102e10:	b580      	push	{r7, lr}
 8102e12:	b088      	sub	sp, #32
 8102e14:	af00      	add	r7, sp, #0
 8102e16:	6078      	str	r0, [r7, #4]
 8102e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	4a72      	ldr	r2, [pc, #456]	@ (8102fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8102e20:	4293      	cmp	r3, r2
 8102e22:	d004      	beq.n	8102e2e <HAL_ADC_PollForConversion+0x1e>
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	4a70      	ldr	r2, [pc, #448]	@ (8102fec <HAL_ADC_PollForConversion+0x1dc>)
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d101      	bne.n	8102e32 <HAL_ADC_PollForConversion+0x22>
 8102e2e:	4b70      	ldr	r3, [pc, #448]	@ (8102ff0 <HAL_ADC_PollForConversion+0x1e0>)
 8102e30:	e000      	b.n	8102e34 <HAL_ADC_PollForConversion+0x24>
 8102e32:	4b70      	ldr	r3, [pc, #448]	@ (8102ff4 <HAL_ADC_PollForConversion+0x1e4>)
 8102e34:	4618      	mov	r0, r3
 8102e36:	f7ff fcb3 	bl	81027a0 <LL_ADC_GetMultimode>
 8102e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	691b      	ldr	r3, [r3, #16]
 8102e40:	2b08      	cmp	r3, #8
 8102e42:	d102      	bne.n	8102e4a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8102e44:	2308      	movs	r3, #8
 8102e46:	61fb      	str	r3, [r7, #28]
 8102e48:	e037      	b.n	8102eba <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102e4a:	697b      	ldr	r3, [r7, #20]
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	d005      	beq.n	8102e5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102e50:	697b      	ldr	r3, [r7, #20]
 8102e52:	2b05      	cmp	r3, #5
 8102e54:	d002      	beq.n	8102e5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102e56:	697b      	ldr	r3, [r7, #20]
 8102e58:	2b09      	cmp	r3, #9
 8102e5a:	d111      	bne.n	8102e80 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	68db      	ldr	r3, [r3, #12]
 8102e62:	f003 0301 	and.w	r3, r3, #1
 8102e66:	2b00      	cmp	r3, #0
 8102e68:	d007      	beq.n	8102e7a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e6e:	f043 0220 	orr.w	r2, r3, #32
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8102e76:	2301      	movs	r3, #1
 8102e78:	e0b1      	b.n	8102fde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8102e7a:	2304      	movs	r3, #4
 8102e7c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8102e7e:	e01c      	b.n	8102eba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a58      	ldr	r2, [pc, #352]	@ (8102fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d004      	beq.n	8102e94 <HAL_ADC_PollForConversion+0x84>
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a57      	ldr	r2, [pc, #348]	@ (8102fec <HAL_ADC_PollForConversion+0x1dc>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d101      	bne.n	8102e98 <HAL_ADC_PollForConversion+0x88>
 8102e94:	4b56      	ldr	r3, [pc, #344]	@ (8102ff0 <HAL_ADC_PollForConversion+0x1e0>)
 8102e96:	e000      	b.n	8102e9a <HAL_ADC_PollForConversion+0x8a>
 8102e98:	4b56      	ldr	r3, [pc, #344]	@ (8102ff4 <HAL_ADC_PollForConversion+0x1e4>)
 8102e9a:	4618      	mov	r0, r3
 8102e9c:	f7ff fc8e 	bl	81027bc <LL_ADC_GetMultiDMATransfer>
 8102ea0:	4603      	mov	r3, r0
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	d007      	beq.n	8102eb6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102eaa:	f043 0220 	orr.w	r2, r3, #32
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8102eb2:	2301      	movs	r3, #1
 8102eb4:	e093      	b.n	8102fde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8102eb6:	2304      	movs	r3, #4
 8102eb8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8102eba:	f7ff fb43 	bl	8102544 <HAL_GetTick>
 8102ebe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102ec0:	e021      	b.n	8102f06 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ec8:	d01d      	beq.n	8102f06 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8102eca:	f7ff fb3b 	bl	8102544 <HAL_GetTick>
 8102ece:	4602      	mov	r2, r0
 8102ed0:	693b      	ldr	r3, [r7, #16]
 8102ed2:	1ad3      	subs	r3, r2, r3
 8102ed4:	683a      	ldr	r2, [r7, #0]
 8102ed6:	429a      	cmp	r2, r3
 8102ed8:	d302      	bcc.n	8102ee0 <HAL_ADC_PollForConversion+0xd0>
 8102eda:	683b      	ldr	r3, [r7, #0]
 8102edc:	2b00      	cmp	r3, #0
 8102ede:	d112      	bne.n	8102f06 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	681a      	ldr	r2, [r3, #0]
 8102ee6:	69fb      	ldr	r3, [r7, #28]
 8102ee8:	4013      	ands	r3, r2
 8102eea:	2b00      	cmp	r3, #0
 8102eec:	d10b      	bne.n	8102f06 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ef2:	f043 0204 	orr.w	r2, r3, #4
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	2200      	movs	r2, #0
 8102efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8102f02:	2303      	movs	r3, #3
 8102f04:	e06b      	b.n	8102fde <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	681a      	ldr	r2, [r3, #0]
 8102f0c:	69fb      	ldr	r3, [r7, #28]
 8102f0e:	4013      	ands	r3, r2
 8102f10:	2b00      	cmp	r3, #0
 8102f12:	d0d6      	beq.n	8102ec2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	4618      	mov	r0, r3
 8102f26:	f7ff fbad 	bl	8102684 <LL_ADC_REG_IsTriggerSourceSWStart>
 8102f2a:	4603      	mov	r3, r0
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d01c      	beq.n	8102f6a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	7d5b      	ldrb	r3, [r3, #21]
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d118      	bne.n	8102f6a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	f003 0308 	and.w	r3, r3, #8
 8102f42:	2b08      	cmp	r3, #8
 8102f44:	d111      	bne.n	8102f6a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	d105      	bne.n	8102f6a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f62:	f043 0201 	orr.w	r2, r3, #1
 8102f66:	687b      	ldr	r3, [r7, #4]
 8102f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8102fec <HAL_ADC_PollForConversion+0x1dc>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d002      	beq.n	8102f7a <HAL_ADC_PollForConversion+0x16a>
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	e000      	b.n	8102f7c <HAL_ADC_PollForConversion+0x16c>
 8102f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8102fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8102f7c:	687a      	ldr	r2, [r7, #4]
 8102f7e:	6812      	ldr	r2, [r2, #0]
 8102f80:	4293      	cmp	r3, r2
 8102f82:	d008      	beq.n	8102f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102f84:	697b      	ldr	r3, [r7, #20]
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	d005      	beq.n	8102f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102f8a:	697b      	ldr	r3, [r7, #20]
 8102f8c:	2b05      	cmp	r3, #5
 8102f8e:	d002      	beq.n	8102f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102f90:	697b      	ldr	r3, [r7, #20]
 8102f92:	2b09      	cmp	r3, #9
 8102f94:	d104      	bne.n	8102fa0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	68db      	ldr	r3, [r3, #12]
 8102f9c:	61bb      	str	r3, [r7, #24]
 8102f9e:	e00c      	b.n	8102fba <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4a11      	ldr	r2, [pc, #68]	@ (8102fec <HAL_ADC_PollForConversion+0x1dc>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d002      	beq.n	8102fb0 <HAL_ADC_PollForConversion+0x1a0>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	e000      	b.n	8102fb2 <HAL_ADC_PollForConversion+0x1a2>
 8102fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8102fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8102fb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	68db      	ldr	r3, [r3, #12]
 8102fb8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8102fba:	69fb      	ldr	r3, [r7, #28]
 8102fbc:	2b08      	cmp	r3, #8
 8102fbe:	d104      	bne.n	8102fca <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	681b      	ldr	r3, [r3, #0]
 8102fc4:	2208      	movs	r2, #8
 8102fc6:	601a      	str	r2, [r3, #0]
 8102fc8:	e008      	b.n	8102fdc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8102fca:	69bb      	ldr	r3, [r7, #24]
 8102fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102fd0:	2b00      	cmp	r3, #0
 8102fd2:	d103      	bne.n	8102fdc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	220c      	movs	r2, #12
 8102fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8102fdc:	2300      	movs	r3, #0
}
 8102fde:	4618      	mov	r0, r3
 8102fe0:	3720      	adds	r7, #32
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	bd80      	pop	{r7, pc}
 8102fe6:	bf00      	nop
 8102fe8:	40022000 	.word	0x40022000
 8102fec:	40022100 	.word	0x40022100
 8102ff0:	40022300 	.word	0x40022300
 8102ff4:	58026300 	.word	0x58026300

08102ff8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8102ff8:	b480      	push	{r7}
 8102ffa:	b083      	sub	sp, #12
 8102ffc:	af00      	add	r7, sp, #0
 8102ffe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8103006:	4618      	mov	r0, r3
 8103008:	370c      	adds	r7, #12
 810300a:	46bd      	mov	sp, r7
 810300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103010:	4770      	bx	lr
	...

08103014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103014:	b590      	push	{r4, r7, lr}
 8103016:	b0a1      	sub	sp, #132	@ 0x84
 8103018:	af00      	add	r7, sp, #0
 810301a:	6078      	str	r0, [r7, #4]
 810301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810301e:	2300      	movs	r3, #0
 8103020:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103024:	2300      	movs	r3, #0
 8103026:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103028:	683b      	ldr	r3, [r7, #0]
 810302a:	68db      	ldr	r3, [r3, #12]
 810302c:	4a65      	ldr	r2, [pc, #404]	@ (81031c4 <HAL_ADC_ConfigChannel+0x1b0>)
 810302e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103036:	2b01      	cmp	r3, #1
 8103038:	d101      	bne.n	810303e <HAL_ADC_ConfigChannel+0x2a>
 810303a:	2302      	movs	r3, #2
 810303c:	e32e      	b.n	810369c <HAL_ADC_ConfigChannel+0x688>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	2201      	movs	r2, #1
 8103042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4618      	mov	r0, r3
 810304c:	f7ff fc4d 	bl	81028ea <LL_ADC_REG_IsConversionOngoing>
 8103050:	4603      	mov	r3, r0
 8103052:	2b00      	cmp	r3, #0
 8103054:	f040 8313 	bne.w	810367e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8103058:	683b      	ldr	r3, [r7, #0]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	2b00      	cmp	r3, #0
 810305e:	db2c      	blt.n	81030ba <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103060:	683b      	ldr	r3, [r7, #0]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103068:	2b00      	cmp	r3, #0
 810306a:	d108      	bne.n	810307e <HAL_ADC_ConfigChannel+0x6a>
 810306c:	683b      	ldr	r3, [r7, #0]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	0e9b      	lsrs	r3, r3, #26
 8103072:	f003 031f 	and.w	r3, r3, #31
 8103076:	2201      	movs	r2, #1
 8103078:	fa02 f303 	lsl.w	r3, r2, r3
 810307c:	e016      	b.n	81030ac <HAL_ADC_ConfigChannel+0x98>
 810307e:	683b      	ldr	r3, [r7, #0]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8103086:	fa93 f3a3 	rbit	r3, r3
 810308a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810308c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810308e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8103092:	2b00      	cmp	r3, #0
 8103094:	d101      	bne.n	810309a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8103096:	2320      	movs	r3, #32
 8103098:	e003      	b.n	81030a2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 810309a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810309c:	fab3 f383 	clz	r3, r3
 81030a0:	b2db      	uxtb	r3, r3
 81030a2:	f003 031f 	and.w	r3, r3, #31
 81030a6:	2201      	movs	r2, #1
 81030a8:	fa02 f303 	lsl.w	r3, r2, r3
 81030ac:	687a      	ldr	r2, [r7, #4]
 81030ae:	6812      	ldr	r2, [r2, #0]
 81030b0:	69d1      	ldr	r1, [r2, #28]
 81030b2:	687a      	ldr	r2, [r7, #4]
 81030b4:	6812      	ldr	r2, [r2, #0]
 81030b6:	430b      	orrs	r3, r1
 81030b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	6818      	ldr	r0, [r3, #0]
 81030be:	683b      	ldr	r3, [r7, #0]
 81030c0:	6859      	ldr	r1, [r3, #4]
 81030c2:	683b      	ldr	r3, [r7, #0]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	461a      	mov	r2, r3
 81030c8:	f7ff faef 	bl	81026aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4618      	mov	r0, r3
 81030d2:	f7ff fc0a 	bl	81028ea <LL_ADC_REG_IsConversionOngoing>
 81030d6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4618      	mov	r0, r3
 81030de:	f7ff fc17 	bl	8102910 <LL_ADC_INJ_IsConversionOngoing>
 81030e2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81030e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	f040 80b8 	bne.w	810325c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81030ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	f040 80b4 	bne.w	810325c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	6818      	ldr	r0, [r3, #0]
 81030f8:	683b      	ldr	r3, [r7, #0]
 81030fa:	6819      	ldr	r1, [r3, #0]
 81030fc:	683b      	ldr	r3, [r7, #0]
 81030fe:	689b      	ldr	r3, [r3, #8]
 8103100:	461a      	mov	r2, r3
 8103102:	f7ff fafe 	bl	8102702 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103106:	4b30      	ldr	r3, [pc, #192]	@ (81031c8 <HAL_ADC_ConfigChannel+0x1b4>)
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810310e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103112:	d10b      	bne.n	810312c <HAL_ADC_ConfigChannel+0x118>
 8103114:	683b      	ldr	r3, [r7, #0]
 8103116:	695a      	ldr	r2, [r3, #20]
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	68db      	ldr	r3, [r3, #12]
 810311e:	089b      	lsrs	r3, r3, #2
 8103120:	f003 0307 	and.w	r3, r3, #7
 8103124:	005b      	lsls	r3, r3, #1
 8103126:	fa02 f303 	lsl.w	r3, r2, r3
 810312a:	e01d      	b.n	8103168 <HAL_ADC_ConfigChannel+0x154>
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	68db      	ldr	r3, [r3, #12]
 8103132:	f003 0310 	and.w	r3, r3, #16
 8103136:	2b00      	cmp	r3, #0
 8103138:	d10b      	bne.n	8103152 <HAL_ADC_ConfigChannel+0x13e>
 810313a:	683b      	ldr	r3, [r7, #0]
 810313c:	695a      	ldr	r2, [r3, #20]
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	68db      	ldr	r3, [r3, #12]
 8103144:	089b      	lsrs	r3, r3, #2
 8103146:	f003 0307 	and.w	r3, r3, #7
 810314a:	005b      	lsls	r3, r3, #1
 810314c:	fa02 f303 	lsl.w	r3, r2, r3
 8103150:	e00a      	b.n	8103168 <HAL_ADC_ConfigChannel+0x154>
 8103152:	683b      	ldr	r3, [r7, #0]
 8103154:	695a      	ldr	r2, [r3, #20]
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	68db      	ldr	r3, [r3, #12]
 810315c:	089b      	lsrs	r3, r3, #2
 810315e:	f003 0304 	and.w	r3, r3, #4
 8103162:	005b      	lsls	r3, r3, #1
 8103164:	fa02 f303 	lsl.w	r3, r2, r3
 8103168:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810316a:	683b      	ldr	r3, [r7, #0]
 810316c:	691b      	ldr	r3, [r3, #16]
 810316e:	2b04      	cmp	r3, #4
 8103170:	d02c      	beq.n	81031cc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	6818      	ldr	r0, [r3, #0]
 8103176:	683b      	ldr	r3, [r7, #0]
 8103178:	6919      	ldr	r1, [r3, #16]
 810317a:	683b      	ldr	r3, [r7, #0]
 810317c:	681a      	ldr	r2, [r3, #0]
 810317e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103180:	f7ff fa2c 	bl	81025dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	6818      	ldr	r0, [r3, #0]
 8103188:	683b      	ldr	r3, [r7, #0]
 810318a:	6919      	ldr	r1, [r3, #16]
 810318c:	683b      	ldr	r3, [r7, #0]
 810318e:	7e5b      	ldrb	r3, [r3, #25]
 8103190:	2b01      	cmp	r3, #1
 8103192:	d102      	bne.n	810319a <HAL_ADC_ConfigChannel+0x186>
 8103194:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103198:	e000      	b.n	810319c <HAL_ADC_ConfigChannel+0x188>
 810319a:	2300      	movs	r3, #0
 810319c:	461a      	mov	r2, r3
 810319e:	f7ff fa56 	bl	810264e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	6818      	ldr	r0, [r3, #0]
 81031a6:	683b      	ldr	r3, [r7, #0]
 81031a8:	6919      	ldr	r1, [r3, #16]
 81031aa:	683b      	ldr	r3, [r7, #0]
 81031ac:	7e1b      	ldrb	r3, [r3, #24]
 81031ae:	2b01      	cmp	r3, #1
 81031b0:	d102      	bne.n	81031b8 <HAL_ADC_ConfigChannel+0x1a4>
 81031b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81031b6:	e000      	b.n	81031ba <HAL_ADC_ConfigChannel+0x1a6>
 81031b8:	2300      	movs	r3, #0
 81031ba:	461a      	mov	r2, r3
 81031bc:	f7ff fa2e 	bl	810261c <LL_ADC_SetDataRightShift>
 81031c0:	e04c      	b.n	810325c <HAL_ADC_ConfigChannel+0x248>
 81031c2:	bf00      	nop
 81031c4:	47ff0000 	.word	0x47ff0000
 81031c8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81031d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81031d6:	683b      	ldr	r3, [r7, #0]
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	069b      	lsls	r3, r3, #26
 81031dc:	429a      	cmp	r2, r3
 81031de:	d107      	bne.n	81031f0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81031ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81031f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81031fa:	683b      	ldr	r3, [r7, #0]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	069b      	lsls	r3, r3, #26
 8103200:	429a      	cmp	r2, r3
 8103202:	d107      	bne.n	8103214 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103212:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810321a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810321e:	683b      	ldr	r3, [r7, #0]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	069b      	lsls	r3, r3, #26
 8103224:	429a      	cmp	r2, r3
 8103226:	d107      	bne.n	8103238 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103236:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810323e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103242:	683b      	ldr	r3, [r7, #0]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	069b      	lsls	r3, r3, #26
 8103248:	429a      	cmp	r2, r3
 810324a:	d107      	bne.n	810325c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810325a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4618      	mov	r0, r3
 8103262:	f7ff fb1b 	bl	810289c <LL_ADC_IsEnabled>
 8103266:	4603      	mov	r3, r0
 8103268:	2b00      	cmp	r3, #0
 810326a:	f040 8211 	bne.w	8103690 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	6818      	ldr	r0, [r3, #0]
 8103272:	683b      	ldr	r3, [r7, #0]
 8103274:	6819      	ldr	r1, [r3, #0]
 8103276:	683b      	ldr	r3, [r7, #0]
 8103278:	68db      	ldr	r3, [r3, #12]
 810327a:	461a      	mov	r2, r3
 810327c:	f7ff fa6c 	bl	8102758 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103280:	683b      	ldr	r3, [r7, #0]
 8103282:	68db      	ldr	r3, [r3, #12]
 8103284:	4aa1      	ldr	r2, [pc, #644]	@ (810350c <HAL_ADC_ConfigChannel+0x4f8>)
 8103286:	4293      	cmp	r3, r2
 8103288:	f040 812e 	bne.w	81034e8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103290:	683b      	ldr	r3, [r7, #0]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103298:	2b00      	cmp	r3, #0
 810329a:	d10b      	bne.n	81032b4 <HAL_ADC_ConfigChannel+0x2a0>
 810329c:	683b      	ldr	r3, [r7, #0]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	0e9b      	lsrs	r3, r3, #26
 81032a2:	3301      	adds	r3, #1
 81032a4:	f003 031f 	and.w	r3, r3, #31
 81032a8:	2b09      	cmp	r3, #9
 81032aa:	bf94      	ite	ls
 81032ac:	2301      	movls	r3, #1
 81032ae:	2300      	movhi	r3, #0
 81032b0:	b2db      	uxtb	r3, r3
 81032b2:	e019      	b.n	81032e8 <HAL_ADC_ConfigChannel+0x2d4>
 81032b4:	683b      	ldr	r3, [r7, #0]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81032ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81032bc:	fa93 f3a3 	rbit	r3, r3
 81032c0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 81032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81032c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 81032c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	d101      	bne.n	81032d0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81032cc:	2320      	movs	r3, #32
 81032ce:	e003      	b.n	81032d8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81032d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81032d2:	fab3 f383 	clz	r3, r3
 81032d6:	b2db      	uxtb	r3, r3
 81032d8:	3301      	adds	r3, #1
 81032da:	f003 031f 	and.w	r3, r3, #31
 81032de:	2b09      	cmp	r3, #9
 81032e0:	bf94      	ite	ls
 81032e2:	2301      	movls	r3, #1
 81032e4:	2300      	movhi	r3, #0
 81032e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81032e8:	2b00      	cmp	r3, #0
 81032ea:	d079      	beq.n	81033e0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81032ec:	683b      	ldr	r3, [r7, #0]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d107      	bne.n	8103308 <HAL_ADC_ConfigChannel+0x2f4>
 81032f8:	683b      	ldr	r3, [r7, #0]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	0e9b      	lsrs	r3, r3, #26
 81032fe:	3301      	adds	r3, #1
 8103300:	069b      	lsls	r3, r3, #26
 8103302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103306:	e015      	b.n	8103334 <HAL_ADC_ConfigChannel+0x320>
 8103308:	683b      	ldr	r3, [r7, #0]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810330e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8103310:	fa93 f3a3 	rbit	r3, r3
 8103314:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8103316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103318:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 810331a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810331c:	2b00      	cmp	r3, #0
 810331e:	d101      	bne.n	8103324 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8103320:	2320      	movs	r3, #32
 8103322:	e003      	b.n	810332c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8103324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8103326:	fab3 f383 	clz	r3, r3
 810332a:	b2db      	uxtb	r3, r3
 810332c:	3301      	adds	r3, #1
 810332e:	069b      	lsls	r3, r3, #26
 8103330:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103334:	683b      	ldr	r3, [r7, #0]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810333c:	2b00      	cmp	r3, #0
 810333e:	d109      	bne.n	8103354 <HAL_ADC_ConfigChannel+0x340>
 8103340:	683b      	ldr	r3, [r7, #0]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	0e9b      	lsrs	r3, r3, #26
 8103346:	3301      	adds	r3, #1
 8103348:	f003 031f 	and.w	r3, r3, #31
 810334c:	2101      	movs	r1, #1
 810334e:	fa01 f303 	lsl.w	r3, r1, r3
 8103352:	e017      	b.n	8103384 <HAL_ADC_ConfigChannel+0x370>
 8103354:	683b      	ldr	r3, [r7, #0]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810335a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810335c:	fa93 f3a3 	rbit	r3, r3
 8103360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8103362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103364:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8103366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103368:	2b00      	cmp	r3, #0
 810336a:	d101      	bne.n	8103370 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 810336c:	2320      	movs	r3, #32
 810336e:	e003      	b.n	8103378 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8103370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103372:	fab3 f383 	clz	r3, r3
 8103376:	b2db      	uxtb	r3, r3
 8103378:	3301      	adds	r3, #1
 810337a:	f003 031f 	and.w	r3, r3, #31
 810337e:	2101      	movs	r1, #1
 8103380:	fa01 f303 	lsl.w	r3, r1, r3
 8103384:	ea42 0103 	orr.w	r1, r2, r3
 8103388:	683b      	ldr	r3, [r7, #0]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103390:	2b00      	cmp	r3, #0
 8103392:	d10a      	bne.n	81033aa <HAL_ADC_ConfigChannel+0x396>
 8103394:	683b      	ldr	r3, [r7, #0]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	0e9b      	lsrs	r3, r3, #26
 810339a:	3301      	adds	r3, #1
 810339c:	f003 021f 	and.w	r2, r3, #31
 81033a0:	4613      	mov	r3, r2
 81033a2:	005b      	lsls	r3, r3, #1
 81033a4:	4413      	add	r3, r2
 81033a6:	051b      	lsls	r3, r3, #20
 81033a8:	e018      	b.n	81033dc <HAL_ADC_ConfigChannel+0x3c8>
 81033aa:	683b      	ldr	r3, [r7, #0]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81033b2:	fa93 f3a3 	rbit	r3, r3
 81033b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 81033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81033ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 81033bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033be:	2b00      	cmp	r3, #0
 81033c0:	d101      	bne.n	81033c6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 81033c2:	2320      	movs	r3, #32
 81033c4:	e003      	b.n	81033ce <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 81033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81033c8:	fab3 f383 	clz	r3, r3
 81033cc:	b2db      	uxtb	r3, r3
 81033ce:	3301      	adds	r3, #1
 81033d0:	f003 021f 	and.w	r2, r3, #31
 81033d4:	4613      	mov	r3, r2
 81033d6:	005b      	lsls	r3, r3, #1
 81033d8:	4413      	add	r3, r2
 81033da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81033dc:	430b      	orrs	r3, r1
 81033de:	e07e      	b.n	81034de <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81033e0:	683b      	ldr	r3, [r7, #0]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81033e8:	2b00      	cmp	r3, #0
 81033ea:	d107      	bne.n	81033fc <HAL_ADC_ConfigChannel+0x3e8>
 81033ec:	683b      	ldr	r3, [r7, #0]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	0e9b      	lsrs	r3, r3, #26
 81033f2:	3301      	adds	r3, #1
 81033f4:	069b      	lsls	r3, r3, #26
 81033f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81033fa:	e015      	b.n	8103428 <HAL_ADC_ConfigChannel+0x414>
 81033fc:	683b      	ldr	r3, [r7, #0]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103404:	fa93 f3a3 	rbit	r3, r3
 8103408:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 810340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 810340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103410:	2b00      	cmp	r3, #0
 8103412:	d101      	bne.n	8103418 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8103414:	2320      	movs	r3, #32
 8103416:	e003      	b.n	8103420 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8103418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810341a:	fab3 f383 	clz	r3, r3
 810341e:	b2db      	uxtb	r3, r3
 8103420:	3301      	adds	r3, #1
 8103422:	069b      	lsls	r3, r3, #26
 8103424:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103428:	683b      	ldr	r3, [r7, #0]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103430:	2b00      	cmp	r3, #0
 8103432:	d109      	bne.n	8103448 <HAL_ADC_ConfigChannel+0x434>
 8103434:	683b      	ldr	r3, [r7, #0]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	0e9b      	lsrs	r3, r3, #26
 810343a:	3301      	adds	r3, #1
 810343c:	f003 031f 	and.w	r3, r3, #31
 8103440:	2101      	movs	r1, #1
 8103442:	fa01 f303 	lsl.w	r3, r1, r3
 8103446:	e017      	b.n	8103478 <HAL_ADC_ConfigChannel+0x464>
 8103448:	683b      	ldr	r3, [r7, #0]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810344e:	69fb      	ldr	r3, [r7, #28]
 8103450:	fa93 f3a3 	rbit	r3, r3
 8103454:	61bb      	str	r3, [r7, #24]
  return result;
 8103456:	69bb      	ldr	r3, [r7, #24]
 8103458:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810345a:	6a3b      	ldr	r3, [r7, #32]
 810345c:	2b00      	cmp	r3, #0
 810345e:	d101      	bne.n	8103464 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8103460:	2320      	movs	r3, #32
 8103462:	e003      	b.n	810346c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8103464:	6a3b      	ldr	r3, [r7, #32]
 8103466:	fab3 f383 	clz	r3, r3
 810346a:	b2db      	uxtb	r3, r3
 810346c:	3301      	adds	r3, #1
 810346e:	f003 031f 	and.w	r3, r3, #31
 8103472:	2101      	movs	r1, #1
 8103474:	fa01 f303 	lsl.w	r3, r1, r3
 8103478:	ea42 0103 	orr.w	r1, r2, r3
 810347c:	683b      	ldr	r3, [r7, #0]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103484:	2b00      	cmp	r3, #0
 8103486:	d10d      	bne.n	81034a4 <HAL_ADC_ConfigChannel+0x490>
 8103488:	683b      	ldr	r3, [r7, #0]
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	0e9b      	lsrs	r3, r3, #26
 810348e:	3301      	adds	r3, #1
 8103490:	f003 021f 	and.w	r2, r3, #31
 8103494:	4613      	mov	r3, r2
 8103496:	005b      	lsls	r3, r3, #1
 8103498:	4413      	add	r3, r2
 810349a:	3b1e      	subs	r3, #30
 810349c:	051b      	lsls	r3, r3, #20
 810349e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81034a2:	e01b      	b.n	81034dc <HAL_ADC_ConfigChannel+0x4c8>
 81034a4:	683b      	ldr	r3, [r7, #0]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81034aa:	693b      	ldr	r3, [r7, #16]
 81034ac:	fa93 f3a3 	rbit	r3, r3
 81034b0:	60fb      	str	r3, [r7, #12]
  return result;
 81034b2:	68fb      	ldr	r3, [r7, #12]
 81034b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81034b6:	697b      	ldr	r3, [r7, #20]
 81034b8:	2b00      	cmp	r3, #0
 81034ba:	d101      	bne.n	81034c0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 81034bc:	2320      	movs	r3, #32
 81034be:	e003      	b.n	81034c8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 81034c0:	697b      	ldr	r3, [r7, #20]
 81034c2:	fab3 f383 	clz	r3, r3
 81034c6:	b2db      	uxtb	r3, r3
 81034c8:	3301      	adds	r3, #1
 81034ca:	f003 021f 	and.w	r2, r3, #31
 81034ce:	4613      	mov	r3, r2
 81034d0:	005b      	lsls	r3, r3, #1
 81034d2:	4413      	add	r3, r2
 81034d4:	3b1e      	subs	r3, #30
 81034d6:	051b      	lsls	r3, r3, #20
 81034d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81034dc:	430b      	orrs	r3, r1
 81034de:	683a      	ldr	r2, [r7, #0]
 81034e0:	6892      	ldr	r2, [r2, #8]
 81034e2:	4619      	mov	r1, r3
 81034e4:	f7ff f90d 	bl	8102702 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81034e8:	683b      	ldr	r3, [r7, #0]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	f280 80cf 	bge.w	8103690 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	4a06      	ldr	r2, [pc, #24]	@ (8103510 <HAL_ADC_ConfigChannel+0x4fc>)
 81034f8:	4293      	cmp	r3, r2
 81034fa:	d004      	beq.n	8103506 <HAL_ADC_ConfigChannel+0x4f2>
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	681b      	ldr	r3, [r3, #0]
 8103500:	4a04      	ldr	r2, [pc, #16]	@ (8103514 <HAL_ADC_ConfigChannel+0x500>)
 8103502:	4293      	cmp	r3, r2
 8103504:	d10a      	bne.n	810351c <HAL_ADC_ConfigChannel+0x508>
 8103506:	4b04      	ldr	r3, [pc, #16]	@ (8103518 <HAL_ADC_ConfigChannel+0x504>)
 8103508:	e009      	b.n	810351e <HAL_ADC_ConfigChannel+0x50a>
 810350a:	bf00      	nop
 810350c:	47ff0000 	.word	0x47ff0000
 8103510:	40022000 	.word	0x40022000
 8103514:	40022100 	.word	0x40022100
 8103518:	40022300 	.word	0x40022300
 810351c:	4b61      	ldr	r3, [pc, #388]	@ (81036a4 <HAL_ADC_ConfigChannel+0x690>)
 810351e:	4618      	mov	r0, r3
 8103520:	f7ff f84e 	bl	81025c0 <LL_ADC_GetCommonPathInternalCh>
 8103524:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a5f      	ldr	r2, [pc, #380]	@ (81036a8 <HAL_ADC_ConfigChannel+0x694>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d004      	beq.n	810353a <HAL_ADC_ConfigChannel+0x526>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a5d      	ldr	r2, [pc, #372]	@ (81036ac <HAL_ADC_ConfigChannel+0x698>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d10e      	bne.n	8103558 <HAL_ADC_ConfigChannel+0x544>
 810353a:	485b      	ldr	r0, [pc, #364]	@ (81036a8 <HAL_ADC_ConfigChannel+0x694>)
 810353c:	f7ff f9ae 	bl	810289c <LL_ADC_IsEnabled>
 8103540:	4604      	mov	r4, r0
 8103542:	485a      	ldr	r0, [pc, #360]	@ (81036ac <HAL_ADC_ConfigChannel+0x698>)
 8103544:	f7ff f9aa 	bl	810289c <LL_ADC_IsEnabled>
 8103548:	4603      	mov	r3, r0
 810354a:	4323      	orrs	r3, r4
 810354c:	2b00      	cmp	r3, #0
 810354e:	bf0c      	ite	eq
 8103550:	2301      	moveq	r3, #1
 8103552:	2300      	movne	r3, #0
 8103554:	b2db      	uxtb	r3, r3
 8103556:	e008      	b.n	810356a <HAL_ADC_ConfigChannel+0x556>
 8103558:	4855      	ldr	r0, [pc, #340]	@ (81036b0 <HAL_ADC_ConfigChannel+0x69c>)
 810355a:	f7ff f99f 	bl	810289c <LL_ADC_IsEnabled>
 810355e:	4603      	mov	r3, r0
 8103560:	2b00      	cmp	r3, #0
 8103562:	bf0c      	ite	eq
 8103564:	2301      	moveq	r3, #1
 8103566:	2300      	movne	r3, #0
 8103568:	b2db      	uxtb	r3, r3
 810356a:	2b00      	cmp	r3, #0
 810356c:	d07d      	beq.n	810366a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810356e:	683b      	ldr	r3, [r7, #0]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4a50      	ldr	r2, [pc, #320]	@ (81036b4 <HAL_ADC_ConfigChannel+0x6a0>)
 8103574:	4293      	cmp	r3, r2
 8103576:	d130      	bne.n	81035da <HAL_ADC_ConfigChannel+0x5c6>
 8103578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810357a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810357e:	2b00      	cmp	r3, #0
 8103580:	d12b      	bne.n	81035da <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a4a      	ldr	r2, [pc, #296]	@ (81036b0 <HAL_ADC_ConfigChannel+0x69c>)
 8103588:	4293      	cmp	r3, r2
 810358a:	f040 8081 	bne.w	8103690 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	4a45      	ldr	r2, [pc, #276]	@ (81036a8 <HAL_ADC_ConfigChannel+0x694>)
 8103594:	4293      	cmp	r3, r2
 8103596:	d004      	beq.n	81035a2 <HAL_ADC_ConfigChannel+0x58e>
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	4a43      	ldr	r2, [pc, #268]	@ (81036ac <HAL_ADC_ConfigChannel+0x698>)
 810359e:	4293      	cmp	r3, r2
 81035a0:	d101      	bne.n	81035a6 <HAL_ADC_ConfigChannel+0x592>
 81035a2:	4a45      	ldr	r2, [pc, #276]	@ (81036b8 <HAL_ADC_ConfigChannel+0x6a4>)
 81035a4:	e000      	b.n	81035a8 <HAL_ADC_ConfigChannel+0x594>
 81035a6:	4a3f      	ldr	r2, [pc, #252]	@ (81036a4 <HAL_ADC_ConfigChannel+0x690>)
 81035a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81035aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81035ae:	4619      	mov	r1, r3
 81035b0:	4610      	mov	r0, r2
 81035b2:	f7fe fff2 	bl	810259a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81035b6:	4b41      	ldr	r3, [pc, #260]	@ (81036bc <HAL_ADC_ConfigChannel+0x6a8>)
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	099b      	lsrs	r3, r3, #6
 81035bc:	4a40      	ldr	r2, [pc, #256]	@ (81036c0 <HAL_ADC_ConfigChannel+0x6ac>)
 81035be:	fba2 2303 	umull	r2, r3, r2, r3
 81035c2:	099b      	lsrs	r3, r3, #6
 81035c4:	3301      	adds	r3, #1
 81035c6:	005b      	lsls	r3, r3, #1
 81035c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81035ca:	e002      	b.n	81035d2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 81035cc:	68bb      	ldr	r3, [r7, #8]
 81035ce:	3b01      	subs	r3, #1
 81035d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81035d2:	68bb      	ldr	r3, [r7, #8]
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	d1f9      	bne.n	81035cc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81035d8:	e05a      	b.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81035da:	683b      	ldr	r3, [r7, #0]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a39      	ldr	r2, [pc, #228]	@ (81036c4 <HAL_ADC_ConfigChannel+0x6b0>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d11e      	bne.n	8103622 <HAL_ADC_ConfigChannel+0x60e>
 81035e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81035e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81035ea:	2b00      	cmp	r3, #0
 81035ec:	d119      	bne.n	8103622 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a2f      	ldr	r2, [pc, #188]	@ (81036b0 <HAL_ADC_ConfigChannel+0x69c>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d14b      	bne.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a2a      	ldr	r2, [pc, #168]	@ (81036a8 <HAL_ADC_ConfigChannel+0x694>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d004      	beq.n	810360c <HAL_ADC_ConfigChannel+0x5f8>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a29      	ldr	r2, [pc, #164]	@ (81036ac <HAL_ADC_ConfigChannel+0x698>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d101      	bne.n	8103610 <HAL_ADC_ConfigChannel+0x5fc>
 810360c:	4a2a      	ldr	r2, [pc, #168]	@ (81036b8 <HAL_ADC_ConfigChannel+0x6a4>)
 810360e:	e000      	b.n	8103612 <HAL_ADC_ConfigChannel+0x5fe>
 8103610:	4a24      	ldr	r2, [pc, #144]	@ (81036a4 <HAL_ADC_ConfigChannel+0x690>)
 8103612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103618:	4619      	mov	r1, r3
 810361a:	4610      	mov	r0, r2
 810361c:	f7fe ffbd 	bl	810259a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103620:	e036      	b.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103622:	683b      	ldr	r3, [r7, #0]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	4a28      	ldr	r2, [pc, #160]	@ (81036c8 <HAL_ADC_ConfigChannel+0x6b4>)
 8103628:	4293      	cmp	r3, r2
 810362a:	d131      	bne.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
 810362c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810362e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8103632:	2b00      	cmp	r3, #0
 8103634:	d12c      	bne.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	4a1d      	ldr	r2, [pc, #116]	@ (81036b0 <HAL_ADC_ConfigChannel+0x69c>)
 810363c:	4293      	cmp	r3, r2
 810363e:	d127      	bne.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4a18      	ldr	r2, [pc, #96]	@ (81036a8 <HAL_ADC_ConfigChannel+0x694>)
 8103646:	4293      	cmp	r3, r2
 8103648:	d004      	beq.n	8103654 <HAL_ADC_ConfigChannel+0x640>
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	4a17      	ldr	r2, [pc, #92]	@ (81036ac <HAL_ADC_ConfigChannel+0x698>)
 8103650:	4293      	cmp	r3, r2
 8103652:	d101      	bne.n	8103658 <HAL_ADC_ConfigChannel+0x644>
 8103654:	4a18      	ldr	r2, [pc, #96]	@ (81036b8 <HAL_ADC_ConfigChannel+0x6a4>)
 8103656:	e000      	b.n	810365a <HAL_ADC_ConfigChannel+0x646>
 8103658:	4a12      	ldr	r2, [pc, #72]	@ (81036a4 <HAL_ADC_ConfigChannel+0x690>)
 810365a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810365c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103660:	4619      	mov	r1, r3
 8103662:	4610      	mov	r0, r2
 8103664:	f7fe ff99 	bl	810259a <LL_ADC_SetCommonPathInternalCh>
 8103668:	e012      	b.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810366e:	f043 0220 	orr.w	r2, r3, #32
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8103676:	2301      	movs	r3, #1
 8103678:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 810367c:	e008      	b.n	8103690 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103682:	f043 0220 	orr.w	r2, r3, #32
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810368a:	2301      	movs	r3, #1
 810368c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	2200      	movs	r2, #0
 8103694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103698:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 810369c:	4618      	mov	r0, r3
 810369e:	3784      	adds	r7, #132	@ 0x84
 81036a0:	46bd      	mov	sp, r7
 81036a2:	bd90      	pop	{r4, r7, pc}
 81036a4:	58026300 	.word	0x58026300
 81036a8:	40022000 	.word	0x40022000
 81036ac:	40022100 	.word	0x40022100
 81036b0:	58026000 	.word	0x58026000
 81036b4:	cb840000 	.word	0xcb840000
 81036b8:	40022300 	.word	0x40022300
 81036bc:	10000000 	.word	0x10000000
 81036c0:	053e2d63 	.word	0x053e2d63
 81036c4:	c7520000 	.word	0xc7520000
 81036c8:	cfb80000 	.word	0xcfb80000

081036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 81036cc:	b580      	push	{r7, lr}
 81036ce:	b084      	sub	sp, #16
 81036d0:	af00      	add	r7, sp, #0
 81036d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4618      	mov	r0, r3
 81036da:	f7ff f8df 	bl	810289c <LL_ADC_IsEnabled>
 81036de:	4603      	mov	r3, r0
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d16e      	bne.n	81037c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	689a      	ldr	r2, [r3, #8]
 81036ea:	4b38      	ldr	r3, [pc, #224]	@ (81037cc <ADC_Enable+0x100>)
 81036ec:	4013      	ands	r3, r2
 81036ee:	2b00      	cmp	r3, #0
 81036f0:	d00d      	beq.n	810370e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036f6:	f043 0210 	orr.w	r2, r3, #16
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103702:	f043 0201 	orr.w	r2, r3, #1
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 810370a:	2301      	movs	r3, #1
 810370c:	e05a      	b.n	81037c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	681b      	ldr	r3, [r3, #0]
 8103712:	4618      	mov	r0, r3
 8103714:	f7ff f8ae 	bl	8102874 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103718:	f7fe ff14 	bl	8102544 <HAL_GetTick>
 810371c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	4a2b      	ldr	r2, [pc, #172]	@ (81037d0 <ADC_Enable+0x104>)
 8103724:	4293      	cmp	r3, r2
 8103726:	d004      	beq.n	8103732 <ADC_Enable+0x66>
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	4a29      	ldr	r2, [pc, #164]	@ (81037d4 <ADC_Enable+0x108>)
 810372e:	4293      	cmp	r3, r2
 8103730:	d101      	bne.n	8103736 <ADC_Enable+0x6a>
 8103732:	4b29      	ldr	r3, [pc, #164]	@ (81037d8 <ADC_Enable+0x10c>)
 8103734:	e000      	b.n	8103738 <ADC_Enable+0x6c>
 8103736:	4b29      	ldr	r3, [pc, #164]	@ (81037dc <ADC_Enable+0x110>)
 8103738:	4618      	mov	r0, r3
 810373a:	f7ff f831 	bl	81027a0 <LL_ADC_GetMultimode>
 810373e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	4a23      	ldr	r2, [pc, #140]	@ (81037d4 <ADC_Enable+0x108>)
 8103746:	4293      	cmp	r3, r2
 8103748:	d002      	beq.n	8103750 <ADC_Enable+0x84>
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	e000      	b.n	8103752 <ADC_Enable+0x86>
 8103750:	4b1f      	ldr	r3, [pc, #124]	@ (81037d0 <ADC_Enable+0x104>)
 8103752:	687a      	ldr	r2, [r7, #4]
 8103754:	6812      	ldr	r2, [r2, #0]
 8103756:	4293      	cmp	r3, r2
 8103758:	d02c      	beq.n	81037b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810375a:	68bb      	ldr	r3, [r7, #8]
 810375c:	2b00      	cmp	r3, #0
 810375e:	d130      	bne.n	81037c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103760:	e028      	b.n	81037b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	4618      	mov	r0, r3
 8103768:	f7ff f898 	bl	810289c <LL_ADC_IsEnabled>
 810376c:	4603      	mov	r3, r0
 810376e:	2b00      	cmp	r3, #0
 8103770:	d104      	bne.n	810377c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4618      	mov	r0, r3
 8103778:	f7ff f87c 	bl	8102874 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 810377c:	f7fe fee2 	bl	8102544 <HAL_GetTick>
 8103780:	4602      	mov	r2, r0
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	1ad3      	subs	r3, r2, r3
 8103786:	2b02      	cmp	r3, #2
 8103788:	d914      	bls.n	81037b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	f003 0301 	and.w	r3, r3, #1
 8103794:	2b01      	cmp	r3, #1
 8103796:	d00d      	beq.n	81037b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810379c:	f043 0210 	orr.w	r2, r3, #16
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037a8:	f043 0201 	orr.w	r2, r3, #1
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 81037b0:	2301      	movs	r3, #1
 81037b2:	e007      	b.n	81037c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	f003 0301 	and.w	r3, r3, #1
 81037be:	2b01      	cmp	r3, #1
 81037c0:	d1cf      	bne.n	8103762 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81037c2:	2300      	movs	r3, #0
}
 81037c4:	4618      	mov	r0, r3
 81037c6:	3710      	adds	r7, #16
 81037c8:	46bd      	mov	sp, r7
 81037ca:	bd80      	pop	{r7, pc}
 81037cc:	8000003f 	.word	0x8000003f
 81037d0:	40022000 	.word	0x40022000
 81037d4:	40022100 	.word	0x40022100
 81037d8:	40022300 	.word	0x40022300
 81037dc:	58026300 	.word	0x58026300

081037e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81037e0:	b580      	push	{r7, lr}
 81037e2:	b084      	sub	sp, #16
 81037e4:	af00      	add	r7, sp, #0
 81037e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	681b      	ldr	r3, [r3, #0]
 81037ec:	4a7a      	ldr	r2, [pc, #488]	@ (81039d8 <ADC_ConfigureBoostMode+0x1f8>)
 81037ee:	4293      	cmp	r3, r2
 81037f0:	d004      	beq.n	81037fc <ADC_ConfigureBoostMode+0x1c>
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	4a79      	ldr	r2, [pc, #484]	@ (81039dc <ADC_ConfigureBoostMode+0x1fc>)
 81037f8:	4293      	cmp	r3, r2
 81037fa:	d109      	bne.n	8103810 <ADC_ConfigureBoostMode+0x30>
 81037fc:	4b78      	ldr	r3, [pc, #480]	@ (81039e0 <ADC_ConfigureBoostMode+0x200>)
 81037fe:	689b      	ldr	r3, [r3, #8]
 8103800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103804:	2b00      	cmp	r3, #0
 8103806:	bf14      	ite	ne
 8103808:	2301      	movne	r3, #1
 810380a:	2300      	moveq	r3, #0
 810380c:	b2db      	uxtb	r3, r3
 810380e:	e008      	b.n	8103822 <ADC_ConfigureBoostMode+0x42>
 8103810:	4b74      	ldr	r3, [pc, #464]	@ (81039e4 <ADC_ConfigureBoostMode+0x204>)
 8103812:	689b      	ldr	r3, [r3, #8]
 8103814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103818:	2b00      	cmp	r3, #0
 810381a:	bf14      	ite	ne
 810381c:	2301      	movne	r3, #1
 810381e:	2300      	moveq	r3, #0
 8103820:	b2db      	uxtb	r3, r3
 8103822:	2b00      	cmp	r3, #0
 8103824:	d01c      	beq.n	8103860 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103826:	f002 fea5 	bl	8106574 <HAL_RCC_GetHCLKFreq>
 810382a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	685b      	ldr	r3, [r3, #4]
 8103830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103834:	d010      	beq.n	8103858 <ADC_ConfigureBoostMode+0x78>
 8103836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810383a:	d873      	bhi.n	8103924 <ADC_ConfigureBoostMode+0x144>
 810383c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103840:	d002      	beq.n	8103848 <ADC_ConfigureBoostMode+0x68>
 8103842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103846:	d16d      	bne.n	8103924 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	685b      	ldr	r3, [r3, #4]
 810384c:	0c1b      	lsrs	r3, r3, #16
 810384e:	68fa      	ldr	r2, [r7, #12]
 8103850:	fbb2 f3f3 	udiv	r3, r2, r3
 8103854:	60fb      	str	r3, [r7, #12]
        break;
 8103856:	e068      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103858:	68fb      	ldr	r3, [r7, #12]
 810385a:	089b      	lsrs	r3, r3, #2
 810385c:	60fb      	str	r3, [r7, #12]
        break;
 810385e:	e064      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103860:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103864:	f04f 0100 	mov.w	r1, #0
 8103868:	f004 f92e 	bl	8107ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 810386c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	685b      	ldr	r3, [r3, #4]
 8103872:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103876:	d051      	beq.n	810391c <ADC_ConfigureBoostMode+0x13c>
 8103878:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 810387c:	d854      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 810387e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103882:	d047      	beq.n	8103914 <ADC_ConfigureBoostMode+0x134>
 8103884:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103888:	d84e      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 810388a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 810388e:	d03d      	beq.n	810390c <ADC_ConfigureBoostMode+0x12c>
 8103890:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103894:	d848      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 8103896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810389a:	d033      	beq.n	8103904 <ADC_ConfigureBoostMode+0x124>
 810389c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81038a0:	d842      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81038a6:	d029      	beq.n	81038fc <ADC_ConfigureBoostMode+0x11c>
 81038a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81038ac:	d83c      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81038b2:	d01a      	beq.n	81038ea <ADC_ConfigureBoostMode+0x10a>
 81038b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81038b8:	d836      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81038be:	d014      	beq.n	81038ea <ADC_ConfigureBoostMode+0x10a>
 81038c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81038c4:	d830      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81038ca:	d00e      	beq.n	81038ea <ADC_ConfigureBoostMode+0x10a>
 81038cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81038d0:	d82a      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81038d6:	d008      	beq.n	81038ea <ADC_ConfigureBoostMode+0x10a>
 81038d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81038dc:	d824      	bhi.n	8103928 <ADC_ConfigureBoostMode+0x148>
 81038de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81038e2:	d002      	beq.n	81038ea <ADC_ConfigureBoostMode+0x10a>
 81038e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81038e8:	d11e      	bne.n	8103928 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	685b      	ldr	r3, [r3, #4]
 81038ee:	0c9b      	lsrs	r3, r3, #18
 81038f0:	005b      	lsls	r3, r3, #1
 81038f2:	68fa      	ldr	r2, [r7, #12]
 81038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 81038f8:	60fb      	str	r3, [r7, #12]
        break;
 81038fa:	e016      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	091b      	lsrs	r3, r3, #4
 8103900:	60fb      	str	r3, [r7, #12]
        break;
 8103902:	e012      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103904:	68fb      	ldr	r3, [r7, #12]
 8103906:	095b      	lsrs	r3, r3, #5
 8103908:	60fb      	str	r3, [r7, #12]
        break;
 810390a:	e00e      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 810390c:	68fb      	ldr	r3, [r7, #12]
 810390e:	099b      	lsrs	r3, r3, #6
 8103910:	60fb      	str	r3, [r7, #12]
        break;
 8103912:	e00a      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103914:	68fb      	ldr	r3, [r7, #12]
 8103916:	09db      	lsrs	r3, r3, #7
 8103918:	60fb      	str	r3, [r7, #12]
        break;
 810391a:	e006      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 810391c:	68fb      	ldr	r3, [r7, #12]
 810391e:	0a1b      	lsrs	r3, r3, #8
 8103920:	60fb      	str	r3, [r7, #12]
        break;
 8103922:	e002      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
        break;
 8103924:	bf00      	nop
 8103926:	e000      	b.n	810392a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103928:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810392a:	f7fe fe17 	bl	810255c <HAL_GetREVID>
 810392e:	4603      	mov	r3, r0
 8103930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103934:	4293      	cmp	r3, r2
 8103936:	d815      	bhi.n	8103964 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103938:	68fb      	ldr	r3, [r7, #12]
 810393a:	4a2b      	ldr	r2, [pc, #172]	@ (81039e8 <ADC_ConfigureBoostMode+0x208>)
 810393c:	4293      	cmp	r3, r2
 810393e:	d908      	bls.n	8103952 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	689a      	ldr	r2, [r3, #8]
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810394e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103950:	e03e      	b.n	81039d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	689a      	ldr	r2, [r3, #8]
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103960:	609a      	str	r2, [r3, #8]
}
 8103962:	e035      	b.n	81039d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	085b      	lsrs	r3, r3, #1
 8103968:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810396a:	68fb      	ldr	r3, [r7, #12]
 810396c:	4a1f      	ldr	r2, [pc, #124]	@ (81039ec <ADC_ConfigureBoostMode+0x20c>)
 810396e:	4293      	cmp	r3, r2
 8103970:	d808      	bhi.n	8103984 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	689a      	ldr	r2, [r3, #8]
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8103980:	609a      	str	r2, [r3, #8]
}
 8103982:	e025      	b.n	81039d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	4a1a      	ldr	r2, [pc, #104]	@ (81039f0 <ADC_ConfigureBoostMode+0x210>)
 8103988:	4293      	cmp	r3, r2
 810398a:	d80a      	bhi.n	81039a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	689b      	ldr	r3, [r3, #8]
 8103992:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810399e:	609a      	str	r2, [r3, #8]
}
 81039a0:	e016      	b.n	81039d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	4a13      	ldr	r2, [pc, #76]	@ (81039f4 <ADC_ConfigureBoostMode+0x214>)
 81039a6:	4293      	cmp	r3, r2
 81039a8:	d80a      	bhi.n	81039c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	689b      	ldr	r3, [r3, #8]
 81039b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81039bc:	609a      	str	r2, [r3, #8]
}
 81039be:	e007      	b.n	81039d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	689a      	ldr	r2, [r3, #8]
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 81039ce:	609a      	str	r2, [r3, #8]
}
 81039d0:	bf00      	nop
 81039d2:	3710      	adds	r7, #16
 81039d4:	46bd      	mov	sp, r7
 81039d6:	bd80      	pop	{r7, pc}
 81039d8:	40022000 	.word	0x40022000
 81039dc:	40022100 	.word	0x40022100
 81039e0:	40022300 	.word	0x40022300
 81039e4:	58026300 	.word	0x58026300
 81039e8:	01312d00 	.word	0x01312d00
 81039ec:	005f5e10 	.word	0x005f5e10
 81039f0:	00bebc20 	.word	0x00bebc20
 81039f4:	017d7840 	.word	0x017d7840

081039f8 <LL_ADC_IsEnabled>:
{
 81039f8:	b480      	push	{r7}
 81039fa:	b083      	sub	sp, #12
 81039fc:	af00      	add	r7, sp, #0
 81039fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	689b      	ldr	r3, [r3, #8]
 8103a04:	f003 0301 	and.w	r3, r3, #1
 8103a08:	2b01      	cmp	r3, #1
 8103a0a:	d101      	bne.n	8103a10 <LL_ADC_IsEnabled+0x18>
 8103a0c:	2301      	movs	r3, #1
 8103a0e:	e000      	b.n	8103a12 <LL_ADC_IsEnabled+0x1a>
 8103a10:	2300      	movs	r3, #0
}
 8103a12:	4618      	mov	r0, r3
 8103a14:	370c      	adds	r7, #12
 8103a16:	46bd      	mov	sp, r7
 8103a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1c:	4770      	bx	lr

08103a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8103a1e:	b480      	push	{r7}
 8103a20:	b083      	sub	sp, #12
 8103a22:	af00      	add	r7, sp, #0
 8103a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	689b      	ldr	r3, [r3, #8]
 8103a2a:	f003 0304 	and.w	r3, r3, #4
 8103a2e:	2b04      	cmp	r3, #4
 8103a30:	d101      	bne.n	8103a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103a32:	2301      	movs	r3, #1
 8103a34:	e000      	b.n	8103a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103a36:	2300      	movs	r3, #0
}
 8103a38:	4618      	mov	r0, r3
 8103a3a:	370c      	adds	r7, #12
 8103a3c:	46bd      	mov	sp, r7
 8103a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a42:	4770      	bx	lr

08103a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103a44:	b590      	push	{r4, r7, lr}
 8103a46:	b09f      	sub	sp, #124	@ 0x7c
 8103a48:	af00      	add	r7, sp, #0
 8103a4a:	6078      	str	r0, [r7, #4]
 8103a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103a4e:	2300      	movs	r3, #0
 8103a50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103a5a:	2b01      	cmp	r3, #1
 8103a5c:	d101      	bne.n	8103a62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103a5e:	2302      	movs	r3, #2
 8103a60:	e0c4      	b.n	8103bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	2201      	movs	r2, #1
 8103a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103a6a:	2300      	movs	r3, #0
 8103a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103a6e:	2300      	movs	r3, #0
 8103a70:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	4a5f      	ldr	r2, [pc, #380]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103a78:	4293      	cmp	r3, r2
 8103a7a:	d102      	bne.n	8103a82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103a7e:	60bb      	str	r3, [r7, #8]
 8103a80:	e001      	b.n	8103a86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103a82:	2300      	movs	r3, #0
 8103a84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103a86:	68bb      	ldr	r3, [r7, #8]
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d10b      	bne.n	8103aa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a90:	f043 0220 	orr.w	r2, r3, #32
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	2200      	movs	r2, #0
 8103a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8103aa0:	2301      	movs	r3, #1
 8103aa2:	e0a3      	b.n	8103bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103aa4:	68bb      	ldr	r3, [r7, #8]
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f7ff ffb9 	bl	8103a1e <LL_ADC_REG_IsConversionOngoing>
 8103aac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	f7ff ffb3 	bl	8103a1e <LL_ADC_REG_IsConversionOngoing>
 8103ab8:	4603      	mov	r3, r0
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	f040 8085 	bne.w	8103bca <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103ac0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	f040 8081 	bne.w	8103bca <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a49      	ldr	r2, [pc, #292]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d004      	beq.n	8103adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a48      	ldr	r2, [pc, #288]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d101      	bne.n	8103ae0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103adc:	4b47      	ldr	r3, [pc, #284]	@ (8103bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103ade:	e000      	b.n	8103ae2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103ae0:	4b47      	ldr	r3, [pc, #284]	@ (8103c00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103ae4:	683b      	ldr	r3, [r7, #0]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	2b00      	cmp	r3, #0
 8103aea:	d03b      	beq.n	8103b64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103aee:	689b      	ldr	r3, [r3, #8]
 8103af0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103af4:	683b      	ldr	r3, [r7, #0]
 8103af6:	685b      	ldr	r3, [r3, #4]
 8103af8:	431a      	orrs	r2, r3
 8103afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103afc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	4a3c      	ldr	r2, [pc, #240]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b04:	4293      	cmp	r3, r2
 8103b06:	d004      	beq.n	8103b12 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	681b      	ldr	r3, [r3, #0]
 8103b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b0e:	4293      	cmp	r3, r2
 8103b10:	d10e      	bne.n	8103b30 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103b12:	4838      	ldr	r0, [pc, #224]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b14:	f7ff ff70 	bl	81039f8 <LL_ADC_IsEnabled>
 8103b18:	4604      	mov	r4, r0
 8103b1a:	4837      	ldr	r0, [pc, #220]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b1c:	f7ff ff6c 	bl	81039f8 <LL_ADC_IsEnabled>
 8103b20:	4603      	mov	r3, r0
 8103b22:	4323      	orrs	r3, r4
 8103b24:	2b00      	cmp	r3, #0
 8103b26:	bf0c      	ite	eq
 8103b28:	2301      	moveq	r3, #1
 8103b2a:	2300      	movne	r3, #0
 8103b2c:	b2db      	uxtb	r3, r3
 8103b2e:	e008      	b.n	8103b42 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103b30:	4834      	ldr	r0, [pc, #208]	@ (8103c04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103b32:	f7ff ff61 	bl	81039f8 <LL_ADC_IsEnabled>
 8103b36:	4603      	mov	r3, r0
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	bf0c      	ite	eq
 8103b3c:	2301      	moveq	r3, #1
 8103b3e:	2300      	movne	r3, #0
 8103b40:	b2db      	uxtb	r3, r3
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d04b      	beq.n	8103bde <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b48:	689b      	ldr	r3, [r3, #8]
 8103b4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103b4e:	f023 030f 	bic.w	r3, r3, #15
 8103b52:	683a      	ldr	r2, [r7, #0]
 8103b54:	6811      	ldr	r1, [r2, #0]
 8103b56:	683a      	ldr	r2, [r7, #0]
 8103b58:	6892      	ldr	r2, [r2, #8]
 8103b5a:	430a      	orrs	r2, r1
 8103b5c:	431a      	orrs	r2, r3
 8103b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b60:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103b62:	e03c      	b.n	8103bde <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b66:	689b      	ldr	r3, [r3, #8]
 8103b68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	4a1f      	ldr	r2, [pc, #124]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b76:	4293      	cmp	r3, r2
 8103b78:	d004      	beq.n	8103b84 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b80:	4293      	cmp	r3, r2
 8103b82:	d10e      	bne.n	8103ba2 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103b84:	481b      	ldr	r0, [pc, #108]	@ (8103bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b86:	f7ff ff37 	bl	81039f8 <LL_ADC_IsEnabled>
 8103b8a:	4604      	mov	r4, r0
 8103b8c:	481a      	ldr	r0, [pc, #104]	@ (8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b8e:	f7ff ff33 	bl	81039f8 <LL_ADC_IsEnabled>
 8103b92:	4603      	mov	r3, r0
 8103b94:	4323      	orrs	r3, r4
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	bf0c      	ite	eq
 8103b9a:	2301      	moveq	r3, #1
 8103b9c:	2300      	movne	r3, #0
 8103b9e:	b2db      	uxtb	r3, r3
 8103ba0:	e008      	b.n	8103bb4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103ba2:	4818      	ldr	r0, [pc, #96]	@ (8103c04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103ba4:	f7ff ff28 	bl	81039f8 <LL_ADC_IsEnabled>
 8103ba8:	4603      	mov	r3, r0
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	bf0c      	ite	eq
 8103bae:	2301      	moveq	r3, #1
 8103bb0:	2300      	movne	r3, #0
 8103bb2:	b2db      	uxtb	r3, r3
 8103bb4:	2b00      	cmp	r3, #0
 8103bb6:	d012      	beq.n	8103bde <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103bba:	689b      	ldr	r3, [r3, #8]
 8103bbc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103bc0:	f023 030f 	bic.w	r3, r3, #15
 8103bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103bc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103bc8:	e009      	b.n	8103bde <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103bce:	f043 0220 	orr.w	r2, r3, #32
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103bd6:	2301      	movs	r3, #1
 8103bd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103bdc:	e000      	b.n	8103be0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103bde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2200      	movs	r2, #0
 8103be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103be8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103bec:	4618      	mov	r0, r3
 8103bee:	377c      	adds	r7, #124	@ 0x7c
 8103bf0:	46bd      	mov	sp, r7
 8103bf2:	bd90      	pop	{r4, r7, pc}
 8103bf4:	40022000 	.word	0x40022000
 8103bf8:	40022100 	.word	0x40022100
 8103bfc:	40022300 	.word	0x40022300
 8103c00:	58026300 	.word	0x58026300
 8103c04:	58026000 	.word	0x58026000

08103c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103c08:	b480      	push	{r7}
 8103c0a:	b085      	sub	sp, #20
 8103c0c:	af00      	add	r7, sp, #0
 8103c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	f003 0307 	and.w	r3, r3, #7
 8103c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103c18:	4b0c      	ldr	r3, [pc, #48]	@ (8103c4c <__NVIC_SetPriorityGrouping+0x44>)
 8103c1a:	68db      	ldr	r3, [r3, #12]
 8103c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103c1e:	68ba      	ldr	r2, [r7, #8]
 8103c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103c24:	4013      	ands	r3, r2
 8103c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103c28:	68fb      	ldr	r3, [r7, #12]
 8103c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103c2c:	68bb      	ldr	r3, [r7, #8]
 8103c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103c3a:	4a04      	ldr	r2, [pc, #16]	@ (8103c4c <__NVIC_SetPriorityGrouping+0x44>)
 8103c3c:	68bb      	ldr	r3, [r7, #8]
 8103c3e:	60d3      	str	r3, [r2, #12]
}
 8103c40:	bf00      	nop
 8103c42:	3714      	adds	r7, #20
 8103c44:	46bd      	mov	sp, r7
 8103c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c4a:	4770      	bx	lr
 8103c4c:	e000ed00 	.word	0xe000ed00

08103c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103c50:	b480      	push	{r7}
 8103c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103c54:	4b04      	ldr	r3, [pc, #16]	@ (8103c68 <__NVIC_GetPriorityGrouping+0x18>)
 8103c56:	68db      	ldr	r3, [r3, #12]
 8103c58:	0a1b      	lsrs	r3, r3, #8
 8103c5a:	f003 0307 	and.w	r3, r3, #7
}
 8103c5e:	4618      	mov	r0, r3
 8103c60:	46bd      	mov	sp, r7
 8103c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c66:	4770      	bx	lr
 8103c68:	e000ed00 	.word	0xe000ed00

08103c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103c6c:	b480      	push	{r7}
 8103c6e:	b083      	sub	sp, #12
 8103c70:	af00      	add	r7, sp, #0
 8103c72:	4603      	mov	r3, r0
 8103c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	db0b      	blt.n	8103c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103c7e:	88fb      	ldrh	r3, [r7, #6]
 8103c80:	f003 021f 	and.w	r2, r3, #31
 8103c84:	4907      	ldr	r1, [pc, #28]	@ (8103ca4 <__NVIC_EnableIRQ+0x38>)
 8103c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c8a:	095b      	lsrs	r3, r3, #5
 8103c8c:	2001      	movs	r0, #1
 8103c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8103c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103c96:	bf00      	nop
 8103c98:	370c      	adds	r7, #12
 8103c9a:	46bd      	mov	sp, r7
 8103c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ca0:	4770      	bx	lr
 8103ca2:	bf00      	nop
 8103ca4:	e000e100 	.word	0xe000e100

08103ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103ca8:	b480      	push	{r7}
 8103caa:	b083      	sub	sp, #12
 8103cac:	af00      	add	r7, sp, #0
 8103cae:	4603      	mov	r3, r0
 8103cb0:	6039      	str	r1, [r7, #0]
 8103cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103cb8:	2b00      	cmp	r3, #0
 8103cba:	db0a      	blt.n	8103cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103cbc:	683b      	ldr	r3, [r7, #0]
 8103cbe:	b2da      	uxtb	r2, r3
 8103cc0:	490c      	ldr	r1, [pc, #48]	@ (8103cf4 <__NVIC_SetPriority+0x4c>)
 8103cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103cc6:	0112      	lsls	r2, r2, #4
 8103cc8:	b2d2      	uxtb	r2, r2
 8103cca:	440b      	add	r3, r1
 8103ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103cd0:	e00a      	b.n	8103ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103cd2:	683b      	ldr	r3, [r7, #0]
 8103cd4:	b2da      	uxtb	r2, r3
 8103cd6:	4908      	ldr	r1, [pc, #32]	@ (8103cf8 <__NVIC_SetPriority+0x50>)
 8103cd8:	88fb      	ldrh	r3, [r7, #6]
 8103cda:	f003 030f 	and.w	r3, r3, #15
 8103cde:	3b04      	subs	r3, #4
 8103ce0:	0112      	lsls	r2, r2, #4
 8103ce2:	b2d2      	uxtb	r2, r2
 8103ce4:	440b      	add	r3, r1
 8103ce6:	761a      	strb	r2, [r3, #24]
}
 8103ce8:	bf00      	nop
 8103cea:	370c      	adds	r7, #12
 8103cec:	46bd      	mov	sp, r7
 8103cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf2:	4770      	bx	lr
 8103cf4:	e000e100 	.word	0xe000e100
 8103cf8:	e000ed00 	.word	0xe000ed00

08103cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103cfc:	b480      	push	{r7}
 8103cfe:	b089      	sub	sp, #36	@ 0x24
 8103d00:	af00      	add	r7, sp, #0
 8103d02:	60f8      	str	r0, [r7, #12]
 8103d04:	60b9      	str	r1, [r7, #8]
 8103d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103d08:	68fb      	ldr	r3, [r7, #12]
 8103d0a:	f003 0307 	and.w	r3, r3, #7
 8103d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103d10:	69fb      	ldr	r3, [r7, #28]
 8103d12:	f1c3 0307 	rsb	r3, r3, #7
 8103d16:	2b04      	cmp	r3, #4
 8103d18:	bf28      	it	cs
 8103d1a:	2304      	movcs	r3, #4
 8103d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103d1e:	69fb      	ldr	r3, [r7, #28]
 8103d20:	3304      	adds	r3, #4
 8103d22:	2b06      	cmp	r3, #6
 8103d24:	d902      	bls.n	8103d2c <NVIC_EncodePriority+0x30>
 8103d26:	69fb      	ldr	r3, [r7, #28]
 8103d28:	3b03      	subs	r3, #3
 8103d2a:	e000      	b.n	8103d2e <NVIC_EncodePriority+0x32>
 8103d2c:	2300      	movs	r3, #0
 8103d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103d30:	f04f 32ff 	mov.w	r2, #4294967295
 8103d34:	69bb      	ldr	r3, [r7, #24]
 8103d36:	fa02 f303 	lsl.w	r3, r2, r3
 8103d3a:	43da      	mvns	r2, r3
 8103d3c:	68bb      	ldr	r3, [r7, #8]
 8103d3e:	401a      	ands	r2, r3
 8103d40:	697b      	ldr	r3, [r7, #20]
 8103d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103d44:	f04f 31ff 	mov.w	r1, #4294967295
 8103d48:	697b      	ldr	r3, [r7, #20]
 8103d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8103d4e:	43d9      	mvns	r1, r3
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103d54:	4313      	orrs	r3, r2
         );
}
 8103d56:	4618      	mov	r0, r3
 8103d58:	3724      	adds	r7, #36	@ 0x24
 8103d5a:	46bd      	mov	sp, r7
 8103d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d60:	4770      	bx	lr

08103d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d62:	b580      	push	{r7, lr}
 8103d64:	b082      	sub	sp, #8
 8103d66:	af00      	add	r7, sp, #0
 8103d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103d6a:	6878      	ldr	r0, [r7, #4]
 8103d6c:	f7ff ff4c 	bl	8103c08 <__NVIC_SetPriorityGrouping>
}
 8103d70:	bf00      	nop
 8103d72:	3708      	adds	r7, #8
 8103d74:	46bd      	mov	sp, r7
 8103d76:	bd80      	pop	{r7, pc}

08103d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103d78:	b580      	push	{r7, lr}
 8103d7a:	b086      	sub	sp, #24
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	4603      	mov	r3, r0
 8103d80:	60b9      	str	r1, [r7, #8]
 8103d82:	607a      	str	r2, [r7, #4]
 8103d84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103d86:	f7ff ff63 	bl	8103c50 <__NVIC_GetPriorityGrouping>
 8103d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103d8c:	687a      	ldr	r2, [r7, #4]
 8103d8e:	68b9      	ldr	r1, [r7, #8]
 8103d90:	6978      	ldr	r0, [r7, #20]
 8103d92:	f7ff ffb3 	bl	8103cfc <NVIC_EncodePriority>
 8103d96:	4602      	mov	r2, r0
 8103d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103d9c:	4611      	mov	r1, r2
 8103d9e:	4618      	mov	r0, r3
 8103da0:	f7ff ff82 	bl	8103ca8 <__NVIC_SetPriority>
}
 8103da4:	bf00      	nop
 8103da6:	3718      	adds	r7, #24
 8103da8:	46bd      	mov	sp, r7
 8103daa:	bd80      	pop	{r7, pc}

08103dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103dac:	b580      	push	{r7, lr}
 8103dae:	b082      	sub	sp, #8
 8103db0:	af00      	add	r7, sp, #0
 8103db2:	4603      	mov	r3, r0
 8103db4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103dba:	4618      	mov	r0, r3
 8103dbc:	f7ff ff56 	bl	8103c6c <__NVIC_EnableIRQ>
}
 8103dc0:	bf00      	nop
 8103dc2:	3708      	adds	r7, #8
 8103dc4:	46bd      	mov	sp, r7
 8103dc6:	bd80      	pop	{r7, pc}

08103dc8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103dc8:	b480      	push	{r7}
 8103dca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103dcc:	4b07      	ldr	r3, [pc, #28]	@ (8103dec <HAL_GetCurrentCPUID+0x24>)
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	091b      	lsrs	r3, r3, #4
 8103dd2:	f003 030f 	and.w	r3, r3, #15
 8103dd6:	2b07      	cmp	r3, #7
 8103dd8:	d101      	bne.n	8103dde <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103dda:	2303      	movs	r3, #3
 8103ddc:	e000      	b.n	8103de0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103dde:	2301      	movs	r3, #1
  }
}
 8103de0:	4618      	mov	r0, r3
 8103de2:	46bd      	mov	sp, r7
 8103de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103de8:	4770      	bx	lr
 8103dea:	bf00      	nop
 8103dec:	e000ed00 	.word	0xe000ed00

08103df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8103df0:	b580      	push	{r7, lr}
 8103df2:	b086      	sub	sp, #24
 8103df4:	af00      	add	r7, sp, #0
 8103df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8103df8:	f7fe fba4 	bl	8102544 <HAL_GetTick>
 8103dfc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	d101      	bne.n	8103e08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8103e04:	2301      	movs	r3, #1
 8103e06:	e2dc      	b.n	81043c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103e0e:	b2db      	uxtb	r3, r3
 8103e10:	2b02      	cmp	r3, #2
 8103e12:	d008      	beq.n	8103e26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	2280      	movs	r2, #128	@ 0x80
 8103e18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	2200      	movs	r2, #0
 8103e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8103e22:	2301      	movs	r3, #1
 8103e24:	e2cd      	b.n	81043c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	4a76      	ldr	r2, [pc, #472]	@ (8104004 <HAL_DMA_Abort+0x214>)
 8103e2c:	4293      	cmp	r3, r2
 8103e2e:	d04a      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	4a74      	ldr	r2, [pc, #464]	@ (8104008 <HAL_DMA_Abort+0x218>)
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d045      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	4a73      	ldr	r2, [pc, #460]	@ (810400c <HAL_DMA_Abort+0x21c>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d040      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	4a71      	ldr	r2, [pc, #452]	@ (8104010 <HAL_DMA_Abort+0x220>)
 8103e4a:	4293      	cmp	r3, r2
 8103e4c:	d03b      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	4a70      	ldr	r2, [pc, #448]	@ (8104014 <HAL_DMA_Abort+0x224>)
 8103e54:	4293      	cmp	r3, r2
 8103e56:	d036      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8104018 <HAL_DMA_Abort+0x228>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d031      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a6d      	ldr	r2, [pc, #436]	@ (810401c <HAL_DMA_Abort+0x22c>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d02c      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a6b      	ldr	r2, [pc, #428]	@ (8104020 <HAL_DMA_Abort+0x230>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d027      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8104024 <HAL_DMA_Abort+0x234>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d022      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a68      	ldr	r2, [pc, #416]	@ (8104028 <HAL_DMA_Abort+0x238>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d01d      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a67      	ldr	r2, [pc, #412]	@ (810402c <HAL_DMA_Abort+0x23c>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d018      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a65      	ldr	r2, [pc, #404]	@ (8104030 <HAL_DMA_Abort+0x240>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d013      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a64      	ldr	r2, [pc, #400]	@ (8104034 <HAL_DMA_Abort+0x244>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d00e      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a62      	ldr	r2, [pc, #392]	@ (8104038 <HAL_DMA_Abort+0x248>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d009      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	681b      	ldr	r3, [r3, #0]
 8103eb6:	4a61      	ldr	r2, [pc, #388]	@ (810403c <HAL_DMA_Abort+0x24c>)
 8103eb8:	4293      	cmp	r3, r2
 8103eba:	d004      	beq.n	8103ec6 <HAL_DMA_Abort+0xd6>
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8104040 <HAL_DMA_Abort+0x250>)
 8103ec2:	4293      	cmp	r3, r2
 8103ec4:	d101      	bne.n	8103eca <HAL_DMA_Abort+0xda>
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	e000      	b.n	8103ecc <HAL_DMA_Abort+0xdc>
 8103eca:	2300      	movs	r3, #0
 8103ecc:	2b00      	cmp	r3, #0
 8103ece:	d013      	beq.n	8103ef8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	681a      	ldr	r2, [r3, #0]
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	f022 021e 	bic.w	r2, r2, #30
 8103ede:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	695a      	ldr	r2, [r3, #20]
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8103eee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	617b      	str	r3, [r7, #20]
 8103ef6:	e00a      	b.n	8103f0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	681a      	ldr	r2, [r3, #0]
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	f022 020e 	bic.w	r2, r2, #14
 8103f06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	4a3c      	ldr	r2, [pc, #240]	@ (8104004 <HAL_DMA_Abort+0x214>)
 8103f14:	4293      	cmp	r3, r2
 8103f16:	d072      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	4a3a      	ldr	r2, [pc, #232]	@ (8104008 <HAL_DMA_Abort+0x218>)
 8103f1e:	4293      	cmp	r3, r2
 8103f20:	d06d      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	4a39      	ldr	r2, [pc, #228]	@ (810400c <HAL_DMA_Abort+0x21c>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d068      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a37      	ldr	r2, [pc, #220]	@ (8104010 <HAL_DMA_Abort+0x220>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d063      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a36      	ldr	r2, [pc, #216]	@ (8104014 <HAL_DMA_Abort+0x224>)
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d05e      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a34      	ldr	r2, [pc, #208]	@ (8104018 <HAL_DMA_Abort+0x228>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d059      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a33      	ldr	r2, [pc, #204]	@ (810401c <HAL_DMA_Abort+0x22c>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d054      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a31      	ldr	r2, [pc, #196]	@ (8104020 <HAL_DMA_Abort+0x230>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d04f      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	4a30      	ldr	r2, [pc, #192]	@ (8104024 <HAL_DMA_Abort+0x234>)
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d04a      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8104028 <HAL_DMA_Abort+0x238>)
 8103f6e:	4293      	cmp	r3, r2
 8103f70:	d045      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a2d      	ldr	r2, [pc, #180]	@ (810402c <HAL_DMA_Abort+0x23c>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d040      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	4a2b      	ldr	r2, [pc, #172]	@ (8104030 <HAL_DMA_Abort+0x240>)
 8103f82:	4293      	cmp	r3, r2
 8103f84:	d03b      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8104034 <HAL_DMA_Abort+0x244>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d036      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	4a28      	ldr	r2, [pc, #160]	@ (8104038 <HAL_DMA_Abort+0x248>)
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d031      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a27      	ldr	r2, [pc, #156]	@ (810403c <HAL_DMA_Abort+0x24c>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d02c      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a25      	ldr	r2, [pc, #148]	@ (8104040 <HAL_DMA_Abort+0x250>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d027      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a24      	ldr	r2, [pc, #144]	@ (8104044 <HAL_DMA_Abort+0x254>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d022      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	4a22      	ldr	r2, [pc, #136]	@ (8104048 <HAL_DMA_Abort+0x258>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d01d      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	4a21      	ldr	r2, [pc, #132]	@ (810404c <HAL_DMA_Abort+0x25c>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d018      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8104050 <HAL_DMA_Abort+0x260>)
 8103fd2:	4293      	cmp	r3, r2
 8103fd4:	d013      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	4a1e      	ldr	r2, [pc, #120]	@ (8104054 <HAL_DMA_Abort+0x264>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d00e      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8104058 <HAL_DMA_Abort+0x268>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d009      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	4a1b      	ldr	r2, [pc, #108]	@ (810405c <HAL_DMA_Abort+0x26c>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d004      	beq.n	8103ffe <HAL_DMA_Abort+0x20e>
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	4a19      	ldr	r2, [pc, #100]	@ (8104060 <HAL_DMA_Abort+0x270>)
 8103ffa:	4293      	cmp	r3, r2
 8103ffc:	d132      	bne.n	8104064 <HAL_DMA_Abort+0x274>
 8103ffe:	2301      	movs	r3, #1
 8104000:	e031      	b.n	8104066 <HAL_DMA_Abort+0x276>
 8104002:	bf00      	nop
 8104004:	40020010 	.word	0x40020010
 8104008:	40020028 	.word	0x40020028
 810400c:	40020040 	.word	0x40020040
 8104010:	40020058 	.word	0x40020058
 8104014:	40020070 	.word	0x40020070
 8104018:	40020088 	.word	0x40020088
 810401c:	400200a0 	.word	0x400200a0
 8104020:	400200b8 	.word	0x400200b8
 8104024:	40020410 	.word	0x40020410
 8104028:	40020428 	.word	0x40020428
 810402c:	40020440 	.word	0x40020440
 8104030:	40020458 	.word	0x40020458
 8104034:	40020470 	.word	0x40020470
 8104038:	40020488 	.word	0x40020488
 810403c:	400204a0 	.word	0x400204a0
 8104040:	400204b8 	.word	0x400204b8
 8104044:	58025408 	.word	0x58025408
 8104048:	5802541c 	.word	0x5802541c
 810404c:	58025430 	.word	0x58025430
 8104050:	58025444 	.word	0x58025444
 8104054:	58025458 	.word	0x58025458
 8104058:	5802546c 	.word	0x5802546c
 810405c:	58025480 	.word	0x58025480
 8104060:	58025494 	.word	0x58025494
 8104064:	2300      	movs	r3, #0
 8104066:	2b00      	cmp	r3, #0
 8104068:	d007      	beq.n	810407a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810406e:	681a      	ldr	r2, [r3, #0]
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104078:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	4a6d      	ldr	r2, [pc, #436]	@ (8104234 <HAL_DMA_Abort+0x444>)
 8104080:	4293      	cmp	r3, r2
 8104082:	d04a      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	4a6b      	ldr	r2, [pc, #428]	@ (8104238 <HAL_DMA_Abort+0x448>)
 810408a:	4293      	cmp	r3, r2
 810408c:	d045      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	4a6a      	ldr	r2, [pc, #424]	@ (810423c <HAL_DMA_Abort+0x44c>)
 8104094:	4293      	cmp	r3, r2
 8104096:	d040      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4a68      	ldr	r2, [pc, #416]	@ (8104240 <HAL_DMA_Abort+0x450>)
 810409e:	4293      	cmp	r3, r2
 81040a0:	d03b      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	4a67      	ldr	r2, [pc, #412]	@ (8104244 <HAL_DMA_Abort+0x454>)
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d036      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	4a65      	ldr	r2, [pc, #404]	@ (8104248 <HAL_DMA_Abort+0x458>)
 81040b2:	4293      	cmp	r3, r2
 81040b4:	d031      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	4a64      	ldr	r2, [pc, #400]	@ (810424c <HAL_DMA_Abort+0x45c>)
 81040bc:	4293      	cmp	r3, r2
 81040be:	d02c      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	4a62      	ldr	r2, [pc, #392]	@ (8104250 <HAL_DMA_Abort+0x460>)
 81040c6:	4293      	cmp	r3, r2
 81040c8:	d027      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	4a61      	ldr	r2, [pc, #388]	@ (8104254 <HAL_DMA_Abort+0x464>)
 81040d0:	4293      	cmp	r3, r2
 81040d2:	d022      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4a5f      	ldr	r2, [pc, #380]	@ (8104258 <HAL_DMA_Abort+0x468>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	d01d      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a5e      	ldr	r2, [pc, #376]	@ (810425c <HAL_DMA_Abort+0x46c>)
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d018      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	4a5c      	ldr	r2, [pc, #368]	@ (8104260 <HAL_DMA_Abort+0x470>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d013      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a5b      	ldr	r2, [pc, #364]	@ (8104264 <HAL_DMA_Abort+0x474>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d00e      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	4a59      	ldr	r2, [pc, #356]	@ (8104268 <HAL_DMA_Abort+0x478>)
 8104102:	4293      	cmp	r3, r2
 8104104:	d009      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	4a58      	ldr	r2, [pc, #352]	@ (810426c <HAL_DMA_Abort+0x47c>)
 810410c:	4293      	cmp	r3, r2
 810410e:	d004      	beq.n	810411a <HAL_DMA_Abort+0x32a>
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4a56      	ldr	r2, [pc, #344]	@ (8104270 <HAL_DMA_Abort+0x480>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d108      	bne.n	810412c <HAL_DMA_Abort+0x33c>
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	681a      	ldr	r2, [r3, #0]
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	f022 0201 	bic.w	r2, r2, #1
 8104128:	601a      	str	r2, [r3, #0]
 810412a:	e007      	b.n	810413c <HAL_DMA_Abort+0x34c>
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	681a      	ldr	r2, [r3, #0]
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	f022 0201 	bic.w	r2, r2, #1
 810413a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810413c:	e013      	b.n	8104166 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810413e:	f7fe fa01 	bl	8102544 <HAL_GetTick>
 8104142:	4602      	mov	r2, r0
 8104144:	693b      	ldr	r3, [r7, #16]
 8104146:	1ad3      	subs	r3, r2, r3
 8104148:	2b05      	cmp	r3, #5
 810414a:	d90c      	bls.n	8104166 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	2220      	movs	r2, #32
 8104150:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	2203      	movs	r2, #3
 8104156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	2200      	movs	r2, #0
 810415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8104162:	2301      	movs	r3, #1
 8104164:	e12d      	b.n	81043c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104166:	697b      	ldr	r3, [r7, #20]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	f003 0301 	and.w	r3, r3, #1
 810416e:	2b00      	cmp	r3, #0
 8104170:	d1e5      	bne.n	810413e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a2f      	ldr	r2, [pc, #188]	@ (8104234 <HAL_DMA_Abort+0x444>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d04a      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a2d      	ldr	r2, [pc, #180]	@ (8104238 <HAL_DMA_Abort+0x448>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d045      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a2c      	ldr	r2, [pc, #176]	@ (810423c <HAL_DMA_Abort+0x44c>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d040      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a2a      	ldr	r2, [pc, #168]	@ (8104240 <HAL_DMA_Abort+0x450>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d03b      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a29      	ldr	r2, [pc, #164]	@ (8104244 <HAL_DMA_Abort+0x454>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d036      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a27      	ldr	r2, [pc, #156]	@ (8104248 <HAL_DMA_Abort+0x458>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d031      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a26      	ldr	r2, [pc, #152]	@ (810424c <HAL_DMA_Abort+0x45c>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d02c      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	4a24      	ldr	r2, [pc, #144]	@ (8104250 <HAL_DMA_Abort+0x460>)
 81041be:	4293      	cmp	r3, r2
 81041c0:	d027      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a23      	ldr	r2, [pc, #140]	@ (8104254 <HAL_DMA_Abort+0x464>)
 81041c8:	4293      	cmp	r3, r2
 81041ca:	d022      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a21      	ldr	r2, [pc, #132]	@ (8104258 <HAL_DMA_Abort+0x468>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d01d      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	4a20      	ldr	r2, [pc, #128]	@ (810425c <HAL_DMA_Abort+0x46c>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d018      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a1e      	ldr	r2, [pc, #120]	@ (8104260 <HAL_DMA_Abort+0x470>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d013      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a1d      	ldr	r2, [pc, #116]	@ (8104264 <HAL_DMA_Abort+0x474>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d00e      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8104268 <HAL_DMA_Abort+0x478>)
 81041fa:	4293      	cmp	r3, r2
 81041fc:	d009      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a1a      	ldr	r2, [pc, #104]	@ (810426c <HAL_DMA_Abort+0x47c>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d004      	beq.n	8104212 <HAL_DMA_Abort+0x422>
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a18      	ldr	r2, [pc, #96]	@ (8104270 <HAL_DMA_Abort+0x480>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d101      	bne.n	8104216 <HAL_DMA_Abort+0x426>
 8104212:	2301      	movs	r3, #1
 8104214:	e000      	b.n	8104218 <HAL_DMA_Abort+0x428>
 8104216:	2300      	movs	r3, #0
 8104218:	2b00      	cmp	r3, #0
 810421a:	d02b      	beq.n	8104274 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104220:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104226:	f003 031f 	and.w	r3, r3, #31
 810422a:	223f      	movs	r2, #63	@ 0x3f
 810422c:	409a      	lsls	r2, r3
 810422e:	68bb      	ldr	r3, [r7, #8]
 8104230:	609a      	str	r2, [r3, #8]
 8104232:	e02a      	b.n	810428a <HAL_DMA_Abort+0x49a>
 8104234:	40020010 	.word	0x40020010
 8104238:	40020028 	.word	0x40020028
 810423c:	40020040 	.word	0x40020040
 8104240:	40020058 	.word	0x40020058
 8104244:	40020070 	.word	0x40020070
 8104248:	40020088 	.word	0x40020088
 810424c:	400200a0 	.word	0x400200a0
 8104250:	400200b8 	.word	0x400200b8
 8104254:	40020410 	.word	0x40020410
 8104258:	40020428 	.word	0x40020428
 810425c:	40020440 	.word	0x40020440
 8104260:	40020458 	.word	0x40020458
 8104264:	40020470 	.word	0x40020470
 8104268:	40020488 	.word	0x40020488
 810426c:	400204a0 	.word	0x400204a0
 8104270:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104278:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810427e:	f003 031f 	and.w	r3, r3, #31
 8104282:	2201      	movs	r2, #1
 8104284:	409a      	lsls	r2, r3
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	4a4f      	ldr	r2, [pc, #316]	@ (81043cc <HAL_DMA_Abort+0x5dc>)
 8104290:	4293      	cmp	r3, r2
 8104292:	d072      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	4a4d      	ldr	r2, [pc, #308]	@ (81043d0 <HAL_DMA_Abort+0x5e0>)
 810429a:	4293      	cmp	r3, r2
 810429c:	d06d      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	4a4c      	ldr	r2, [pc, #304]	@ (81043d4 <HAL_DMA_Abort+0x5e4>)
 81042a4:	4293      	cmp	r3, r2
 81042a6:	d068      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	4a4a      	ldr	r2, [pc, #296]	@ (81043d8 <HAL_DMA_Abort+0x5e8>)
 81042ae:	4293      	cmp	r3, r2
 81042b0:	d063      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	4a49      	ldr	r2, [pc, #292]	@ (81043dc <HAL_DMA_Abort+0x5ec>)
 81042b8:	4293      	cmp	r3, r2
 81042ba:	d05e      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	4a47      	ldr	r2, [pc, #284]	@ (81043e0 <HAL_DMA_Abort+0x5f0>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d059      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	4a46      	ldr	r2, [pc, #280]	@ (81043e4 <HAL_DMA_Abort+0x5f4>)
 81042cc:	4293      	cmp	r3, r2
 81042ce:	d054      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	4a44      	ldr	r2, [pc, #272]	@ (81043e8 <HAL_DMA_Abort+0x5f8>)
 81042d6:	4293      	cmp	r3, r2
 81042d8:	d04f      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	4a43      	ldr	r2, [pc, #268]	@ (81043ec <HAL_DMA_Abort+0x5fc>)
 81042e0:	4293      	cmp	r3, r2
 81042e2:	d04a      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	4a41      	ldr	r2, [pc, #260]	@ (81043f0 <HAL_DMA_Abort+0x600>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d045      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	4a40      	ldr	r2, [pc, #256]	@ (81043f4 <HAL_DMA_Abort+0x604>)
 81042f4:	4293      	cmp	r3, r2
 81042f6:	d040      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	4a3e      	ldr	r2, [pc, #248]	@ (81043f8 <HAL_DMA_Abort+0x608>)
 81042fe:	4293      	cmp	r3, r2
 8104300:	d03b      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4a3d      	ldr	r2, [pc, #244]	@ (81043fc <HAL_DMA_Abort+0x60c>)
 8104308:	4293      	cmp	r3, r2
 810430a:	d036      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	4a3b      	ldr	r2, [pc, #236]	@ (8104400 <HAL_DMA_Abort+0x610>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d031      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	4a3a      	ldr	r2, [pc, #232]	@ (8104404 <HAL_DMA_Abort+0x614>)
 810431c:	4293      	cmp	r3, r2
 810431e:	d02c      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	4a38      	ldr	r2, [pc, #224]	@ (8104408 <HAL_DMA_Abort+0x618>)
 8104326:	4293      	cmp	r3, r2
 8104328:	d027      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	4a37      	ldr	r2, [pc, #220]	@ (810440c <HAL_DMA_Abort+0x61c>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d022      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	4a35      	ldr	r2, [pc, #212]	@ (8104410 <HAL_DMA_Abort+0x620>)
 810433a:	4293      	cmp	r3, r2
 810433c:	d01d      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a34      	ldr	r2, [pc, #208]	@ (8104414 <HAL_DMA_Abort+0x624>)
 8104344:	4293      	cmp	r3, r2
 8104346:	d018      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	4a32      	ldr	r2, [pc, #200]	@ (8104418 <HAL_DMA_Abort+0x628>)
 810434e:	4293      	cmp	r3, r2
 8104350:	d013      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	4a31      	ldr	r2, [pc, #196]	@ (810441c <HAL_DMA_Abort+0x62c>)
 8104358:	4293      	cmp	r3, r2
 810435a:	d00e      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	4a2f      	ldr	r2, [pc, #188]	@ (8104420 <HAL_DMA_Abort+0x630>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d009      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	4a2e      	ldr	r2, [pc, #184]	@ (8104424 <HAL_DMA_Abort+0x634>)
 810436c:	4293      	cmp	r3, r2
 810436e:	d004      	beq.n	810437a <HAL_DMA_Abort+0x58a>
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	4a2c      	ldr	r2, [pc, #176]	@ (8104428 <HAL_DMA_Abort+0x638>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d101      	bne.n	810437e <HAL_DMA_Abort+0x58e>
 810437a:	2301      	movs	r3, #1
 810437c:	e000      	b.n	8104380 <HAL_DMA_Abort+0x590>
 810437e:	2300      	movs	r3, #0
 8104380:	2b00      	cmp	r3, #0
 8104382:	d015      	beq.n	81043b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104388:	687a      	ldr	r2, [r7, #4]
 810438a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 810438c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104392:	2b00      	cmp	r3, #0
 8104394:	d00c      	beq.n	81043b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810439a:	681a      	ldr	r2, [r3, #0]
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81043a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81043a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81043aa:	687a      	ldr	r2, [r7, #4]
 81043ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81043ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	2201      	movs	r2, #1
 81043b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	2200      	movs	r2, #0
 81043bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 81043c0:	2300      	movs	r3, #0
}
 81043c2:	4618      	mov	r0, r3
 81043c4:	3718      	adds	r7, #24
 81043c6:	46bd      	mov	sp, r7
 81043c8:	bd80      	pop	{r7, pc}
 81043ca:	bf00      	nop
 81043cc:	40020010 	.word	0x40020010
 81043d0:	40020028 	.word	0x40020028
 81043d4:	40020040 	.word	0x40020040
 81043d8:	40020058 	.word	0x40020058
 81043dc:	40020070 	.word	0x40020070
 81043e0:	40020088 	.word	0x40020088
 81043e4:	400200a0 	.word	0x400200a0
 81043e8:	400200b8 	.word	0x400200b8
 81043ec:	40020410 	.word	0x40020410
 81043f0:	40020428 	.word	0x40020428
 81043f4:	40020440 	.word	0x40020440
 81043f8:	40020458 	.word	0x40020458
 81043fc:	40020470 	.word	0x40020470
 8104400:	40020488 	.word	0x40020488
 8104404:	400204a0 	.word	0x400204a0
 8104408:	400204b8 	.word	0x400204b8
 810440c:	58025408 	.word	0x58025408
 8104410:	5802541c 	.word	0x5802541c
 8104414:	58025430 	.word	0x58025430
 8104418:	58025444 	.word	0x58025444
 810441c:	58025458 	.word	0x58025458
 8104420:	5802546c 	.word	0x5802546c
 8104424:	58025480 	.word	0x58025480
 8104428:	58025494 	.word	0x58025494

0810442c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 810442c:	b580      	push	{r7, lr}
 810442e:	b084      	sub	sp, #16
 8104430:	af00      	add	r7, sp, #0
 8104432:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	2b00      	cmp	r3, #0
 8104438:	d101      	bne.n	810443e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810443a:	2301      	movs	r3, #1
 810443c:	e237      	b.n	81048ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8104444:	b2db      	uxtb	r3, r3
 8104446:	2b02      	cmp	r3, #2
 8104448:	d004      	beq.n	8104454 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	2280      	movs	r2, #128	@ 0x80
 810444e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8104450:	2301      	movs	r3, #1
 8104452:	e22c      	b.n	81048ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	681b      	ldr	r3, [r3, #0]
 8104458:	4a5c      	ldr	r2, [pc, #368]	@ (81045cc <HAL_DMA_Abort_IT+0x1a0>)
 810445a:	4293      	cmp	r3, r2
 810445c:	d04a      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 810445e:	687b      	ldr	r3, [r7, #4]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	4a5b      	ldr	r2, [pc, #364]	@ (81045d0 <HAL_DMA_Abort_IT+0x1a4>)
 8104464:	4293      	cmp	r3, r2
 8104466:	d045      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	4a59      	ldr	r2, [pc, #356]	@ (81045d4 <HAL_DMA_Abort_IT+0x1a8>)
 810446e:	4293      	cmp	r3, r2
 8104470:	d040      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	4a58      	ldr	r2, [pc, #352]	@ (81045d8 <HAL_DMA_Abort_IT+0x1ac>)
 8104478:	4293      	cmp	r3, r2
 810447a:	d03b      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	681b      	ldr	r3, [r3, #0]
 8104480:	4a56      	ldr	r2, [pc, #344]	@ (81045dc <HAL_DMA_Abort_IT+0x1b0>)
 8104482:	4293      	cmp	r3, r2
 8104484:	d036      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	4a55      	ldr	r2, [pc, #340]	@ (81045e0 <HAL_DMA_Abort_IT+0x1b4>)
 810448c:	4293      	cmp	r3, r2
 810448e:	d031      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	681b      	ldr	r3, [r3, #0]
 8104494:	4a53      	ldr	r2, [pc, #332]	@ (81045e4 <HAL_DMA_Abort_IT+0x1b8>)
 8104496:	4293      	cmp	r3, r2
 8104498:	d02c      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	4a52      	ldr	r2, [pc, #328]	@ (81045e8 <HAL_DMA_Abort_IT+0x1bc>)
 81044a0:	4293      	cmp	r3, r2
 81044a2:	d027      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	681b      	ldr	r3, [r3, #0]
 81044a8:	4a50      	ldr	r2, [pc, #320]	@ (81045ec <HAL_DMA_Abort_IT+0x1c0>)
 81044aa:	4293      	cmp	r3, r2
 81044ac:	d022      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	4a4f      	ldr	r2, [pc, #316]	@ (81045f0 <HAL_DMA_Abort_IT+0x1c4>)
 81044b4:	4293      	cmp	r3, r2
 81044b6:	d01d      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	4a4d      	ldr	r2, [pc, #308]	@ (81045f4 <HAL_DMA_Abort_IT+0x1c8>)
 81044be:	4293      	cmp	r3, r2
 81044c0:	d018      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	4a4c      	ldr	r2, [pc, #304]	@ (81045f8 <HAL_DMA_Abort_IT+0x1cc>)
 81044c8:	4293      	cmp	r3, r2
 81044ca:	d013      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	4a4a      	ldr	r2, [pc, #296]	@ (81045fc <HAL_DMA_Abort_IT+0x1d0>)
 81044d2:	4293      	cmp	r3, r2
 81044d4:	d00e      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	4a49      	ldr	r2, [pc, #292]	@ (8104600 <HAL_DMA_Abort_IT+0x1d4>)
 81044dc:	4293      	cmp	r3, r2
 81044de:	d009      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	4a47      	ldr	r2, [pc, #284]	@ (8104604 <HAL_DMA_Abort_IT+0x1d8>)
 81044e6:	4293      	cmp	r3, r2
 81044e8:	d004      	beq.n	81044f4 <HAL_DMA_Abort_IT+0xc8>
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	4a46      	ldr	r2, [pc, #280]	@ (8104608 <HAL_DMA_Abort_IT+0x1dc>)
 81044f0:	4293      	cmp	r3, r2
 81044f2:	d101      	bne.n	81044f8 <HAL_DMA_Abort_IT+0xcc>
 81044f4:	2301      	movs	r3, #1
 81044f6:	e000      	b.n	81044fa <HAL_DMA_Abort_IT+0xce>
 81044f8:	2300      	movs	r3, #0
 81044fa:	2b00      	cmp	r3, #0
 81044fc:	f000 8086 	beq.w	810460c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	2204      	movs	r2, #4
 8104504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	4a2f      	ldr	r2, [pc, #188]	@ (81045cc <HAL_DMA_Abort_IT+0x1a0>)
 810450e:	4293      	cmp	r3, r2
 8104510:	d04a      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	4a2e      	ldr	r2, [pc, #184]	@ (81045d0 <HAL_DMA_Abort_IT+0x1a4>)
 8104518:	4293      	cmp	r3, r2
 810451a:	d045      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	4a2c      	ldr	r2, [pc, #176]	@ (81045d4 <HAL_DMA_Abort_IT+0x1a8>)
 8104522:	4293      	cmp	r3, r2
 8104524:	d040      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	4a2b      	ldr	r2, [pc, #172]	@ (81045d8 <HAL_DMA_Abort_IT+0x1ac>)
 810452c:	4293      	cmp	r3, r2
 810452e:	d03b      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	4a29      	ldr	r2, [pc, #164]	@ (81045dc <HAL_DMA_Abort_IT+0x1b0>)
 8104536:	4293      	cmp	r3, r2
 8104538:	d036      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	4a28      	ldr	r2, [pc, #160]	@ (81045e0 <HAL_DMA_Abort_IT+0x1b4>)
 8104540:	4293      	cmp	r3, r2
 8104542:	d031      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	4a26      	ldr	r2, [pc, #152]	@ (81045e4 <HAL_DMA_Abort_IT+0x1b8>)
 810454a:	4293      	cmp	r3, r2
 810454c:	d02c      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	4a25      	ldr	r2, [pc, #148]	@ (81045e8 <HAL_DMA_Abort_IT+0x1bc>)
 8104554:	4293      	cmp	r3, r2
 8104556:	d027      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	4a23      	ldr	r2, [pc, #140]	@ (81045ec <HAL_DMA_Abort_IT+0x1c0>)
 810455e:	4293      	cmp	r3, r2
 8104560:	d022      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	681b      	ldr	r3, [r3, #0]
 8104566:	4a22      	ldr	r2, [pc, #136]	@ (81045f0 <HAL_DMA_Abort_IT+0x1c4>)
 8104568:	4293      	cmp	r3, r2
 810456a:	d01d      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	4a20      	ldr	r2, [pc, #128]	@ (81045f4 <HAL_DMA_Abort_IT+0x1c8>)
 8104572:	4293      	cmp	r3, r2
 8104574:	d018      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	4a1f      	ldr	r2, [pc, #124]	@ (81045f8 <HAL_DMA_Abort_IT+0x1cc>)
 810457c:	4293      	cmp	r3, r2
 810457e:	d013      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	4a1d      	ldr	r2, [pc, #116]	@ (81045fc <HAL_DMA_Abort_IT+0x1d0>)
 8104586:	4293      	cmp	r3, r2
 8104588:	d00e      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	4a1c      	ldr	r2, [pc, #112]	@ (8104600 <HAL_DMA_Abort_IT+0x1d4>)
 8104590:	4293      	cmp	r3, r2
 8104592:	d009      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	4a1a      	ldr	r2, [pc, #104]	@ (8104604 <HAL_DMA_Abort_IT+0x1d8>)
 810459a:	4293      	cmp	r3, r2
 810459c:	d004      	beq.n	81045a8 <HAL_DMA_Abort_IT+0x17c>
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	4a19      	ldr	r2, [pc, #100]	@ (8104608 <HAL_DMA_Abort_IT+0x1dc>)
 81045a4:	4293      	cmp	r3, r2
 81045a6:	d108      	bne.n	81045ba <HAL_DMA_Abort_IT+0x18e>
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	681b      	ldr	r3, [r3, #0]
 81045ac:	681a      	ldr	r2, [r3, #0]
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	f022 0201 	bic.w	r2, r2, #1
 81045b6:	601a      	str	r2, [r3, #0]
 81045b8:	e178      	b.n	81048ac <HAL_DMA_Abort_IT+0x480>
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	681a      	ldr	r2, [r3, #0]
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	f022 0201 	bic.w	r2, r2, #1
 81045c8:	601a      	str	r2, [r3, #0]
 81045ca:	e16f      	b.n	81048ac <HAL_DMA_Abort_IT+0x480>
 81045cc:	40020010 	.word	0x40020010
 81045d0:	40020028 	.word	0x40020028
 81045d4:	40020040 	.word	0x40020040
 81045d8:	40020058 	.word	0x40020058
 81045dc:	40020070 	.word	0x40020070
 81045e0:	40020088 	.word	0x40020088
 81045e4:	400200a0 	.word	0x400200a0
 81045e8:	400200b8 	.word	0x400200b8
 81045ec:	40020410 	.word	0x40020410
 81045f0:	40020428 	.word	0x40020428
 81045f4:	40020440 	.word	0x40020440
 81045f8:	40020458 	.word	0x40020458
 81045fc:	40020470 	.word	0x40020470
 8104600:	40020488 	.word	0x40020488
 8104604:	400204a0 	.word	0x400204a0
 8104608:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	681b      	ldr	r3, [r3, #0]
 8104610:	681a      	ldr	r2, [r3, #0]
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	f022 020e 	bic.w	r2, r2, #14
 810461a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	4a6c      	ldr	r2, [pc, #432]	@ (81047d4 <HAL_DMA_Abort_IT+0x3a8>)
 8104622:	4293      	cmp	r3, r2
 8104624:	d04a      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4a6b      	ldr	r2, [pc, #428]	@ (81047d8 <HAL_DMA_Abort_IT+0x3ac>)
 810462c:	4293      	cmp	r3, r2
 810462e:	d045      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a69      	ldr	r2, [pc, #420]	@ (81047dc <HAL_DMA_Abort_IT+0x3b0>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d040      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a68      	ldr	r2, [pc, #416]	@ (81047e0 <HAL_DMA_Abort_IT+0x3b4>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d03b      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a66      	ldr	r2, [pc, #408]	@ (81047e4 <HAL_DMA_Abort_IT+0x3b8>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d036      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	4a65      	ldr	r2, [pc, #404]	@ (81047e8 <HAL_DMA_Abort_IT+0x3bc>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d031      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	4a63      	ldr	r2, [pc, #396]	@ (81047ec <HAL_DMA_Abort_IT+0x3c0>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d02c      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	4a62      	ldr	r2, [pc, #392]	@ (81047f0 <HAL_DMA_Abort_IT+0x3c4>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d027      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	4a60      	ldr	r2, [pc, #384]	@ (81047f4 <HAL_DMA_Abort_IT+0x3c8>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d022      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	4a5f      	ldr	r2, [pc, #380]	@ (81047f8 <HAL_DMA_Abort_IT+0x3cc>)
 810467c:	4293      	cmp	r3, r2
 810467e:	d01d      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	4a5d      	ldr	r2, [pc, #372]	@ (81047fc <HAL_DMA_Abort_IT+0x3d0>)
 8104686:	4293      	cmp	r3, r2
 8104688:	d018      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	4a5c      	ldr	r2, [pc, #368]	@ (8104800 <HAL_DMA_Abort_IT+0x3d4>)
 8104690:	4293      	cmp	r3, r2
 8104692:	d013      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	4a5a      	ldr	r2, [pc, #360]	@ (8104804 <HAL_DMA_Abort_IT+0x3d8>)
 810469a:	4293      	cmp	r3, r2
 810469c:	d00e      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	4a59      	ldr	r2, [pc, #356]	@ (8104808 <HAL_DMA_Abort_IT+0x3dc>)
 81046a4:	4293      	cmp	r3, r2
 81046a6:	d009      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	681b      	ldr	r3, [r3, #0]
 81046ac:	4a57      	ldr	r2, [pc, #348]	@ (810480c <HAL_DMA_Abort_IT+0x3e0>)
 81046ae:	4293      	cmp	r3, r2
 81046b0:	d004      	beq.n	81046bc <HAL_DMA_Abort_IT+0x290>
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	4a56      	ldr	r2, [pc, #344]	@ (8104810 <HAL_DMA_Abort_IT+0x3e4>)
 81046b8:	4293      	cmp	r3, r2
 81046ba:	d108      	bne.n	81046ce <HAL_DMA_Abort_IT+0x2a2>
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	681b      	ldr	r3, [r3, #0]
 81046c0:	681a      	ldr	r2, [r3, #0]
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	f022 0201 	bic.w	r2, r2, #1
 81046ca:	601a      	str	r2, [r3, #0]
 81046cc:	e007      	b.n	81046de <HAL_DMA_Abort_IT+0x2b2>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	681a      	ldr	r2, [r3, #0]
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	f022 0201 	bic.w	r2, r2, #1
 81046dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4a3c      	ldr	r2, [pc, #240]	@ (81047d4 <HAL_DMA_Abort_IT+0x3a8>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d072      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	4a3a      	ldr	r2, [pc, #232]	@ (81047d8 <HAL_DMA_Abort_IT+0x3ac>)
 81046ee:	4293      	cmp	r3, r2
 81046f0:	d06d      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	4a39      	ldr	r2, [pc, #228]	@ (81047dc <HAL_DMA_Abort_IT+0x3b0>)
 81046f8:	4293      	cmp	r3, r2
 81046fa:	d068      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	4a37      	ldr	r2, [pc, #220]	@ (81047e0 <HAL_DMA_Abort_IT+0x3b4>)
 8104702:	4293      	cmp	r3, r2
 8104704:	d063      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	4a36      	ldr	r2, [pc, #216]	@ (81047e4 <HAL_DMA_Abort_IT+0x3b8>)
 810470c:	4293      	cmp	r3, r2
 810470e:	d05e      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	4a34      	ldr	r2, [pc, #208]	@ (81047e8 <HAL_DMA_Abort_IT+0x3bc>)
 8104716:	4293      	cmp	r3, r2
 8104718:	d059      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	4a33      	ldr	r2, [pc, #204]	@ (81047ec <HAL_DMA_Abort_IT+0x3c0>)
 8104720:	4293      	cmp	r3, r2
 8104722:	d054      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	4a31      	ldr	r2, [pc, #196]	@ (81047f0 <HAL_DMA_Abort_IT+0x3c4>)
 810472a:	4293      	cmp	r3, r2
 810472c:	d04f      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	4a30      	ldr	r2, [pc, #192]	@ (81047f4 <HAL_DMA_Abort_IT+0x3c8>)
 8104734:	4293      	cmp	r3, r2
 8104736:	d04a      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	4a2e      	ldr	r2, [pc, #184]	@ (81047f8 <HAL_DMA_Abort_IT+0x3cc>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d045      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	4a2d      	ldr	r2, [pc, #180]	@ (81047fc <HAL_DMA_Abort_IT+0x3d0>)
 8104748:	4293      	cmp	r3, r2
 810474a:	d040      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	4a2b      	ldr	r2, [pc, #172]	@ (8104800 <HAL_DMA_Abort_IT+0x3d4>)
 8104752:	4293      	cmp	r3, r2
 8104754:	d03b      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	4a2a      	ldr	r2, [pc, #168]	@ (8104804 <HAL_DMA_Abort_IT+0x3d8>)
 810475c:	4293      	cmp	r3, r2
 810475e:	d036      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	4a28      	ldr	r2, [pc, #160]	@ (8104808 <HAL_DMA_Abort_IT+0x3dc>)
 8104766:	4293      	cmp	r3, r2
 8104768:	d031      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	681b      	ldr	r3, [r3, #0]
 810476e:	4a27      	ldr	r2, [pc, #156]	@ (810480c <HAL_DMA_Abort_IT+0x3e0>)
 8104770:	4293      	cmp	r3, r2
 8104772:	d02c      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	681b      	ldr	r3, [r3, #0]
 8104778:	4a25      	ldr	r2, [pc, #148]	@ (8104810 <HAL_DMA_Abort_IT+0x3e4>)
 810477a:	4293      	cmp	r3, r2
 810477c:	d027      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	4a24      	ldr	r2, [pc, #144]	@ (8104814 <HAL_DMA_Abort_IT+0x3e8>)
 8104784:	4293      	cmp	r3, r2
 8104786:	d022      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	4a22      	ldr	r2, [pc, #136]	@ (8104818 <HAL_DMA_Abort_IT+0x3ec>)
 810478e:	4293      	cmp	r3, r2
 8104790:	d01d      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	4a21      	ldr	r2, [pc, #132]	@ (810481c <HAL_DMA_Abort_IT+0x3f0>)
 8104798:	4293      	cmp	r3, r2
 810479a:	d018      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	681b      	ldr	r3, [r3, #0]
 81047a0:	4a1f      	ldr	r2, [pc, #124]	@ (8104820 <HAL_DMA_Abort_IT+0x3f4>)
 81047a2:	4293      	cmp	r3, r2
 81047a4:	d013      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	681b      	ldr	r3, [r3, #0]
 81047aa:	4a1e      	ldr	r2, [pc, #120]	@ (8104824 <HAL_DMA_Abort_IT+0x3f8>)
 81047ac:	4293      	cmp	r3, r2
 81047ae:	d00e      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81047b0:	687b      	ldr	r3, [r7, #4]
 81047b2:	681b      	ldr	r3, [r3, #0]
 81047b4:	4a1c      	ldr	r2, [pc, #112]	@ (8104828 <HAL_DMA_Abort_IT+0x3fc>)
 81047b6:	4293      	cmp	r3, r2
 81047b8:	d009      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	4a1b      	ldr	r2, [pc, #108]	@ (810482c <HAL_DMA_Abort_IT+0x400>)
 81047c0:	4293      	cmp	r3, r2
 81047c2:	d004      	beq.n	81047ce <HAL_DMA_Abort_IT+0x3a2>
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	4a19      	ldr	r2, [pc, #100]	@ (8104830 <HAL_DMA_Abort_IT+0x404>)
 81047ca:	4293      	cmp	r3, r2
 81047cc:	d132      	bne.n	8104834 <HAL_DMA_Abort_IT+0x408>
 81047ce:	2301      	movs	r3, #1
 81047d0:	e031      	b.n	8104836 <HAL_DMA_Abort_IT+0x40a>
 81047d2:	bf00      	nop
 81047d4:	40020010 	.word	0x40020010
 81047d8:	40020028 	.word	0x40020028
 81047dc:	40020040 	.word	0x40020040
 81047e0:	40020058 	.word	0x40020058
 81047e4:	40020070 	.word	0x40020070
 81047e8:	40020088 	.word	0x40020088
 81047ec:	400200a0 	.word	0x400200a0
 81047f0:	400200b8 	.word	0x400200b8
 81047f4:	40020410 	.word	0x40020410
 81047f8:	40020428 	.word	0x40020428
 81047fc:	40020440 	.word	0x40020440
 8104800:	40020458 	.word	0x40020458
 8104804:	40020470 	.word	0x40020470
 8104808:	40020488 	.word	0x40020488
 810480c:	400204a0 	.word	0x400204a0
 8104810:	400204b8 	.word	0x400204b8
 8104814:	58025408 	.word	0x58025408
 8104818:	5802541c 	.word	0x5802541c
 810481c:	58025430 	.word	0x58025430
 8104820:	58025444 	.word	0x58025444
 8104824:	58025458 	.word	0x58025458
 8104828:	5802546c 	.word	0x5802546c
 810482c:	58025480 	.word	0x58025480
 8104830:	58025494 	.word	0x58025494
 8104834:	2300      	movs	r3, #0
 8104836:	2b00      	cmp	r3, #0
 8104838:	d028      	beq.n	810488c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810483e:	681a      	ldr	r2, [r3, #0]
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104848:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810484e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104854:	f003 031f 	and.w	r3, r3, #31
 8104858:	2201      	movs	r2, #1
 810485a:	409a      	lsls	r2, r3
 810485c:	68fb      	ldr	r3, [r7, #12]
 810485e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104864:	687a      	ldr	r2, [r7, #4]
 8104866:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104868:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810486e:	2b00      	cmp	r3, #0
 8104870:	d00c      	beq.n	810488c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104876:	681a      	ldr	r2, [r3, #0]
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810487c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104880:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104886:	687a      	ldr	r2, [r7, #4]
 8104888:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810488a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	2201      	movs	r2, #1
 8104890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	2200      	movs	r2, #0
 8104898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81048a0:	2b00      	cmp	r3, #0
 81048a2:	d003      	beq.n	81048ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81048a8:	6878      	ldr	r0, [r7, #4]
 81048aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81048ac:	2300      	movs	r3, #0
}
 81048ae:	4618      	mov	r0, r3
 81048b0:	3710      	adds	r7, #16
 81048b2:	46bd      	mov	sp, r7
 81048b4:	bd80      	pop	{r7, pc}
 81048b6:	bf00      	nop

081048b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b098      	sub	sp, #96	@ 0x60
 81048bc:	af00      	add	r7, sp, #0
 81048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 81048c0:	4a84      	ldr	r2, [pc, #528]	@ (8104ad4 <HAL_FDCAN_Init+0x21c>)
 81048c2:	f107 030c 	add.w	r3, r7, #12
 81048c6:	4611      	mov	r1, r2
 81048c8:	224c      	movs	r2, #76	@ 0x4c
 81048ca:	4618      	mov	r0, r3
 81048cc:	f00e fc39 	bl	8113142 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	2b00      	cmp	r3, #0
 81048d4:	d101      	bne.n	81048da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 81048d6:	2301      	movs	r3, #1
 81048d8:	e1c6      	b.n	8104c68 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	4a7e      	ldr	r2, [pc, #504]	@ (8104ad8 <HAL_FDCAN_Init+0x220>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d106      	bne.n	81048f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81048ec:	461a      	mov	r2, r3
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81048f8:	b2db      	uxtb	r3, r3
 81048fa:	2b00      	cmp	r3, #0
 81048fc:	d106      	bne.n	810490c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	2200      	movs	r2, #0
 8104902:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8104906:	6878      	ldr	r0, [r7, #4]
 8104908:	f7fd fb2c 	bl	8101f64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	699a      	ldr	r2, [r3, #24]
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	f022 0210 	bic.w	r2, r2, #16
 810491a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 810491c:	f7fd fe12 	bl	8102544 <HAL_GetTick>
 8104920:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104922:	e014      	b.n	810494e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8104924:	f7fd fe0e 	bl	8102544 <HAL_GetTick>
 8104928:	4602      	mov	r2, r0
 810492a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810492c:	1ad3      	subs	r3, r2, r3
 810492e:	2b0a      	cmp	r3, #10
 8104930:	d90d      	bls.n	810494e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104938:	f043 0201 	orr.w	r2, r3, #1
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	2203      	movs	r2, #3
 8104946:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 810494a:	2301      	movs	r3, #1
 810494c:	e18c      	b.n	8104c68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	699b      	ldr	r3, [r3, #24]
 8104954:	f003 0308 	and.w	r3, r3, #8
 8104958:	2b08      	cmp	r3, #8
 810495a:	d0e3      	beq.n	8104924 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	699a      	ldr	r2, [r3, #24]
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	f042 0201 	orr.w	r2, r2, #1
 810496a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 810496c:	f7fd fdea 	bl	8102544 <HAL_GetTick>
 8104970:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8104972:	e014      	b.n	810499e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8104974:	f7fd fde6 	bl	8102544 <HAL_GetTick>
 8104978:	4602      	mov	r2, r0
 810497a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810497c:	1ad3      	subs	r3, r2, r3
 810497e:	2b0a      	cmp	r3, #10
 8104980:	d90d      	bls.n	810499e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104988:	f043 0201 	orr.w	r2, r3, #1
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	2203      	movs	r2, #3
 8104996:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 810499a:	2301      	movs	r3, #1
 810499c:	e164      	b.n	8104c68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	699b      	ldr	r3, [r3, #24]
 81049a4:	f003 0301 	and.w	r3, r3, #1
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d0e3      	beq.n	8104974 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	699a      	ldr	r2, [r3, #24]
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	f042 0202 	orr.w	r2, r2, #2
 81049ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	7c1b      	ldrb	r3, [r3, #16]
 81049c0:	2b01      	cmp	r3, #1
 81049c2:	d108      	bne.n	81049d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	681b      	ldr	r3, [r3, #0]
 81049c8:	699a      	ldr	r2, [r3, #24]
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81049d2:	619a      	str	r2, [r3, #24]
 81049d4:	e007      	b.n	81049e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	681b      	ldr	r3, [r3, #0]
 81049da:	699a      	ldr	r2, [r3, #24]
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81049e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	7c5b      	ldrb	r3, [r3, #17]
 81049ea:	2b01      	cmp	r3, #1
 81049ec:	d108      	bne.n	8104a00 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	681b      	ldr	r3, [r3, #0]
 81049f2:	699a      	ldr	r2, [r3, #24]
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	681b      	ldr	r3, [r3, #0]
 81049f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81049fc:	619a      	str	r2, [r3, #24]
 81049fe:	e007      	b.n	8104a10 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	699a      	ldr	r2, [r3, #24]
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8104a0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	7c9b      	ldrb	r3, [r3, #18]
 8104a14:	2b01      	cmp	r3, #1
 8104a16:	d108      	bne.n	8104a2a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	699a      	ldr	r2, [r3, #24]
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8104a26:	619a      	str	r2, [r3, #24]
 8104a28:	e007      	b.n	8104a3a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	699a      	ldr	r2, [r3, #24]
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104a38:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	699b      	ldr	r3, [r3, #24]
 8104a40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	689a      	ldr	r2, [r3, #8]
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	430a      	orrs	r2, r1
 8104a4e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	699a      	ldr	r2, [r3, #24]
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8104a5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	691a      	ldr	r2, [r3, #16]
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	f022 0210 	bic.w	r2, r2, #16
 8104a6e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	68db      	ldr	r3, [r3, #12]
 8104a74:	2b01      	cmp	r3, #1
 8104a76:	d108      	bne.n	8104a8a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	699a      	ldr	r2, [r3, #24]
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	f042 0204 	orr.w	r2, r2, #4
 8104a86:	619a      	str	r2, [r3, #24]
 8104a88:	e030      	b.n	8104aec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	68db      	ldr	r3, [r3, #12]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d02c      	beq.n	8104aec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	68db      	ldr	r3, [r3, #12]
 8104a96:	2b02      	cmp	r3, #2
 8104a98:	d020      	beq.n	8104adc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	699a      	ldr	r2, [r3, #24]
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8104aa8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	691a      	ldr	r2, [r3, #16]
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	f042 0210 	orr.w	r2, r2, #16
 8104ab8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	68db      	ldr	r3, [r3, #12]
 8104abe:	2b03      	cmp	r3, #3
 8104ac0:	d114      	bne.n	8104aec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	681b      	ldr	r3, [r3, #0]
 8104ac6:	699a      	ldr	r2, [r3, #24]
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	f042 0220 	orr.w	r2, r2, #32
 8104ad0:	619a      	str	r2, [r3, #24]
 8104ad2:	e00b      	b.n	8104aec <HAL_FDCAN_Init+0x234>
 8104ad4:	081174cc 	.word	0x081174cc
 8104ad8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	699a      	ldr	r2, [r3, #24]
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	f042 0220 	orr.w	r2, r2, #32
 8104aea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	699b      	ldr	r3, [r3, #24]
 8104af0:	3b01      	subs	r3, #1
 8104af2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	69db      	ldr	r3, [r3, #28]
 8104af8:	3b01      	subs	r3, #1
 8104afa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104afc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	6a1b      	ldr	r3, [r3, #32]
 8104b02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8104b04:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	695b      	ldr	r3, [r3, #20]
 8104b0c:	3b01      	subs	r3, #1
 8104b0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8104b14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8104b16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	689b      	ldr	r3, [r3, #8]
 8104b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104b20:	d115      	bne.n	8104b4e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104b26:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b2c:	3b01      	subs	r3, #1
 8104b2e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104b30:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104b36:	3b01      	subs	r3, #1
 8104b38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8104b3a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104b42:	3b01      	subs	r3, #1
 8104b44:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8104b4a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8104b4c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104b52:	2b00      	cmp	r3, #0
 8104b54:	d00a      	beq.n	8104b6c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	430a      	orrs	r2, r1
 8104b68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104b74:	4413      	add	r3, r2
 8104b76:	2b00      	cmp	r3, #0
 8104b78:	d011      	beq.n	8104b9e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8104b82:	f023 0107 	bic.w	r1, r3, #7
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b8a:	009b      	lsls	r3, r3, #2
 8104b8c:	3360      	adds	r3, #96	@ 0x60
 8104b8e:	443b      	add	r3, r7
 8104b90:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	430a      	orrs	r2, r1
 8104b9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104ba2:	2b00      	cmp	r3, #0
 8104ba4:	d011      	beq.n	8104bca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104bae:	f023 0107 	bic.w	r1, r3, #7
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104bb6:	009b      	lsls	r3, r3, #2
 8104bb8:	3360      	adds	r3, #96	@ 0x60
 8104bba:	443b      	add	r3, r7
 8104bbc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	430a      	orrs	r2, r1
 8104bc6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104bce:	2b00      	cmp	r3, #0
 8104bd0:	d012      	beq.n	8104bf8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104bda:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104be2:	009b      	lsls	r3, r3, #2
 8104be4:	3360      	adds	r3, #96	@ 0x60
 8104be6:	443b      	add	r3, r7
 8104be8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104bec:	011a      	lsls	r2, r3, #4
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	430a      	orrs	r2, r1
 8104bf4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104bfc:	2b00      	cmp	r3, #0
 8104bfe:	d012      	beq.n	8104c26 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8104c00:	687b      	ldr	r3, [r7, #4]
 8104c02:	681b      	ldr	r3, [r3, #0]
 8104c04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104c08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c10:	009b      	lsls	r3, r3, #2
 8104c12:	3360      	adds	r3, #96	@ 0x60
 8104c14:	443b      	add	r3, r7
 8104c16:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8104c1a:	021a      	lsls	r2, r3, #8
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	430a      	orrs	r2, r1
 8104c22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	4a11      	ldr	r2, [pc, #68]	@ (8104c70 <HAL_FDCAN_Init+0x3b8>)
 8104c2c:	4293      	cmp	r3, r2
 8104c2e:	d107      	bne.n	8104c40 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	685b      	ldr	r3, [r3, #4]
 8104c34:	689a      	ldr	r2, [r3, #8]
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	685b      	ldr	r3, [r3, #4]
 8104c3a:	f022 0203 	bic.w	r2, r2, #3
 8104c3e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	2200      	movs	r2, #0
 8104c44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	2200      	movs	r2, #0
 8104c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	2201      	movs	r2, #1
 8104c54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8104c58:	6878      	ldr	r0, [r7, #4]
 8104c5a:	f000 fe3d 	bl	81058d8 <FDCAN_CalcultateRamBlockAddresses>
 8104c5e:	4603      	mov	r3, r0
 8104c60:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8104c64:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8104c68:	4618      	mov	r0, r3
 8104c6a:	3760      	adds	r7, #96	@ 0x60
 8104c6c:	46bd      	mov	sp, r7
 8104c6e:	bd80      	pop	{r7, pc}
 8104c70:	4000a000 	.word	0x4000a000

08104c74 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8104c74:	b480      	push	{r7}
 8104c76:	b087      	sub	sp, #28
 8104c78:	af00      	add	r7, sp, #0
 8104c7a:	6078      	str	r0, [r7, #4]
 8104c7c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104c84:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8104c86:	7bfb      	ldrb	r3, [r7, #15]
 8104c88:	2b01      	cmp	r3, #1
 8104c8a:	d002      	beq.n	8104c92 <HAL_FDCAN_ConfigFilter+0x1e>
 8104c8c:	7bfb      	ldrb	r3, [r7, #15]
 8104c8e:	2b02      	cmp	r3, #2
 8104c90:	d157      	bne.n	8104d42 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8104c92:	683b      	ldr	r3, [r7, #0]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	2b00      	cmp	r3, #0
 8104c98:	d12b      	bne.n	8104cf2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8104c9a:	683b      	ldr	r3, [r7, #0]
 8104c9c:	68db      	ldr	r3, [r3, #12]
 8104c9e:	2b07      	cmp	r3, #7
 8104ca0:	d10d      	bne.n	8104cbe <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8104ca2:	683b      	ldr	r3, [r7, #0]
 8104ca4:	691b      	ldr	r3, [r3, #16]
 8104ca6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8104ca8:	683b      	ldr	r3, [r7, #0]
 8104caa:	69db      	ldr	r3, [r3, #28]
 8104cac:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8104cae:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8104cb0:	683b      	ldr	r3, [r7, #0]
 8104cb2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8104cb4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8104cb6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8104cba:	617b      	str	r3, [r7, #20]
 8104cbc:	e00e      	b.n	8104cdc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8104cbe:	683b      	ldr	r3, [r7, #0]
 8104cc0:	689b      	ldr	r3, [r3, #8]
 8104cc2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8104cc4:	683b      	ldr	r3, [r7, #0]
 8104cc6:	68db      	ldr	r3, [r3, #12]
 8104cc8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8104cca:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8104ccc:	683b      	ldr	r3, [r7, #0]
 8104cce:	691b      	ldr	r3, [r3, #16]
 8104cd0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8104cd2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8104cd4:	683b      	ldr	r3, [r7, #0]
 8104cd6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8104cd8:	4313      	orrs	r3, r2
 8104cda:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104ce0:	683b      	ldr	r3, [r7, #0]
 8104ce2:	685b      	ldr	r3, [r3, #4]
 8104ce4:	009b      	lsls	r3, r3, #2
 8104ce6:	4413      	add	r3, r2
 8104ce8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8104cea:	68bb      	ldr	r3, [r7, #8]
 8104cec:	697a      	ldr	r2, [r7, #20]
 8104cee:	601a      	str	r2, [r3, #0]
 8104cf0:	e025      	b.n	8104d3e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8104cf2:	683b      	ldr	r3, [r7, #0]
 8104cf4:	68db      	ldr	r3, [r3, #12]
 8104cf6:	075a      	lsls	r2, r3, #29
 8104cf8:	683b      	ldr	r3, [r7, #0]
 8104cfa:	691b      	ldr	r3, [r3, #16]
 8104cfc:	4313      	orrs	r3, r2
 8104cfe:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8104d00:	683b      	ldr	r3, [r7, #0]
 8104d02:	68db      	ldr	r3, [r3, #12]
 8104d04:	2b07      	cmp	r3, #7
 8104d06:	d103      	bne.n	8104d10 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8104d08:	683b      	ldr	r3, [r7, #0]
 8104d0a:	699b      	ldr	r3, [r3, #24]
 8104d0c:	613b      	str	r3, [r7, #16]
 8104d0e:	e006      	b.n	8104d1e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8104d10:	683b      	ldr	r3, [r7, #0]
 8104d12:	689b      	ldr	r3, [r3, #8]
 8104d14:	079a      	lsls	r2, r3, #30
 8104d16:	683b      	ldr	r3, [r7, #0]
 8104d18:	695b      	ldr	r3, [r3, #20]
 8104d1a:	4313      	orrs	r3, r2
 8104d1c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104d22:	683b      	ldr	r3, [r7, #0]
 8104d24:	685b      	ldr	r3, [r3, #4]
 8104d26:	00db      	lsls	r3, r3, #3
 8104d28:	4413      	add	r3, r2
 8104d2a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8104d2c:	68bb      	ldr	r3, [r7, #8]
 8104d2e:	697a      	ldr	r2, [r7, #20]
 8104d30:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8104d32:	68bb      	ldr	r3, [r7, #8]
 8104d34:	3304      	adds	r3, #4
 8104d36:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8104d38:	68bb      	ldr	r3, [r7, #8]
 8104d3a:	693a      	ldr	r2, [r7, #16]
 8104d3c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8104d3e:	2300      	movs	r3, #0
 8104d40:	e008      	b.n	8104d54 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104d48:	f043 0202 	orr.w	r2, r3, #2
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8104d52:	2301      	movs	r3, #1
  }
}
 8104d54:	4618      	mov	r0, r3
 8104d56:	371c      	adds	r7, #28
 8104d58:	46bd      	mov	sp, r7
 8104d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d5e:	4770      	bx	lr

08104d60 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8104d60:	b480      	push	{r7}
 8104d62:	b083      	sub	sp, #12
 8104d64:	af00      	add	r7, sp, #0
 8104d66:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104d6e:	b2db      	uxtb	r3, r3
 8104d70:	2b01      	cmp	r3, #1
 8104d72:	d111      	bne.n	8104d98 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	2202      	movs	r2, #2
 8104d78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	699a      	ldr	r2, [r3, #24]
 8104d82:	687b      	ldr	r3, [r7, #4]
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	f022 0201 	bic.w	r2, r2, #1
 8104d8a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	2200      	movs	r2, #0
 8104d90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8104d94:	2300      	movs	r3, #0
 8104d96:	e008      	b.n	8104daa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104d9e:	f043 0204 	orr.w	r2, r3, #4
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8104da8:	2301      	movs	r3, #1
  }
}
 8104daa:	4618      	mov	r0, r3
 8104dac:	370c      	adds	r7, #12
 8104dae:	46bd      	mov	sp, r7
 8104db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db4:	4770      	bx	lr

08104db6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8104db6:	b580      	push	{r7, lr}
 8104db8:	b086      	sub	sp, #24
 8104dba:	af00      	add	r7, sp, #0
 8104dbc:	60f8      	str	r0, [r7, #12]
 8104dbe:	60b9      	str	r1, [r7, #8]
 8104dc0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104dc8:	b2db      	uxtb	r3, r3
 8104dca:	2b02      	cmp	r3, #2
 8104dcc:	d141      	bne.n	8104e52 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8104dce:	68fb      	ldr	r3, [r7, #12]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8104dd6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8104dda:	2b00      	cmp	r3, #0
 8104ddc:	d109      	bne.n	8104df2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104dde:	68fb      	ldr	r3, [r7, #12]
 8104de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104de4:	f043 0220 	orr.w	r2, r3, #32
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8104dee:	2301      	movs	r3, #1
 8104df0:	e038      	b.n	8104e64 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8104df2:	68fb      	ldr	r3, [r7, #12]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8104dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104dfe:	2b00      	cmp	r3, #0
 8104e00:	d009      	beq.n	8104e16 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104e08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8104e12:	2301      	movs	r3, #1
 8104e14:	e026      	b.n	8104e64 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8104e16:	68fb      	ldr	r3, [r7, #12]
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8104e1e:	0c1b      	lsrs	r3, r3, #16
 8104e20:	f003 031f 	and.w	r3, r3, #31
 8104e24:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8104e26:	697b      	ldr	r3, [r7, #20]
 8104e28:	687a      	ldr	r2, [r7, #4]
 8104e2a:	68b9      	ldr	r1, [r7, #8]
 8104e2c:	68f8      	ldr	r0, [r7, #12]
 8104e2e:	f000 fee3 	bl	8105bf8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8104e32:	68fb      	ldr	r3, [r7, #12]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	2101      	movs	r1, #1
 8104e38:	697a      	ldr	r2, [r7, #20]
 8104e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8104e3e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8104e42:	2201      	movs	r2, #1
 8104e44:	697b      	ldr	r3, [r7, #20]
 8104e46:	409a      	lsls	r2, r3
 8104e48:	68fb      	ldr	r3, [r7, #12]
 8104e4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8104e4e:	2300      	movs	r3, #0
 8104e50:	e008      	b.n	8104e64 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104e58:	f043 0208 	orr.w	r2, r3, #8
 8104e5c:	68fb      	ldr	r3, [r7, #12]
 8104e5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8104e62:	2301      	movs	r3, #1
  }
}
 8104e64:	4618      	mov	r0, r3
 8104e66:	3718      	adds	r7, #24
 8104e68:	46bd      	mov	sp, r7
 8104e6a:	bd80      	pop	{r7, pc}

08104e6c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8104e6c:	b480      	push	{r7}
 8104e6e:	b08b      	sub	sp, #44	@ 0x2c
 8104e70:	af00      	add	r7, sp, #0
 8104e72:	60f8      	str	r0, [r7, #12]
 8104e74:	60b9      	str	r1, [r7, #8]
 8104e76:	607a      	str	r2, [r7, #4]
 8104e78:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8104e7a:	2300      	movs	r3, #0
 8104e7c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8104e7e:	68fb      	ldr	r3, [r7, #12]
 8104e80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8104e84:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8104e86:	7efb      	ldrb	r3, [r7, #27]
 8104e88:	2b02      	cmp	r3, #2
 8104e8a:	f040 8149 	bne.w	8105120 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8104e8e:	68bb      	ldr	r3, [r7, #8]
 8104e90:	2b40      	cmp	r3, #64	@ 0x40
 8104e92:	d14c      	bne.n	8104f2e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104e9c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d109      	bne.n	8104eb8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104eaa:	f043 0220 	orr.w	r2, r3, #32
 8104eae:	68fb      	ldr	r3, [r7, #12]
 8104eb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104eb4:	2301      	movs	r3, #1
 8104eb6:	e13c      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8104eb8:	68fb      	ldr	r3, [r7, #12]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104ec4:	2b00      	cmp	r3, #0
 8104ec6:	d109      	bne.n	8104edc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104ed2:	68fb      	ldr	r3, [r7, #12]
 8104ed4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104ed8:	2301      	movs	r3, #1
 8104eda:	e12a      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8104edc:	68fb      	ldr	r3, [r7, #12]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104ee4:	0e1b      	lsrs	r3, r3, #24
 8104ee6:	f003 0301 	and.w	r3, r3, #1
 8104eea:	2b01      	cmp	r3, #1
 8104eec:	d10a      	bne.n	8104f04 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104ef6:	0fdb      	lsrs	r3, r3, #31
 8104ef8:	f003 0301 	and.w	r3, r3, #1
 8104efc:	2b01      	cmp	r3, #1
 8104efe:	d101      	bne.n	8104f04 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8104f00:	2301      	movs	r3, #1
 8104f02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104f0c:	0a1b      	lsrs	r3, r3, #8
 8104f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104f12:	69fa      	ldr	r2, [r7, #28]
 8104f14:	4413      	add	r3, r2
 8104f16:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104f20:	69f9      	ldr	r1, [r7, #28]
 8104f22:	fb01 f303 	mul.w	r3, r1, r3
 8104f26:	009b      	lsls	r3, r3, #2
 8104f28:	4413      	add	r3, r2
 8104f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8104f2c:	e068      	b.n	8105000 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8104f2e:	68bb      	ldr	r3, [r7, #8]
 8104f30:	2b41      	cmp	r3, #65	@ 0x41
 8104f32:	d14c      	bne.n	8104fce <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104f3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104f40:	2b00      	cmp	r3, #0
 8104f42:	d109      	bne.n	8104f58 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104f44:	68fb      	ldr	r3, [r7, #12]
 8104f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104f4a:	f043 0220 	orr.w	r2, r3, #32
 8104f4e:	68fb      	ldr	r3, [r7, #12]
 8104f50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104f54:	2301      	movs	r3, #1
 8104f56:	e0ec      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8104f58:	68fb      	ldr	r3, [r7, #12]
 8104f5a:	681b      	ldr	r3, [r3, #0]
 8104f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d109      	bne.n	8104f7c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8104f68:	68fb      	ldr	r3, [r7, #12]
 8104f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104f6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104f72:	68fb      	ldr	r3, [r7, #12]
 8104f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104f78:	2301      	movs	r3, #1
 8104f7a:	e0da      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104f84:	0e1b      	lsrs	r3, r3, #24
 8104f86:	f003 0301 	and.w	r3, r3, #1
 8104f8a:	2b01      	cmp	r3, #1
 8104f8c:	d10a      	bne.n	8104fa4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8104f8e:	68fb      	ldr	r3, [r7, #12]
 8104f90:	681b      	ldr	r3, [r3, #0]
 8104f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104f96:	0fdb      	lsrs	r3, r3, #31
 8104f98:	f003 0301 	and.w	r3, r3, #1
 8104f9c:	2b01      	cmp	r3, #1
 8104f9e:	d101      	bne.n	8104fa4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8104fa0:	2301      	movs	r3, #1
 8104fa2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8104fa4:	68fb      	ldr	r3, [r7, #12]
 8104fa6:	681b      	ldr	r3, [r3, #0]
 8104fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104fac:	0a1b      	lsrs	r3, r3, #8
 8104fae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104fb2:	69fa      	ldr	r2, [r7, #28]
 8104fb4:	4413      	add	r3, r2
 8104fb6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8104fb8:	68fb      	ldr	r3, [r7, #12]
 8104fba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104fc0:	69f9      	ldr	r1, [r7, #28]
 8104fc2:	fb01 f303 	mul.w	r3, r1, r3
 8104fc6:	009b      	lsls	r3, r3, #2
 8104fc8:	4413      	add	r3, r2
 8104fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8104fcc:	e018      	b.n	8105000 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104fd2:	68ba      	ldr	r2, [r7, #8]
 8104fd4:	429a      	cmp	r2, r3
 8104fd6:	d309      	bcc.n	8104fec <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8104fd8:	68fb      	ldr	r3, [r7, #12]
 8104fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104fde:	f043 0220 	orr.w	r2, r3, #32
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8104fe8:	2301      	movs	r3, #1
 8104fea:	e0a2      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8104ff0:	68fb      	ldr	r3, [r7, #12]
 8104ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104ff4:	68b9      	ldr	r1, [r7, #8]
 8104ff6:	fb01 f303 	mul.w	r3, r1, r3
 8104ffa:	009b      	lsls	r3, r3, #2
 8104ffc:	4413      	add	r3, r2
 8104ffe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8105000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	685b      	ldr	r3, [r3, #4]
 8105010:	2b00      	cmp	r3, #0
 8105012:	d107      	bne.n	8105024 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8105014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	0c9b      	lsrs	r3, r3, #18
 810501a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	601a      	str	r2, [r3, #0]
 8105022:	e005      	b.n	8105030 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8105024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8105030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 810503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8105048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810504a:	3304      	adds	r3, #4
 810504c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 810504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	b29a      	uxth	r2, r3
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8105058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810505a:	681b      	ldr	r3, [r3, #0]
 810505c:	0c1b      	lsrs	r3, r3, #16
 810505e:	f003 020f 	and.w	r2, r3, #15
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8105066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8105072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 810507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	0e1b      	lsrs	r3, r3, #24
 8105084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 810508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	0fda      	lsrs	r2, r3, #31
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8105096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105098:	3304      	adds	r3, #4
 810509a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 810509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810509e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 81050a0:	2300      	movs	r3, #0
 81050a2:	623b      	str	r3, [r7, #32]
 81050a4:	e00a      	b.n	81050bc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 81050a6:	697a      	ldr	r2, [r7, #20]
 81050a8:	6a3b      	ldr	r3, [r7, #32]
 81050aa:	441a      	add	r2, r3
 81050ac:	6839      	ldr	r1, [r7, #0]
 81050ae:	6a3b      	ldr	r3, [r7, #32]
 81050b0:	440b      	add	r3, r1
 81050b2:	7812      	ldrb	r2, [r2, #0]
 81050b4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 81050b6:	6a3b      	ldr	r3, [r7, #32]
 81050b8:	3301      	adds	r3, #1
 81050ba:	623b      	str	r3, [r7, #32]
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	68db      	ldr	r3, [r3, #12]
 81050c0:	4a1f      	ldr	r2, [pc, #124]	@ (8105140 <HAL_FDCAN_GetRxMessage+0x2d4>)
 81050c2:	5cd3      	ldrb	r3, [r2, r3]
 81050c4:	461a      	mov	r2, r3
 81050c6:	6a3b      	ldr	r3, [r7, #32]
 81050c8:	4293      	cmp	r3, r2
 81050ca:	d3ec      	bcc.n	81050a6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 81050cc:	68bb      	ldr	r3, [r7, #8]
 81050ce:	2b40      	cmp	r3, #64	@ 0x40
 81050d0:	d105      	bne.n	81050de <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	69fa      	ldr	r2, [r7, #28]
 81050d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 81050dc:	e01e      	b.n	810511c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 81050de:	68bb      	ldr	r3, [r7, #8]
 81050e0:	2b41      	cmp	r3, #65	@ 0x41
 81050e2:	d105      	bne.n	81050f0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 81050e4:	68fb      	ldr	r3, [r7, #12]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	69fa      	ldr	r2, [r7, #28]
 81050ea:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 81050ee:	e015      	b.n	810511c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 81050f0:	68bb      	ldr	r3, [r7, #8]
 81050f2:	2b1f      	cmp	r3, #31
 81050f4:	d808      	bhi.n	8105108 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	2101      	movs	r1, #1
 81050fc:	68ba      	ldr	r2, [r7, #8]
 81050fe:	fa01 f202 	lsl.w	r2, r1, r2
 8105102:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8105106:	e009      	b.n	810511c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8105108:	68bb      	ldr	r3, [r7, #8]
 810510a:	f003 021f 	and.w	r2, r3, #31
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	2101      	movs	r1, #1
 8105114:	fa01 f202 	lsl.w	r2, r1, r2
 8105118:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 810511c:	2300      	movs	r3, #0
 810511e:	e008      	b.n	8105132 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105126:	f043 0208 	orr.w	r2, r3, #8
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8105130:	2301      	movs	r3, #1
  }
}
 8105132:	4618      	mov	r0, r3
 8105134:	372c      	adds	r7, #44	@ 0x2c
 8105136:	46bd      	mov	sp, r7
 8105138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810513c:	4770      	bx	lr
 810513e:	bf00      	nop
 8105140:	081177c0 	.word	0x081177c0

08105144 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8105144:	b480      	push	{r7}
 8105146:	b085      	sub	sp, #20
 8105148:	af00      	add	r7, sp, #0
 810514a:	6078      	str	r0, [r7, #4]
 810514c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105154:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	f003 0207 	and.w	r2, r3, #7
 810515c:	683b      	ldr	r3, [r7, #0]
 810515e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	0a1b      	lsrs	r3, r3, #8
 8105164:	f003 0207 	and.w	r2, r3, #7
 8105168:	683b      	ldr	r3, [r7, #0]
 810516a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 810516c:	68fb      	ldr	r3, [r7, #12]
 810516e:	f003 0218 	and.w	r2, r3, #24
 8105172:	683b      	ldr	r3, [r7, #0]
 8105174:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8105176:	68fb      	ldr	r3, [r7, #12]
 8105178:	095b      	lsrs	r3, r3, #5
 810517a:	f003 0201 	and.w	r2, r3, #1
 810517e:	683b      	ldr	r3, [r7, #0]
 8105180:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8105182:	68fb      	ldr	r3, [r7, #12]
 8105184:	099b      	lsrs	r3, r3, #6
 8105186:	f003 0201 	and.w	r2, r3, #1
 810518a:	683b      	ldr	r3, [r7, #0]
 810518c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 810518e:	68fb      	ldr	r3, [r7, #12]
 8105190:	09db      	lsrs	r3, r3, #7
 8105192:	f003 0201 	and.w	r2, r3, #1
 8105196:	683b      	ldr	r3, [r7, #0]
 8105198:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	0adb      	lsrs	r3, r3, #11
 810519e:	f003 0201 	and.w	r2, r3, #1
 81051a2:	683b      	ldr	r3, [r7, #0]
 81051a4:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	0b1b      	lsrs	r3, r3, #12
 81051aa:	f003 0201 	and.w	r2, r3, #1
 81051ae:	683b      	ldr	r3, [r7, #0]
 81051b0:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	0b5b      	lsrs	r3, r3, #13
 81051b6:	f003 0201 	and.w	r2, r3, #1
 81051ba:	683b      	ldr	r3, [r7, #0]
 81051bc:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	0b9b      	lsrs	r3, r3, #14
 81051c2:	f003 0201 	and.w	r2, r3, #1
 81051c6:	683b      	ldr	r3, [r7, #0]
 81051c8:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	0c1b      	lsrs	r3, r3, #16
 81051ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81051d2:	683b      	ldr	r3, [r7, #0]
 81051d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 81051d6:	2300      	movs	r3, #0
}
 81051d8:	4618      	mov	r0, r3
 81051da:	3714      	adds	r7, #20
 81051dc:	46bd      	mov	sp, r7
 81051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e2:	4770      	bx	lr

081051e4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 81051e4:	b480      	push	{r7}
 81051e6:	b087      	sub	sp, #28
 81051e8:	af00      	add	r7, sp, #0
 81051ea:	60f8      	str	r0, [r7, #12]
 81051ec:	60b9      	str	r1, [r7, #8]
 81051ee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81051f6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 81051f8:	7dfb      	ldrb	r3, [r7, #23]
 81051fa:	2b01      	cmp	r3, #1
 81051fc:	d002      	beq.n	8105204 <HAL_FDCAN_ActivateNotification+0x20>
 81051fe:	7dfb      	ldrb	r3, [r7, #23]
 8105200:	2b02      	cmp	r3, #2
 8105202:	d157      	bne.n	81052b4 <HAL_FDCAN_ActivateNotification+0xd0>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8105204:	68fb      	ldr	r3, [r7, #12]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810520a:	68bb      	ldr	r3, [r7, #8]
 810520c:	4013      	ands	r3, r2
 810520e:	2b00      	cmp	r3, #0
 8105210:	d108      	bne.n	8105224 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	f042 0201 	orr.w	r2, r2, #1
 8105220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8105222:	e014      	b.n	810524e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810522a:	68bb      	ldr	r3, [r7, #8]
 810522c:	4013      	ands	r3, r2
 810522e:	68ba      	ldr	r2, [r7, #8]
 8105230:	429a      	cmp	r2, r3
 8105232:	d108      	bne.n	8105246 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	f042 0202 	orr.w	r2, r2, #2
 8105242:	65da      	str	r2, [r3, #92]	@ 0x5c
 8105244:	e003      	b.n	810524e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	2203      	movs	r2, #3
 810524c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 810524e:	68bb      	ldr	r3, [r7, #8]
 8105250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8105254:	2b00      	cmp	r3, #0
 8105256:	d009      	beq.n	810526c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	687a      	ldr	r2, [r7, #4]
 8105266:	430a      	orrs	r2, r1
 8105268:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 810526c:	68bb      	ldr	r3, [r7, #8]
 810526e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105272:	2b00      	cmp	r3, #0
 8105274:	d009      	beq.n	810528a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	681b      	ldr	r3, [r3, #0]
 810527a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	681b      	ldr	r3, [r3, #0]
 8105282:	687a      	ldr	r2, [r7, #4]
 8105284:	430a      	orrs	r2, r1
 8105286:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 810528a:	68fb      	ldr	r3, [r7, #12]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8105290:	68bb      	ldr	r3, [r7, #8]
 8105292:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8105296:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810529a:	68fa      	ldr	r2, [r7, #12]
 810529c:	6812      	ldr	r2, [r2, #0]
 810529e:	430b      	orrs	r3, r1
 81052a0:	6553      	str	r3, [r2, #84]	@ 0x54
 81052a2:	4b0c      	ldr	r3, [pc, #48]	@ (81052d4 <HAL_FDCAN_ActivateNotification+0xf0>)
 81052a4:	695a      	ldr	r2, [r3, #20]
 81052a6:	68bb      	ldr	r3, [r7, #8]
 81052a8:	0f9b      	lsrs	r3, r3, #30
 81052aa:	490a      	ldr	r1, [pc, #40]	@ (81052d4 <HAL_FDCAN_ActivateNotification+0xf0>)
 81052ac:	4313      	orrs	r3, r2
 81052ae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 81052b0:	2300      	movs	r3, #0
 81052b2:	e008      	b.n	81052c6 <HAL_FDCAN_ActivateNotification+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81052ba:	f043 0202 	orr.w	r2, r3, #2
 81052be:	68fb      	ldr	r3, [r7, #12]
 81052c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 81052c4:	2301      	movs	r3, #1
  }
}
 81052c6:	4618      	mov	r0, r3
 81052c8:	371c      	adds	r7, #28
 81052ca:	46bd      	mov	sp, r7
 81052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052d0:	4770      	bx	lr
 81052d2:	bf00      	nop
 81052d4:	4000a800 	.word	0x4000a800

081052d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 81052d8:	b580      	push	{r7, lr}
 81052da:	b096      	sub	sp, #88	@ 0x58
 81052dc:	af00      	add	r7, sp, #0
 81052de:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 81052e0:	4b99      	ldr	r3, [pc, #612]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 81052e2:	691b      	ldr	r3, [r3, #16]
 81052e4:	079b      	lsls	r3, r3, #30
 81052e6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 81052e8:	4b97      	ldr	r3, [pc, #604]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 81052ea:	695b      	ldr	r3, [r3, #20]
 81052ec:	079b      	lsls	r3, r3, #30
 81052ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81052f0:	4013      	ands	r3, r2
 81052f2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81052fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 81052fe:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105306:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8105308:	4013      	ands	r3, r2
 810530a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105312:	f003 030f 	and.w	r3, r3, #15
 8105316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810531e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8105320:	4013      	ands	r3, r2
 8105322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810532a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810532e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8105338:	4013      	ands	r3, r2
 810533a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105342:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8105346:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810534e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8105350:	4013      	ands	r3, r2
 8105352:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810535a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 810535e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105366:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8105368:	4013      	ands	r3, r2
 810536a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810537a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 810537c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105382:	2b00      	cmp	r3, #0
 8105384:	d00f      	beq.n	81053a6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8105386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810538c:	2b00      	cmp	r3, #0
 810538e:	d00a      	beq.n	81053a6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105398:	651a      	str	r2, [r3, #80]	@ 0x50
 810539a:	4b6b      	ldr	r3, [pc, #428]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 810539c:	2200      	movs	r2, #0
 810539e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 81053a0:	6878      	ldr	r0, [r7, #4]
 81053a2:	f000 fa4c 	bl	810583e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 81053a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d01c      	beq.n	81053ea <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 81053b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d017      	beq.n	81053ea <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81053c2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81053cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81053ce:	4013      	ands	r3, r2
 81053d0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81053da:	651a      	str	r2, [r3, #80]	@ 0x50
 81053dc:	4b5a      	ldr	r3, [pc, #360]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 81053de:	2200      	movs	r2, #0
 81053e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 81053e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 81053e4:	6878      	ldr	r0, [r7, #4]
 81053e6:	f000 fa01 	bl	81057ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 81053ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d00f      	beq.n	8105410 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	681a      	ldr	r2, [r3, #0]
 81053f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81053f6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81053fa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81053fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8105400:	4a51      	ldr	r2, [pc, #324]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 8105402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105404:	0f9b      	lsrs	r3, r3, #30
 8105406:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8105408:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810540a:	6878      	ldr	r0, [r7, #4]
 810540c:	f000 f9b8 	bl	8105780 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8105410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105412:	2b00      	cmp	r3, #0
 8105414:	d00f      	beq.n	8105436 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	681a      	ldr	r2, [r3, #0]
 810541a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810541c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8105420:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8105424:	6513      	str	r3, [r2, #80]	@ 0x50
 8105426:	4a48      	ldr	r2, [pc, #288]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 8105428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810542a:	0f9b      	lsrs	r3, r3, #30
 810542c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 810542e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8105430:	6878      	ldr	r0, [r7, #4]
 8105432:	f000 f9b0 	bl	8105796 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8105436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105438:	2b00      	cmp	r3, #0
 810543a:	d00f      	beq.n	810545c <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681a      	ldr	r2, [r3, #0]
 8105440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105442:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8105446:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810544a:	6513      	str	r3, [r2, #80]	@ 0x50
 810544c:	4a3e      	ldr	r2, [pc, #248]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 810544e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105450:	0f9b      	lsrs	r3, r3, #30
 8105452:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8105454:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8105456:	6878      	ldr	r0, [r7, #4]
 8105458:	f7fb ff94 	bl	8101384 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 810545c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810545e:	2b00      	cmp	r3, #0
 8105460:	d00f      	beq.n	8105482 <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681a      	ldr	r2, [r3, #0]
 8105466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105468:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 810546c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8105470:	6513      	str	r3, [r2, #80]	@ 0x50
 8105472:	4a35      	ldr	r2, [pc, #212]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 8105474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105476:	0f9b      	lsrs	r3, r3, #30
 8105478:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 810547a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 810547c:	6878      	ldr	r0, [r7, #4]
 810547e:	f000 f995 	bl	81057ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8105482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105488:	2b00      	cmp	r3, #0
 810548a:	d00f      	beq.n	81054ac <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 810548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810548e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105492:	2b00      	cmp	r3, #0
 8105494:	d00a      	beq.n	81054ac <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810549e:	651a      	str	r2, [r3, #80]	@ 0x50
 81054a0:	4b29      	ldr	r3, [pc, #164]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 81054a2:	2200      	movs	r2, #0
 81054a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 81054a6:	6878      	ldr	r0, [r7, #4]
 81054a8:	f000 f98b 	bl	81057c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 81054ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81054ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	d01c      	beq.n	81054f0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 81054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81054bc:	2b00      	cmp	r3, #0
 81054be:	d017      	beq.n	81054f0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	681b      	ldr	r3, [r3, #0]
 81054c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81054c8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81054d4:	4013      	ands	r3, r2
 81054d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81054e0:	651a      	str	r2, [r3, #80]	@ 0x50
 81054e2:	4b19      	ldr	r3, [pc, #100]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 81054e4:	2200      	movs	r2, #0
 81054e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 81054e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81054ea:	6878      	ldr	r0, [r7, #4]
 81054ec:	f000 f973 	bl	81057d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 81054f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81054f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81054f6:	2b00      	cmp	r3, #0
 81054f8:	d00f      	beq.n	810551a <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 81054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8105500:	2b00      	cmp	r3, #0
 8105502:	d00a      	beq.n	810551a <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 810550c:	651a      	str	r2, [r3, #80]	@ 0x50
 810550e:	4b0e      	ldr	r3, [pc, #56]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 8105510:	2200      	movs	r2, #0
 8105512:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8105514:	6878      	ldr	r0, [r7, #4]
 8105516:	f000 f974 	bl	8105802 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 810551a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810551c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105520:	2b00      	cmp	r3, #0
 8105522:	d013      	beq.n	810554c <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8105524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810552a:	2b00      	cmp	r3, #0
 810552c:	d00e      	beq.n	810554c <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8105536:	651a      	str	r2, [r3, #80]	@ 0x50
 8105538:	4b03      	ldr	r3, [pc, #12]	@ (8105548 <HAL_FDCAN_IRQHandler+0x270>)
 810553a:	2200      	movs	r2, #0
 810553c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 810553e:	6878      	ldr	r0, [r7, #4]
 8105540:	f000 f969 	bl	8105816 <HAL_FDCAN_TimestampWraparoundCallback>
 8105544:	e002      	b.n	810554c <HAL_FDCAN_IRQHandler+0x274>
 8105546:	bf00      	nop
 8105548:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 810554c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810554e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105552:	2b00      	cmp	r3, #0
 8105554:	d00f      	beq.n	8105576 <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8105556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810555c:	2b00      	cmp	r3, #0
 810555e:	d00a      	beq.n	8105576 <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8105568:	651a      	str	r2, [r3, #80]	@ 0x50
 810556a:	4b83      	ldr	r3, [pc, #524]	@ (8105778 <HAL_FDCAN_IRQHandler+0x4a0>)
 810556c:	2200      	movs	r2, #0
 810556e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8105570:	6878      	ldr	r0, [r7, #4]
 8105572:	f000 f95a 	bl	810582a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8105576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810557c:	2b00      	cmp	r3, #0
 810557e:	d014      	beq.n	81055aa <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8105580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105586:	2b00      	cmp	r3, #0
 8105588:	d00f      	beq.n	81055aa <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8105592:	651a      	str	r2, [r3, #80]	@ 0x50
 8105594:	4b78      	ldr	r3, [pc, #480]	@ (8105778 <HAL_FDCAN_IRQHandler+0x4a0>)
 8105596:	2200      	movs	r2, #0
 8105598:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81055a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 81055aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d00f      	beq.n	81055d0 <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681a      	ldr	r2, [r3, #0]
 81055b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81055b6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81055ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81055be:	6513      	str	r3, [r2, #80]	@ 0x50
 81055c0:	4a6d      	ldr	r2, [pc, #436]	@ (8105778 <HAL_FDCAN_IRQHandler+0x4a0>)
 81055c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81055c4:	0f9b      	lsrs	r3, r3, #30
 81055c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 81055c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81055ca:	6878      	ldr	r0, [r7, #4]
 81055cc:	f000 f94b 	bl	8105866 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 81055d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81055d2:	2b00      	cmp	r3, #0
 81055d4:	d013      	beq.n	81055fe <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	681a      	ldr	r2, [r3, #0]
 81055da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81055dc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81055e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81055e4:	6513      	str	r3, [r2, #80]	@ 0x50
 81055e6:	4a64      	ldr	r2, [pc, #400]	@ (8105778 <HAL_FDCAN_IRQHandler+0x4a0>)
 81055e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81055ea:	0f9b      	lsrs	r3, r3, #30
 81055ec:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 81055f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81055f6:	431a      	orrs	r2, r3
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	4a5e      	ldr	r2, [pc, #376]	@ (810577c <HAL_FDCAN_IRQHandler+0x4a4>)
 8105604:	4293      	cmp	r3, r2
 8105606:	f040 80aa 	bne.w	810575e <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	685b      	ldr	r3, [r3, #4]
 810560e:	689b      	ldr	r3, [r3, #8]
 8105610:	f003 0303 	and.w	r3, r3, #3
 8105614:	2b00      	cmp	r3, #0
 8105616:	f000 80a2 	beq.w	810575e <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	685b      	ldr	r3, [r3, #4]
 810561e:	6a1b      	ldr	r3, [r3, #32]
 8105620:	f003 030f 	and.w	r3, r3, #15
 8105624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	685b      	ldr	r3, [r3, #4]
 810562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810562c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810562e:	4013      	ands	r3, r2
 8105630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	685b      	ldr	r3, [r3, #4]
 8105636:	6a1b      	ldr	r3, [r3, #32]
 8105638:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 810563c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	685b      	ldr	r3, [r3, #4]
 8105642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105646:	4013      	ands	r3, r2
 8105648:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	685b      	ldr	r3, [r3, #4]
 810564e:	6a1b      	ldr	r3, [r3, #32]
 8105650:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8105654:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	685b      	ldr	r3, [r3, #4]
 810565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810565e:	4013      	ands	r3, r2
 8105660:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	685b      	ldr	r3, [r3, #4]
 8105666:	6a1b      	ldr	r3, [r3, #32]
 8105668:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 810566c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	685b      	ldr	r3, [r3, #4]
 8105672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105674:	6a3a      	ldr	r2, [r7, #32]
 8105676:	4013      	ands	r3, r2
 8105678:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	685b      	ldr	r3, [r3, #4]
 810567e:	6a1b      	ldr	r3, [r3, #32]
 8105680:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8105684:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	685b      	ldr	r3, [r3, #4]
 810568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810568c:	69fa      	ldr	r2, [r7, #28]
 810568e:	4013      	ands	r3, r2
 8105690:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	685b      	ldr	r3, [r3, #4]
 8105696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105698:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	685b      	ldr	r3, [r3, #4]
 810569e:	6a1b      	ldr	r3, [r3, #32]
 81056a0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 81056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81056a4:	2b00      	cmp	r3, #0
 81056a6:	d007      	beq.n	81056b8 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	685b      	ldr	r3, [r3, #4]
 81056ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81056ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 81056b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81056b2:	6878      	ldr	r0, [r7, #4]
 81056b4:	f000 f8e2 	bl	810587c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 81056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d007      	beq.n	81056ce <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	685b      	ldr	r3, [r3, #4]
 81056c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81056c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 81056c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81056c8:	6878      	ldr	r0, [r7, #4]
 81056ca:	f000 f8e2 	bl	8105892 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 81056ce:	69bb      	ldr	r3, [r7, #24]
 81056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d019      	beq.n	810570c <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 81056d8:	697b      	ldr	r3, [r7, #20]
 81056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056de:	2b00      	cmp	r3, #0
 81056e0:	d014      	beq.n	810570c <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	685b      	ldr	r3, [r3, #4]
 81056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81056e8:	0c1b      	lsrs	r3, r3, #16
 81056ea:	b29b      	uxth	r3, r3
 81056ec:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	685b      	ldr	r3, [r3, #4]
 81056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81056f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81056f8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	685b      	ldr	r3, [r3, #4]
 81056fe:	2240      	movs	r2, #64	@ 0x40
 8105700:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8105702:	68fa      	ldr	r2, [r7, #12]
 8105704:	6939      	ldr	r1, [r7, #16]
 8105706:	6878      	ldr	r0, [r7, #4]
 8105708:	f000 f8ce 	bl	81058a8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 810570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810570e:	2b00      	cmp	r3, #0
 8105710:	d007      	beq.n	8105722 <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	685b      	ldr	r3, [r3, #4]
 8105716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105718:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 810571a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810571c:	6878      	ldr	r0, [r7, #4]
 810571e:	f000 f8cf 	bl	81058c0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8105722:	6a3b      	ldr	r3, [r7, #32]
 8105724:	2b00      	cmp	r3, #0
 8105726:	d00b      	beq.n	8105740 <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	685b      	ldr	r3, [r3, #4]
 810572c:	6a3a      	ldr	r2, [r7, #32]
 810572e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8105736:	6a3b      	ldr	r3, [r7, #32]
 8105738:	431a      	orrs	r2, r3
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8105740:	69fb      	ldr	r3, [r7, #28]
 8105742:	2b00      	cmp	r3, #0
 8105744:	d00b      	beq.n	810575e <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	685b      	ldr	r3, [r3, #4]
 810574a:	69fa      	ldr	r2, [r7, #28]
 810574c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8105754:	69fb      	ldr	r3, [r7, #28]
 8105756:	431a      	orrs	r2, r3
 8105758:	687b      	ldr	r3, [r7, #4]
 810575a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105764:	2b00      	cmp	r3, #0
 8105766:	d002      	beq.n	810576e <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8105768:	6878      	ldr	r0, [r7, #4]
 810576a:	f000 f872 	bl	8105852 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 810576e:	bf00      	nop
 8105770:	3758      	adds	r7, #88	@ 0x58
 8105772:	46bd      	mov	sp, r7
 8105774:	bd80      	pop	{r7, pc}
 8105776:	bf00      	nop
 8105778:	4000a800 	.word	0x4000a800
 810577c:	4000a000 	.word	0x4000a000

08105780 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8105780:	b480      	push	{r7}
 8105782:	b083      	sub	sp, #12
 8105784:	af00      	add	r7, sp, #0
 8105786:	6078      	str	r0, [r7, #4]
 8105788:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 810578a:	bf00      	nop
 810578c:	370c      	adds	r7, #12
 810578e:	46bd      	mov	sp, r7
 8105790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105794:	4770      	bx	lr

08105796 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8105796:	b480      	push	{r7}
 8105798:	b083      	sub	sp, #12
 810579a:	af00      	add	r7, sp, #0
 810579c:	6078      	str	r0, [r7, #4]
 810579e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 81057a0:	bf00      	nop
 81057a2:	370c      	adds	r7, #12
 81057a4:	46bd      	mov	sp, r7
 81057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057aa:	4770      	bx	lr

081057ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 81057ac:	b480      	push	{r7}
 81057ae:	b083      	sub	sp, #12
 81057b0:	af00      	add	r7, sp, #0
 81057b2:	6078      	str	r0, [r7, #4]
 81057b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 81057b6:	bf00      	nop
 81057b8:	370c      	adds	r7, #12
 81057ba:	46bd      	mov	sp, r7
 81057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c0:	4770      	bx	lr

081057c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81057c2:	b480      	push	{r7}
 81057c4:	b083      	sub	sp, #12
 81057c6:	af00      	add	r7, sp, #0
 81057c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 81057ca:	bf00      	nop
 81057cc:	370c      	adds	r7, #12
 81057ce:	46bd      	mov	sp, r7
 81057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057d4:	4770      	bx	lr

081057d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81057d6:	b480      	push	{r7}
 81057d8:	b083      	sub	sp, #12
 81057da:	af00      	add	r7, sp, #0
 81057dc:	6078      	str	r0, [r7, #4]
 81057de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 81057e0:	bf00      	nop
 81057e2:	370c      	adds	r7, #12
 81057e4:	46bd      	mov	sp, r7
 81057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057ea:	4770      	bx	lr

081057ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81057ec:	b480      	push	{r7}
 81057ee:	b083      	sub	sp, #12
 81057f0:	af00      	add	r7, sp, #0
 81057f2:	6078      	str	r0, [r7, #4]
 81057f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 81057f6:	bf00      	nop
 81057f8:	370c      	adds	r7, #12
 81057fa:	46bd      	mov	sp, r7
 81057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105800:	4770      	bx	lr

08105802 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8105802:	b480      	push	{r7}
 8105804:	b083      	sub	sp, #12
 8105806:	af00      	add	r7, sp, #0
 8105808:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 810580a:	bf00      	nop
 810580c:	370c      	adds	r7, #12
 810580e:	46bd      	mov	sp, r7
 8105810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105814:	4770      	bx	lr

08105816 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8105816:	b480      	push	{r7}
 8105818:	b083      	sub	sp, #12
 810581a:	af00      	add	r7, sp, #0
 810581c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 810581e:	bf00      	nop
 8105820:	370c      	adds	r7, #12
 8105822:	46bd      	mov	sp, r7
 8105824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105828:	4770      	bx	lr

0810582a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810582a:	b480      	push	{r7}
 810582c:	b083      	sub	sp, #12
 810582e:	af00      	add	r7, sp, #0
 8105830:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8105832:	bf00      	nop
 8105834:	370c      	adds	r7, #12
 8105836:	46bd      	mov	sp, r7
 8105838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810583c:	4770      	bx	lr

0810583e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810583e:	b480      	push	{r7}
 8105840:	b083      	sub	sp, #12
 8105842:	af00      	add	r7, sp, #0
 8105844:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8105846:	bf00      	nop
 8105848:	370c      	adds	r7, #12
 810584a:	46bd      	mov	sp, r7
 810584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105850:	4770      	bx	lr

08105852 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8105852:	b480      	push	{r7}
 8105854:	b083      	sub	sp, #12
 8105856:	af00      	add	r7, sp, #0
 8105858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 810585a:	bf00      	nop
 810585c:	370c      	adds	r7, #12
 810585e:	46bd      	mov	sp, r7
 8105860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105864:	4770      	bx	lr

08105866 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8105866:	b480      	push	{r7}
 8105868:	b083      	sub	sp, #12
 810586a:	af00      	add	r7, sp, #0
 810586c:	6078      	str	r0, [r7, #4]
 810586e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8105870:	bf00      	nop
 8105872:	370c      	adds	r7, #12
 8105874:	46bd      	mov	sp, r7
 8105876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810587a:	4770      	bx	lr

0810587c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 810587c:	b480      	push	{r7}
 810587e:	b083      	sub	sp, #12
 8105880:	af00      	add	r7, sp, #0
 8105882:	6078      	str	r0, [r7, #4]
 8105884:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8105886:	bf00      	nop
 8105888:	370c      	adds	r7, #12
 810588a:	46bd      	mov	sp, r7
 810588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105890:	4770      	bx	lr

08105892 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8105892:	b480      	push	{r7}
 8105894:	b083      	sub	sp, #12
 8105896:	af00      	add	r7, sp, #0
 8105898:	6078      	str	r0, [r7, #4]
 810589a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 810589c:	bf00      	nop
 810589e:	370c      	adds	r7, #12
 81058a0:	46bd      	mov	sp, r7
 81058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058a6:	4770      	bx	lr

081058a8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 81058a8:	b480      	push	{r7}
 81058aa:	b085      	sub	sp, #20
 81058ac:	af00      	add	r7, sp, #0
 81058ae:	60f8      	str	r0, [r7, #12]
 81058b0:	60b9      	str	r1, [r7, #8]
 81058b2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 81058b4:	bf00      	nop
 81058b6:	3714      	adds	r7, #20
 81058b8:	46bd      	mov	sp, r7
 81058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058be:	4770      	bx	lr

081058c0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 81058c0:	b480      	push	{r7}
 81058c2:	b083      	sub	sp, #12
 81058c4:	af00      	add	r7, sp, #0
 81058c6:	6078      	str	r0, [r7, #4]
 81058c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 81058ca:	bf00      	nop
 81058cc:	370c      	adds	r7, #12
 81058ce:	46bd      	mov	sp, r7
 81058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058d4:	4770      	bx	lr
	...

081058d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 81058d8:	b480      	push	{r7}
 81058da:	b085      	sub	sp, #20
 81058dc:	af00      	add	r7, sp, #0
 81058de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81058e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	681b      	ldr	r3, [r3, #0]
 81058ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81058ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81058f2:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81058f6:	68ba      	ldr	r2, [r7, #8]
 81058f8:	0091      	lsls	r1, r2, #2
 81058fa:	687a      	ldr	r2, [r7, #4]
 81058fc:	6812      	ldr	r2, [r2, #0]
 81058fe:	430b      	orrs	r3, r1
 8105900:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8105904:	687b      	ldr	r3, [r7, #4]
 8105906:	681b      	ldr	r3, [r3, #0]
 8105908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810590c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105914:	041a      	lsls	r2, r3, #16
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	430a      	orrs	r2, r1
 810591c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105924:	68ba      	ldr	r2, [r7, #8]
 8105926:	4413      	add	r3, r2
 8105928:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105936:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 810593a:	68ba      	ldr	r2, [r7, #8]
 810593c:	0091      	lsls	r1, r2, #2
 810593e:	687a      	ldr	r2, [r7, #4]
 8105940:	6812      	ldr	r2, [r2, #0]
 8105942:	430b      	orrs	r3, r1
 8105944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105950:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105958:	041a      	lsls	r2, r3, #16
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	430a      	orrs	r2, r1
 8105960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105968:	005b      	lsls	r3, r3, #1
 810596a:	68ba      	ldr	r2, [r7, #8]
 810596c:	4413      	add	r3, r2
 810596e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	681b      	ldr	r3, [r3, #0]
 8105974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105978:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810597c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105980:	68ba      	ldr	r2, [r7, #8]
 8105982:	0091      	lsls	r1, r2, #2
 8105984:	687a      	ldr	r2, [r7, #4]
 8105986:	6812      	ldr	r2, [r2, #0]
 8105988:	430b      	orrs	r3, r1
 810598a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105996:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810599e:	041a      	lsls	r2, r3, #16
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	430a      	orrs	r2, r1
 81059a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81059ae:	687a      	ldr	r2, [r7, #4]
 81059b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81059b2:	fb02 f303 	mul.w	r3, r2, r3
 81059b6:	68ba      	ldr	r2, [r7, #8]
 81059b8:	4413      	add	r3, r2
 81059ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81059c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81059c8:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81059cc:	68ba      	ldr	r2, [r7, #8]
 81059ce:	0091      	lsls	r1, r2, #2
 81059d0:	687a      	ldr	r2, [r7, #4]
 81059d2:	6812      	ldr	r2, [r2, #0]
 81059d4:	430b      	orrs	r3, r1
 81059d6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81059e2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81059ea:	041a      	lsls	r2, r3, #16
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	681b      	ldr	r3, [r3, #0]
 81059f0:	430a      	orrs	r2, r1
 81059f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81059fa:	687a      	ldr	r2, [r7, #4]
 81059fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 81059fe:	fb02 f303 	mul.w	r3, r2, r3
 8105a02:	68ba      	ldr	r2, [r7, #8]
 8105a04:	4413      	add	r3, r2
 8105a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	681b      	ldr	r3, [r3, #0]
 8105a0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105a10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105a14:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105a18:	68ba      	ldr	r2, [r7, #8]
 8105a1a:	0091      	lsls	r1, r2, #2
 8105a1c:	687a      	ldr	r2, [r7, #4]
 8105a1e:	6812      	ldr	r2, [r2, #0]
 8105a20:	430b      	orrs	r3, r1
 8105a22:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a2a:	687a      	ldr	r2, [r7, #4]
 8105a2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8105a2e:	fb02 f303 	mul.w	r3, r2, r3
 8105a32:	68ba      	ldr	r2, [r7, #8]
 8105a34:	4413      	add	r3, r2
 8105a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105a44:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105a48:	68ba      	ldr	r2, [r7, #8]
 8105a4a:	0091      	lsls	r1, r2, #2
 8105a4c:	687a      	ldr	r2, [r7, #4]
 8105a4e:	6812      	ldr	r2, [r2, #0]
 8105a50:	430b      	orrs	r3, r1
 8105a52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a5e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a66:	041a      	lsls	r2, r3, #16
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	430a      	orrs	r2, r1
 8105a6e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a76:	005b      	lsls	r3, r3, #1
 8105a78:	68ba      	ldr	r2, [r7, #8]
 8105a7a:	4413      	add	r3, r2
 8105a7c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8105a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105a8a:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8105a8e:	68ba      	ldr	r2, [r7, #8]
 8105a90:	0091      	lsls	r1, r2, #2
 8105a92:	687a      	ldr	r2, [r7, #4]
 8105a94:	6812      	ldr	r2, [r2, #0]
 8105a96:	430b      	orrs	r3, r1
 8105a98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8105aa4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105aac:	041a      	lsls	r2, r3, #16
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	430a      	orrs	r2, r1
 8105ab4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8105ac0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105ac8:	061a      	lsls	r2, r3, #24
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	430a      	orrs	r2, r1
 8105ad0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105ad8:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8105adc:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8105ae0:	009a      	lsls	r2, r3, #2
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105aee:	009b      	lsls	r3, r3, #2
 8105af0:	441a      	add	r2, r3
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105afe:	00db      	lsls	r3, r3, #3
 8105b00:	441a      	add	r2, r3
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b0e:	6879      	ldr	r1, [r7, #4]
 8105b10:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8105b12:	fb01 f303 	mul.w	r3, r1, r3
 8105b16:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8105b18:	441a      	add	r2, r3
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105b26:	6879      	ldr	r1, [r7, #4]
 8105b28:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8105b2a:	fb01 f303 	mul.w	r3, r1, r3
 8105b2e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8105b30:	441a      	add	r2, r3
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105b3e:	6879      	ldr	r1, [r7, #4]
 8105b40:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8105b42:	fb01 f303 	mul.w	r3, r1, r3
 8105b46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8105b48:	441a      	add	r2, r3
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105b5a:	00db      	lsls	r3, r3, #3
 8105b5c:	441a      	add	r2, r3
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105b6e:	6879      	ldr	r1, [r7, #4]
 8105b70:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8105b72:	fb01 f303 	mul.w	r3, r1, r3
 8105b76:	009b      	lsls	r3, r3, #2
 8105b78:	441a      	add	r2, r3
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105b8a:	6879      	ldr	r1, [r7, #4]
 8105b8c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8105b8e:	fb01 f303 	mul.w	r3, r1, r3
 8105b92:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8105b94:	441a      	add	r2, r3
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105ba2:	4a14      	ldr	r2, [pc, #80]	@ (8105bf4 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8105ba4:	4293      	cmp	r3, r2
 8105ba6:	d90d      	bls.n	8105bc4 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105bae:	f043 0220 	orr.w	r2, r3, #32
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8105bb8:	687b      	ldr	r3, [r7, #4]
 8105bba:	2203      	movs	r2, #3
 8105bbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8105bc0:	2301      	movs	r3, #1
 8105bc2:	e010      	b.n	8105be6 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105bc8:	60fb      	str	r3, [r7, #12]
 8105bca:	e005      	b.n	8105bd8 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8105bcc:	68fb      	ldr	r3, [r7, #12]
 8105bce:	2200      	movs	r2, #0
 8105bd0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8105bd2:	68fb      	ldr	r3, [r7, #12]
 8105bd4:	3304      	adds	r3, #4
 8105bd6:	60fb      	str	r3, [r7, #12]
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105bde:	68fa      	ldr	r2, [r7, #12]
 8105be0:	429a      	cmp	r2, r3
 8105be2:	d3f3      	bcc.n	8105bcc <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8105be4:	2300      	movs	r3, #0
}
 8105be6:	4618      	mov	r0, r3
 8105be8:	3714      	adds	r7, #20
 8105bea:	46bd      	mov	sp, r7
 8105bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf0:	4770      	bx	lr
 8105bf2:	bf00      	nop
 8105bf4:	4000d3fc 	.word	0x4000d3fc

08105bf8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8105bf8:	b480      	push	{r7}
 8105bfa:	b089      	sub	sp, #36	@ 0x24
 8105bfc:	af00      	add	r7, sp, #0
 8105bfe:	60f8      	str	r0, [r7, #12]
 8105c00:	60b9      	str	r1, [r7, #8]
 8105c02:	607a      	str	r2, [r7, #4]
 8105c04:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8105c06:	68bb      	ldr	r3, [r7, #8]
 8105c08:	685b      	ldr	r3, [r3, #4]
 8105c0a:	2b00      	cmp	r3, #0
 8105c0c:	d10a      	bne.n	8105c24 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105c0e:	68bb      	ldr	r3, [r7, #8]
 8105c10:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8105c12:	68bb      	ldr	r3, [r7, #8]
 8105c14:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8105c16:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8105c18:	68bb      	ldr	r3, [r7, #8]
 8105c1a:	681b      	ldr	r3, [r3, #0]
 8105c1c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105c1e:	4313      	orrs	r3, r2
 8105c20:	61fb      	str	r3, [r7, #28]
 8105c22:	e00a      	b.n	8105c3a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105c24:	68bb      	ldr	r3, [r7, #8]
 8105c26:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8105c28:	68bb      	ldr	r3, [r7, #8]
 8105c2a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8105c2c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8105c2e:	68bb      	ldr	r3, [r7, #8]
 8105c30:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8105c32:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8105c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8105c38:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8105c3a:	68bb      	ldr	r3, [r7, #8]
 8105c3c:	6a1b      	ldr	r3, [r3, #32]
 8105c3e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8105c40:	68bb      	ldr	r3, [r7, #8]
 8105c42:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8105c44:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8105c46:	68bb      	ldr	r3, [r7, #8]
 8105c48:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8105c4a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8105c4c:	68bb      	ldr	r3, [r7, #8]
 8105c4e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8105c50:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8105c52:	68bb      	ldr	r3, [r7, #8]
 8105c54:	68db      	ldr	r3, [r3, #12]
 8105c56:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8105c58:	4313      	orrs	r3, r2
 8105c5a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8105c5c:	68fb      	ldr	r3, [r7, #12]
 8105c5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8105c62:	68fb      	ldr	r3, [r7, #12]
 8105c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105c66:	6839      	ldr	r1, [r7, #0]
 8105c68:	fb01 f303 	mul.w	r3, r1, r3
 8105c6c:	009b      	lsls	r3, r3, #2
 8105c6e:	4413      	add	r3, r2
 8105c70:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8105c72:	69bb      	ldr	r3, [r7, #24]
 8105c74:	69fa      	ldr	r2, [r7, #28]
 8105c76:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8105c78:	69bb      	ldr	r3, [r7, #24]
 8105c7a:	3304      	adds	r3, #4
 8105c7c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8105c7e:	69bb      	ldr	r3, [r7, #24]
 8105c80:	693a      	ldr	r2, [r7, #16]
 8105c82:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8105c84:	69bb      	ldr	r3, [r7, #24]
 8105c86:	3304      	adds	r3, #4
 8105c88:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8105c8a:	2300      	movs	r3, #0
 8105c8c:	617b      	str	r3, [r7, #20]
 8105c8e:	e020      	b.n	8105cd2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8105c90:	697b      	ldr	r3, [r7, #20]
 8105c92:	3303      	adds	r3, #3
 8105c94:	687a      	ldr	r2, [r7, #4]
 8105c96:	4413      	add	r3, r2
 8105c98:	781b      	ldrb	r3, [r3, #0]
 8105c9a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8105c9c:	697b      	ldr	r3, [r7, #20]
 8105c9e:	3302      	adds	r3, #2
 8105ca0:	6879      	ldr	r1, [r7, #4]
 8105ca2:	440b      	add	r3, r1
 8105ca4:	781b      	ldrb	r3, [r3, #0]
 8105ca6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8105ca8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8105caa:	697b      	ldr	r3, [r7, #20]
 8105cac:	3301      	adds	r3, #1
 8105cae:	6879      	ldr	r1, [r7, #4]
 8105cb0:	440b      	add	r3, r1
 8105cb2:	781b      	ldrb	r3, [r3, #0]
 8105cb4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8105cb6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8105cb8:	6879      	ldr	r1, [r7, #4]
 8105cba:	697a      	ldr	r2, [r7, #20]
 8105cbc:	440a      	add	r2, r1
 8105cbe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8105cc0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8105cc2:	69bb      	ldr	r3, [r7, #24]
 8105cc4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8105cc6:	69bb      	ldr	r3, [r7, #24]
 8105cc8:	3304      	adds	r3, #4
 8105cca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8105ccc:	697b      	ldr	r3, [r7, #20]
 8105cce:	3304      	adds	r3, #4
 8105cd0:	617b      	str	r3, [r7, #20]
 8105cd2:	68bb      	ldr	r3, [r7, #8]
 8105cd4:	68db      	ldr	r3, [r3, #12]
 8105cd6:	4a06      	ldr	r2, [pc, #24]	@ (8105cf0 <FDCAN_CopyMessageToRAM+0xf8>)
 8105cd8:	5cd3      	ldrb	r3, [r2, r3]
 8105cda:	461a      	mov	r2, r3
 8105cdc:	697b      	ldr	r3, [r7, #20]
 8105cde:	4293      	cmp	r3, r2
 8105ce0:	d3d6      	bcc.n	8105c90 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8105ce2:	bf00      	nop
 8105ce4:	bf00      	nop
 8105ce6:	3724      	adds	r7, #36	@ 0x24
 8105ce8:	46bd      	mov	sp, r7
 8105cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cee:	4770      	bx	lr
 8105cf0:	081177c0 	.word	0x081177c0

08105cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105cf4:	b480      	push	{r7}
 8105cf6:	b089      	sub	sp, #36	@ 0x24
 8105cf8:	af00      	add	r7, sp, #0
 8105cfa:	6078      	str	r0, [r7, #4]
 8105cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8105cfe:	2300      	movs	r3, #0
 8105d00:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8105d02:	4b89      	ldr	r3, [pc, #548]	@ (8105f28 <HAL_GPIO_Init+0x234>)
 8105d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105d06:	e194      	b.n	8106032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105d08:	683b      	ldr	r3, [r7, #0]
 8105d0a:	681a      	ldr	r2, [r3, #0]
 8105d0c:	2101      	movs	r1, #1
 8105d0e:	69fb      	ldr	r3, [r7, #28]
 8105d10:	fa01 f303 	lsl.w	r3, r1, r3
 8105d14:	4013      	ands	r3, r2
 8105d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105d18:	693b      	ldr	r3, [r7, #16]
 8105d1a:	2b00      	cmp	r3, #0
 8105d1c:	f000 8186 	beq.w	810602c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105d20:	683b      	ldr	r3, [r7, #0]
 8105d22:	685b      	ldr	r3, [r3, #4]
 8105d24:	f003 0303 	and.w	r3, r3, #3
 8105d28:	2b01      	cmp	r3, #1
 8105d2a:	d005      	beq.n	8105d38 <HAL_GPIO_Init+0x44>
 8105d2c:	683b      	ldr	r3, [r7, #0]
 8105d2e:	685b      	ldr	r3, [r3, #4]
 8105d30:	f003 0303 	and.w	r3, r3, #3
 8105d34:	2b02      	cmp	r3, #2
 8105d36:	d130      	bne.n	8105d9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	689b      	ldr	r3, [r3, #8]
 8105d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105d3e:	69fb      	ldr	r3, [r7, #28]
 8105d40:	005b      	lsls	r3, r3, #1
 8105d42:	2203      	movs	r2, #3
 8105d44:	fa02 f303 	lsl.w	r3, r2, r3
 8105d48:	43db      	mvns	r3, r3
 8105d4a:	69ba      	ldr	r2, [r7, #24]
 8105d4c:	4013      	ands	r3, r2
 8105d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105d50:	683b      	ldr	r3, [r7, #0]
 8105d52:	68da      	ldr	r2, [r3, #12]
 8105d54:	69fb      	ldr	r3, [r7, #28]
 8105d56:	005b      	lsls	r3, r3, #1
 8105d58:	fa02 f303 	lsl.w	r3, r2, r3
 8105d5c:	69ba      	ldr	r2, [r7, #24]
 8105d5e:	4313      	orrs	r3, r2
 8105d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	69ba      	ldr	r2, [r7, #24]
 8105d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	685b      	ldr	r3, [r3, #4]
 8105d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105d6e:	2201      	movs	r2, #1
 8105d70:	69fb      	ldr	r3, [r7, #28]
 8105d72:	fa02 f303 	lsl.w	r3, r2, r3
 8105d76:	43db      	mvns	r3, r3
 8105d78:	69ba      	ldr	r2, [r7, #24]
 8105d7a:	4013      	ands	r3, r2
 8105d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105d7e:	683b      	ldr	r3, [r7, #0]
 8105d80:	685b      	ldr	r3, [r3, #4]
 8105d82:	091b      	lsrs	r3, r3, #4
 8105d84:	f003 0201 	and.w	r2, r3, #1
 8105d88:	69fb      	ldr	r3, [r7, #28]
 8105d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8105d8e:	69ba      	ldr	r2, [r7, #24]
 8105d90:	4313      	orrs	r3, r2
 8105d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	69ba      	ldr	r2, [r7, #24]
 8105d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8105d9a:	683b      	ldr	r3, [r7, #0]
 8105d9c:	685b      	ldr	r3, [r3, #4]
 8105d9e:	f003 0303 	and.w	r3, r3, #3
 8105da2:	2b03      	cmp	r3, #3
 8105da4:	d017      	beq.n	8105dd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	68db      	ldr	r3, [r3, #12]
 8105daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105dac:	69fb      	ldr	r3, [r7, #28]
 8105dae:	005b      	lsls	r3, r3, #1
 8105db0:	2203      	movs	r2, #3
 8105db2:	fa02 f303 	lsl.w	r3, r2, r3
 8105db6:	43db      	mvns	r3, r3
 8105db8:	69ba      	ldr	r2, [r7, #24]
 8105dba:	4013      	ands	r3, r2
 8105dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105dbe:	683b      	ldr	r3, [r7, #0]
 8105dc0:	689a      	ldr	r2, [r3, #8]
 8105dc2:	69fb      	ldr	r3, [r7, #28]
 8105dc4:	005b      	lsls	r3, r3, #1
 8105dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8105dca:	69ba      	ldr	r2, [r7, #24]
 8105dcc:	4313      	orrs	r3, r2
 8105dce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	69ba      	ldr	r2, [r7, #24]
 8105dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105dd6:	683b      	ldr	r3, [r7, #0]
 8105dd8:	685b      	ldr	r3, [r3, #4]
 8105dda:	f003 0303 	and.w	r3, r3, #3
 8105dde:	2b02      	cmp	r3, #2
 8105de0:	d123      	bne.n	8105e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105de2:	69fb      	ldr	r3, [r7, #28]
 8105de4:	08da      	lsrs	r2, r3, #3
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	3208      	adds	r2, #8
 8105dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105df0:	69fb      	ldr	r3, [r7, #28]
 8105df2:	f003 0307 	and.w	r3, r3, #7
 8105df6:	009b      	lsls	r3, r3, #2
 8105df8:	220f      	movs	r2, #15
 8105dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8105dfe:	43db      	mvns	r3, r3
 8105e00:	69ba      	ldr	r2, [r7, #24]
 8105e02:	4013      	ands	r3, r2
 8105e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105e06:	683b      	ldr	r3, [r7, #0]
 8105e08:	691a      	ldr	r2, [r3, #16]
 8105e0a:	69fb      	ldr	r3, [r7, #28]
 8105e0c:	f003 0307 	and.w	r3, r3, #7
 8105e10:	009b      	lsls	r3, r3, #2
 8105e12:	fa02 f303 	lsl.w	r3, r2, r3
 8105e16:	69ba      	ldr	r2, [r7, #24]
 8105e18:	4313      	orrs	r3, r2
 8105e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105e1c:	69fb      	ldr	r3, [r7, #28]
 8105e1e:	08da      	lsrs	r2, r3, #3
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	3208      	adds	r2, #8
 8105e24:	69b9      	ldr	r1, [r7, #24]
 8105e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105e30:	69fb      	ldr	r3, [r7, #28]
 8105e32:	005b      	lsls	r3, r3, #1
 8105e34:	2203      	movs	r2, #3
 8105e36:	fa02 f303 	lsl.w	r3, r2, r3
 8105e3a:	43db      	mvns	r3, r3
 8105e3c:	69ba      	ldr	r2, [r7, #24]
 8105e3e:	4013      	ands	r3, r2
 8105e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105e42:	683b      	ldr	r3, [r7, #0]
 8105e44:	685b      	ldr	r3, [r3, #4]
 8105e46:	f003 0203 	and.w	r2, r3, #3
 8105e4a:	69fb      	ldr	r3, [r7, #28]
 8105e4c:	005b      	lsls	r3, r3, #1
 8105e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8105e52:	69ba      	ldr	r2, [r7, #24]
 8105e54:	4313      	orrs	r3, r2
 8105e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	69ba      	ldr	r2, [r7, #24]
 8105e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105e5e:	683b      	ldr	r3, [r7, #0]
 8105e60:	685b      	ldr	r3, [r3, #4]
 8105e62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105e66:	2b00      	cmp	r3, #0
 8105e68:	f000 80e0 	beq.w	810602c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8105f2c <HAL_GPIO_Init+0x238>)
 8105e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105e72:	4a2e      	ldr	r2, [pc, #184]	@ (8105f2c <HAL_GPIO_Init+0x238>)
 8105e74:	f043 0302 	orr.w	r3, r3, #2
 8105e78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8105f2c <HAL_GPIO_Init+0x238>)
 8105e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105e82:	f003 0302 	and.w	r3, r3, #2
 8105e86:	60fb      	str	r3, [r7, #12]
 8105e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105e8a:	4a29      	ldr	r2, [pc, #164]	@ (8105f30 <HAL_GPIO_Init+0x23c>)
 8105e8c:	69fb      	ldr	r3, [r7, #28]
 8105e8e:	089b      	lsrs	r3, r3, #2
 8105e90:	3302      	adds	r3, #2
 8105e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105e98:	69fb      	ldr	r3, [r7, #28]
 8105e9a:	f003 0303 	and.w	r3, r3, #3
 8105e9e:	009b      	lsls	r3, r3, #2
 8105ea0:	220f      	movs	r2, #15
 8105ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8105ea6:	43db      	mvns	r3, r3
 8105ea8:	69ba      	ldr	r2, [r7, #24]
 8105eaa:	4013      	ands	r3, r2
 8105eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	4a20      	ldr	r2, [pc, #128]	@ (8105f34 <HAL_GPIO_Init+0x240>)
 8105eb2:	4293      	cmp	r3, r2
 8105eb4:	d052      	beq.n	8105f5c <HAL_GPIO_Init+0x268>
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8105f38 <HAL_GPIO_Init+0x244>)
 8105eba:	4293      	cmp	r3, r2
 8105ebc:	d031      	beq.n	8105f22 <HAL_GPIO_Init+0x22e>
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8105f3c <HAL_GPIO_Init+0x248>)
 8105ec2:	4293      	cmp	r3, r2
 8105ec4:	d02b      	beq.n	8105f1e <HAL_GPIO_Init+0x22a>
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8105f40 <HAL_GPIO_Init+0x24c>)
 8105eca:	4293      	cmp	r3, r2
 8105ecc:	d025      	beq.n	8105f1a <HAL_GPIO_Init+0x226>
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8105f44 <HAL_GPIO_Init+0x250>)
 8105ed2:	4293      	cmp	r3, r2
 8105ed4:	d01f      	beq.n	8105f16 <HAL_GPIO_Init+0x222>
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8105f48 <HAL_GPIO_Init+0x254>)
 8105eda:	4293      	cmp	r3, r2
 8105edc:	d019      	beq.n	8105f12 <HAL_GPIO_Init+0x21e>
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8105f4c <HAL_GPIO_Init+0x258>)
 8105ee2:	4293      	cmp	r3, r2
 8105ee4:	d013      	beq.n	8105f0e <HAL_GPIO_Init+0x21a>
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	4a19      	ldr	r2, [pc, #100]	@ (8105f50 <HAL_GPIO_Init+0x25c>)
 8105eea:	4293      	cmp	r3, r2
 8105eec:	d00d      	beq.n	8105f0a <HAL_GPIO_Init+0x216>
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	4a18      	ldr	r2, [pc, #96]	@ (8105f54 <HAL_GPIO_Init+0x260>)
 8105ef2:	4293      	cmp	r3, r2
 8105ef4:	d007      	beq.n	8105f06 <HAL_GPIO_Init+0x212>
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	4a17      	ldr	r2, [pc, #92]	@ (8105f58 <HAL_GPIO_Init+0x264>)
 8105efa:	4293      	cmp	r3, r2
 8105efc:	d101      	bne.n	8105f02 <HAL_GPIO_Init+0x20e>
 8105efe:	2309      	movs	r3, #9
 8105f00:	e02d      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f02:	230a      	movs	r3, #10
 8105f04:	e02b      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f06:	2308      	movs	r3, #8
 8105f08:	e029      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f0a:	2307      	movs	r3, #7
 8105f0c:	e027      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f0e:	2306      	movs	r3, #6
 8105f10:	e025      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f12:	2305      	movs	r3, #5
 8105f14:	e023      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f16:	2304      	movs	r3, #4
 8105f18:	e021      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f1a:	2303      	movs	r3, #3
 8105f1c:	e01f      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f1e:	2302      	movs	r3, #2
 8105f20:	e01d      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f22:	2301      	movs	r3, #1
 8105f24:	e01b      	b.n	8105f5e <HAL_GPIO_Init+0x26a>
 8105f26:	bf00      	nop
 8105f28:	580000c0 	.word	0x580000c0
 8105f2c:	58024400 	.word	0x58024400
 8105f30:	58000400 	.word	0x58000400
 8105f34:	58020000 	.word	0x58020000
 8105f38:	58020400 	.word	0x58020400
 8105f3c:	58020800 	.word	0x58020800
 8105f40:	58020c00 	.word	0x58020c00
 8105f44:	58021000 	.word	0x58021000
 8105f48:	58021400 	.word	0x58021400
 8105f4c:	58021800 	.word	0x58021800
 8105f50:	58021c00 	.word	0x58021c00
 8105f54:	58022000 	.word	0x58022000
 8105f58:	58022400 	.word	0x58022400
 8105f5c:	2300      	movs	r3, #0
 8105f5e:	69fa      	ldr	r2, [r7, #28]
 8105f60:	f002 0203 	and.w	r2, r2, #3
 8105f64:	0092      	lsls	r2, r2, #2
 8105f66:	4093      	lsls	r3, r2
 8105f68:	69ba      	ldr	r2, [r7, #24]
 8105f6a:	4313      	orrs	r3, r2
 8105f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105f6e:	4938      	ldr	r1, [pc, #224]	@ (8106050 <HAL_GPIO_Init+0x35c>)
 8105f70:	69fb      	ldr	r3, [r7, #28]
 8105f72:	089b      	lsrs	r3, r3, #2
 8105f74:	3302      	adds	r3, #2
 8105f76:	69ba      	ldr	r2, [r7, #24]
 8105f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105f84:	693b      	ldr	r3, [r7, #16]
 8105f86:	43db      	mvns	r3, r3
 8105f88:	69ba      	ldr	r2, [r7, #24]
 8105f8a:	4013      	ands	r3, r2
 8105f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105f8e:	683b      	ldr	r3, [r7, #0]
 8105f90:	685b      	ldr	r3, [r3, #4]
 8105f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105f96:	2b00      	cmp	r3, #0
 8105f98:	d003      	beq.n	8105fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105f9a:	69ba      	ldr	r2, [r7, #24]
 8105f9c:	693b      	ldr	r3, [r7, #16]
 8105f9e:	4313      	orrs	r3, r2
 8105fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105fa6:	69bb      	ldr	r3, [r7, #24]
 8105fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105fae:	685b      	ldr	r3, [r3, #4]
 8105fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105fb2:	693b      	ldr	r3, [r7, #16]
 8105fb4:	43db      	mvns	r3, r3
 8105fb6:	69ba      	ldr	r2, [r7, #24]
 8105fb8:	4013      	ands	r3, r2
 8105fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105fbc:	683b      	ldr	r3, [r7, #0]
 8105fbe:	685b      	ldr	r3, [r3, #4]
 8105fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105fc4:	2b00      	cmp	r3, #0
 8105fc6:	d003      	beq.n	8105fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105fc8:	69ba      	ldr	r2, [r7, #24]
 8105fca:	693b      	ldr	r3, [r7, #16]
 8105fcc:	4313      	orrs	r3, r2
 8105fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105fd4:	69bb      	ldr	r3, [r7, #24]
 8105fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105fd8:	697b      	ldr	r3, [r7, #20]
 8105fda:	685b      	ldr	r3, [r3, #4]
 8105fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105fde:	693b      	ldr	r3, [r7, #16]
 8105fe0:	43db      	mvns	r3, r3
 8105fe2:	69ba      	ldr	r2, [r7, #24]
 8105fe4:	4013      	ands	r3, r2
 8105fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105fe8:	683b      	ldr	r3, [r7, #0]
 8105fea:	685b      	ldr	r3, [r3, #4]
 8105fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105ff0:	2b00      	cmp	r3, #0
 8105ff2:	d003      	beq.n	8105ffc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105ff4:	69ba      	ldr	r2, [r7, #24]
 8105ff6:	693b      	ldr	r3, [r7, #16]
 8105ff8:	4313      	orrs	r3, r2
 8105ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105ffc:	697b      	ldr	r3, [r7, #20]
 8105ffe:	69ba      	ldr	r2, [r7, #24]
 8106000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106002:	697b      	ldr	r3, [r7, #20]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106008:	693b      	ldr	r3, [r7, #16]
 810600a:	43db      	mvns	r3, r3
 810600c:	69ba      	ldr	r2, [r7, #24]
 810600e:	4013      	ands	r3, r2
 8106010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106012:	683b      	ldr	r3, [r7, #0]
 8106014:	685b      	ldr	r3, [r3, #4]
 8106016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810601a:	2b00      	cmp	r3, #0
 810601c:	d003      	beq.n	8106026 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810601e:	69ba      	ldr	r2, [r7, #24]
 8106020:	693b      	ldr	r3, [r7, #16]
 8106022:	4313      	orrs	r3, r2
 8106024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106026:	697b      	ldr	r3, [r7, #20]
 8106028:	69ba      	ldr	r2, [r7, #24]
 810602a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810602c:	69fb      	ldr	r3, [r7, #28]
 810602e:	3301      	adds	r3, #1
 8106030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106032:	683b      	ldr	r3, [r7, #0]
 8106034:	681a      	ldr	r2, [r3, #0]
 8106036:	69fb      	ldr	r3, [r7, #28]
 8106038:	fa22 f303 	lsr.w	r3, r2, r3
 810603c:	2b00      	cmp	r3, #0
 810603e:	f47f ae63 	bne.w	8105d08 <HAL_GPIO_Init+0x14>
  }
}
 8106042:	bf00      	nop
 8106044:	bf00      	nop
 8106046:	3724      	adds	r7, #36	@ 0x24
 8106048:	46bd      	mov	sp, r7
 810604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810604e:	4770      	bx	lr
 8106050:	58000400 	.word	0x58000400

08106054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106054:	b480      	push	{r7}
 8106056:	b083      	sub	sp, #12
 8106058:	af00      	add	r7, sp, #0
 810605a:	6078      	str	r0, [r7, #4]
 810605c:	460b      	mov	r3, r1
 810605e:	807b      	strh	r3, [r7, #2]
 8106060:	4613      	mov	r3, r2
 8106062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106064:	787b      	ldrb	r3, [r7, #1]
 8106066:	2b00      	cmp	r3, #0
 8106068:	d003      	beq.n	8106072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810606a:	887a      	ldrh	r2, [r7, #2]
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106070:	e003      	b.n	810607a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106072:	887b      	ldrh	r3, [r7, #2]
 8106074:	041a      	lsls	r2, r3, #16
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	619a      	str	r2, [r3, #24]
}
 810607a:	bf00      	nop
 810607c:	370c      	adds	r7, #12
 810607e:	46bd      	mov	sp, r7
 8106080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106084:	4770      	bx	lr

08106086 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8106086:	b480      	push	{r7}
 8106088:	b085      	sub	sp, #20
 810608a:	af00      	add	r7, sp, #0
 810608c:	6078      	str	r0, [r7, #4]
 810608e:	460b      	mov	r3, r1
 8106090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	695b      	ldr	r3, [r3, #20]
 8106096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8106098:	887a      	ldrh	r2, [r7, #2]
 810609a:	68fb      	ldr	r3, [r7, #12]
 810609c:	4013      	ands	r3, r2
 810609e:	041a      	lsls	r2, r3, #16
 81060a0:	68fb      	ldr	r3, [r7, #12]
 81060a2:	43d9      	mvns	r1, r3
 81060a4:	887b      	ldrh	r3, [r7, #2]
 81060a6:	400b      	ands	r3, r1
 81060a8:	431a      	orrs	r2, r3
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	619a      	str	r2, [r3, #24]
}
 81060ae:	bf00      	nop
 81060b0:	3714      	adds	r7, #20
 81060b2:	46bd      	mov	sp, r7
 81060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b8:	4770      	bx	lr
	...

081060bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81060bc:	b480      	push	{r7}
 81060be:	b083      	sub	sp, #12
 81060c0:	af00      	add	r7, sp, #0
 81060c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81060c4:	4a08      	ldr	r2, [pc, #32]	@ (81060e8 <HAL_HSEM_FastTake+0x2c>)
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	3320      	adds	r3, #32
 81060ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81060ce:	4a07      	ldr	r2, [pc, #28]	@ (81060ec <HAL_HSEM_FastTake+0x30>)
 81060d0:	4293      	cmp	r3, r2
 81060d2:	d101      	bne.n	81060d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81060d4:	2300      	movs	r3, #0
 81060d6:	e000      	b.n	81060da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81060d8:	2301      	movs	r3, #1
}
 81060da:	4618      	mov	r0, r3
 81060dc:	370c      	adds	r7, #12
 81060de:	46bd      	mov	sp, r7
 81060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060e4:	4770      	bx	lr
 81060e6:	bf00      	nop
 81060e8:	58026400 	.word	0x58026400
 81060ec:	80000100 	.word	0x80000100

081060f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81060f0:	b480      	push	{r7}
 81060f2:	b083      	sub	sp, #12
 81060f4:	af00      	add	r7, sp, #0
 81060f6:	6078      	str	r0, [r7, #4]
 81060f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81060fa:	4906      	ldr	r1, [pc, #24]	@ (8106114 <HAL_HSEM_Release+0x24>)
 81060fc:	683b      	ldr	r3, [r7, #0]
 81060fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8106108:	bf00      	nop
 810610a:	370c      	adds	r7, #12
 810610c:	46bd      	mov	sp, r7
 810610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106112:	4770      	bx	lr
 8106114:	58026400 	.word	0x58026400

08106118 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106118:	b480      	push	{r7}
 810611a:	b083      	sub	sp, #12
 810611c:	af00      	add	r7, sp, #0
 810611e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106120:	4b05      	ldr	r3, [pc, #20]	@ (8106138 <HAL_HSEM_ActivateNotification+0x20>)
 8106122:	681a      	ldr	r2, [r3, #0]
 8106124:	4904      	ldr	r1, [pc, #16]	@ (8106138 <HAL_HSEM_ActivateNotification+0x20>)
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	4313      	orrs	r3, r2
 810612a:	600b      	str	r3, [r1, #0]
#endif
}
 810612c:	bf00      	nop
 810612e:	370c      	adds	r7, #12
 8106130:	46bd      	mov	sp, r7
 8106132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106136:	4770      	bx	lr
 8106138:	58026510 	.word	0x58026510

0810613c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810613c:	b580      	push	{r7, lr}
 810613e:	b082      	sub	sp, #8
 8106140:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8106142:	4b0a      	ldr	r3, [pc, #40]	@ (810616c <HAL_HSEM_IRQHandler+0x30>)
 8106144:	68db      	ldr	r3, [r3, #12]
 8106146:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8106148:	4b08      	ldr	r3, [pc, #32]	@ (810616c <HAL_HSEM_IRQHandler+0x30>)
 810614a:	681a      	ldr	r2, [r3, #0]
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	43db      	mvns	r3, r3
 8106150:	4906      	ldr	r1, [pc, #24]	@ (810616c <HAL_HSEM_IRQHandler+0x30>)
 8106152:	4013      	ands	r3, r2
 8106154:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8106156:	4a05      	ldr	r2, [pc, #20]	@ (810616c <HAL_HSEM_IRQHandler+0x30>)
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810615c:	6878      	ldr	r0, [r7, #4]
 810615e:	f00b fc53 	bl	8111a08 <HAL_HSEM_FreeCallback>
}
 8106162:	bf00      	nop
 8106164:	3708      	adds	r7, #8
 8106166:	46bd      	mov	sp, r7
 8106168:	bd80      	pop	{r7, pc}
 810616a:	bf00      	nop
 810616c:	58026510 	.word	0x58026510

08106170 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106170:	b580      	push	{r7, lr}
 8106172:	b084      	sub	sp, #16
 8106174:	af00      	add	r7, sp, #0
 8106176:	60f8      	str	r0, [r7, #12]
 8106178:	460b      	mov	r3, r1
 810617a:	607a      	str	r2, [r7, #4]
 810617c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810617e:	4b37      	ldr	r3, [pc, #220]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	f023 0201 	bic.w	r2, r3, #1
 8106186:	4935      	ldr	r1, [pc, #212]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106188:	68fb      	ldr	r3, [r7, #12]
 810618a:	4313      	orrs	r3, r2
 810618c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	2b00      	cmp	r3, #0
 8106192:	d123      	bne.n	81061dc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106194:	f7fd fe18 	bl	8103dc8 <HAL_GetCurrentCPUID>
 8106198:	4603      	mov	r3, r0
 810619a:	2b03      	cmp	r3, #3
 810619c:	d158      	bne.n	8106250 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810619e:	4b2f      	ldr	r3, [pc, #188]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061a0:	691b      	ldr	r3, [r3, #16]
 81061a2:	4a2e      	ldr	r2, [pc, #184]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061a4:	f023 0301 	bic.w	r3, r3, #1
 81061a8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061aa:	4b2d      	ldr	r3, [pc, #180]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061ac:	691b      	ldr	r3, [r3, #16]
 81061ae:	4a2c      	ldr	r2, [pc, #176]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061b0:	f043 0304 	orr.w	r3, r3, #4
 81061b4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81061b6:	f3bf 8f4f 	dsb	sy
}
 81061ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81061bc:	f3bf 8f6f 	isb	sy
}
 81061c0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81061c2:	7afb      	ldrb	r3, [r7, #11]
 81061c4:	2b01      	cmp	r3, #1
 81061c6:	d101      	bne.n	81061cc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81061c8:	bf30      	wfi
 81061ca:	e000      	b.n	81061ce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81061cc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061ce:	4b24      	ldr	r3, [pc, #144]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061d0:	691b      	ldr	r3, [r3, #16]
 81061d2:	4a23      	ldr	r2, [pc, #140]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061d4:	f023 0304 	bic.w	r3, r3, #4
 81061d8:	6113      	str	r3, [r2, #16]
 81061da:	e03c      	b.n	8106256 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	2b01      	cmp	r3, #1
 81061e0:	d123      	bne.n	810622a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81061e2:	f7fd fdf1 	bl	8103dc8 <HAL_GetCurrentCPUID>
 81061e6:	4603      	mov	r3, r0
 81061e8:	2b01      	cmp	r3, #1
 81061ea:	d133      	bne.n	8106254 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81061ec:	4b1b      	ldr	r3, [pc, #108]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061ee:	695b      	ldr	r3, [r3, #20]
 81061f0:	4a1a      	ldr	r2, [pc, #104]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061f2:	f023 0302 	bic.w	r3, r3, #2
 81061f6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061f8:	4b19      	ldr	r3, [pc, #100]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061fa:	691b      	ldr	r3, [r3, #16]
 81061fc:	4a18      	ldr	r2, [pc, #96]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061fe:	f043 0304 	orr.w	r3, r3, #4
 8106202:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106204:	f3bf 8f4f 	dsb	sy
}
 8106208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810620a:	f3bf 8f6f 	isb	sy
}
 810620e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106210:	7afb      	ldrb	r3, [r7, #11]
 8106212:	2b01      	cmp	r3, #1
 8106214:	d101      	bne.n	810621a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106216:	bf30      	wfi
 8106218:	e000      	b.n	810621c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810621a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810621c:	4b10      	ldr	r3, [pc, #64]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810621e:	691b      	ldr	r3, [r3, #16]
 8106220:	4a0f      	ldr	r2, [pc, #60]	@ (8106260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106222:	f023 0304 	bic.w	r3, r3, #4
 8106226:	6113      	str	r3, [r2, #16]
 8106228:	e015      	b.n	8106256 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810622a:	f7fd fdcd 	bl	8103dc8 <HAL_GetCurrentCPUID>
 810622e:	4603      	mov	r3, r0
 8106230:	2b03      	cmp	r3, #3
 8106232:	d106      	bne.n	8106242 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106234:	4b09      	ldr	r3, [pc, #36]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106236:	691b      	ldr	r3, [r3, #16]
 8106238:	4a08      	ldr	r2, [pc, #32]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 810623a:	f023 0304 	bic.w	r3, r3, #4
 810623e:	6113      	str	r3, [r2, #16]
 8106240:	e009      	b.n	8106256 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106242:	4b06      	ldr	r3, [pc, #24]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106244:	695b      	ldr	r3, [r3, #20]
 8106246:	4a05      	ldr	r2, [pc, #20]	@ (810625c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106248:	f023 0304 	bic.w	r3, r3, #4
 810624c:	6153      	str	r3, [r2, #20]
 810624e:	e002      	b.n	8106256 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106250:	bf00      	nop
 8106252:	e000      	b.n	8106256 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106254:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106256:	3710      	adds	r7, #16
 8106258:	46bd      	mov	sp, r7
 810625a:	bd80      	pop	{r7, pc}
 810625c:	58024800 	.word	0x58024800
 8106260:	e000ed00 	.word	0xe000ed00

08106264 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106264:	b580      	push	{r7, lr}
 8106266:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106268:	f7fd fdae 	bl	8103dc8 <HAL_GetCurrentCPUID>
 810626c:	4603      	mov	r3, r0
 810626e:	2b03      	cmp	r3, #3
 8106270:	d101      	bne.n	8106276 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106272:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106274:	e001      	b.n	810627a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106276:	bf40      	sev
    __WFE ();
 8106278:	bf20      	wfe
}
 810627a:	bf00      	nop
 810627c:	bd80      	pop	{r7, pc}
	...

08106280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106280:	b480      	push	{r7}
 8106282:	b089      	sub	sp, #36	@ 0x24
 8106284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106286:	4bb3      	ldr	r3, [pc, #716]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106288:	691b      	ldr	r3, [r3, #16]
 810628a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810628e:	2b18      	cmp	r3, #24
 8106290:	f200 8155 	bhi.w	810653e <HAL_RCC_GetSysClockFreq+0x2be>
 8106294:	a201      	add	r2, pc, #4	@ (adr r2, 810629c <HAL_RCC_GetSysClockFreq+0x1c>)
 8106296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810629a:	bf00      	nop
 810629c:	08106301 	.word	0x08106301
 81062a0:	0810653f 	.word	0x0810653f
 81062a4:	0810653f 	.word	0x0810653f
 81062a8:	0810653f 	.word	0x0810653f
 81062ac:	0810653f 	.word	0x0810653f
 81062b0:	0810653f 	.word	0x0810653f
 81062b4:	0810653f 	.word	0x0810653f
 81062b8:	0810653f 	.word	0x0810653f
 81062bc:	08106327 	.word	0x08106327
 81062c0:	0810653f 	.word	0x0810653f
 81062c4:	0810653f 	.word	0x0810653f
 81062c8:	0810653f 	.word	0x0810653f
 81062cc:	0810653f 	.word	0x0810653f
 81062d0:	0810653f 	.word	0x0810653f
 81062d4:	0810653f 	.word	0x0810653f
 81062d8:	0810653f 	.word	0x0810653f
 81062dc:	0810632d 	.word	0x0810632d
 81062e0:	0810653f 	.word	0x0810653f
 81062e4:	0810653f 	.word	0x0810653f
 81062e8:	0810653f 	.word	0x0810653f
 81062ec:	0810653f 	.word	0x0810653f
 81062f0:	0810653f 	.word	0x0810653f
 81062f4:	0810653f 	.word	0x0810653f
 81062f8:	0810653f 	.word	0x0810653f
 81062fc:	08106333 	.word	0x08106333
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106300:	4b94      	ldr	r3, [pc, #592]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106302:	681b      	ldr	r3, [r3, #0]
 8106304:	f003 0320 	and.w	r3, r3, #32
 8106308:	2b00      	cmp	r3, #0
 810630a:	d009      	beq.n	8106320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810630c:	4b91      	ldr	r3, [pc, #580]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810630e:	681b      	ldr	r3, [r3, #0]
 8106310:	08db      	lsrs	r3, r3, #3
 8106312:	f003 0303 	and.w	r3, r3, #3
 8106316:	4a90      	ldr	r2, [pc, #576]	@ (8106558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106318:	fa22 f303 	lsr.w	r3, r2, r3
 810631c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810631e:	e111      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106320:	4b8d      	ldr	r3, [pc, #564]	@ (8106558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106322:	61bb      	str	r3, [r7, #24]
      break;
 8106324:	e10e      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106326:	4b8d      	ldr	r3, [pc, #564]	@ (810655c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106328:	61bb      	str	r3, [r7, #24]
      break;
 810632a:	e10b      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810632c:	4b8c      	ldr	r3, [pc, #560]	@ (8106560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810632e:	61bb      	str	r3, [r7, #24]
      break;
 8106330:	e108      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106332:	4b88      	ldr	r3, [pc, #544]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106336:	f003 0303 	and.w	r3, r3, #3
 810633a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810633c:	4b85      	ldr	r3, [pc, #532]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106340:	091b      	lsrs	r3, r3, #4
 8106342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106346:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106348:	4b82      	ldr	r3, [pc, #520]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810634c:	f003 0301 	and.w	r3, r3, #1
 8106350:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106352:	4b80      	ldr	r3, [pc, #512]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106356:	08db      	lsrs	r3, r3, #3
 8106358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810635c:	68fa      	ldr	r2, [r7, #12]
 810635e:	fb02 f303 	mul.w	r3, r2, r3
 8106362:	ee07 3a90 	vmov	s15, r3
 8106366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810636a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810636e:	693b      	ldr	r3, [r7, #16]
 8106370:	2b00      	cmp	r3, #0
 8106372:	f000 80e1 	beq.w	8106538 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106376:	697b      	ldr	r3, [r7, #20]
 8106378:	2b02      	cmp	r3, #2
 810637a:	f000 8083 	beq.w	8106484 <HAL_RCC_GetSysClockFreq+0x204>
 810637e:	697b      	ldr	r3, [r7, #20]
 8106380:	2b02      	cmp	r3, #2
 8106382:	f200 80a1 	bhi.w	81064c8 <HAL_RCC_GetSysClockFreq+0x248>
 8106386:	697b      	ldr	r3, [r7, #20]
 8106388:	2b00      	cmp	r3, #0
 810638a:	d003      	beq.n	8106394 <HAL_RCC_GetSysClockFreq+0x114>
 810638c:	697b      	ldr	r3, [r7, #20]
 810638e:	2b01      	cmp	r3, #1
 8106390:	d056      	beq.n	8106440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106392:	e099      	b.n	81064c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106394:	4b6f      	ldr	r3, [pc, #444]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	f003 0320 	and.w	r3, r3, #32
 810639c:	2b00      	cmp	r3, #0
 810639e:	d02d      	beq.n	81063fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81063a0:	4b6c      	ldr	r3, [pc, #432]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	08db      	lsrs	r3, r3, #3
 81063a6:	f003 0303 	and.w	r3, r3, #3
 81063aa:	4a6b      	ldr	r2, [pc, #428]	@ (8106558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81063ac:	fa22 f303 	lsr.w	r3, r2, r3
 81063b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	ee07 3a90 	vmov	s15, r3
 81063b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063bc:	693b      	ldr	r3, [r7, #16]
 81063be:	ee07 3a90 	vmov	s15, r3
 81063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063ca:	4b62      	ldr	r3, [pc, #392]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063d2:	ee07 3a90 	vmov	s15, r3
 81063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063da:	ed97 6a02 	vldr	s12, [r7, #8]
 81063de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81063fa:	e087      	b.n	810650c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063fc:	693b      	ldr	r3, [r7, #16]
 81063fe:	ee07 3a90 	vmov	s15, r3
 8106402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106406:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106568 <HAL_RCC_GetSysClockFreq+0x2e8>
 810640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810640e:	4b51      	ldr	r3, [pc, #324]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106416:	ee07 3a90 	vmov	s15, r3
 810641a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810641e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106422:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810642a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810642e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106436:	ee67 7a27 	vmul.f32	s15, s14, s15
 810643a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810643e:	e065      	b.n	810650c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106440:	693b      	ldr	r3, [r7, #16]
 8106442:	ee07 3a90 	vmov	s15, r3
 8106446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810644a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810656c <HAL_RCC_GetSysClockFreq+0x2ec>
 810644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106452:	4b40      	ldr	r3, [pc, #256]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810645a:	ee07 3a90 	vmov	s15, r3
 810645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106462:	ed97 6a02 	vldr	s12, [r7, #8]
 8106466:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106564 <HAL_RCC_GetSysClockFreq+0x2e4>
 810646a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810646e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810647e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106482:	e043      	b.n	810650c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106484:	693b      	ldr	r3, [r7, #16]
 8106486:	ee07 3a90 	vmov	s15, r3
 810648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810648e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106496:	4b2f      	ldr	r3, [pc, #188]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810649e:	ee07 3a90 	vmov	s15, r3
 81064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81064aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81064c6:	e021      	b.n	810650c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81064c8:	693b      	ldr	r3, [r7, #16]
 81064ca:	ee07 3a90 	vmov	s15, r3
 81064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810656c <HAL_RCC_GetSysClockFreq+0x2ec>
 81064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064da:	4b1e      	ldr	r3, [pc, #120]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064e2:	ee07 3a90 	vmov	s15, r3
 81064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81064ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810650a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810650c:	4b11      	ldr	r3, [pc, #68]	@ (8106554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106510:	0a5b      	lsrs	r3, r3, #9
 8106512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106516:	3301      	adds	r3, #1
 8106518:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810651a:	683b      	ldr	r3, [r7, #0]
 810651c:	ee07 3a90 	vmov	s15, r3
 8106520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106524:	edd7 6a07 	vldr	s13, [r7, #28]
 8106528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810652c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106530:	ee17 3a90 	vmov	r3, s15
 8106534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106536:	e005      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106538:	2300      	movs	r3, #0
 810653a:	61bb      	str	r3, [r7, #24]
      break;
 810653c:	e002      	b.n	8106544 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810653e:	4b07      	ldr	r3, [pc, #28]	@ (810655c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106540:	61bb      	str	r3, [r7, #24]
      break;
 8106542:	bf00      	nop
  }

  return sysclockfreq;
 8106544:	69bb      	ldr	r3, [r7, #24]
}
 8106546:	4618      	mov	r0, r3
 8106548:	3724      	adds	r7, #36	@ 0x24
 810654a:	46bd      	mov	sp, r7
 810654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106550:	4770      	bx	lr
 8106552:	bf00      	nop
 8106554:	58024400 	.word	0x58024400
 8106558:	03d09000 	.word	0x03d09000
 810655c:	003d0900 	.word	0x003d0900
 8106560:	017d7840 	.word	0x017d7840
 8106564:	46000000 	.word	0x46000000
 8106568:	4c742400 	.word	0x4c742400
 810656c:	4a742400 	.word	0x4a742400
 8106570:	4bbebc20 	.word	0x4bbebc20

08106574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106574:	b580      	push	{r7, lr}
 8106576:	b082      	sub	sp, #8
 8106578:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810657a:	f7ff fe81 	bl	8106280 <HAL_RCC_GetSysClockFreq>
 810657e:	4602      	mov	r2, r0
 8106580:	4b11      	ldr	r3, [pc, #68]	@ (81065c8 <HAL_RCC_GetHCLKFreq+0x54>)
 8106582:	699b      	ldr	r3, [r3, #24]
 8106584:	0a1b      	lsrs	r3, r3, #8
 8106586:	f003 030f 	and.w	r3, r3, #15
 810658a:	4910      	ldr	r1, [pc, #64]	@ (81065cc <HAL_RCC_GetHCLKFreq+0x58>)
 810658c:	5ccb      	ldrb	r3, [r1, r3]
 810658e:	f003 031f 	and.w	r3, r3, #31
 8106592:	fa22 f303 	lsr.w	r3, r2, r3
 8106596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106598:	4b0b      	ldr	r3, [pc, #44]	@ (81065c8 <HAL_RCC_GetHCLKFreq+0x54>)
 810659a:	699b      	ldr	r3, [r3, #24]
 810659c:	f003 030f 	and.w	r3, r3, #15
 81065a0:	4a0a      	ldr	r2, [pc, #40]	@ (81065cc <HAL_RCC_GetHCLKFreq+0x58>)
 81065a2:	5cd3      	ldrb	r3, [r2, r3]
 81065a4:	f003 031f 	and.w	r3, r3, #31
 81065a8:	687a      	ldr	r2, [r7, #4]
 81065aa:	fa22 f303 	lsr.w	r3, r2, r3
 81065ae:	4a08      	ldr	r2, [pc, #32]	@ (81065d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81065b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81065b2:	4b07      	ldr	r3, [pc, #28]	@ (81065d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a07      	ldr	r2, [pc, #28]	@ (81065d4 <HAL_RCC_GetHCLKFreq+0x60>)
 81065b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81065ba:	4b05      	ldr	r3, [pc, #20]	@ (81065d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81065bc:	681b      	ldr	r3, [r3, #0]
}
 81065be:	4618      	mov	r0, r3
 81065c0:	3708      	adds	r7, #8
 81065c2:	46bd      	mov	sp, r7
 81065c4:	bd80      	pop	{r7, pc}
 81065c6:	bf00      	nop
 81065c8:	58024400 	.word	0x58024400
 81065cc:	08117700 	.word	0x08117700
 81065d0:	10000004 	.word	0x10000004
 81065d4:	10000000 	.word	0x10000000

081065d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81065d8:	b580      	push	{r7, lr}
 81065da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81065dc:	f7ff ffca 	bl	8106574 <HAL_RCC_GetHCLKFreq>
 81065e0:	4602      	mov	r2, r0
 81065e2:	4b06      	ldr	r3, [pc, #24]	@ (81065fc <HAL_RCC_GetPCLK1Freq+0x24>)
 81065e4:	69db      	ldr	r3, [r3, #28]
 81065e6:	091b      	lsrs	r3, r3, #4
 81065e8:	f003 0307 	and.w	r3, r3, #7
 81065ec:	4904      	ldr	r1, [pc, #16]	@ (8106600 <HAL_RCC_GetPCLK1Freq+0x28>)
 81065ee:	5ccb      	ldrb	r3, [r1, r3]
 81065f0:	f003 031f 	and.w	r3, r3, #31
 81065f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81065f8:	4618      	mov	r0, r3
 81065fa:	bd80      	pop	{r7, pc}
 81065fc:	58024400 	.word	0x58024400
 8106600:	08117700 	.word	0x08117700

08106604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106604:	b580      	push	{r7, lr}
 8106606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106608:	f7ff ffb4 	bl	8106574 <HAL_RCC_GetHCLKFreq>
 810660c:	4602      	mov	r2, r0
 810660e:	4b06      	ldr	r3, [pc, #24]	@ (8106628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106610:	69db      	ldr	r3, [r3, #28]
 8106612:	0a1b      	lsrs	r3, r3, #8
 8106614:	f003 0307 	and.w	r3, r3, #7
 8106618:	4904      	ldr	r1, [pc, #16]	@ (810662c <HAL_RCC_GetPCLK2Freq+0x28>)
 810661a:	5ccb      	ldrb	r3, [r1, r3]
 810661c:	f003 031f 	and.w	r3, r3, #31
 8106620:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106624:	4618      	mov	r0, r3
 8106626:	bd80      	pop	{r7, pc}
 8106628:	58024400 	.word	0x58024400
 810662c:	08117700 	.word	0x08117700

08106630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106630:	b480      	push	{r7}
 8106632:	b083      	sub	sp, #12
 8106634:	af00      	add	r7, sp, #0
 8106636:	6078      	str	r0, [r7, #4]
 8106638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	223f      	movs	r2, #63	@ 0x3f
 810663e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106640:	4b1a      	ldr	r3, [pc, #104]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 8106642:	691b      	ldr	r3, [r3, #16]
 8106644:	f003 0207 	and.w	r2, r3, #7
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810664c:	4b17      	ldr	r3, [pc, #92]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 810664e:	699b      	ldr	r3, [r3, #24]
 8106650:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106658:	4b14      	ldr	r3, [pc, #80]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 810665a:	699b      	ldr	r3, [r3, #24]
 810665c:	f003 020f 	and.w	r2, r3, #15
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106664:	4b11      	ldr	r3, [pc, #68]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 8106666:	699b      	ldr	r3, [r3, #24]
 8106668:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106670:	4b0e      	ldr	r3, [pc, #56]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 8106672:	69db      	ldr	r3, [r3, #28]
 8106674:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810667c:	4b0b      	ldr	r3, [pc, #44]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 810667e:	69db      	ldr	r3, [r3, #28]
 8106680:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106688:	4b08      	ldr	r3, [pc, #32]	@ (81066ac <HAL_RCC_GetClockConfig+0x7c>)
 810668a:	6a1b      	ldr	r3, [r3, #32]
 810668c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106694:	4b06      	ldr	r3, [pc, #24]	@ (81066b0 <HAL_RCC_GetClockConfig+0x80>)
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	f003 020f 	and.w	r2, r3, #15
 810669c:	683b      	ldr	r3, [r7, #0]
 810669e:	601a      	str	r2, [r3, #0]
}
 81066a0:	bf00      	nop
 81066a2:	370c      	adds	r7, #12
 81066a4:	46bd      	mov	sp, r7
 81066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066aa:	4770      	bx	lr
 81066ac:	58024400 	.word	0x58024400
 81066b0:	52002000 	.word	0x52002000

081066b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81066b8:	b0ca      	sub	sp, #296	@ 0x128
 81066ba:	af00      	add	r7, sp, #0
 81066bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81066c0:	2300      	movs	r3, #0
 81066c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81066c6:	2300      	movs	r3, #0
 81066c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81066d8:	2500      	movs	r5, #0
 81066da:	ea54 0305 	orrs.w	r3, r4, r5
 81066de:	d049      	beq.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81066e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81066ea:	d02f      	beq.n	810674c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81066ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81066f0:	d828      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81066f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81066f6:	d01a      	beq.n	810672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81066f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81066fc:	d822      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81066fe:	2b00      	cmp	r3, #0
 8106700:	d003      	beq.n	810670a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106706:	d007      	beq.n	8106718 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106708:	e01c      	b.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810670a:	4bb8      	ldr	r3, [pc, #736]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810670e:	4ab7      	ldr	r2, [pc, #732]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106716:	e01a      	b.n	810674e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810671c:	3308      	adds	r3, #8
 810671e:	2102      	movs	r1, #2
 8106720:	4618      	mov	r0, r3
 8106722:	f002 fb61 	bl	8108de8 <RCCEx_PLL2_Config>
 8106726:	4603      	mov	r3, r0
 8106728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810672c:	e00f      	b.n	810674e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106732:	3328      	adds	r3, #40	@ 0x28
 8106734:	2102      	movs	r1, #2
 8106736:	4618      	mov	r0, r3
 8106738:	f002 fc08 	bl	8108f4c <RCCEx_PLL3_Config>
 810673c:	4603      	mov	r3, r0
 810673e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106742:	e004      	b.n	810674e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106744:	2301      	movs	r3, #1
 8106746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810674a:	e000      	b.n	810674e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106752:	2b00      	cmp	r3, #0
 8106754:	d10a      	bne.n	810676c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106756:	4ba5      	ldr	r3, [pc, #660]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810675a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106764:	4aa1      	ldr	r2, [pc, #644]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106766:	430b      	orrs	r3, r1
 8106768:	6513      	str	r3, [r2, #80]	@ 0x50
 810676a:	e003      	b.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810676c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106778:	e9d3 2300 	ldrd	r2, r3, [r3]
 810677c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106780:	f04f 0900 	mov.w	r9, #0
 8106784:	ea58 0309 	orrs.w	r3, r8, r9
 8106788:	d047      	beq.n	810681a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810678e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106790:	2b04      	cmp	r3, #4
 8106792:	d82a      	bhi.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106794:	a201      	add	r2, pc, #4	@ (adr r2, 810679c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810679a:	bf00      	nop
 810679c:	081067b1 	.word	0x081067b1
 81067a0:	081067bf 	.word	0x081067bf
 81067a4:	081067d5 	.word	0x081067d5
 81067a8:	081067f3 	.word	0x081067f3
 81067ac:	081067f3 	.word	0x081067f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067b0:	4b8e      	ldr	r3, [pc, #568]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067b4:	4a8d      	ldr	r2, [pc, #564]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81067ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067bc:	e01a      	b.n	81067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067c2:	3308      	adds	r3, #8
 81067c4:	2100      	movs	r1, #0
 81067c6:	4618      	mov	r0, r3
 81067c8:	f002 fb0e 	bl	8108de8 <RCCEx_PLL2_Config>
 81067cc:	4603      	mov	r3, r0
 81067ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067d2:	e00f      	b.n	81067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067d8:	3328      	adds	r3, #40	@ 0x28
 81067da:	2100      	movs	r1, #0
 81067dc:	4618      	mov	r0, r3
 81067de:	f002 fbb5 	bl	8108f4c <RCCEx_PLL3_Config>
 81067e2:	4603      	mov	r3, r0
 81067e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067e8:	e004      	b.n	81067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81067ea:	2301      	movs	r3, #1
 81067ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81067f0:	e000      	b.n	81067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81067f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81067f8:	2b00      	cmp	r3, #0
 81067fa:	d10a      	bne.n	8106812 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81067fc:	4b7b      	ldr	r3, [pc, #492]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106800:	f023 0107 	bic.w	r1, r3, #7
 8106804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810680a:	4a78      	ldr	r2, [pc, #480]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810680c:	430b      	orrs	r3, r1
 810680e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106810:	e003      	b.n	810681a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106822:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106826:	f04f 0b00 	mov.w	fp, #0
 810682a:	ea5a 030b 	orrs.w	r3, sl, fp
 810682e:	d04c      	beq.n	81068ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810683a:	d030      	beq.n	810689e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810683c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106840:	d829      	bhi.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106842:	2bc0      	cmp	r3, #192	@ 0xc0
 8106844:	d02d      	beq.n	81068a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106846:	2bc0      	cmp	r3, #192	@ 0xc0
 8106848:	d825      	bhi.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810684a:	2b80      	cmp	r3, #128	@ 0x80
 810684c:	d018      	beq.n	8106880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810684e:	2b80      	cmp	r3, #128	@ 0x80
 8106850:	d821      	bhi.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106852:	2b00      	cmp	r3, #0
 8106854:	d002      	beq.n	810685c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106856:	2b40      	cmp	r3, #64	@ 0x40
 8106858:	d007      	beq.n	810686a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810685a:	e01c      	b.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810685c:	4b63      	ldr	r3, [pc, #396]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106860:	4a62      	ldr	r2, [pc, #392]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106868:	e01c      	b.n	81068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810686e:	3308      	adds	r3, #8
 8106870:	2100      	movs	r1, #0
 8106872:	4618      	mov	r0, r3
 8106874:	f002 fab8 	bl	8108de8 <RCCEx_PLL2_Config>
 8106878:	4603      	mov	r3, r0
 810687a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810687e:	e011      	b.n	81068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106884:	3328      	adds	r3, #40	@ 0x28
 8106886:	2100      	movs	r1, #0
 8106888:	4618      	mov	r0, r3
 810688a:	f002 fb5f 	bl	8108f4c <RCCEx_PLL3_Config>
 810688e:	4603      	mov	r3, r0
 8106890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106894:	e006      	b.n	81068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106896:	2301      	movs	r3, #1
 8106898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810689c:	e002      	b.n	81068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810689e:	bf00      	nop
 81068a0:	e000      	b.n	81068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	d10a      	bne.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81068ac:	4b4f      	ldr	r3, [pc, #316]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81068ba:	4a4c      	ldr	r2, [pc, #304]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068bc:	430b      	orrs	r3, r1
 81068be:	6513      	str	r3, [r2, #80]	@ 0x50
 81068c0:	e003      	b.n	81068ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81068d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81068da:	2300      	movs	r3, #0
 81068dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81068e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81068e4:	460b      	mov	r3, r1
 81068e6:	4313      	orrs	r3, r2
 81068e8:	d053      	beq.n	8106992 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81068f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81068f6:	d035      	beq.n	8106964 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81068f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81068fc:	d82e      	bhi.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81068fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106902:	d031      	beq.n	8106968 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106904:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106908:	d828      	bhi.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810690a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810690e:	d01a      	beq.n	8106946 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106914:	d822      	bhi.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106916:	2b00      	cmp	r3, #0
 8106918:	d003      	beq.n	8106922 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810691a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810691e:	d007      	beq.n	8106930 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106920:	e01c      	b.n	810695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106922:	4b32      	ldr	r3, [pc, #200]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106926:	4a31      	ldr	r2, [pc, #196]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810692c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810692e:	e01c      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106934:	3308      	adds	r3, #8
 8106936:	2100      	movs	r1, #0
 8106938:	4618      	mov	r0, r3
 810693a:	f002 fa55 	bl	8108de8 <RCCEx_PLL2_Config>
 810693e:	4603      	mov	r3, r0
 8106940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106944:	e011      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810694a:	3328      	adds	r3, #40	@ 0x28
 810694c:	2100      	movs	r1, #0
 810694e:	4618      	mov	r0, r3
 8106950:	f002 fafc 	bl	8108f4c <RCCEx_PLL3_Config>
 8106954:	4603      	mov	r3, r0
 8106956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810695a:	e006      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810695c:	2301      	movs	r3, #1
 810695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106962:	e002      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106964:	bf00      	nop
 8106966:	e000      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106968:	bf00      	nop
    }

    if (ret == HAL_OK)
 810696a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810696e:	2b00      	cmp	r3, #0
 8106970:	d10b      	bne.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106972:	4b1e      	ldr	r3, [pc, #120]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106976:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810697e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106982:	4a1a      	ldr	r2, [pc, #104]	@ (81069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106984:	430b      	orrs	r3, r1
 8106986:	6593      	str	r3, [r2, #88]	@ 0x58
 8106988:	e003      	b.n	8106992 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810698a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810698e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106996:	e9d3 2300 	ldrd	r2, r3, [r3]
 810699a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810699e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81069a2:	2300      	movs	r3, #0
 81069a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81069a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81069ac:	460b      	mov	r3, r1
 81069ae:	4313      	orrs	r3, r2
 81069b0:	d056      	beq.n	8106a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81069ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81069be:	d038      	beq.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81069c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81069c4:	d831      	bhi.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81069ca:	d034      	beq.n	8106a36 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81069cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81069d0:	d82b      	bhi.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81069d6:	d01d      	beq.n	8106a14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81069d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81069dc:	d825      	bhi.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069de:	2b00      	cmp	r3, #0
 81069e0:	d006      	beq.n	81069f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81069e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81069e6:	d00a      	beq.n	81069fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81069e8:	e01f      	b.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069ea:	bf00      	nop
 81069ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069f0:	4ba2      	ldr	r3, [pc, #648]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069f4:	4aa1      	ldr	r2, [pc, #644]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81069fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81069fc:	e01c      	b.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a02:	3308      	adds	r3, #8
 8106a04:	2100      	movs	r1, #0
 8106a06:	4618      	mov	r0, r3
 8106a08:	f002 f9ee 	bl	8108de8 <RCCEx_PLL2_Config>
 8106a0c:	4603      	mov	r3, r0
 8106a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106a12:	e011      	b.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a18:	3328      	adds	r3, #40	@ 0x28
 8106a1a:	2100      	movs	r1, #0
 8106a1c:	4618      	mov	r0, r3
 8106a1e:	f002 fa95 	bl	8108f4c <RCCEx_PLL3_Config>
 8106a22:	4603      	mov	r3, r0
 8106a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106a28:	e006      	b.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106a2a:	2301      	movs	r3, #1
 8106a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a30:	e002      	b.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106a32:	bf00      	nop
 8106a34:	e000      	b.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a3c:	2b00      	cmp	r3, #0
 8106a3e:	d10b      	bne.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106a40:	4b8e      	ldr	r3, [pc, #568]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106a44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106a50:	4a8a      	ldr	r2, [pc, #552]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a52:	430b      	orrs	r3, r1
 8106a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8106a56:	e003      	b.n	8106a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106a70:	2300      	movs	r3, #0
 8106a72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106a76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106a7a:	460b      	mov	r3, r1
 8106a7c:	4313      	orrs	r3, r2
 8106a7e:	d03a      	beq.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a86:	2b30      	cmp	r3, #48	@ 0x30
 8106a88:	d01f      	beq.n	8106aca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106a8a:	2b30      	cmp	r3, #48	@ 0x30
 8106a8c:	d819      	bhi.n	8106ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106a8e:	2b20      	cmp	r3, #32
 8106a90:	d00c      	beq.n	8106aac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106a92:	2b20      	cmp	r3, #32
 8106a94:	d815      	bhi.n	8106ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106a96:	2b00      	cmp	r3, #0
 8106a98:	d019      	beq.n	8106ace <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106a9a:	2b10      	cmp	r3, #16
 8106a9c:	d111      	bne.n	8106ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a9e:	4b77      	ldr	r3, [pc, #476]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106aa2:	4a76      	ldr	r2, [pc, #472]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106aaa:	e011      	b.n	8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ab0:	3308      	adds	r3, #8
 8106ab2:	2102      	movs	r1, #2
 8106ab4:	4618      	mov	r0, r3
 8106ab6:	f002 f997 	bl	8108de8 <RCCEx_PLL2_Config>
 8106aba:	4603      	mov	r3, r0
 8106abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106ac0:	e006      	b.n	8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106ac2:	2301      	movs	r3, #1
 8106ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ac8:	e002      	b.n	8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106aca:	bf00      	nop
 8106acc:	e000      	b.n	8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ad4:	2b00      	cmp	r3, #0
 8106ad6:	d10a      	bne.n	8106aee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106ad8:	4b68      	ldr	r3, [pc, #416]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106adc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106ae6:	4a65      	ldr	r2, [pc, #404]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ae8:	430b      	orrs	r3, r1
 8106aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106aec:	e003      	b.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106afe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8106b02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8106b06:	2300      	movs	r3, #0
 8106b08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8106b0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8106b10:	460b      	mov	r3, r1
 8106b12:	4313      	orrs	r3, r2
 8106b14:	d051      	beq.n	8106bba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106b20:	d035      	beq.n	8106b8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8106b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106b26:	d82e      	bhi.n	8106b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106b2c:	d031      	beq.n	8106b92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106b2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106b32:	d828      	bhi.n	8106b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b38:	d01a      	beq.n	8106b70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b3e:	d822      	bhi.n	8106b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b40:	2b00      	cmp	r3, #0
 8106b42:	d003      	beq.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106b48:	d007      	beq.n	8106b5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106b4a:	e01c      	b.n	8106b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b50:	4a4a      	ldr	r2, [pc, #296]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b58:	e01c      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b5e:	3308      	adds	r3, #8
 8106b60:	2100      	movs	r1, #0
 8106b62:	4618      	mov	r0, r3
 8106b64:	f002 f940 	bl	8108de8 <RCCEx_PLL2_Config>
 8106b68:	4603      	mov	r3, r0
 8106b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b6e:	e011      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b74:	3328      	adds	r3, #40	@ 0x28
 8106b76:	2100      	movs	r1, #0
 8106b78:	4618      	mov	r0, r3
 8106b7a:	f002 f9e7 	bl	8108f4c <RCCEx_PLL3_Config>
 8106b7e:	4603      	mov	r3, r0
 8106b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b84:	e006      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b86:	2301      	movs	r3, #1
 8106b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106b8c:	e002      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106b8e:	bf00      	nop
 8106b90:	e000      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b98:	2b00      	cmp	r3, #0
 8106b9a:	d10a      	bne.n	8106bb2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106b9c:	4b37      	ldr	r3, [pc, #220]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ba0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106baa:	4a34      	ldr	r2, [pc, #208]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106bac:	430b      	orrs	r3, r1
 8106bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8106bb0:	e003      	b.n	8106bba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bc2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106bca:	2300      	movs	r3, #0
 8106bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106bd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106bd4:	460b      	mov	r3, r1
 8106bd6:	4313      	orrs	r3, r2
 8106bd8:	d056      	beq.n	8106c88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106be4:	d033      	beq.n	8106c4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106bea:	d82c      	bhi.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106bec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106bf0:	d02f      	beq.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106bf6:	d826      	bhi.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106bf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106bfc:	d02b      	beq.n	8106c56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106bfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106c02:	d820      	bhi.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c08:	d012      	beq.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c0e:	d81a      	bhi.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d022      	beq.n	8106c5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c18:	d115      	bne.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c1e:	3308      	adds	r3, #8
 8106c20:	2101      	movs	r1, #1
 8106c22:	4618      	mov	r0, r3
 8106c24:	f002 f8e0 	bl	8108de8 <RCCEx_PLL2_Config>
 8106c28:	4603      	mov	r3, r0
 8106c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106c2e:	e015      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c34:	3328      	adds	r3, #40	@ 0x28
 8106c36:	2101      	movs	r1, #1
 8106c38:	4618      	mov	r0, r3
 8106c3a:	f002 f987 	bl	8108f4c <RCCEx_PLL3_Config>
 8106c3e:	4603      	mov	r3, r0
 8106c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106c44:	e00a      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c46:	2301      	movs	r3, #1
 8106c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c4c:	e006      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c4e:	bf00      	nop
 8106c50:	e004      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c52:	bf00      	nop
 8106c54:	e002      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c56:	bf00      	nop
 8106c58:	e000      	b.n	8106c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c60:	2b00      	cmp	r3, #0
 8106c62:	d10d      	bne.n	8106c80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106c64:	4b05      	ldr	r3, [pc, #20]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c68:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106c72:	4a02      	ldr	r2, [pc, #8]	@ (8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c74:	430b      	orrs	r3, r1
 8106c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8106c78:	e006      	b.n	8106c88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106c7a:	bf00      	nop
 8106c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c90:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106c98:	2300      	movs	r3, #0
 8106c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106c9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106ca2:	460b      	mov	r3, r1
 8106ca4:	4313      	orrs	r3, r2
 8106ca6:	d055      	beq.n	8106d54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106cb4:	d033      	beq.n	8106d1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106cba:	d82c      	bhi.n	8106d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106cc0:	d02f      	beq.n	8106d22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106cc6:	d826      	bhi.n	8106d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106ccc:	d02b      	beq.n	8106d26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106cd2:	d820      	bhi.n	8106d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106cd8:	d012      	beq.n	8106d00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106cde:	d81a      	bhi.n	8106d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106ce0:	2b00      	cmp	r3, #0
 8106ce2:	d022      	beq.n	8106d2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ce8:	d115      	bne.n	8106d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cee:	3308      	adds	r3, #8
 8106cf0:	2101      	movs	r1, #1
 8106cf2:	4618      	mov	r0, r3
 8106cf4:	f002 f878 	bl	8108de8 <RCCEx_PLL2_Config>
 8106cf8:	4603      	mov	r3, r0
 8106cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106cfe:	e015      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d04:	3328      	adds	r3, #40	@ 0x28
 8106d06:	2101      	movs	r1, #1
 8106d08:	4618      	mov	r0, r3
 8106d0a:	f002 f91f 	bl	8108f4c <RCCEx_PLL3_Config>
 8106d0e:	4603      	mov	r3, r0
 8106d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106d14:	e00a      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106d16:	2301      	movs	r3, #1
 8106d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d1c:	e006      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d1e:	bf00      	nop
 8106d20:	e004      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d22:	bf00      	nop
 8106d24:	e002      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d26:	bf00      	nop
 8106d28:	e000      	b.n	8106d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d30:	2b00      	cmp	r3, #0
 8106d32:	d10b      	bne.n	8106d4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106d34:	4ba4      	ldr	r3, [pc, #656]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106d38:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106d44:	4aa0      	ldr	r2, [pc, #640]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d46:	430b      	orrs	r3, r1
 8106d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8106d4a:	e003      	b.n	8106d54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106d64:	2300      	movs	r3, #0
 8106d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106d6e:	460b      	mov	r3, r1
 8106d70:	4313      	orrs	r3, r2
 8106d72:	d037      	beq.n	8106de4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106d7e:	d00e      	beq.n	8106d9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106d84:	d816      	bhi.n	8106db4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106d86:	2b00      	cmp	r3, #0
 8106d88:	d018      	beq.n	8106dbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106d8e:	d111      	bne.n	8106db4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d90:	4b8d      	ldr	r3, [pc, #564]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d94:	4a8c      	ldr	r2, [pc, #560]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106d9c:	e00f      	b.n	8106dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106da2:	3308      	adds	r3, #8
 8106da4:	2101      	movs	r1, #1
 8106da6:	4618      	mov	r0, r3
 8106da8:	f002 f81e 	bl	8108de8 <RCCEx_PLL2_Config>
 8106dac:	4603      	mov	r3, r0
 8106dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106db2:	e004      	b.n	8106dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106db4:	2301      	movs	r3, #1
 8106db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106dba:	e000      	b.n	8106dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106dc2:	2b00      	cmp	r3, #0
 8106dc4:	d10a      	bne.n	8106ddc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106dc6:	4b80      	ldr	r3, [pc, #512]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106dca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dd4:	4a7c      	ldr	r2, [pc, #496]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dd6:	430b      	orrs	r3, r1
 8106dd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8106dda:	e003      	b.n	8106de4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106df4:	2300      	movs	r3, #0
 8106df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106dfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106dfe:	460b      	mov	r3, r1
 8106e00:	4313      	orrs	r3, r2
 8106e02:	d039      	beq.n	8106e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106e0a:	2b03      	cmp	r3, #3
 8106e0c:	d81c      	bhi.n	8106e48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8106e14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e14:	08106e51 	.word	0x08106e51
 8106e18:	08106e25 	.word	0x08106e25
 8106e1c:	08106e33 	.word	0x08106e33
 8106e20:	08106e51 	.word	0x08106e51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e24:	4b68      	ldr	r3, [pc, #416]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e28:	4a67      	ldr	r2, [pc, #412]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106e30:	e00f      	b.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e36:	3308      	adds	r3, #8
 8106e38:	2102      	movs	r1, #2
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f001 ffd4 	bl	8108de8 <RCCEx_PLL2_Config>
 8106e40:	4603      	mov	r3, r0
 8106e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106e46:	e004      	b.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106e48:	2301      	movs	r3, #1
 8106e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106e4e:	e000      	b.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d10a      	bne.n	8106e70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106e5e:	f023 0103 	bic.w	r1, r3, #3
 8106e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106e68:	4a57      	ldr	r2, [pc, #348]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e6a:	430b      	orrs	r3, r1
 8106e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106e6e:	e003      	b.n	8106e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106e88:	2300      	movs	r3, #0
 8106e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106e8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106e92:	460b      	mov	r3, r1
 8106e94:	4313      	orrs	r3, r2
 8106e96:	f000 809f 	beq.w	8106fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8106fcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8106fcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106ea6:	f7fb fb4d 	bl	8102544 <HAL_GetTick>
 8106eaa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106eae:	e00b      	b.n	8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106eb0:	f7fb fb48 	bl	8102544 <HAL_GetTick>
 8106eb4:	4602      	mov	r2, r0
 8106eb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106eba:	1ad3      	subs	r3, r2, r3
 8106ebc:	2b64      	cmp	r3, #100	@ 0x64
 8106ebe:	d903      	bls.n	8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106ec0:	2303      	movs	r3, #3
 8106ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ec6:	e005      	b.n	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106ec8:	4b40      	ldr	r3, [pc, #256]	@ (8106fcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106ed0:	2b00      	cmp	r3, #0
 8106ed2:	d0ed      	beq.n	8106eb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ed8:	2b00      	cmp	r3, #0
 8106eda:	d179      	bne.n	8106fd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106edc:	4b3a      	ldr	r3, [pc, #232]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ede:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106ee8:	4053      	eors	r3, r2
 8106eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106eee:	2b00      	cmp	r3, #0
 8106ef0:	d015      	beq.n	8106f1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106ef2:	4b35      	ldr	r3, [pc, #212]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106efa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106efe:	4b32      	ldr	r3, [pc, #200]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106f02:	4a31      	ldr	r2, [pc, #196]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106f08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106f14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106f16:	4a2c      	ldr	r2, [pc, #176]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f2a:	d118      	bne.n	8106f5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106f2c:	f7fb fb0a 	bl	8102544 <HAL_GetTick>
 8106f30:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106f34:	e00d      	b.n	8106f52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106f36:	f7fb fb05 	bl	8102544 <HAL_GetTick>
 8106f3a:	4602      	mov	r2, r0
 8106f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106f40:	1ad2      	subs	r2, r2, r3
 8106f42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106f46:	429a      	cmp	r2, r3
 8106f48:	d903      	bls.n	8106f52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106f4a:	2303      	movs	r3, #3
 8106f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106f50:	e005      	b.n	8106f5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106f52:	4b1d      	ldr	r3, [pc, #116]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106f56:	f003 0302 	and.w	r3, r3, #2
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d0eb      	beq.n	8106f36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f62:	2b00      	cmp	r3, #0
 8106f64:	d12b      	bne.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106f76:	d110      	bne.n	8106f9a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106f78:	4b13      	ldr	r3, [pc, #76]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f7a:	691b      	ldr	r3, [r3, #16]
 8106f7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f88:	091b      	lsrs	r3, r3, #4
 8106f8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106f8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106f92:	4a0d      	ldr	r2, [pc, #52]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f94:	430b      	orrs	r3, r1
 8106f96:	6113      	str	r3, [r2, #16]
 8106f98:	e005      	b.n	8106fa6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f9c:	691b      	ldr	r3, [r3, #16]
 8106f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106fa0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106fa4:	6113      	str	r3, [r2, #16]
 8106fa6:	4b08      	ldr	r3, [pc, #32]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106fa8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106fb6:	4a04      	ldr	r2, [pc, #16]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106fb8:	430b      	orrs	r3, r1
 8106fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8106fbc:	e00c      	b.n	8106fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106fc6:	e007      	b.n	8106fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106fc8:	58024400 	.word	0x58024400
 8106fcc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fe0:	f002 0301 	and.w	r3, r2, #1
 8106fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106fe8:	2300      	movs	r3, #0
 8106fea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106fee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106ff2:	460b      	mov	r3, r1
 8106ff4:	4313      	orrs	r3, r2
 8106ff6:	f000 8089 	beq.w	810710c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107000:	2b28      	cmp	r3, #40	@ 0x28
 8107002:	d86b      	bhi.n	81070dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8107004:	a201      	add	r2, pc, #4	@ (adr r2, 810700c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8107006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810700a:	bf00      	nop
 810700c:	081070e5 	.word	0x081070e5
 8107010:	081070dd 	.word	0x081070dd
 8107014:	081070dd 	.word	0x081070dd
 8107018:	081070dd 	.word	0x081070dd
 810701c:	081070dd 	.word	0x081070dd
 8107020:	081070dd 	.word	0x081070dd
 8107024:	081070dd 	.word	0x081070dd
 8107028:	081070dd 	.word	0x081070dd
 810702c:	081070b1 	.word	0x081070b1
 8107030:	081070dd 	.word	0x081070dd
 8107034:	081070dd 	.word	0x081070dd
 8107038:	081070dd 	.word	0x081070dd
 810703c:	081070dd 	.word	0x081070dd
 8107040:	081070dd 	.word	0x081070dd
 8107044:	081070dd 	.word	0x081070dd
 8107048:	081070dd 	.word	0x081070dd
 810704c:	081070c7 	.word	0x081070c7
 8107050:	081070dd 	.word	0x081070dd
 8107054:	081070dd 	.word	0x081070dd
 8107058:	081070dd 	.word	0x081070dd
 810705c:	081070dd 	.word	0x081070dd
 8107060:	081070dd 	.word	0x081070dd
 8107064:	081070dd 	.word	0x081070dd
 8107068:	081070dd 	.word	0x081070dd
 810706c:	081070e5 	.word	0x081070e5
 8107070:	081070dd 	.word	0x081070dd
 8107074:	081070dd 	.word	0x081070dd
 8107078:	081070dd 	.word	0x081070dd
 810707c:	081070dd 	.word	0x081070dd
 8107080:	081070dd 	.word	0x081070dd
 8107084:	081070dd 	.word	0x081070dd
 8107088:	081070dd 	.word	0x081070dd
 810708c:	081070e5 	.word	0x081070e5
 8107090:	081070dd 	.word	0x081070dd
 8107094:	081070dd 	.word	0x081070dd
 8107098:	081070dd 	.word	0x081070dd
 810709c:	081070dd 	.word	0x081070dd
 81070a0:	081070dd 	.word	0x081070dd
 81070a4:	081070dd 	.word	0x081070dd
 81070a8:	081070dd 	.word	0x081070dd
 81070ac:	081070e5 	.word	0x081070e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070b4:	3308      	adds	r3, #8
 81070b6:	2101      	movs	r1, #1
 81070b8:	4618      	mov	r0, r3
 81070ba:	f001 fe95 	bl	8108de8 <RCCEx_PLL2_Config>
 81070be:	4603      	mov	r3, r0
 81070c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81070c4:	e00f      	b.n	81070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ca:	3328      	adds	r3, #40	@ 0x28
 81070cc:	2101      	movs	r1, #1
 81070ce:	4618      	mov	r0, r3
 81070d0:	f001 ff3c 	bl	8108f4c <RCCEx_PLL3_Config>
 81070d4:	4603      	mov	r3, r0
 81070d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81070da:	e004      	b.n	81070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070dc:	2301      	movs	r3, #1
 81070de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070e2:	e000      	b.n	81070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81070e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070ea:	2b00      	cmp	r3, #0
 81070ec:	d10a      	bne.n	8107104 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81070ee:	4bbf      	ldr	r3, [pc, #764]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81070f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81070fc:	4abb      	ldr	r2, [pc, #748]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070fe:	430b      	orrs	r3, r1
 8107100:	6553      	str	r3, [r2, #84]	@ 0x54
 8107102:	e003      	b.n	810710c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107114:	f002 0302 	and.w	r3, r2, #2
 8107118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810711c:	2300      	movs	r3, #0
 810711e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8107122:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8107126:	460b      	mov	r3, r1
 8107128:	4313      	orrs	r3, r2
 810712a:	d041      	beq.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107132:	2b05      	cmp	r3, #5
 8107134:	d824      	bhi.n	8107180 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8107136:	a201      	add	r2, pc, #4	@ (adr r2, 810713c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810713c:	08107189 	.word	0x08107189
 8107140:	08107155 	.word	0x08107155
 8107144:	0810716b 	.word	0x0810716b
 8107148:	08107189 	.word	0x08107189
 810714c:	08107189 	.word	0x08107189
 8107150:	08107189 	.word	0x08107189
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107158:	3308      	adds	r3, #8
 810715a:	2101      	movs	r1, #1
 810715c:	4618      	mov	r0, r3
 810715e:	f001 fe43 	bl	8108de8 <RCCEx_PLL2_Config>
 8107162:	4603      	mov	r3, r0
 8107164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107168:	e00f      	b.n	810718a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810716e:	3328      	adds	r3, #40	@ 0x28
 8107170:	2101      	movs	r1, #1
 8107172:	4618      	mov	r0, r3
 8107174:	f001 feea 	bl	8108f4c <RCCEx_PLL3_Config>
 8107178:	4603      	mov	r3, r0
 810717a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810717e:	e004      	b.n	810718a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107180:	2301      	movs	r3, #1
 8107182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107186:	e000      	b.n	810718a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107188:	bf00      	nop
    }

    if (ret == HAL_OK)
 810718a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810718e:	2b00      	cmp	r3, #0
 8107190:	d10a      	bne.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107192:	4b96      	ldr	r3, [pc, #600]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107196:	f023 0107 	bic.w	r1, r3, #7
 810719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810719e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81071a0:	4a92      	ldr	r2, [pc, #584]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81071a2:	430b      	orrs	r3, r1
 81071a4:	6553      	str	r3, [r2, #84]	@ 0x54
 81071a6:	e003      	b.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071b8:	f002 0304 	and.w	r3, r2, #4
 81071bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81071c0:	2300      	movs	r3, #0
 81071c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81071c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81071ca:	460b      	mov	r3, r1
 81071cc:	4313      	orrs	r3, r2
 81071ce:	d044      	beq.n	810725a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81071d8:	2b05      	cmp	r3, #5
 81071da:	d825      	bhi.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81071dc:	a201      	add	r2, pc, #4	@ (adr r2, 81071e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071e2:	bf00      	nop
 81071e4:	08107231 	.word	0x08107231
 81071e8:	081071fd 	.word	0x081071fd
 81071ec:	08107213 	.word	0x08107213
 81071f0:	08107231 	.word	0x08107231
 81071f4:	08107231 	.word	0x08107231
 81071f8:	08107231 	.word	0x08107231
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107200:	3308      	adds	r3, #8
 8107202:	2101      	movs	r1, #1
 8107204:	4618      	mov	r0, r3
 8107206:	f001 fdef 	bl	8108de8 <RCCEx_PLL2_Config>
 810720a:	4603      	mov	r3, r0
 810720c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107210:	e00f      	b.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107216:	3328      	adds	r3, #40	@ 0x28
 8107218:	2101      	movs	r1, #1
 810721a:	4618      	mov	r0, r3
 810721c:	f001 fe96 	bl	8108f4c <RCCEx_PLL3_Config>
 8107220:	4603      	mov	r3, r0
 8107222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107226:	e004      	b.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107228:	2301      	movs	r3, #1
 810722a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810722e:	e000      	b.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8107230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107236:	2b00      	cmp	r3, #0
 8107238:	d10b      	bne.n	8107252 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810723a:	4b6c      	ldr	r3, [pc, #432]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810723c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810723e:	f023 0107 	bic.w	r1, r3, #7
 8107242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810724a:	4a68      	ldr	r2, [pc, #416]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810724c:	430b      	orrs	r3, r1
 810724e:	6593      	str	r3, [r2, #88]	@ 0x58
 8107250:	e003      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107262:	f002 0320 	and.w	r3, r2, #32
 8107266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810726a:	2300      	movs	r3, #0
 810726c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107274:	460b      	mov	r3, r1
 8107276:	4313      	orrs	r3, r2
 8107278:	d055      	beq.n	8107326 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107286:	d033      	beq.n	81072f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810728c:	d82c      	bhi.n	81072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810728e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107292:	d02f      	beq.n	81072f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107298:	d826      	bhi.n	81072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810729a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810729e:	d02b      	beq.n	81072f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81072a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81072a4:	d820      	bhi.n	81072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81072a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072aa:	d012      	beq.n	81072d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81072ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072b0:	d81a      	bhi.n	81072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81072b2:	2b00      	cmp	r3, #0
 81072b4:	d022      	beq.n	81072fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81072b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81072ba:	d115      	bne.n	81072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072c0:	3308      	adds	r3, #8
 81072c2:	2100      	movs	r1, #0
 81072c4:	4618      	mov	r0, r3
 81072c6:	f001 fd8f 	bl	8108de8 <RCCEx_PLL2_Config>
 81072ca:	4603      	mov	r3, r0
 81072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81072d0:	e015      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072d6:	3328      	adds	r3, #40	@ 0x28
 81072d8:	2102      	movs	r1, #2
 81072da:	4618      	mov	r0, r3
 81072dc:	f001 fe36 	bl	8108f4c <RCCEx_PLL3_Config>
 81072e0:	4603      	mov	r3, r0
 81072e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81072e6:	e00a      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072e8:	2301      	movs	r3, #1
 81072ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81072ee:	e006      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f0:	bf00      	nop
 81072f2:	e004      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f4:	bf00      	nop
 81072f6:	e002      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f8:	bf00      	nop
 81072fa:	e000      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107302:	2b00      	cmp	r3, #0
 8107304:	d10b      	bne.n	810731e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107306:	4b39      	ldr	r3, [pc, #228]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810730a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107316:	4a35      	ldr	r2, [pc, #212]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107318:	430b      	orrs	r3, r1
 810731a:	6553      	str	r3, [r2, #84]	@ 0x54
 810731c:	e003      	b.n	8107326 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810731e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810732e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8107332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107336:	2300      	movs	r3, #0
 8107338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810733c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8107340:	460b      	mov	r3, r1
 8107342:	4313      	orrs	r3, r2
 8107344:	d058      	beq.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810734a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810734e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107352:	d033      	beq.n	81073bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107354:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107358:	d82c      	bhi.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810735a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810735e:	d02f      	beq.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107364:	d826      	bhi.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107366:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810736a:	d02b      	beq.n	81073c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810736c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107370:	d820      	bhi.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107376:	d012      	beq.n	810739e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810737c:	d81a      	bhi.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810737e:	2b00      	cmp	r3, #0
 8107380:	d022      	beq.n	81073c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8107382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107386:	d115      	bne.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810738c:	3308      	adds	r3, #8
 810738e:	2100      	movs	r1, #0
 8107390:	4618      	mov	r0, r3
 8107392:	f001 fd29 	bl	8108de8 <RCCEx_PLL2_Config>
 8107396:	4603      	mov	r3, r0
 8107398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810739c:	e015      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073a2:	3328      	adds	r3, #40	@ 0x28
 81073a4:	2102      	movs	r1, #2
 81073a6:	4618      	mov	r0, r3
 81073a8:	f001 fdd0 	bl	8108f4c <RCCEx_PLL3_Config>
 81073ac:	4603      	mov	r3, r0
 81073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81073b2:	e00a      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81073b4:	2301      	movs	r3, #1
 81073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81073ba:	e006      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073bc:	bf00      	nop
 81073be:	e004      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073c0:	bf00      	nop
 81073c2:	e002      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073c4:	bf00      	nop
 81073c6:	e000      	b.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073ce:	2b00      	cmp	r3, #0
 81073d0:	d10e      	bne.n	81073f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81073d2:	4b06      	ldr	r3, [pc, #24]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81073d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81073d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81073e2:	4a02      	ldr	r2, [pc, #8]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81073e4:	430b      	orrs	r3, r1
 81073e6:	6593      	str	r3, [r2, #88]	@ 0x58
 81073e8:	e006      	b.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81073ea:	bf00      	nop
 81073ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107400:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107408:	2300      	movs	r3, #0
 810740a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810740e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107412:	460b      	mov	r3, r1
 8107414:	4313      	orrs	r3, r2
 8107416:	d055      	beq.n	81074c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810741c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107420:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107424:	d033      	beq.n	810748e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107426:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810742a:	d82c      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810742c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107430:	d02f      	beq.n	8107492 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8107432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107436:	d826      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107438:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810743c:	d02b      	beq.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810743e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107442:	d820      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107448:	d012      	beq.n	8107470 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810744a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810744e:	d81a      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107450:	2b00      	cmp	r3, #0
 8107452:	d022      	beq.n	810749a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107458:	d115      	bne.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810745e:	3308      	adds	r3, #8
 8107460:	2100      	movs	r1, #0
 8107462:	4618      	mov	r0, r3
 8107464:	f001 fcc0 	bl	8108de8 <RCCEx_PLL2_Config>
 8107468:	4603      	mov	r3, r0
 810746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810746e:	e015      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107474:	3328      	adds	r3, #40	@ 0x28
 8107476:	2102      	movs	r1, #2
 8107478:	4618      	mov	r0, r3
 810747a:	f001 fd67 	bl	8108f4c <RCCEx_PLL3_Config>
 810747e:	4603      	mov	r3, r0
 8107480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107484:	e00a      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107486:	2301      	movs	r3, #1
 8107488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810748c:	e006      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810748e:	bf00      	nop
 8107490:	e004      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107492:	bf00      	nop
 8107494:	e002      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107496:	bf00      	nop
 8107498:	e000      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810749a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810749c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d10b      	bne.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81074a4:	4ba1      	ldr	r3, [pc, #644]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81074b4:	4a9d      	ldr	r2, [pc, #628]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074b6:	430b      	orrs	r3, r1
 81074b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81074ba:	e003      	b.n	81074c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074cc:	f002 0308 	and.w	r3, r2, #8
 81074d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81074d4:	2300      	movs	r3, #0
 81074d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81074da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81074de:	460b      	mov	r3, r1
 81074e0:	4313      	orrs	r3, r2
 81074e2:	d01e      	beq.n	8107522 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81074ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81074f0:	d10c      	bne.n	810750c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074f6:	3328      	adds	r3, #40	@ 0x28
 81074f8:	2102      	movs	r1, #2
 81074fa:	4618      	mov	r0, r3
 81074fc:	f001 fd26 	bl	8108f4c <RCCEx_PLL3_Config>
 8107500:	4603      	mov	r3, r0
 8107502:	2b00      	cmp	r3, #0
 8107504:	d002      	beq.n	810750c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107506:	2301      	movs	r3, #1
 8107508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810750c:	4b87      	ldr	r3, [pc, #540]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810750e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107510:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810751c:	4a83      	ldr	r2, [pc, #524]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810751e:	430b      	orrs	r3, r1
 8107520:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107526:	e9d3 2300 	ldrd	r2, r3, [r3]
 810752a:	f002 0310 	and.w	r3, r2, #16
 810752e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107532:	2300      	movs	r3, #0
 8107534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107538:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810753c:	460b      	mov	r3, r1
 810753e:	4313      	orrs	r3, r2
 8107540:	d01e      	beq.n	8107580 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810754a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810754e:	d10c      	bne.n	810756a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107554:	3328      	adds	r3, #40	@ 0x28
 8107556:	2102      	movs	r1, #2
 8107558:	4618      	mov	r0, r3
 810755a:	f001 fcf7 	bl	8108f4c <RCCEx_PLL3_Config>
 810755e:	4603      	mov	r3, r0
 8107560:	2b00      	cmp	r3, #0
 8107562:	d002      	beq.n	810756a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107564:	2301      	movs	r3, #1
 8107566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810756a:	4b70      	ldr	r3, [pc, #448]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810756c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810756e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810757a:	4a6c      	ldr	r2, [pc, #432]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810757c:	430b      	orrs	r3, r1
 810757e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107588:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810758c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107590:	2300      	movs	r3, #0
 8107592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107596:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810759a:	460b      	mov	r3, r1
 810759c:	4313      	orrs	r3, r2
 810759e:	d03e      	beq.n	810761e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81075a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81075ac:	d022      	beq.n	81075f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81075ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81075b2:	d81b      	bhi.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81075b4:	2b00      	cmp	r3, #0
 81075b6:	d003      	beq.n	81075c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81075b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81075bc:	d00b      	beq.n	81075d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81075be:	e015      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075c4:	3308      	adds	r3, #8
 81075c6:	2100      	movs	r1, #0
 81075c8:	4618      	mov	r0, r3
 81075ca:	f001 fc0d 	bl	8108de8 <RCCEx_PLL2_Config>
 81075ce:	4603      	mov	r3, r0
 81075d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81075d4:	e00f      	b.n	81075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075da:	3328      	adds	r3, #40	@ 0x28
 81075dc:	2102      	movs	r1, #2
 81075de:	4618      	mov	r0, r3
 81075e0:	f001 fcb4 	bl	8108f4c <RCCEx_PLL3_Config>
 81075e4:	4603      	mov	r3, r0
 81075e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81075ea:	e004      	b.n	81075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81075ec:	2301      	movs	r3, #1
 81075ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075f2:	e000      	b.n	81075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075fa:	2b00      	cmp	r3, #0
 81075fc:	d10b      	bne.n	8107616 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81075fe:	4b4b      	ldr	r3, [pc, #300]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107602:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810760a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810760e:	4a47      	ldr	r2, [pc, #284]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107610:	430b      	orrs	r3, r1
 8107612:	6593      	str	r3, [r2, #88]	@ 0x58
 8107614:	e003      	b.n	810761e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810761a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107626:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810762a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810762c:	2300      	movs	r3, #0
 810762e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107630:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107634:	460b      	mov	r3, r1
 8107636:	4313      	orrs	r3, r2
 8107638:	d03b      	beq.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107642:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107646:	d01f      	beq.n	8107688 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107648:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810764c:	d818      	bhi.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810764e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107652:	d003      	beq.n	810765c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107654:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107658:	d007      	beq.n	810766a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810765a:	e011      	b.n	8107680 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810765c:	4b33      	ldr	r3, [pc, #204]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107660:	4a32      	ldr	r2, [pc, #200]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107668:	e00f      	b.n	810768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810766e:	3328      	adds	r3, #40	@ 0x28
 8107670:	2101      	movs	r1, #1
 8107672:	4618      	mov	r0, r3
 8107674:	f001 fc6a 	bl	8108f4c <RCCEx_PLL3_Config>
 8107678:	4603      	mov	r3, r0
 810767a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810767e:	e004      	b.n	810768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107680:	2301      	movs	r3, #1
 8107682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107686:	e000      	b.n	810768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107688:	bf00      	nop
    }

    if (ret == HAL_OK)
 810768a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810768e:	2b00      	cmp	r3, #0
 8107690:	d10b      	bne.n	81076aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107692:	4b26      	ldr	r3, [pc, #152]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107696:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81076a2:	4a22      	ldr	r2, [pc, #136]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076a4:	430b      	orrs	r3, r1
 81076a6:	6553      	str	r3, [r2, #84]	@ 0x54
 81076a8:	e003      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81076be:	673b      	str	r3, [r7, #112]	@ 0x70
 81076c0:	2300      	movs	r3, #0
 81076c2:	677b      	str	r3, [r7, #116]	@ 0x74
 81076c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81076c8:	460b      	mov	r3, r1
 81076ca:	4313      	orrs	r3, r2
 81076cc:	d034      	beq.n	8107738 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d003      	beq.n	81076e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81076d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81076dc:	d007      	beq.n	81076ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81076de:	e011      	b.n	8107704 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81076e0:	4b12      	ldr	r3, [pc, #72]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076e4:	4a11      	ldr	r2, [pc, #68]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81076ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81076ec:	e00e      	b.n	810770c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076f2:	3308      	adds	r3, #8
 81076f4:	2102      	movs	r1, #2
 81076f6:	4618      	mov	r0, r3
 81076f8:	f001 fb76 	bl	8108de8 <RCCEx_PLL2_Config>
 81076fc:	4603      	mov	r3, r0
 81076fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107702:	e003      	b.n	810770c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107704:	2301      	movs	r3, #1
 8107706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810770a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810770c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107710:	2b00      	cmp	r3, #0
 8107712:	d10d      	bne.n	8107730 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107714:	4b05      	ldr	r3, [pc, #20]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107718:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107722:	4a02      	ldr	r2, [pc, #8]	@ (810772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107724:	430b      	orrs	r3, r1
 8107726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107728:	e006      	b.n	8107738 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810772a:	bf00      	nop
 810772c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107740:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107746:	2300      	movs	r3, #0
 8107748:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810774a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810774e:	460b      	mov	r3, r1
 8107750:	4313      	orrs	r3, r2
 8107752:	d00c      	beq.n	810776e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107758:	3328      	adds	r3, #40	@ 0x28
 810775a:	2102      	movs	r1, #2
 810775c:	4618      	mov	r0, r3
 810775e:	f001 fbf5 	bl	8108f4c <RCCEx_PLL3_Config>
 8107762:	4603      	mov	r3, r0
 8107764:	2b00      	cmp	r3, #0
 8107766:	d002      	beq.n	810776e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107768:	2301      	movs	r3, #1
 810776a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107776:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810777a:	663b      	str	r3, [r7, #96]	@ 0x60
 810777c:	2300      	movs	r3, #0
 810777e:	667b      	str	r3, [r7, #100]	@ 0x64
 8107780:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107784:	460b      	mov	r3, r1
 8107786:	4313      	orrs	r3, r2
 8107788:	d038      	beq.n	81077fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107796:	d018      	beq.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810779c:	d811      	bhi.n	81077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810779e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81077a2:	d014      	beq.n	81077ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81077a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81077a8:	d80b      	bhi.n	81077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81077aa:	2b00      	cmp	r3, #0
 81077ac:	d011      	beq.n	81077d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81077ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077b2:	d106      	bne.n	81077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81077b4:	4bc3      	ldr	r3, [pc, #780]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077b8:	4ac2      	ldr	r2, [pc, #776]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81077be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81077c0:	e008      	b.n	81077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81077c2:	2301      	movs	r3, #1
 81077c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81077c8:	e004      	b.n	81077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077ca:	bf00      	nop
 81077cc:	e002      	b.n	81077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077ce:	bf00      	nop
 81077d0:	e000      	b.n	81077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81077d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077d8:	2b00      	cmp	r3, #0
 81077da:	d10b      	bne.n	81077f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81077dc:	4bb9      	ldr	r3, [pc, #740]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81077ec:	4ab5      	ldr	r2, [pc, #724]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ee:	430b      	orrs	r3, r1
 81077f0:	6553      	str	r3, [r2, #84]	@ 0x54
 81077f2:	e003      	b.n	81077fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107804:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107808:	65bb      	str	r3, [r7, #88]	@ 0x58
 810780a:	2300      	movs	r3, #0
 810780c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810780e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8107812:	460b      	mov	r3, r1
 8107814:	4313      	orrs	r3, r2
 8107816:	d009      	beq.n	810782c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107818:	4baa      	ldr	r3, [pc, #680]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810781a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810781c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8107826:	4aa7      	ldr	r2, [pc, #668]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107828:	430b      	orrs	r3, r1
 810782a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107834:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107838:	653b      	str	r3, [r7, #80]	@ 0x50
 810783a:	2300      	movs	r3, #0
 810783c:	657b      	str	r3, [r7, #84]	@ 0x54
 810783e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8107842:	460b      	mov	r3, r1
 8107844:	4313      	orrs	r3, r2
 8107846:	d00a      	beq.n	810785e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107848:	4b9e      	ldr	r3, [pc, #632]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810784a:	691b      	ldr	r3, [r3, #16]
 810784c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107858:	4a9a      	ldr	r2, [pc, #616]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810785a:	430b      	orrs	r3, r1
 810785c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107866:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810786a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810786c:	2300      	movs	r3, #0
 810786e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107870:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107874:	460b      	mov	r3, r1
 8107876:	4313      	orrs	r3, r2
 8107878:	d009      	beq.n	810788e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810787a:	4b92      	ldr	r3, [pc, #584]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810787c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810787e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8107882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107888:	4a8e      	ldr	r2, [pc, #568]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810788a:	430b      	orrs	r3, r1
 810788c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107896:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810789a:	643b      	str	r3, [r7, #64]	@ 0x40
 810789c:	2300      	movs	r3, #0
 810789e:	647b      	str	r3, [r7, #68]	@ 0x44
 81078a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81078a4:	460b      	mov	r3, r1
 81078a6:	4313      	orrs	r3, r2
 81078a8:	d00e      	beq.n	81078c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81078aa:	4b86      	ldr	r3, [pc, #536]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078ac:	691b      	ldr	r3, [r3, #16]
 81078ae:	4a85      	ldr	r2, [pc, #532]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81078b4:	6113      	str	r3, [r2, #16]
 81078b6:	4b83      	ldr	r3, [pc, #524]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078b8:	6919      	ldr	r1, [r3, #16]
 81078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81078c2:	4a80      	ldr	r2, [pc, #512]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078c4:	430b      	orrs	r3, r1
 81078c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81078d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 81078d6:	2300      	movs	r3, #0
 81078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81078de:	460b      	mov	r3, r1
 81078e0:	4313      	orrs	r3, r2
 81078e2:	d009      	beq.n	81078f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81078e4:	4b77      	ldr	r3, [pc, #476]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81078e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81078f2:	4a74      	ldr	r2, [pc, #464]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078f4:	430b      	orrs	r3, r1
 81078f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107900:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8107904:	633b      	str	r3, [r7, #48]	@ 0x30
 8107906:	2300      	movs	r3, #0
 8107908:	637b      	str	r3, [r7, #52]	@ 0x34
 810790a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810790e:	460b      	mov	r3, r1
 8107910:	4313      	orrs	r3, r2
 8107912:	d00a      	beq.n	810792a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107914:	4b6b      	ldr	r3, [pc, #428]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107918:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107924:	4a67      	ldr	r2, [pc, #412]	@ (8107ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107926:	430b      	orrs	r3, r1
 8107928:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107932:	2100      	movs	r1, #0
 8107934:	62b9      	str	r1, [r7, #40]	@ 0x28
 8107936:	f003 0301 	and.w	r3, r3, #1
 810793a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810793c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107940:	460b      	mov	r3, r1
 8107942:	4313      	orrs	r3, r2
 8107944:	d011      	beq.n	810796a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810794a:	3308      	adds	r3, #8
 810794c:	2100      	movs	r1, #0
 810794e:	4618      	mov	r0, r3
 8107950:	f001 fa4a 	bl	8108de8 <RCCEx_PLL2_Config>
 8107954:	4603      	mov	r3, r0
 8107956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810795a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810795e:	2b00      	cmp	r3, #0
 8107960:	d003      	beq.n	810796a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107972:	2100      	movs	r1, #0
 8107974:	6239      	str	r1, [r7, #32]
 8107976:	f003 0302 	and.w	r3, r3, #2
 810797a:	627b      	str	r3, [r7, #36]	@ 0x24
 810797c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107980:	460b      	mov	r3, r1
 8107982:	4313      	orrs	r3, r2
 8107984:	d011      	beq.n	81079aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810798a:	3308      	adds	r3, #8
 810798c:	2101      	movs	r1, #1
 810798e:	4618      	mov	r0, r3
 8107990:	f001 fa2a 	bl	8108de8 <RCCEx_PLL2_Config>
 8107994:	4603      	mov	r3, r0
 8107996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810799a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810799e:	2b00      	cmp	r3, #0
 81079a0:	d003      	beq.n	81079aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079b2:	2100      	movs	r1, #0
 81079b4:	61b9      	str	r1, [r7, #24]
 81079b6:	f003 0304 	and.w	r3, r3, #4
 81079ba:	61fb      	str	r3, [r7, #28]
 81079bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81079c0:	460b      	mov	r3, r1
 81079c2:	4313      	orrs	r3, r2
 81079c4:	d011      	beq.n	81079ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ca:	3308      	adds	r3, #8
 81079cc:	2102      	movs	r1, #2
 81079ce:	4618      	mov	r0, r3
 81079d0:	f001 fa0a 	bl	8108de8 <RCCEx_PLL2_Config>
 81079d4:	4603      	mov	r3, r0
 81079d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81079da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079de:	2b00      	cmp	r3, #0
 81079e0:	d003      	beq.n	81079ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079f2:	2100      	movs	r1, #0
 81079f4:	6139      	str	r1, [r7, #16]
 81079f6:	f003 0308 	and.w	r3, r3, #8
 81079fa:	617b      	str	r3, [r7, #20]
 81079fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8107a00:	460b      	mov	r3, r1
 8107a02:	4313      	orrs	r3, r2
 8107a04:	d011      	beq.n	8107a2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a0a:	3328      	adds	r3, #40	@ 0x28
 8107a0c:	2100      	movs	r1, #0
 8107a0e:	4618      	mov	r0, r3
 8107a10:	f001 fa9c 	bl	8108f4c <RCCEx_PLL3_Config>
 8107a14:	4603      	mov	r3, r0
 8107a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8107a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a1e:	2b00      	cmp	r3, #0
 8107a20:	d003      	beq.n	8107a2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a32:	2100      	movs	r1, #0
 8107a34:	60b9      	str	r1, [r7, #8]
 8107a36:	f003 0310 	and.w	r3, r3, #16
 8107a3a:	60fb      	str	r3, [r7, #12]
 8107a3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107a40:	460b      	mov	r3, r1
 8107a42:	4313      	orrs	r3, r2
 8107a44:	d011      	beq.n	8107a6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a4a:	3328      	adds	r3, #40	@ 0x28
 8107a4c:	2101      	movs	r1, #1
 8107a4e:	4618      	mov	r0, r3
 8107a50:	f001 fa7c 	bl	8108f4c <RCCEx_PLL3_Config>
 8107a54:	4603      	mov	r3, r0
 8107a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a5e:	2b00      	cmp	r3, #0
 8107a60:	d003      	beq.n	8107a6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a72:	2100      	movs	r1, #0
 8107a74:	6039      	str	r1, [r7, #0]
 8107a76:	f003 0320 	and.w	r3, r3, #32
 8107a7a:	607b      	str	r3, [r7, #4]
 8107a7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107a80:	460b      	mov	r3, r1
 8107a82:	4313      	orrs	r3, r2
 8107a84:	d011      	beq.n	8107aaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a8a:	3328      	adds	r3, #40	@ 0x28
 8107a8c:	2102      	movs	r1, #2
 8107a8e:	4618      	mov	r0, r3
 8107a90:	f001 fa5c 	bl	8108f4c <RCCEx_PLL3_Config>
 8107a94:	4603      	mov	r3, r0
 8107a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a9e:	2b00      	cmp	r3, #0
 8107aa0:	d003      	beq.n	8107aaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8107aaa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8107aae:	2b00      	cmp	r3, #0
 8107ab0:	d101      	bne.n	8107ab6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8107ab2:	2300      	movs	r3, #0
 8107ab4:	e000      	b.n	8107ab8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107ab6:	2301      	movs	r3, #1
}
 8107ab8:	4618      	mov	r0, r3
 8107aba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8107abe:	46bd      	mov	sp, r7
 8107ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107ac4:	58024400 	.word	0x58024400

08107ac8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107ac8:	b580      	push	{r7, lr}
 8107aca:	b090      	sub	sp, #64	@ 0x40
 8107acc:	af00      	add	r7, sp, #0
 8107ace:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107ad6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8107ada:	430b      	orrs	r3, r1
 8107adc:	f040 8094 	bne.w	8107c08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ae4:	f003 0307 	and.w	r3, r3, #7
 8107ae8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107aec:	2b04      	cmp	r3, #4
 8107aee:	f200 8087 	bhi.w	8107c00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8107af2:	a201      	add	r2, pc, #4	@ (adr r2, 8107af8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8107af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107af8:	08107b0d 	.word	0x08107b0d
 8107afc:	08107b35 	.word	0x08107b35
 8107b00:	08107b5d 	.word	0x08107b5d
 8107b04:	08107bf9 	.word	0x08107bf9
 8107b08:	08107b85 	.word	0x08107b85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107b0c:	4b93      	ldr	r3, [pc, #588]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107b18:	d108      	bne.n	8107b2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107b1e:	4618      	mov	r0, r3
 8107b20:	f001 f810 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b28:	f000 bd45 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b2c:	2300      	movs	r3, #0
 8107b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b30:	f000 bd41 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107b34:	4b89      	ldr	r3, [pc, #548]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b40:	d108      	bne.n	8107b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b42:	f107 0318 	add.w	r3, r7, #24
 8107b46:	4618      	mov	r0, r3
 8107b48:	f000 fd54 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b4c:	69bb      	ldr	r3, [r7, #24]
 8107b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b50:	f000 bd31 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b54:	2300      	movs	r3, #0
 8107b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b58:	f000 bd2d 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b5c:	4b7f      	ldr	r3, [pc, #508]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b68:	d108      	bne.n	8107b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b6a:	f107 030c 	add.w	r3, r7, #12
 8107b6e:	4618      	mov	r0, r3
 8107b70:	f000 fe94 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b74:	68fb      	ldr	r3, [r7, #12]
 8107b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b78:	f000 bd1d 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b7c:	2300      	movs	r3, #0
 8107b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b80:	f000 bd19 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107b84:	4b75      	ldr	r3, [pc, #468]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107b88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107b8c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107b8e:	4b73      	ldr	r3, [pc, #460]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	f003 0304 	and.w	r3, r3, #4
 8107b96:	2b04      	cmp	r3, #4
 8107b98:	d10c      	bne.n	8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8107b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b9c:	2b00      	cmp	r3, #0
 8107b9e:	d109      	bne.n	8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ba0:	4b6e      	ldr	r3, [pc, #440]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	08db      	lsrs	r3, r3, #3
 8107ba6:	f003 0303 	and.w	r3, r3, #3
 8107baa:	4a6d      	ldr	r2, [pc, #436]	@ (8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107bac:	fa22 f303 	lsr.w	r3, r2, r3
 8107bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bb2:	e01f      	b.n	8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107bb4:	4b69      	ldr	r3, [pc, #420]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bb6:	681b      	ldr	r3, [r3, #0]
 8107bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107bc0:	d106      	bne.n	8107bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107bc8:	d102      	bne.n	8107bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107bca:	4b66      	ldr	r3, [pc, #408]	@ (8107d64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bce:	e011      	b.n	8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107bd0:	4b62      	ldr	r3, [pc, #392]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107bdc:	d106      	bne.n	8107bec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8107bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107be4:	d102      	bne.n	8107bec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107be6:	4b60      	ldr	r3, [pc, #384]	@ (8107d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bea:	e003      	b.n	8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107bec:	2300      	movs	r3, #0
 8107bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107bf0:	f000 bce1 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107bf4:	f000 bcdf 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8107d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bfc:	f000 bcdb 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107c00:	2300      	movs	r3, #0
 8107c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c04:	f000 bcd7 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107c0c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107c10:	430b      	orrs	r3, r1
 8107c12:	f040 80ad 	bne.w	8107d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8107c16:	4b51      	ldr	r3, [pc, #324]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107c1a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8107c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c26:	d056      	beq.n	8107cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c2e:	f200 8090 	bhi.w	8107d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c34:	2bc0      	cmp	r3, #192	@ 0xc0
 8107c36:	f000 8088 	beq.w	8107d4a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8107c3e:	f200 8088 	bhi.w	8107d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c44:	2b80      	cmp	r3, #128	@ 0x80
 8107c46:	d032      	beq.n	8107cae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c4a:	2b80      	cmp	r3, #128	@ 0x80
 8107c4c:	f200 8081 	bhi.w	8107d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c52:	2b00      	cmp	r3, #0
 8107c54:	d003      	beq.n	8107c5e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c58:	2b40      	cmp	r3, #64	@ 0x40
 8107c5a:	d014      	beq.n	8107c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107c5c:	e079      	b.n	8107d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c6a:	d108      	bne.n	8107c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c70:	4618      	mov	r0, r3
 8107c72:	f000 ff67 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c7a:	f000 bc9c 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c7e:	2300      	movs	r3, #0
 8107c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c82:	f000 bc98 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c86:	4b35      	ldr	r3, [pc, #212]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c88:	681b      	ldr	r3, [r3, #0]
 8107c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c92:	d108      	bne.n	8107ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c94:	f107 0318 	add.w	r3, r7, #24
 8107c98:	4618      	mov	r0, r3
 8107c9a:	f000 fcab 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c9e:	69bb      	ldr	r3, [r7, #24]
 8107ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ca2:	f000 bc88 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ca6:	2300      	movs	r3, #0
 8107ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107caa:	f000 bc84 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107cae:	4b2b      	ldr	r3, [pc, #172]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107cba:	d108      	bne.n	8107cce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cbc:	f107 030c 	add.w	r3, r7, #12
 8107cc0:	4618      	mov	r0, r3
 8107cc2:	f000 fdeb 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107cc6:	68fb      	ldr	r3, [r7, #12]
 8107cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cca:	f000 bc74 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cce:	2300      	movs	r3, #0
 8107cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cd2:	f000 bc70 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107cd6:	4b21      	ldr	r3, [pc, #132]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107cda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107cde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ce2:	681b      	ldr	r3, [r3, #0]
 8107ce4:	f003 0304 	and.w	r3, r3, #4
 8107ce8:	2b04      	cmp	r3, #4
 8107cea:	d10c      	bne.n	8107d06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107cee:	2b00      	cmp	r3, #0
 8107cf0:	d109      	bne.n	8107d06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	08db      	lsrs	r3, r3, #3
 8107cf8:	f003 0303 	and.w	r3, r3, #3
 8107cfc:	4a18      	ldr	r2, [pc, #96]	@ (8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8107d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d04:	e01f      	b.n	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107d06:	4b15      	ldr	r3, [pc, #84]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107d12:	d106      	bne.n	8107d22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107d1a:	d102      	bne.n	8107d22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107d1c:	4b11      	ldr	r3, [pc, #68]	@ (8107d64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d20:	e011      	b.n	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107d22:	4b0e      	ldr	r3, [pc, #56]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d24:	681b      	ldr	r3, [r3, #0]
 8107d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d2e:	d106      	bne.n	8107d3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d36:	d102      	bne.n	8107d3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107d38:	4b0b      	ldr	r3, [pc, #44]	@ (8107d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d3c:	e003      	b.n	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107d3e:	2300      	movs	r3, #0
 8107d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107d42:	f000 bc38 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d46:	f000 bc36 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107d4a:	4b08      	ldr	r3, [pc, #32]	@ (8107d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d4e:	f000 bc32 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107d52:	2300      	movs	r3, #0
 8107d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d56:	f000 bc2e 	b.w	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d5a:	bf00      	nop
 8107d5c:	58024400 	.word	0x58024400
 8107d60:	03d09000 	.word	0x03d09000
 8107d64:	003d0900 	.word	0x003d0900
 8107d68:	017d7840 	.word	0x017d7840
 8107d6c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d74:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107d78:	430b      	orrs	r3, r1
 8107d7a:	f040 809c 	bne.w	8107eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107d7e:	4b9e      	ldr	r3, [pc, #632]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d82:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107d86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107d8e:	d054      	beq.n	8107e3a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107d96:	f200 808b 	bhi.w	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107da0:	f000 8083 	beq.w	8107eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107da6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107daa:	f200 8081 	bhi.w	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107db4:	d02f      	beq.n	8107e16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107dbc:	d878      	bhi.n	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dc0:	2b00      	cmp	r3, #0
 8107dc2:	d004      	beq.n	8107dce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107dca:	d012      	beq.n	8107df2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107dcc:	e070      	b.n	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107dce:	4b8a      	ldr	r3, [pc, #552]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107dd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107dda:	d107      	bne.n	8107dec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107de0:	4618      	mov	r0, r3
 8107de2:	f000 feaf 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107dea:	e3e4      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dec:	2300      	movs	r3, #0
 8107dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107df0:	e3e1      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107df2:	4b81      	ldr	r3, [pc, #516]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107dfe:	d107      	bne.n	8107e10 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e00:	f107 0318 	add.w	r3, r7, #24
 8107e04:	4618      	mov	r0, r3
 8107e06:	f000 fbf5 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107e0a:	69bb      	ldr	r3, [r7, #24]
 8107e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e0e:	e3d2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e10:	2300      	movs	r3, #0
 8107e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e14:	e3cf      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107e16:	4b78      	ldr	r3, [pc, #480]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e18:	681b      	ldr	r3, [r3, #0]
 8107e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e22:	d107      	bne.n	8107e34 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e24:	f107 030c 	add.w	r3, r7, #12
 8107e28:	4618      	mov	r0, r3
 8107e2a:	f000 fd37 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e32:	e3c0      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e34:	2300      	movs	r3, #0
 8107e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e38:	e3bd      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107e42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e44:	4b6c      	ldr	r3, [pc, #432]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	f003 0304 	and.w	r3, r3, #4
 8107e4c:	2b04      	cmp	r3, #4
 8107e4e:	d10c      	bne.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e52:	2b00      	cmp	r3, #0
 8107e54:	d109      	bne.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e56:	4b68      	ldr	r3, [pc, #416]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	08db      	lsrs	r3, r3, #3
 8107e5c:	f003 0303 	and.w	r3, r3, #3
 8107e60:	4a66      	ldr	r2, [pc, #408]	@ (8107ffc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107e62:	fa22 f303 	lsr.w	r3, r2, r3
 8107e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e68:	e01e      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e6a:	4b63      	ldr	r3, [pc, #396]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e76:	d106      	bne.n	8107e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107e7e:	d102      	bne.n	8107e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e80:	4b5f      	ldr	r3, [pc, #380]	@ (8108000 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e84:	e010      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e86:	4b5c      	ldr	r3, [pc, #368]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e92:	d106      	bne.n	8107ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e9a:	d102      	bne.n	8107ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107e9c:	4b59      	ldr	r3, [pc, #356]	@ (8108004 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ea0:	e002      	b.n	8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107ea2:	2300      	movs	r3, #0
 8107ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107ea6:	e386      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ea8:	e385      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107eaa:	4b57      	ldr	r3, [pc, #348]	@ (8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107eae:	e382      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107eb0:	2300      	movs	r3, #0
 8107eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107eb4:	e37f      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107eba:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8107ebe:	430b      	orrs	r3, r1
 8107ec0:	f040 80a7 	bne.w	8108012 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ec8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107ecc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ed0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107ed4:	d055      	beq.n	8107f82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ed8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107edc:	f200 8096 	bhi.w	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ee2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107ee6:	f000 8084 	beq.w	8107ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107eec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107ef0:	f200 808c 	bhi.w	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107efa:	d030      	beq.n	8107f5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107f02:	f200 8083 	bhi.w	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f08:	2b00      	cmp	r3, #0
 8107f0a:	d004      	beq.n	8107f16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107f12:	d012      	beq.n	8107f3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107f14:	e07a      	b.n	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107f16:	4b38      	ldr	r3, [pc, #224]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f18:	681b      	ldr	r3, [r3, #0]
 8107f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107f22:	d107      	bne.n	8107f34 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107f28:	4618      	mov	r0, r3
 8107f2a:	f000 fe0b 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f32:	e340      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f34:	2300      	movs	r3, #0
 8107f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f38:	e33d      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f3c:	681b      	ldr	r3, [r3, #0]
 8107f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107f46:	d107      	bne.n	8107f58 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f48:	f107 0318 	add.w	r3, r7, #24
 8107f4c:	4618      	mov	r0, r3
 8107f4e:	f000 fb51 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107f52:	69bb      	ldr	r3, [r7, #24]
 8107f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f56:	e32e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f58:	2300      	movs	r3, #0
 8107f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f5c:	e32b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107f5e:	4b26      	ldr	r3, [pc, #152]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f6a:	d107      	bne.n	8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f6c:	f107 030c 	add.w	r3, r7, #12
 8107f70:	4618      	mov	r0, r3
 8107f72:	f000 fc93 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107f76:	68fb      	ldr	r3, [r7, #12]
 8107f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f7a:	e31c      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f7c:	2300      	movs	r3, #0
 8107f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f80:	e319      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107f82:	4b1d      	ldr	r3, [pc, #116]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107f8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f8e:	681b      	ldr	r3, [r3, #0]
 8107f90:	f003 0304 	and.w	r3, r3, #4
 8107f94:	2b04      	cmp	r3, #4
 8107f96:	d10c      	bne.n	8107fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107f9a:	2b00      	cmp	r3, #0
 8107f9c:	d109      	bne.n	8107fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f9e:	4b16      	ldr	r3, [pc, #88]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	08db      	lsrs	r3, r3, #3
 8107fa4:	f003 0303 	and.w	r3, r3, #3
 8107fa8:	4a14      	ldr	r2, [pc, #80]	@ (8107ffc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107faa:	fa22 f303 	lsr.w	r3, r2, r3
 8107fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fb0:	e01e      	b.n	8107ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107fb2:	4b11      	ldr	r3, [pc, #68]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107fbe:	d106      	bne.n	8107fce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107fc6:	d102      	bne.n	8107fce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8108000 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fcc:	e010      	b.n	8107ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107fce:	4b0a      	ldr	r3, [pc, #40]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107fda:	d106      	bne.n	8107fea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107fe2:	d102      	bne.n	8107fea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107fe4:	4b07      	ldr	r3, [pc, #28]	@ (8108004 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fe8:	e002      	b.n	8107ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107fea:	2300      	movs	r3, #0
 8107fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107fee:	e2e2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ff0:	e2e1      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107ff2:	4b05      	ldr	r3, [pc, #20]	@ (8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ff6:	e2de      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ff8:	58024400 	.word	0x58024400
 8107ffc:	03d09000 	.word	0x03d09000
 8108000:	003d0900 	.word	0x003d0900
 8108004:	017d7840 	.word	0x017d7840
 8108008:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810800c:	2300      	movs	r3, #0
 810800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108010:	e2d1      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8108012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108016:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810801a:	430b      	orrs	r3, r1
 810801c:	f040 809c 	bne.w	8108158 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8108020:	4b93      	ldr	r3, [pc, #588]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108024:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8108028:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810802a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810802c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108030:	d054      	beq.n	81080dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8108032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108038:	f200 808b 	bhi.w	8108152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810803e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108042:	f000 8083 	beq.w	810814c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8108046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108048:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810804c:	f200 8081 	bhi.w	8108152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108056:	d02f      	beq.n	81080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8108058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810805a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810805e:	d878      	bhi.n	8108152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108062:	2b00      	cmp	r3, #0
 8108064:	d004      	beq.n	8108070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8108066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810806c:	d012      	beq.n	8108094 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810806e:	e070      	b.n	8108152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108070:	4b7f      	ldr	r3, [pc, #508]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810807c:	d107      	bne.n	810808e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810807e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108082:	4618      	mov	r0, r3
 8108084:	f000 fd5e 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810808c:	e293      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810808e:	2300      	movs	r3, #0
 8108090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108092:	e290      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108094:	4b76      	ldr	r3, [pc, #472]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108096:	681b      	ldr	r3, [r3, #0]
 8108098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810809c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81080a0:	d107      	bne.n	81080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81080a2:	f107 0318 	add.w	r3, r7, #24
 81080a6:	4618      	mov	r0, r3
 81080a8:	f000 faa4 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81080ac:	69bb      	ldr	r3, [r7, #24]
 81080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080b0:	e281      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080b2:	2300      	movs	r3, #0
 81080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080b6:	e27e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81080b8:	4b6d      	ldr	r3, [pc, #436]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81080c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81080c4:	d107      	bne.n	81080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81080c6:	f107 030c 	add.w	r3, r7, #12
 81080ca:	4618      	mov	r0, r3
 81080cc:	f000 fbe6 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81080d0:	68fb      	ldr	r3, [r7, #12]
 81080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080d4:	e26f      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080d6:	2300      	movs	r3, #0
 81080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080da:	e26c      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81080dc:	4b64      	ldr	r3, [pc, #400]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81080e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81080e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81080e6:	4b62      	ldr	r3, [pc, #392]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080e8:	681b      	ldr	r3, [r3, #0]
 81080ea:	f003 0304 	and.w	r3, r3, #4
 81080ee:	2b04      	cmp	r3, #4
 81080f0:	d10c      	bne.n	810810c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81080f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81080f4:	2b00      	cmp	r3, #0
 81080f6:	d109      	bne.n	810810c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81080f8:	4b5d      	ldr	r3, [pc, #372]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	08db      	lsrs	r3, r3, #3
 81080fe:	f003 0303 	and.w	r3, r3, #3
 8108102:	4a5c      	ldr	r2, [pc, #368]	@ (8108274 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108104:	fa22 f303 	lsr.w	r3, r2, r3
 8108108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810810a:	e01e      	b.n	810814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810810c:	4b58      	ldr	r3, [pc, #352]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810810e:	681b      	ldr	r3, [r3, #0]
 8108110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108118:	d106      	bne.n	8108128 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810811a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810811c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108120:	d102      	bne.n	8108128 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108122:	4b55      	ldr	r3, [pc, #340]	@ (8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108126:	e010      	b.n	810814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108128:	4b51      	ldr	r3, [pc, #324]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108134:	d106      	bne.n	8108144 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8108136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810813c:	d102      	bne.n	8108144 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810813e:	4b4f      	ldr	r3, [pc, #316]	@ (810827c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108142:	e002      	b.n	810814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108144:	2300      	movs	r3, #0
 8108146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108148:	e235      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810814a:	e234      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810814c:	4b4c      	ldr	r3, [pc, #304]	@ (8108280 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108150:	e231      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108152:	2300      	movs	r3, #0
 8108154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108156:	e22e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8108158:	e9d7 2300 	ldrd	r2, r3, [r7]
 810815c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8108160:	430b      	orrs	r3, r1
 8108162:	f040 808f 	bne.w	8108284 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8108166:	4b42      	ldr	r3, [pc, #264]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810816a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810816e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8108170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108172:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108176:	d06b      	beq.n	8108250 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8108178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810817a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810817e:	d874      	bhi.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108182:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108186:	d056      	beq.n	8108236 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8108188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810818a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810818e:	d86c      	bhi.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108192:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108196:	d03b      	beq.n	8108210 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8108198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810819a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810819e:	d864      	bhi.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81081a6:	d021      	beq.n	81081ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81081ae:	d85c      	bhi.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081b2:	2b00      	cmp	r3, #0
 81081b4:	d004      	beq.n	81081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81081bc:	d004      	beq.n	81081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81081be:	e054      	b.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81081c0:	f7fe fa0a 	bl	81065d8 <HAL_RCC_GetPCLK1Freq>
 81081c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81081c6:	e1f6      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81081c8:	4b29      	ldr	r3, [pc, #164]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81081d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81081d4:	d107      	bne.n	81081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081d6:	f107 0318 	add.w	r3, r7, #24
 81081da:	4618      	mov	r0, r3
 81081dc:	f000 fa0a 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81081e0:	69fb      	ldr	r3, [r7, #28]
 81081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081e4:	e1e7      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081e6:	2300      	movs	r3, #0
 81081e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081ea:	e1e4      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81081ec:	4b20      	ldr	r3, [pc, #128]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81081f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81081f8:	d107      	bne.n	810820a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081fa:	f107 030c 	add.w	r3, r7, #12
 81081fe:	4618      	mov	r0, r3
 8108200:	f000 fb4c 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108204:	693b      	ldr	r3, [r7, #16]
 8108206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108208:	e1d5      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810820a:	2300      	movs	r3, #0
 810820c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810820e:	e1d2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108210:	4b17      	ldr	r3, [pc, #92]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	f003 0304 	and.w	r3, r3, #4
 8108218:	2b04      	cmp	r3, #4
 810821a:	d109      	bne.n	8108230 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810821c:	4b14      	ldr	r3, [pc, #80]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810821e:	681b      	ldr	r3, [r3, #0]
 8108220:	08db      	lsrs	r3, r3, #3
 8108222:	f003 0303 	and.w	r3, r3, #3
 8108226:	4a13      	ldr	r2, [pc, #76]	@ (8108274 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108228:	fa22 f303 	lsr.w	r3, r2, r3
 810822c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810822e:	e1c2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108230:	2300      	movs	r3, #0
 8108232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108234:	e1bf      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108236:	4b0e      	ldr	r3, [pc, #56]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810823e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108242:	d102      	bne.n	810824a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8108244:	4b0c      	ldr	r3, [pc, #48]	@ (8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108248:	e1b5      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810824a:	2300      	movs	r3, #0
 810824c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810824e:	e1b2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108250:	4b07      	ldr	r3, [pc, #28]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810825c:	d102      	bne.n	8108264 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810825e:	4b07      	ldr	r3, [pc, #28]	@ (810827c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108262:	e1a8      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108264:	2300      	movs	r3, #0
 8108266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108268:	e1a5      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810826a:	2300      	movs	r3, #0
 810826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810826e:	e1a2      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108270:	58024400 	.word	0x58024400
 8108274:	03d09000 	.word	0x03d09000
 8108278:	003d0900 	.word	0x003d0900
 810827c:	017d7840 	.word	0x017d7840
 8108280:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8108284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108288:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810828c:	430b      	orrs	r3, r1
 810828e:	d173      	bne.n	8108378 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8108290:	4b9c      	ldr	r3, [pc, #624]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108298:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810829c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81082a0:	d02f      	beq.n	8108302 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81082a8:	d863      	bhi.n	8108372 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082ac:	2b00      	cmp	r3, #0
 81082ae:	d004      	beq.n	81082ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81082b6:	d012      	beq.n	81082de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81082b8:	e05b      	b.n	8108372 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81082ba:	4b92      	ldr	r3, [pc, #584]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81082bc:	681b      	ldr	r3, [r3, #0]
 81082be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81082c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81082c6:	d107      	bne.n	81082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082c8:	f107 0318 	add.w	r3, r7, #24
 81082cc:	4618      	mov	r0, r3
 81082ce:	f000 f991 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81082d2:	69bb      	ldr	r3, [r7, #24]
 81082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082d6:	e16e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082d8:	2300      	movs	r3, #0
 81082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082dc:	e16b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81082de:	4b89      	ldr	r3, [pc, #548]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81082e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81082ea:	d107      	bne.n	81082fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81082ec:	f107 030c 	add.w	r3, r7, #12
 81082f0:	4618      	mov	r0, r3
 81082f2:	f000 fad3 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81082f6:	697b      	ldr	r3, [r7, #20]
 81082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082fa:	e15c      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082fc:	2300      	movs	r3, #0
 81082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108300:	e159      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108302:	4b80      	ldr	r3, [pc, #512]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108306:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810830a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810830c:	4b7d      	ldr	r3, [pc, #500]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	f003 0304 	and.w	r3, r3, #4
 8108314:	2b04      	cmp	r3, #4
 8108316:	d10c      	bne.n	8108332 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8108318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810831a:	2b00      	cmp	r3, #0
 810831c:	d109      	bne.n	8108332 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810831e:	4b79      	ldr	r3, [pc, #484]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108320:	681b      	ldr	r3, [r3, #0]
 8108322:	08db      	lsrs	r3, r3, #3
 8108324:	f003 0303 	and.w	r3, r3, #3
 8108328:	4a77      	ldr	r2, [pc, #476]	@ (8108508 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810832a:	fa22 f303 	lsr.w	r3, r2, r3
 810832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108330:	e01e      	b.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108332:	4b74      	ldr	r3, [pc, #464]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108334:	681b      	ldr	r3, [r3, #0]
 8108336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810833a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810833e:	d106      	bne.n	810834e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8108340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108346:	d102      	bne.n	810834e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108348:	4b70      	ldr	r3, [pc, #448]	@ (810850c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810834c:	e010      	b.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810834e:	4b6d      	ldr	r3, [pc, #436]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108350:	681b      	ldr	r3, [r3, #0]
 8108352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810835a:	d106      	bne.n	810836a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810835c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810835e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108362:	d102      	bne.n	810836a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108364:	4b6a      	ldr	r3, [pc, #424]	@ (8108510 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108368:	e002      	b.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810836a:	2300      	movs	r3, #0
 810836c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810836e:	e122      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108370:	e121      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108372:	2300      	movs	r3, #0
 8108374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108376:	e11e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108378:	e9d7 2300 	ldrd	r2, r3, [r7]
 810837c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8108380:	430b      	orrs	r3, r1
 8108382:	d133      	bne.n	81083ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8108384:	4b5f      	ldr	r3, [pc, #380]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810838c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810838e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108390:	2b00      	cmp	r3, #0
 8108392:	d004      	beq.n	810839e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8108394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810839a:	d012      	beq.n	81083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810839c:	e023      	b.n	81083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810839e:	4b59      	ldr	r3, [pc, #356]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083a0:	681b      	ldr	r3, [r3, #0]
 81083a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81083a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81083aa:	d107      	bne.n	81083bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81083ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81083b0:	4618      	mov	r0, r3
 81083b2:	f000 fbc7 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083ba:	e0fc      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083bc:	2300      	movs	r3, #0
 81083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083c0:	e0f9      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81083c2:	4b50      	ldr	r3, [pc, #320]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81083ce:	d107      	bne.n	81083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81083d0:	f107 0318 	add.w	r3, r7, #24
 81083d4:	4618      	mov	r0, r3
 81083d6:	f000 f90d 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81083da:	6a3b      	ldr	r3, [r7, #32]
 81083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083de:	e0ea      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083e0:	2300      	movs	r3, #0
 81083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083e4:	e0e7      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81083e6:	2300      	movs	r3, #0
 81083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083ea:	e0e4      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81083ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 81083f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81083f4:	430b      	orrs	r3, r1
 81083f6:	f040 808d 	bne.w	8108514 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81083fa:	4b42      	ldr	r3, [pc, #264]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81083fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8108402:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810840a:	d06b      	beq.n	81084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810840e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108412:	d874      	bhi.n	81084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810841a:	d056      	beq.n	81084ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810841e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108422:	d86c      	bhi.n	81084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810842a:	d03b      	beq.n	81084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810842e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108432:	d864      	bhi.n	81084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810843a:	d021      	beq.n	8108480 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810843e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108442:	d85c      	bhi.n	81084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108446:	2b00      	cmp	r3, #0
 8108448:	d004      	beq.n	8108454 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810844c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108450:	d004      	beq.n	810845c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8108452:	e054      	b.n	81084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108454:	f000 f8b8 	bl	81085c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8108458:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810845a:	e0ac      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810845c:	4b29      	ldr	r3, [pc, #164]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810845e:	681b      	ldr	r3, [r3, #0]
 8108460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108468:	d107      	bne.n	810847a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810846a:	f107 0318 	add.w	r3, r7, #24
 810846e:	4618      	mov	r0, r3
 8108470:	f000 f8c0 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108474:	69fb      	ldr	r3, [r7, #28]
 8108476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108478:	e09d      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810847a:	2300      	movs	r3, #0
 810847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810847e:	e09a      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108480:	4b20      	ldr	r3, [pc, #128]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108482:	681b      	ldr	r3, [r3, #0]
 8108484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810848c:	d107      	bne.n	810849e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810848e:	f107 030c 	add.w	r3, r7, #12
 8108492:	4618      	mov	r0, r3
 8108494:	f000 fa02 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108498:	693b      	ldr	r3, [r7, #16]
 810849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810849c:	e08b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810849e:	2300      	movs	r3, #0
 81084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084a2:	e088      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81084a4:	4b17      	ldr	r3, [pc, #92]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	f003 0304 	and.w	r3, r3, #4
 81084ac:	2b04      	cmp	r3, #4
 81084ae:	d109      	bne.n	81084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81084b0:	4b14      	ldr	r3, [pc, #80]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084b2:	681b      	ldr	r3, [r3, #0]
 81084b4:	08db      	lsrs	r3, r3, #3
 81084b6:	f003 0303 	and.w	r3, r3, #3
 81084ba:	4a13      	ldr	r2, [pc, #76]	@ (8108508 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81084bc:	fa22 f303 	lsr.w	r3, r2, r3
 81084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084c2:	e078      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084c4:	2300      	movs	r3, #0
 81084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084c8:	e075      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81084ca:	4b0e      	ldr	r3, [pc, #56]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81084d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81084d6:	d102      	bne.n	81084de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81084d8:	4b0c      	ldr	r3, [pc, #48]	@ (810850c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084dc:	e06b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084de:	2300      	movs	r3, #0
 81084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084e2:	e068      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81084e4:	4b07      	ldr	r3, [pc, #28]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81084ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81084f0:	d102      	bne.n	81084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81084f2:	4b07      	ldr	r3, [pc, #28]	@ (8108510 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084f6:	e05e      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084f8:	2300      	movs	r3, #0
 81084fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084fc:	e05b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81084fe:	2300      	movs	r3, #0
 8108500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108502:	e058      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108504:	58024400 	.word	0x58024400
 8108508:	03d09000 	.word	0x03d09000
 810850c:	003d0900 	.word	0x003d0900
 8108510:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108518:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810851c:	430b      	orrs	r3, r1
 810851e:	d148      	bne.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108520:	4b27      	ldr	r3, [pc, #156]	@ (81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108524:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108528:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810852c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108530:	d02a      	beq.n	8108588 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8108532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108538:	d838      	bhi.n	81085ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810853a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810853c:	2b00      	cmp	r3, #0
 810853e:	d004      	beq.n	810854a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108546:	d00d      	beq.n	8108564 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108548:	e030      	b.n	81085ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810854a:	4b1d      	ldr	r3, [pc, #116]	@ (81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810854c:	681b      	ldr	r3, [r3, #0]
 810854e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108556:	d102      	bne.n	810855e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108558:	4b1a      	ldr	r3, [pc, #104]	@ (81085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810855c:	e02b      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810855e:	2300      	movs	r3, #0
 8108560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108562:	e028      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108564:	4b16      	ldr	r3, [pc, #88]	@ (81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108566:	681b      	ldr	r3, [r3, #0]
 8108568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810856c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108570:	d107      	bne.n	8108582 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108576:	4618      	mov	r0, r3
 8108578:	f000 fae4 	bl	8108b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108580:	e019      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108582:	2300      	movs	r3, #0
 8108584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108586:	e016      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108588:	4b0d      	ldr	r3, [pc, #52]	@ (81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810858a:	681b      	ldr	r3, [r3, #0]
 810858c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108594:	d107      	bne.n	81085a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108596:	f107 0318 	add.w	r3, r7, #24
 810859a:	4618      	mov	r0, r3
 810859c:	f000 f82a 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81085a0:	69fb      	ldr	r3, [r7, #28]
 81085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085a4:	e007      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085a6:	2300      	movs	r3, #0
 81085a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085aa:	e004      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81085ac:	2300      	movs	r3, #0
 81085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085b0:	e001      	b.n	81085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81085b2:	2300      	movs	r3, #0
 81085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81085b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81085b8:	4618      	mov	r0, r3
 81085ba:	3740      	adds	r7, #64	@ 0x40
 81085bc:	46bd      	mov	sp, r7
 81085be:	bd80      	pop	{r7, pc}
 81085c0:	58024400 	.word	0x58024400
 81085c4:	017d7840 	.word	0x017d7840

081085c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81085c8:	b580      	push	{r7, lr}
 81085ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81085cc:	f7fd ffd2 	bl	8106574 <HAL_RCC_GetHCLKFreq>
 81085d0:	4602      	mov	r2, r0
 81085d2:	4b06      	ldr	r3, [pc, #24]	@ (81085ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81085d4:	6a1b      	ldr	r3, [r3, #32]
 81085d6:	091b      	lsrs	r3, r3, #4
 81085d8:	f003 0307 	and.w	r3, r3, #7
 81085dc:	4904      	ldr	r1, [pc, #16]	@ (81085f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81085de:	5ccb      	ldrb	r3, [r1, r3]
 81085e0:	f003 031f 	and.w	r3, r3, #31
 81085e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81085e8:	4618      	mov	r0, r3
 81085ea:	bd80      	pop	{r7, pc}
 81085ec:	58024400 	.word	0x58024400
 81085f0:	08117700 	.word	0x08117700

081085f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81085f4:	b480      	push	{r7}
 81085f6:	b089      	sub	sp, #36	@ 0x24
 81085f8:	af00      	add	r7, sp, #0
 81085fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81085fc:	4ba1      	ldr	r3, [pc, #644]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108600:	f003 0303 	and.w	r3, r3, #3
 8108604:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108606:	4b9f      	ldr	r3, [pc, #636]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810860a:	0b1b      	lsrs	r3, r3, #12
 810860c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108610:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108612:	4b9c      	ldr	r3, [pc, #624]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108616:	091b      	lsrs	r3, r3, #4
 8108618:	f003 0301 	and.w	r3, r3, #1
 810861c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810861e:	4b99      	ldr	r3, [pc, #612]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108622:	08db      	lsrs	r3, r3, #3
 8108624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108628:	693a      	ldr	r2, [r7, #16]
 810862a:	fb02 f303 	mul.w	r3, r2, r3
 810862e:	ee07 3a90 	vmov	s15, r3
 8108632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108636:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810863a:	697b      	ldr	r3, [r7, #20]
 810863c:	2b00      	cmp	r3, #0
 810863e:	f000 8111 	beq.w	8108864 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108642:	69bb      	ldr	r3, [r7, #24]
 8108644:	2b02      	cmp	r3, #2
 8108646:	f000 8083 	beq.w	8108750 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810864a:	69bb      	ldr	r3, [r7, #24]
 810864c:	2b02      	cmp	r3, #2
 810864e:	f200 80a1 	bhi.w	8108794 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108652:	69bb      	ldr	r3, [r7, #24]
 8108654:	2b00      	cmp	r3, #0
 8108656:	d003      	beq.n	8108660 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108658:	69bb      	ldr	r3, [r7, #24]
 810865a:	2b01      	cmp	r3, #1
 810865c:	d056      	beq.n	810870c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810865e:	e099      	b.n	8108794 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108660:	4b88      	ldr	r3, [pc, #544]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108662:	681b      	ldr	r3, [r3, #0]
 8108664:	f003 0320 	and.w	r3, r3, #32
 8108668:	2b00      	cmp	r3, #0
 810866a:	d02d      	beq.n	81086c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810866c:	4b85      	ldr	r3, [pc, #532]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	08db      	lsrs	r3, r3, #3
 8108672:	f003 0303 	and.w	r3, r3, #3
 8108676:	4a84      	ldr	r2, [pc, #528]	@ (8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108678:	fa22 f303 	lsr.w	r3, r2, r3
 810867c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810867e:	68bb      	ldr	r3, [r7, #8]
 8108680:	ee07 3a90 	vmov	s15, r3
 8108684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108688:	697b      	ldr	r3, [r7, #20]
 810868a:	ee07 3a90 	vmov	s15, r3
 810868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108696:	4b7b      	ldr	r3, [pc, #492]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810869a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810869e:	ee07 3a90 	vmov	s15, r3
 81086a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81086aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81086ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81086c6:	e087      	b.n	81087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81086c8:	697b      	ldr	r3, [r7, #20]
 81086ca:	ee07 3a90 	vmov	s15, r3
 81086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108890 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81086da:	4b6a      	ldr	r3, [pc, #424]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81086e2:	ee07 3a90 	vmov	s15, r3
 81086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81086ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810870a:	e065      	b.n	81087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810870c:	697b      	ldr	r3, [r7, #20]
 810870e:	ee07 3a90 	vmov	s15, r3
 8108712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108716:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810871e:	4b59      	ldr	r3, [pc, #356]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108726:	ee07 3a90 	vmov	s15, r3
 810872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810872e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108732:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810873e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108746:	ee67 7a27 	vmul.f32	s15, s14, s15
 810874a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810874e:	e043      	b.n	81087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108750:	697b      	ldr	r3, [r7, #20]
 8108752:	ee07 3a90 	vmov	s15, r3
 8108756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810875a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108762:	4b48      	ldr	r3, [pc, #288]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810876a:	ee07 3a90 	vmov	s15, r3
 810876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108772:	ed97 6a03 	vldr	s12, [r7, #12]
 8108776:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810878e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108792:	e021      	b.n	81087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108794:	697b      	ldr	r3, [r7, #20]
 8108796:	ee07 3a90 	vmov	s15, r3
 810879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810879e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087a6:	4b37      	ldr	r3, [pc, #220]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087ae:	ee07 3a90 	vmov	s15, r3
 81087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81087ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81087d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81087d8:	4b2a      	ldr	r3, [pc, #168]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81087dc:	0a5b      	lsrs	r3, r3, #9
 81087de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81087e2:	ee07 3a90 	vmov	s15, r3
 81087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81087ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 81087f2:	edd7 6a07 	vldr	s13, [r7, #28]
 81087f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81087fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81087fe:	ee17 2a90 	vmov	r2, s15
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108806:	4b1f      	ldr	r3, [pc, #124]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810880a:	0c1b      	lsrs	r3, r3, #16
 810880c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108810:	ee07 3a90 	vmov	s15, r3
 8108814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108818:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810881c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108820:	edd7 6a07 	vldr	s13, [r7, #28]
 8108824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810882c:	ee17 2a90 	vmov	r2, s15
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108834:	4b13      	ldr	r3, [pc, #76]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108838:	0e1b      	lsrs	r3, r3, #24
 810883a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810883e:	ee07 3a90 	vmov	s15, r3
 8108842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810884a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810884e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810885a:	ee17 2a90 	vmov	r2, s15
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108862:	e008      	b.n	8108876 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108864:	687b      	ldr	r3, [r7, #4]
 8108866:	2200      	movs	r2, #0
 8108868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810886a:	687b      	ldr	r3, [r7, #4]
 810886c:	2200      	movs	r2, #0
 810886e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	2200      	movs	r2, #0
 8108874:	609a      	str	r2, [r3, #8]
}
 8108876:	bf00      	nop
 8108878:	3724      	adds	r7, #36	@ 0x24
 810887a:	46bd      	mov	sp, r7
 810887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108880:	4770      	bx	lr
 8108882:	bf00      	nop
 8108884:	58024400 	.word	0x58024400
 8108888:	03d09000 	.word	0x03d09000
 810888c:	46000000 	.word	0x46000000
 8108890:	4c742400 	.word	0x4c742400
 8108894:	4a742400 	.word	0x4a742400
 8108898:	4bbebc20 	.word	0x4bbebc20

0810889c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810889c:	b480      	push	{r7}
 810889e:	b089      	sub	sp, #36	@ 0x24
 81088a0:	af00      	add	r7, sp, #0
 81088a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81088a4:	4ba1      	ldr	r3, [pc, #644]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81088a8:	f003 0303 	and.w	r3, r3, #3
 81088ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81088ae:	4b9f      	ldr	r3, [pc, #636]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81088b2:	0d1b      	lsrs	r3, r3, #20
 81088b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81088b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81088ba:	4b9c      	ldr	r3, [pc, #624]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81088be:	0a1b      	lsrs	r3, r3, #8
 81088c0:	f003 0301 	and.w	r3, r3, #1
 81088c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81088c6:	4b99      	ldr	r3, [pc, #612]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81088ca:	08db      	lsrs	r3, r3, #3
 81088cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81088d0:	693a      	ldr	r2, [r7, #16]
 81088d2:	fb02 f303 	mul.w	r3, r2, r3
 81088d6:	ee07 3a90 	vmov	s15, r3
 81088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81088e2:	697b      	ldr	r3, [r7, #20]
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	f000 8111 	beq.w	8108b0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81088ea:	69bb      	ldr	r3, [r7, #24]
 81088ec:	2b02      	cmp	r3, #2
 81088ee:	f000 8083 	beq.w	81089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81088f2:	69bb      	ldr	r3, [r7, #24]
 81088f4:	2b02      	cmp	r3, #2
 81088f6:	f200 80a1 	bhi.w	8108a3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81088fa:	69bb      	ldr	r3, [r7, #24]
 81088fc:	2b00      	cmp	r3, #0
 81088fe:	d003      	beq.n	8108908 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108900:	69bb      	ldr	r3, [r7, #24]
 8108902:	2b01      	cmp	r3, #1
 8108904:	d056      	beq.n	81089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108906:	e099      	b.n	8108a3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108908:	4b88      	ldr	r3, [pc, #544]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810890a:	681b      	ldr	r3, [r3, #0]
 810890c:	f003 0320 	and.w	r3, r3, #32
 8108910:	2b00      	cmp	r3, #0
 8108912:	d02d      	beq.n	8108970 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108914:	4b85      	ldr	r3, [pc, #532]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	08db      	lsrs	r3, r3, #3
 810891a:	f003 0303 	and.w	r3, r3, #3
 810891e:	4a84      	ldr	r2, [pc, #528]	@ (8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108920:	fa22 f303 	lsr.w	r3, r2, r3
 8108924:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108926:	68bb      	ldr	r3, [r7, #8]
 8108928:	ee07 3a90 	vmov	s15, r3
 810892c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108930:	697b      	ldr	r3, [r7, #20]
 8108932:	ee07 3a90 	vmov	s15, r3
 8108936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810893a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810893e:	4b7b      	ldr	r3, [pc, #492]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108946:	ee07 3a90 	vmov	s15, r3
 810894a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810894e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108952:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810895a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810895e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108966:	ee67 7a27 	vmul.f32	s15, s14, s15
 810896a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810896e:	e087      	b.n	8108a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108970:	697b      	ldr	r3, [r7, #20]
 8108972:	ee07 3a90 	vmov	s15, r3
 8108976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810897a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108b38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810897e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108982:	4b6a      	ldr	r3, [pc, #424]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810898a:	ee07 3a90 	vmov	s15, r3
 810898e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108992:	ed97 6a03 	vldr	s12, [r7, #12]
 8108996:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810899a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810899e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089b2:	e065      	b.n	8108a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81089b4:	697b      	ldr	r3, [r7, #20]
 81089b6:	ee07 3a90 	vmov	s15, r3
 81089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089c6:	4b59      	ldr	r3, [pc, #356]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089ce:	ee07 3a90 	vmov	s15, r3
 81089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81089da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089f6:	e043      	b.n	8108a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81089f8:	697b      	ldr	r3, [r7, #20]
 81089fa:	ee07 3a90 	vmov	s15, r3
 81089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a0a:	4b48      	ldr	r3, [pc, #288]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a12:	ee07 3a90 	vmov	s15, r3
 8108a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a3a:	e021      	b.n	8108a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108a3c:	697b      	ldr	r3, [r7, #20]
 8108a3e:	ee07 3a90 	vmov	s15, r3
 8108a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a4e:	4b37      	ldr	r3, [pc, #220]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a56:	ee07 3a90 	vmov	s15, r3
 8108a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108a80:	4b2a      	ldr	r3, [pc, #168]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a84:	0a5b      	lsrs	r3, r3, #9
 8108a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a8a:	ee07 3a90 	vmov	s15, r3
 8108a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108aa6:	ee17 2a90 	vmov	r2, s15
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108aae:	4b1f      	ldr	r3, [pc, #124]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ab2:	0c1b      	lsrs	r3, r3, #16
 8108ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ab8:	ee07 3a90 	vmov	s15, r3
 8108abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ac0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8108acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108ad4:	ee17 2a90 	vmov	r2, s15
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108adc:	4b13      	ldr	r3, [pc, #76]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ae0:	0e1b      	lsrs	r3, r3, #24
 8108ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ae6:	ee07 3a90 	vmov	s15, r3
 8108aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8108afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108b02:	ee17 2a90 	vmov	r2, s15
 8108b06:	687b      	ldr	r3, [r7, #4]
 8108b08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108b0a:	e008      	b.n	8108b1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	2200      	movs	r2, #0
 8108b10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	2200      	movs	r2, #0
 8108b16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	2200      	movs	r2, #0
 8108b1c:	609a      	str	r2, [r3, #8]
}
 8108b1e:	bf00      	nop
 8108b20:	3724      	adds	r7, #36	@ 0x24
 8108b22:	46bd      	mov	sp, r7
 8108b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b28:	4770      	bx	lr
 8108b2a:	bf00      	nop
 8108b2c:	58024400 	.word	0x58024400
 8108b30:	03d09000 	.word	0x03d09000
 8108b34:	46000000 	.word	0x46000000
 8108b38:	4c742400 	.word	0x4c742400
 8108b3c:	4a742400 	.word	0x4a742400
 8108b40:	4bbebc20 	.word	0x4bbebc20

08108b44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8108b44:	b480      	push	{r7}
 8108b46:	b089      	sub	sp, #36	@ 0x24
 8108b48:	af00      	add	r7, sp, #0
 8108b4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108b4c:	4ba0      	ldr	r3, [pc, #640]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b50:	f003 0303 	and.w	r3, r3, #3
 8108b54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108b56:	4b9e      	ldr	r3, [pc, #632]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b5a:	091b      	lsrs	r3, r3, #4
 8108b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108b60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108b62:	4b9b      	ldr	r3, [pc, #620]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b66:	f003 0301 	and.w	r3, r3, #1
 8108b6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8108b6c:	4b98      	ldr	r3, [pc, #608]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108b70:	08db      	lsrs	r3, r3, #3
 8108b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108b76:	693a      	ldr	r2, [r7, #16]
 8108b78:	fb02 f303 	mul.w	r3, r2, r3
 8108b7c:	ee07 3a90 	vmov	s15, r3
 8108b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108b88:	697b      	ldr	r3, [r7, #20]
 8108b8a:	2b00      	cmp	r3, #0
 8108b8c:	f000 8111 	beq.w	8108db2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108b90:	69bb      	ldr	r3, [r7, #24]
 8108b92:	2b02      	cmp	r3, #2
 8108b94:	f000 8083 	beq.w	8108c9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108b98:	69bb      	ldr	r3, [r7, #24]
 8108b9a:	2b02      	cmp	r3, #2
 8108b9c:	f200 80a1 	bhi.w	8108ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108ba0:	69bb      	ldr	r3, [r7, #24]
 8108ba2:	2b00      	cmp	r3, #0
 8108ba4:	d003      	beq.n	8108bae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108ba6:	69bb      	ldr	r3, [r7, #24]
 8108ba8:	2b01      	cmp	r3, #1
 8108baa:	d056      	beq.n	8108c5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8108bac:	e099      	b.n	8108ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108bae:	4b88      	ldr	r3, [pc, #544]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	f003 0320 	and.w	r3, r3, #32
 8108bb6:	2b00      	cmp	r3, #0
 8108bb8:	d02d      	beq.n	8108c16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108bba:	4b85      	ldr	r3, [pc, #532]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bbc:	681b      	ldr	r3, [r3, #0]
 8108bbe:	08db      	lsrs	r3, r3, #3
 8108bc0:	f003 0303 	and.w	r3, r3, #3
 8108bc4:	4a83      	ldr	r2, [pc, #524]	@ (8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8108bca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108bcc:	68bb      	ldr	r3, [r7, #8]
 8108bce:	ee07 3a90 	vmov	s15, r3
 8108bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bd6:	697b      	ldr	r3, [r7, #20]
 8108bd8:	ee07 3a90 	vmov	s15, r3
 8108bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108be4:	4b7a      	ldr	r3, [pc, #488]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108bec:	ee07 3a90 	vmov	s15, r3
 8108bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8108bf8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108c14:	e087      	b.n	8108d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c16:	697b      	ldr	r3, [r7, #20]
 8108c18:	ee07 3a90 	vmov	s15, r3
 8108c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c20:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108ddc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c28:	4b69      	ldr	r3, [pc, #420]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c30:	ee07 3a90 	vmov	s15, r3
 8108c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c3c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c58:	e065      	b.n	8108d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c5a:	697b      	ldr	r3, [r7, #20]
 8108c5c:	ee07 3a90 	vmov	s15, r3
 8108c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c64:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108de0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c6c:	4b58      	ldr	r3, [pc, #352]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c74:	ee07 3a90 	vmov	s15, r3
 8108c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c80:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c9c:	e043      	b.n	8108d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c9e:	697b      	ldr	r3, [r7, #20]
 8108ca0:	ee07 3a90 	vmov	s15, r3
 8108ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ca8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108de4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108cb0:	4b47      	ldr	r3, [pc, #284]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108cb8:	ee07 3a90 	vmov	s15, r3
 8108cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8108cc4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108cd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ce0:	e021      	b.n	8108d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108ce2:	697b      	ldr	r3, [r7, #20]
 8108ce4:	ee07 3a90 	vmov	s15, r3
 8108ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108cec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108ddc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108cf4:	4b36      	ldr	r3, [pc, #216]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108cfc:	ee07 3a90 	vmov	s15, r3
 8108d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d04:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d08:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108d26:	4b2a      	ldr	r3, [pc, #168]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d2a:	0a5b      	lsrs	r3, r3, #9
 8108d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d30:	ee07 3a90 	vmov	s15, r3
 8108d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d4c:	ee17 2a90 	vmov	r2, s15
 8108d50:	687b      	ldr	r3, [r7, #4]
 8108d52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108d54:	4b1e      	ldr	r3, [pc, #120]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d58:	0c1b      	lsrs	r3, r3, #16
 8108d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d5e:	ee07 3a90 	vmov	s15, r3
 8108d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d7a:	ee17 2a90 	vmov	r2, s15
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108d82:	4b13      	ldr	r3, [pc, #76]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d86:	0e1b      	lsrs	r3, r3, #24
 8108d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d8c:	ee07 3a90 	vmov	s15, r3
 8108d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108da8:	ee17 2a90 	vmov	r2, s15
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108db0:	e008      	b.n	8108dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	2200      	movs	r2, #0
 8108db6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	2200      	movs	r2, #0
 8108dbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	2200      	movs	r2, #0
 8108dc2:	609a      	str	r2, [r3, #8]
}
 8108dc4:	bf00      	nop
 8108dc6:	3724      	adds	r7, #36	@ 0x24
 8108dc8:	46bd      	mov	sp, r7
 8108dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dce:	4770      	bx	lr
 8108dd0:	58024400 	.word	0x58024400
 8108dd4:	03d09000 	.word	0x03d09000
 8108dd8:	46000000 	.word	0x46000000
 8108ddc:	4c742400 	.word	0x4c742400
 8108de0:	4a742400 	.word	0x4a742400
 8108de4:	4bbebc20 	.word	0x4bbebc20

08108de8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108de8:	b580      	push	{r7, lr}
 8108dea:	b084      	sub	sp, #16
 8108dec:	af00      	add	r7, sp, #0
 8108dee:	6078      	str	r0, [r7, #4]
 8108df0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108df2:	2300      	movs	r3, #0
 8108df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108df6:	4b54      	ldr	r3, [pc, #336]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108dfa:	f003 0303 	and.w	r3, r3, #3
 8108dfe:	2b03      	cmp	r3, #3
 8108e00:	d101      	bne.n	8108e06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108e02:	2301      	movs	r3, #1
 8108e04:	e09b      	b.n	8108f3e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108e06:	4b50      	ldr	r3, [pc, #320]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e08:	681b      	ldr	r3, [r3, #0]
 8108e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108e12:	f7f9 fb97 	bl	8102544 <HAL_GetTick>
 8108e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e18:	e008      	b.n	8108e2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108e1a:	f7f9 fb93 	bl	8102544 <HAL_GetTick>
 8108e1e:	4602      	mov	r2, r0
 8108e20:	68bb      	ldr	r3, [r7, #8]
 8108e22:	1ad3      	subs	r3, r2, r3
 8108e24:	2b02      	cmp	r3, #2
 8108e26:	d901      	bls.n	8108e2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108e28:	2303      	movs	r3, #3
 8108e2a:	e088      	b.n	8108f3e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e2c:	4b46      	ldr	r3, [pc, #280]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e2e:	681b      	ldr	r3, [r3, #0]
 8108e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108e34:	2b00      	cmp	r3, #0
 8108e36:	d1f0      	bne.n	8108e1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108e38:	4b43      	ldr	r3, [pc, #268]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108e40:	687b      	ldr	r3, [r7, #4]
 8108e42:	681b      	ldr	r3, [r3, #0]
 8108e44:	031b      	lsls	r3, r3, #12
 8108e46:	4940      	ldr	r1, [pc, #256]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e48:	4313      	orrs	r3, r2
 8108e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	685b      	ldr	r3, [r3, #4]
 8108e50:	3b01      	subs	r3, #1
 8108e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	689b      	ldr	r3, [r3, #8]
 8108e5a:	3b01      	subs	r3, #1
 8108e5c:	025b      	lsls	r3, r3, #9
 8108e5e:	b29b      	uxth	r3, r3
 8108e60:	431a      	orrs	r2, r3
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	68db      	ldr	r3, [r3, #12]
 8108e66:	3b01      	subs	r3, #1
 8108e68:	041b      	lsls	r3, r3, #16
 8108e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108e6e:	431a      	orrs	r2, r3
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	691b      	ldr	r3, [r3, #16]
 8108e74:	3b01      	subs	r3, #1
 8108e76:	061b      	lsls	r3, r3, #24
 8108e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108e7c:	4932      	ldr	r1, [pc, #200]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e7e:	4313      	orrs	r3, r2
 8108e80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108e82:	4b31      	ldr	r3, [pc, #196]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	695b      	ldr	r3, [r3, #20]
 8108e8e:	492e      	ldr	r1, [pc, #184]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e90:	4313      	orrs	r3, r2
 8108e92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108e94:	4b2c      	ldr	r3, [pc, #176]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e98:	f023 0220 	bic.w	r2, r3, #32
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	699b      	ldr	r3, [r3, #24]
 8108ea0:	4929      	ldr	r1, [pc, #164]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ea2:	4313      	orrs	r3, r2
 8108ea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108ea6:	4b28      	ldr	r3, [pc, #160]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108eaa:	4a27      	ldr	r2, [pc, #156]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108eac:	f023 0310 	bic.w	r3, r3, #16
 8108eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108eb2:	4b25      	ldr	r3, [pc, #148]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108eba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108ebe:	687a      	ldr	r2, [r7, #4]
 8108ec0:	69d2      	ldr	r2, [r2, #28]
 8108ec2:	00d2      	lsls	r2, r2, #3
 8108ec4:	4920      	ldr	r1, [pc, #128]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ec6:	4313      	orrs	r3, r2
 8108ec8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108eca:	4b1f      	ldr	r3, [pc, #124]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ece:	4a1e      	ldr	r2, [pc, #120]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ed0:	f043 0310 	orr.w	r3, r3, #16
 8108ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108ed6:	683b      	ldr	r3, [r7, #0]
 8108ed8:	2b00      	cmp	r3, #0
 8108eda:	d106      	bne.n	8108eea <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108edc:	4b1a      	ldr	r3, [pc, #104]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ee0:	4a19      	ldr	r2, [pc, #100]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ee2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ee8:	e00f      	b.n	8108f0a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108eea:	683b      	ldr	r3, [r7, #0]
 8108eec:	2b01      	cmp	r3, #1
 8108eee:	d106      	bne.n	8108efe <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108ef0:	4b15      	ldr	r3, [pc, #84]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ef4:	4a14      	ldr	r2, [pc, #80]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108efc:	e005      	b.n	8108f0a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108efe:	4b12      	ldr	r3, [pc, #72]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f02:	4a11      	ldr	r2, [pc, #68]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108f04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108f08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108f0c:	681b      	ldr	r3, [r3, #0]
 8108f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108f10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f16:	f7f9 fb15 	bl	8102544 <HAL_GetTick>
 8108f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f1c:	e008      	b.n	8108f30 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108f1e:	f7f9 fb11 	bl	8102544 <HAL_GetTick>
 8108f22:	4602      	mov	r2, r0
 8108f24:	68bb      	ldr	r3, [r7, #8]
 8108f26:	1ad3      	subs	r3, r2, r3
 8108f28:	2b02      	cmp	r3, #2
 8108f2a:	d901      	bls.n	8108f30 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108f2c:	2303      	movs	r3, #3
 8108f2e:	e006      	b.n	8108f3e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f30:	4b05      	ldr	r3, [pc, #20]	@ (8108f48 <RCCEx_PLL2_Config+0x160>)
 8108f32:	681b      	ldr	r3, [r3, #0]
 8108f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108f38:	2b00      	cmp	r3, #0
 8108f3a:	d0f0      	beq.n	8108f1e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8108f3e:	4618      	mov	r0, r3
 8108f40:	3710      	adds	r7, #16
 8108f42:	46bd      	mov	sp, r7
 8108f44:	bd80      	pop	{r7, pc}
 8108f46:	bf00      	nop
 8108f48:	58024400 	.word	0x58024400

08108f4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108f4c:	b580      	push	{r7, lr}
 8108f4e:	b084      	sub	sp, #16
 8108f50:	af00      	add	r7, sp, #0
 8108f52:	6078      	str	r0, [r7, #4]
 8108f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108f56:	2300      	movs	r3, #0
 8108f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108f5a:	4b54      	ldr	r3, [pc, #336]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f5e:	f003 0303 	and.w	r3, r3, #3
 8108f62:	2b03      	cmp	r3, #3
 8108f64:	d101      	bne.n	8108f6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108f66:	2301      	movs	r3, #1
 8108f68:	e09b      	b.n	81090a2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108f6a:	4b50      	ldr	r3, [pc, #320]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108f6c:	681b      	ldr	r3, [r3, #0]
 8108f6e:	4a4f      	ldr	r2, [pc, #316]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f76:	f7f9 fae5 	bl	8102544 <HAL_GetTick>
 8108f7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f7c:	e008      	b.n	8108f90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108f7e:	f7f9 fae1 	bl	8102544 <HAL_GetTick>
 8108f82:	4602      	mov	r2, r0
 8108f84:	68bb      	ldr	r3, [r7, #8]
 8108f86:	1ad3      	subs	r3, r2, r3
 8108f88:	2b02      	cmp	r3, #2
 8108f8a:	d901      	bls.n	8108f90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108f8c:	2303      	movs	r3, #3
 8108f8e:	e088      	b.n	81090a2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f90:	4b46      	ldr	r3, [pc, #280]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108f92:	681b      	ldr	r3, [r3, #0]
 8108f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d1f0      	bne.n	8108f7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108f9c:	4b43      	ldr	r3, [pc, #268]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108fa0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	681b      	ldr	r3, [r3, #0]
 8108fa8:	051b      	lsls	r3, r3, #20
 8108faa:	4940      	ldr	r1, [pc, #256]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108fac:	4313      	orrs	r3, r2
 8108fae:	628b      	str	r3, [r1, #40]	@ 0x28
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	685b      	ldr	r3, [r3, #4]
 8108fb4:	3b01      	subs	r3, #1
 8108fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108fba:	687b      	ldr	r3, [r7, #4]
 8108fbc:	689b      	ldr	r3, [r3, #8]
 8108fbe:	3b01      	subs	r3, #1
 8108fc0:	025b      	lsls	r3, r3, #9
 8108fc2:	b29b      	uxth	r3, r3
 8108fc4:	431a      	orrs	r2, r3
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	68db      	ldr	r3, [r3, #12]
 8108fca:	3b01      	subs	r3, #1
 8108fcc:	041b      	lsls	r3, r3, #16
 8108fce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108fd2:	431a      	orrs	r2, r3
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	691b      	ldr	r3, [r3, #16]
 8108fd8:	3b01      	subs	r3, #1
 8108fda:	061b      	lsls	r3, r3, #24
 8108fdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108fe0:	4932      	ldr	r1, [pc, #200]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108fe2:	4313      	orrs	r3, r2
 8108fe4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108fe6:	4b31      	ldr	r3, [pc, #196]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108fee:	687b      	ldr	r3, [r7, #4]
 8108ff0:	695b      	ldr	r3, [r3, #20]
 8108ff2:	492e      	ldr	r1, [pc, #184]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108ff4:	4313      	orrs	r3, r2
 8108ff6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108ff8:	4b2c      	ldr	r3, [pc, #176]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8108ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ffc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	699b      	ldr	r3, [r3, #24]
 8109004:	4929      	ldr	r1, [pc, #164]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109006:	4313      	orrs	r3, r2
 8109008:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810900a:	4b28      	ldr	r3, [pc, #160]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 810900c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810900e:	4a27      	ldr	r2, [pc, #156]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109014:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109016:	4b25      	ldr	r3, [pc, #148]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810901a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810901e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8109022:	687a      	ldr	r2, [r7, #4]
 8109024:	69d2      	ldr	r2, [r2, #28]
 8109026:	00d2      	lsls	r2, r2, #3
 8109028:	4920      	ldr	r1, [pc, #128]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 810902a:	4313      	orrs	r3, r2
 810902c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810902e:	4b1f      	ldr	r3, [pc, #124]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109032:	4a1e      	ldr	r2, [pc, #120]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810903a:	683b      	ldr	r3, [r7, #0]
 810903c:	2b00      	cmp	r3, #0
 810903e:	d106      	bne.n	810904e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109040:	4b1a      	ldr	r3, [pc, #104]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109044:	4a19      	ldr	r2, [pc, #100]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109046:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810904a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810904c:	e00f      	b.n	810906e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810904e:	683b      	ldr	r3, [r7, #0]
 8109050:	2b01      	cmp	r3, #1
 8109052:	d106      	bne.n	8109062 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109054:	4b15      	ldr	r3, [pc, #84]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109058:	4a14      	ldr	r2, [pc, #80]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 810905a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810905e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109060:	e005      	b.n	810906e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109062:	4b12      	ldr	r3, [pc, #72]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109066:	4a11      	ldr	r2, [pc, #68]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109068:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810906c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810906e:	4b0f      	ldr	r3, [pc, #60]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109070:	681b      	ldr	r3, [r3, #0]
 8109072:	4a0e      	ldr	r2, [pc, #56]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8109078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810907a:	f7f9 fa63 	bl	8102544 <HAL_GetTick>
 810907e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109080:	e008      	b.n	8109094 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109082:	f7f9 fa5f 	bl	8102544 <HAL_GetTick>
 8109086:	4602      	mov	r2, r0
 8109088:	68bb      	ldr	r3, [r7, #8]
 810908a:	1ad3      	subs	r3, r2, r3
 810908c:	2b02      	cmp	r3, #2
 810908e:	d901      	bls.n	8109094 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109090:	2303      	movs	r3, #3
 8109092:	e006      	b.n	81090a2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109094:	4b05      	ldr	r3, [pc, #20]	@ (81090ac <RCCEx_PLL3_Config+0x160>)
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810909c:	2b00      	cmp	r3, #0
 810909e:	d0f0      	beq.n	8109082 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81090a2:	4618      	mov	r0, r3
 81090a4:	3710      	adds	r7, #16
 81090a6:	46bd      	mov	sp, r7
 81090a8:	bd80      	pop	{r7, pc}
 81090aa:	bf00      	nop
 81090ac:	58024400 	.word	0x58024400

081090b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81090b0:	b580      	push	{r7, lr}
 81090b2:	b082      	sub	sp, #8
 81090b4:	af00      	add	r7, sp, #0
 81090b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	2b00      	cmp	r3, #0
 81090bc:	d101      	bne.n	81090c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81090be:	2301      	movs	r3, #1
 81090c0:	e049      	b.n	8109156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81090c8:	b2db      	uxtb	r3, r3
 81090ca:	2b00      	cmp	r3, #0
 81090cc:	d106      	bne.n	81090dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	2200      	movs	r2, #0
 81090d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81090d6:	6878      	ldr	r0, [r7, #4]
 81090d8:	f000 f841 	bl	810915e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81090dc:	687b      	ldr	r3, [r7, #4]
 81090de:	2202      	movs	r2, #2
 81090e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	681a      	ldr	r2, [r3, #0]
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	3304      	adds	r3, #4
 81090ec:	4619      	mov	r1, r3
 81090ee:	4610      	mov	r0, r2
 81090f0:	f000 f9e8 	bl	81094c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	2201      	movs	r2, #1
 81090f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	2201      	movs	r2, #1
 8109100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	2201      	movs	r2, #1
 8109108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	2201      	movs	r2, #1
 8109110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	2201      	movs	r2, #1
 8109118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810911c:	687b      	ldr	r3, [r7, #4]
 810911e:	2201      	movs	r2, #1
 8109120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	2201      	movs	r2, #1
 8109128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	2201      	movs	r2, #1
 8109130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	2201      	movs	r2, #1
 8109138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	2201      	movs	r2, #1
 8109140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	2201      	movs	r2, #1
 8109148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	2201      	movs	r2, #1
 8109150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109154:	2300      	movs	r3, #0
}
 8109156:	4618      	mov	r0, r3
 8109158:	3708      	adds	r7, #8
 810915a:	46bd      	mov	sp, r7
 810915c:	bd80      	pop	{r7, pc}

0810915e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810915e:	b480      	push	{r7}
 8109160:	b083      	sub	sp, #12
 8109162:	af00      	add	r7, sp, #0
 8109164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8109166:	bf00      	nop
 8109168:	370c      	adds	r7, #12
 810916a:	46bd      	mov	sp, r7
 810916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109170:	4770      	bx	lr
	...

08109174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109174:	b480      	push	{r7}
 8109176:	b085      	sub	sp, #20
 8109178:	af00      	add	r7, sp, #0
 810917a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109182:	b2db      	uxtb	r3, r3
 8109184:	2b01      	cmp	r3, #1
 8109186:	d001      	beq.n	810918c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109188:	2301      	movs	r3, #1
 810918a:	e054      	b.n	8109236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	2202      	movs	r2, #2
 8109190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	681b      	ldr	r3, [r3, #0]
 8109198:	68da      	ldr	r2, [r3, #12]
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	681b      	ldr	r3, [r3, #0]
 810919e:	f042 0201 	orr.w	r2, r2, #1
 81091a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	681b      	ldr	r3, [r3, #0]
 81091a8:	4a26      	ldr	r2, [pc, #152]	@ (8109244 <HAL_TIM_Base_Start_IT+0xd0>)
 81091aa:	4293      	cmp	r3, r2
 81091ac:	d022      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81091b6:	d01d      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	681b      	ldr	r3, [r3, #0]
 81091bc:	4a22      	ldr	r2, [pc, #136]	@ (8109248 <HAL_TIM_Base_Start_IT+0xd4>)
 81091be:	4293      	cmp	r3, r2
 81091c0:	d018      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	681b      	ldr	r3, [r3, #0]
 81091c6:	4a21      	ldr	r2, [pc, #132]	@ (810924c <HAL_TIM_Base_Start_IT+0xd8>)
 81091c8:	4293      	cmp	r3, r2
 81091ca:	d013      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	681b      	ldr	r3, [r3, #0]
 81091d0:	4a1f      	ldr	r2, [pc, #124]	@ (8109250 <HAL_TIM_Base_Start_IT+0xdc>)
 81091d2:	4293      	cmp	r3, r2
 81091d4:	d00e      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	681b      	ldr	r3, [r3, #0]
 81091da:	4a1e      	ldr	r2, [pc, #120]	@ (8109254 <HAL_TIM_Base_Start_IT+0xe0>)
 81091dc:	4293      	cmp	r3, r2
 81091de:	d009      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	681b      	ldr	r3, [r3, #0]
 81091e4:	4a1c      	ldr	r2, [pc, #112]	@ (8109258 <HAL_TIM_Base_Start_IT+0xe4>)
 81091e6:	4293      	cmp	r3, r2
 81091e8:	d004      	beq.n	81091f4 <HAL_TIM_Base_Start_IT+0x80>
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	681b      	ldr	r3, [r3, #0]
 81091ee:	4a1b      	ldr	r2, [pc, #108]	@ (810925c <HAL_TIM_Base_Start_IT+0xe8>)
 81091f0:	4293      	cmp	r3, r2
 81091f2:	d115      	bne.n	8109220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	681b      	ldr	r3, [r3, #0]
 81091f8:	689a      	ldr	r2, [r3, #8]
 81091fa:	4b19      	ldr	r3, [pc, #100]	@ (8109260 <HAL_TIM_Base_Start_IT+0xec>)
 81091fc:	4013      	ands	r3, r2
 81091fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109200:	68fb      	ldr	r3, [r7, #12]
 8109202:	2b06      	cmp	r3, #6
 8109204:	d015      	beq.n	8109232 <HAL_TIM_Base_Start_IT+0xbe>
 8109206:	68fb      	ldr	r3, [r7, #12]
 8109208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810920c:	d011      	beq.n	8109232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	681b      	ldr	r3, [r3, #0]
 8109212:	681a      	ldr	r2, [r3, #0]
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	f042 0201 	orr.w	r2, r2, #1
 810921c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810921e:	e008      	b.n	8109232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	681b      	ldr	r3, [r3, #0]
 8109224:	681a      	ldr	r2, [r3, #0]
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	681b      	ldr	r3, [r3, #0]
 810922a:	f042 0201 	orr.w	r2, r2, #1
 810922e:	601a      	str	r2, [r3, #0]
 8109230:	e000      	b.n	8109234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109234:	2300      	movs	r3, #0
}
 8109236:	4618      	mov	r0, r3
 8109238:	3714      	adds	r7, #20
 810923a:	46bd      	mov	sp, r7
 810923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109240:	4770      	bx	lr
 8109242:	bf00      	nop
 8109244:	40010000 	.word	0x40010000
 8109248:	40000400 	.word	0x40000400
 810924c:	40000800 	.word	0x40000800
 8109250:	40000c00 	.word	0x40000c00
 8109254:	40010400 	.word	0x40010400
 8109258:	40001800 	.word	0x40001800
 810925c:	40014000 	.word	0x40014000
 8109260:	00010007 	.word	0x00010007

08109264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109264:	b580      	push	{r7, lr}
 8109266:	b084      	sub	sp, #16
 8109268:	af00      	add	r7, sp, #0
 810926a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810926c:	687b      	ldr	r3, [r7, #4]
 810926e:	681b      	ldr	r3, [r3, #0]
 8109270:	68db      	ldr	r3, [r3, #12]
 8109272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109274:	687b      	ldr	r3, [r7, #4]
 8109276:	681b      	ldr	r3, [r3, #0]
 8109278:	691b      	ldr	r3, [r3, #16]
 810927a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810927c:	68bb      	ldr	r3, [r7, #8]
 810927e:	f003 0302 	and.w	r3, r3, #2
 8109282:	2b00      	cmp	r3, #0
 8109284:	d020      	beq.n	81092c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8109286:	68fb      	ldr	r3, [r7, #12]
 8109288:	f003 0302 	and.w	r3, r3, #2
 810928c:	2b00      	cmp	r3, #0
 810928e:	d01b      	beq.n	81092c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681b      	ldr	r3, [r3, #0]
 8109294:	f06f 0202 	mvn.w	r2, #2
 8109298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	2201      	movs	r2, #1
 810929e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	681b      	ldr	r3, [r3, #0]
 81092a4:	699b      	ldr	r3, [r3, #24]
 81092a6:	f003 0303 	and.w	r3, r3, #3
 81092aa:	2b00      	cmp	r3, #0
 81092ac:	d003      	beq.n	81092b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81092ae:	6878      	ldr	r0, [r7, #4]
 81092b0:	f000 f8e9 	bl	8109486 <HAL_TIM_IC_CaptureCallback>
 81092b4:	e005      	b.n	81092c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81092b6:	6878      	ldr	r0, [r7, #4]
 81092b8:	f000 f8db 	bl	8109472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81092bc:	6878      	ldr	r0, [r7, #4]
 81092be:	f000 f8ec 	bl	810949a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	2200      	movs	r2, #0
 81092c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81092c8:	68bb      	ldr	r3, [r7, #8]
 81092ca:	f003 0304 	and.w	r3, r3, #4
 81092ce:	2b00      	cmp	r3, #0
 81092d0:	d020      	beq.n	8109314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81092d2:	68fb      	ldr	r3, [r7, #12]
 81092d4:	f003 0304 	and.w	r3, r3, #4
 81092d8:	2b00      	cmp	r3, #0
 81092da:	d01b      	beq.n	8109314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81092dc:	687b      	ldr	r3, [r7, #4]
 81092de:	681b      	ldr	r3, [r3, #0]
 81092e0:	f06f 0204 	mvn.w	r2, #4
 81092e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	2202      	movs	r2, #2
 81092ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81092ec:	687b      	ldr	r3, [r7, #4]
 81092ee:	681b      	ldr	r3, [r3, #0]
 81092f0:	699b      	ldr	r3, [r3, #24]
 81092f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81092f6:	2b00      	cmp	r3, #0
 81092f8:	d003      	beq.n	8109302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81092fa:	6878      	ldr	r0, [r7, #4]
 81092fc:	f000 f8c3 	bl	8109486 <HAL_TIM_IC_CaptureCallback>
 8109300:	e005      	b.n	810930e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109302:	6878      	ldr	r0, [r7, #4]
 8109304:	f000 f8b5 	bl	8109472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109308:	6878      	ldr	r0, [r7, #4]
 810930a:	f000 f8c6 	bl	810949a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	2200      	movs	r2, #0
 8109312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8109314:	68bb      	ldr	r3, [r7, #8]
 8109316:	f003 0308 	and.w	r3, r3, #8
 810931a:	2b00      	cmp	r3, #0
 810931c:	d020      	beq.n	8109360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810931e:	68fb      	ldr	r3, [r7, #12]
 8109320:	f003 0308 	and.w	r3, r3, #8
 8109324:	2b00      	cmp	r3, #0
 8109326:	d01b      	beq.n	8109360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	f06f 0208 	mvn.w	r2, #8
 8109330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	2204      	movs	r2, #4
 8109336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	681b      	ldr	r3, [r3, #0]
 810933c:	69db      	ldr	r3, [r3, #28]
 810933e:	f003 0303 	and.w	r3, r3, #3
 8109342:	2b00      	cmp	r3, #0
 8109344:	d003      	beq.n	810934e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109346:	6878      	ldr	r0, [r7, #4]
 8109348:	f000 f89d 	bl	8109486 <HAL_TIM_IC_CaptureCallback>
 810934c:	e005      	b.n	810935a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810934e:	6878      	ldr	r0, [r7, #4]
 8109350:	f000 f88f 	bl	8109472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109354:	6878      	ldr	r0, [r7, #4]
 8109356:	f000 f8a0 	bl	810949a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	2200      	movs	r2, #0
 810935e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109360:	68bb      	ldr	r3, [r7, #8]
 8109362:	f003 0310 	and.w	r3, r3, #16
 8109366:	2b00      	cmp	r3, #0
 8109368:	d020      	beq.n	81093ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810936a:	68fb      	ldr	r3, [r7, #12]
 810936c:	f003 0310 	and.w	r3, r3, #16
 8109370:	2b00      	cmp	r3, #0
 8109372:	d01b      	beq.n	81093ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109374:	687b      	ldr	r3, [r7, #4]
 8109376:	681b      	ldr	r3, [r3, #0]
 8109378:	f06f 0210 	mvn.w	r2, #16
 810937c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	2208      	movs	r2, #8
 8109382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	681b      	ldr	r3, [r3, #0]
 8109388:	69db      	ldr	r3, [r3, #28]
 810938a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810938e:	2b00      	cmp	r3, #0
 8109390:	d003      	beq.n	810939a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109392:	6878      	ldr	r0, [r7, #4]
 8109394:	f000 f877 	bl	8109486 <HAL_TIM_IC_CaptureCallback>
 8109398:	e005      	b.n	81093a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810939a:	6878      	ldr	r0, [r7, #4]
 810939c:	f000 f869 	bl	8109472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81093a0:	6878      	ldr	r0, [r7, #4]
 81093a2:	f000 f87a 	bl	810949a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81093a6:	687b      	ldr	r3, [r7, #4]
 81093a8:	2200      	movs	r2, #0
 81093aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81093ac:	68bb      	ldr	r3, [r7, #8]
 81093ae:	f003 0301 	and.w	r3, r3, #1
 81093b2:	2b00      	cmp	r3, #0
 81093b4:	d00c      	beq.n	81093d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	f003 0301 	and.w	r3, r3, #1
 81093bc:	2b00      	cmp	r3, #0
 81093be:	d007      	beq.n	81093d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	681b      	ldr	r3, [r3, #0]
 81093c4:	f06f 0201 	mvn.w	r2, #1
 81093c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81093ca:	6878      	ldr	r0, [r7, #4]
 81093cc:	f7f8 fd00 	bl	8101dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81093d0:	68bb      	ldr	r3, [r7, #8]
 81093d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81093d6:	2b00      	cmp	r3, #0
 81093d8:	d104      	bne.n	81093e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 81093da:	68bb      	ldr	r3, [r7, #8]
 81093dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81093e0:	2b00      	cmp	r3, #0
 81093e2:	d00c      	beq.n	81093fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81093e4:	68fb      	ldr	r3, [r7, #12]
 81093e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81093ea:	2b00      	cmp	r3, #0
 81093ec:	d007      	beq.n	81093fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	681b      	ldr	r3, [r3, #0]
 81093f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 81093f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81093f8:	6878      	ldr	r0, [r7, #4]
 81093fa:	f000 f913 	bl	8109624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81093fe:	68bb      	ldr	r3, [r7, #8]
 8109400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109404:	2b00      	cmp	r3, #0
 8109406:	d00c      	beq.n	8109422 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8109408:	68fb      	ldr	r3, [r7, #12]
 810940a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810940e:	2b00      	cmp	r3, #0
 8109410:	d007      	beq.n	8109422 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	681b      	ldr	r3, [r3, #0]
 8109416:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810941a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810941c:	6878      	ldr	r0, [r7, #4]
 810941e:	f000 f90b 	bl	8109638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8109422:	68bb      	ldr	r3, [r7, #8]
 8109424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109428:	2b00      	cmp	r3, #0
 810942a:	d00c      	beq.n	8109446 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810942c:	68fb      	ldr	r3, [r7, #12]
 810942e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109432:	2b00      	cmp	r3, #0
 8109434:	d007      	beq.n	8109446 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8109436:	687b      	ldr	r3, [r7, #4]
 8109438:	681b      	ldr	r3, [r3, #0]
 810943a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810943e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109440:	6878      	ldr	r0, [r7, #4]
 8109442:	f000 f834 	bl	81094ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8109446:	68bb      	ldr	r3, [r7, #8]
 8109448:	f003 0320 	and.w	r3, r3, #32
 810944c:	2b00      	cmp	r3, #0
 810944e:	d00c      	beq.n	810946a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109450:	68fb      	ldr	r3, [r7, #12]
 8109452:	f003 0320 	and.w	r3, r3, #32
 8109456:	2b00      	cmp	r3, #0
 8109458:	d007      	beq.n	810946a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	681b      	ldr	r3, [r3, #0]
 810945e:	f06f 0220 	mvn.w	r2, #32
 8109462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109464:	6878      	ldr	r0, [r7, #4]
 8109466:	f000 f8d3 	bl	8109610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810946a:	bf00      	nop
 810946c:	3710      	adds	r7, #16
 810946e:	46bd      	mov	sp, r7
 8109470:	bd80      	pop	{r7, pc}

08109472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109472:	b480      	push	{r7}
 8109474:	b083      	sub	sp, #12
 8109476:	af00      	add	r7, sp, #0
 8109478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810947a:	bf00      	nop
 810947c:	370c      	adds	r7, #12
 810947e:	46bd      	mov	sp, r7
 8109480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109484:	4770      	bx	lr

08109486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109486:	b480      	push	{r7}
 8109488:	b083      	sub	sp, #12
 810948a:	af00      	add	r7, sp, #0
 810948c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810948e:	bf00      	nop
 8109490:	370c      	adds	r7, #12
 8109492:	46bd      	mov	sp, r7
 8109494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109498:	4770      	bx	lr

0810949a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810949a:	b480      	push	{r7}
 810949c:	b083      	sub	sp, #12
 810949e:	af00      	add	r7, sp, #0
 81094a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81094a2:	bf00      	nop
 81094a4:	370c      	adds	r7, #12
 81094a6:	46bd      	mov	sp, r7
 81094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ac:	4770      	bx	lr

081094ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81094ae:	b480      	push	{r7}
 81094b0:	b083      	sub	sp, #12
 81094b2:	af00      	add	r7, sp, #0
 81094b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81094b6:	bf00      	nop
 81094b8:	370c      	adds	r7, #12
 81094ba:	46bd      	mov	sp, r7
 81094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094c0:	4770      	bx	lr
	...

081094c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81094c4:	b480      	push	{r7}
 81094c6:	b085      	sub	sp, #20
 81094c8:	af00      	add	r7, sp, #0
 81094ca:	6078      	str	r0, [r7, #4]
 81094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	681b      	ldr	r3, [r3, #0]
 81094d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	4a46      	ldr	r2, [pc, #280]	@ (81095f0 <TIM_Base_SetConfig+0x12c>)
 81094d8:	4293      	cmp	r3, r2
 81094da:	d013      	beq.n	8109504 <TIM_Base_SetConfig+0x40>
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81094e2:	d00f      	beq.n	8109504 <TIM_Base_SetConfig+0x40>
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	4a43      	ldr	r2, [pc, #268]	@ (81095f4 <TIM_Base_SetConfig+0x130>)
 81094e8:	4293      	cmp	r3, r2
 81094ea:	d00b      	beq.n	8109504 <TIM_Base_SetConfig+0x40>
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	4a42      	ldr	r2, [pc, #264]	@ (81095f8 <TIM_Base_SetConfig+0x134>)
 81094f0:	4293      	cmp	r3, r2
 81094f2:	d007      	beq.n	8109504 <TIM_Base_SetConfig+0x40>
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	4a41      	ldr	r2, [pc, #260]	@ (81095fc <TIM_Base_SetConfig+0x138>)
 81094f8:	4293      	cmp	r3, r2
 81094fa:	d003      	beq.n	8109504 <TIM_Base_SetConfig+0x40>
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	4a40      	ldr	r2, [pc, #256]	@ (8109600 <TIM_Base_SetConfig+0x13c>)
 8109500:	4293      	cmp	r3, r2
 8109502:	d108      	bne.n	8109516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109504:	68fb      	ldr	r3, [r7, #12]
 8109506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810950a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810950c:	683b      	ldr	r3, [r7, #0]
 810950e:	685b      	ldr	r3, [r3, #4]
 8109510:	68fa      	ldr	r2, [r7, #12]
 8109512:	4313      	orrs	r3, r2
 8109514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	4a35      	ldr	r2, [pc, #212]	@ (81095f0 <TIM_Base_SetConfig+0x12c>)
 810951a:	4293      	cmp	r3, r2
 810951c:	d01f      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 810951e:	687b      	ldr	r3, [r7, #4]
 8109520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109524:	d01b      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	4a32      	ldr	r2, [pc, #200]	@ (81095f4 <TIM_Base_SetConfig+0x130>)
 810952a:	4293      	cmp	r3, r2
 810952c:	d017      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 810952e:	687b      	ldr	r3, [r7, #4]
 8109530:	4a31      	ldr	r2, [pc, #196]	@ (81095f8 <TIM_Base_SetConfig+0x134>)
 8109532:	4293      	cmp	r3, r2
 8109534:	d013      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	4a30      	ldr	r2, [pc, #192]	@ (81095fc <TIM_Base_SetConfig+0x138>)
 810953a:	4293      	cmp	r3, r2
 810953c:	d00f      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	4a2f      	ldr	r2, [pc, #188]	@ (8109600 <TIM_Base_SetConfig+0x13c>)
 8109542:	4293      	cmp	r3, r2
 8109544:	d00b      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	4a2e      	ldr	r2, [pc, #184]	@ (8109604 <TIM_Base_SetConfig+0x140>)
 810954a:	4293      	cmp	r3, r2
 810954c:	d007      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	4a2d      	ldr	r2, [pc, #180]	@ (8109608 <TIM_Base_SetConfig+0x144>)
 8109552:	4293      	cmp	r3, r2
 8109554:	d003      	beq.n	810955e <TIM_Base_SetConfig+0x9a>
 8109556:	687b      	ldr	r3, [r7, #4]
 8109558:	4a2c      	ldr	r2, [pc, #176]	@ (810960c <TIM_Base_SetConfig+0x148>)
 810955a:	4293      	cmp	r3, r2
 810955c:	d108      	bne.n	8109570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810955e:	68fb      	ldr	r3, [r7, #12]
 8109560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109566:	683b      	ldr	r3, [r7, #0]
 8109568:	68db      	ldr	r3, [r3, #12]
 810956a:	68fa      	ldr	r2, [r7, #12]
 810956c:	4313      	orrs	r3, r2
 810956e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109570:	68fb      	ldr	r3, [r7, #12]
 8109572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109576:	683b      	ldr	r3, [r7, #0]
 8109578:	695b      	ldr	r3, [r3, #20]
 810957a:	4313      	orrs	r3, r2
 810957c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810957e:	687b      	ldr	r3, [r7, #4]
 8109580:	68fa      	ldr	r2, [r7, #12]
 8109582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109584:	683b      	ldr	r3, [r7, #0]
 8109586:	689a      	ldr	r2, [r3, #8]
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810958c:	683b      	ldr	r3, [r7, #0]
 810958e:	681a      	ldr	r2, [r3, #0]
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	4a16      	ldr	r2, [pc, #88]	@ (81095f0 <TIM_Base_SetConfig+0x12c>)
 8109598:	4293      	cmp	r3, r2
 810959a:	d00f      	beq.n	81095bc <TIM_Base_SetConfig+0xf8>
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	4a18      	ldr	r2, [pc, #96]	@ (8109600 <TIM_Base_SetConfig+0x13c>)
 81095a0:	4293      	cmp	r3, r2
 81095a2:	d00b      	beq.n	81095bc <TIM_Base_SetConfig+0xf8>
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	4a17      	ldr	r2, [pc, #92]	@ (8109604 <TIM_Base_SetConfig+0x140>)
 81095a8:	4293      	cmp	r3, r2
 81095aa:	d007      	beq.n	81095bc <TIM_Base_SetConfig+0xf8>
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	4a16      	ldr	r2, [pc, #88]	@ (8109608 <TIM_Base_SetConfig+0x144>)
 81095b0:	4293      	cmp	r3, r2
 81095b2:	d003      	beq.n	81095bc <TIM_Base_SetConfig+0xf8>
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	4a15      	ldr	r2, [pc, #84]	@ (810960c <TIM_Base_SetConfig+0x148>)
 81095b8:	4293      	cmp	r3, r2
 81095ba:	d103      	bne.n	81095c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81095bc:	683b      	ldr	r3, [r7, #0]
 81095be:	691a      	ldr	r2, [r3, #16]
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	2201      	movs	r2, #1
 81095c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	691b      	ldr	r3, [r3, #16]
 81095ce:	f003 0301 	and.w	r3, r3, #1
 81095d2:	2b01      	cmp	r3, #1
 81095d4:	d105      	bne.n	81095e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	691b      	ldr	r3, [r3, #16]
 81095da:	f023 0201 	bic.w	r2, r3, #1
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	611a      	str	r2, [r3, #16]
  }
}
 81095e2:	bf00      	nop
 81095e4:	3714      	adds	r7, #20
 81095e6:	46bd      	mov	sp, r7
 81095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095ec:	4770      	bx	lr
 81095ee:	bf00      	nop
 81095f0:	40010000 	.word	0x40010000
 81095f4:	40000400 	.word	0x40000400
 81095f8:	40000800 	.word	0x40000800
 81095fc:	40000c00 	.word	0x40000c00
 8109600:	40010400 	.word	0x40010400
 8109604:	40014000 	.word	0x40014000
 8109608:	40014400 	.word	0x40014400
 810960c:	40014800 	.word	0x40014800

08109610 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109610:	b480      	push	{r7}
 8109612:	b083      	sub	sp, #12
 8109614:	af00      	add	r7, sp, #0
 8109616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109618:	bf00      	nop
 810961a:	370c      	adds	r7, #12
 810961c:	46bd      	mov	sp, r7
 810961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109622:	4770      	bx	lr

08109624 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109624:	b480      	push	{r7}
 8109626:	b083      	sub	sp, #12
 8109628:	af00      	add	r7, sp, #0
 810962a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810962c:	bf00      	nop
 810962e:	370c      	adds	r7, #12
 8109630:	46bd      	mov	sp, r7
 8109632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109636:	4770      	bx	lr

08109638 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109638:	b480      	push	{r7}
 810963a:	b083      	sub	sp, #12
 810963c:	af00      	add	r7, sp, #0
 810963e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109640:	bf00      	nop
 8109642:	370c      	adds	r7, #12
 8109644:	46bd      	mov	sp, r7
 8109646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810964a:	4770      	bx	lr

0810964c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810964c:	b580      	push	{r7, lr}
 810964e:	b082      	sub	sp, #8
 8109650:	af00      	add	r7, sp, #0
 8109652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	2b00      	cmp	r3, #0
 8109658:	d101      	bne.n	810965e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810965a:	2301      	movs	r3, #1
 810965c:	e042      	b.n	81096e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109664:	2b00      	cmp	r3, #0
 8109666:	d106      	bne.n	8109676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	2200      	movs	r2, #0
 810966c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109670:	6878      	ldr	r0, [r7, #4]
 8109672:	f7f8 fce9 	bl	8102048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	2224      	movs	r2, #36	@ 0x24
 810967a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	681b      	ldr	r3, [r3, #0]
 8109682:	681a      	ldr	r2, [r3, #0]
 8109684:	687b      	ldr	r3, [r7, #4]
 8109686:	681b      	ldr	r3, [r3, #0]
 8109688:	f022 0201 	bic.w	r2, r2, #1
 810968c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109692:	2b00      	cmp	r3, #0
 8109694:	d002      	beq.n	810969c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8109696:	6878      	ldr	r0, [r7, #4]
 8109698:	f001 f9f6 	bl	810aa88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810969c:	6878      	ldr	r0, [r7, #4]
 810969e:	f000 fc8b 	bl	8109fb8 <UART_SetConfig>
 81096a2:	4603      	mov	r3, r0
 81096a4:	2b01      	cmp	r3, #1
 81096a6:	d101      	bne.n	81096ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81096a8:	2301      	movs	r3, #1
 81096aa:	e01b      	b.n	81096e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81096ac:	687b      	ldr	r3, [r7, #4]
 81096ae:	681b      	ldr	r3, [r3, #0]
 81096b0:	685a      	ldr	r2, [r3, #4]
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	681b      	ldr	r3, [r3, #0]
 81096b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81096ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	681b      	ldr	r3, [r3, #0]
 81096c0:	689a      	ldr	r2, [r3, #8]
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	681b      	ldr	r3, [r3, #0]
 81096c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81096ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	681b      	ldr	r3, [r3, #0]
 81096d0:	681a      	ldr	r2, [r3, #0]
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	681b      	ldr	r3, [r3, #0]
 81096d6:	f042 0201 	orr.w	r2, r2, #1
 81096da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81096dc:	6878      	ldr	r0, [r7, #4]
 81096de:	f001 fa75 	bl	810abcc <UART_CheckIdleState>
 81096e2:	4603      	mov	r3, r0
}
 81096e4:	4618      	mov	r0, r3
 81096e6:	3708      	adds	r7, #8
 81096e8:	46bd      	mov	sp, r7
 81096ea:	bd80      	pop	{r7, pc}

081096ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81096ec:	b580      	push	{r7, lr}
 81096ee:	b08a      	sub	sp, #40	@ 0x28
 81096f0:	af02      	add	r7, sp, #8
 81096f2:	60f8      	str	r0, [r7, #12]
 81096f4:	60b9      	str	r1, [r7, #8]
 81096f6:	603b      	str	r3, [r7, #0]
 81096f8:	4613      	mov	r3, r2
 81096fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81096fc:	68fb      	ldr	r3, [r7, #12]
 81096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109702:	2b20      	cmp	r3, #32
 8109704:	d17b      	bne.n	81097fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109706:	68bb      	ldr	r3, [r7, #8]
 8109708:	2b00      	cmp	r3, #0
 810970a:	d002      	beq.n	8109712 <HAL_UART_Transmit+0x26>
 810970c:	88fb      	ldrh	r3, [r7, #6]
 810970e:	2b00      	cmp	r3, #0
 8109710:	d101      	bne.n	8109716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109712:	2301      	movs	r3, #1
 8109714:	e074      	b.n	8109800 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109716:	68fb      	ldr	r3, [r7, #12]
 8109718:	2200      	movs	r2, #0
 810971a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810971e:	68fb      	ldr	r3, [r7, #12]
 8109720:	2221      	movs	r2, #33	@ 0x21
 8109722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109726:	f7f8 ff0d 	bl	8102544 <HAL_GetTick>
 810972a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810972c:	68fb      	ldr	r3, [r7, #12]
 810972e:	88fa      	ldrh	r2, [r7, #6]
 8109730:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8109734:	68fb      	ldr	r3, [r7, #12]
 8109736:	88fa      	ldrh	r2, [r7, #6]
 8109738:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810973c:	68fb      	ldr	r3, [r7, #12]
 810973e:	689b      	ldr	r3, [r3, #8]
 8109740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109744:	d108      	bne.n	8109758 <HAL_UART_Transmit+0x6c>
 8109746:	68fb      	ldr	r3, [r7, #12]
 8109748:	691b      	ldr	r3, [r3, #16]
 810974a:	2b00      	cmp	r3, #0
 810974c:	d104      	bne.n	8109758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810974e:	2300      	movs	r3, #0
 8109750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109752:	68bb      	ldr	r3, [r7, #8]
 8109754:	61bb      	str	r3, [r7, #24]
 8109756:	e003      	b.n	8109760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109758:	68bb      	ldr	r3, [r7, #8]
 810975a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810975c:	2300      	movs	r3, #0
 810975e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109760:	e030      	b.n	81097c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109762:	683b      	ldr	r3, [r7, #0]
 8109764:	9300      	str	r3, [sp, #0]
 8109766:	697b      	ldr	r3, [r7, #20]
 8109768:	2200      	movs	r2, #0
 810976a:	2180      	movs	r1, #128	@ 0x80
 810976c:	68f8      	ldr	r0, [r7, #12]
 810976e:	f001 fad7 	bl	810ad20 <UART_WaitOnFlagUntilTimeout>
 8109772:	4603      	mov	r3, r0
 8109774:	2b00      	cmp	r3, #0
 8109776:	d005      	beq.n	8109784 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109778:	68fb      	ldr	r3, [r7, #12]
 810977a:	2220      	movs	r2, #32
 810977c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8109780:	2303      	movs	r3, #3
 8109782:	e03d      	b.n	8109800 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8109784:	69fb      	ldr	r3, [r7, #28]
 8109786:	2b00      	cmp	r3, #0
 8109788:	d10b      	bne.n	81097a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810978a:	69bb      	ldr	r3, [r7, #24]
 810978c:	881b      	ldrh	r3, [r3, #0]
 810978e:	461a      	mov	r2, r3
 8109790:	68fb      	ldr	r3, [r7, #12]
 8109792:	681b      	ldr	r3, [r3, #0]
 8109794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109798:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810979a:	69bb      	ldr	r3, [r7, #24]
 810979c:	3302      	adds	r3, #2
 810979e:	61bb      	str	r3, [r7, #24]
 81097a0:	e007      	b.n	81097b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81097a2:	69fb      	ldr	r3, [r7, #28]
 81097a4:	781a      	ldrb	r2, [r3, #0]
 81097a6:	68fb      	ldr	r3, [r7, #12]
 81097a8:	681b      	ldr	r3, [r3, #0]
 81097aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81097ac:	69fb      	ldr	r3, [r7, #28]
 81097ae:	3301      	adds	r3, #1
 81097b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81097b2:	68fb      	ldr	r3, [r7, #12]
 81097b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81097b8:	b29b      	uxth	r3, r3
 81097ba:	3b01      	subs	r3, #1
 81097bc:	b29a      	uxth	r2, r3
 81097be:	68fb      	ldr	r3, [r7, #12]
 81097c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81097c4:	68fb      	ldr	r3, [r7, #12]
 81097c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81097ca:	b29b      	uxth	r3, r3
 81097cc:	2b00      	cmp	r3, #0
 81097ce:	d1c8      	bne.n	8109762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81097d0:	683b      	ldr	r3, [r7, #0]
 81097d2:	9300      	str	r3, [sp, #0]
 81097d4:	697b      	ldr	r3, [r7, #20]
 81097d6:	2200      	movs	r2, #0
 81097d8:	2140      	movs	r1, #64	@ 0x40
 81097da:	68f8      	ldr	r0, [r7, #12]
 81097dc:	f001 faa0 	bl	810ad20 <UART_WaitOnFlagUntilTimeout>
 81097e0:	4603      	mov	r3, r0
 81097e2:	2b00      	cmp	r3, #0
 81097e4:	d005      	beq.n	81097f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81097e6:	68fb      	ldr	r3, [r7, #12]
 81097e8:	2220      	movs	r2, #32
 81097ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81097ee:	2303      	movs	r3, #3
 81097f0:	e006      	b.n	8109800 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81097f2:	68fb      	ldr	r3, [r7, #12]
 81097f4:	2220      	movs	r2, #32
 81097f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81097fa:	2300      	movs	r3, #0
 81097fc:	e000      	b.n	8109800 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81097fe:	2302      	movs	r3, #2
  }
}
 8109800:	4618      	mov	r0, r3
 8109802:	3720      	adds	r7, #32
 8109804:	46bd      	mov	sp, r7
 8109806:	bd80      	pop	{r7, pc}

08109808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109808:	b580      	push	{r7, lr}
 810980a:	b0ba      	sub	sp, #232	@ 0xe8
 810980c:	af00      	add	r7, sp, #0
 810980e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109810:	687b      	ldr	r3, [r7, #4]
 8109812:	681b      	ldr	r3, [r3, #0]
 8109814:	69db      	ldr	r3, [r3, #28]
 8109816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810981a:	687b      	ldr	r3, [r7, #4]
 810981c:	681b      	ldr	r3, [r3, #0]
 810981e:	681b      	ldr	r3, [r3, #0]
 8109820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109824:	687b      	ldr	r3, [r7, #4]
 8109826:	681b      	ldr	r3, [r3, #0]
 8109828:	689b      	ldr	r3, [r3, #8]
 810982a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810982e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8109832:	f640 030f 	movw	r3, #2063	@ 0x80f
 8109836:	4013      	ands	r3, r2
 8109838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810983c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109840:	2b00      	cmp	r3, #0
 8109842:	d11b      	bne.n	810987c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109848:	f003 0320 	and.w	r3, r3, #32
 810984c:	2b00      	cmp	r3, #0
 810984e:	d015      	beq.n	810987c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109854:	f003 0320 	and.w	r3, r3, #32
 8109858:	2b00      	cmp	r3, #0
 810985a:	d105      	bne.n	8109868 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810985c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109864:	2b00      	cmp	r3, #0
 8109866:	d009      	beq.n	810987c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810986c:	2b00      	cmp	r3, #0
 810986e:	f000 8379 	beq.w	8109f64 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109876:	6878      	ldr	r0, [r7, #4]
 8109878:	4798      	blx	r3
      }
      return;
 810987a:	e373      	b.n	8109f64 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810987c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109880:	2b00      	cmp	r3, #0
 8109882:	f000 8123 	beq.w	8109acc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8109886:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810988a:	4b8d      	ldr	r3, [pc, #564]	@ (8109ac0 <HAL_UART_IRQHandler+0x2b8>)
 810988c:	4013      	ands	r3, r2
 810988e:	2b00      	cmp	r3, #0
 8109890:	d106      	bne.n	81098a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8109892:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8109896:	4b8b      	ldr	r3, [pc, #556]	@ (8109ac4 <HAL_UART_IRQHandler+0x2bc>)
 8109898:	4013      	ands	r3, r2
 810989a:	2b00      	cmp	r3, #0
 810989c:	f000 8116 	beq.w	8109acc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81098a4:	f003 0301 	and.w	r3, r3, #1
 81098a8:	2b00      	cmp	r3, #0
 81098aa:	d011      	beq.n	81098d0 <HAL_UART_IRQHandler+0xc8>
 81098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81098b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81098b4:	2b00      	cmp	r3, #0
 81098b6:	d00b      	beq.n	81098d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81098b8:	687b      	ldr	r3, [r7, #4]
 81098ba:	681b      	ldr	r3, [r3, #0]
 81098bc:	2201      	movs	r2, #1
 81098be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81098c6:	f043 0201 	orr.w	r2, r3, #1
 81098ca:	687b      	ldr	r3, [r7, #4]
 81098cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81098d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81098d4:	f003 0302 	and.w	r3, r3, #2
 81098d8:	2b00      	cmp	r3, #0
 81098da:	d011      	beq.n	8109900 <HAL_UART_IRQHandler+0xf8>
 81098dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81098e0:	f003 0301 	and.w	r3, r3, #1
 81098e4:	2b00      	cmp	r3, #0
 81098e6:	d00b      	beq.n	8109900 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81098e8:	687b      	ldr	r3, [r7, #4]
 81098ea:	681b      	ldr	r3, [r3, #0]
 81098ec:	2202      	movs	r2, #2
 81098ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81098f0:	687b      	ldr	r3, [r7, #4]
 81098f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81098f6:	f043 0204 	orr.w	r2, r3, #4
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109904:	f003 0304 	and.w	r3, r3, #4
 8109908:	2b00      	cmp	r3, #0
 810990a:	d011      	beq.n	8109930 <HAL_UART_IRQHandler+0x128>
 810990c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109910:	f003 0301 	and.w	r3, r3, #1
 8109914:	2b00      	cmp	r3, #0
 8109916:	d00b      	beq.n	8109930 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	681b      	ldr	r3, [r3, #0]
 810991c:	2204      	movs	r2, #4
 810991e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109920:	687b      	ldr	r3, [r7, #4]
 8109922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109926:	f043 0202 	orr.w	r2, r3, #2
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109934:	f003 0308 	and.w	r3, r3, #8
 8109938:	2b00      	cmp	r3, #0
 810993a:	d017      	beq.n	810996c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810993c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109940:	f003 0320 	and.w	r3, r3, #32
 8109944:	2b00      	cmp	r3, #0
 8109946:	d105      	bne.n	8109954 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109948:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810994c:	4b5c      	ldr	r3, [pc, #368]	@ (8109ac0 <HAL_UART_IRQHandler+0x2b8>)
 810994e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109950:	2b00      	cmp	r3, #0
 8109952:	d00b      	beq.n	810996c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	681b      	ldr	r3, [r3, #0]
 8109958:	2208      	movs	r2, #8
 810995a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810995c:	687b      	ldr	r3, [r7, #4]
 810995e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109962:	f043 0208 	orr.w	r2, r3, #8
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810996c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109974:	2b00      	cmp	r3, #0
 8109976:	d012      	beq.n	810999e <HAL_UART_IRQHandler+0x196>
 8109978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810997c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8109980:	2b00      	cmp	r3, #0
 8109982:	d00c      	beq.n	810999e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109984:	687b      	ldr	r3, [r7, #4]
 8109986:	681b      	ldr	r3, [r3, #0]
 8109988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810998c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810998e:	687b      	ldr	r3, [r7, #4]
 8109990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109994:	f043 0220 	orr.w	r2, r3, #32
 8109998:	687b      	ldr	r3, [r7, #4]
 810999a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810999e:	687b      	ldr	r3, [r7, #4]
 81099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81099a4:	2b00      	cmp	r3, #0
 81099a6:	f000 82df 	beq.w	8109f68 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81099ae:	f003 0320 	and.w	r3, r3, #32
 81099b2:	2b00      	cmp	r3, #0
 81099b4:	d013      	beq.n	81099de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81099ba:	f003 0320 	and.w	r3, r3, #32
 81099be:	2b00      	cmp	r3, #0
 81099c0:	d105      	bne.n	81099ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81099c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81099c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81099ca:	2b00      	cmp	r3, #0
 81099cc:	d007      	beq.n	81099de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d003      	beq.n	81099de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81099da:	6878      	ldr	r0, [r7, #4]
 81099dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81099e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	689b      	ldr	r3, [r3, #8]
 81099ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81099f2:	2b40      	cmp	r3, #64	@ 0x40
 81099f4:	d005      	beq.n	8109a02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81099f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 81099fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81099fe:	2b00      	cmp	r3, #0
 8109a00:	d054      	beq.n	8109aac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8109a02:	6878      	ldr	r0, [r7, #4]
 8109a04:	f001 fb1c 	bl	810b040 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109a08:	687b      	ldr	r3, [r7, #4]
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	689b      	ldr	r3, [r3, #8]
 8109a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109a12:	2b40      	cmp	r3, #64	@ 0x40
 8109a14:	d146      	bne.n	8109aa4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	681b      	ldr	r3, [r3, #0]
 8109a1a:	3308      	adds	r3, #8
 8109a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8109a24:	e853 3f00 	ldrex	r3, [r3]
 8109a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8109a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8109a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	681b      	ldr	r3, [r3, #0]
 8109a3c:	3308      	adds	r3, #8
 8109a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8109a42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8109a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8109a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8109a52:	e841 2300 	strex	r3, r2, [r1]
 8109a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8109a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8109a5e:	2b00      	cmp	r3, #0
 8109a60:	d1d9      	bne.n	8109a16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109a68:	2b00      	cmp	r3, #0
 8109a6a:	d017      	beq.n	8109a9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109a72:	4a15      	ldr	r2, [pc, #84]	@ (8109ac8 <HAL_UART_IRQHandler+0x2c0>)
 8109a74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109a7c:	4618      	mov	r0, r3
 8109a7e:	f7fa fcd5 	bl	810442c <HAL_DMA_Abort_IT>
 8109a82:	4603      	mov	r3, r0
 8109a84:	2b00      	cmp	r3, #0
 8109a86:	d019      	beq.n	8109abc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109a90:	687a      	ldr	r2, [r7, #4]
 8109a92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8109a96:	4610      	mov	r0, r2
 8109a98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109a9a:	e00f      	b.n	8109abc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8109a9c:	6878      	ldr	r0, [r7, #4]
 8109a9e:	f000 fa81 	bl	8109fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109aa2:	e00b      	b.n	8109abc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8109aa4:	6878      	ldr	r0, [r7, #4]
 8109aa6:	f000 fa7d 	bl	8109fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109aaa:	e007      	b.n	8109abc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8109aac:	6878      	ldr	r0, [r7, #4]
 8109aae:	f000 fa79 	bl	8109fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	2200      	movs	r2, #0
 8109ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8109aba:	e255      	b.n	8109f68 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109abc:	bf00      	nop
    return;
 8109abe:	e253      	b.n	8109f68 <HAL_UART_IRQHandler+0x760>
 8109ac0:	10000001 	.word	0x10000001
 8109ac4:	04000120 	.word	0x04000120
 8109ac8:	0810b10d 	.word	0x0810b10d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109ad0:	2b01      	cmp	r3, #1
 8109ad2:	f040 81e9 	bne.w	8109ea8 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8109ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109ada:	f003 0310 	and.w	r3, r3, #16
 8109ade:	2b00      	cmp	r3, #0
 8109ae0:	f000 81e2 	beq.w	8109ea8 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8109ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109ae8:	f003 0310 	and.w	r3, r3, #16
 8109aec:	2b00      	cmp	r3, #0
 8109aee:	f000 81db 	beq.w	8109ea8 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	681b      	ldr	r3, [r3, #0]
 8109af6:	2210      	movs	r2, #16
 8109af8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	681b      	ldr	r3, [r3, #0]
 8109afe:	689b      	ldr	r3, [r3, #8]
 8109b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109b04:	2b40      	cmp	r3, #64	@ 0x40
 8109b06:	f040 8151 	bne.w	8109dac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b10:	681b      	ldr	r3, [r3, #0]
 8109b12:	4a96      	ldr	r2, [pc, #600]	@ (8109d6c <HAL_UART_IRQHandler+0x564>)
 8109b14:	4293      	cmp	r3, r2
 8109b16:	d068      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b18:	687b      	ldr	r3, [r7, #4]
 8109b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b1e:	681b      	ldr	r3, [r3, #0]
 8109b20:	4a93      	ldr	r2, [pc, #588]	@ (8109d70 <HAL_UART_IRQHandler+0x568>)
 8109b22:	4293      	cmp	r3, r2
 8109b24:	d061      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b2c:	681b      	ldr	r3, [r3, #0]
 8109b2e:	4a91      	ldr	r2, [pc, #580]	@ (8109d74 <HAL_UART_IRQHandler+0x56c>)
 8109b30:	4293      	cmp	r3, r2
 8109b32:	d05a      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b3a:	681b      	ldr	r3, [r3, #0]
 8109b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8109d78 <HAL_UART_IRQHandler+0x570>)
 8109b3e:	4293      	cmp	r3, r2
 8109b40:	d053      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b48:	681b      	ldr	r3, [r3, #0]
 8109b4a:	4a8c      	ldr	r2, [pc, #560]	@ (8109d7c <HAL_UART_IRQHandler+0x574>)
 8109b4c:	4293      	cmp	r3, r2
 8109b4e:	d04c      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b56:	681b      	ldr	r3, [r3, #0]
 8109b58:	4a89      	ldr	r2, [pc, #548]	@ (8109d80 <HAL_UART_IRQHandler+0x578>)
 8109b5a:	4293      	cmp	r3, r2
 8109b5c:	d045      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b5e:	687b      	ldr	r3, [r7, #4]
 8109b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b64:	681b      	ldr	r3, [r3, #0]
 8109b66:	4a87      	ldr	r2, [pc, #540]	@ (8109d84 <HAL_UART_IRQHandler+0x57c>)
 8109b68:	4293      	cmp	r3, r2
 8109b6a:	d03e      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b6c:	687b      	ldr	r3, [r7, #4]
 8109b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b72:	681b      	ldr	r3, [r3, #0]
 8109b74:	4a84      	ldr	r2, [pc, #528]	@ (8109d88 <HAL_UART_IRQHandler+0x580>)
 8109b76:	4293      	cmp	r3, r2
 8109b78:	d037      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b7a:	687b      	ldr	r3, [r7, #4]
 8109b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b80:	681b      	ldr	r3, [r3, #0]
 8109b82:	4a82      	ldr	r2, [pc, #520]	@ (8109d8c <HAL_UART_IRQHandler+0x584>)
 8109b84:	4293      	cmp	r3, r2
 8109b86:	d030      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	4a7f      	ldr	r2, [pc, #508]	@ (8109d90 <HAL_UART_IRQHandler+0x588>)
 8109b92:	4293      	cmp	r3, r2
 8109b94:	d029      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109b96:	687b      	ldr	r3, [r7, #4]
 8109b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109b9c:	681b      	ldr	r3, [r3, #0]
 8109b9e:	4a7d      	ldr	r2, [pc, #500]	@ (8109d94 <HAL_UART_IRQHandler+0x58c>)
 8109ba0:	4293      	cmp	r3, r2
 8109ba2:	d022      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	4a7a      	ldr	r2, [pc, #488]	@ (8109d98 <HAL_UART_IRQHandler+0x590>)
 8109bae:	4293      	cmp	r3, r2
 8109bb0:	d01b      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109bb8:	681b      	ldr	r3, [r3, #0]
 8109bba:	4a78      	ldr	r2, [pc, #480]	@ (8109d9c <HAL_UART_IRQHandler+0x594>)
 8109bbc:	4293      	cmp	r3, r2
 8109bbe:	d014      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109bc6:	681b      	ldr	r3, [r3, #0]
 8109bc8:	4a75      	ldr	r2, [pc, #468]	@ (8109da0 <HAL_UART_IRQHandler+0x598>)
 8109bca:	4293      	cmp	r3, r2
 8109bcc:	d00d      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	4a73      	ldr	r2, [pc, #460]	@ (8109da4 <HAL_UART_IRQHandler+0x59c>)
 8109bd8:	4293      	cmp	r3, r2
 8109bda:	d006      	beq.n	8109bea <HAL_UART_IRQHandler+0x3e2>
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109be2:	681b      	ldr	r3, [r3, #0]
 8109be4:	4a70      	ldr	r2, [pc, #448]	@ (8109da8 <HAL_UART_IRQHandler+0x5a0>)
 8109be6:	4293      	cmp	r3, r2
 8109be8:	d106      	bne.n	8109bf8 <HAL_UART_IRQHandler+0x3f0>
 8109bea:	687b      	ldr	r3, [r7, #4]
 8109bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109bf0:	681b      	ldr	r3, [r3, #0]
 8109bf2:	685b      	ldr	r3, [r3, #4]
 8109bf4:	b29b      	uxth	r3, r3
 8109bf6:	e005      	b.n	8109c04 <HAL_UART_IRQHandler+0x3fc>
 8109bf8:	687b      	ldr	r3, [r7, #4]
 8109bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	685b      	ldr	r3, [r3, #4]
 8109c02:	b29b      	uxth	r3, r3
 8109c04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8109c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8109c0c:	2b00      	cmp	r3, #0
 8109c0e:	f000 81ad 	beq.w	8109f6c <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8109c12:	687b      	ldr	r3, [r7, #4]
 8109c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109c1c:	429a      	cmp	r2, r3
 8109c1e:	f080 81a5 	bcs.w	8109f6c <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109c28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109c32:	69db      	ldr	r3, [r3, #28]
 8109c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109c38:	f000 8087 	beq.w	8109d4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109c3c:	687b      	ldr	r3, [r7, #4]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8109c48:	e853 3f00 	ldrex	r3, [r3]
 8109c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8109c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8109c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8109c5c:	687b      	ldr	r3, [r7, #4]
 8109c5e:	681b      	ldr	r3, [r3, #0]
 8109c60:	461a      	mov	r2, r3
 8109c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8109c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8109c6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8109c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8109c76:	e841 2300 	strex	r3, r2, [r1]
 8109c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8109c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8109c82:	2b00      	cmp	r3, #0
 8109c84:	d1da      	bne.n	8109c3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	681b      	ldr	r3, [r3, #0]
 8109c8a:	3308      	adds	r3, #8
 8109c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8109c90:	e853 3f00 	ldrex	r3, [r3]
 8109c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8109c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109c98:	f023 0301 	bic.w	r3, r3, #1
 8109c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	681b      	ldr	r3, [r3, #0]
 8109ca4:	3308      	adds	r3, #8
 8109ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8109caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8109cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8109cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8109cb6:	e841 2300 	strex	r3, r2, [r1]
 8109cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8109cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d1e1      	bne.n	8109c86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	681b      	ldr	r3, [r3, #0]
 8109cc6:	3308      	adds	r3, #8
 8109cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8109ccc:	e853 3f00 	ldrex	r3, [r3]
 8109cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8109cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8109cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8109cdc:	687b      	ldr	r3, [r7, #4]
 8109cde:	681b      	ldr	r3, [r3, #0]
 8109ce0:	3308      	adds	r3, #8
 8109ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8109ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8109ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8109cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8109cee:	e841 2300 	strex	r3, r2, [r1]
 8109cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8109cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8109cf6:	2b00      	cmp	r3, #0
 8109cf8:	d1e3      	bne.n	8109cc2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	2220      	movs	r2, #32
 8109cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109d02:	687b      	ldr	r3, [r7, #4]
 8109d04:	2200      	movs	r2, #0
 8109d06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	681b      	ldr	r3, [r3, #0]
 8109d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109d10:	e853 3f00 	ldrex	r3, [r3]
 8109d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8109d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109d18:	f023 0310 	bic.w	r3, r3, #16
 8109d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	681b      	ldr	r3, [r3, #0]
 8109d24:	461a      	mov	r2, r3
 8109d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8109d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8109d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8109d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8109d32:	e841 2300 	strex	r3, r2, [r1]
 8109d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8109d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109d3a:	2b00      	cmp	r3, #0
 8109d3c:	d1e4      	bne.n	8109d08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109d44:	4618      	mov	r0, r3
 8109d46:	f7fa f853 	bl	8103df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8109d4a:	687b      	ldr	r3, [r7, #4]
 8109d4c:	2202      	movs	r2, #2
 8109d4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109d5c:	b29b      	uxth	r3, r3
 8109d5e:	1ad3      	subs	r3, r2, r3
 8109d60:	b29b      	uxth	r3, r3
 8109d62:	4619      	mov	r1, r3
 8109d64:	6878      	ldr	r0, [r7, #4]
 8109d66:	f7f7 fe4b 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8109d6a:	e0ff      	b.n	8109f6c <HAL_UART_IRQHandler+0x764>
 8109d6c:	40020010 	.word	0x40020010
 8109d70:	40020028 	.word	0x40020028
 8109d74:	40020040 	.word	0x40020040
 8109d78:	40020058 	.word	0x40020058
 8109d7c:	40020070 	.word	0x40020070
 8109d80:	40020088 	.word	0x40020088
 8109d84:	400200a0 	.word	0x400200a0
 8109d88:	400200b8 	.word	0x400200b8
 8109d8c:	40020410 	.word	0x40020410
 8109d90:	40020428 	.word	0x40020428
 8109d94:	40020440 	.word	0x40020440
 8109d98:	40020458 	.word	0x40020458
 8109d9c:	40020470 	.word	0x40020470
 8109da0:	40020488 	.word	0x40020488
 8109da4:	400204a0 	.word	0x400204a0
 8109da8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8109dac:	687b      	ldr	r3, [r7, #4]
 8109dae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109db8:	b29b      	uxth	r3, r3
 8109dba:	1ad3      	subs	r3, r2, r3
 8109dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109dc6:	b29b      	uxth	r3, r3
 8109dc8:	2b00      	cmp	r3, #0
 8109dca:	f000 80d1 	beq.w	8109f70 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 8109dce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8109dd2:	2b00      	cmp	r3, #0
 8109dd4:	f000 80cc 	beq.w	8109f70 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	681b      	ldr	r3, [r3, #0]
 8109ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109de0:	e853 3f00 	ldrex	r3, [r3]
 8109de4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	681b      	ldr	r3, [r3, #0]
 8109df4:	461a      	mov	r2, r3
 8109df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8109dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8109dfc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109dfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109e02:	e841 2300 	strex	r3, r2, [r1]
 8109e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109e0a:	2b00      	cmp	r3, #0
 8109e0c:	d1e4      	bne.n	8109dd8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	681b      	ldr	r3, [r3, #0]
 8109e12:	3308      	adds	r3, #8
 8109e14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109e18:	e853 3f00 	ldrex	r3, [r3]
 8109e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8109e1e:	6a3b      	ldr	r3, [r7, #32]
 8109e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8109e24:	f023 0301 	bic.w	r3, r3, #1
 8109e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8109e2c:	687b      	ldr	r3, [r7, #4]
 8109e2e:	681b      	ldr	r3, [r3, #0]
 8109e30:	3308      	adds	r3, #8
 8109e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8109e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8109e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8109e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109e3e:	e841 2300 	strex	r3, r2, [r1]
 8109e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109e46:	2b00      	cmp	r3, #0
 8109e48:	d1e1      	bne.n	8109e0e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	2220      	movs	r2, #32
 8109e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109e52:	687b      	ldr	r3, [r7, #4]
 8109e54:	2200      	movs	r2, #0
 8109e56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	2200      	movs	r2, #0
 8109e5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	681b      	ldr	r3, [r3, #0]
 8109e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109e64:	693b      	ldr	r3, [r7, #16]
 8109e66:	e853 3f00 	ldrex	r3, [r3]
 8109e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8109e6c:	68fb      	ldr	r3, [r7, #12]
 8109e6e:	f023 0310 	bic.w	r3, r3, #16
 8109e72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8109e76:	687b      	ldr	r3, [r7, #4]
 8109e78:	681b      	ldr	r3, [r3, #0]
 8109e7a:	461a      	mov	r2, r3
 8109e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8109e80:	61fb      	str	r3, [r7, #28]
 8109e82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109e84:	69b9      	ldr	r1, [r7, #24]
 8109e86:	69fa      	ldr	r2, [r7, #28]
 8109e88:	e841 2300 	strex	r3, r2, [r1]
 8109e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8109e8e:	697b      	ldr	r3, [r7, #20]
 8109e90:	2b00      	cmp	r3, #0
 8109e92:	d1e4      	bne.n	8109e5e <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8109e94:	687b      	ldr	r3, [r7, #4]
 8109e96:	2202      	movs	r2, #2
 8109e98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8109e9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8109e9e:	4619      	mov	r1, r3
 8109ea0:	6878      	ldr	r0, [r7, #4]
 8109ea2:	f7f7 fdad 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8109ea6:	e063      	b.n	8109f70 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8109ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	d00e      	beq.n	8109ed2 <HAL_UART_IRQHandler+0x6ca>
 8109eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109ebc:	2b00      	cmp	r3, #0
 8109ebe:	d008      	beq.n	8109ed2 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8109ec0:	687b      	ldr	r3, [r7, #4]
 8109ec2:	681b      	ldr	r3, [r3, #0]
 8109ec4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8109ec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8109eca:	6878      	ldr	r0, [r7, #4]
 8109ecc:	f001 fe7c 	bl	810bbc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109ed0:	e051      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8109ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109eda:	2b00      	cmp	r3, #0
 8109edc:	d014      	beq.n	8109f08 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8109ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109ee6:	2b00      	cmp	r3, #0
 8109ee8:	d105      	bne.n	8109ef6 <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8109eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109ef2:	2b00      	cmp	r3, #0
 8109ef4:	d008      	beq.n	8109f08 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 8109ef6:	687b      	ldr	r3, [r7, #4]
 8109ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109efa:	2b00      	cmp	r3, #0
 8109efc:	d03a      	beq.n	8109f74 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109f02:	6878      	ldr	r0, [r7, #4]
 8109f04:	4798      	blx	r3
    }
    return;
 8109f06:	e035      	b.n	8109f74 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8109f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109f10:	2b00      	cmp	r3, #0
 8109f12:	d009      	beq.n	8109f28 <HAL_UART_IRQHandler+0x720>
 8109f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d003      	beq.n	8109f28 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 8109f20:	6878      	ldr	r0, [r7, #4]
 8109f22:	f001 f909 	bl	810b138 <UART_EndTransmit_IT>
    return;
 8109f26:	e026      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8109f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109f30:	2b00      	cmp	r3, #0
 8109f32:	d009      	beq.n	8109f48 <HAL_UART_IRQHandler+0x740>
 8109f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109f38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109f3c:	2b00      	cmp	r3, #0
 8109f3e:	d003      	beq.n	8109f48 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8109f40:	6878      	ldr	r0, [r7, #4]
 8109f42:	f001 fe55 	bl	810bbf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109f46:	e016      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8109f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8109f50:	2b00      	cmp	r3, #0
 8109f52:	d010      	beq.n	8109f76 <HAL_UART_IRQHandler+0x76e>
 8109f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109f58:	2b00      	cmp	r3, #0
 8109f5a:	da0c      	bge.n	8109f76 <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8109f5c:	6878      	ldr	r0, [r7, #4]
 8109f5e:	f001 fe3d 	bl	810bbdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109f62:	e008      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
      return;
 8109f64:	bf00      	nop
 8109f66:	e006      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
    return;
 8109f68:	bf00      	nop
 8109f6a:	e004      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
      return;
 8109f6c:	bf00      	nop
 8109f6e:	e002      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
      return;
 8109f70:	bf00      	nop
 8109f72:	e000      	b.n	8109f76 <HAL_UART_IRQHandler+0x76e>
    return;
 8109f74:	bf00      	nop
  }
}
 8109f76:	37e8      	adds	r7, #232	@ 0xe8
 8109f78:	46bd      	mov	sp, r7
 8109f7a:	bd80      	pop	{r7, pc}

08109f7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8109f7c:	b480      	push	{r7}
 8109f7e:	b083      	sub	sp, #12
 8109f80:	af00      	add	r7, sp, #0
 8109f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8109f84:	bf00      	nop
 8109f86:	370c      	adds	r7, #12
 8109f88:	46bd      	mov	sp, r7
 8109f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f8e:	4770      	bx	lr

08109f90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8109f90:	b480      	push	{r7}
 8109f92:	b083      	sub	sp, #12
 8109f94:	af00      	add	r7, sp, #0
 8109f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8109f98:	bf00      	nop
 8109f9a:	370c      	adds	r7, #12
 8109f9c:	46bd      	mov	sp, r7
 8109f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fa2:	4770      	bx	lr

08109fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8109fa4:	b480      	push	{r7}
 8109fa6:	b083      	sub	sp, #12
 8109fa8:	af00      	add	r7, sp, #0
 8109faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109fac:	bf00      	nop
 8109fae:	370c      	adds	r7, #12
 8109fb0:	46bd      	mov	sp, r7
 8109fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fb6:	4770      	bx	lr

08109fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109fbc:	b092      	sub	sp, #72	@ 0x48
 8109fbe:	af00      	add	r7, sp, #0
 8109fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109fc2:	2300      	movs	r3, #0
 8109fc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109fc8:	697b      	ldr	r3, [r7, #20]
 8109fca:	689a      	ldr	r2, [r3, #8]
 8109fcc:	697b      	ldr	r3, [r7, #20]
 8109fce:	691b      	ldr	r3, [r3, #16]
 8109fd0:	431a      	orrs	r2, r3
 8109fd2:	697b      	ldr	r3, [r7, #20]
 8109fd4:	695b      	ldr	r3, [r3, #20]
 8109fd6:	431a      	orrs	r2, r3
 8109fd8:	697b      	ldr	r3, [r7, #20]
 8109fda:	69db      	ldr	r3, [r3, #28]
 8109fdc:	4313      	orrs	r3, r2
 8109fde:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109fe0:	697b      	ldr	r3, [r7, #20]
 8109fe2:	681b      	ldr	r3, [r3, #0]
 8109fe4:	681a      	ldr	r2, [r3, #0]
 8109fe6:	4bbd      	ldr	r3, [pc, #756]	@ (810a2dc <UART_SetConfig+0x324>)
 8109fe8:	4013      	ands	r3, r2
 8109fea:	697a      	ldr	r2, [r7, #20]
 8109fec:	6812      	ldr	r2, [r2, #0]
 8109fee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109ff0:	430b      	orrs	r3, r1
 8109ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109ff4:	697b      	ldr	r3, [r7, #20]
 8109ff6:	681b      	ldr	r3, [r3, #0]
 8109ff8:	685b      	ldr	r3, [r3, #4]
 8109ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8109ffe:	697b      	ldr	r3, [r7, #20]
 810a000:	68da      	ldr	r2, [r3, #12]
 810a002:	697b      	ldr	r3, [r7, #20]
 810a004:	681b      	ldr	r3, [r3, #0]
 810a006:	430a      	orrs	r2, r1
 810a008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a00a:	697b      	ldr	r3, [r7, #20]
 810a00c:	699b      	ldr	r3, [r3, #24]
 810a00e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a010:	697b      	ldr	r3, [r7, #20]
 810a012:	681b      	ldr	r3, [r3, #0]
 810a014:	4ab2      	ldr	r2, [pc, #712]	@ (810a2e0 <UART_SetConfig+0x328>)
 810a016:	4293      	cmp	r3, r2
 810a018:	d004      	beq.n	810a024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a01a:	697b      	ldr	r3, [r7, #20]
 810a01c:	6a1b      	ldr	r3, [r3, #32]
 810a01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a020:	4313      	orrs	r3, r2
 810a022:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a024:	697b      	ldr	r3, [r7, #20]
 810a026:	681b      	ldr	r3, [r3, #0]
 810a028:	689b      	ldr	r3, [r3, #8]
 810a02a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810a02e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810a032:	697a      	ldr	r2, [r7, #20]
 810a034:	6812      	ldr	r2, [r2, #0]
 810a036:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a038:	430b      	orrs	r3, r1
 810a03a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a03c:	697b      	ldr	r3, [r7, #20]
 810a03e:	681b      	ldr	r3, [r3, #0]
 810a040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a042:	f023 010f 	bic.w	r1, r3, #15
 810a046:	697b      	ldr	r3, [r7, #20]
 810a048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a04a:	697b      	ldr	r3, [r7, #20]
 810a04c:	681b      	ldr	r3, [r3, #0]
 810a04e:	430a      	orrs	r2, r1
 810a050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a052:	697b      	ldr	r3, [r7, #20]
 810a054:	681b      	ldr	r3, [r3, #0]
 810a056:	4aa3      	ldr	r2, [pc, #652]	@ (810a2e4 <UART_SetConfig+0x32c>)
 810a058:	4293      	cmp	r3, r2
 810a05a:	d177      	bne.n	810a14c <UART_SetConfig+0x194>
 810a05c:	4ba2      	ldr	r3, [pc, #648]	@ (810a2e8 <UART_SetConfig+0x330>)
 810a05e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a064:	2b28      	cmp	r3, #40	@ 0x28
 810a066:	d86d      	bhi.n	810a144 <UART_SetConfig+0x18c>
 810a068:	a201      	add	r2, pc, #4	@ (adr r2, 810a070 <UART_SetConfig+0xb8>)
 810a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a06e:	bf00      	nop
 810a070:	0810a115 	.word	0x0810a115
 810a074:	0810a145 	.word	0x0810a145
 810a078:	0810a145 	.word	0x0810a145
 810a07c:	0810a145 	.word	0x0810a145
 810a080:	0810a145 	.word	0x0810a145
 810a084:	0810a145 	.word	0x0810a145
 810a088:	0810a145 	.word	0x0810a145
 810a08c:	0810a145 	.word	0x0810a145
 810a090:	0810a11d 	.word	0x0810a11d
 810a094:	0810a145 	.word	0x0810a145
 810a098:	0810a145 	.word	0x0810a145
 810a09c:	0810a145 	.word	0x0810a145
 810a0a0:	0810a145 	.word	0x0810a145
 810a0a4:	0810a145 	.word	0x0810a145
 810a0a8:	0810a145 	.word	0x0810a145
 810a0ac:	0810a145 	.word	0x0810a145
 810a0b0:	0810a125 	.word	0x0810a125
 810a0b4:	0810a145 	.word	0x0810a145
 810a0b8:	0810a145 	.word	0x0810a145
 810a0bc:	0810a145 	.word	0x0810a145
 810a0c0:	0810a145 	.word	0x0810a145
 810a0c4:	0810a145 	.word	0x0810a145
 810a0c8:	0810a145 	.word	0x0810a145
 810a0cc:	0810a145 	.word	0x0810a145
 810a0d0:	0810a12d 	.word	0x0810a12d
 810a0d4:	0810a145 	.word	0x0810a145
 810a0d8:	0810a145 	.word	0x0810a145
 810a0dc:	0810a145 	.word	0x0810a145
 810a0e0:	0810a145 	.word	0x0810a145
 810a0e4:	0810a145 	.word	0x0810a145
 810a0e8:	0810a145 	.word	0x0810a145
 810a0ec:	0810a145 	.word	0x0810a145
 810a0f0:	0810a135 	.word	0x0810a135
 810a0f4:	0810a145 	.word	0x0810a145
 810a0f8:	0810a145 	.word	0x0810a145
 810a0fc:	0810a145 	.word	0x0810a145
 810a100:	0810a145 	.word	0x0810a145
 810a104:	0810a145 	.word	0x0810a145
 810a108:	0810a145 	.word	0x0810a145
 810a10c:	0810a145 	.word	0x0810a145
 810a110:	0810a13d 	.word	0x0810a13d
 810a114:	2301      	movs	r3, #1
 810a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a11a:	e220      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a11c:	2304      	movs	r3, #4
 810a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a122:	e21c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a124:	2308      	movs	r3, #8
 810a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a12a:	e218      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a12c:	2310      	movs	r3, #16
 810a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a132:	e214      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a134:	2320      	movs	r3, #32
 810a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a13a:	e210      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a13c:	2340      	movs	r3, #64	@ 0x40
 810a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a142:	e20c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a144:	2380      	movs	r3, #128	@ 0x80
 810a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a14a:	e208      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a14c:	697b      	ldr	r3, [r7, #20]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	4a66      	ldr	r2, [pc, #408]	@ (810a2ec <UART_SetConfig+0x334>)
 810a152:	4293      	cmp	r3, r2
 810a154:	d130      	bne.n	810a1b8 <UART_SetConfig+0x200>
 810a156:	4b64      	ldr	r3, [pc, #400]	@ (810a2e8 <UART_SetConfig+0x330>)
 810a158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a15a:	f003 0307 	and.w	r3, r3, #7
 810a15e:	2b05      	cmp	r3, #5
 810a160:	d826      	bhi.n	810a1b0 <UART_SetConfig+0x1f8>
 810a162:	a201      	add	r2, pc, #4	@ (adr r2, 810a168 <UART_SetConfig+0x1b0>)
 810a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a168:	0810a181 	.word	0x0810a181
 810a16c:	0810a189 	.word	0x0810a189
 810a170:	0810a191 	.word	0x0810a191
 810a174:	0810a199 	.word	0x0810a199
 810a178:	0810a1a1 	.word	0x0810a1a1
 810a17c:	0810a1a9 	.word	0x0810a1a9
 810a180:	2300      	movs	r3, #0
 810a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a186:	e1ea      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a188:	2304      	movs	r3, #4
 810a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a18e:	e1e6      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a190:	2308      	movs	r3, #8
 810a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a196:	e1e2      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a198:	2310      	movs	r3, #16
 810a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a19e:	e1de      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1a0:	2320      	movs	r3, #32
 810a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a1a6:	e1da      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1a8:	2340      	movs	r3, #64	@ 0x40
 810a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a1ae:	e1d6      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1b0:	2380      	movs	r3, #128	@ 0x80
 810a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a1b6:	e1d2      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1b8:	697b      	ldr	r3, [r7, #20]
 810a1ba:	681b      	ldr	r3, [r3, #0]
 810a1bc:	4a4c      	ldr	r2, [pc, #304]	@ (810a2f0 <UART_SetConfig+0x338>)
 810a1be:	4293      	cmp	r3, r2
 810a1c0:	d130      	bne.n	810a224 <UART_SetConfig+0x26c>
 810a1c2:	4b49      	ldr	r3, [pc, #292]	@ (810a2e8 <UART_SetConfig+0x330>)
 810a1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a1c6:	f003 0307 	and.w	r3, r3, #7
 810a1ca:	2b05      	cmp	r3, #5
 810a1cc:	d826      	bhi.n	810a21c <UART_SetConfig+0x264>
 810a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 810a1d4 <UART_SetConfig+0x21c>)
 810a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1d4:	0810a1ed 	.word	0x0810a1ed
 810a1d8:	0810a1f5 	.word	0x0810a1f5
 810a1dc:	0810a1fd 	.word	0x0810a1fd
 810a1e0:	0810a205 	.word	0x0810a205
 810a1e4:	0810a20d 	.word	0x0810a20d
 810a1e8:	0810a215 	.word	0x0810a215
 810a1ec:	2300      	movs	r3, #0
 810a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a1f2:	e1b4      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1f4:	2304      	movs	r3, #4
 810a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a1fa:	e1b0      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a1fc:	2308      	movs	r3, #8
 810a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a202:	e1ac      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a204:	2310      	movs	r3, #16
 810a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a20a:	e1a8      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a20c:	2320      	movs	r3, #32
 810a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a212:	e1a4      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a214:	2340      	movs	r3, #64	@ 0x40
 810a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a21a:	e1a0      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a21c:	2380      	movs	r3, #128	@ 0x80
 810a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a222:	e19c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a224:	697b      	ldr	r3, [r7, #20]
 810a226:	681b      	ldr	r3, [r3, #0]
 810a228:	4a32      	ldr	r2, [pc, #200]	@ (810a2f4 <UART_SetConfig+0x33c>)
 810a22a:	4293      	cmp	r3, r2
 810a22c:	d130      	bne.n	810a290 <UART_SetConfig+0x2d8>
 810a22e:	4b2e      	ldr	r3, [pc, #184]	@ (810a2e8 <UART_SetConfig+0x330>)
 810a230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a232:	f003 0307 	and.w	r3, r3, #7
 810a236:	2b05      	cmp	r3, #5
 810a238:	d826      	bhi.n	810a288 <UART_SetConfig+0x2d0>
 810a23a:	a201      	add	r2, pc, #4	@ (adr r2, 810a240 <UART_SetConfig+0x288>)
 810a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a240:	0810a259 	.word	0x0810a259
 810a244:	0810a261 	.word	0x0810a261
 810a248:	0810a269 	.word	0x0810a269
 810a24c:	0810a271 	.word	0x0810a271
 810a250:	0810a279 	.word	0x0810a279
 810a254:	0810a281 	.word	0x0810a281
 810a258:	2300      	movs	r3, #0
 810a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a25e:	e17e      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a260:	2304      	movs	r3, #4
 810a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a266:	e17a      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a268:	2308      	movs	r3, #8
 810a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a26e:	e176      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a270:	2310      	movs	r3, #16
 810a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a276:	e172      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a278:	2320      	movs	r3, #32
 810a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a27e:	e16e      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a280:	2340      	movs	r3, #64	@ 0x40
 810a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a286:	e16a      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a288:	2380      	movs	r3, #128	@ 0x80
 810a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a28e:	e166      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a290:	697b      	ldr	r3, [r7, #20]
 810a292:	681b      	ldr	r3, [r3, #0]
 810a294:	4a18      	ldr	r2, [pc, #96]	@ (810a2f8 <UART_SetConfig+0x340>)
 810a296:	4293      	cmp	r3, r2
 810a298:	d140      	bne.n	810a31c <UART_SetConfig+0x364>
 810a29a:	4b13      	ldr	r3, [pc, #76]	@ (810a2e8 <UART_SetConfig+0x330>)
 810a29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a29e:	f003 0307 	and.w	r3, r3, #7
 810a2a2:	2b05      	cmp	r3, #5
 810a2a4:	d836      	bhi.n	810a314 <UART_SetConfig+0x35c>
 810a2a6:	a201      	add	r2, pc, #4	@ (adr r2, 810a2ac <UART_SetConfig+0x2f4>)
 810a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2ac:	0810a2c5 	.word	0x0810a2c5
 810a2b0:	0810a2cd 	.word	0x0810a2cd
 810a2b4:	0810a2d5 	.word	0x0810a2d5
 810a2b8:	0810a2fd 	.word	0x0810a2fd
 810a2bc:	0810a305 	.word	0x0810a305
 810a2c0:	0810a30d 	.word	0x0810a30d
 810a2c4:	2300      	movs	r3, #0
 810a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a2ca:	e148      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a2cc:	2304      	movs	r3, #4
 810a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a2d2:	e144      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a2d4:	2308      	movs	r3, #8
 810a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a2da:	e140      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a2dc:	cfff69f3 	.word	0xcfff69f3
 810a2e0:	58000c00 	.word	0x58000c00
 810a2e4:	40011000 	.word	0x40011000
 810a2e8:	58024400 	.word	0x58024400
 810a2ec:	40004400 	.word	0x40004400
 810a2f0:	40004800 	.word	0x40004800
 810a2f4:	40004c00 	.word	0x40004c00
 810a2f8:	40005000 	.word	0x40005000
 810a2fc:	2310      	movs	r3, #16
 810a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a302:	e12c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a304:	2320      	movs	r3, #32
 810a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a30a:	e128      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a30c:	2340      	movs	r3, #64	@ 0x40
 810a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a312:	e124      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a314:	2380      	movs	r3, #128	@ 0x80
 810a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a31a:	e120      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a31c:	697b      	ldr	r3, [r7, #20]
 810a31e:	681b      	ldr	r3, [r3, #0]
 810a320:	4acb      	ldr	r2, [pc, #812]	@ (810a650 <UART_SetConfig+0x698>)
 810a322:	4293      	cmp	r3, r2
 810a324:	d176      	bne.n	810a414 <UART_SetConfig+0x45c>
 810a326:	4bcb      	ldr	r3, [pc, #812]	@ (810a654 <UART_SetConfig+0x69c>)
 810a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a32a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a32e:	2b28      	cmp	r3, #40	@ 0x28
 810a330:	d86c      	bhi.n	810a40c <UART_SetConfig+0x454>
 810a332:	a201      	add	r2, pc, #4	@ (adr r2, 810a338 <UART_SetConfig+0x380>)
 810a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a338:	0810a3dd 	.word	0x0810a3dd
 810a33c:	0810a40d 	.word	0x0810a40d
 810a340:	0810a40d 	.word	0x0810a40d
 810a344:	0810a40d 	.word	0x0810a40d
 810a348:	0810a40d 	.word	0x0810a40d
 810a34c:	0810a40d 	.word	0x0810a40d
 810a350:	0810a40d 	.word	0x0810a40d
 810a354:	0810a40d 	.word	0x0810a40d
 810a358:	0810a3e5 	.word	0x0810a3e5
 810a35c:	0810a40d 	.word	0x0810a40d
 810a360:	0810a40d 	.word	0x0810a40d
 810a364:	0810a40d 	.word	0x0810a40d
 810a368:	0810a40d 	.word	0x0810a40d
 810a36c:	0810a40d 	.word	0x0810a40d
 810a370:	0810a40d 	.word	0x0810a40d
 810a374:	0810a40d 	.word	0x0810a40d
 810a378:	0810a3ed 	.word	0x0810a3ed
 810a37c:	0810a40d 	.word	0x0810a40d
 810a380:	0810a40d 	.word	0x0810a40d
 810a384:	0810a40d 	.word	0x0810a40d
 810a388:	0810a40d 	.word	0x0810a40d
 810a38c:	0810a40d 	.word	0x0810a40d
 810a390:	0810a40d 	.word	0x0810a40d
 810a394:	0810a40d 	.word	0x0810a40d
 810a398:	0810a3f5 	.word	0x0810a3f5
 810a39c:	0810a40d 	.word	0x0810a40d
 810a3a0:	0810a40d 	.word	0x0810a40d
 810a3a4:	0810a40d 	.word	0x0810a40d
 810a3a8:	0810a40d 	.word	0x0810a40d
 810a3ac:	0810a40d 	.word	0x0810a40d
 810a3b0:	0810a40d 	.word	0x0810a40d
 810a3b4:	0810a40d 	.word	0x0810a40d
 810a3b8:	0810a3fd 	.word	0x0810a3fd
 810a3bc:	0810a40d 	.word	0x0810a40d
 810a3c0:	0810a40d 	.word	0x0810a40d
 810a3c4:	0810a40d 	.word	0x0810a40d
 810a3c8:	0810a40d 	.word	0x0810a40d
 810a3cc:	0810a40d 	.word	0x0810a40d
 810a3d0:	0810a40d 	.word	0x0810a40d
 810a3d4:	0810a40d 	.word	0x0810a40d
 810a3d8:	0810a405 	.word	0x0810a405
 810a3dc:	2301      	movs	r3, #1
 810a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3e2:	e0bc      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a3e4:	2304      	movs	r3, #4
 810a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3ea:	e0b8      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a3ec:	2308      	movs	r3, #8
 810a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3f2:	e0b4      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a3f4:	2310      	movs	r3, #16
 810a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3fa:	e0b0      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a3fc:	2320      	movs	r3, #32
 810a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a402:	e0ac      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a404:	2340      	movs	r3, #64	@ 0x40
 810a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a40a:	e0a8      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a40c:	2380      	movs	r3, #128	@ 0x80
 810a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a412:	e0a4      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a414:	697b      	ldr	r3, [r7, #20]
 810a416:	681b      	ldr	r3, [r3, #0]
 810a418:	4a8f      	ldr	r2, [pc, #572]	@ (810a658 <UART_SetConfig+0x6a0>)
 810a41a:	4293      	cmp	r3, r2
 810a41c:	d130      	bne.n	810a480 <UART_SetConfig+0x4c8>
 810a41e:	4b8d      	ldr	r3, [pc, #564]	@ (810a654 <UART_SetConfig+0x69c>)
 810a420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a422:	f003 0307 	and.w	r3, r3, #7
 810a426:	2b05      	cmp	r3, #5
 810a428:	d826      	bhi.n	810a478 <UART_SetConfig+0x4c0>
 810a42a:	a201      	add	r2, pc, #4	@ (adr r2, 810a430 <UART_SetConfig+0x478>)
 810a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a430:	0810a449 	.word	0x0810a449
 810a434:	0810a451 	.word	0x0810a451
 810a438:	0810a459 	.word	0x0810a459
 810a43c:	0810a461 	.word	0x0810a461
 810a440:	0810a469 	.word	0x0810a469
 810a444:	0810a471 	.word	0x0810a471
 810a448:	2300      	movs	r3, #0
 810a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a44e:	e086      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a450:	2304      	movs	r3, #4
 810a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a456:	e082      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a458:	2308      	movs	r3, #8
 810a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a45e:	e07e      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a460:	2310      	movs	r3, #16
 810a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a466:	e07a      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a468:	2320      	movs	r3, #32
 810a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a46e:	e076      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a470:	2340      	movs	r3, #64	@ 0x40
 810a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a476:	e072      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a478:	2380      	movs	r3, #128	@ 0x80
 810a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a47e:	e06e      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a480:	697b      	ldr	r3, [r7, #20]
 810a482:	681b      	ldr	r3, [r3, #0]
 810a484:	4a75      	ldr	r2, [pc, #468]	@ (810a65c <UART_SetConfig+0x6a4>)
 810a486:	4293      	cmp	r3, r2
 810a488:	d130      	bne.n	810a4ec <UART_SetConfig+0x534>
 810a48a:	4b72      	ldr	r3, [pc, #456]	@ (810a654 <UART_SetConfig+0x69c>)
 810a48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a48e:	f003 0307 	and.w	r3, r3, #7
 810a492:	2b05      	cmp	r3, #5
 810a494:	d826      	bhi.n	810a4e4 <UART_SetConfig+0x52c>
 810a496:	a201      	add	r2, pc, #4	@ (adr r2, 810a49c <UART_SetConfig+0x4e4>)
 810a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a49c:	0810a4b5 	.word	0x0810a4b5
 810a4a0:	0810a4bd 	.word	0x0810a4bd
 810a4a4:	0810a4c5 	.word	0x0810a4c5
 810a4a8:	0810a4cd 	.word	0x0810a4cd
 810a4ac:	0810a4d5 	.word	0x0810a4d5
 810a4b0:	0810a4dd 	.word	0x0810a4dd
 810a4b4:	2300      	movs	r3, #0
 810a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ba:	e050      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4bc:	2304      	movs	r3, #4
 810a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4c2:	e04c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4c4:	2308      	movs	r3, #8
 810a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ca:	e048      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4cc:	2310      	movs	r3, #16
 810a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4d2:	e044      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4d4:	2320      	movs	r3, #32
 810a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4da:	e040      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4dc:	2340      	movs	r3, #64	@ 0x40
 810a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4e2:	e03c      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4e4:	2380      	movs	r3, #128	@ 0x80
 810a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ea:	e038      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a4ec:	697b      	ldr	r3, [r7, #20]
 810a4ee:	681b      	ldr	r3, [r3, #0]
 810a4f0:	4a5b      	ldr	r2, [pc, #364]	@ (810a660 <UART_SetConfig+0x6a8>)
 810a4f2:	4293      	cmp	r3, r2
 810a4f4:	d130      	bne.n	810a558 <UART_SetConfig+0x5a0>
 810a4f6:	4b57      	ldr	r3, [pc, #348]	@ (810a654 <UART_SetConfig+0x69c>)
 810a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a4fa:	f003 0307 	and.w	r3, r3, #7
 810a4fe:	2b05      	cmp	r3, #5
 810a500:	d826      	bhi.n	810a550 <UART_SetConfig+0x598>
 810a502:	a201      	add	r2, pc, #4	@ (adr r2, 810a508 <UART_SetConfig+0x550>)
 810a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a508:	0810a521 	.word	0x0810a521
 810a50c:	0810a529 	.word	0x0810a529
 810a510:	0810a531 	.word	0x0810a531
 810a514:	0810a539 	.word	0x0810a539
 810a518:	0810a541 	.word	0x0810a541
 810a51c:	0810a549 	.word	0x0810a549
 810a520:	2302      	movs	r3, #2
 810a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a526:	e01a      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a528:	2304      	movs	r3, #4
 810a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a52e:	e016      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a530:	2308      	movs	r3, #8
 810a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a536:	e012      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a538:	2310      	movs	r3, #16
 810a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a53e:	e00e      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a540:	2320      	movs	r3, #32
 810a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a546:	e00a      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a548:	2340      	movs	r3, #64	@ 0x40
 810a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a54e:	e006      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a550:	2380      	movs	r3, #128	@ 0x80
 810a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a556:	e002      	b.n	810a55e <UART_SetConfig+0x5a6>
 810a558:	2380      	movs	r3, #128	@ 0x80
 810a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a55e:	697b      	ldr	r3, [r7, #20]
 810a560:	681b      	ldr	r3, [r3, #0]
 810a562:	4a3f      	ldr	r2, [pc, #252]	@ (810a660 <UART_SetConfig+0x6a8>)
 810a564:	4293      	cmp	r3, r2
 810a566:	f040 80f8 	bne.w	810a75a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a56a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a56e:	2b20      	cmp	r3, #32
 810a570:	dc46      	bgt.n	810a600 <UART_SetConfig+0x648>
 810a572:	2b02      	cmp	r3, #2
 810a574:	f2c0 8082 	blt.w	810a67c <UART_SetConfig+0x6c4>
 810a578:	3b02      	subs	r3, #2
 810a57a:	2b1e      	cmp	r3, #30
 810a57c:	d87e      	bhi.n	810a67c <UART_SetConfig+0x6c4>
 810a57e:	a201      	add	r2, pc, #4	@ (adr r2, 810a584 <UART_SetConfig+0x5cc>)
 810a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a584:	0810a607 	.word	0x0810a607
 810a588:	0810a67d 	.word	0x0810a67d
 810a58c:	0810a60f 	.word	0x0810a60f
 810a590:	0810a67d 	.word	0x0810a67d
 810a594:	0810a67d 	.word	0x0810a67d
 810a598:	0810a67d 	.word	0x0810a67d
 810a59c:	0810a61f 	.word	0x0810a61f
 810a5a0:	0810a67d 	.word	0x0810a67d
 810a5a4:	0810a67d 	.word	0x0810a67d
 810a5a8:	0810a67d 	.word	0x0810a67d
 810a5ac:	0810a67d 	.word	0x0810a67d
 810a5b0:	0810a67d 	.word	0x0810a67d
 810a5b4:	0810a67d 	.word	0x0810a67d
 810a5b8:	0810a67d 	.word	0x0810a67d
 810a5bc:	0810a62f 	.word	0x0810a62f
 810a5c0:	0810a67d 	.word	0x0810a67d
 810a5c4:	0810a67d 	.word	0x0810a67d
 810a5c8:	0810a67d 	.word	0x0810a67d
 810a5cc:	0810a67d 	.word	0x0810a67d
 810a5d0:	0810a67d 	.word	0x0810a67d
 810a5d4:	0810a67d 	.word	0x0810a67d
 810a5d8:	0810a67d 	.word	0x0810a67d
 810a5dc:	0810a67d 	.word	0x0810a67d
 810a5e0:	0810a67d 	.word	0x0810a67d
 810a5e4:	0810a67d 	.word	0x0810a67d
 810a5e8:	0810a67d 	.word	0x0810a67d
 810a5ec:	0810a67d 	.word	0x0810a67d
 810a5f0:	0810a67d 	.word	0x0810a67d
 810a5f4:	0810a67d 	.word	0x0810a67d
 810a5f8:	0810a67d 	.word	0x0810a67d
 810a5fc:	0810a66f 	.word	0x0810a66f
 810a600:	2b40      	cmp	r3, #64	@ 0x40
 810a602:	d037      	beq.n	810a674 <UART_SetConfig+0x6bc>
 810a604:	e03a      	b.n	810a67c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a606:	f7fd ffdf 	bl	81085c8 <HAL_RCCEx_GetD3PCLK1Freq>
 810a60a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a60c:	e03c      	b.n	810a688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a612:	4618      	mov	r0, r3
 810a614:	f7fd ffee 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a61c:	e034      	b.n	810a688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a61e:	f107 0318 	add.w	r3, r7, #24
 810a622:	4618      	mov	r0, r3
 810a624:	f7fe f93a 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a628:	69fb      	ldr	r3, [r7, #28]
 810a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a62c:	e02c      	b.n	810a688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a62e:	4b09      	ldr	r3, [pc, #36]	@ (810a654 <UART_SetConfig+0x69c>)
 810a630:	681b      	ldr	r3, [r3, #0]
 810a632:	f003 0320 	and.w	r3, r3, #32
 810a636:	2b00      	cmp	r3, #0
 810a638:	d016      	beq.n	810a668 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a63a:	4b06      	ldr	r3, [pc, #24]	@ (810a654 <UART_SetConfig+0x69c>)
 810a63c:	681b      	ldr	r3, [r3, #0]
 810a63e:	08db      	lsrs	r3, r3, #3
 810a640:	f003 0303 	and.w	r3, r3, #3
 810a644:	4a07      	ldr	r2, [pc, #28]	@ (810a664 <UART_SetConfig+0x6ac>)
 810a646:	fa22 f303 	lsr.w	r3, r2, r3
 810a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a64c:	e01c      	b.n	810a688 <UART_SetConfig+0x6d0>
 810a64e:	bf00      	nop
 810a650:	40011400 	.word	0x40011400
 810a654:	58024400 	.word	0x58024400
 810a658:	40007800 	.word	0x40007800
 810a65c:	40007c00 	.word	0x40007c00
 810a660:	58000c00 	.word	0x58000c00
 810a664:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a668:	4b9d      	ldr	r3, [pc, #628]	@ (810a8e0 <UART_SetConfig+0x928>)
 810a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a66c:	e00c      	b.n	810a688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a66e:	4b9d      	ldr	r3, [pc, #628]	@ (810a8e4 <UART_SetConfig+0x92c>)
 810a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a672:	e009      	b.n	810a688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a67a:	e005      	b.n	810a688 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a67c:	2300      	movs	r3, #0
 810a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a680:	2301      	movs	r3, #1
 810a682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a686:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a68a:	2b00      	cmp	r3, #0
 810a68c:	f000 81de 	beq.w	810aa4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a690:	697b      	ldr	r3, [r7, #20]
 810a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a694:	4a94      	ldr	r2, [pc, #592]	@ (810a8e8 <UART_SetConfig+0x930>)
 810a696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a69a:	461a      	mov	r2, r3
 810a69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a69e:	fbb3 f3f2 	udiv	r3, r3, r2
 810a6a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a6a4:	697b      	ldr	r3, [r7, #20]
 810a6a6:	685a      	ldr	r2, [r3, #4]
 810a6a8:	4613      	mov	r3, r2
 810a6aa:	005b      	lsls	r3, r3, #1
 810a6ac:	4413      	add	r3, r2
 810a6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a6b0:	429a      	cmp	r2, r3
 810a6b2:	d305      	bcc.n	810a6c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a6b4:	697b      	ldr	r3, [r7, #20]
 810a6b6:	685b      	ldr	r3, [r3, #4]
 810a6b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a6bc:	429a      	cmp	r2, r3
 810a6be:	d903      	bls.n	810a6c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a6c0:	2301      	movs	r3, #1
 810a6c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a6c6:	e1c1      	b.n	810aa4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a6ca:	2200      	movs	r2, #0
 810a6cc:	60bb      	str	r3, [r7, #8]
 810a6ce:	60fa      	str	r2, [r7, #12]
 810a6d0:	697b      	ldr	r3, [r7, #20]
 810a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a6d4:	4a84      	ldr	r2, [pc, #528]	@ (810a8e8 <UART_SetConfig+0x930>)
 810a6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a6da:	b29b      	uxth	r3, r3
 810a6dc:	2200      	movs	r2, #0
 810a6de:	603b      	str	r3, [r7, #0]
 810a6e0:	607a      	str	r2, [r7, #4]
 810a6e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a6e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a6ea:	f7f6 fb65 	bl	8100db8 <__aeabi_uldivmod>
 810a6ee:	4602      	mov	r2, r0
 810a6f0:	460b      	mov	r3, r1
 810a6f2:	4610      	mov	r0, r2
 810a6f4:	4619      	mov	r1, r3
 810a6f6:	f04f 0200 	mov.w	r2, #0
 810a6fa:	f04f 0300 	mov.w	r3, #0
 810a6fe:	020b      	lsls	r3, r1, #8
 810a700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a704:	0202      	lsls	r2, r0, #8
 810a706:	6979      	ldr	r1, [r7, #20]
 810a708:	6849      	ldr	r1, [r1, #4]
 810a70a:	0849      	lsrs	r1, r1, #1
 810a70c:	2000      	movs	r0, #0
 810a70e:	460c      	mov	r4, r1
 810a710:	4605      	mov	r5, r0
 810a712:	eb12 0804 	adds.w	r8, r2, r4
 810a716:	eb43 0905 	adc.w	r9, r3, r5
 810a71a:	697b      	ldr	r3, [r7, #20]
 810a71c:	685b      	ldr	r3, [r3, #4]
 810a71e:	2200      	movs	r2, #0
 810a720:	469a      	mov	sl, r3
 810a722:	4693      	mov	fp, r2
 810a724:	4652      	mov	r2, sl
 810a726:	465b      	mov	r3, fp
 810a728:	4640      	mov	r0, r8
 810a72a:	4649      	mov	r1, r9
 810a72c:	f7f6 fb44 	bl	8100db8 <__aeabi_uldivmod>
 810a730:	4602      	mov	r2, r0
 810a732:	460b      	mov	r3, r1
 810a734:	4613      	mov	r3, r2
 810a736:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a73a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a73e:	d308      	bcc.n	810a752 <UART_SetConfig+0x79a>
 810a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a746:	d204      	bcs.n	810a752 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a748:	697b      	ldr	r3, [r7, #20]
 810a74a:	681b      	ldr	r3, [r3, #0]
 810a74c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a74e:	60da      	str	r2, [r3, #12]
 810a750:	e17c      	b.n	810aa4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a752:	2301      	movs	r3, #1
 810a754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a758:	e178      	b.n	810aa4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a75a:	697b      	ldr	r3, [r7, #20]
 810a75c:	69db      	ldr	r3, [r3, #28]
 810a75e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a762:	f040 80c5 	bne.w	810a8f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a766:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a76a:	2b20      	cmp	r3, #32
 810a76c:	dc48      	bgt.n	810a800 <UART_SetConfig+0x848>
 810a76e:	2b00      	cmp	r3, #0
 810a770:	db7b      	blt.n	810a86a <UART_SetConfig+0x8b2>
 810a772:	2b20      	cmp	r3, #32
 810a774:	d879      	bhi.n	810a86a <UART_SetConfig+0x8b2>
 810a776:	a201      	add	r2, pc, #4	@ (adr r2, 810a77c <UART_SetConfig+0x7c4>)
 810a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a77c:	0810a807 	.word	0x0810a807
 810a780:	0810a80f 	.word	0x0810a80f
 810a784:	0810a86b 	.word	0x0810a86b
 810a788:	0810a86b 	.word	0x0810a86b
 810a78c:	0810a817 	.word	0x0810a817
 810a790:	0810a86b 	.word	0x0810a86b
 810a794:	0810a86b 	.word	0x0810a86b
 810a798:	0810a86b 	.word	0x0810a86b
 810a79c:	0810a827 	.word	0x0810a827
 810a7a0:	0810a86b 	.word	0x0810a86b
 810a7a4:	0810a86b 	.word	0x0810a86b
 810a7a8:	0810a86b 	.word	0x0810a86b
 810a7ac:	0810a86b 	.word	0x0810a86b
 810a7b0:	0810a86b 	.word	0x0810a86b
 810a7b4:	0810a86b 	.word	0x0810a86b
 810a7b8:	0810a86b 	.word	0x0810a86b
 810a7bc:	0810a837 	.word	0x0810a837
 810a7c0:	0810a86b 	.word	0x0810a86b
 810a7c4:	0810a86b 	.word	0x0810a86b
 810a7c8:	0810a86b 	.word	0x0810a86b
 810a7cc:	0810a86b 	.word	0x0810a86b
 810a7d0:	0810a86b 	.word	0x0810a86b
 810a7d4:	0810a86b 	.word	0x0810a86b
 810a7d8:	0810a86b 	.word	0x0810a86b
 810a7dc:	0810a86b 	.word	0x0810a86b
 810a7e0:	0810a86b 	.word	0x0810a86b
 810a7e4:	0810a86b 	.word	0x0810a86b
 810a7e8:	0810a86b 	.word	0x0810a86b
 810a7ec:	0810a86b 	.word	0x0810a86b
 810a7f0:	0810a86b 	.word	0x0810a86b
 810a7f4:	0810a86b 	.word	0x0810a86b
 810a7f8:	0810a86b 	.word	0x0810a86b
 810a7fc:	0810a85d 	.word	0x0810a85d
 810a800:	2b40      	cmp	r3, #64	@ 0x40
 810a802:	d02e      	beq.n	810a862 <UART_SetConfig+0x8aa>
 810a804:	e031      	b.n	810a86a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a806:	f7fb fee7 	bl	81065d8 <HAL_RCC_GetPCLK1Freq>
 810a80a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a80c:	e033      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a80e:	f7fb fef9 	bl	8106604 <HAL_RCC_GetPCLK2Freq>
 810a812:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a814:	e02f      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a81a:	4618      	mov	r0, r3
 810a81c:	f7fd feea 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a824:	e027      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a826:	f107 0318 	add.w	r3, r7, #24
 810a82a:	4618      	mov	r0, r3
 810a82c:	f7fe f836 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a830:	69fb      	ldr	r3, [r7, #28]
 810a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a834:	e01f      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a836:	4b2d      	ldr	r3, [pc, #180]	@ (810a8ec <UART_SetConfig+0x934>)
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	f003 0320 	and.w	r3, r3, #32
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d009      	beq.n	810a856 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a842:	4b2a      	ldr	r3, [pc, #168]	@ (810a8ec <UART_SetConfig+0x934>)
 810a844:	681b      	ldr	r3, [r3, #0]
 810a846:	08db      	lsrs	r3, r3, #3
 810a848:	f003 0303 	and.w	r3, r3, #3
 810a84c:	4a24      	ldr	r2, [pc, #144]	@ (810a8e0 <UART_SetConfig+0x928>)
 810a84e:	fa22 f303 	lsr.w	r3, r2, r3
 810a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a854:	e00f      	b.n	810a876 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a856:	4b22      	ldr	r3, [pc, #136]	@ (810a8e0 <UART_SetConfig+0x928>)
 810a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a85a:	e00c      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a85c:	4b21      	ldr	r3, [pc, #132]	@ (810a8e4 <UART_SetConfig+0x92c>)
 810a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a860:	e009      	b.n	810a876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a868:	e005      	b.n	810a876 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a86a:	2300      	movs	r3, #0
 810a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a86e:	2301      	movs	r3, #1
 810a870:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a878:	2b00      	cmp	r3, #0
 810a87a:	f000 80e7 	beq.w	810aa4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a87e:	697b      	ldr	r3, [r7, #20]
 810a880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a882:	4a19      	ldr	r2, [pc, #100]	@ (810a8e8 <UART_SetConfig+0x930>)
 810a884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a888:	461a      	mov	r2, r3
 810a88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a88c:	fbb3 f3f2 	udiv	r3, r3, r2
 810a890:	005a      	lsls	r2, r3, #1
 810a892:	697b      	ldr	r3, [r7, #20]
 810a894:	685b      	ldr	r3, [r3, #4]
 810a896:	085b      	lsrs	r3, r3, #1
 810a898:	441a      	add	r2, r3
 810a89a:	697b      	ldr	r3, [r7, #20]
 810a89c:	685b      	ldr	r3, [r3, #4]
 810a89e:	fbb2 f3f3 	udiv	r3, r2, r3
 810a8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a8a6:	2b0f      	cmp	r3, #15
 810a8a8:	d916      	bls.n	810a8d8 <UART_SetConfig+0x920>
 810a8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a8b0:	d212      	bcs.n	810a8d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a8b4:	b29b      	uxth	r3, r3
 810a8b6:	f023 030f 	bic.w	r3, r3, #15
 810a8ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a8be:	085b      	lsrs	r3, r3, #1
 810a8c0:	b29b      	uxth	r3, r3
 810a8c2:	f003 0307 	and.w	r3, r3, #7
 810a8c6:	b29a      	uxth	r2, r3
 810a8c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810a8ca:	4313      	orrs	r3, r2
 810a8cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810a8ce:	697b      	ldr	r3, [r7, #20]
 810a8d0:	681b      	ldr	r3, [r3, #0]
 810a8d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810a8d4:	60da      	str	r2, [r3, #12]
 810a8d6:	e0b9      	b.n	810aa4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a8d8:	2301      	movs	r3, #1
 810a8da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a8de:	e0b5      	b.n	810aa4c <UART_SetConfig+0xa94>
 810a8e0:	03d09000 	.word	0x03d09000
 810a8e4:	003d0900 	.word	0x003d0900
 810a8e8:	081177d0 	.word	0x081177d0
 810a8ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a8f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a8f4:	2b20      	cmp	r3, #32
 810a8f6:	dc49      	bgt.n	810a98c <UART_SetConfig+0x9d4>
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	db7c      	blt.n	810a9f6 <UART_SetConfig+0xa3e>
 810a8fc:	2b20      	cmp	r3, #32
 810a8fe:	d87a      	bhi.n	810a9f6 <UART_SetConfig+0xa3e>
 810a900:	a201      	add	r2, pc, #4	@ (adr r2, 810a908 <UART_SetConfig+0x950>)
 810a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a906:	bf00      	nop
 810a908:	0810a993 	.word	0x0810a993
 810a90c:	0810a99b 	.word	0x0810a99b
 810a910:	0810a9f7 	.word	0x0810a9f7
 810a914:	0810a9f7 	.word	0x0810a9f7
 810a918:	0810a9a3 	.word	0x0810a9a3
 810a91c:	0810a9f7 	.word	0x0810a9f7
 810a920:	0810a9f7 	.word	0x0810a9f7
 810a924:	0810a9f7 	.word	0x0810a9f7
 810a928:	0810a9b3 	.word	0x0810a9b3
 810a92c:	0810a9f7 	.word	0x0810a9f7
 810a930:	0810a9f7 	.word	0x0810a9f7
 810a934:	0810a9f7 	.word	0x0810a9f7
 810a938:	0810a9f7 	.word	0x0810a9f7
 810a93c:	0810a9f7 	.word	0x0810a9f7
 810a940:	0810a9f7 	.word	0x0810a9f7
 810a944:	0810a9f7 	.word	0x0810a9f7
 810a948:	0810a9c3 	.word	0x0810a9c3
 810a94c:	0810a9f7 	.word	0x0810a9f7
 810a950:	0810a9f7 	.word	0x0810a9f7
 810a954:	0810a9f7 	.word	0x0810a9f7
 810a958:	0810a9f7 	.word	0x0810a9f7
 810a95c:	0810a9f7 	.word	0x0810a9f7
 810a960:	0810a9f7 	.word	0x0810a9f7
 810a964:	0810a9f7 	.word	0x0810a9f7
 810a968:	0810a9f7 	.word	0x0810a9f7
 810a96c:	0810a9f7 	.word	0x0810a9f7
 810a970:	0810a9f7 	.word	0x0810a9f7
 810a974:	0810a9f7 	.word	0x0810a9f7
 810a978:	0810a9f7 	.word	0x0810a9f7
 810a97c:	0810a9f7 	.word	0x0810a9f7
 810a980:	0810a9f7 	.word	0x0810a9f7
 810a984:	0810a9f7 	.word	0x0810a9f7
 810a988:	0810a9e9 	.word	0x0810a9e9
 810a98c:	2b40      	cmp	r3, #64	@ 0x40
 810a98e:	d02e      	beq.n	810a9ee <UART_SetConfig+0xa36>
 810a990:	e031      	b.n	810a9f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a992:	f7fb fe21 	bl	81065d8 <HAL_RCC_GetPCLK1Freq>
 810a996:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a998:	e033      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a99a:	f7fb fe33 	bl	8106604 <HAL_RCC_GetPCLK2Freq>
 810a99e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a9a0:	e02f      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a9a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a9a6:	4618      	mov	r0, r3
 810a9a8:	f7fd fe24 	bl	81085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9b0:	e027      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a9b2:	f107 0318 	add.w	r3, r7, #24
 810a9b6:	4618      	mov	r0, r3
 810a9b8:	f7fd ff70 	bl	810889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a9bc:	69fb      	ldr	r3, [r7, #28]
 810a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9c0:	e01f      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a9c2:	4b2d      	ldr	r3, [pc, #180]	@ (810aa78 <UART_SetConfig+0xac0>)
 810a9c4:	681b      	ldr	r3, [r3, #0]
 810a9c6:	f003 0320 	and.w	r3, r3, #32
 810a9ca:	2b00      	cmp	r3, #0
 810a9cc:	d009      	beq.n	810a9e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a9ce:	4b2a      	ldr	r3, [pc, #168]	@ (810aa78 <UART_SetConfig+0xac0>)
 810a9d0:	681b      	ldr	r3, [r3, #0]
 810a9d2:	08db      	lsrs	r3, r3, #3
 810a9d4:	f003 0303 	and.w	r3, r3, #3
 810a9d8:	4a28      	ldr	r2, [pc, #160]	@ (810aa7c <UART_SetConfig+0xac4>)
 810a9da:	fa22 f303 	lsr.w	r3, r2, r3
 810a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a9e0:	e00f      	b.n	810aa02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a9e2:	4b26      	ldr	r3, [pc, #152]	@ (810aa7c <UART_SetConfig+0xac4>)
 810a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9e6:	e00c      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a9e8:	4b25      	ldr	r3, [pc, #148]	@ (810aa80 <UART_SetConfig+0xac8>)
 810a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9ec:	e009      	b.n	810aa02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a9ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9f4:	e005      	b.n	810aa02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a9f6:	2300      	movs	r3, #0
 810a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a9fa:	2301      	movs	r3, #1
 810a9fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810aa00:	bf00      	nop
    }

    if (pclk != 0U)
 810aa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aa04:	2b00      	cmp	r3, #0
 810aa06:	d021      	beq.n	810aa4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810aa08:	697b      	ldr	r3, [r7, #20]
 810aa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa0c:	4a1d      	ldr	r2, [pc, #116]	@ (810aa84 <UART_SetConfig+0xacc>)
 810aa0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810aa12:	461a      	mov	r2, r3
 810aa14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aa16:	fbb3 f2f2 	udiv	r2, r3, r2
 810aa1a:	697b      	ldr	r3, [r7, #20]
 810aa1c:	685b      	ldr	r3, [r3, #4]
 810aa1e:	085b      	lsrs	r3, r3, #1
 810aa20:	441a      	add	r2, r3
 810aa22:	697b      	ldr	r3, [r7, #20]
 810aa24:	685b      	ldr	r3, [r3, #4]
 810aa26:	fbb2 f3f3 	udiv	r3, r2, r3
 810aa2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aa2e:	2b0f      	cmp	r3, #15
 810aa30:	d909      	bls.n	810aa46 <UART_SetConfig+0xa8e>
 810aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aa34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810aa38:	d205      	bcs.n	810aa46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aa3c:	b29a      	uxth	r2, r3
 810aa3e:	697b      	ldr	r3, [r7, #20]
 810aa40:	681b      	ldr	r3, [r3, #0]
 810aa42:	60da      	str	r2, [r3, #12]
 810aa44:	e002      	b.n	810aa4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810aa46:	2301      	movs	r3, #1
 810aa48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810aa4c:	697b      	ldr	r3, [r7, #20]
 810aa4e:	2201      	movs	r2, #1
 810aa50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810aa54:	697b      	ldr	r3, [r7, #20]
 810aa56:	2201      	movs	r2, #1
 810aa58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810aa5c:	697b      	ldr	r3, [r7, #20]
 810aa5e:	2200      	movs	r2, #0
 810aa60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810aa62:	697b      	ldr	r3, [r7, #20]
 810aa64:	2200      	movs	r2, #0
 810aa66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810aa68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810aa6c:	4618      	mov	r0, r3
 810aa6e:	3748      	adds	r7, #72	@ 0x48
 810aa70:	46bd      	mov	sp, r7
 810aa72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810aa76:	bf00      	nop
 810aa78:	58024400 	.word	0x58024400
 810aa7c:	03d09000 	.word	0x03d09000
 810aa80:	003d0900 	.word	0x003d0900
 810aa84:	081177d0 	.word	0x081177d0

0810aa88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810aa88:	b480      	push	{r7}
 810aa8a:	b083      	sub	sp, #12
 810aa8c:	af00      	add	r7, sp, #0
 810aa8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810aa90:	687b      	ldr	r3, [r7, #4]
 810aa92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aa94:	f003 0308 	and.w	r3, r3, #8
 810aa98:	2b00      	cmp	r3, #0
 810aa9a:	d00a      	beq.n	810aab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810aa9c:	687b      	ldr	r3, [r7, #4]
 810aa9e:	681b      	ldr	r3, [r3, #0]
 810aaa0:	685b      	ldr	r3, [r3, #4]
 810aaa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	681b      	ldr	r3, [r3, #0]
 810aaae:	430a      	orrs	r2, r1
 810aab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aab6:	f003 0301 	and.w	r3, r3, #1
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	d00a      	beq.n	810aad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	681b      	ldr	r3, [r3, #0]
 810aac2:	685b      	ldr	r3, [r3, #4]
 810aac4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810aac8:	687b      	ldr	r3, [r7, #4]
 810aaca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	681b      	ldr	r3, [r3, #0]
 810aad0:	430a      	orrs	r2, r1
 810aad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810aad4:	687b      	ldr	r3, [r7, #4]
 810aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aad8:	f003 0302 	and.w	r3, r3, #2
 810aadc:	2b00      	cmp	r3, #0
 810aade:	d00a      	beq.n	810aaf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	681b      	ldr	r3, [r3, #0]
 810aae4:	685b      	ldr	r3, [r3, #4]
 810aae6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810aaee:	687b      	ldr	r3, [r7, #4]
 810aaf0:	681b      	ldr	r3, [r3, #0]
 810aaf2:	430a      	orrs	r2, r1
 810aaf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810aaf6:	687b      	ldr	r3, [r7, #4]
 810aaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aafa:	f003 0304 	and.w	r3, r3, #4
 810aafe:	2b00      	cmp	r3, #0
 810ab00:	d00a      	beq.n	810ab18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	685b      	ldr	r3, [r3, #4]
 810ab08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810ab0c:	687b      	ldr	r3, [r7, #4]
 810ab0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	681b      	ldr	r3, [r3, #0]
 810ab14:	430a      	orrs	r2, r1
 810ab16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ab1c:	f003 0310 	and.w	r3, r3, #16
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d00a      	beq.n	810ab3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	689b      	ldr	r3, [r3, #8]
 810ab2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810ab2e:	687b      	ldr	r3, [r7, #4]
 810ab30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810ab32:	687b      	ldr	r3, [r7, #4]
 810ab34:	681b      	ldr	r3, [r3, #0]
 810ab36:	430a      	orrs	r2, r1
 810ab38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ab3e:	f003 0320 	and.w	r3, r3, #32
 810ab42:	2b00      	cmp	r3, #0
 810ab44:	d00a      	beq.n	810ab5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	681b      	ldr	r3, [r3, #0]
 810ab4a:	689b      	ldr	r3, [r3, #8]
 810ab4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810ab50:	687b      	ldr	r3, [r7, #4]
 810ab52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	681b      	ldr	r3, [r3, #0]
 810ab58:	430a      	orrs	r2, r1
 810ab5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810ab5c:	687b      	ldr	r3, [r7, #4]
 810ab5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ab60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ab64:	2b00      	cmp	r3, #0
 810ab66:	d01a      	beq.n	810ab9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810ab68:	687b      	ldr	r3, [r7, #4]
 810ab6a:	681b      	ldr	r3, [r3, #0]
 810ab6c:	685b      	ldr	r3, [r3, #4]
 810ab6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810ab72:	687b      	ldr	r3, [r7, #4]
 810ab74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	681b      	ldr	r3, [r3, #0]
 810ab7a:	430a      	orrs	r2, r1
 810ab7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810ab7e:	687b      	ldr	r3, [r7, #4]
 810ab80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ab82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810ab86:	d10a      	bne.n	810ab9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810ab88:	687b      	ldr	r3, [r7, #4]
 810ab8a:	681b      	ldr	r3, [r3, #0]
 810ab8c:	685b      	ldr	r3, [r3, #4]
 810ab8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	681b      	ldr	r3, [r3, #0]
 810ab9a:	430a      	orrs	r2, r1
 810ab9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810aba6:	2b00      	cmp	r3, #0
 810aba8:	d00a      	beq.n	810abc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810abaa:	687b      	ldr	r3, [r7, #4]
 810abac:	681b      	ldr	r3, [r3, #0]
 810abae:	685b      	ldr	r3, [r3, #4]
 810abb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810abb4:	687b      	ldr	r3, [r7, #4]
 810abb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810abb8:	687b      	ldr	r3, [r7, #4]
 810abba:	681b      	ldr	r3, [r3, #0]
 810abbc:	430a      	orrs	r2, r1
 810abbe:	605a      	str	r2, [r3, #4]
  }
}
 810abc0:	bf00      	nop
 810abc2:	370c      	adds	r7, #12
 810abc4:	46bd      	mov	sp, r7
 810abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abca:	4770      	bx	lr

0810abcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810abcc:	b580      	push	{r7, lr}
 810abce:	b098      	sub	sp, #96	@ 0x60
 810abd0:	af02      	add	r7, sp, #8
 810abd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810abd4:	687b      	ldr	r3, [r7, #4]
 810abd6:	2200      	movs	r2, #0
 810abd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810abdc:	f7f7 fcb2 	bl	8102544 <HAL_GetTick>
 810abe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810abe2:	687b      	ldr	r3, [r7, #4]
 810abe4:	681b      	ldr	r3, [r3, #0]
 810abe6:	681b      	ldr	r3, [r3, #0]
 810abe8:	f003 0308 	and.w	r3, r3, #8
 810abec:	2b08      	cmp	r3, #8
 810abee:	d12f      	bne.n	810ac50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810abf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810abf4:	9300      	str	r3, [sp, #0]
 810abf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810abf8:	2200      	movs	r2, #0
 810abfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810abfe:	6878      	ldr	r0, [r7, #4]
 810ac00:	f000 f88e 	bl	810ad20 <UART_WaitOnFlagUntilTimeout>
 810ac04:	4603      	mov	r3, r0
 810ac06:	2b00      	cmp	r3, #0
 810ac08:	d022      	beq.n	810ac50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810ac0a:	687b      	ldr	r3, [r7, #4]
 810ac0c:	681b      	ldr	r3, [r3, #0]
 810ac0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ac12:	e853 3f00 	ldrex	r3, [r3]
 810ac16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ac18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ac1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810ac1e:	653b      	str	r3, [r7, #80]	@ 0x50
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	681b      	ldr	r3, [r3, #0]
 810ac24:	461a      	mov	r2, r3
 810ac26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ac28:	647b      	str	r3, [r7, #68]	@ 0x44
 810ac2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ac2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ac30:	e841 2300 	strex	r3, r2, [r1]
 810ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ac36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d1e6      	bne.n	810ac0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	2220      	movs	r2, #32
 810ac40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810ac44:	687b      	ldr	r3, [r7, #4]
 810ac46:	2200      	movs	r2, #0
 810ac48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ac4c:	2303      	movs	r3, #3
 810ac4e:	e063      	b.n	810ad18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810ac50:	687b      	ldr	r3, [r7, #4]
 810ac52:	681b      	ldr	r3, [r3, #0]
 810ac54:	681b      	ldr	r3, [r3, #0]
 810ac56:	f003 0304 	and.w	r3, r3, #4
 810ac5a:	2b04      	cmp	r3, #4
 810ac5c:	d149      	bne.n	810acf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ac5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810ac62:	9300      	str	r3, [sp, #0]
 810ac64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ac66:	2200      	movs	r2, #0
 810ac68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810ac6c:	6878      	ldr	r0, [r7, #4]
 810ac6e:	f000 f857 	bl	810ad20 <UART_WaitOnFlagUntilTimeout>
 810ac72:	4603      	mov	r3, r0
 810ac74:	2b00      	cmp	r3, #0
 810ac76:	d03c      	beq.n	810acf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ac78:	687b      	ldr	r3, [r7, #4]
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ac80:	e853 3f00 	ldrex	r3, [r3]
 810ac84:	623b      	str	r3, [r7, #32]
   return(result);
 810ac86:	6a3b      	ldr	r3, [r7, #32]
 810ac88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ac8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	681b      	ldr	r3, [r3, #0]
 810ac92:	461a      	mov	r2, r3
 810ac94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ac96:	633b      	str	r3, [r7, #48]	@ 0x30
 810ac98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ac9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ac9e:	e841 2300 	strex	r3, r2, [r1]
 810aca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aca6:	2b00      	cmp	r3, #0
 810aca8:	d1e6      	bne.n	810ac78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810acaa:	687b      	ldr	r3, [r7, #4]
 810acac:	681b      	ldr	r3, [r3, #0]
 810acae:	3308      	adds	r3, #8
 810acb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810acb2:	693b      	ldr	r3, [r7, #16]
 810acb4:	e853 3f00 	ldrex	r3, [r3]
 810acb8:	60fb      	str	r3, [r7, #12]
   return(result);
 810acba:	68fb      	ldr	r3, [r7, #12]
 810acbc:	f023 0301 	bic.w	r3, r3, #1
 810acc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 810acc2:	687b      	ldr	r3, [r7, #4]
 810acc4:	681b      	ldr	r3, [r3, #0]
 810acc6:	3308      	adds	r3, #8
 810acc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810acca:	61fa      	str	r2, [r7, #28]
 810accc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810acce:	69b9      	ldr	r1, [r7, #24]
 810acd0:	69fa      	ldr	r2, [r7, #28]
 810acd2:	e841 2300 	strex	r3, r2, [r1]
 810acd6:	617b      	str	r3, [r7, #20]
   return(result);
 810acd8:	697b      	ldr	r3, [r7, #20]
 810acda:	2b00      	cmp	r3, #0
 810acdc:	d1e5      	bne.n	810acaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	2220      	movs	r2, #32
 810ace2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	2200      	movs	r2, #0
 810acea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810acee:	2303      	movs	r3, #3
 810acf0:	e012      	b.n	810ad18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810acf2:	687b      	ldr	r3, [r7, #4]
 810acf4:	2220      	movs	r2, #32
 810acf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810acfa:	687b      	ldr	r3, [r7, #4]
 810acfc:	2220      	movs	r2, #32
 810acfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ad02:	687b      	ldr	r3, [r7, #4]
 810ad04:	2200      	movs	r2, #0
 810ad06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ad08:	687b      	ldr	r3, [r7, #4]
 810ad0a:	2200      	movs	r2, #0
 810ad0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810ad0e:	687b      	ldr	r3, [r7, #4]
 810ad10:	2200      	movs	r2, #0
 810ad12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ad16:	2300      	movs	r3, #0
}
 810ad18:	4618      	mov	r0, r3
 810ad1a:	3758      	adds	r7, #88	@ 0x58
 810ad1c:	46bd      	mov	sp, r7
 810ad1e:	bd80      	pop	{r7, pc}

0810ad20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810ad20:	b580      	push	{r7, lr}
 810ad22:	b084      	sub	sp, #16
 810ad24:	af00      	add	r7, sp, #0
 810ad26:	60f8      	str	r0, [r7, #12]
 810ad28:	60b9      	str	r1, [r7, #8]
 810ad2a:	603b      	str	r3, [r7, #0]
 810ad2c:	4613      	mov	r3, r2
 810ad2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ad30:	e04f      	b.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810ad32:	69bb      	ldr	r3, [r7, #24]
 810ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ad38:	d04b      	beq.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810ad3a:	f7f7 fc03 	bl	8102544 <HAL_GetTick>
 810ad3e:	4602      	mov	r2, r0
 810ad40:	683b      	ldr	r3, [r7, #0]
 810ad42:	1ad3      	subs	r3, r2, r3
 810ad44:	69ba      	ldr	r2, [r7, #24]
 810ad46:	429a      	cmp	r2, r3
 810ad48:	d302      	bcc.n	810ad50 <UART_WaitOnFlagUntilTimeout+0x30>
 810ad4a:	69bb      	ldr	r3, [r7, #24]
 810ad4c:	2b00      	cmp	r3, #0
 810ad4e:	d101      	bne.n	810ad54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810ad50:	2303      	movs	r3, #3
 810ad52:	e04e      	b.n	810adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810ad54:	68fb      	ldr	r3, [r7, #12]
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	f003 0304 	and.w	r3, r3, #4
 810ad5e:	2b00      	cmp	r3, #0
 810ad60:	d037      	beq.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
 810ad62:	68bb      	ldr	r3, [r7, #8]
 810ad64:	2b80      	cmp	r3, #128	@ 0x80
 810ad66:	d034      	beq.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
 810ad68:	68bb      	ldr	r3, [r7, #8]
 810ad6a:	2b40      	cmp	r3, #64	@ 0x40
 810ad6c:	d031      	beq.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810ad6e:	68fb      	ldr	r3, [r7, #12]
 810ad70:	681b      	ldr	r3, [r3, #0]
 810ad72:	69db      	ldr	r3, [r3, #28]
 810ad74:	f003 0308 	and.w	r3, r3, #8
 810ad78:	2b08      	cmp	r3, #8
 810ad7a:	d110      	bne.n	810ad9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ad7c:	68fb      	ldr	r3, [r7, #12]
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	2208      	movs	r2, #8
 810ad82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ad84:	68f8      	ldr	r0, [r7, #12]
 810ad86:	f000 f95b 	bl	810b040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810ad8a:	68fb      	ldr	r3, [r7, #12]
 810ad8c:	2208      	movs	r2, #8
 810ad8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ad92:	68fb      	ldr	r3, [r7, #12]
 810ad94:	2200      	movs	r2, #0
 810ad96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810ad9a:	2301      	movs	r3, #1
 810ad9c:	e029      	b.n	810adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ad9e:	68fb      	ldr	r3, [r7, #12]
 810ada0:	681b      	ldr	r3, [r3, #0]
 810ada2:	69db      	ldr	r3, [r3, #28]
 810ada4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810ada8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810adac:	d111      	bne.n	810add2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810adae:	68fb      	ldr	r3, [r7, #12]
 810adb0:	681b      	ldr	r3, [r3, #0]
 810adb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810adb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810adb8:	68f8      	ldr	r0, [r7, #12]
 810adba:	f000 f941 	bl	810b040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810adbe:	68fb      	ldr	r3, [r7, #12]
 810adc0:	2220      	movs	r2, #32
 810adc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810adc6:	68fb      	ldr	r3, [r7, #12]
 810adc8:	2200      	movs	r2, #0
 810adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810adce:	2303      	movs	r3, #3
 810add0:	e00f      	b.n	810adf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810add2:	68fb      	ldr	r3, [r7, #12]
 810add4:	681b      	ldr	r3, [r3, #0]
 810add6:	69da      	ldr	r2, [r3, #28]
 810add8:	68bb      	ldr	r3, [r7, #8]
 810adda:	4013      	ands	r3, r2
 810addc:	68ba      	ldr	r2, [r7, #8]
 810adde:	429a      	cmp	r2, r3
 810ade0:	bf0c      	ite	eq
 810ade2:	2301      	moveq	r3, #1
 810ade4:	2300      	movne	r3, #0
 810ade6:	b2db      	uxtb	r3, r3
 810ade8:	461a      	mov	r2, r3
 810adea:	79fb      	ldrb	r3, [r7, #7]
 810adec:	429a      	cmp	r2, r3
 810adee:	d0a0      	beq.n	810ad32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810adf0:	2300      	movs	r3, #0
}
 810adf2:	4618      	mov	r0, r3
 810adf4:	3710      	adds	r7, #16
 810adf6:	46bd      	mov	sp, r7
 810adf8:	bd80      	pop	{r7, pc}
	...

0810adfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810adfc:	b480      	push	{r7}
 810adfe:	b0a3      	sub	sp, #140	@ 0x8c
 810ae00:	af00      	add	r7, sp, #0
 810ae02:	60f8      	str	r0, [r7, #12]
 810ae04:	60b9      	str	r1, [r7, #8]
 810ae06:	4613      	mov	r3, r2
 810ae08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810ae0a:	68fb      	ldr	r3, [r7, #12]
 810ae0c:	68ba      	ldr	r2, [r7, #8]
 810ae0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810ae10:	68fb      	ldr	r3, [r7, #12]
 810ae12:	88fa      	ldrh	r2, [r7, #6]
 810ae14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810ae18:	68fb      	ldr	r3, [r7, #12]
 810ae1a:	88fa      	ldrh	r2, [r7, #6]
 810ae1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810ae20:	68fb      	ldr	r3, [r7, #12]
 810ae22:	2200      	movs	r2, #0
 810ae24:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810ae26:	68fb      	ldr	r3, [r7, #12]
 810ae28:	689b      	ldr	r3, [r3, #8]
 810ae2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ae2e:	d10e      	bne.n	810ae4e <UART_Start_Receive_IT+0x52>
 810ae30:	68fb      	ldr	r3, [r7, #12]
 810ae32:	691b      	ldr	r3, [r3, #16]
 810ae34:	2b00      	cmp	r3, #0
 810ae36:	d105      	bne.n	810ae44 <UART_Start_Receive_IT+0x48>
 810ae38:	68fb      	ldr	r3, [r7, #12]
 810ae3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810ae3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae42:	e02d      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae44:	68fb      	ldr	r3, [r7, #12]
 810ae46:	22ff      	movs	r2, #255	@ 0xff
 810ae48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae4c:	e028      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae4e:	68fb      	ldr	r3, [r7, #12]
 810ae50:	689b      	ldr	r3, [r3, #8]
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	d10d      	bne.n	810ae72 <UART_Start_Receive_IT+0x76>
 810ae56:	68fb      	ldr	r3, [r7, #12]
 810ae58:	691b      	ldr	r3, [r3, #16]
 810ae5a:	2b00      	cmp	r3, #0
 810ae5c:	d104      	bne.n	810ae68 <UART_Start_Receive_IT+0x6c>
 810ae5e:	68fb      	ldr	r3, [r7, #12]
 810ae60:	22ff      	movs	r2, #255	@ 0xff
 810ae62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae66:	e01b      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	227f      	movs	r2, #127	@ 0x7f
 810ae6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae70:	e016      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae72:	68fb      	ldr	r3, [r7, #12]
 810ae74:	689b      	ldr	r3, [r3, #8]
 810ae76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ae7a:	d10d      	bne.n	810ae98 <UART_Start_Receive_IT+0x9c>
 810ae7c:	68fb      	ldr	r3, [r7, #12]
 810ae7e:	691b      	ldr	r3, [r3, #16]
 810ae80:	2b00      	cmp	r3, #0
 810ae82:	d104      	bne.n	810ae8e <UART_Start_Receive_IT+0x92>
 810ae84:	68fb      	ldr	r3, [r7, #12]
 810ae86:	227f      	movs	r2, #127	@ 0x7f
 810ae88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae8c:	e008      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae8e:	68fb      	ldr	r3, [r7, #12]
 810ae90:	223f      	movs	r2, #63	@ 0x3f
 810ae92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ae96:	e003      	b.n	810aea0 <UART_Start_Receive_IT+0xa4>
 810ae98:	68fb      	ldr	r3, [r7, #12]
 810ae9a:	2200      	movs	r2, #0
 810ae9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810aea0:	68fb      	ldr	r3, [r7, #12]
 810aea2:	2200      	movs	r2, #0
 810aea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810aea8:	68fb      	ldr	r3, [r7, #12]
 810aeaa:	2222      	movs	r2, #34	@ 0x22
 810aeac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aeb0:	68fb      	ldr	r3, [r7, #12]
 810aeb2:	681b      	ldr	r3, [r3, #0]
 810aeb4:	3308      	adds	r3, #8
 810aeb6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aeb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810aeba:	e853 3f00 	ldrex	r3, [r3]
 810aebe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810aec0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810aec2:	f043 0301 	orr.w	r3, r3, #1
 810aec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810aeca:	68fb      	ldr	r3, [r7, #12]
 810aecc:	681b      	ldr	r3, [r3, #0]
 810aece:	3308      	adds	r3, #8
 810aed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810aed4:	673a      	str	r2, [r7, #112]	@ 0x70
 810aed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aed8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810aeda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810aedc:	e841 2300 	strex	r3, r2, [r1]
 810aee0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810aee2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810aee4:	2b00      	cmp	r3, #0
 810aee6:	d1e3      	bne.n	810aeb0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810aee8:	68fb      	ldr	r3, [r7, #12]
 810aeea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810aeec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aef0:	d14f      	bne.n	810af92 <UART_Start_Receive_IT+0x196>
 810aef2:	68fb      	ldr	r3, [r7, #12]
 810aef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810aef8:	88fa      	ldrh	r2, [r7, #6]
 810aefa:	429a      	cmp	r2, r3
 810aefc:	d349      	bcc.n	810af92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810aefe:	68fb      	ldr	r3, [r7, #12]
 810af00:	689b      	ldr	r3, [r3, #8]
 810af02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af06:	d107      	bne.n	810af18 <UART_Start_Receive_IT+0x11c>
 810af08:	68fb      	ldr	r3, [r7, #12]
 810af0a:	691b      	ldr	r3, [r3, #16]
 810af0c:	2b00      	cmp	r3, #0
 810af0e:	d103      	bne.n	810af18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810af10:	68fb      	ldr	r3, [r7, #12]
 810af12:	4a47      	ldr	r2, [pc, #284]	@ (810b030 <UART_Start_Receive_IT+0x234>)
 810af14:	675a      	str	r2, [r3, #116]	@ 0x74
 810af16:	e002      	b.n	810af1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810af18:	68fb      	ldr	r3, [r7, #12]
 810af1a:	4a46      	ldr	r2, [pc, #280]	@ (810b034 <UART_Start_Receive_IT+0x238>)
 810af1c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810af1e:	68fb      	ldr	r3, [r7, #12]
 810af20:	691b      	ldr	r3, [r3, #16]
 810af22:	2b00      	cmp	r3, #0
 810af24:	d01a      	beq.n	810af5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810af26:	68fb      	ldr	r3, [r7, #12]
 810af28:	681b      	ldr	r3, [r3, #0]
 810af2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810af2e:	e853 3f00 	ldrex	r3, [r3]
 810af32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810af34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810af36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810af3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810af3e:	68fb      	ldr	r3, [r7, #12]
 810af40:	681b      	ldr	r3, [r3, #0]
 810af42:	461a      	mov	r2, r3
 810af44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810af48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810af4a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810af4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810af50:	e841 2300 	strex	r3, r2, [r1]
 810af54:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810af56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810af58:	2b00      	cmp	r3, #0
 810af5a:	d1e4      	bne.n	810af26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	681b      	ldr	r3, [r3, #0]
 810af60:	3308      	adds	r3, #8
 810af62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810af66:	e853 3f00 	ldrex	r3, [r3]
 810af6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810af6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810af72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810af74:	68fb      	ldr	r3, [r7, #12]
 810af76:	681b      	ldr	r3, [r3, #0]
 810af78:	3308      	adds	r3, #8
 810af7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810af7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 810af7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810af82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810af84:	e841 2300 	strex	r3, r2, [r1]
 810af88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810af8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810af8c:	2b00      	cmp	r3, #0
 810af8e:	d1e5      	bne.n	810af5c <UART_Start_Receive_IT+0x160>
 810af90:	e046      	b.n	810b020 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810af92:	68fb      	ldr	r3, [r7, #12]
 810af94:	689b      	ldr	r3, [r3, #8]
 810af96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af9a:	d107      	bne.n	810afac <UART_Start_Receive_IT+0x1b0>
 810af9c:	68fb      	ldr	r3, [r7, #12]
 810af9e:	691b      	ldr	r3, [r3, #16]
 810afa0:	2b00      	cmp	r3, #0
 810afa2:	d103      	bne.n	810afac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810afa4:	68fb      	ldr	r3, [r7, #12]
 810afa6:	4a24      	ldr	r2, [pc, #144]	@ (810b038 <UART_Start_Receive_IT+0x23c>)
 810afa8:	675a      	str	r2, [r3, #116]	@ 0x74
 810afaa:	e002      	b.n	810afb2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810afac:	68fb      	ldr	r3, [r7, #12]
 810afae:	4a23      	ldr	r2, [pc, #140]	@ (810b03c <UART_Start_Receive_IT+0x240>)
 810afb0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810afb2:	68fb      	ldr	r3, [r7, #12]
 810afb4:	691b      	ldr	r3, [r3, #16]
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d019      	beq.n	810afee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810afba:	68fb      	ldr	r3, [r7, #12]
 810afbc:	681b      	ldr	r3, [r3, #0]
 810afbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810afc2:	e853 3f00 	ldrex	r3, [r3]
 810afc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810afc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810afca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810afce:	677b      	str	r3, [r7, #116]	@ 0x74
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	681b      	ldr	r3, [r3, #0]
 810afd4:	461a      	mov	r2, r3
 810afd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810afd8:	637b      	str	r3, [r7, #52]	@ 0x34
 810afda:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810afdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810afde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810afe0:	e841 2300 	strex	r3, r2, [r1]
 810afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810afe8:	2b00      	cmp	r3, #0
 810afea:	d1e6      	bne.n	810afba <UART_Start_Receive_IT+0x1be>
 810afec:	e018      	b.n	810b020 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810afee:	68fb      	ldr	r3, [r7, #12]
 810aff0:	681b      	ldr	r3, [r3, #0]
 810aff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aff4:	697b      	ldr	r3, [r7, #20]
 810aff6:	e853 3f00 	ldrex	r3, [r3]
 810affa:	613b      	str	r3, [r7, #16]
   return(result);
 810affc:	693b      	ldr	r3, [r7, #16]
 810affe:	f043 0320 	orr.w	r3, r3, #32
 810b002:	67bb      	str	r3, [r7, #120]	@ 0x78
 810b004:	68fb      	ldr	r3, [r7, #12]
 810b006:	681b      	ldr	r3, [r3, #0]
 810b008:	461a      	mov	r2, r3
 810b00a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810b00c:	623b      	str	r3, [r7, #32]
 810b00e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b010:	69f9      	ldr	r1, [r7, #28]
 810b012:	6a3a      	ldr	r2, [r7, #32]
 810b014:	e841 2300 	strex	r3, r2, [r1]
 810b018:	61bb      	str	r3, [r7, #24]
   return(result);
 810b01a:	69bb      	ldr	r3, [r7, #24]
 810b01c:	2b00      	cmp	r3, #0
 810b01e:	d1e6      	bne.n	810afee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810b020:	2300      	movs	r3, #0
}
 810b022:	4618      	mov	r0, r3
 810b024:	378c      	adds	r7, #140	@ 0x8c
 810b026:	46bd      	mov	sp, r7
 810b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b02c:	4770      	bx	lr
 810b02e:	bf00      	nop
 810b030:	0810b861 	.word	0x0810b861
 810b034:	0810b501 	.word	0x0810b501
 810b038:	0810b349 	.word	0x0810b349
 810b03c:	0810b191 	.word	0x0810b191

0810b040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b040:	b480      	push	{r7}
 810b042:	b095      	sub	sp, #84	@ 0x54
 810b044:	af00      	add	r7, sp, #0
 810b046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b050:	e853 3f00 	ldrex	r3, [r3]
 810b054:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b05c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b05e:	687b      	ldr	r3, [r7, #4]
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	461a      	mov	r2, r3
 810b064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b066:	643b      	str	r3, [r7, #64]	@ 0x40
 810b068:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b06a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b06c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b06e:	e841 2300 	strex	r3, r2, [r1]
 810b072:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b076:	2b00      	cmp	r3, #0
 810b078:	d1e6      	bne.n	810b048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	681b      	ldr	r3, [r3, #0]
 810b07e:	3308      	adds	r3, #8
 810b080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b082:	6a3b      	ldr	r3, [r7, #32]
 810b084:	e853 3f00 	ldrex	r3, [r3]
 810b088:	61fb      	str	r3, [r7, #28]
   return(result);
 810b08a:	69fb      	ldr	r3, [r7, #28]
 810b08c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b090:	f023 0301 	bic.w	r3, r3, #1
 810b094:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b096:	687b      	ldr	r3, [r7, #4]
 810b098:	681b      	ldr	r3, [r3, #0]
 810b09a:	3308      	adds	r3, #8
 810b09c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b0a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b0a6:	e841 2300 	strex	r3, r2, [r1]
 810b0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0ae:	2b00      	cmp	r3, #0
 810b0b0:	d1e3      	bne.n	810b07a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b0b6:	2b01      	cmp	r3, #1
 810b0b8:	d118      	bne.n	810b0ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	681b      	ldr	r3, [r3, #0]
 810b0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b0c0:	68fb      	ldr	r3, [r7, #12]
 810b0c2:	e853 3f00 	ldrex	r3, [r3]
 810b0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 810b0c8:	68bb      	ldr	r3, [r7, #8]
 810b0ca:	f023 0310 	bic.w	r3, r3, #16
 810b0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 810b0d0:	687b      	ldr	r3, [r7, #4]
 810b0d2:	681b      	ldr	r3, [r3, #0]
 810b0d4:	461a      	mov	r2, r3
 810b0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b0d8:	61bb      	str	r3, [r7, #24]
 810b0da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b0dc:	6979      	ldr	r1, [r7, #20]
 810b0de:	69ba      	ldr	r2, [r7, #24]
 810b0e0:	e841 2300 	strex	r3, r2, [r1]
 810b0e4:	613b      	str	r3, [r7, #16]
   return(result);
 810b0e6:	693b      	ldr	r3, [r7, #16]
 810b0e8:	2b00      	cmp	r3, #0
 810b0ea:	d1e6      	bne.n	810b0ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b0ec:	687b      	ldr	r3, [r7, #4]
 810b0ee:	2220      	movs	r2, #32
 810b0f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b0f4:	687b      	ldr	r3, [r7, #4]
 810b0f6:	2200      	movs	r2, #0
 810b0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b0fa:	687b      	ldr	r3, [r7, #4]
 810b0fc:	2200      	movs	r2, #0
 810b0fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810b100:	bf00      	nop
 810b102:	3754      	adds	r7, #84	@ 0x54
 810b104:	46bd      	mov	sp, r7
 810b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b10a:	4770      	bx	lr

0810b10c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810b10c:	b580      	push	{r7, lr}
 810b10e:	b084      	sub	sp, #16
 810b110:	af00      	add	r7, sp, #0
 810b112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b114:	687b      	ldr	r3, [r7, #4]
 810b116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	2200      	movs	r2, #0
 810b11e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810b122:	68fb      	ldr	r3, [r7, #12]
 810b124:	2200      	movs	r2, #0
 810b126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b12a:	68f8      	ldr	r0, [r7, #12]
 810b12c:	f7fe ff3a 	bl	8109fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b130:	bf00      	nop
 810b132:	3710      	adds	r7, #16
 810b134:	46bd      	mov	sp, r7
 810b136:	bd80      	pop	{r7, pc}

0810b138 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810b138:	b580      	push	{r7, lr}
 810b13a:	b088      	sub	sp, #32
 810b13c:	af00      	add	r7, sp, #0
 810b13e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b140:	687b      	ldr	r3, [r7, #4]
 810b142:	681b      	ldr	r3, [r3, #0]
 810b144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b146:	68fb      	ldr	r3, [r7, #12]
 810b148:	e853 3f00 	ldrex	r3, [r3]
 810b14c:	60bb      	str	r3, [r7, #8]
   return(result);
 810b14e:	68bb      	ldr	r3, [r7, #8]
 810b150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b154:	61fb      	str	r3, [r7, #28]
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	681b      	ldr	r3, [r3, #0]
 810b15a:	461a      	mov	r2, r3
 810b15c:	69fb      	ldr	r3, [r7, #28]
 810b15e:	61bb      	str	r3, [r7, #24]
 810b160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b162:	6979      	ldr	r1, [r7, #20]
 810b164:	69ba      	ldr	r2, [r7, #24]
 810b166:	e841 2300 	strex	r3, r2, [r1]
 810b16a:	613b      	str	r3, [r7, #16]
   return(result);
 810b16c:	693b      	ldr	r3, [r7, #16]
 810b16e:	2b00      	cmp	r3, #0
 810b170:	d1e6      	bne.n	810b140 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	2220      	movs	r2, #32
 810b176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810b17a:	687b      	ldr	r3, [r7, #4]
 810b17c:	2200      	movs	r2, #0
 810b17e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810b180:	6878      	ldr	r0, [r7, #4]
 810b182:	f7fe fefb 	bl	8109f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b186:	bf00      	nop
 810b188:	3720      	adds	r7, #32
 810b18a:	46bd      	mov	sp, r7
 810b18c:	bd80      	pop	{r7, pc}
	...

0810b190 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810b190:	b580      	push	{r7, lr}
 810b192:	b09c      	sub	sp, #112	@ 0x70
 810b194:	af00      	add	r7, sp, #0
 810b196:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810b198:	687b      	ldr	r3, [r7, #4]
 810b19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b19e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b1a2:	687b      	ldr	r3, [r7, #4]
 810b1a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b1a8:	2b22      	cmp	r3, #34	@ 0x22
 810b1aa:	f040 80be 	bne.w	810b32a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b1ae:	687b      	ldr	r3, [r7, #4]
 810b1b0:	681b      	ldr	r3, [r3, #0]
 810b1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b1b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810b1b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810b1bc:	b2d9      	uxtb	r1, r3
 810b1be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810b1c2:	b2da      	uxtb	r2, r3
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b1c8:	400a      	ands	r2, r1
 810b1ca:	b2d2      	uxtb	r2, r2
 810b1cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810b1ce:	687b      	ldr	r3, [r7, #4]
 810b1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b1d2:	1c5a      	adds	r2, r3, #1
 810b1d4:	687b      	ldr	r3, [r7, #4]
 810b1d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810b1d8:	687b      	ldr	r3, [r7, #4]
 810b1da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b1de:	b29b      	uxth	r3, r3
 810b1e0:	3b01      	subs	r3, #1
 810b1e2:	b29a      	uxth	r2, r3
 810b1e4:	687b      	ldr	r3, [r7, #4]
 810b1e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810b1ea:	687b      	ldr	r3, [r7, #4]
 810b1ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b1f0:	b29b      	uxth	r3, r3
 810b1f2:	2b00      	cmp	r3, #0
 810b1f4:	f040 80a1 	bne.w	810b33a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b1f8:	687b      	ldr	r3, [r7, #4]
 810b1fa:	681b      	ldr	r3, [r3, #0]
 810b1fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b200:	e853 3f00 	ldrex	r3, [r3]
 810b204:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810b206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b20c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	681b      	ldr	r3, [r3, #0]
 810b212:	461a      	mov	r2, r3
 810b214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810b216:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b218:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b21a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810b21c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810b21e:	e841 2300 	strex	r3, r2, [r1]
 810b222:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810b224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b226:	2b00      	cmp	r3, #0
 810b228:	d1e6      	bne.n	810b1f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b22a:	687b      	ldr	r3, [r7, #4]
 810b22c:	681b      	ldr	r3, [r3, #0]
 810b22e:	3308      	adds	r3, #8
 810b230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b234:	e853 3f00 	ldrex	r3, [r3]
 810b238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b23c:	f023 0301 	bic.w	r3, r3, #1
 810b240:	667b      	str	r3, [r7, #100]	@ 0x64
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	681b      	ldr	r3, [r3, #0]
 810b246:	3308      	adds	r3, #8
 810b248:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810b24a:	647a      	str	r2, [r7, #68]	@ 0x44
 810b24c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b24e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b252:	e841 2300 	strex	r3, r2, [r1]
 810b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b25a:	2b00      	cmp	r3, #0
 810b25c:	d1e5      	bne.n	810b22a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810b25e:	687b      	ldr	r3, [r7, #4]
 810b260:	2220      	movs	r2, #32
 810b262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810b266:	687b      	ldr	r3, [r7, #4]
 810b268:	2200      	movs	r2, #0
 810b26a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b26c:	687b      	ldr	r3, [r7, #4]
 810b26e:	2200      	movs	r2, #0
 810b270:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b272:	687b      	ldr	r3, [r7, #4]
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	4a33      	ldr	r2, [pc, #204]	@ (810b344 <UART_RxISR_8BIT+0x1b4>)
 810b278:	4293      	cmp	r3, r2
 810b27a:	d01f      	beq.n	810b2bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b27c:	687b      	ldr	r3, [r7, #4]
 810b27e:	681b      	ldr	r3, [r3, #0]
 810b280:	685b      	ldr	r3, [r3, #4]
 810b282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b286:	2b00      	cmp	r3, #0
 810b288:	d018      	beq.n	810b2bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b28a:	687b      	ldr	r3, [r7, #4]
 810b28c:	681b      	ldr	r3, [r3, #0]
 810b28e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b292:	e853 3f00 	ldrex	r3, [r3]
 810b296:	623b      	str	r3, [r7, #32]
   return(result);
 810b298:	6a3b      	ldr	r3, [r7, #32]
 810b29a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b29e:	663b      	str	r3, [r7, #96]	@ 0x60
 810b2a0:	687b      	ldr	r3, [r7, #4]
 810b2a2:	681b      	ldr	r3, [r3, #0]
 810b2a4:	461a      	mov	r2, r3
 810b2a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b2a8:	633b      	str	r3, [r7, #48]	@ 0x30
 810b2aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b2ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b2b0:	e841 2300 	strex	r3, r2, [r1]
 810b2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b2b8:	2b00      	cmp	r3, #0
 810b2ba:	d1e6      	bne.n	810b28a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b2bc:	687b      	ldr	r3, [r7, #4]
 810b2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b2c0:	2b01      	cmp	r3, #1
 810b2c2:	d12e      	bne.n	810b322 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b2c4:	687b      	ldr	r3, [r7, #4]
 810b2c6:	2200      	movs	r2, #0
 810b2c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b2ca:	687b      	ldr	r3, [r7, #4]
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2d0:	693b      	ldr	r3, [r7, #16]
 810b2d2:	e853 3f00 	ldrex	r3, [r3]
 810b2d6:	60fb      	str	r3, [r7, #12]
   return(result);
 810b2d8:	68fb      	ldr	r3, [r7, #12]
 810b2da:	f023 0310 	bic.w	r3, r3, #16
 810b2de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b2e0:	687b      	ldr	r3, [r7, #4]
 810b2e2:	681b      	ldr	r3, [r3, #0]
 810b2e4:	461a      	mov	r2, r3
 810b2e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b2e8:	61fb      	str	r3, [r7, #28]
 810b2ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2ec:	69b9      	ldr	r1, [r7, #24]
 810b2ee:	69fa      	ldr	r2, [r7, #28]
 810b2f0:	e841 2300 	strex	r3, r2, [r1]
 810b2f4:	617b      	str	r3, [r7, #20]
   return(result);
 810b2f6:	697b      	ldr	r3, [r7, #20]
 810b2f8:	2b00      	cmp	r3, #0
 810b2fa:	d1e6      	bne.n	810b2ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b2fc:	687b      	ldr	r3, [r7, #4]
 810b2fe:	681b      	ldr	r3, [r3, #0]
 810b300:	69db      	ldr	r3, [r3, #28]
 810b302:	f003 0310 	and.w	r3, r3, #16
 810b306:	2b10      	cmp	r3, #16
 810b308:	d103      	bne.n	810b312 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b30a:	687b      	ldr	r3, [r7, #4]
 810b30c:	681b      	ldr	r3, [r3, #0]
 810b30e:	2210      	movs	r2, #16
 810b310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b312:	687b      	ldr	r3, [r7, #4]
 810b314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b318:	4619      	mov	r1, r3
 810b31a:	6878      	ldr	r0, [r7, #4]
 810b31c:	f7f6 fb70 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b320:	e00b      	b.n	810b33a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810b322:	6878      	ldr	r0, [r7, #4]
 810b324:	f7fe fe34 	bl	8109f90 <HAL_UART_RxCpltCallback>
}
 810b328:	e007      	b.n	810b33a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b32a:	687b      	ldr	r3, [r7, #4]
 810b32c:	681b      	ldr	r3, [r3, #0]
 810b32e:	699a      	ldr	r2, [r3, #24]
 810b330:	687b      	ldr	r3, [r7, #4]
 810b332:	681b      	ldr	r3, [r3, #0]
 810b334:	f042 0208 	orr.w	r2, r2, #8
 810b338:	619a      	str	r2, [r3, #24]
}
 810b33a:	bf00      	nop
 810b33c:	3770      	adds	r7, #112	@ 0x70
 810b33e:	46bd      	mov	sp, r7
 810b340:	bd80      	pop	{r7, pc}
 810b342:	bf00      	nop
 810b344:	58000c00 	.word	0x58000c00

0810b348 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810b348:	b580      	push	{r7, lr}
 810b34a:	b09c      	sub	sp, #112	@ 0x70
 810b34c:	af00      	add	r7, sp, #0
 810b34e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810b350:	687b      	ldr	r3, [r7, #4]
 810b352:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b356:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b35a:	687b      	ldr	r3, [r7, #4]
 810b35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b360:	2b22      	cmp	r3, #34	@ 0x22
 810b362:	f040 80be 	bne.w	810b4e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b366:	687b      	ldr	r3, [r7, #4]
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b36c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b374:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810b376:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810b37a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810b37e:	4013      	ands	r3, r2
 810b380:	b29a      	uxth	r2, r3
 810b382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810b384:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810b386:	687b      	ldr	r3, [r7, #4]
 810b388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b38a:	1c9a      	adds	r2, r3, #2
 810b38c:	687b      	ldr	r3, [r7, #4]
 810b38e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810b390:	687b      	ldr	r3, [r7, #4]
 810b392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b396:	b29b      	uxth	r3, r3
 810b398:	3b01      	subs	r3, #1
 810b39a:	b29a      	uxth	r2, r3
 810b39c:	687b      	ldr	r3, [r7, #4]
 810b39e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810b3a2:	687b      	ldr	r3, [r7, #4]
 810b3a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b3a8:	b29b      	uxth	r3, r3
 810b3aa:	2b00      	cmp	r3, #0
 810b3ac:	f040 80a1 	bne.w	810b4f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b3b0:	687b      	ldr	r3, [r7, #4]
 810b3b2:	681b      	ldr	r3, [r3, #0]
 810b3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b3b8:	e853 3f00 	ldrex	r3, [r3]
 810b3bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810b3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b3c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 810b3c6:	687b      	ldr	r3, [r7, #4]
 810b3c8:	681b      	ldr	r3, [r3, #0]
 810b3ca:	461a      	mov	r2, r3
 810b3cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810b3ce:	657b      	str	r3, [r7, #84]	@ 0x54
 810b3d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b3d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810b3d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810b3d6:	e841 2300 	strex	r3, r2, [r1]
 810b3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810b3dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d1e6      	bne.n	810b3b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b3e2:	687b      	ldr	r3, [r7, #4]
 810b3e4:	681b      	ldr	r3, [r3, #0]
 810b3e6:	3308      	adds	r3, #8
 810b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b3ec:	e853 3f00 	ldrex	r3, [r3]
 810b3f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3f4:	f023 0301 	bic.w	r3, r3, #1
 810b3f8:	663b      	str	r3, [r7, #96]	@ 0x60
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	3308      	adds	r3, #8
 810b400:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810b402:	643a      	str	r2, [r7, #64]	@ 0x40
 810b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b40a:	e841 2300 	strex	r3, r2, [r1]
 810b40e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b412:	2b00      	cmp	r3, #0
 810b414:	d1e5      	bne.n	810b3e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810b416:	687b      	ldr	r3, [r7, #4]
 810b418:	2220      	movs	r2, #32
 810b41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810b41e:	687b      	ldr	r3, [r7, #4]
 810b420:	2200      	movs	r2, #0
 810b422:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b424:	687b      	ldr	r3, [r7, #4]
 810b426:	2200      	movs	r2, #0
 810b428:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b42a:	687b      	ldr	r3, [r7, #4]
 810b42c:	681b      	ldr	r3, [r3, #0]
 810b42e:	4a33      	ldr	r2, [pc, #204]	@ (810b4fc <UART_RxISR_16BIT+0x1b4>)
 810b430:	4293      	cmp	r3, r2
 810b432:	d01f      	beq.n	810b474 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b434:	687b      	ldr	r3, [r7, #4]
 810b436:	681b      	ldr	r3, [r3, #0]
 810b438:	685b      	ldr	r3, [r3, #4]
 810b43a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b43e:	2b00      	cmp	r3, #0
 810b440:	d018      	beq.n	810b474 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b442:	687b      	ldr	r3, [r7, #4]
 810b444:	681b      	ldr	r3, [r3, #0]
 810b446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b448:	6a3b      	ldr	r3, [r7, #32]
 810b44a:	e853 3f00 	ldrex	r3, [r3]
 810b44e:	61fb      	str	r3, [r7, #28]
   return(result);
 810b450:	69fb      	ldr	r3, [r7, #28]
 810b452:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b458:	687b      	ldr	r3, [r7, #4]
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	461a      	mov	r2, r3
 810b45e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b462:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b468:	e841 2300 	strex	r3, r2, [r1]
 810b46c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b470:	2b00      	cmp	r3, #0
 810b472:	d1e6      	bne.n	810b442 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b474:	687b      	ldr	r3, [r7, #4]
 810b476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b478:	2b01      	cmp	r3, #1
 810b47a:	d12e      	bne.n	810b4da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b47c:	687b      	ldr	r3, [r7, #4]
 810b47e:	2200      	movs	r2, #0
 810b480:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b482:	687b      	ldr	r3, [r7, #4]
 810b484:	681b      	ldr	r3, [r3, #0]
 810b486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b488:	68fb      	ldr	r3, [r7, #12]
 810b48a:	e853 3f00 	ldrex	r3, [r3]
 810b48e:	60bb      	str	r3, [r7, #8]
   return(result);
 810b490:	68bb      	ldr	r3, [r7, #8]
 810b492:	f023 0310 	bic.w	r3, r3, #16
 810b496:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	681b      	ldr	r3, [r3, #0]
 810b49c:	461a      	mov	r2, r3
 810b49e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810b4a0:	61bb      	str	r3, [r7, #24]
 810b4a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4a4:	6979      	ldr	r1, [r7, #20]
 810b4a6:	69ba      	ldr	r2, [r7, #24]
 810b4a8:	e841 2300 	strex	r3, r2, [r1]
 810b4ac:	613b      	str	r3, [r7, #16]
   return(result);
 810b4ae:	693b      	ldr	r3, [r7, #16]
 810b4b0:	2b00      	cmp	r3, #0
 810b4b2:	d1e6      	bne.n	810b482 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b4b4:	687b      	ldr	r3, [r7, #4]
 810b4b6:	681b      	ldr	r3, [r3, #0]
 810b4b8:	69db      	ldr	r3, [r3, #28]
 810b4ba:	f003 0310 	and.w	r3, r3, #16
 810b4be:	2b10      	cmp	r3, #16
 810b4c0:	d103      	bne.n	810b4ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b4c2:	687b      	ldr	r3, [r7, #4]
 810b4c4:	681b      	ldr	r3, [r3, #0]
 810b4c6:	2210      	movs	r2, #16
 810b4c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b4ca:	687b      	ldr	r3, [r7, #4]
 810b4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b4d0:	4619      	mov	r1, r3
 810b4d2:	6878      	ldr	r0, [r7, #4]
 810b4d4:	f7f6 fa94 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b4d8:	e00b      	b.n	810b4f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810b4da:	6878      	ldr	r0, [r7, #4]
 810b4dc:	f7fe fd58 	bl	8109f90 <HAL_UART_RxCpltCallback>
}
 810b4e0:	e007      	b.n	810b4f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b4e2:	687b      	ldr	r3, [r7, #4]
 810b4e4:	681b      	ldr	r3, [r3, #0]
 810b4e6:	699a      	ldr	r2, [r3, #24]
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	681b      	ldr	r3, [r3, #0]
 810b4ec:	f042 0208 	orr.w	r2, r2, #8
 810b4f0:	619a      	str	r2, [r3, #24]
}
 810b4f2:	bf00      	nop
 810b4f4:	3770      	adds	r7, #112	@ 0x70
 810b4f6:	46bd      	mov	sp, r7
 810b4f8:	bd80      	pop	{r7, pc}
 810b4fa:	bf00      	nop
 810b4fc:	58000c00 	.word	0x58000c00

0810b500 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b500:	b580      	push	{r7, lr}
 810b502:	b0ac      	sub	sp, #176	@ 0xb0
 810b504:	af00      	add	r7, sp, #0
 810b506:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810b508:	687b      	ldr	r3, [r7, #4]
 810b50a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b50e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b512:	687b      	ldr	r3, [r7, #4]
 810b514:	681b      	ldr	r3, [r3, #0]
 810b516:	69db      	ldr	r3, [r3, #28]
 810b518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b51c:	687b      	ldr	r3, [r7, #4]
 810b51e:	681b      	ldr	r3, [r3, #0]
 810b520:	681b      	ldr	r3, [r3, #0]
 810b522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b526:	687b      	ldr	r3, [r7, #4]
 810b528:	681b      	ldr	r3, [r3, #0]
 810b52a:	689b      	ldr	r3, [r3, #8]
 810b52c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b530:	687b      	ldr	r3, [r7, #4]
 810b532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b536:	2b22      	cmp	r3, #34	@ 0x22
 810b538:	f040 8182 	bne.w	810b840 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b53c:	687b      	ldr	r3, [r7, #4]
 810b53e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b542:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b546:	e125      	b.n	810b794 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b548:	687b      	ldr	r3, [r7, #4]
 810b54a:	681b      	ldr	r3, [r3, #0]
 810b54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b54e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810b552:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810b556:	b2d9      	uxtb	r1, r3
 810b558:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810b55c:	b2da      	uxtb	r2, r3
 810b55e:	687b      	ldr	r3, [r7, #4]
 810b560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b562:	400a      	ands	r2, r1
 810b564:	b2d2      	uxtb	r2, r2
 810b566:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b56c:	1c5a      	adds	r2, r3, #1
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b578:	b29b      	uxth	r3, r3
 810b57a:	3b01      	subs	r3, #1
 810b57c:	b29a      	uxth	r2, r3
 810b57e:	687b      	ldr	r3, [r7, #4]
 810b580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b584:	687b      	ldr	r3, [r7, #4]
 810b586:	681b      	ldr	r3, [r3, #0]
 810b588:	69db      	ldr	r3, [r3, #28]
 810b58a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b58e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b592:	f003 0307 	and.w	r3, r3, #7
 810b596:	2b00      	cmp	r3, #0
 810b598:	d053      	beq.n	810b642 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b59e:	f003 0301 	and.w	r3, r3, #1
 810b5a2:	2b00      	cmp	r3, #0
 810b5a4:	d011      	beq.n	810b5ca <UART_RxISR_8BIT_FIFOEN+0xca>
 810b5a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810b5aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b5ae:	2b00      	cmp	r3, #0
 810b5b0:	d00b      	beq.n	810b5ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	2201      	movs	r2, #1
 810b5b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b5c0:	f043 0201 	orr.w	r2, r3, #1
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b5ce:	f003 0302 	and.w	r3, r3, #2
 810b5d2:	2b00      	cmp	r3, #0
 810b5d4:	d011      	beq.n	810b5fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 810b5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b5da:	f003 0301 	and.w	r3, r3, #1
 810b5de:	2b00      	cmp	r3, #0
 810b5e0:	d00b      	beq.n	810b5fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b5e2:	687b      	ldr	r3, [r7, #4]
 810b5e4:	681b      	ldr	r3, [r3, #0]
 810b5e6:	2202      	movs	r2, #2
 810b5e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b5ea:	687b      	ldr	r3, [r7, #4]
 810b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b5f0:	f043 0204 	orr.w	r2, r3, #4
 810b5f4:	687b      	ldr	r3, [r7, #4]
 810b5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b5fe:	f003 0304 	and.w	r3, r3, #4
 810b602:	2b00      	cmp	r3, #0
 810b604:	d011      	beq.n	810b62a <UART_RxISR_8BIT_FIFOEN+0x12a>
 810b606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b60a:	f003 0301 	and.w	r3, r3, #1
 810b60e:	2b00      	cmp	r3, #0
 810b610:	d00b      	beq.n	810b62a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	2204      	movs	r2, #4
 810b618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b61a:	687b      	ldr	r3, [r7, #4]
 810b61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b620:	f043 0202 	orr.w	r2, r3, #2
 810b624:	687b      	ldr	r3, [r7, #4]
 810b626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b62a:	687b      	ldr	r3, [r7, #4]
 810b62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b630:	2b00      	cmp	r3, #0
 810b632:	d006      	beq.n	810b642 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b634:	6878      	ldr	r0, [r7, #4]
 810b636:	f7fe fcb5 	bl	8109fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	2200      	movs	r2, #0
 810b63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b648:	b29b      	uxth	r3, r3
 810b64a:	2b00      	cmp	r3, #0
 810b64c:	f040 80a2 	bne.w	810b794 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b650:	687b      	ldr	r3, [r7, #4]
 810b652:	681b      	ldr	r3, [r3, #0]
 810b654:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b658:	e853 3f00 	ldrex	r3, [r3]
 810b65c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810b65e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b668:	687b      	ldr	r3, [r7, #4]
 810b66a:	681b      	ldr	r3, [r3, #0]
 810b66c:	461a      	mov	r2, r3
 810b66e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810b672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b674:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b676:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810b678:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810b67a:	e841 2300 	strex	r3, r2, [r1]
 810b67e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810b680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b682:	2b00      	cmp	r3, #0
 810b684:	d1e4      	bne.n	810b650 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b686:	687b      	ldr	r3, [r7, #4]
 810b688:	681b      	ldr	r3, [r3, #0]
 810b68a:	3308      	adds	r3, #8
 810b68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b68e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b690:	e853 3f00 	ldrex	r3, [r3]
 810b694:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810b696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810b698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b69c:	f023 0301 	bic.w	r3, r3, #1
 810b6a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b6a4:	687b      	ldr	r3, [r7, #4]
 810b6a6:	681b      	ldr	r3, [r3, #0]
 810b6a8:	3308      	adds	r3, #8
 810b6aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810b6ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 810b6b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b6b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810b6b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810b6b6:	e841 2300 	strex	r3, r2, [r1]
 810b6ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810b6bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b6be:	2b00      	cmp	r3, #0
 810b6c0:	d1e1      	bne.n	810b686 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b6c2:	687b      	ldr	r3, [r7, #4]
 810b6c4:	2220      	movs	r2, #32
 810b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b6ca:	687b      	ldr	r3, [r7, #4]
 810b6cc:	2200      	movs	r2, #0
 810b6ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b6d0:	687b      	ldr	r3, [r7, #4]
 810b6d2:	2200      	movs	r2, #0
 810b6d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b6d6:	687b      	ldr	r3, [r7, #4]
 810b6d8:	681b      	ldr	r3, [r3, #0]
 810b6da:	4a5f      	ldr	r2, [pc, #380]	@ (810b858 <UART_RxISR_8BIT_FIFOEN+0x358>)
 810b6dc:	4293      	cmp	r3, r2
 810b6de:	d021      	beq.n	810b724 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b6e0:	687b      	ldr	r3, [r7, #4]
 810b6e2:	681b      	ldr	r3, [r3, #0]
 810b6e4:	685b      	ldr	r3, [r3, #4]
 810b6e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b6ea:	2b00      	cmp	r3, #0
 810b6ec:	d01a      	beq.n	810b724 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b6ee:	687b      	ldr	r3, [r7, #4]
 810b6f0:	681b      	ldr	r3, [r3, #0]
 810b6f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b6f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b6f6:	e853 3f00 	ldrex	r3, [r3]
 810b6fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810b6fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b6fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	681b      	ldr	r3, [r3, #0]
 810b70a:	461a      	mov	r2, r3
 810b70c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b710:	657b      	str	r3, [r7, #84]	@ 0x54
 810b712:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810b716:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810b718:	e841 2300 	strex	r3, r2, [r1]
 810b71c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810b71e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b720:	2b00      	cmp	r3, #0
 810b722:	d1e4      	bne.n	810b6ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b728:	2b01      	cmp	r3, #1
 810b72a:	d130      	bne.n	810b78e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	2200      	movs	r2, #0
 810b730:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b732:	687b      	ldr	r3, [r7, #4]
 810b734:	681b      	ldr	r3, [r3, #0]
 810b736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b73a:	e853 3f00 	ldrex	r3, [r3]
 810b73e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b742:	f023 0310 	bic.w	r3, r3, #16
 810b746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b74a:	687b      	ldr	r3, [r7, #4]
 810b74c:	681b      	ldr	r3, [r3, #0]
 810b74e:	461a      	mov	r2, r3
 810b750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810b754:	643b      	str	r3, [r7, #64]	@ 0x40
 810b756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b75a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b75c:	e841 2300 	strex	r3, r2, [r1]
 810b760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b764:	2b00      	cmp	r3, #0
 810b766:	d1e4      	bne.n	810b732 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b768:	687b      	ldr	r3, [r7, #4]
 810b76a:	681b      	ldr	r3, [r3, #0]
 810b76c:	69db      	ldr	r3, [r3, #28]
 810b76e:	f003 0310 	and.w	r3, r3, #16
 810b772:	2b10      	cmp	r3, #16
 810b774:	d103      	bne.n	810b77e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b776:	687b      	ldr	r3, [r7, #4]
 810b778:	681b      	ldr	r3, [r3, #0]
 810b77a:	2210      	movs	r2, #16
 810b77c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b77e:	687b      	ldr	r3, [r7, #4]
 810b780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b784:	4619      	mov	r1, r3
 810b786:	6878      	ldr	r0, [r7, #4]
 810b788:	f7f6 f93a 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
 810b78c:	e002      	b.n	810b794 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810b78e:	6878      	ldr	r0, [r7, #4]
 810b790:	f7fe fbfe 	bl	8109f90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b794:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810b798:	2b00      	cmp	r3, #0
 810b79a:	d006      	beq.n	810b7aa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 810b79c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b7a0:	f003 0320 	and.w	r3, r3, #32
 810b7a4:	2b00      	cmp	r3, #0
 810b7a6:	f47f aecf 	bne.w	810b548 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b7aa:	687b      	ldr	r3, [r7, #4]
 810b7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b7b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b7b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810b7b8:	2b00      	cmp	r3, #0
 810b7ba:	d049      	beq.n	810b850 <UART_RxISR_8BIT_FIFOEN+0x350>
 810b7bc:	687b      	ldr	r3, [r7, #4]
 810b7be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b7c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810b7c6:	429a      	cmp	r2, r3
 810b7c8:	d242      	bcs.n	810b850 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b7ca:	687b      	ldr	r3, [r7, #4]
 810b7cc:	681b      	ldr	r3, [r3, #0]
 810b7ce:	3308      	adds	r3, #8
 810b7d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b7d2:	6a3b      	ldr	r3, [r7, #32]
 810b7d4:	e853 3f00 	ldrex	r3, [r3]
 810b7d8:	61fb      	str	r3, [r7, #28]
   return(result);
 810b7da:	69fb      	ldr	r3, [r7, #28]
 810b7dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b7e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	681b      	ldr	r3, [r3, #0]
 810b7e8:	3308      	adds	r3, #8
 810b7ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810b7ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b7f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b7f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b7f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b7f6:	e841 2300 	strex	r3, r2, [r1]
 810b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b7fe:	2b00      	cmp	r3, #0
 810b800:	d1e3      	bne.n	810b7ca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810b802:	687b      	ldr	r3, [r7, #4]
 810b804:	4a15      	ldr	r2, [pc, #84]	@ (810b85c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810b806:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b808:	687b      	ldr	r3, [r7, #4]
 810b80a:	681b      	ldr	r3, [r3, #0]
 810b80c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b80e:	68fb      	ldr	r3, [r7, #12]
 810b810:	e853 3f00 	ldrex	r3, [r3]
 810b814:	60bb      	str	r3, [r7, #8]
   return(result);
 810b816:	68bb      	ldr	r3, [r7, #8]
 810b818:	f043 0320 	orr.w	r3, r3, #32
 810b81c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b820:	687b      	ldr	r3, [r7, #4]
 810b822:	681b      	ldr	r3, [r3, #0]
 810b824:	461a      	mov	r2, r3
 810b826:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810b82a:	61bb      	str	r3, [r7, #24]
 810b82c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b82e:	6979      	ldr	r1, [r7, #20]
 810b830:	69ba      	ldr	r2, [r7, #24]
 810b832:	e841 2300 	strex	r3, r2, [r1]
 810b836:	613b      	str	r3, [r7, #16]
   return(result);
 810b838:	693b      	ldr	r3, [r7, #16]
 810b83a:	2b00      	cmp	r3, #0
 810b83c:	d1e4      	bne.n	810b808 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b83e:	e007      	b.n	810b850 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b840:	687b      	ldr	r3, [r7, #4]
 810b842:	681b      	ldr	r3, [r3, #0]
 810b844:	699a      	ldr	r2, [r3, #24]
 810b846:	687b      	ldr	r3, [r7, #4]
 810b848:	681b      	ldr	r3, [r3, #0]
 810b84a:	f042 0208 	orr.w	r2, r2, #8
 810b84e:	619a      	str	r2, [r3, #24]
}
 810b850:	bf00      	nop
 810b852:	37b0      	adds	r7, #176	@ 0xb0
 810b854:	46bd      	mov	sp, r7
 810b856:	bd80      	pop	{r7, pc}
 810b858:	58000c00 	.word	0x58000c00
 810b85c:	0810b191 	.word	0x0810b191

0810b860 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b860:	b580      	push	{r7, lr}
 810b862:	b0ae      	sub	sp, #184	@ 0xb8
 810b864:	af00      	add	r7, sp, #0
 810b866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810b868:	687b      	ldr	r3, [r7, #4]
 810b86a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b86e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b872:	687b      	ldr	r3, [r7, #4]
 810b874:	681b      	ldr	r3, [r3, #0]
 810b876:	69db      	ldr	r3, [r3, #28]
 810b878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b87c:	687b      	ldr	r3, [r7, #4]
 810b87e:	681b      	ldr	r3, [r3, #0]
 810b880:	681b      	ldr	r3, [r3, #0]
 810b882:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b886:	687b      	ldr	r3, [r7, #4]
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	689b      	ldr	r3, [r3, #8]
 810b88c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b890:	687b      	ldr	r3, [r7, #4]
 810b892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b896:	2b22      	cmp	r3, #34	@ 0x22
 810b898:	f040 8186 	bne.w	810bba8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b89c:	687b      	ldr	r3, [r7, #4]
 810b89e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b8a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b8a6:	e129      	b.n	810bafc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b8a8:	687b      	ldr	r3, [r7, #4]
 810b8aa:	681b      	ldr	r3, [r3, #0]
 810b8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b8ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810b8b2:	687b      	ldr	r3, [r7, #4]
 810b8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810b8ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810b8be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810b8c2:	4013      	ands	r3, r2
 810b8c4:	b29a      	uxth	r2, r3
 810b8c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b8ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810b8cc:	687b      	ldr	r3, [r7, #4]
 810b8ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b8d0:	1c9a      	adds	r2, r3, #2
 810b8d2:	687b      	ldr	r3, [r7, #4]
 810b8d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b8d6:	687b      	ldr	r3, [r7, #4]
 810b8d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b8dc:	b29b      	uxth	r3, r3
 810b8de:	3b01      	subs	r3, #1
 810b8e0:	b29a      	uxth	r2, r3
 810b8e2:	687b      	ldr	r3, [r7, #4]
 810b8e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b8e8:	687b      	ldr	r3, [r7, #4]
 810b8ea:	681b      	ldr	r3, [r3, #0]
 810b8ec:	69db      	ldr	r3, [r3, #28]
 810b8ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b8f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b8f6:	f003 0307 	and.w	r3, r3, #7
 810b8fa:	2b00      	cmp	r3, #0
 810b8fc:	d053      	beq.n	810b9a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b8fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b902:	f003 0301 	and.w	r3, r3, #1
 810b906:	2b00      	cmp	r3, #0
 810b908:	d011      	beq.n	810b92e <UART_RxISR_16BIT_FIFOEN+0xce>
 810b90a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b90e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b912:	2b00      	cmp	r3, #0
 810b914:	d00b      	beq.n	810b92e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b916:	687b      	ldr	r3, [r7, #4]
 810b918:	681b      	ldr	r3, [r3, #0]
 810b91a:	2201      	movs	r2, #1
 810b91c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b91e:	687b      	ldr	r3, [r7, #4]
 810b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b924:	f043 0201 	orr.w	r2, r3, #1
 810b928:	687b      	ldr	r3, [r7, #4]
 810b92a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b92e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b932:	f003 0302 	and.w	r3, r3, #2
 810b936:	2b00      	cmp	r3, #0
 810b938:	d011      	beq.n	810b95e <UART_RxISR_16BIT_FIFOEN+0xfe>
 810b93a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b93e:	f003 0301 	and.w	r3, r3, #1
 810b942:	2b00      	cmp	r3, #0
 810b944:	d00b      	beq.n	810b95e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b946:	687b      	ldr	r3, [r7, #4]
 810b948:	681b      	ldr	r3, [r3, #0]
 810b94a:	2202      	movs	r2, #2
 810b94c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b94e:	687b      	ldr	r3, [r7, #4]
 810b950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b954:	f043 0204 	orr.w	r2, r3, #4
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b95e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b962:	f003 0304 	and.w	r3, r3, #4
 810b966:	2b00      	cmp	r3, #0
 810b968:	d011      	beq.n	810b98e <UART_RxISR_16BIT_FIFOEN+0x12e>
 810b96a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b96e:	f003 0301 	and.w	r3, r3, #1
 810b972:	2b00      	cmp	r3, #0
 810b974:	d00b      	beq.n	810b98e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b976:	687b      	ldr	r3, [r7, #4]
 810b978:	681b      	ldr	r3, [r3, #0]
 810b97a:	2204      	movs	r2, #4
 810b97c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b97e:	687b      	ldr	r3, [r7, #4]
 810b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b984:	f043 0202 	orr.w	r2, r3, #2
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b98e:	687b      	ldr	r3, [r7, #4]
 810b990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b994:	2b00      	cmp	r3, #0
 810b996:	d006      	beq.n	810b9a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b998:	6878      	ldr	r0, [r7, #4]
 810b99a:	f7fe fb03 	bl	8109fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b99e:	687b      	ldr	r3, [r7, #4]
 810b9a0:	2200      	movs	r2, #0
 810b9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b9a6:	687b      	ldr	r3, [r7, #4]
 810b9a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b9ac:	b29b      	uxth	r3, r3
 810b9ae:	2b00      	cmp	r3, #0
 810b9b0:	f040 80a4 	bne.w	810bafc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b9b4:	687b      	ldr	r3, [r7, #4]
 810b9b6:	681b      	ldr	r3, [r3, #0]
 810b9b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b9ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b9bc:	e853 3f00 	ldrex	r3, [r3]
 810b9c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810b9c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b9c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b9c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b9cc:	687b      	ldr	r3, [r7, #4]
 810b9ce:	681b      	ldr	r3, [r3, #0]
 810b9d0:	461a      	mov	r2, r3
 810b9d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810b9d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b9da:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b9dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810b9de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810b9e2:	e841 2300 	strex	r3, r2, [r1]
 810b9e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810b9e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810b9ea:	2b00      	cmp	r3, #0
 810b9ec:	d1e2      	bne.n	810b9b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b9ee:	687b      	ldr	r3, [r7, #4]
 810b9f0:	681b      	ldr	r3, [r3, #0]
 810b9f2:	3308      	adds	r3, #8
 810b9f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b9f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b9f8:	e853 3f00 	ldrex	r3, [r3]
 810b9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810b9fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ba00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ba04:	f023 0301 	bic.w	r3, r3, #1
 810ba08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810ba0c:	687b      	ldr	r3, [r7, #4]
 810ba0e:	681b      	ldr	r3, [r3, #0]
 810ba10:	3308      	adds	r3, #8
 810ba12:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810ba16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810ba18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ba1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810ba1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810ba1e:	e841 2300 	strex	r3, r2, [r1]
 810ba22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810ba24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ba26:	2b00      	cmp	r3, #0
 810ba28:	d1e1      	bne.n	810b9ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	2220      	movs	r2, #32
 810ba2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810ba32:	687b      	ldr	r3, [r7, #4]
 810ba34:	2200      	movs	r2, #0
 810ba36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	2200      	movs	r2, #0
 810ba3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	681b      	ldr	r3, [r3, #0]
 810ba42:	4a5f      	ldr	r2, [pc, #380]	@ (810bbc0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 810ba44:	4293      	cmp	r3, r2
 810ba46:	d021      	beq.n	810ba8c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810ba48:	687b      	ldr	r3, [r7, #4]
 810ba4a:	681b      	ldr	r3, [r3, #0]
 810ba4c:	685b      	ldr	r3, [r3, #4]
 810ba4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ba52:	2b00      	cmp	r3, #0
 810ba54:	d01a      	beq.n	810ba8c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810ba56:	687b      	ldr	r3, [r7, #4]
 810ba58:	681b      	ldr	r3, [r3, #0]
 810ba5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ba5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ba5e:	e853 3f00 	ldrex	r3, [r3]
 810ba62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ba64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ba66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810ba6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	681b      	ldr	r3, [r3, #0]
 810ba72:	461a      	mov	r2, r3
 810ba74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810ba78:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ba7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ba7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ba7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ba80:	e841 2300 	strex	r3, r2, [r1]
 810ba84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ba86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ba88:	2b00      	cmp	r3, #0
 810ba8a:	d1e4      	bne.n	810ba56 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ba90:	2b01      	cmp	r3, #1
 810ba92:	d130      	bne.n	810baf6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ba94:	687b      	ldr	r3, [r7, #4]
 810ba96:	2200      	movs	r2, #0
 810ba98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ba9a:	687b      	ldr	r3, [r7, #4]
 810ba9c:	681b      	ldr	r3, [r3, #0]
 810ba9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810baa2:	e853 3f00 	ldrex	r3, [r3]
 810baa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810baa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810baaa:	f023 0310 	bic.w	r3, r3, #16
 810baae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810bab2:	687b      	ldr	r3, [r7, #4]
 810bab4:	681b      	ldr	r3, [r3, #0]
 810bab6:	461a      	mov	r2, r3
 810bab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810babc:	647b      	str	r3, [r7, #68]	@ 0x44
 810babe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810bac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bac4:	e841 2300 	strex	r3, r2, [r1]
 810bac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810baca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bacc:	2b00      	cmp	r3, #0
 810bace:	d1e4      	bne.n	810ba9a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810bad0:	687b      	ldr	r3, [r7, #4]
 810bad2:	681b      	ldr	r3, [r3, #0]
 810bad4:	69db      	ldr	r3, [r3, #28]
 810bad6:	f003 0310 	and.w	r3, r3, #16
 810bada:	2b10      	cmp	r3, #16
 810badc:	d103      	bne.n	810bae6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810bade:	687b      	ldr	r3, [r7, #4]
 810bae0:	681b      	ldr	r3, [r3, #0]
 810bae2:	2210      	movs	r2, #16
 810bae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810bae6:	687b      	ldr	r3, [r7, #4]
 810bae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810baec:	4619      	mov	r1, r3
 810baee:	6878      	ldr	r0, [r7, #4]
 810baf0:	f7f5 ff86 	bl	8101a00 <HAL_UARTEx_RxEventCallback>
 810baf4:	e002      	b.n	810bafc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810baf6:	6878      	ldr	r0, [r7, #4]
 810baf8:	f7fe fa4a 	bl	8109f90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810bafc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810bb00:	2b00      	cmp	r3, #0
 810bb02:	d006      	beq.n	810bb12 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 810bb04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810bb08:	f003 0320 	and.w	r3, r3, #32
 810bb0c:	2b00      	cmp	r3, #0
 810bb0e:	f47f aecb 	bne.w	810b8a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810bb18:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810bb1c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810bb20:	2b00      	cmp	r3, #0
 810bb22:	d049      	beq.n	810bbb8 <UART_RxISR_16BIT_FIFOEN+0x358>
 810bb24:	687b      	ldr	r3, [r7, #4]
 810bb26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810bb2a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810bb2e:	429a      	cmp	r2, r3
 810bb30:	d242      	bcs.n	810bbb8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810bb32:	687b      	ldr	r3, [r7, #4]
 810bb34:	681b      	ldr	r3, [r3, #0]
 810bb36:	3308      	adds	r3, #8
 810bb38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bb3c:	e853 3f00 	ldrex	r3, [r3]
 810bb40:	623b      	str	r3, [r7, #32]
   return(result);
 810bb42:	6a3b      	ldr	r3, [r7, #32]
 810bb44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810bb48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810bb4c:	687b      	ldr	r3, [r7, #4]
 810bb4e:	681b      	ldr	r3, [r3, #0]
 810bb50:	3308      	adds	r3, #8
 810bb52:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810bb56:	633a      	str	r2, [r7, #48]	@ 0x30
 810bb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bb5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810bb5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bb5e:	e841 2300 	strex	r3, r2, [r1]
 810bb62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810bb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb66:	2b00      	cmp	r3, #0
 810bb68:	d1e3      	bne.n	810bb32 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810bb6a:	687b      	ldr	r3, [r7, #4]
 810bb6c:	4a15      	ldr	r2, [pc, #84]	@ (810bbc4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 810bb6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810bb70:	687b      	ldr	r3, [r7, #4]
 810bb72:	681b      	ldr	r3, [r3, #0]
 810bb74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bb76:	693b      	ldr	r3, [r7, #16]
 810bb78:	e853 3f00 	ldrex	r3, [r3]
 810bb7c:	60fb      	str	r3, [r7, #12]
   return(result);
 810bb7e:	68fb      	ldr	r3, [r7, #12]
 810bb80:	f043 0320 	orr.w	r3, r3, #32
 810bb84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810bb88:	687b      	ldr	r3, [r7, #4]
 810bb8a:	681b      	ldr	r3, [r3, #0]
 810bb8c:	461a      	mov	r2, r3
 810bb8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810bb92:	61fb      	str	r3, [r7, #28]
 810bb94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bb96:	69b9      	ldr	r1, [r7, #24]
 810bb98:	69fa      	ldr	r2, [r7, #28]
 810bb9a:	e841 2300 	strex	r3, r2, [r1]
 810bb9e:	617b      	str	r3, [r7, #20]
   return(result);
 810bba0:	697b      	ldr	r3, [r7, #20]
 810bba2:	2b00      	cmp	r3, #0
 810bba4:	d1e4      	bne.n	810bb70 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810bba6:	e007      	b.n	810bbb8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810bba8:	687b      	ldr	r3, [r7, #4]
 810bbaa:	681b      	ldr	r3, [r3, #0]
 810bbac:	699a      	ldr	r2, [r3, #24]
 810bbae:	687b      	ldr	r3, [r7, #4]
 810bbb0:	681b      	ldr	r3, [r3, #0]
 810bbb2:	f042 0208 	orr.w	r2, r2, #8
 810bbb6:	619a      	str	r2, [r3, #24]
}
 810bbb8:	bf00      	nop
 810bbba:	37b8      	adds	r7, #184	@ 0xb8
 810bbbc:	46bd      	mov	sp, r7
 810bbbe:	bd80      	pop	{r7, pc}
 810bbc0:	58000c00 	.word	0x58000c00
 810bbc4:	0810b349 	.word	0x0810b349

0810bbc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810bbc8:	b480      	push	{r7}
 810bbca:	b083      	sub	sp, #12
 810bbcc:	af00      	add	r7, sp, #0
 810bbce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810bbd0:	bf00      	nop
 810bbd2:	370c      	adds	r7, #12
 810bbd4:	46bd      	mov	sp, r7
 810bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbda:	4770      	bx	lr

0810bbdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810bbdc:	b480      	push	{r7}
 810bbde:	b083      	sub	sp, #12
 810bbe0:	af00      	add	r7, sp, #0
 810bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810bbe4:	bf00      	nop
 810bbe6:	370c      	adds	r7, #12
 810bbe8:	46bd      	mov	sp, r7
 810bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbee:	4770      	bx	lr

0810bbf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810bbf0:	b480      	push	{r7}
 810bbf2:	b083      	sub	sp, #12
 810bbf4:	af00      	add	r7, sp, #0
 810bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810bbf8:	bf00      	nop
 810bbfa:	370c      	adds	r7, #12
 810bbfc:	46bd      	mov	sp, r7
 810bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc02:	4770      	bx	lr

0810bc04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810bc04:	b480      	push	{r7}
 810bc06:	b085      	sub	sp, #20
 810bc08:	af00      	add	r7, sp, #0
 810bc0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bc0c:	687b      	ldr	r3, [r7, #4]
 810bc0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bc12:	2b01      	cmp	r3, #1
 810bc14:	d101      	bne.n	810bc1a <HAL_UARTEx_DisableFifoMode+0x16>
 810bc16:	2302      	movs	r3, #2
 810bc18:	e027      	b.n	810bc6a <HAL_UARTEx_DisableFifoMode+0x66>
 810bc1a:	687b      	ldr	r3, [r7, #4]
 810bc1c:	2201      	movs	r2, #1
 810bc1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bc22:	687b      	ldr	r3, [r7, #4]
 810bc24:	2224      	movs	r2, #36	@ 0x24
 810bc26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bc2a:	687b      	ldr	r3, [r7, #4]
 810bc2c:	681b      	ldr	r3, [r3, #0]
 810bc2e:	681b      	ldr	r3, [r3, #0]
 810bc30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	681b      	ldr	r3, [r3, #0]
 810bc36:	681a      	ldr	r2, [r3, #0]
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	681b      	ldr	r3, [r3, #0]
 810bc3c:	f022 0201 	bic.w	r2, r2, #1
 810bc40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810bc42:	68fb      	ldr	r3, [r7, #12]
 810bc44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810bc48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810bc4a:	687b      	ldr	r3, [r7, #4]
 810bc4c:	2200      	movs	r2, #0
 810bc4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bc50:	687b      	ldr	r3, [r7, #4]
 810bc52:	681b      	ldr	r3, [r3, #0]
 810bc54:	68fa      	ldr	r2, [r7, #12]
 810bc56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bc58:	687b      	ldr	r3, [r7, #4]
 810bc5a:	2220      	movs	r2, #32
 810bc5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bc60:	687b      	ldr	r3, [r7, #4]
 810bc62:	2200      	movs	r2, #0
 810bc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bc68:	2300      	movs	r3, #0
}
 810bc6a:	4618      	mov	r0, r3
 810bc6c:	3714      	adds	r7, #20
 810bc6e:	46bd      	mov	sp, r7
 810bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc74:	4770      	bx	lr

0810bc76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810bc76:	b580      	push	{r7, lr}
 810bc78:	b084      	sub	sp, #16
 810bc7a:	af00      	add	r7, sp, #0
 810bc7c:	6078      	str	r0, [r7, #4]
 810bc7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bc86:	2b01      	cmp	r3, #1
 810bc88:	d101      	bne.n	810bc8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810bc8a:	2302      	movs	r3, #2
 810bc8c:	e02d      	b.n	810bcea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810bc8e:	687b      	ldr	r3, [r7, #4]
 810bc90:	2201      	movs	r2, #1
 810bc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bc96:	687b      	ldr	r3, [r7, #4]
 810bc98:	2224      	movs	r2, #36	@ 0x24
 810bc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bc9e:	687b      	ldr	r3, [r7, #4]
 810bca0:	681b      	ldr	r3, [r3, #0]
 810bca2:	681b      	ldr	r3, [r3, #0]
 810bca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bca6:	687b      	ldr	r3, [r7, #4]
 810bca8:	681b      	ldr	r3, [r3, #0]
 810bcaa:	681a      	ldr	r2, [r3, #0]
 810bcac:	687b      	ldr	r3, [r7, #4]
 810bcae:	681b      	ldr	r3, [r3, #0]
 810bcb0:	f022 0201 	bic.w	r2, r2, #1
 810bcb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810bcb6:	687b      	ldr	r3, [r7, #4]
 810bcb8:	681b      	ldr	r3, [r3, #0]
 810bcba:	689b      	ldr	r3, [r3, #8]
 810bcbc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810bcc0:	687b      	ldr	r3, [r7, #4]
 810bcc2:	681b      	ldr	r3, [r3, #0]
 810bcc4:	683a      	ldr	r2, [r7, #0]
 810bcc6:	430a      	orrs	r2, r1
 810bcc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810bcca:	6878      	ldr	r0, [r7, #4]
 810bccc:	f000 f8a0 	bl	810be10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	681b      	ldr	r3, [r3, #0]
 810bcd4:	68fa      	ldr	r2, [r7, #12]
 810bcd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bcd8:	687b      	ldr	r3, [r7, #4]
 810bcda:	2220      	movs	r2, #32
 810bcdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bce0:	687b      	ldr	r3, [r7, #4]
 810bce2:	2200      	movs	r2, #0
 810bce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bce8:	2300      	movs	r3, #0
}
 810bcea:	4618      	mov	r0, r3
 810bcec:	3710      	adds	r7, #16
 810bcee:	46bd      	mov	sp, r7
 810bcf0:	bd80      	pop	{r7, pc}

0810bcf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810bcf2:	b580      	push	{r7, lr}
 810bcf4:	b084      	sub	sp, #16
 810bcf6:	af00      	add	r7, sp, #0
 810bcf8:	6078      	str	r0, [r7, #4]
 810bcfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bcfc:	687b      	ldr	r3, [r7, #4]
 810bcfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bd02:	2b01      	cmp	r3, #1
 810bd04:	d101      	bne.n	810bd0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810bd06:	2302      	movs	r3, #2
 810bd08:	e02d      	b.n	810bd66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	2201      	movs	r2, #1
 810bd0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bd12:	687b      	ldr	r3, [r7, #4]
 810bd14:	2224      	movs	r2, #36	@ 0x24
 810bd16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bd1a:	687b      	ldr	r3, [r7, #4]
 810bd1c:	681b      	ldr	r3, [r3, #0]
 810bd1e:	681b      	ldr	r3, [r3, #0]
 810bd20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	681b      	ldr	r3, [r3, #0]
 810bd26:	681a      	ldr	r2, [r3, #0]
 810bd28:	687b      	ldr	r3, [r7, #4]
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	f022 0201 	bic.w	r2, r2, #1
 810bd30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810bd32:	687b      	ldr	r3, [r7, #4]
 810bd34:	681b      	ldr	r3, [r3, #0]
 810bd36:	689b      	ldr	r3, [r3, #8]
 810bd38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810bd3c:	687b      	ldr	r3, [r7, #4]
 810bd3e:	681b      	ldr	r3, [r3, #0]
 810bd40:	683a      	ldr	r2, [r7, #0]
 810bd42:	430a      	orrs	r2, r1
 810bd44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810bd46:	6878      	ldr	r0, [r7, #4]
 810bd48:	f000 f862 	bl	810be10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bd4c:	687b      	ldr	r3, [r7, #4]
 810bd4e:	681b      	ldr	r3, [r3, #0]
 810bd50:	68fa      	ldr	r2, [r7, #12]
 810bd52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bd54:	687b      	ldr	r3, [r7, #4]
 810bd56:	2220      	movs	r2, #32
 810bd58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bd5c:	687b      	ldr	r3, [r7, #4]
 810bd5e:	2200      	movs	r2, #0
 810bd60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bd64:	2300      	movs	r3, #0
}
 810bd66:	4618      	mov	r0, r3
 810bd68:	3710      	adds	r7, #16
 810bd6a:	46bd      	mov	sp, r7
 810bd6c:	bd80      	pop	{r7, pc}

0810bd6e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bd6e:	b580      	push	{r7, lr}
 810bd70:	b08c      	sub	sp, #48	@ 0x30
 810bd72:	af00      	add	r7, sp, #0
 810bd74:	60f8      	str	r0, [r7, #12]
 810bd76:	60b9      	str	r1, [r7, #8]
 810bd78:	4613      	mov	r3, r2
 810bd7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 810bd7c:	2300      	movs	r3, #0
 810bd7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810bd82:	68fb      	ldr	r3, [r7, #12]
 810bd84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810bd88:	2b20      	cmp	r3, #32
 810bd8a:	d13b      	bne.n	810be04 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 810bd8c:	68bb      	ldr	r3, [r7, #8]
 810bd8e:	2b00      	cmp	r3, #0
 810bd90:	d002      	beq.n	810bd98 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 810bd92:	88fb      	ldrh	r3, [r7, #6]
 810bd94:	2b00      	cmp	r3, #0
 810bd96:	d101      	bne.n	810bd9c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 810bd98:	2301      	movs	r3, #1
 810bd9a:	e034      	b.n	810be06 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 810bd9c:	68fb      	ldr	r3, [r7, #12]
 810bd9e:	2201      	movs	r2, #1
 810bda0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 810bda2:	68fb      	ldr	r3, [r7, #12]
 810bda4:	2200      	movs	r2, #0
 810bda6:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 810bda8:	88fb      	ldrh	r3, [r7, #6]
 810bdaa:	461a      	mov	r2, r3
 810bdac:	68b9      	ldr	r1, [r7, #8]
 810bdae:	68f8      	ldr	r0, [r7, #12]
 810bdb0:	f7ff f824 	bl	810adfc <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810bdb4:	68fb      	ldr	r3, [r7, #12]
 810bdb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810bdb8:	2b01      	cmp	r3, #1
 810bdba:	d11d      	bne.n	810bdf8 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810bdbc:	68fb      	ldr	r3, [r7, #12]
 810bdbe:	681b      	ldr	r3, [r3, #0]
 810bdc0:	2210      	movs	r2, #16
 810bdc2:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bdc4:	68fb      	ldr	r3, [r7, #12]
 810bdc6:	681b      	ldr	r3, [r3, #0]
 810bdc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bdca:	69bb      	ldr	r3, [r7, #24]
 810bdcc:	e853 3f00 	ldrex	r3, [r3]
 810bdd0:	617b      	str	r3, [r7, #20]
   return(result);
 810bdd2:	697b      	ldr	r3, [r7, #20]
 810bdd4:	f043 0310 	orr.w	r3, r3, #16
 810bdd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 810bdda:	68fb      	ldr	r3, [r7, #12]
 810bddc:	681b      	ldr	r3, [r3, #0]
 810bdde:	461a      	mov	r2, r3
 810bde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bde2:	627b      	str	r3, [r7, #36]	@ 0x24
 810bde4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bde6:	6a39      	ldr	r1, [r7, #32]
 810bde8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bdea:	e841 2300 	strex	r3, r2, [r1]
 810bdee:	61fb      	str	r3, [r7, #28]
   return(result);
 810bdf0:	69fb      	ldr	r3, [r7, #28]
 810bdf2:	2b00      	cmp	r3, #0
 810bdf4:	d1e6      	bne.n	810bdc4 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 810bdf6:	e002      	b.n	810bdfe <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 810bdf8:	2301      	movs	r3, #1
 810bdfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 810bdfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 810be02:	e000      	b.n	810be06 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 810be04:	2302      	movs	r3, #2
  }
}
 810be06:	4618      	mov	r0, r3
 810be08:	3730      	adds	r7, #48	@ 0x30
 810be0a:	46bd      	mov	sp, r7
 810be0c:	bd80      	pop	{r7, pc}
	...

0810be10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810be10:	b480      	push	{r7}
 810be12:	b085      	sub	sp, #20
 810be14:	af00      	add	r7, sp, #0
 810be16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810be18:	687b      	ldr	r3, [r7, #4]
 810be1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810be1c:	2b00      	cmp	r3, #0
 810be1e:	d108      	bne.n	810be32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810be20:	687b      	ldr	r3, [r7, #4]
 810be22:	2201      	movs	r2, #1
 810be24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810be28:	687b      	ldr	r3, [r7, #4]
 810be2a:	2201      	movs	r2, #1
 810be2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810be30:	e031      	b.n	810be96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810be32:	2310      	movs	r3, #16
 810be34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810be36:	2310      	movs	r3, #16
 810be38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	681b      	ldr	r3, [r3, #0]
 810be3e:	689b      	ldr	r3, [r3, #8]
 810be40:	0e5b      	lsrs	r3, r3, #25
 810be42:	b2db      	uxtb	r3, r3
 810be44:	f003 0307 	and.w	r3, r3, #7
 810be48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	681b      	ldr	r3, [r3, #0]
 810be4e:	689b      	ldr	r3, [r3, #8]
 810be50:	0f5b      	lsrs	r3, r3, #29
 810be52:	b2db      	uxtb	r3, r3
 810be54:	f003 0307 	and.w	r3, r3, #7
 810be58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810be5a:	7bbb      	ldrb	r3, [r7, #14]
 810be5c:	7b3a      	ldrb	r2, [r7, #12]
 810be5e:	4911      	ldr	r1, [pc, #68]	@ (810bea4 <UARTEx_SetNbDataToProcess+0x94>)
 810be60:	5c8a      	ldrb	r2, [r1, r2]
 810be62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810be66:	7b3a      	ldrb	r2, [r7, #12]
 810be68:	490f      	ldr	r1, [pc, #60]	@ (810bea8 <UARTEx_SetNbDataToProcess+0x98>)
 810be6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810be6c:	fb93 f3f2 	sdiv	r3, r3, r2
 810be70:	b29a      	uxth	r2, r3
 810be72:	687b      	ldr	r3, [r7, #4]
 810be74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810be78:	7bfb      	ldrb	r3, [r7, #15]
 810be7a:	7b7a      	ldrb	r2, [r7, #13]
 810be7c:	4909      	ldr	r1, [pc, #36]	@ (810bea4 <UARTEx_SetNbDataToProcess+0x94>)
 810be7e:	5c8a      	ldrb	r2, [r1, r2]
 810be80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810be84:	7b7a      	ldrb	r2, [r7, #13]
 810be86:	4908      	ldr	r1, [pc, #32]	@ (810bea8 <UARTEx_SetNbDataToProcess+0x98>)
 810be88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810be8a:	fb93 f3f2 	sdiv	r3, r3, r2
 810be8e:	b29a      	uxth	r2, r3
 810be90:	687b      	ldr	r3, [r7, #4]
 810be92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810be96:	bf00      	nop
 810be98:	3714      	adds	r7, #20
 810be9a:	46bd      	mov	sp, r7
 810be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bea0:	4770      	bx	lr
 810bea2:	bf00      	nop
 810bea4:	081177e8 	.word	0x081177e8
 810bea8:	081177f0 	.word	0x081177f0

0810beac <__NVIC_SetPriority>:
{
 810beac:	b480      	push	{r7}
 810beae:	b083      	sub	sp, #12
 810beb0:	af00      	add	r7, sp, #0
 810beb2:	4603      	mov	r3, r0
 810beb4:	6039      	str	r1, [r7, #0]
 810beb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810beb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810bebc:	2b00      	cmp	r3, #0
 810bebe:	db0a      	blt.n	810bed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810bec0:	683b      	ldr	r3, [r7, #0]
 810bec2:	b2da      	uxtb	r2, r3
 810bec4:	490c      	ldr	r1, [pc, #48]	@ (810bef8 <__NVIC_SetPriority+0x4c>)
 810bec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810beca:	0112      	lsls	r2, r2, #4
 810becc:	b2d2      	uxtb	r2, r2
 810bece:	440b      	add	r3, r1
 810bed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810bed4:	e00a      	b.n	810beec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810bed6:	683b      	ldr	r3, [r7, #0]
 810bed8:	b2da      	uxtb	r2, r3
 810beda:	4908      	ldr	r1, [pc, #32]	@ (810befc <__NVIC_SetPriority+0x50>)
 810bedc:	88fb      	ldrh	r3, [r7, #6]
 810bede:	f003 030f 	and.w	r3, r3, #15
 810bee2:	3b04      	subs	r3, #4
 810bee4:	0112      	lsls	r2, r2, #4
 810bee6:	b2d2      	uxtb	r2, r2
 810bee8:	440b      	add	r3, r1
 810beea:	761a      	strb	r2, [r3, #24]
}
 810beec:	bf00      	nop
 810beee:	370c      	adds	r7, #12
 810bef0:	46bd      	mov	sp, r7
 810bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bef6:	4770      	bx	lr
 810bef8:	e000e100 	.word	0xe000e100
 810befc:	e000ed00 	.word	0xe000ed00

0810bf00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810bf00:	b580      	push	{r7, lr}
 810bf02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810bf04:	4b05      	ldr	r3, [pc, #20]	@ (810bf1c <SysTick_Handler+0x1c>)
 810bf06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810bf08:	f002 fda6 	bl	810ea58 <xTaskGetSchedulerState>
 810bf0c:	4603      	mov	r3, r0
 810bf0e:	2b01      	cmp	r3, #1
 810bf10:	d001      	beq.n	810bf16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810bf12:	f000 feb9 	bl	810cc88 <xPortSysTickHandler>
  }
}
 810bf16:	bf00      	nop
 810bf18:	bd80      	pop	{r7, pc}
 810bf1a:	bf00      	nop
 810bf1c:	e000e010 	.word	0xe000e010

0810bf20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810bf20:	b580      	push	{r7, lr}
 810bf22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810bf24:	2100      	movs	r1, #0
 810bf26:	f06f 0004 	mvn.w	r0, #4
 810bf2a:	f7ff ffbf 	bl	810beac <__NVIC_SetPriority>
#endif
}
 810bf2e:	bf00      	nop
 810bf30:	bd80      	pop	{r7, pc}
	...

0810bf34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810bf34:	b480      	push	{r7}
 810bf36:	b083      	sub	sp, #12
 810bf38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bf3a:	f3ef 8305 	mrs	r3, IPSR
 810bf3e:	603b      	str	r3, [r7, #0]
  return(result);
 810bf40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bf42:	2b00      	cmp	r3, #0
 810bf44:	d003      	beq.n	810bf4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810bf46:	f06f 0305 	mvn.w	r3, #5
 810bf4a:	607b      	str	r3, [r7, #4]
 810bf4c:	e00c      	b.n	810bf68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810bf4e:	4b0a      	ldr	r3, [pc, #40]	@ (810bf78 <osKernelInitialize+0x44>)
 810bf50:	681b      	ldr	r3, [r3, #0]
 810bf52:	2b00      	cmp	r3, #0
 810bf54:	d105      	bne.n	810bf62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810bf56:	4b08      	ldr	r3, [pc, #32]	@ (810bf78 <osKernelInitialize+0x44>)
 810bf58:	2201      	movs	r2, #1
 810bf5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810bf5c:	2300      	movs	r3, #0
 810bf5e:	607b      	str	r3, [r7, #4]
 810bf60:	e002      	b.n	810bf68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810bf62:	f04f 33ff 	mov.w	r3, #4294967295
 810bf66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810bf68:	687b      	ldr	r3, [r7, #4]
}
 810bf6a:	4618      	mov	r0, r3
 810bf6c:	370c      	adds	r7, #12
 810bf6e:	46bd      	mov	sp, r7
 810bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf74:	4770      	bx	lr
 810bf76:	bf00      	nop
 810bf78:	10000630 	.word	0x10000630

0810bf7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810bf7c:	b580      	push	{r7, lr}
 810bf7e:	b082      	sub	sp, #8
 810bf80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bf82:	f3ef 8305 	mrs	r3, IPSR
 810bf86:	603b      	str	r3, [r7, #0]
  return(result);
 810bf88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bf8a:	2b00      	cmp	r3, #0
 810bf8c:	d003      	beq.n	810bf96 <osKernelStart+0x1a>
    stat = osErrorISR;
 810bf8e:	f06f 0305 	mvn.w	r3, #5
 810bf92:	607b      	str	r3, [r7, #4]
 810bf94:	e010      	b.n	810bfb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810bf96:	4b0b      	ldr	r3, [pc, #44]	@ (810bfc4 <osKernelStart+0x48>)
 810bf98:	681b      	ldr	r3, [r3, #0]
 810bf9a:	2b01      	cmp	r3, #1
 810bf9c:	d109      	bne.n	810bfb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810bf9e:	f7ff ffbf 	bl	810bf20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810bfa2:	4b08      	ldr	r3, [pc, #32]	@ (810bfc4 <osKernelStart+0x48>)
 810bfa4:	2202      	movs	r2, #2
 810bfa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810bfa8:	f002 f908 	bl	810e1bc <vTaskStartScheduler>
      stat = osOK;
 810bfac:	2300      	movs	r3, #0
 810bfae:	607b      	str	r3, [r7, #4]
 810bfb0:	e002      	b.n	810bfb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810bfb2:	f04f 33ff 	mov.w	r3, #4294967295
 810bfb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810bfb8:	687b      	ldr	r3, [r7, #4]
}
 810bfba:	4618      	mov	r0, r3
 810bfbc:	3708      	adds	r7, #8
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	bd80      	pop	{r7, pc}
 810bfc2:	bf00      	nop
 810bfc4:	10000630 	.word	0x10000630

0810bfc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810bfc8:	b580      	push	{r7, lr}
 810bfca:	b08e      	sub	sp, #56	@ 0x38
 810bfcc:	af04      	add	r7, sp, #16
 810bfce:	60f8      	str	r0, [r7, #12]
 810bfd0:	60b9      	str	r1, [r7, #8]
 810bfd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810bfd4:	2300      	movs	r3, #0
 810bfd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bfd8:	f3ef 8305 	mrs	r3, IPSR
 810bfdc:	617b      	str	r3, [r7, #20]
  return(result);
 810bfde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810bfe0:	2b00      	cmp	r3, #0
 810bfe2:	d17e      	bne.n	810c0e2 <osThreadNew+0x11a>
 810bfe4:	68fb      	ldr	r3, [r7, #12]
 810bfe6:	2b00      	cmp	r3, #0
 810bfe8:	d07b      	beq.n	810c0e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810bfea:	2380      	movs	r3, #128	@ 0x80
 810bfec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810bfee:	2318      	movs	r3, #24
 810bff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810bff2:	2300      	movs	r3, #0
 810bff4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810bff6:	f04f 33ff 	mov.w	r3, #4294967295
 810bffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	2b00      	cmp	r3, #0
 810c000:	d045      	beq.n	810c08e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810c002:	687b      	ldr	r3, [r7, #4]
 810c004:	681b      	ldr	r3, [r3, #0]
 810c006:	2b00      	cmp	r3, #0
 810c008:	d002      	beq.n	810c010 <osThreadNew+0x48>
        name = attr->name;
 810c00a:	687b      	ldr	r3, [r7, #4]
 810c00c:	681b      	ldr	r3, [r3, #0]
 810c00e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810c010:	687b      	ldr	r3, [r7, #4]
 810c012:	699b      	ldr	r3, [r3, #24]
 810c014:	2b00      	cmp	r3, #0
 810c016:	d002      	beq.n	810c01e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810c018:	687b      	ldr	r3, [r7, #4]
 810c01a:	699b      	ldr	r3, [r3, #24]
 810c01c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810c01e:	69fb      	ldr	r3, [r7, #28]
 810c020:	2b00      	cmp	r3, #0
 810c022:	d008      	beq.n	810c036 <osThreadNew+0x6e>
 810c024:	69fb      	ldr	r3, [r7, #28]
 810c026:	2b38      	cmp	r3, #56	@ 0x38
 810c028:	d805      	bhi.n	810c036 <osThreadNew+0x6e>
 810c02a:	687b      	ldr	r3, [r7, #4]
 810c02c:	685b      	ldr	r3, [r3, #4]
 810c02e:	f003 0301 	and.w	r3, r3, #1
 810c032:	2b00      	cmp	r3, #0
 810c034:	d001      	beq.n	810c03a <osThreadNew+0x72>
        return (NULL);
 810c036:	2300      	movs	r3, #0
 810c038:	e054      	b.n	810c0e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810c03a:	687b      	ldr	r3, [r7, #4]
 810c03c:	695b      	ldr	r3, [r3, #20]
 810c03e:	2b00      	cmp	r3, #0
 810c040:	d003      	beq.n	810c04a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810c042:	687b      	ldr	r3, [r7, #4]
 810c044:	695b      	ldr	r3, [r3, #20]
 810c046:	089b      	lsrs	r3, r3, #2
 810c048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c04a:	687b      	ldr	r3, [r7, #4]
 810c04c:	689b      	ldr	r3, [r3, #8]
 810c04e:	2b00      	cmp	r3, #0
 810c050:	d00e      	beq.n	810c070 <osThreadNew+0xa8>
 810c052:	687b      	ldr	r3, [r7, #4]
 810c054:	68db      	ldr	r3, [r3, #12]
 810c056:	2b5b      	cmp	r3, #91	@ 0x5b
 810c058:	d90a      	bls.n	810c070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c05a:	687b      	ldr	r3, [r7, #4]
 810c05c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c05e:	2b00      	cmp	r3, #0
 810c060:	d006      	beq.n	810c070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c062:	687b      	ldr	r3, [r7, #4]
 810c064:	695b      	ldr	r3, [r3, #20]
 810c066:	2b00      	cmp	r3, #0
 810c068:	d002      	beq.n	810c070 <osThreadNew+0xa8>
        mem = 1;
 810c06a:	2301      	movs	r3, #1
 810c06c:	61bb      	str	r3, [r7, #24]
 810c06e:	e010      	b.n	810c092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810c070:	687b      	ldr	r3, [r7, #4]
 810c072:	689b      	ldr	r3, [r3, #8]
 810c074:	2b00      	cmp	r3, #0
 810c076:	d10c      	bne.n	810c092 <osThreadNew+0xca>
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	68db      	ldr	r3, [r3, #12]
 810c07c:	2b00      	cmp	r3, #0
 810c07e:	d108      	bne.n	810c092 <osThreadNew+0xca>
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	691b      	ldr	r3, [r3, #16]
 810c084:	2b00      	cmp	r3, #0
 810c086:	d104      	bne.n	810c092 <osThreadNew+0xca>
          mem = 0;
 810c088:	2300      	movs	r3, #0
 810c08a:	61bb      	str	r3, [r7, #24]
 810c08c:	e001      	b.n	810c092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810c08e:	2300      	movs	r3, #0
 810c090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810c092:	69bb      	ldr	r3, [r7, #24]
 810c094:	2b01      	cmp	r3, #1
 810c096:	d110      	bne.n	810c0ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810c09c:	687a      	ldr	r2, [r7, #4]
 810c09e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c0a0:	9202      	str	r2, [sp, #8]
 810c0a2:	9301      	str	r3, [sp, #4]
 810c0a4:	69fb      	ldr	r3, [r7, #28]
 810c0a6:	9300      	str	r3, [sp, #0]
 810c0a8:	68bb      	ldr	r3, [r7, #8]
 810c0aa:	6a3a      	ldr	r2, [r7, #32]
 810c0ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c0ae:	68f8      	ldr	r0, [r7, #12]
 810c0b0:	f001 fea8 	bl	810de04 <xTaskCreateStatic>
 810c0b4:	4603      	mov	r3, r0
 810c0b6:	613b      	str	r3, [r7, #16]
 810c0b8:	e013      	b.n	810c0e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810c0ba:	69bb      	ldr	r3, [r7, #24]
 810c0bc:	2b00      	cmp	r3, #0
 810c0be:	d110      	bne.n	810c0e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810c0c0:	6a3b      	ldr	r3, [r7, #32]
 810c0c2:	b29a      	uxth	r2, r3
 810c0c4:	f107 0310 	add.w	r3, r7, #16
 810c0c8:	9301      	str	r3, [sp, #4]
 810c0ca:	69fb      	ldr	r3, [r7, #28]
 810c0cc:	9300      	str	r3, [sp, #0]
 810c0ce:	68bb      	ldr	r3, [r7, #8]
 810c0d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c0d2:	68f8      	ldr	r0, [r7, #12]
 810c0d4:	f001 fef6 	bl	810dec4 <xTaskCreate>
 810c0d8:	4603      	mov	r3, r0
 810c0da:	2b01      	cmp	r3, #1
 810c0dc:	d001      	beq.n	810c0e2 <osThreadNew+0x11a>
            hTask = NULL;
 810c0de:	2300      	movs	r3, #0
 810c0e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810c0e2:	693b      	ldr	r3, [r7, #16]
}
 810c0e4:	4618      	mov	r0, r3
 810c0e6:	3728      	adds	r7, #40	@ 0x28
 810c0e8:	46bd      	mov	sp, r7
 810c0ea:	bd80      	pop	{r7, pc}

0810c0ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810c0ec:	b580      	push	{r7, lr}
 810c0ee:	b084      	sub	sp, #16
 810c0f0:	af00      	add	r7, sp, #0
 810c0f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c0f4:	f3ef 8305 	mrs	r3, IPSR
 810c0f8:	60bb      	str	r3, [r7, #8]
  return(result);
 810c0fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c0fc:	2b00      	cmp	r3, #0
 810c0fe:	d003      	beq.n	810c108 <osDelay+0x1c>
    stat = osErrorISR;
 810c100:	f06f 0305 	mvn.w	r3, #5
 810c104:	60fb      	str	r3, [r7, #12]
 810c106:	e007      	b.n	810c118 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810c108:	2300      	movs	r3, #0
 810c10a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810c10c:	687b      	ldr	r3, [r7, #4]
 810c10e:	2b00      	cmp	r3, #0
 810c110:	d002      	beq.n	810c118 <osDelay+0x2c>
      vTaskDelay(ticks);
 810c112:	6878      	ldr	r0, [r7, #4]
 810c114:	f002 f81c 	bl	810e150 <vTaskDelay>
    }
  }

  return (stat);
 810c118:	68fb      	ldr	r3, [r7, #12]
}
 810c11a:	4618      	mov	r0, r3
 810c11c:	3710      	adds	r7, #16
 810c11e:	46bd      	mov	sp, r7
 810c120:	bd80      	pop	{r7, pc}

0810c122 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810c122:	b580      	push	{r7, lr}
 810c124:	b08a      	sub	sp, #40	@ 0x28
 810c126:	af02      	add	r7, sp, #8
 810c128:	60f8      	str	r0, [r7, #12]
 810c12a:	60b9      	str	r1, [r7, #8]
 810c12c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810c12e:	2300      	movs	r3, #0
 810c130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c132:	f3ef 8305 	mrs	r3, IPSR
 810c136:	613b      	str	r3, [r7, #16]
  return(result);
 810c138:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810c13a:	2b00      	cmp	r3, #0
 810c13c:	d175      	bne.n	810c22a <osSemaphoreNew+0x108>
 810c13e:	68fb      	ldr	r3, [r7, #12]
 810c140:	2b00      	cmp	r3, #0
 810c142:	d072      	beq.n	810c22a <osSemaphoreNew+0x108>
 810c144:	68ba      	ldr	r2, [r7, #8]
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	429a      	cmp	r2, r3
 810c14a:	d86e      	bhi.n	810c22a <osSemaphoreNew+0x108>
    mem = -1;
 810c14c:	f04f 33ff 	mov.w	r3, #4294967295
 810c150:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c152:	687b      	ldr	r3, [r7, #4]
 810c154:	2b00      	cmp	r3, #0
 810c156:	d015      	beq.n	810c184 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810c158:	687b      	ldr	r3, [r7, #4]
 810c15a:	689b      	ldr	r3, [r3, #8]
 810c15c:	2b00      	cmp	r3, #0
 810c15e:	d006      	beq.n	810c16e <osSemaphoreNew+0x4c>
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	68db      	ldr	r3, [r3, #12]
 810c164:	2b4f      	cmp	r3, #79	@ 0x4f
 810c166:	d902      	bls.n	810c16e <osSemaphoreNew+0x4c>
        mem = 1;
 810c168:	2301      	movs	r3, #1
 810c16a:	61bb      	str	r3, [r7, #24]
 810c16c:	e00c      	b.n	810c188 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810c16e:	687b      	ldr	r3, [r7, #4]
 810c170:	689b      	ldr	r3, [r3, #8]
 810c172:	2b00      	cmp	r3, #0
 810c174:	d108      	bne.n	810c188 <osSemaphoreNew+0x66>
 810c176:	687b      	ldr	r3, [r7, #4]
 810c178:	68db      	ldr	r3, [r3, #12]
 810c17a:	2b00      	cmp	r3, #0
 810c17c:	d104      	bne.n	810c188 <osSemaphoreNew+0x66>
          mem = 0;
 810c17e:	2300      	movs	r3, #0
 810c180:	61bb      	str	r3, [r7, #24]
 810c182:	e001      	b.n	810c188 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810c184:	2300      	movs	r3, #0
 810c186:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810c188:	69bb      	ldr	r3, [r7, #24]
 810c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c18e:	d04c      	beq.n	810c22a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810c190:	68fb      	ldr	r3, [r7, #12]
 810c192:	2b01      	cmp	r3, #1
 810c194:	d128      	bne.n	810c1e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810c196:	69bb      	ldr	r3, [r7, #24]
 810c198:	2b01      	cmp	r3, #1
 810c19a:	d10a      	bne.n	810c1b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810c19c:	687b      	ldr	r3, [r7, #4]
 810c19e:	689b      	ldr	r3, [r3, #8]
 810c1a0:	2203      	movs	r2, #3
 810c1a2:	9200      	str	r2, [sp, #0]
 810c1a4:	2200      	movs	r2, #0
 810c1a6:	2100      	movs	r1, #0
 810c1a8:	2001      	movs	r0, #1
 810c1aa:	f000 fe69 	bl	810ce80 <xQueueGenericCreateStatic>
 810c1ae:	61f8      	str	r0, [r7, #28]
 810c1b0:	e005      	b.n	810c1be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810c1b2:	2203      	movs	r2, #3
 810c1b4:	2100      	movs	r1, #0
 810c1b6:	2001      	movs	r0, #1
 810c1b8:	f000 fedf 	bl	810cf7a <xQueueGenericCreate>
 810c1bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810c1be:	69fb      	ldr	r3, [r7, #28]
 810c1c0:	2b00      	cmp	r3, #0
 810c1c2:	d022      	beq.n	810c20a <osSemaphoreNew+0xe8>
 810c1c4:	68bb      	ldr	r3, [r7, #8]
 810c1c6:	2b00      	cmp	r3, #0
 810c1c8:	d01f      	beq.n	810c20a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c1ca:	2300      	movs	r3, #0
 810c1cc:	2200      	movs	r2, #0
 810c1ce:	2100      	movs	r1, #0
 810c1d0:	69f8      	ldr	r0, [r7, #28]
 810c1d2:	f000 ff9f 	bl	810d114 <xQueueGenericSend>
 810c1d6:	4603      	mov	r3, r0
 810c1d8:	2b01      	cmp	r3, #1
 810c1da:	d016      	beq.n	810c20a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810c1dc:	69f8      	ldr	r0, [r7, #28]
 810c1de:	f001 fc3d 	bl	810da5c <vQueueDelete>
            hSemaphore = NULL;
 810c1e2:	2300      	movs	r3, #0
 810c1e4:	61fb      	str	r3, [r7, #28]
 810c1e6:	e010      	b.n	810c20a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810c1e8:	69bb      	ldr	r3, [r7, #24]
 810c1ea:	2b01      	cmp	r3, #1
 810c1ec:	d108      	bne.n	810c200 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810c1ee:	687b      	ldr	r3, [r7, #4]
 810c1f0:	689b      	ldr	r3, [r3, #8]
 810c1f2:	461a      	mov	r2, r3
 810c1f4:	68b9      	ldr	r1, [r7, #8]
 810c1f6:	68f8      	ldr	r0, [r7, #12]
 810c1f8:	f000 ff1d 	bl	810d036 <xQueueCreateCountingSemaphoreStatic>
 810c1fc:	61f8      	str	r0, [r7, #28]
 810c1fe:	e004      	b.n	810c20a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810c200:	68b9      	ldr	r1, [r7, #8]
 810c202:	68f8      	ldr	r0, [r7, #12]
 810c204:	f000 ff50 	bl	810d0a8 <xQueueCreateCountingSemaphore>
 810c208:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810c20a:	69fb      	ldr	r3, [r7, #28]
 810c20c:	2b00      	cmp	r3, #0
 810c20e:	d00c      	beq.n	810c22a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810c210:	687b      	ldr	r3, [r7, #4]
 810c212:	2b00      	cmp	r3, #0
 810c214:	d003      	beq.n	810c21e <osSemaphoreNew+0xfc>
          name = attr->name;
 810c216:	687b      	ldr	r3, [r7, #4]
 810c218:	681b      	ldr	r3, [r3, #0]
 810c21a:	617b      	str	r3, [r7, #20]
 810c21c:	e001      	b.n	810c222 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810c21e:	2300      	movs	r3, #0
 810c220:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810c222:	6979      	ldr	r1, [r7, #20]
 810c224:	69f8      	ldr	r0, [r7, #28]
 810c226:	f001 fd65 	bl	810dcf4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810c22a:	69fb      	ldr	r3, [r7, #28]
}
 810c22c:	4618      	mov	r0, r3
 810c22e:	3720      	adds	r7, #32
 810c230:	46bd      	mov	sp, r7
 810c232:	bd80      	pop	{r7, pc}

0810c234 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810c234:	b580      	push	{r7, lr}
 810c236:	b086      	sub	sp, #24
 810c238:	af00      	add	r7, sp, #0
 810c23a:	6078      	str	r0, [r7, #4]
 810c23c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c23e:	687b      	ldr	r3, [r7, #4]
 810c240:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c242:	2300      	movs	r3, #0
 810c244:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c246:	693b      	ldr	r3, [r7, #16]
 810c248:	2b00      	cmp	r3, #0
 810c24a:	d103      	bne.n	810c254 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810c24c:	f06f 0303 	mvn.w	r3, #3
 810c250:	617b      	str	r3, [r7, #20]
 810c252:	e039      	b.n	810c2c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c254:	f3ef 8305 	mrs	r3, IPSR
 810c258:	60fb      	str	r3, [r7, #12]
  return(result);
 810c25a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c25c:	2b00      	cmp	r3, #0
 810c25e:	d022      	beq.n	810c2a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810c260:	683b      	ldr	r3, [r7, #0]
 810c262:	2b00      	cmp	r3, #0
 810c264:	d003      	beq.n	810c26e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810c266:	f06f 0303 	mvn.w	r3, #3
 810c26a:	617b      	str	r3, [r7, #20]
 810c26c:	e02c      	b.n	810c2c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810c26e:	2300      	movs	r3, #0
 810c270:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810c272:	f107 0308 	add.w	r3, r7, #8
 810c276:	461a      	mov	r2, r3
 810c278:	2100      	movs	r1, #0
 810c27a:	6938      	ldr	r0, [r7, #16]
 810c27c:	f001 fb6c 	bl	810d958 <xQueueReceiveFromISR>
 810c280:	4603      	mov	r3, r0
 810c282:	2b01      	cmp	r3, #1
 810c284:	d003      	beq.n	810c28e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810c286:	f06f 0302 	mvn.w	r3, #2
 810c28a:	617b      	str	r3, [r7, #20]
 810c28c:	e01c      	b.n	810c2c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810c28e:	68bb      	ldr	r3, [r7, #8]
 810c290:	2b00      	cmp	r3, #0
 810c292:	d019      	beq.n	810c2c8 <osSemaphoreAcquire+0x94>
 810c294:	4b0f      	ldr	r3, [pc, #60]	@ (810c2d4 <osSemaphoreAcquire+0xa0>)
 810c296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c29a:	601a      	str	r2, [r3, #0]
 810c29c:	f3bf 8f4f 	dsb	sy
 810c2a0:	f3bf 8f6f 	isb	sy
 810c2a4:	e010      	b.n	810c2c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810c2a6:	6839      	ldr	r1, [r7, #0]
 810c2a8:	6938      	ldr	r0, [r7, #16]
 810c2aa:	f001 fa45 	bl	810d738 <xQueueSemaphoreTake>
 810c2ae:	4603      	mov	r3, r0
 810c2b0:	2b01      	cmp	r3, #1
 810c2b2:	d009      	beq.n	810c2c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810c2b4:	683b      	ldr	r3, [r7, #0]
 810c2b6:	2b00      	cmp	r3, #0
 810c2b8:	d003      	beq.n	810c2c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810c2ba:	f06f 0301 	mvn.w	r3, #1
 810c2be:	617b      	str	r3, [r7, #20]
 810c2c0:	e002      	b.n	810c2c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810c2c2:	f06f 0302 	mvn.w	r3, #2
 810c2c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810c2c8:	697b      	ldr	r3, [r7, #20]
}
 810c2ca:	4618      	mov	r0, r3
 810c2cc:	3718      	adds	r7, #24
 810c2ce:	46bd      	mov	sp, r7
 810c2d0:	bd80      	pop	{r7, pc}
 810c2d2:	bf00      	nop
 810c2d4:	e000ed04 	.word	0xe000ed04

0810c2d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810c2d8:	b580      	push	{r7, lr}
 810c2da:	b086      	sub	sp, #24
 810c2dc:	af00      	add	r7, sp, #0
 810c2de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c2e0:	687b      	ldr	r3, [r7, #4]
 810c2e2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c2e4:	2300      	movs	r3, #0
 810c2e6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c2e8:	693b      	ldr	r3, [r7, #16]
 810c2ea:	2b00      	cmp	r3, #0
 810c2ec:	d103      	bne.n	810c2f6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 810c2ee:	f06f 0303 	mvn.w	r3, #3
 810c2f2:	617b      	str	r3, [r7, #20]
 810c2f4:	e02c      	b.n	810c350 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c2f6:	f3ef 8305 	mrs	r3, IPSR
 810c2fa:	60fb      	str	r3, [r7, #12]
  return(result);
 810c2fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c2fe:	2b00      	cmp	r3, #0
 810c300:	d01a      	beq.n	810c338 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810c302:	2300      	movs	r3, #0
 810c304:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810c306:	f107 0308 	add.w	r3, r7, #8
 810c30a:	4619      	mov	r1, r3
 810c30c:	6938      	ldr	r0, [r7, #16]
 810c30e:	f001 f8a1 	bl	810d454 <xQueueGiveFromISR>
 810c312:	4603      	mov	r3, r0
 810c314:	2b01      	cmp	r3, #1
 810c316:	d003      	beq.n	810c320 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810c318:	f06f 0302 	mvn.w	r3, #2
 810c31c:	617b      	str	r3, [r7, #20]
 810c31e:	e017      	b.n	810c350 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 810c320:	68bb      	ldr	r3, [r7, #8]
 810c322:	2b00      	cmp	r3, #0
 810c324:	d014      	beq.n	810c350 <osSemaphoreRelease+0x78>
 810c326:	4b0d      	ldr	r3, [pc, #52]	@ (810c35c <osSemaphoreRelease+0x84>)
 810c328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c32c:	601a      	str	r2, [r3, #0]
 810c32e:	f3bf 8f4f 	dsb	sy
 810c332:	f3bf 8f6f 	isb	sy
 810c336:	e00b      	b.n	810c350 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c338:	2300      	movs	r3, #0
 810c33a:	2200      	movs	r2, #0
 810c33c:	2100      	movs	r1, #0
 810c33e:	6938      	ldr	r0, [r7, #16]
 810c340:	f000 fee8 	bl	810d114 <xQueueGenericSend>
 810c344:	4603      	mov	r3, r0
 810c346:	2b01      	cmp	r3, #1
 810c348:	d002      	beq.n	810c350 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810c34a:	f06f 0302 	mvn.w	r3, #2
 810c34e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810c350:	697b      	ldr	r3, [r7, #20]
}
 810c352:	4618      	mov	r0, r3
 810c354:	3718      	adds	r7, #24
 810c356:	46bd      	mov	sp, r7
 810c358:	bd80      	pop	{r7, pc}
 810c35a:	bf00      	nop
 810c35c:	e000ed04 	.word	0xe000ed04

0810c360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810c360:	b480      	push	{r7}
 810c362:	b085      	sub	sp, #20
 810c364:	af00      	add	r7, sp, #0
 810c366:	60f8      	str	r0, [r7, #12]
 810c368:	60b9      	str	r1, [r7, #8]
 810c36a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810c36c:	68fb      	ldr	r3, [r7, #12]
 810c36e:	4a07      	ldr	r2, [pc, #28]	@ (810c38c <vApplicationGetIdleTaskMemory+0x2c>)
 810c370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810c372:	68bb      	ldr	r3, [r7, #8]
 810c374:	4a06      	ldr	r2, [pc, #24]	@ (810c390 <vApplicationGetIdleTaskMemory+0x30>)
 810c376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	2280      	movs	r2, #128	@ 0x80
 810c37c:	601a      	str	r2, [r3, #0]
}
 810c37e:	bf00      	nop
 810c380:	3714      	adds	r7, #20
 810c382:	46bd      	mov	sp, r7
 810c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c388:	4770      	bx	lr
 810c38a:	bf00      	nop
 810c38c:	10000634 	.word	0x10000634
 810c390:	10000690 	.word	0x10000690

0810c394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810c394:	b480      	push	{r7}
 810c396:	b085      	sub	sp, #20
 810c398:	af00      	add	r7, sp, #0
 810c39a:	60f8      	str	r0, [r7, #12]
 810c39c:	60b9      	str	r1, [r7, #8]
 810c39e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810c3a0:	68fb      	ldr	r3, [r7, #12]
 810c3a2:	4a07      	ldr	r2, [pc, #28]	@ (810c3c0 <vApplicationGetTimerTaskMemory+0x2c>)
 810c3a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810c3a6:	68bb      	ldr	r3, [r7, #8]
 810c3a8:	4a06      	ldr	r2, [pc, #24]	@ (810c3c4 <vApplicationGetTimerTaskMemory+0x30>)
 810c3aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810c3ac:	687b      	ldr	r3, [r7, #4]
 810c3ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810c3b2:	601a      	str	r2, [r3, #0]
}
 810c3b4:	bf00      	nop
 810c3b6:	3714      	adds	r7, #20
 810c3b8:	46bd      	mov	sp, r7
 810c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3be:	4770      	bx	lr
 810c3c0:	10000890 	.word	0x10000890
 810c3c4:	100008ec 	.word	0x100008ec

0810c3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810c3c8:	b580      	push	{r7, lr}
 810c3ca:	b08a      	sub	sp, #40	@ 0x28
 810c3cc:	af00      	add	r7, sp, #0
 810c3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810c3d0:	2300      	movs	r3, #0
 810c3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810c3d4:	f001 ff5a 	bl	810e28c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810c3d8:	4b5c      	ldr	r3, [pc, #368]	@ (810c54c <pvPortMalloc+0x184>)
 810c3da:	681b      	ldr	r3, [r3, #0]
 810c3dc:	2b00      	cmp	r3, #0
 810c3de:	d101      	bne.n	810c3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810c3e0:	f000 f924 	bl	810c62c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810c3e4:	4b5a      	ldr	r3, [pc, #360]	@ (810c550 <pvPortMalloc+0x188>)
 810c3e6:	681a      	ldr	r2, [r3, #0]
 810c3e8:	687b      	ldr	r3, [r7, #4]
 810c3ea:	4013      	ands	r3, r2
 810c3ec:	2b00      	cmp	r3, #0
 810c3ee:	f040 8095 	bne.w	810c51c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810c3f2:	687b      	ldr	r3, [r7, #4]
 810c3f4:	2b00      	cmp	r3, #0
 810c3f6:	d01e      	beq.n	810c436 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810c3f8:	2208      	movs	r2, #8
 810c3fa:	687b      	ldr	r3, [r7, #4]
 810c3fc:	4413      	add	r3, r2
 810c3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810c400:	687b      	ldr	r3, [r7, #4]
 810c402:	f003 0307 	and.w	r3, r3, #7
 810c406:	2b00      	cmp	r3, #0
 810c408:	d015      	beq.n	810c436 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810c40a:	687b      	ldr	r3, [r7, #4]
 810c40c:	f023 0307 	bic.w	r3, r3, #7
 810c410:	3308      	adds	r3, #8
 810c412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c414:	687b      	ldr	r3, [r7, #4]
 810c416:	f003 0307 	and.w	r3, r3, #7
 810c41a:	2b00      	cmp	r3, #0
 810c41c:	d00b      	beq.n	810c436 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c422:	f383 8811 	msr	BASEPRI, r3
 810c426:	f3bf 8f6f 	isb	sy
 810c42a:	f3bf 8f4f 	dsb	sy
 810c42e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810c430:	bf00      	nop
 810c432:	bf00      	nop
 810c434:	e7fd      	b.n	810c432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810c436:	687b      	ldr	r3, [r7, #4]
 810c438:	2b00      	cmp	r3, #0
 810c43a:	d06f      	beq.n	810c51c <pvPortMalloc+0x154>
 810c43c:	4b45      	ldr	r3, [pc, #276]	@ (810c554 <pvPortMalloc+0x18c>)
 810c43e:	681b      	ldr	r3, [r3, #0]
 810c440:	687a      	ldr	r2, [r7, #4]
 810c442:	429a      	cmp	r2, r3
 810c444:	d86a      	bhi.n	810c51c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810c446:	4b44      	ldr	r3, [pc, #272]	@ (810c558 <pvPortMalloc+0x190>)
 810c448:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810c44a:	4b43      	ldr	r3, [pc, #268]	@ (810c558 <pvPortMalloc+0x190>)
 810c44c:	681b      	ldr	r3, [r3, #0]
 810c44e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c450:	e004      	b.n	810c45c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c454:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c458:	681b      	ldr	r3, [r3, #0]
 810c45a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c45e:	685b      	ldr	r3, [r3, #4]
 810c460:	687a      	ldr	r2, [r7, #4]
 810c462:	429a      	cmp	r2, r3
 810c464:	d903      	bls.n	810c46e <pvPortMalloc+0xa6>
 810c466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c468:	681b      	ldr	r3, [r3, #0]
 810c46a:	2b00      	cmp	r3, #0
 810c46c:	d1f1      	bne.n	810c452 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810c46e:	4b37      	ldr	r3, [pc, #220]	@ (810c54c <pvPortMalloc+0x184>)
 810c470:	681b      	ldr	r3, [r3, #0]
 810c472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810c474:	429a      	cmp	r2, r3
 810c476:	d051      	beq.n	810c51c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810c478:	6a3b      	ldr	r3, [r7, #32]
 810c47a:	681b      	ldr	r3, [r3, #0]
 810c47c:	2208      	movs	r2, #8
 810c47e:	4413      	add	r3, r2
 810c480:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810c482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c484:	681a      	ldr	r2, [r3, #0]
 810c486:	6a3b      	ldr	r3, [r7, #32]
 810c488:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c48c:	685a      	ldr	r2, [r3, #4]
 810c48e:	687b      	ldr	r3, [r7, #4]
 810c490:	1ad2      	subs	r2, r2, r3
 810c492:	2308      	movs	r3, #8
 810c494:	005b      	lsls	r3, r3, #1
 810c496:	429a      	cmp	r2, r3
 810c498:	d920      	bls.n	810c4dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810c49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810c49c:	687b      	ldr	r3, [r7, #4]
 810c49e:	4413      	add	r3, r2
 810c4a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c4a2:	69bb      	ldr	r3, [r7, #24]
 810c4a4:	f003 0307 	and.w	r3, r3, #7
 810c4a8:	2b00      	cmp	r3, #0
 810c4aa:	d00b      	beq.n	810c4c4 <pvPortMalloc+0xfc>
	__asm volatile
 810c4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c4b0:	f383 8811 	msr	BASEPRI, r3
 810c4b4:	f3bf 8f6f 	isb	sy
 810c4b8:	f3bf 8f4f 	dsb	sy
 810c4bc:	613b      	str	r3, [r7, #16]
}
 810c4be:	bf00      	nop
 810c4c0:	bf00      	nop
 810c4c2:	e7fd      	b.n	810c4c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c4c6:	685a      	ldr	r2, [r3, #4]
 810c4c8:	687b      	ldr	r3, [r7, #4]
 810c4ca:	1ad2      	subs	r2, r2, r3
 810c4cc:	69bb      	ldr	r3, [r7, #24]
 810c4ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c4d2:	687a      	ldr	r2, [r7, #4]
 810c4d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810c4d6:	69b8      	ldr	r0, [r7, #24]
 810c4d8:	f000 f90a 	bl	810c6f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810c4dc:	4b1d      	ldr	r3, [pc, #116]	@ (810c554 <pvPortMalloc+0x18c>)
 810c4de:	681a      	ldr	r2, [r3, #0]
 810c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c4e2:	685b      	ldr	r3, [r3, #4]
 810c4e4:	1ad3      	subs	r3, r2, r3
 810c4e6:	4a1b      	ldr	r2, [pc, #108]	@ (810c554 <pvPortMalloc+0x18c>)
 810c4e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810c4ea:	4b1a      	ldr	r3, [pc, #104]	@ (810c554 <pvPortMalloc+0x18c>)
 810c4ec:	681a      	ldr	r2, [r3, #0]
 810c4ee:	4b1b      	ldr	r3, [pc, #108]	@ (810c55c <pvPortMalloc+0x194>)
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	429a      	cmp	r2, r3
 810c4f4:	d203      	bcs.n	810c4fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810c4f6:	4b17      	ldr	r3, [pc, #92]	@ (810c554 <pvPortMalloc+0x18c>)
 810c4f8:	681b      	ldr	r3, [r3, #0]
 810c4fa:	4a18      	ldr	r2, [pc, #96]	@ (810c55c <pvPortMalloc+0x194>)
 810c4fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c500:	685a      	ldr	r2, [r3, #4]
 810c502:	4b13      	ldr	r3, [pc, #76]	@ (810c550 <pvPortMalloc+0x188>)
 810c504:	681b      	ldr	r3, [r3, #0]
 810c506:	431a      	orrs	r2, r3
 810c508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c50a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810c50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c50e:	2200      	movs	r2, #0
 810c510:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810c512:	4b13      	ldr	r3, [pc, #76]	@ (810c560 <pvPortMalloc+0x198>)
 810c514:	681b      	ldr	r3, [r3, #0]
 810c516:	3301      	adds	r3, #1
 810c518:	4a11      	ldr	r2, [pc, #68]	@ (810c560 <pvPortMalloc+0x198>)
 810c51a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810c51c:	f001 fec4 	bl	810e2a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810c520:	69fb      	ldr	r3, [r7, #28]
 810c522:	f003 0307 	and.w	r3, r3, #7
 810c526:	2b00      	cmp	r3, #0
 810c528:	d00b      	beq.n	810c542 <pvPortMalloc+0x17a>
	__asm volatile
 810c52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c52e:	f383 8811 	msr	BASEPRI, r3
 810c532:	f3bf 8f6f 	isb	sy
 810c536:	f3bf 8f4f 	dsb	sy
 810c53a:	60fb      	str	r3, [r7, #12]
}
 810c53c:	bf00      	nop
 810c53e:	bf00      	nop
 810c540:	e7fd      	b.n	810c53e <pvPortMalloc+0x176>
	return pvReturn;
 810c542:	69fb      	ldr	r3, [r7, #28]
}
 810c544:	4618      	mov	r0, r3
 810c546:	3728      	adds	r7, #40	@ 0x28
 810c548:	46bd      	mov	sp, r7
 810c54a:	bd80      	pop	{r7, pc}
 810c54c:	100048f4 	.word	0x100048f4
 810c550:	10004908 	.word	0x10004908
 810c554:	100048f8 	.word	0x100048f8
 810c558:	100048ec 	.word	0x100048ec
 810c55c:	100048fc 	.word	0x100048fc
 810c560:	10004900 	.word	0x10004900

0810c564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810c564:	b580      	push	{r7, lr}
 810c566:	b086      	sub	sp, #24
 810c568:	af00      	add	r7, sp, #0
 810c56a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810c56c:	687b      	ldr	r3, [r7, #4]
 810c56e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810c570:	687b      	ldr	r3, [r7, #4]
 810c572:	2b00      	cmp	r3, #0
 810c574:	d04f      	beq.n	810c616 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810c576:	2308      	movs	r3, #8
 810c578:	425b      	negs	r3, r3
 810c57a:	697a      	ldr	r2, [r7, #20]
 810c57c:	4413      	add	r3, r2
 810c57e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810c580:	697b      	ldr	r3, [r7, #20]
 810c582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810c584:	693b      	ldr	r3, [r7, #16]
 810c586:	685a      	ldr	r2, [r3, #4]
 810c588:	4b25      	ldr	r3, [pc, #148]	@ (810c620 <vPortFree+0xbc>)
 810c58a:	681b      	ldr	r3, [r3, #0]
 810c58c:	4013      	ands	r3, r2
 810c58e:	2b00      	cmp	r3, #0
 810c590:	d10b      	bne.n	810c5aa <vPortFree+0x46>
	__asm volatile
 810c592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c596:	f383 8811 	msr	BASEPRI, r3
 810c59a:	f3bf 8f6f 	isb	sy
 810c59e:	f3bf 8f4f 	dsb	sy
 810c5a2:	60fb      	str	r3, [r7, #12]
}
 810c5a4:	bf00      	nop
 810c5a6:	bf00      	nop
 810c5a8:	e7fd      	b.n	810c5a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810c5aa:	693b      	ldr	r3, [r7, #16]
 810c5ac:	681b      	ldr	r3, [r3, #0]
 810c5ae:	2b00      	cmp	r3, #0
 810c5b0:	d00b      	beq.n	810c5ca <vPortFree+0x66>
	__asm volatile
 810c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5b6:	f383 8811 	msr	BASEPRI, r3
 810c5ba:	f3bf 8f6f 	isb	sy
 810c5be:	f3bf 8f4f 	dsb	sy
 810c5c2:	60bb      	str	r3, [r7, #8]
}
 810c5c4:	bf00      	nop
 810c5c6:	bf00      	nop
 810c5c8:	e7fd      	b.n	810c5c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810c5ca:	693b      	ldr	r3, [r7, #16]
 810c5cc:	685a      	ldr	r2, [r3, #4]
 810c5ce:	4b14      	ldr	r3, [pc, #80]	@ (810c620 <vPortFree+0xbc>)
 810c5d0:	681b      	ldr	r3, [r3, #0]
 810c5d2:	4013      	ands	r3, r2
 810c5d4:	2b00      	cmp	r3, #0
 810c5d6:	d01e      	beq.n	810c616 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810c5d8:	693b      	ldr	r3, [r7, #16]
 810c5da:	681b      	ldr	r3, [r3, #0]
 810c5dc:	2b00      	cmp	r3, #0
 810c5de:	d11a      	bne.n	810c616 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810c5e0:	693b      	ldr	r3, [r7, #16]
 810c5e2:	685a      	ldr	r2, [r3, #4]
 810c5e4:	4b0e      	ldr	r3, [pc, #56]	@ (810c620 <vPortFree+0xbc>)
 810c5e6:	681b      	ldr	r3, [r3, #0]
 810c5e8:	43db      	mvns	r3, r3
 810c5ea:	401a      	ands	r2, r3
 810c5ec:	693b      	ldr	r3, [r7, #16]
 810c5ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810c5f0:	f001 fe4c 	bl	810e28c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810c5f4:	693b      	ldr	r3, [r7, #16]
 810c5f6:	685a      	ldr	r2, [r3, #4]
 810c5f8:	4b0a      	ldr	r3, [pc, #40]	@ (810c624 <vPortFree+0xc0>)
 810c5fa:	681b      	ldr	r3, [r3, #0]
 810c5fc:	4413      	add	r3, r2
 810c5fe:	4a09      	ldr	r2, [pc, #36]	@ (810c624 <vPortFree+0xc0>)
 810c600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810c602:	6938      	ldr	r0, [r7, #16]
 810c604:	f000 f874 	bl	810c6f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810c608:	4b07      	ldr	r3, [pc, #28]	@ (810c628 <vPortFree+0xc4>)
 810c60a:	681b      	ldr	r3, [r3, #0]
 810c60c:	3301      	adds	r3, #1
 810c60e:	4a06      	ldr	r2, [pc, #24]	@ (810c628 <vPortFree+0xc4>)
 810c610:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810c612:	f001 fe49 	bl	810e2a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810c616:	bf00      	nop
 810c618:	3718      	adds	r7, #24
 810c61a:	46bd      	mov	sp, r7
 810c61c:	bd80      	pop	{r7, pc}
 810c61e:	bf00      	nop
 810c620:	10004908 	.word	0x10004908
 810c624:	100048f8 	.word	0x100048f8
 810c628:	10004904 	.word	0x10004904

0810c62c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810c62c:	b480      	push	{r7}
 810c62e:	b085      	sub	sp, #20
 810c630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810c632:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810c636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810c638:	4b27      	ldr	r3, [pc, #156]	@ (810c6d8 <prvHeapInit+0xac>)
 810c63a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810c63c:	68fb      	ldr	r3, [r7, #12]
 810c63e:	f003 0307 	and.w	r3, r3, #7
 810c642:	2b00      	cmp	r3, #0
 810c644:	d00c      	beq.n	810c660 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810c646:	68fb      	ldr	r3, [r7, #12]
 810c648:	3307      	adds	r3, #7
 810c64a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c64c:	68fb      	ldr	r3, [r7, #12]
 810c64e:	f023 0307 	bic.w	r3, r3, #7
 810c652:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810c654:	68ba      	ldr	r2, [r7, #8]
 810c656:	68fb      	ldr	r3, [r7, #12]
 810c658:	1ad3      	subs	r3, r2, r3
 810c65a:	4a1f      	ldr	r2, [pc, #124]	@ (810c6d8 <prvHeapInit+0xac>)
 810c65c:	4413      	add	r3, r2
 810c65e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810c660:	68fb      	ldr	r3, [r7, #12]
 810c662:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810c664:	4a1d      	ldr	r2, [pc, #116]	@ (810c6dc <prvHeapInit+0xb0>)
 810c666:	687b      	ldr	r3, [r7, #4]
 810c668:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810c66a:	4b1c      	ldr	r3, [pc, #112]	@ (810c6dc <prvHeapInit+0xb0>)
 810c66c:	2200      	movs	r2, #0
 810c66e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810c670:	687b      	ldr	r3, [r7, #4]
 810c672:	68ba      	ldr	r2, [r7, #8]
 810c674:	4413      	add	r3, r2
 810c676:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810c678:	2208      	movs	r2, #8
 810c67a:	68fb      	ldr	r3, [r7, #12]
 810c67c:	1a9b      	subs	r3, r3, r2
 810c67e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c680:	68fb      	ldr	r3, [r7, #12]
 810c682:	f023 0307 	bic.w	r3, r3, #7
 810c686:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810c688:	68fb      	ldr	r3, [r7, #12]
 810c68a:	4a15      	ldr	r2, [pc, #84]	@ (810c6e0 <prvHeapInit+0xb4>)
 810c68c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810c68e:	4b14      	ldr	r3, [pc, #80]	@ (810c6e0 <prvHeapInit+0xb4>)
 810c690:	681b      	ldr	r3, [r3, #0]
 810c692:	2200      	movs	r2, #0
 810c694:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810c696:	4b12      	ldr	r3, [pc, #72]	@ (810c6e0 <prvHeapInit+0xb4>)
 810c698:	681b      	ldr	r3, [r3, #0]
 810c69a:	2200      	movs	r2, #0
 810c69c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810c69e:	687b      	ldr	r3, [r7, #4]
 810c6a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810c6a2:	683b      	ldr	r3, [r7, #0]
 810c6a4:	68fa      	ldr	r2, [r7, #12]
 810c6a6:	1ad2      	subs	r2, r2, r3
 810c6a8:	683b      	ldr	r3, [r7, #0]
 810c6aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810c6ac:	4b0c      	ldr	r3, [pc, #48]	@ (810c6e0 <prvHeapInit+0xb4>)
 810c6ae:	681a      	ldr	r2, [r3, #0]
 810c6b0:	683b      	ldr	r3, [r7, #0]
 810c6b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c6b4:	683b      	ldr	r3, [r7, #0]
 810c6b6:	685b      	ldr	r3, [r3, #4]
 810c6b8:	4a0a      	ldr	r2, [pc, #40]	@ (810c6e4 <prvHeapInit+0xb8>)
 810c6ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c6bc:	683b      	ldr	r3, [r7, #0]
 810c6be:	685b      	ldr	r3, [r3, #4]
 810c6c0:	4a09      	ldr	r2, [pc, #36]	@ (810c6e8 <prvHeapInit+0xbc>)
 810c6c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810c6c4:	4b09      	ldr	r3, [pc, #36]	@ (810c6ec <prvHeapInit+0xc0>)
 810c6c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810c6ca:	601a      	str	r2, [r3, #0]
}
 810c6cc:	bf00      	nop
 810c6ce:	3714      	adds	r7, #20
 810c6d0:	46bd      	mov	sp, r7
 810c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6d6:	4770      	bx	lr
 810c6d8:	10000cec 	.word	0x10000cec
 810c6dc:	100048ec 	.word	0x100048ec
 810c6e0:	100048f4 	.word	0x100048f4
 810c6e4:	100048fc 	.word	0x100048fc
 810c6e8:	100048f8 	.word	0x100048f8
 810c6ec:	10004908 	.word	0x10004908

0810c6f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810c6f0:	b480      	push	{r7}
 810c6f2:	b085      	sub	sp, #20
 810c6f4:	af00      	add	r7, sp, #0
 810c6f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810c6f8:	4b28      	ldr	r3, [pc, #160]	@ (810c79c <prvInsertBlockIntoFreeList+0xac>)
 810c6fa:	60fb      	str	r3, [r7, #12]
 810c6fc:	e002      	b.n	810c704 <prvInsertBlockIntoFreeList+0x14>
 810c6fe:	68fb      	ldr	r3, [r7, #12]
 810c700:	681b      	ldr	r3, [r3, #0]
 810c702:	60fb      	str	r3, [r7, #12]
 810c704:	68fb      	ldr	r3, [r7, #12]
 810c706:	681b      	ldr	r3, [r3, #0]
 810c708:	687a      	ldr	r2, [r7, #4]
 810c70a:	429a      	cmp	r2, r3
 810c70c:	d8f7      	bhi.n	810c6fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810c70e:	68fb      	ldr	r3, [r7, #12]
 810c710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810c712:	68fb      	ldr	r3, [r7, #12]
 810c714:	685b      	ldr	r3, [r3, #4]
 810c716:	68ba      	ldr	r2, [r7, #8]
 810c718:	4413      	add	r3, r2
 810c71a:	687a      	ldr	r2, [r7, #4]
 810c71c:	429a      	cmp	r2, r3
 810c71e:	d108      	bne.n	810c732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810c720:	68fb      	ldr	r3, [r7, #12]
 810c722:	685a      	ldr	r2, [r3, #4]
 810c724:	687b      	ldr	r3, [r7, #4]
 810c726:	685b      	ldr	r3, [r3, #4]
 810c728:	441a      	add	r2, r3
 810c72a:	68fb      	ldr	r3, [r7, #12]
 810c72c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810c72e:	68fb      	ldr	r3, [r7, #12]
 810c730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810c732:	687b      	ldr	r3, [r7, #4]
 810c734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810c736:	687b      	ldr	r3, [r7, #4]
 810c738:	685b      	ldr	r3, [r3, #4]
 810c73a:	68ba      	ldr	r2, [r7, #8]
 810c73c:	441a      	add	r2, r3
 810c73e:	68fb      	ldr	r3, [r7, #12]
 810c740:	681b      	ldr	r3, [r3, #0]
 810c742:	429a      	cmp	r2, r3
 810c744:	d118      	bne.n	810c778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810c746:	68fb      	ldr	r3, [r7, #12]
 810c748:	681a      	ldr	r2, [r3, #0]
 810c74a:	4b15      	ldr	r3, [pc, #84]	@ (810c7a0 <prvInsertBlockIntoFreeList+0xb0>)
 810c74c:	681b      	ldr	r3, [r3, #0]
 810c74e:	429a      	cmp	r2, r3
 810c750:	d00d      	beq.n	810c76e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810c752:	687b      	ldr	r3, [r7, #4]
 810c754:	685a      	ldr	r2, [r3, #4]
 810c756:	68fb      	ldr	r3, [r7, #12]
 810c758:	681b      	ldr	r3, [r3, #0]
 810c75a:	685b      	ldr	r3, [r3, #4]
 810c75c:	441a      	add	r2, r3
 810c75e:	687b      	ldr	r3, [r7, #4]
 810c760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810c762:	68fb      	ldr	r3, [r7, #12]
 810c764:	681b      	ldr	r3, [r3, #0]
 810c766:	681a      	ldr	r2, [r3, #0]
 810c768:	687b      	ldr	r3, [r7, #4]
 810c76a:	601a      	str	r2, [r3, #0]
 810c76c:	e008      	b.n	810c780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810c76e:	4b0c      	ldr	r3, [pc, #48]	@ (810c7a0 <prvInsertBlockIntoFreeList+0xb0>)
 810c770:	681a      	ldr	r2, [r3, #0]
 810c772:	687b      	ldr	r3, [r7, #4]
 810c774:	601a      	str	r2, [r3, #0]
 810c776:	e003      	b.n	810c780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810c778:	68fb      	ldr	r3, [r7, #12]
 810c77a:	681a      	ldr	r2, [r3, #0]
 810c77c:	687b      	ldr	r3, [r7, #4]
 810c77e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810c780:	68fa      	ldr	r2, [r7, #12]
 810c782:	687b      	ldr	r3, [r7, #4]
 810c784:	429a      	cmp	r2, r3
 810c786:	d002      	beq.n	810c78e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810c788:	68fb      	ldr	r3, [r7, #12]
 810c78a:	687a      	ldr	r2, [r7, #4]
 810c78c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c78e:	bf00      	nop
 810c790:	3714      	adds	r7, #20
 810c792:	46bd      	mov	sp, r7
 810c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c798:	4770      	bx	lr
 810c79a:	bf00      	nop
 810c79c:	100048ec 	.word	0x100048ec
 810c7a0:	100048f4 	.word	0x100048f4

0810c7a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810c7a4:	b480      	push	{r7}
 810c7a6:	b083      	sub	sp, #12
 810c7a8:	af00      	add	r7, sp, #0
 810c7aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c7ac:	687b      	ldr	r3, [r7, #4]
 810c7ae:	f103 0208 	add.w	r2, r3, #8
 810c7b2:	687b      	ldr	r3, [r7, #4]
 810c7b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810c7b6:	687b      	ldr	r3, [r7, #4]
 810c7b8:	f04f 32ff 	mov.w	r2, #4294967295
 810c7bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c7be:	687b      	ldr	r3, [r7, #4]
 810c7c0:	f103 0208 	add.w	r2, r3, #8
 810c7c4:	687b      	ldr	r3, [r7, #4]
 810c7c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c7c8:	687b      	ldr	r3, [r7, #4]
 810c7ca:	f103 0208 	add.w	r2, r3, #8
 810c7ce:	687b      	ldr	r3, [r7, #4]
 810c7d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810c7d2:	687b      	ldr	r3, [r7, #4]
 810c7d4:	2200      	movs	r2, #0
 810c7d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810c7d8:	bf00      	nop
 810c7da:	370c      	adds	r7, #12
 810c7dc:	46bd      	mov	sp, r7
 810c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7e2:	4770      	bx	lr

0810c7e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810c7e4:	b480      	push	{r7}
 810c7e6:	b083      	sub	sp, #12
 810c7e8:	af00      	add	r7, sp, #0
 810c7ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	2200      	movs	r2, #0
 810c7f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810c7f2:	bf00      	nop
 810c7f4:	370c      	adds	r7, #12
 810c7f6:	46bd      	mov	sp, r7
 810c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7fc:	4770      	bx	lr

0810c7fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c7fe:	b480      	push	{r7}
 810c800:	b085      	sub	sp, #20
 810c802:	af00      	add	r7, sp, #0
 810c804:	6078      	str	r0, [r7, #4]
 810c806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810c808:	687b      	ldr	r3, [r7, #4]
 810c80a:	685b      	ldr	r3, [r3, #4]
 810c80c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810c80e:	683b      	ldr	r3, [r7, #0]
 810c810:	68fa      	ldr	r2, [r7, #12]
 810c812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810c814:	68fb      	ldr	r3, [r7, #12]
 810c816:	689a      	ldr	r2, [r3, #8]
 810c818:	683b      	ldr	r3, [r7, #0]
 810c81a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810c81c:	68fb      	ldr	r3, [r7, #12]
 810c81e:	689b      	ldr	r3, [r3, #8]
 810c820:	683a      	ldr	r2, [r7, #0]
 810c822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810c824:	68fb      	ldr	r3, [r7, #12]
 810c826:	683a      	ldr	r2, [r7, #0]
 810c828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810c82a:	683b      	ldr	r3, [r7, #0]
 810c82c:	687a      	ldr	r2, [r7, #4]
 810c82e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c830:	687b      	ldr	r3, [r7, #4]
 810c832:	681b      	ldr	r3, [r3, #0]
 810c834:	1c5a      	adds	r2, r3, #1
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	601a      	str	r2, [r3, #0]
}
 810c83a:	bf00      	nop
 810c83c:	3714      	adds	r7, #20
 810c83e:	46bd      	mov	sp, r7
 810c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c844:	4770      	bx	lr

0810c846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c846:	b480      	push	{r7}
 810c848:	b085      	sub	sp, #20
 810c84a:	af00      	add	r7, sp, #0
 810c84c:	6078      	str	r0, [r7, #4]
 810c84e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810c850:	683b      	ldr	r3, [r7, #0]
 810c852:	681b      	ldr	r3, [r3, #0]
 810c854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810c856:	68bb      	ldr	r3, [r7, #8]
 810c858:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c85c:	d103      	bne.n	810c866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810c85e:	687b      	ldr	r3, [r7, #4]
 810c860:	691b      	ldr	r3, [r3, #16]
 810c862:	60fb      	str	r3, [r7, #12]
 810c864:	e00c      	b.n	810c880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810c866:	687b      	ldr	r3, [r7, #4]
 810c868:	3308      	adds	r3, #8
 810c86a:	60fb      	str	r3, [r7, #12]
 810c86c:	e002      	b.n	810c874 <vListInsert+0x2e>
 810c86e:	68fb      	ldr	r3, [r7, #12]
 810c870:	685b      	ldr	r3, [r3, #4]
 810c872:	60fb      	str	r3, [r7, #12]
 810c874:	68fb      	ldr	r3, [r7, #12]
 810c876:	685b      	ldr	r3, [r3, #4]
 810c878:	681b      	ldr	r3, [r3, #0]
 810c87a:	68ba      	ldr	r2, [r7, #8]
 810c87c:	429a      	cmp	r2, r3
 810c87e:	d2f6      	bcs.n	810c86e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810c880:	68fb      	ldr	r3, [r7, #12]
 810c882:	685a      	ldr	r2, [r3, #4]
 810c884:	683b      	ldr	r3, [r7, #0]
 810c886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810c888:	683b      	ldr	r3, [r7, #0]
 810c88a:	685b      	ldr	r3, [r3, #4]
 810c88c:	683a      	ldr	r2, [r7, #0]
 810c88e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810c890:	683b      	ldr	r3, [r7, #0]
 810c892:	68fa      	ldr	r2, [r7, #12]
 810c894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810c896:	68fb      	ldr	r3, [r7, #12]
 810c898:	683a      	ldr	r2, [r7, #0]
 810c89a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810c89c:	683b      	ldr	r3, [r7, #0]
 810c89e:	687a      	ldr	r2, [r7, #4]
 810c8a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c8a2:	687b      	ldr	r3, [r7, #4]
 810c8a4:	681b      	ldr	r3, [r3, #0]
 810c8a6:	1c5a      	adds	r2, r3, #1
 810c8a8:	687b      	ldr	r3, [r7, #4]
 810c8aa:	601a      	str	r2, [r3, #0]
}
 810c8ac:	bf00      	nop
 810c8ae:	3714      	adds	r7, #20
 810c8b0:	46bd      	mov	sp, r7
 810c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c8b6:	4770      	bx	lr

0810c8b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810c8b8:	b480      	push	{r7}
 810c8ba:	b085      	sub	sp, #20
 810c8bc:	af00      	add	r7, sp, #0
 810c8be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810c8c0:	687b      	ldr	r3, [r7, #4]
 810c8c2:	691b      	ldr	r3, [r3, #16]
 810c8c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810c8c6:	687b      	ldr	r3, [r7, #4]
 810c8c8:	685b      	ldr	r3, [r3, #4]
 810c8ca:	687a      	ldr	r2, [r7, #4]
 810c8cc:	6892      	ldr	r2, [r2, #8]
 810c8ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	689b      	ldr	r3, [r3, #8]
 810c8d4:	687a      	ldr	r2, [r7, #4]
 810c8d6:	6852      	ldr	r2, [r2, #4]
 810c8d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810c8da:	68fb      	ldr	r3, [r7, #12]
 810c8dc:	685b      	ldr	r3, [r3, #4]
 810c8de:	687a      	ldr	r2, [r7, #4]
 810c8e0:	429a      	cmp	r2, r3
 810c8e2:	d103      	bne.n	810c8ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810c8e4:	687b      	ldr	r3, [r7, #4]
 810c8e6:	689a      	ldr	r2, [r3, #8]
 810c8e8:	68fb      	ldr	r3, [r7, #12]
 810c8ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810c8ec:	687b      	ldr	r3, [r7, #4]
 810c8ee:	2200      	movs	r2, #0
 810c8f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810c8f2:	68fb      	ldr	r3, [r7, #12]
 810c8f4:	681b      	ldr	r3, [r3, #0]
 810c8f6:	1e5a      	subs	r2, r3, #1
 810c8f8:	68fb      	ldr	r3, [r7, #12]
 810c8fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810c8fc:	68fb      	ldr	r3, [r7, #12]
 810c8fe:	681b      	ldr	r3, [r3, #0]
}
 810c900:	4618      	mov	r0, r3
 810c902:	3714      	adds	r7, #20
 810c904:	46bd      	mov	sp, r7
 810c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c90a:	4770      	bx	lr

0810c90c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810c90c:	b480      	push	{r7}
 810c90e:	b085      	sub	sp, #20
 810c910:	af00      	add	r7, sp, #0
 810c912:	60f8      	str	r0, [r7, #12]
 810c914:	60b9      	str	r1, [r7, #8]
 810c916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810c918:	68fb      	ldr	r3, [r7, #12]
 810c91a:	3b04      	subs	r3, #4
 810c91c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810c91e:	68fb      	ldr	r3, [r7, #12]
 810c920:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810c924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c926:	68fb      	ldr	r3, [r7, #12]
 810c928:	3b04      	subs	r3, #4
 810c92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810c92c:	68bb      	ldr	r3, [r7, #8]
 810c92e:	f023 0201 	bic.w	r2, r3, #1
 810c932:	68fb      	ldr	r3, [r7, #12]
 810c934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c936:	68fb      	ldr	r3, [r7, #12]
 810c938:	3b04      	subs	r3, #4
 810c93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810c93c:	4a0c      	ldr	r2, [pc, #48]	@ (810c970 <pxPortInitialiseStack+0x64>)
 810c93e:	68fb      	ldr	r3, [r7, #12]
 810c940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810c942:	68fb      	ldr	r3, [r7, #12]
 810c944:	3b14      	subs	r3, #20
 810c946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810c948:	687a      	ldr	r2, [r7, #4]
 810c94a:	68fb      	ldr	r3, [r7, #12]
 810c94c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810c94e:	68fb      	ldr	r3, [r7, #12]
 810c950:	3b04      	subs	r3, #4
 810c952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810c954:	68fb      	ldr	r3, [r7, #12]
 810c956:	f06f 0202 	mvn.w	r2, #2
 810c95a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810c95c:	68fb      	ldr	r3, [r7, #12]
 810c95e:	3b20      	subs	r3, #32
 810c960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810c962:	68fb      	ldr	r3, [r7, #12]
}
 810c964:	4618      	mov	r0, r3
 810c966:	3714      	adds	r7, #20
 810c968:	46bd      	mov	sp, r7
 810c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c96e:	4770      	bx	lr
 810c970:	0810c975 	.word	0x0810c975

0810c974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810c974:	b480      	push	{r7}
 810c976:	b085      	sub	sp, #20
 810c978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810c97a:	2300      	movs	r3, #0
 810c97c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810c97e:	4b13      	ldr	r3, [pc, #76]	@ (810c9cc <prvTaskExitError+0x58>)
 810c980:	681b      	ldr	r3, [r3, #0]
 810c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c986:	d00b      	beq.n	810c9a0 <prvTaskExitError+0x2c>
	__asm volatile
 810c988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c98c:	f383 8811 	msr	BASEPRI, r3
 810c990:	f3bf 8f6f 	isb	sy
 810c994:	f3bf 8f4f 	dsb	sy
 810c998:	60fb      	str	r3, [r7, #12]
}
 810c99a:	bf00      	nop
 810c99c:	bf00      	nop
 810c99e:	e7fd      	b.n	810c99c <prvTaskExitError+0x28>
	__asm volatile
 810c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9a4:	f383 8811 	msr	BASEPRI, r3
 810c9a8:	f3bf 8f6f 	isb	sy
 810c9ac:	f3bf 8f4f 	dsb	sy
 810c9b0:	60bb      	str	r3, [r7, #8]
}
 810c9b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810c9b4:	bf00      	nop
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	2b00      	cmp	r3, #0
 810c9ba:	d0fc      	beq.n	810c9b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810c9bc:	bf00      	nop
 810c9be:	bf00      	nop
 810c9c0:	3714      	adds	r7, #20
 810c9c2:	46bd      	mov	sp, r7
 810c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9c8:	4770      	bx	lr
 810c9ca:	bf00      	nop
 810c9cc:	10000010 	.word	0x10000010

0810c9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810c9d0:	4b07      	ldr	r3, [pc, #28]	@ (810c9f0 <pxCurrentTCBConst2>)
 810c9d2:	6819      	ldr	r1, [r3, #0]
 810c9d4:	6808      	ldr	r0, [r1, #0]
 810c9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9da:	f380 8809 	msr	PSP, r0
 810c9de:	f3bf 8f6f 	isb	sy
 810c9e2:	f04f 0000 	mov.w	r0, #0
 810c9e6:	f380 8811 	msr	BASEPRI, r0
 810c9ea:	4770      	bx	lr
 810c9ec:	f3af 8000 	nop.w

0810c9f0 <pxCurrentTCBConst2>:
 810c9f0:	10004954 	.word	0x10004954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810c9f4:	bf00      	nop
 810c9f6:	bf00      	nop

0810c9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810c9f8:	4808      	ldr	r0, [pc, #32]	@ (810ca1c <prvPortStartFirstTask+0x24>)
 810c9fa:	6800      	ldr	r0, [r0, #0]
 810c9fc:	6800      	ldr	r0, [r0, #0]
 810c9fe:	f380 8808 	msr	MSP, r0
 810ca02:	f04f 0000 	mov.w	r0, #0
 810ca06:	f380 8814 	msr	CONTROL, r0
 810ca0a:	b662      	cpsie	i
 810ca0c:	b661      	cpsie	f
 810ca0e:	f3bf 8f4f 	dsb	sy
 810ca12:	f3bf 8f6f 	isb	sy
 810ca16:	df00      	svc	0
 810ca18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810ca1a:	bf00      	nop
 810ca1c:	e000ed08 	.word	0xe000ed08

0810ca20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810ca20:	b580      	push	{r7, lr}
 810ca22:	b086      	sub	sp, #24
 810ca24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810ca26:	4b47      	ldr	r3, [pc, #284]	@ (810cb44 <xPortStartScheduler+0x124>)
 810ca28:	681b      	ldr	r3, [r3, #0]
 810ca2a:	4a47      	ldr	r2, [pc, #284]	@ (810cb48 <xPortStartScheduler+0x128>)
 810ca2c:	4293      	cmp	r3, r2
 810ca2e:	d10b      	bne.n	810ca48 <xPortStartScheduler+0x28>
	__asm volatile
 810ca30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca34:	f383 8811 	msr	BASEPRI, r3
 810ca38:	f3bf 8f6f 	isb	sy
 810ca3c:	f3bf 8f4f 	dsb	sy
 810ca40:	613b      	str	r3, [r7, #16]
}
 810ca42:	bf00      	nop
 810ca44:	bf00      	nop
 810ca46:	e7fd      	b.n	810ca44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810ca48:	4b3e      	ldr	r3, [pc, #248]	@ (810cb44 <xPortStartScheduler+0x124>)
 810ca4a:	681b      	ldr	r3, [r3, #0]
 810ca4c:	4a3f      	ldr	r2, [pc, #252]	@ (810cb4c <xPortStartScheduler+0x12c>)
 810ca4e:	4293      	cmp	r3, r2
 810ca50:	d10b      	bne.n	810ca6a <xPortStartScheduler+0x4a>
	__asm volatile
 810ca52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca56:	f383 8811 	msr	BASEPRI, r3
 810ca5a:	f3bf 8f6f 	isb	sy
 810ca5e:	f3bf 8f4f 	dsb	sy
 810ca62:	60fb      	str	r3, [r7, #12]
}
 810ca64:	bf00      	nop
 810ca66:	bf00      	nop
 810ca68:	e7fd      	b.n	810ca66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810ca6a:	4b39      	ldr	r3, [pc, #228]	@ (810cb50 <xPortStartScheduler+0x130>)
 810ca6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810ca6e:	697b      	ldr	r3, [r7, #20]
 810ca70:	781b      	ldrb	r3, [r3, #0]
 810ca72:	b2db      	uxtb	r3, r3
 810ca74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810ca76:	697b      	ldr	r3, [r7, #20]
 810ca78:	22ff      	movs	r2, #255	@ 0xff
 810ca7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810ca7c:	697b      	ldr	r3, [r7, #20]
 810ca7e:	781b      	ldrb	r3, [r3, #0]
 810ca80:	b2db      	uxtb	r3, r3
 810ca82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810ca84:	78fb      	ldrb	r3, [r7, #3]
 810ca86:	b2db      	uxtb	r3, r3
 810ca88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810ca8c:	b2da      	uxtb	r2, r3
 810ca8e:	4b31      	ldr	r3, [pc, #196]	@ (810cb54 <xPortStartScheduler+0x134>)
 810ca90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810ca92:	4b31      	ldr	r3, [pc, #196]	@ (810cb58 <xPortStartScheduler+0x138>)
 810ca94:	2207      	movs	r2, #7
 810ca96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810ca98:	e009      	b.n	810caae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810ca9a:	4b2f      	ldr	r3, [pc, #188]	@ (810cb58 <xPortStartScheduler+0x138>)
 810ca9c:	681b      	ldr	r3, [r3, #0]
 810ca9e:	3b01      	subs	r3, #1
 810caa0:	4a2d      	ldr	r2, [pc, #180]	@ (810cb58 <xPortStartScheduler+0x138>)
 810caa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810caa4:	78fb      	ldrb	r3, [r7, #3]
 810caa6:	b2db      	uxtb	r3, r3
 810caa8:	005b      	lsls	r3, r3, #1
 810caaa:	b2db      	uxtb	r3, r3
 810caac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810caae:	78fb      	ldrb	r3, [r7, #3]
 810cab0:	b2db      	uxtb	r3, r3
 810cab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cab6:	2b80      	cmp	r3, #128	@ 0x80
 810cab8:	d0ef      	beq.n	810ca9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810caba:	4b27      	ldr	r3, [pc, #156]	@ (810cb58 <xPortStartScheduler+0x138>)
 810cabc:	681b      	ldr	r3, [r3, #0]
 810cabe:	f1c3 0307 	rsb	r3, r3, #7
 810cac2:	2b04      	cmp	r3, #4
 810cac4:	d00b      	beq.n	810cade <xPortStartScheduler+0xbe>
	__asm volatile
 810cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810caca:	f383 8811 	msr	BASEPRI, r3
 810cace:	f3bf 8f6f 	isb	sy
 810cad2:	f3bf 8f4f 	dsb	sy
 810cad6:	60bb      	str	r3, [r7, #8]
}
 810cad8:	bf00      	nop
 810cada:	bf00      	nop
 810cadc:	e7fd      	b.n	810cada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810cade:	4b1e      	ldr	r3, [pc, #120]	@ (810cb58 <xPortStartScheduler+0x138>)
 810cae0:	681b      	ldr	r3, [r3, #0]
 810cae2:	021b      	lsls	r3, r3, #8
 810cae4:	4a1c      	ldr	r2, [pc, #112]	@ (810cb58 <xPortStartScheduler+0x138>)
 810cae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810cae8:	4b1b      	ldr	r3, [pc, #108]	@ (810cb58 <xPortStartScheduler+0x138>)
 810caea:	681b      	ldr	r3, [r3, #0]
 810caec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810caf0:	4a19      	ldr	r2, [pc, #100]	@ (810cb58 <xPortStartScheduler+0x138>)
 810caf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810caf4:	687b      	ldr	r3, [r7, #4]
 810caf6:	b2da      	uxtb	r2, r3
 810caf8:	697b      	ldr	r3, [r7, #20]
 810cafa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810cafc:	4b17      	ldr	r3, [pc, #92]	@ (810cb5c <xPortStartScheduler+0x13c>)
 810cafe:	681b      	ldr	r3, [r3, #0]
 810cb00:	4a16      	ldr	r2, [pc, #88]	@ (810cb5c <xPortStartScheduler+0x13c>)
 810cb02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810cb06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810cb08:	4b14      	ldr	r3, [pc, #80]	@ (810cb5c <xPortStartScheduler+0x13c>)
 810cb0a:	681b      	ldr	r3, [r3, #0]
 810cb0c:	4a13      	ldr	r2, [pc, #76]	@ (810cb5c <xPortStartScheduler+0x13c>)
 810cb0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810cb12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810cb14:	f000 f8da 	bl	810cccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810cb18:	4b11      	ldr	r3, [pc, #68]	@ (810cb60 <xPortStartScheduler+0x140>)
 810cb1a:	2200      	movs	r2, #0
 810cb1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810cb1e:	f000 f8f9 	bl	810cd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810cb22:	4b10      	ldr	r3, [pc, #64]	@ (810cb64 <xPortStartScheduler+0x144>)
 810cb24:	681b      	ldr	r3, [r3, #0]
 810cb26:	4a0f      	ldr	r2, [pc, #60]	@ (810cb64 <xPortStartScheduler+0x144>)
 810cb28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810cb2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810cb2e:	f7ff ff63 	bl	810c9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810cb32:	f001 fd21 	bl	810e578 <vTaskSwitchContext>
	prvTaskExitError();
 810cb36:	f7ff ff1d 	bl	810c974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810cb3a:	2300      	movs	r3, #0
}
 810cb3c:	4618      	mov	r0, r3
 810cb3e:	3718      	adds	r7, #24
 810cb40:	46bd      	mov	sp, r7
 810cb42:	bd80      	pop	{r7, pc}
 810cb44:	e000ed00 	.word	0xe000ed00
 810cb48:	410fc271 	.word	0x410fc271
 810cb4c:	410fc270 	.word	0x410fc270
 810cb50:	e000e400 	.word	0xe000e400
 810cb54:	1000490c 	.word	0x1000490c
 810cb58:	10004910 	.word	0x10004910
 810cb5c:	e000ed20 	.word	0xe000ed20
 810cb60:	10000010 	.word	0x10000010
 810cb64:	e000ef34 	.word	0xe000ef34

0810cb68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810cb68:	b480      	push	{r7}
 810cb6a:	b083      	sub	sp, #12
 810cb6c:	af00      	add	r7, sp, #0
	__asm volatile
 810cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb72:	f383 8811 	msr	BASEPRI, r3
 810cb76:	f3bf 8f6f 	isb	sy
 810cb7a:	f3bf 8f4f 	dsb	sy
 810cb7e:	607b      	str	r3, [r7, #4]
}
 810cb80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810cb82:	4b10      	ldr	r3, [pc, #64]	@ (810cbc4 <vPortEnterCritical+0x5c>)
 810cb84:	681b      	ldr	r3, [r3, #0]
 810cb86:	3301      	adds	r3, #1
 810cb88:	4a0e      	ldr	r2, [pc, #56]	@ (810cbc4 <vPortEnterCritical+0x5c>)
 810cb8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810cb8c:	4b0d      	ldr	r3, [pc, #52]	@ (810cbc4 <vPortEnterCritical+0x5c>)
 810cb8e:	681b      	ldr	r3, [r3, #0]
 810cb90:	2b01      	cmp	r3, #1
 810cb92:	d110      	bne.n	810cbb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810cb94:	4b0c      	ldr	r3, [pc, #48]	@ (810cbc8 <vPortEnterCritical+0x60>)
 810cb96:	681b      	ldr	r3, [r3, #0]
 810cb98:	b2db      	uxtb	r3, r3
 810cb9a:	2b00      	cmp	r3, #0
 810cb9c:	d00b      	beq.n	810cbb6 <vPortEnterCritical+0x4e>
	__asm volatile
 810cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cba2:	f383 8811 	msr	BASEPRI, r3
 810cba6:	f3bf 8f6f 	isb	sy
 810cbaa:	f3bf 8f4f 	dsb	sy
 810cbae:	603b      	str	r3, [r7, #0]
}
 810cbb0:	bf00      	nop
 810cbb2:	bf00      	nop
 810cbb4:	e7fd      	b.n	810cbb2 <vPortEnterCritical+0x4a>
	}
}
 810cbb6:	bf00      	nop
 810cbb8:	370c      	adds	r7, #12
 810cbba:	46bd      	mov	sp, r7
 810cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbc0:	4770      	bx	lr
 810cbc2:	bf00      	nop
 810cbc4:	10000010 	.word	0x10000010
 810cbc8:	e000ed04 	.word	0xe000ed04

0810cbcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810cbcc:	b480      	push	{r7}
 810cbce:	b083      	sub	sp, #12
 810cbd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810cbd2:	4b12      	ldr	r3, [pc, #72]	@ (810cc1c <vPortExitCritical+0x50>)
 810cbd4:	681b      	ldr	r3, [r3, #0]
 810cbd6:	2b00      	cmp	r3, #0
 810cbd8:	d10b      	bne.n	810cbf2 <vPortExitCritical+0x26>
	__asm volatile
 810cbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbde:	f383 8811 	msr	BASEPRI, r3
 810cbe2:	f3bf 8f6f 	isb	sy
 810cbe6:	f3bf 8f4f 	dsb	sy
 810cbea:	607b      	str	r3, [r7, #4]
}
 810cbec:	bf00      	nop
 810cbee:	bf00      	nop
 810cbf0:	e7fd      	b.n	810cbee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810cbf2:	4b0a      	ldr	r3, [pc, #40]	@ (810cc1c <vPortExitCritical+0x50>)
 810cbf4:	681b      	ldr	r3, [r3, #0]
 810cbf6:	3b01      	subs	r3, #1
 810cbf8:	4a08      	ldr	r2, [pc, #32]	@ (810cc1c <vPortExitCritical+0x50>)
 810cbfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810cbfc:	4b07      	ldr	r3, [pc, #28]	@ (810cc1c <vPortExitCritical+0x50>)
 810cbfe:	681b      	ldr	r3, [r3, #0]
 810cc00:	2b00      	cmp	r3, #0
 810cc02:	d105      	bne.n	810cc10 <vPortExitCritical+0x44>
 810cc04:	2300      	movs	r3, #0
 810cc06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810cc08:	683b      	ldr	r3, [r7, #0]
 810cc0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810cc0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810cc10:	bf00      	nop
 810cc12:	370c      	adds	r7, #12
 810cc14:	46bd      	mov	sp, r7
 810cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc1a:	4770      	bx	lr
 810cc1c:	10000010 	.word	0x10000010

0810cc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810cc20:	f3ef 8009 	mrs	r0, PSP
 810cc24:	f3bf 8f6f 	isb	sy
 810cc28:	4b15      	ldr	r3, [pc, #84]	@ (810cc80 <pxCurrentTCBConst>)
 810cc2a:	681a      	ldr	r2, [r3, #0]
 810cc2c:	f01e 0f10 	tst.w	lr, #16
 810cc30:	bf08      	it	eq
 810cc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810cc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cc3a:	6010      	str	r0, [r2, #0]
 810cc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810cc40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810cc44:	f380 8811 	msr	BASEPRI, r0
 810cc48:	f3bf 8f4f 	dsb	sy
 810cc4c:	f3bf 8f6f 	isb	sy
 810cc50:	f001 fc92 	bl	810e578 <vTaskSwitchContext>
 810cc54:	f04f 0000 	mov.w	r0, #0
 810cc58:	f380 8811 	msr	BASEPRI, r0
 810cc5c:	bc09      	pop	{r0, r3}
 810cc5e:	6819      	ldr	r1, [r3, #0]
 810cc60:	6808      	ldr	r0, [r1, #0]
 810cc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cc66:	f01e 0f10 	tst.w	lr, #16
 810cc6a:	bf08      	it	eq
 810cc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810cc70:	f380 8809 	msr	PSP, r0
 810cc74:	f3bf 8f6f 	isb	sy
 810cc78:	4770      	bx	lr
 810cc7a:	bf00      	nop
 810cc7c:	f3af 8000 	nop.w

0810cc80 <pxCurrentTCBConst>:
 810cc80:	10004954 	.word	0x10004954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810cc84:	bf00      	nop
 810cc86:	bf00      	nop

0810cc88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810cc88:	b580      	push	{r7, lr}
 810cc8a:	b082      	sub	sp, #8
 810cc8c:	af00      	add	r7, sp, #0
	__asm volatile
 810cc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc92:	f383 8811 	msr	BASEPRI, r3
 810cc96:	f3bf 8f6f 	isb	sy
 810cc9a:	f3bf 8f4f 	dsb	sy
 810cc9e:	607b      	str	r3, [r7, #4]
}
 810cca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810cca2:	f001 fbaf 	bl	810e404 <xTaskIncrementTick>
 810cca6:	4603      	mov	r3, r0
 810cca8:	2b00      	cmp	r3, #0
 810ccaa:	d003      	beq.n	810ccb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ccac:	4b06      	ldr	r3, [pc, #24]	@ (810ccc8 <xPortSysTickHandler+0x40>)
 810ccae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ccb2:	601a      	str	r2, [r3, #0]
 810ccb4:	2300      	movs	r3, #0
 810ccb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ccb8:	683b      	ldr	r3, [r7, #0]
 810ccba:	f383 8811 	msr	BASEPRI, r3
}
 810ccbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810ccc0:	bf00      	nop
 810ccc2:	3708      	adds	r7, #8
 810ccc4:	46bd      	mov	sp, r7
 810ccc6:	bd80      	pop	{r7, pc}
 810ccc8:	e000ed04 	.word	0xe000ed04

0810cccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810cccc:	b480      	push	{r7}
 810ccce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ccd0:	4b0b      	ldr	r3, [pc, #44]	@ (810cd00 <vPortSetupTimerInterrupt+0x34>)
 810ccd2:	2200      	movs	r2, #0
 810ccd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ccd6:	4b0b      	ldr	r3, [pc, #44]	@ (810cd04 <vPortSetupTimerInterrupt+0x38>)
 810ccd8:	2200      	movs	r2, #0
 810ccda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ccdc:	4b0a      	ldr	r3, [pc, #40]	@ (810cd08 <vPortSetupTimerInterrupt+0x3c>)
 810ccde:	681b      	ldr	r3, [r3, #0]
 810cce0:	4a0a      	ldr	r2, [pc, #40]	@ (810cd0c <vPortSetupTimerInterrupt+0x40>)
 810cce2:	fba2 2303 	umull	r2, r3, r2, r3
 810cce6:	099b      	lsrs	r3, r3, #6
 810cce8:	4a09      	ldr	r2, [pc, #36]	@ (810cd10 <vPortSetupTimerInterrupt+0x44>)
 810ccea:	3b01      	subs	r3, #1
 810ccec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ccee:	4b04      	ldr	r3, [pc, #16]	@ (810cd00 <vPortSetupTimerInterrupt+0x34>)
 810ccf0:	2207      	movs	r2, #7
 810ccf2:	601a      	str	r2, [r3, #0]
}
 810ccf4:	bf00      	nop
 810ccf6:	46bd      	mov	sp, r7
 810ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccfc:	4770      	bx	lr
 810ccfe:	bf00      	nop
 810cd00:	e000e010 	.word	0xe000e010
 810cd04:	e000e018 	.word	0xe000e018
 810cd08:	10000004 	.word	0x10000004
 810cd0c:	10624dd3 	.word	0x10624dd3
 810cd10:	e000e014 	.word	0xe000e014

0810cd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810cd14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810cd24 <vPortEnableVFP+0x10>
 810cd18:	6801      	ldr	r1, [r0, #0]
 810cd1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810cd1e:	6001      	str	r1, [r0, #0]
 810cd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810cd22:	bf00      	nop
 810cd24:	e000ed88 	.word	0xe000ed88

0810cd28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810cd28:	b480      	push	{r7}
 810cd2a:	b085      	sub	sp, #20
 810cd2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810cd2e:	f3ef 8305 	mrs	r3, IPSR
 810cd32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810cd34:	68fb      	ldr	r3, [r7, #12]
 810cd36:	2b0f      	cmp	r3, #15
 810cd38:	d915      	bls.n	810cd66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810cd3a:	4a18      	ldr	r2, [pc, #96]	@ (810cd9c <vPortValidateInterruptPriority+0x74>)
 810cd3c:	68fb      	ldr	r3, [r7, #12]
 810cd3e:	4413      	add	r3, r2
 810cd40:	781b      	ldrb	r3, [r3, #0]
 810cd42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810cd44:	4b16      	ldr	r3, [pc, #88]	@ (810cda0 <vPortValidateInterruptPriority+0x78>)
 810cd46:	781b      	ldrb	r3, [r3, #0]
 810cd48:	7afa      	ldrb	r2, [r7, #11]
 810cd4a:	429a      	cmp	r2, r3
 810cd4c:	d20b      	bcs.n	810cd66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810cd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd52:	f383 8811 	msr	BASEPRI, r3
 810cd56:	f3bf 8f6f 	isb	sy
 810cd5a:	f3bf 8f4f 	dsb	sy
 810cd5e:	607b      	str	r3, [r7, #4]
}
 810cd60:	bf00      	nop
 810cd62:	bf00      	nop
 810cd64:	e7fd      	b.n	810cd62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810cd66:	4b0f      	ldr	r3, [pc, #60]	@ (810cda4 <vPortValidateInterruptPriority+0x7c>)
 810cd68:	681b      	ldr	r3, [r3, #0]
 810cd6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810cd6e:	4b0e      	ldr	r3, [pc, #56]	@ (810cda8 <vPortValidateInterruptPriority+0x80>)
 810cd70:	681b      	ldr	r3, [r3, #0]
 810cd72:	429a      	cmp	r2, r3
 810cd74:	d90b      	bls.n	810cd8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810cd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd7a:	f383 8811 	msr	BASEPRI, r3
 810cd7e:	f3bf 8f6f 	isb	sy
 810cd82:	f3bf 8f4f 	dsb	sy
 810cd86:	603b      	str	r3, [r7, #0]
}
 810cd88:	bf00      	nop
 810cd8a:	bf00      	nop
 810cd8c:	e7fd      	b.n	810cd8a <vPortValidateInterruptPriority+0x62>
	}
 810cd8e:	bf00      	nop
 810cd90:	3714      	adds	r7, #20
 810cd92:	46bd      	mov	sp, r7
 810cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd98:	4770      	bx	lr
 810cd9a:	bf00      	nop
 810cd9c:	e000e3f0 	.word	0xe000e3f0
 810cda0:	1000490c 	.word	0x1000490c
 810cda4:	e000ed0c 	.word	0xe000ed0c
 810cda8:	10004910 	.word	0x10004910

0810cdac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810cdac:	b580      	push	{r7, lr}
 810cdae:	b084      	sub	sp, #16
 810cdb0:	af00      	add	r7, sp, #0
 810cdb2:	6078      	str	r0, [r7, #4]
 810cdb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810cdb6:	687b      	ldr	r3, [r7, #4]
 810cdb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810cdba:	68fb      	ldr	r3, [r7, #12]
 810cdbc:	2b00      	cmp	r3, #0
 810cdbe:	d10b      	bne.n	810cdd8 <xQueueGenericReset+0x2c>
	__asm volatile
 810cdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cdc4:	f383 8811 	msr	BASEPRI, r3
 810cdc8:	f3bf 8f6f 	isb	sy
 810cdcc:	f3bf 8f4f 	dsb	sy
 810cdd0:	60bb      	str	r3, [r7, #8]
}
 810cdd2:	bf00      	nop
 810cdd4:	bf00      	nop
 810cdd6:	e7fd      	b.n	810cdd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810cdd8:	f7ff fec6 	bl	810cb68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cddc:	68fb      	ldr	r3, [r7, #12]
 810cdde:	681a      	ldr	r2, [r3, #0]
 810cde0:	68fb      	ldr	r3, [r7, #12]
 810cde2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cde4:	68f9      	ldr	r1, [r7, #12]
 810cde6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810cde8:	fb01 f303 	mul.w	r3, r1, r3
 810cdec:	441a      	add	r2, r3
 810cdee:	68fb      	ldr	r3, [r7, #12]
 810cdf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810cdf2:	68fb      	ldr	r3, [r7, #12]
 810cdf4:	2200      	movs	r2, #0
 810cdf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810cdf8:	68fb      	ldr	r3, [r7, #12]
 810cdfa:	681a      	ldr	r2, [r3, #0]
 810cdfc:	68fb      	ldr	r3, [r7, #12]
 810cdfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ce00:	68fb      	ldr	r3, [r7, #12]
 810ce02:	681a      	ldr	r2, [r3, #0]
 810ce04:	68fb      	ldr	r3, [r7, #12]
 810ce06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ce08:	3b01      	subs	r3, #1
 810ce0a:	68f9      	ldr	r1, [r7, #12]
 810ce0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ce0e:	fb01 f303 	mul.w	r3, r1, r3
 810ce12:	441a      	add	r2, r3
 810ce14:	68fb      	ldr	r3, [r7, #12]
 810ce16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810ce18:	68fb      	ldr	r3, [r7, #12]
 810ce1a:	22ff      	movs	r2, #255	@ 0xff
 810ce1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810ce20:	68fb      	ldr	r3, [r7, #12]
 810ce22:	22ff      	movs	r2, #255	@ 0xff
 810ce24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810ce28:	683b      	ldr	r3, [r7, #0]
 810ce2a:	2b00      	cmp	r3, #0
 810ce2c:	d114      	bne.n	810ce58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ce2e:	68fb      	ldr	r3, [r7, #12]
 810ce30:	691b      	ldr	r3, [r3, #16]
 810ce32:	2b00      	cmp	r3, #0
 810ce34:	d01a      	beq.n	810ce6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ce36:	68fb      	ldr	r3, [r7, #12]
 810ce38:	3310      	adds	r3, #16
 810ce3a:	4618      	mov	r0, r3
 810ce3c:	f001 fc4c 	bl	810e6d8 <xTaskRemoveFromEventList>
 810ce40:	4603      	mov	r3, r0
 810ce42:	2b00      	cmp	r3, #0
 810ce44:	d012      	beq.n	810ce6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810ce46:	4b0d      	ldr	r3, [pc, #52]	@ (810ce7c <xQueueGenericReset+0xd0>)
 810ce48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ce4c:	601a      	str	r2, [r3, #0]
 810ce4e:	f3bf 8f4f 	dsb	sy
 810ce52:	f3bf 8f6f 	isb	sy
 810ce56:	e009      	b.n	810ce6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ce58:	68fb      	ldr	r3, [r7, #12]
 810ce5a:	3310      	adds	r3, #16
 810ce5c:	4618      	mov	r0, r3
 810ce5e:	f7ff fca1 	bl	810c7a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810ce62:	68fb      	ldr	r3, [r7, #12]
 810ce64:	3324      	adds	r3, #36	@ 0x24
 810ce66:	4618      	mov	r0, r3
 810ce68:	f7ff fc9c 	bl	810c7a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810ce6c:	f7ff feae 	bl	810cbcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810ce70:	2301      	movs	r3, #1
}
 810ce72:	4618      	mov	r0, r3
 810ce74:	3710      	adds	r7, #16
 810ce76:	46bd      	mov	sp, r7
 810ce78:	bd80      	pop	{r7, pc}
 810ce7a:	bf00      	nop
 810ce7c:	e000ed04 	.word	0xe000ed04

0810ce80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810ce80:	b580      	push	{r7, lr}
 810ce82:	b08e      	sub	sp, #56	@ 0x38
 810ce84:	af02      	add	r7, sp, #8
 810ce86:	60f8      	str	r0, [r7, #12]
 810ce88:	60b9      	str	r1, [r7, #8]
 810ce8a:	607a      	str	r2, [r7, #4]
 810ce8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ce8e:	68fb      	ldr	r3, [r7, #12]
 810ce90:	2b00      	cmp	r3, #0
 810ce92:	d10b      	bne.n	810ceac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ce98:	f383 8811 	msr	BASEPRI, r3
 810ce9c:	f3bf 8f6f 	isb	sy
 810cea0:	f3bf 8f4f 	dsb	sy
 810cea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810cea6:	bf00      	nop
 810cea8:	bf00      	nop
 810ceaa:	e7fd      	b.n	810cea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810ceac:	683b      	ldr	r3, [r7, #0]
 810ceae:	2b00      	cmp	r3, #0
 810ceb0:	d10b      	bne.n	810ceca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810ceb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ceb6:	f383 8811 	msr	BASEPRI, r3
 810ceba:	f3bf 8f6f 	isb	sy
 810cebe:	f3bf 8f4f 	dsb	sy
 810cec2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810cec4:	bf00      	nop
 810cec6:	bf00      	nop
 810cec8:	e7fd      	b.n	810cec6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ceca:	687b      	ldr	r3, [r7, #4]
 810cecc:	2b00      	cmp	r3, #0
 810cece:	d002      	beq.n	810ced6 <xQueueGenericCreateStatic+0x56>
 810ced0:	68bb      	ldr	r3, [r7, #8]
 810ced2:	2b00      	cmp	r3, #0
 810ced4:	d001      	beq.n	810ceda <xQueueGenericCreateStatic+0x5a>
 810ced6:	2301      	movs	r3, #1
 810ced8:	e000      	b.n	810cedc <xQueueGenericCreateStatic+0x5c>
 810ceda:	2300      	movs	r3, #0
 810cedc:	2b00      	cmp	r3, #0
 810cede:	d10b      	bne.n	810cef8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810cee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cee4:	f383 8811 	msr	BASEPRI, r3
 810cee8:	f3bf 8f6f 	isb	sy
 810ceec:	f3bf 8f4f 	dsb	sy
 810cef0:	623b      	str	r3, [r7, #32]
}
 810cef2:	bf00      	nop
 810cef4:	bf00      	nop
 810cef6:	e7fd      	b.n	810cef4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810cef8:	687b      	ldr	r3, [r7, #4]
 810cefa:	2b00      	cmp	r3, #0
 810cefc:	d102      	bne.n	810cf04 <xQueueGenericCreateStatic+0x84>
 810cefe:	68bb      	ldr	r3, [r7, #8]
 810cf00:	2b00      	cmp	r3, #0
 810cf02:	d101      	bne.n	810cf08 <xQueueGenericCreateStatic+0x88>
 810cf04:	2301      	movs	r3, #1
 810cf06:	e000      	b.n	810cf0a <xQueueGenericCreateStatic+0x8a>
 810cf08:	2300      	movs	r3, #0
 810cf0a:	2b00      	cmp	r3, #0
 810cf0c:	d10b      	bne.n	810cf26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cf12:	f383 8811 	msr	BASEPRI, r3
 810cf16:	f3bf 8f6f 	isb	sy
 810cf1a:	f3bf 8f4f 	dsb	sy
 810cf1e:	61fb      	str	r3, [r7, #28]
}
 810cf20:	bf00      	nop
 810cf22:	bf00      	nop
 810cf24:	e7fd      	b.n	810cf22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810cf26:	2350      	movs	r3, #80	@ 0x50
 810cf28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810cf2a:	697b      	ldr	r3, [r7, #20]
 810cf2c:	2b50      	cmp	r3, #80	@ 0x50
 810cf2e:	d00b      	beq.n	810cf48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810cf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cf34:	f383 8811 	msr	BASEPRI, r3
 810cf38:	f3bf 8f6f 	isb	sy
 810cf3c:	f3bf 8f4f 	dsb	sy
 810cf40:	61bb      	str	r3, [r7, #24]
}
 810cf42:	bf00      	nop
 810cf44:	bf00      	nop
 810cf46:	e7fd      	b.n	810cf44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810cf48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810cf4a:	683b      	ldr	r3, [r7, #0]
 810cf4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810cf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cf50:	2b00      	cmp	r3, #0
 810cf52:	d00d      	beq.n	810cf70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cf56:	2201      	movs	r2, #1
 810cf58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cf5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810cf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cf62:	9300      	str	r3, [sp, #0]
 810cf64:	4613      	mov	r3, r2
 810cf66:	687a      	ldr	r2, [r7, #4]
 810cf68:	68b9      	ldr	r1, [r7, #8]
 810cf6a:	68f8      	ldr	r0, [r7, #12]
 810cf6c:	f000 f840 	bl	810cff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810cf72:	4618      	mov	r0, r3
 810cf74:	3730      	adds	r7, #48	@ 0x30
 810cf76:	46bd      	mov	sp, r7
 810cf78:	bd80      	pop	{r7, pc}

0810cf7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810cf7a:	b580      	push	{r7, lr}
 810cf7c:	b08a      	sub	sp, #40	@ 0x28
 810cf7e:	af02      	add	r7, sp, #8
 810cf80:	60f8      	str	r0, [r7, #12]
 810cf82:	60b9      	str	r1, [r7, #8]
 810cf84:	4613      	mov	r3, r2
 810cf86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810cf88:	68fb      	ldr	r3, [r7, #12]
 810cf8a:	2b00      	cmp	r3, #0
 810cf8c:	d10b      	bne.n	810cfa6 <xQueueGenericCreate+0x2c>
	__asm volatile
 810cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cf92:	f383 8811 	msr	BASEPRI, r3
 810cf96:	f3bf 8f6f 	isb	sy
 810cf9a:	f3bf 8f4f 	dsb	sy
 810cf9e:	613b      	str	r3, [r7, #16]
}
 810cfa0:	bf00      	nop
 810cfa2:	bf00      	nop
 810cfa4:	e7fd      	b.n	810cfa2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810cfa6:	68fb      	ldr	r3, [r7, #12]
 810cfa8:	68ba      	ldr	r2, [r7, #8]
 810cfaa:	fb02 f303 	mul.w	r3, r2, r3
 810cfae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810cfb0:	69fb      	ldr	r3, [r7, #28]
 810cfb2:	3350      	adds	r3, #80	@ 0x50
 810cfb4:	4618      	mov	r0, r3
 810cfb6:	f7ff fa07 	bl	810c3c8 <pvPortMalloc>
 810cfba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810cfbc:	69bb      	ldr	r3, [r7, #24]
 810cfbe:	2b00      	cmp	r3, #0
 810cfc0:	d011      	beq.n	810cfe6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810cfc2:	69bb      	ldr	r3, [r7, #24]
 810cfc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cfc6:	697b      	ldr	r3, [r7, #20]
 810cfc8:	3350      	adds	r3, #80	@ 0x50
 810cfca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810cfcc:	69bb      	ldr	r3, [r7, #24]
 810cfce:	2200      	movs	r2, #0
 810cfd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cfd4:	79fa      	ldrb	r2, [r7, #7]
 810cfd6:	69bb      	ldr	r3, [r7, #24]
 810cfd8:	9300      	str	r3, [sp, #0]
 810cfda:	4613      	mov	r3, r2
 810cfdc:	697a      	ldr	r2, [r7, #20]
 810cfde:	68b9      	ldr	r1, [r7, #8]
 810cfe0:	68f8      	ldr	r0, [r7, #12]
 810cfe2:	f000 f805 	bl	810cff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cfe6:	69bb      	ldr	r3, [r7, #24]
	}
 810cfe8:	4618      	mov	r0, r3
 810cfea:	3720      	adds	r7, #32
 810cfec:	46bd      	mov	sp, r7
 810cfee:	bd80      	pop	{r7, pc}

0810cff0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810cff0:	b580      	push	{r7, lr}
 810cff2:	b084      	sub	sp, #16
 810cff4:	af00      	add	r7, sp, #0
 810cff6:	60f8      	str	r0, [r7, #12]
 810cff8:	60b9      	str	r1, [r7, #8]
 810cffa:	607a      	str	r2, [r7, #4]
 810cffc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810cffe:	68bb      	ldr	r3, [r7, #8]
 810d000:	2b00      	cmp	r3, #0
 810d002:	d103      	bne.n	810d00c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810d004:	69bb      	ldr	r3, [r7, #24]
 810d006:	69ba      	ldr	r2, [r7, #24]
 810d008:	601a      	str	r2, [r3, #0]
 810d00a:	e002      	b.n	810d012 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810d00c:	69bb      	ldr	r3, [r7, #24]
 810d00e:	687a      	ldr	r2, [r7, #4]
 810d010:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810d012:	69bb      	ldr	r3, [r7, #24]
 810d014:	68fa      	ldr	r2, [r7, #12]
 810d016:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810d018:	69bb      	ldr	r3, [r7, #24]
 810d01a:	68ba      	ldr	r2, [r7, #8]
 810d01c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810d01e:	2101      	movs	r1, #1
 810d020:	69b8      	ldr	r0, [r7, #24]
 810d022:	f7ff fec3 	bl	810cdac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810d026:	69bb      	ldr	r3, [r7, #24]
 810d028:	78fa      	ldrb	r2, [r7, #3]
 810d02a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810d02e:	bf00      	nop
 810d030:	3710      	adds	r7, #16
 810d032:	46bd      	mov	sp, r7
 810d034:	bd80      	pop	{r7, pc}

0810d036 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810d036:	b580      	push	{r7, lr}
 810d038:	b08a      	sub	sp, #40	@ 0x28
 810d03a:	af02      	add	r7, sp, #8
 810d03c:	60f8      	str	r0, [r7, #12]
 810d03e:	60b9      	str	r1, [r7, #8]
 810d040:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d042:	68fb      	ldr	r3, [r7, #12]
 810d044:	2b00      	cmp	r3, #0
 810d046:	d10b      	bne.n	810d060 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810d048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d04c:	f383 8811 	msr	BASEPRI, r3
 810d050:	f3bf 8f6f 	isb	sy
 810d054:	f3bf 8f4f 	dsb	sy
 810d058:	61bb      	str	r3, [r7, #24]
}
 810d05a:	bf00      	nop
 810d05c:	bf00      	nop
 810d05e:	e7fd      	b.n	810d05c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d060:	68ba      	ldr	r2, [r7, #8]
 810d062:	68fb      	ldr	r3, [r7, #12]
 810d064:	429a      	cmp	r2, r3
 810d066:	d90b      	bls.n	810d080 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810d068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d06c:	f383 8811 	msr	BASEPRI, r3
 810d070:	f3bf 8f6f 	isb	sy
 810d074:	f3bf 8f4f 	dsb	sy
 810d078:	617b      	str	r3, [r7, #20]
}
 810d07a:	bf00      	nop
 810d07c:	bf00      	nop
 810d07e:	e7fd      	b.n	810d07c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d080:	2302      	movs	r3, #2
 810d082:	9300      	str	r3, [sp, #0]
 810d084:	687b      	ldr	r3, [r7, #4]
 810d086:	2200      	movs	r2, #0
 810d088:	2100      	movs	r1, #0
 810d08a:	68f8      	ldr	r0, [r7, #12]
 810d08c:	f7ff fef8 	bl	810ce80 <xQueueGenericCreateStatic>
 810d090:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810d092:	69fb      	ldr	r3, [r7, #28]
 810d094:	2b00      	cmp	r3, #0
 810d096:	d002      	beq.n	810d09e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d098:	69fb      	ldr	r3, [r7, #28]
 810d09a:	68ba      	ldr	r2, [r7, #8]
 810d09c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d09e:	69fb      	ldr	r3, [r7, #28]
	}
 810d0a0:	4618      	mov	r0, r3
 810d0a2:	3720      	adds	r7, #32
 810d0a4:	46bd      	mov	sp, r7
 810d0a6:	bd80      	pop	{r7, pc}

0810d0a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810d0a8:	b580      	push	{r7, lr}
 810d0aa:	b086      	sub	sp, #24
 810d0ac:	af00      	add	r7, sp, #0
 810d0ae:	6078      	str	r0, [r7, #4]
 810d0b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d0b2:	687b      	ldr	r3, [r7, #4]
 810d0b4:	2b00      	cmp	r3, #0
 810d0b6:	d10b      	bne.n	810d0d0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 810d0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0bc:	f383 8811 	msr	BASEPRI, r3
 810d0c0:	f3bf 8f6f 	isb	sy
 810d0c4:	f3bf 8f4f 	dsb	sy
 810d0c8:	613b      	str	r3, [r7, #16]
}
 810d0ca:	bf00      	nop
 810d0cc:	bf00      	nop
 810d0ce:	e7fd      	b.n	810d0cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d0d0:	683a      	ldr	r2, [r7, #0]
 810d0d2:	687b      	ldr	r3, [r7, #4]
 810d0d4:	429a      	cmp	r2, r3
 810d0d6:	d90b      	bls.n	810d0f0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 810d0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0dc:	f383 8811 	msr	BASEPRI, r3
 810d0e0:	f3bf 8f6f 	isb	sy
 810d0e4:	f3bf 8f4f 	dsb	sy
 810d0e8:	60fb      	str	r3, [r7, #12]
}
 810d0ea:	bf00      	nop
 810d0ec:	bf00      	nop
 810d0ee:	e7fd      	b.n	810d0ec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d0f0:	2202      	movs	r2, #2
 810d0f2:	2100      	movs	r1, #0
 810d0f4:	6878      	ldr	r0, [r7, #4]
 810d0f6:	f7ff ff40 	bl	810cf7a <xQueueGenericCreate>
 810d0fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810d0fc:	697b      	ldr	r3, [r7, #20]
 810d0fe:	2b00      	cmp	r3, #0
 810d100:	d002      	beq.n	810d108 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d102:	697b      	ldr	r3, [r7, #20]
 810d104:	683a      	ldr	r2, [r7, #0]
 810d106:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d108:	697b      	ldr	r3, [r7, #20]
	}
 810d10a:	4618      	mov	r0, r3
 810d10c:	3718      	adds	r7, #24
 810d10e:	46bd      	mov	sp, r7
 810d110:	bd80      	pop	{r7, pc}
	...

0810d114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810d114:	b580      	push	{r7, lr}
 810d116:	b08e      	sub	sp, #56	@ 0x38
 810d118:	af00      	add	r7, sp, #0
 810d11a:	60f8      	str	r0, [r7, #12]
 810d11c:	60b9      	str	r1, [r7, #8]
 810d11e:	607a      	str	r2, [r7, #4]
 810d120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810d122:	2300      	movs	r3, #0
 810d124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d126:	68fb      	ldr	r3, [r7, #12]
 810d128:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810d12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d12c:	2b00      	cmp	r3, #0
 810d12e:	d10b      	bne.n	810d148 <xQueueGenericSend+0x34>
	__asm volatile
 810d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d134:	f383 8811 	msr	BASEPRI, r3
 810d138:	f3bf 8f6f 	isb	sy
 810d13c:	f3bf 8f4f 	dsb	sy
 810d140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d142:	bf00      	nop
 810d144:	bf00      	nop
 810d146:	e7fd      	b.n	810d144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d148:	68bb      	ldr	r3, [r7, #8]
 810d14a:	2b00      	cmp	r3, #0
 810d14c:	d103      	bne.n	810d156 <xQueueGenericSend+0x42>
 810d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d152:	2b00      	cmp	r3, #0
 810d154:	d101      	bne.n	810d15a <xQueueGenericSend+0x46>
 810d156:	2301      	movs	r3, #1
 810d158:	e000      	b.n	810d15c <xQueueGenericSend+0x48>
 810d15a:	2300      	movs	r3, #0
 810d15c:	2b00      	cmp	r3, #0
 810d15e:	d10b      	bne.n	810d178 <xQueueGenericSend+0x64>
	__asm volatile
 810d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d164:	f383 8811 	msr	BASEPRI, r3
 810d168:	f3bf 8f6f 	isb	sy
 810d16c:	f3bf 8f4f 	dsb	sy
 810d170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810d172:	bf00      	nop
 810d174:	bf00      	nop
 810d176:	e7fd      	b.n	810d174 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810d178:	683b      	ldr	r3, [r7, #0]
 810d17a:	2b02      	cmp	r3, #2
 810d17c:	d103      	bne.n	810d186 <xQueueGenericSend+0x72>
 810d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d182:	2b01      	cmp	r3, #1
 810d184:	d101      	bne.n	810d18a <xQueueGenericSend+0x76>
 810d186:	2301      	movs	r3, #1
 810d188:	e000      	b.n	810d18c <xQueueGenericSend+0x78>
 810d18a:	2300      	movs	r3, #0
 810d18c:	2b00      	cmp	r3, #0
 810d18e:	d10b      	bne.n	810d1a8 <xQueueGenericSend+0x94>
	__asm volatile
 810d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d194:	f383 8811 	msr	BASEPRI, r3
 810d198:	f3bf 8f6f 	isb	sy
 810d19c:	f3bf 8f4f 	dsb	sy
 810d1a0:	623b      	str	r3, [r7, #32]
}
 810d1a2:	bf00      	nop
 810d1a4:	bf00      	nop
 810d1a6:	e7fd      	b.n	810d1a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d1a8:	f001 fc56 	bl	810ea58 <xTaskGetSchedulerState>
 810d1ac:	4603      	mov	r3, r0
 810d1ae:	2b00      	cmp	r3, #0
 810d1b0:	d102      	bne.n	810d1b8 <xQueueGenericSend+0xa4>
 810d1b2:	687b      	ldr	r3, [r7, #4]
 810d1b4:	2b00      	cmp	r3, #0
 810d1b6:	d101      	bne.n	810d1bc <xQueueGenericSend+0xa8>
 810d1b8:	2301      	movs	r3, #1
 810d1ba:	e000      	b.n	810d1be <xQueueGenericSend+0xaa>
 810d1bc:	2300      	movs	r3, #0
 810d1be:	2b00      	cmp	r3, #0
 810d1c0:	d10b      	bne.n	810d1da <xQueueGenericSend+0xc6>
	__asm volatile
 810d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d1c6:	f383 8811 	msr	BASEPRI, r3
 810d1ca:	f3bf 8f6f 	isb	sy
 810d1ce:	f3bf 8f4f 	dsb	sy
 810d1d2:	61fb      	str	r3, [r7, #28]
}
 810d1d4:	bf00      	nop
 810d1d6:	bf00      	nop
 810d1d8:	e7fd      	b.n	810d1d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d1da:	f7ff fcc5 	bl	810cb68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810d1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d1e6:	429a      	cmp	r2, r3
 810d1e8:	d302      	bcc.n	810d1f0 <xQueueGenericSend+0xdc>
 810d1ea:	683b      	ldr	r3, [r7, #0]
 810d1ec:	2b02      	cmp	r3, #2
 810d1ee:	d129      	bne.n	810d244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810d1f0:	683a      	ldr	r2, [r7, #0]
 810d1f2:	68b9      	ldr	r1, [r7, #8]
 810d1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d1f6:	f000 fc6d 	bl	810dad4 <prvCopyDataToQueue>
 810d1fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d200:	2b00      	cmp	r3, #0
 810d202:	d010      	beq.n	810d226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d206:	3324      	adds	r3, #36	@ 0x24
 810d208:	4618      	mov	r0, r3
 810d20a:	f001 fa65 	bl	810e6d8 <xTaskRemoveFromEventList>
 810d20e:	4603      	mov	r3, r0
 810d210:	2b00      	cmp	r3, #0
 810d212:	d013      	beq.n	810d23c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810d214:	4b3f      	ldr	r3, [pc, #252]	@ (810d314 <xQueueGenericSend+0x200>)
 810d216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d21a:	601a      	str	r2, [r3, #0]
 810d21c:	f3bf 8f4f 	dsb	sy
 810d220:	f3bf 8f6f 	isb	sy
 810d224:	e00a      	b.n	810d23c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d228:	2b00      	cmp	r3, #0
 810d22a:	d007      	beq.n	810d23c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810d22c:	4b39      	ldr	r3, [pc, #228]	@ (810d314 <xQueueGenericSend+0x200>)
 810d22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d232:	601a      	str	r2, [r3, #0]
 810d234:	f3bf 8f4f 	dsb	sy
 810d238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810d23c:	f7ff fcc6 	bl	810cbcc <vPortExitCritical>
				return pdPASS;
 810d240:	2301      	movs	r3, #1
 810d242:	e063      	b.n	810d30c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d244:	687b      	ldr	r3, [r7, #4]
 810d246:	2b00      	cmp	r3, #0
 810d248:	d103      	bne.n	810d252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d24a:	f7ff fcbf 	bl	810cbcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810d24e:	2300      	movs	r3, #0
 810d250:	e05c      	b.n	810d30c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d254:	2b00      	cmp	r3, #0
 810d256:	d106      	bne.n	810d266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d258:	f107 0314 	add.w	r3, r7, #20
 810d25c:	4618      	mov	r0, r3
 810d25e:	f001 fa9f 	bl	810e7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d262:	2301      	movs	r3, #1
 810d264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d266:	f7ff fcb1 	bl	810cbcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d26a:	f001 f80f 	bl	810e28c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d26e:	f7ff fc7b 	bl	810cb68 <vPortEnterCritical>
 810d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d278:	b25b      	sxtb	r3, r3
 810d27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d27e:	d103      	bne.n	810d288 <xQueueGenericSend+0x174>
 810d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d282:	2200      	movs	r2, #0
 810d284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d28a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d28e:	b25b      	sxtb	r3, r3
 810d290:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d294:	d103      	bne.n	810d29e <xQueueGenericSend+0x18a>
 810d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d298:	2200      	movs	r2, #0
 810d29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d29e:	f7ff fc95 	bl	810cbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d2a2:	1d3a      	adds	r2, r7, #4
 810d2a4:	f107 0314 	add.w	r3, r7, #20
 810d2a8:	4611      	mov	r1, r2
 810d2aa:	4618      	mov	r0, r3
 810d2ac:	f001 fa8e 	bl	810e7cc <xTaskCheckForTimeOut>
 810d2b0:	4603      	mov	r3, r0
 810d2b2:	2b00      	cmp	r3, #0
 810d2b4:	d124      	bne.n	810d300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810d2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d2b8:	f000 fd04 	bl	810dcc4 <prvIsQueueFull>
 810d2bc:	4603      	mov	r3, r0
 810d2be:	2b00      	cmp	r3, #0
 810d2c0:	d018      	beq.n	810d2f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810d2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d2c4:	3310      	adds	r3, #16
 810d2c6:	687a      	ldr	r2, [r7, #4]
 810d2c8:	4611      	mov	r1, r2
 810d2ca:	4618      	mov	r0, r3
 810d2cc:	f001 f9b2 	bl	810e634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810d2d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d2d2:	f000 fc8f 	bl	810dbf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810d2d6:	f000 ffe7 	bl	810e2a8 <xTaskResumeAll>
 810d2da:	4603      	mov	r3, r0
 810d2dc:	2b00      	cmp	r3, #0
 810d2de:	f47f af7c 	bne.w	810d1da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810d2e2:	4b0c      	ldr	r3, [pc, #48]	@ (810d314 <xQueueGenericSend+0x200>)
 810d2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d2e8:	601a      	str	r2, [r3, #0]
 810d2ea:	f3bf 8f4f 	dsb	sy
 810d2ee:	f3bf 8f6f 	isb	sy
 810d2f2:	e772      	b.n	810d1da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810d2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d2f6:	f000 fc7d 	bl	810dbf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d2fa:	f000 ffd5 	bl	810e2a8 <xTaskResumeAll>
 810d2fe:	e76c      	b.n	810d1da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810d300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d302:	f000 fc77 	bl	810dbf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d306:	f000 ffcf 	bl	810e2a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810d30a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810d30c:	4618      	mov	r0, r3
 810d30e:	3738      	adds	r7, #56	@ 0x38
 810d310:	46bd      	mov	sp, r7
 810d312:	bd80      	pop	{r7, pc}
 810d314:	e000ed04 	.word	0xe000ed04

0810d318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810d318:	b580      	push	{r7, lr}
 810d31a:	b090      	sub	sp, #64	@ 0x40
 810d31c:	af00      	add	r7, sp, #0
 810d31e:	60f8      	str	r0, [r7, #12]
 810d320:	60b9      	str	r1, [r7, #8]
 810d322:	607a      	str	r2, [r7, #4]
 810d324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d326:	68fb      	ldr	r3, [r7, #12]
 810d328:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d32c:	2b00      	cmp	r3, #0
 810d32e:	d10b      	bne.n	810d348 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d334:	f383 8811 	msr	BASEPRI, r3
 810d338:	f3bf 8f6f 	isb	sy
 810d33c:	f3bf 8f4f 	dsb	sy
 810d340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d342:	bf00      	nop
 810d344:	bf00      	nop
 810d346:	e7fd      	b.n	810d344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d348:	68bb      	ldr	r3, [r7, #8]
 810d34a:	2b00      	cmp	r3, #0
 810d34c:	d103      	bne.n	810d356 <xQueueGenericSendFromISR+0x3e>
 810d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d352:	2b00      	cmp	r3, #0
 810d354:	d101      	bne.n	810d35a <xQueueGenericSendFromISR+0x42>
 810d356:	2301      	movs	r3, #1
 810d358:	e000      	b.n	810d35c <xQueueGenericSendFromISR+0x44>
 810d35a:	2300      	movs	r3, #0
 810d35c:	2b00      	cmp	r3, #0
 810d35e:	d10b      	bne.n	810d378 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810d360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d364:	f383 8811 	msr	BASEPRI, r3
 810d368:	f3bf 8f6f 	isb	sy
 810d36c:	f3bf 8f4f 	dsb	sy
 810d370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810d372:	bf00      	nop
 810d374:	bf00      	nop
 810d376:	e7fd      	b.n	810d374 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810d378:	683b      	ldr	r3, [r7, #0]
 810d37a:	2b02      	cmp	r3, #2
 810d37c:	d103      	bne.n	810d386 <xQueueGenericSendFromISR+0x6e>
 810d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d382:	2b01      	cmp	r3, #1
 810d384:	d101      	bne.n	810d38a <xQueueGenericSendFromISR+0x72>
 810d386:	2301      	movs	r3, #1
 810d388:	e000      	b.n	810d38c <xQueueGenericSendFromISR+0x74>
 810d38a:	2300      	movs	r3, #0
 810d38c:	2b00      	cmp	r3, #0
 810d38e:	d10b      	bne.n	810d3a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810d390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d394:	f383 8811 	msr	BASEPRI, r3
 810d398:	f3bf 8f6f 	isb	sy
 810d39c:	f3bf 8f4f 	dsb	sy
 810d3a0:	623b      	str	r3, [r7, #32]
}
 810d3a2:	bf00      	nop
 810d3a4:	bf00      	nop
 810d3a6:	e7fd      	b.n	810d3a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d3a8:	f7ff fcbe 	bl	810cd28 <vPortValidateInterruptPriority>
	__asm volatile
 810d3ac:	f3ef 8211 	mrs	r2, BASEPRI
 810d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3b4:	f383 8811 	msr	BASEPRI, r3
 810d3b8:	f3bf 8f6f 	isb	sy
 810d3bc:	f3bf 8f4f 	dsb	sy
 810d3c0:	61fa      	str	r2, [r7, #28]
 810d3c2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810d3c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d3c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810d3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d3d0:	429a      	cmp	r2, r3
 810d3d2:	d302      	bcc.n	810d3da <xQueueGenericSendFromISR+0xc2>
 810d3d4:	683b      	ldr	r3, [r7, #0]
 810d3d6:	2b02      	cmp	r3, #2
 810d3d8:	d12f      	bne.n	810d43a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d3e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810d3ea:	683a      	ldr	r2, [r7, #0]
 810d3ec:	68b9      	ldr	r1, [r7, #8]
 810d3ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810d3f0:	f000 fb70 	bl	810dad4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d3f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3fc:	d112      	bne.n	810d424 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d402:	2b00      	cmp	r3, #0
 810d404:	d016      	beq.n	810d434 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d408:	3324      	adds	r3, #36	@ 0x24
 810d40a:	4618      	mov	r0, r3
 810d40c:	f001 f964 	bl	810e6d8 <xTaskRemoveFromEventList>
 810d410:	4603      	mov	r3, r0
 810d412:	2b00      	cmp	r3, #0
 810d414:	d00e      	beq.n	810d434 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	2b00      	cmp	r3, #0
 810d41a:	d00b      	beq.n	810d434 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d41c:	687b      	ldr	r3, [r7, #4]
 810d41e:	2201      	movs	r2, #1
 810d420:	601a      	str	r2, [r3, #0]
 810d422:	e007      	b.n	810d434 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810d428:	3301      	adds	r3, #1
 810d42a:	b2db      	uxtb	r3, r3
 810d42c:	b25a      	sxtb	r2, r3
 810d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810d434:	2301      	movs	r3, #1
 810d436:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810d438:	e001      	b.n	810d43e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d43a:	2300      	movs	r3, #0
 810d43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810d43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d440:	617b      	str	r3, [r7, #20]
	__asm volatile
 810d442:	697b      	ldr	r3, [r7, #20]
 810d444:	f383 8811 	msr	BASEPRI, r3
}
 810d448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810d44c:	4618      	mov	r0, r3
 810d44e:	3740      	adds	r7, #64	@ 0x40
 810d450:	46bd      	mov	sp, r7
 810d452:	bd80      	pop	{r7, pc}

0810d454 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d454:	b580      	push	{r7, lr}
 810d456:	b08e      	sub	sp, #56	@ 0x38
 810d458:	af00      	add	r7, sp, #0
 810d45a:	6078      	str	r0, [r7, #4]
 810d45c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d45e:	687b      	ldr	r3, [r7, #4]
 810d460:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810d462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d464:	2b00      	cmp	r3, #0
 810d466:	d10b      	bne.n	810d480 <xQueueGiveFromISR+0x2c>
	__asm volatile
 810d468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d46c:	f383 8811 	msr	BASEPRI, r3
 810d470:	f3bf 8f6f 	isb	sy
 810d474:	f3bf 8f4f 	dsb	sy
 810d478:	623b      	str	r3, [r7, #32]
}
 810d47a:	bf00      	nop
 810d47c:	bf00      	nop
 810d47e:	e7fd      	b.n	810d47c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d484:	2b00      	cmp	r3, #0
 810d486:	d00b      	beq.n	810d4a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 810d488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d48c:	f383 8811 	msr	BASEPRI, r3
 810d490:	f3bf 8f6f 	isb	sy
 810d494:	f3bf 8f4f 	dsb	sy
 810d498:	61fb      	str	r3, [r7, #28]
}
 810d49a:	bf00      	nop
 810d49c:	bf00      	nop
 810d49e:	e7fd      	b.n	810d49c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810d4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4a2:	681b      	ldr	r3, [r3, #0]
 810d4a4:	2b00      	cmp	r3, #0
 810d4a6:	d103      	bne.n	810d4b0 <xQueueGiveFromISR+0x5c>
 810d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4aa:	689b      	ldr	r3, [r3, #8]
 810d4ac:	2b00      	cmp	r3, #0
 810d4ae:	d101      	bne.n	810d4b4 <xQueueGiveFromISR+0x60>
 810d4b0:	2301      	movs	r3, #1
 810d4b2:	e000      	b.n	810d4b6 <xQueueGiveFromISR+0x62>
 810d4b4:	2300      	movs	r3, #0
 810d4b6:	2b00      	cmp	r3, #0
 810d4b8:	d10b      	bne.n	810d4d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810d4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4be:	f383 8811 	msr	BASEPRI, r3
 810d4c2:	f3bf 8f6f 	isb	sy
 810d4c6:	f3bf 8f4f 	dsb	sy
 810d4ca:	61bb      	str	r3, [r7, #24]
}
 810d4cc:	bf00      	nop
 810d4ce:	bf00      	nop
 810d4d0:	e7fd      	b.n	810d4ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d4d2:	f7ff fc29 	bl	810cd28 <vPortValidateInterruptPriority>
	__asm volatile
 810d4d6:	f3ef 8211 	mrs	r2, BASEPRI
 810d4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4de:	f383 8811 	msr	BASEPRI, r3
 810d4e2:	f3bf 8f6f 	isb	sy
 810d4e6:	f3bf 8f4f 	dsb	sy
 810d4ea:	617a      	str	r2, [r7, #20]
 810d4ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810d4ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d4f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810d4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d4fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d4fe:	429a      	cmp	r2, r3
 810d500:	d22b      	bcs.n	810d55a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d50e:	1c5a      	adds	r2, r3, #1
 810d510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d512:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d514:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810d518:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d51c:	d112      	bne.n	810d544 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d522:	2b00      	cmp	r3, #0
 810d524:	d016      	beq.n	810d554 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d528:	3324      	adds	r3, #36	@ 0x24
 810d52a:	4618      	mov	r0, r3
 810d52c:	f001 f8d4 	bl	810e6d8 <xTaskRemoveFromEventList>
 810d530:	4603      	mov	r3, r0
 810d532:	2b00      	cmp	r3, #0
 810d534:	d00e      	beq.n	810d554 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d536:	683b      	ldr	r3, [r7, #0]
 810d538:	2b00      	cmp	r3, #0
 810d53a:	d00b      	beq.n	810d554 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d53c:	683b      	ldr	r3, [r7, #0]
 810d53e:	2201      	movs	r2, #1
 810d540:	601a      	str	r2, [r3, #0]
 810d542:	e007      	b.n	810d554 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810d548:	3301      	adds	r3, #1
 810d54a:	b2db      	uxtb	r3, r3
 810d54c:	b25a      	sxtb	r2, r3
 810d54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810d554:	2301      	movs	r3, #1
 810d556:	637b      	str	r3, [r7, #52]	@ 0x34
 810d558:	e001      	b.n	810d55e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d55a:	2300      	movs	r3, #0
 810d55c:	637b      	str	r3, [r7, #52]	@ 0x34
 810d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d560:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810d562:	68fb      	ldr	r3, [r7, #12]
 810d564:	f383 8811 	msr	BASEPRI, r3
}
 810d568:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810d56c:	4618      	mov	r0, r3
 810d56e:	3738      	adds	r7, #56	@ 0x38
 810d570:	46bd      	mov	sp, r7
 810d572:	bd80      	pop	{r7, pc}

0810d574 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810d574:	b580      	push	{r7, lr}
 810d576:	b08c      	sub	sp, #48	@ 0x30
 810d578:	af00      	add	r7, sp, #0
 810d57a:	60f8      	str	r0, [r7, #12]
 810d57c:	60b9      	str	r1, [r7, #8]
 810d57e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810d580:	2300      	movs	r3, #0
 810d582:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d584:	68fb      	ldr	r3, [r7, #12]
 810d586:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d58a:	2b00      	cmp	r3, #0
 810d58c:	d10b      	bne.n	810d5a6 <xQueueReceive+0x32>
	__asm volatile
 810d58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d592:	f383 8811 	msr	BASEPRI, r3
 810d596:	f3bf 8f6f 	isb	sy
 810d59a:	f3bf 8f4f 	dsb	sy
 810d59e:	623b      	str	r3, [r7, #32]
}
 810d5a0:	bf00      	nop
 810d5a2:	bf00      	nop
 810d5a4:	e7fd      	b.n	810d5a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d5a6:	68bb      	ldr	r3, [r7, #8]
 810d5a8:	2b00      	cmp	r3, #0
 810d5aa:	d103      	bne.n	810d5b4 <xQueueReceive+0x40>
 810d5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d5b0:	2b00      	cmp	r3, #0
 810d5b2:	d101      	bne.n	810d5b8 <xQueueReceive+0x44>
 810d5b4:	2301      	movs	r3, #1
 810d5b6:	e000      	b.n	810d5ba <xQueueReceive+0x46>
 810d5b8:	2300      	movs	r3, #0
 810d5ba:	2b00      	cmp	r3, #0
 810d5bc:	d10b      	bne.n	810d5d6 <xQueueReceive+0x62>
	__asm volatile
 810d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5c2:	f383 8811 	msr	BASEPRI, r3
 810d5c6:	f3bf 8f6f 	isb	sy
 810d5ca:	f3bf 8f4f 	dsb	sy
 810d5ce:	61fb      	str	r3, [r7, #28]
}
 810d5d0:	bf00      	nop
 810d5d2:	bf00      	nop
 810d5d4:	e7fd      	b.n	810d5d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d5d6:	f001 fa3f 	bl	810ea58 <xTaskGetSchedulerState>
 810d5da:	4603      	mov	r3, r0
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	d102      	bne.n	810d5e6 <xQueueReceive+0x72>
 810d5e0:	687b      	ldr	r3, [r7, #4]
 810d5e2:	2b00      	cmp	r3, #0
 810d5e4:	d101      	bne.n	810d5ea <xQueueReceive+0x76>
 810d5e6:	2301      	movs	r3, #1
 810d5e8:	e000      	b.n	810d5ec <xQueueReceive+0x78>
 810d5ea:	2300      	movs	r3, #0
 810d5ec:	2b00      	cmp	r3, #0
 810d5ee:	d10b      	bne.n	810d608 <xQueueReceive+0x94>
	__asm volatile
 810d5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5f4:	f383 8811 	msr	BASEPRI, r3
 810d5f8:	f3bf 8f6f 	isb	sy
 810d5fc:	f3bf 8f4f 	dsb	sy
 810d600:	61bb      	str	r3, [r7, #24]
}
 810d602:	bf00      	nop
 810d604:	bf00      	nop
 810d606:	e7fd      	b.n	810d604 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d608:	f7ff faae 	bl	810cb68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d610:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d614:	2b00      	cmp	r3, #0
 810d616:	d01f      	beq.n	810d658 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d618:	68b9      	ldr	r1, [r7, #8]
 810d61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d61c:	f000 fac4 	bl	810dba8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d622:	1e5a      	subs	r2, r3, #1
 810d624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d626:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d62a:	691b      	ldr	r3, [r3, #16]
 810d62c:	2b00      	cmp	r3, #0
 810d62e:	d00f      	beq.n	810d650 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d632:	3310      	adds	r3, #16
 810d634:	4618      	mov	r0, r3
 810d636:	f001 f84f 	bl	810e6d8 <xTaskRemoveFromEventList>
 810d63a:	4603      	mov	r3, r0
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	d007      	beq.n	810d650 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d640:	4b3c      	ldr	r3, [pc, #240]	@ (810d734 <xQueueReceive+0x1c0>)
 810d642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d646:	601a      	str	r2, [r3, #0]
 810d648:	f3bf 8f4f 	dsb	sy
 810d64c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d650:	f7ff fabc 	bl	810cbcc <vPortExitCritical>
				return pdPASS;
 810d654:	2301      	movs	r3, #1
 810d656:	e069      	b.n	810d72c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	2b00      	cmp	r3, #0
 810d65c:	d103      	bne.n	810d666 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d65e:	f7ff fab5 	bl	810cbcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d662:	2300      	movs	r3, #0
 810d664:	e062      	b.n	810d72c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d668:	2b00      	cmp	r3, #0
 810d66a:	d106      	bne.n	810d67a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d66c:	f107 0310 	add.w	r3, r7, #16
 810d670:	4618      	mov	r0, r3
 810d672:	f001 f895 	bl	810e7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d676:	2301      	movs	r3, #1
 810d678:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d67a:	f7ff faa7 	bl	810cbcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d67e:	f000 fe05 	bl	810e28c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d682:	f7ff fa71 	bl	810cb68 <vPortEnterCritical>
 810d686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d68c:	b25b      	sxtb	r3, r3
 810d68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d692:	d103      	bne.n	810d69c <xQueueReceive+0x128>
 810d694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d696:	2200      	movs	r2, #0
 810d698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d69e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d6a2:	b25b      	sxtb	r3, r3
 810d6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d6a8:	d103      	bne.n	810d6b2 <xQueueReceive+0x13e>
 810d6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6ac:	2200      	movs	r2, #0
 810d6ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d6b2:	f7ff fa8b 	bl	810cbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d6b6:	1d3a      	adds	r2, r7, #4
 810d6b8:	f107 0310 	add.w	r3, r7, #16
 810d6bc:	4611      	mov	r1, r2
 810d6be:	4618      	mov	r0, r3
 810d6c0:	f001 f884 	bl	810e7cc <xTaskCheckForTimeOut>
 810d6c4:	4603      	mov	r3, r0
 810d6c6:	2b00      	cmp	r3, #0
 810d6c8:	d123      	bne.n	810d712 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d6cc:	f000 fae4 	bl	810dc98 <prvIsQueueEmpty>
 810d6d0:	4603      	mov	r3, r0
 810d6d2:	2b00      	cmp	r3, #0
 810d6d4:	d017      	beq.n	810d706 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6d8:	3324      	adds	r3, #36	@ 0x24
 810d6da:	687a      	ldr	r2, [r7, #4]
 810d6dc:	4611      	mov	r1, r2
 810d6de:	4618      	mov	r0, r3
 810d6e0:	f000 ffa8 	bl	810e634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d6e6:	f000 fa85 	bl	810dbf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d6ea:	f000 fddd 	bl	810e2a8 <xTaskResumeAll>
 810d6ee:	4603      	mov	r3, r0
 810d6f0:	2b00      	cmp	r3, #0
 810d6f2:	d189      	bne.n	810d608 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810d6f4:	4b0f      	ldr	r3, [pc, #60]	@ (810d734 <xQueueReceive+0x1c0>)
 810d6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d6fa:	601a      	str	r2, [r3, #0]
 810d6fc:	f3bf 8f4f 	dsb	sy
 810d700:	f3bf 8f6f 	isb	sy
 810d704:	e780      	b.n	810d608 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810d706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d708:	f000 fa74 	bl	810dbf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d70c:	f000 fdcc 	bl	810e2a8 <xTaskResumeAll>
 810d710:	e77a      	b.n	810d608 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810d712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d714:	f000 fa6e 	bl	810dbf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d718:	f000 fdc6 	bl	810e2a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d71c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d71e:	f000 fabb 	bl	810dc98 <prvIsQueueEmpty>
 810d722:	4603      	mov	r3, r0
 810d724:	2b00      	cmp	r3, #0
 810d726:	f43f af6f 	beq.w	810d608 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d72a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d72c:	4618      	mov	r0, r3
 810d72e:	3730      	adds	r7, #48	@ 0x30
 810d730:	46bd      	mov	sp, r7
 810d732:	bd80      	pop	{r7, pc}
 810d734:	e000ed04 	.word	0xe000ed04

0810d738 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810d738:	b580      	push	{r7, lr}
 810d73a:	b08e      	sub	sp, #56	@ 0x38
 810d73c:	af00      	add	r7, sp, #0
 810d73e:	6078      	str	r0, [r7, #4]
 810d740:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810d742:	2300      	movs	r3, #0
 810d744:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d746:	687b      	ldr	r3, [r7, #4]
 810d748:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810d74a:	2300      	movs	r3, #0
 810d74c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d750:	2b00      	cmp	r3, #0
 810d752:	d10b      	bne.n	810d76c <xQueueSemaphoreTake+0x34>
	__asm volatile
 810d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d758:	f383 8811 	msr	BASEPRI, r3
 810d75c:	f3bf 8f6f 	isb	sy
 810d760:	f3bf 8f4f 	dsb	sy
 810d764:	623b      	str	r3, [r7, #32]
}
 810d766:	bf00      	nop
 810d768:	bf00      	nop
 810d76a:	e7fd      	b.n	810d768 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d770:	2b00      	cmp	r3, #0
 810d772:	d00b      	beq.n	810d78c <xQueueSemaphoreTake+0x54>
	__asm volatile
 810d774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d778:	f383 8811 	msr	BASEPRI, r3
 810d77c:	f3bf 8f6f 	isb	sy
 810d780:	f3bf 8f4f 	dsb	sy
 810d784:	61fb      	str	r3, [r7, #28]
}
 810d786:	bf00      	nop
 810d788:	bf00      	nop
 810d78a:	e7fd      	b.n	810d788 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d78c:	f001 f964 	bl	810ea58 <xTaskGetSchedulerState>
 810d790:	4603      	mov	r3, r0
 810d792:	2b00      	cmp	r3, #0
 810d794:	d102      	bne.n	810d79c <xQueueSemaphoreTake+0x64>
 810d796:	683b      	ldr	r3, [r7, #0]
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d101      	bne.n	810d7a0 <xQueueSemaphoreTake+0x68>
 810d79c:	2301      	movs	r3, #1
 810d79e:	e000      	b.n	810d7a2 <xQueueSemaphoreTake+0x6a>
 810d7a0:	2300      	movs	r3, #0
 810d7a2:	2b00      	cmp	r3, #0
 810d7a4:	d10b      	bne.n	810d7be <xQueueSemaphoreTake+0x86>
	__asm volatile
 810d7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d7aa:	f383 8811 	msr	BASEPRI, r3
 810d7ae:	f3bf 8f6f 	isb	sy
 810d7b2:	f3bf 8f4f 	dsb	sy
 810d7b6:	61bb      	str	r3, [r7, #24]
}
 810d7b8:	bf00      	nop
 810d7ba:	bf00      	nop
 810d7bc:	e7fd      	b.n	810d7ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d7be:	f7ff f9d3 	bl	810cb68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810d7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d7c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d7ca:	2b00      	cmp	r3, #0
 810d7cc:	d024      	beq.n	810d818 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810d7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d7d0:	1e5a      	subs	r2, r3, #1
 810d7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7d8:	681b      	ldr	r3, [r3, #0]
 810d7da:	2b00      	cmp	r3, #0
 810d7dc:	d104      	bne.n	810d7e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810d7de:	f001 fab5 	bl	810ed4c <pvTaskIncrementMutexHeldCount>
 810d7e2:	4602      	mov	r2, r0
 810d7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7ea:	691b      	ldr	r3, [r3, #16]
 810d7ec:	2b00      	cmp	r3, #0
 810d7ee:	d00f      	beq.n	810d810 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d7f2:	3310      	adds	r3, #16
 810d7f4:	4618      	mov	r0, r3
 810d7f6:	f000 ff6f 	bl	810e6d8 <xTaskRemoveFromEventList>
 810d7fa:	4603      	mov	r3, r0
 810d7fc:	2b00      	cmp	r3, #0
 810d7fe:	d007      	beq.n	810d810 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d800:	4b54      	ldr	r3, [pc, #336]	@ (810d954 <xQueueSemaphoreTake+0x21c>)
 810d802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d806:	601a      	str	r2, [r3, #0]
 810d808:	f3bf 8f4f 	dsb	sy
 810d80c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d810:	f7ff f9dc 	bl	810cbcc <vPortExitCritical>
				return pdPASS;
 810d814:	2301      	movs	r3, #1
 810d816:	e098      	b.n	810d94a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d818:	683b      	ldr	r3, [r7, #0]
 810d81a:	2b00      	cmp	r3, #0
 810d81c:	d112      	bne.n	810d844 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810d81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d820:	2b00      	cmp	r3, #0
 810d822:	d00b      	beq.n	810d83c <xQueueSemaphoreTake+0x104>
	__asm volatile
 810d824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d828:	f383 8811 	msr	BASEPRI, r3
 810d82c:	f3bf 8f6f 	isb	sy
 810d830:	f3bf 8f4f 	dsb	sy
 810d834:	617b      	str	r3, [r7, #20]
}
 810d836:	bf00      	nop
 810d838:	bf00      	nop
 810d83a:	e7fd      	b.n	810d838 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810d83c:	f7ff f9c6 	bl	810cbcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d840:	2300      	movs	r3, #0
 810d842:	e082      	b.n	810d94a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d846:	2b00      	cmp	r3, #0
 810d848:	d106      	bne.n	810d858 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d84a:	f107 030c 	add.w	r3, r7, #12
 810d84e:	4618      	mov	r0, r3
 810d850:	f000 ffa6 	bl	810e7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d854:	2301      	movs	r3, #1
 810d856:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d858:	f7ff f9b8 	bl	810cbcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d85c:	f000 fd16 	bl	810e28c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d860:	f7ff f982 	bl	810cb68 <vPortEnterCritical>
 810d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d866:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d86a:	b25b      	sxtb	r3, r3
 810d86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d870:	d103      	bne.n	810d87a <xQueueSemaphoreTake+0x142>
 810d872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d874:	2200      	movs	r2, #0
 810d876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d87c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d880:	b25b      	sxtb	r3, r3
 810d882:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d886:	d103      	bne.n	810d890 <xQueueSemaphoreTake+0x158>
 810d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d88a:	2200      	movs	r2, #0
 810d88c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d890:	f7ff f99c 	bl	810cbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d894:	463a      	mov	r2, r7
 810d896:	f107 030c 	add.w	r3, r7, #12
 810d89a:	4611      	mov	r1, r2
 810d89c:	4618      	mov	r0, r3
 810d89e:	f000 ff95 	bl	810e7cc <xTaskCheckForTimeOut>
 810d8a2:	4603      	mov	r3, r0
 810d8a4:	2b00      	cmp	r3, #0
 810d8a6:	d132      	bne.n	810d90e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d8a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d8aa:	f000 f9f5 	bl	810dc98 <prvIsQueueEmpty>
 810d8ae:	4603      	mov	r3, r0
 810d8b0:	2b00      	cmp	r3, #0
 810d8b2:	d026      	beq.n	810d902 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d8b6:	681b      	ldr	r3, [r3, #0]
 810d8b8:	2b00      	cmp	r3, #0
 810d8ba:	d109      	bne.n	810d8d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810d8bc:	f7ff f954 	bl	810cb68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d8c2:	689b      	ldr	r3, [r3, #8]
 810d8c4:	4618      	mov	r0, r3
 810d8c6:	f001 f8e5 	bl	810ea94 <xTaskPriorityInherit>
 810d8ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810d8cc:	f7ff f97e 	bl	810cbcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d8d2:	3324      	adds	r3, #36	@ 0x24
 810d8d4:	683a      	ldr	r2, [r7, #0]
 810d8d6:	4611      	mov	r1, r2
 810d8d8:	4618      	mov	r0, r3
 810d8da:	f000 feab 	bl	810e634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d8de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d8e0:	f000 f988 	bl	810dbf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d8e4:	f000 fce0 	bl	810e2a8 <xTaskResumeAll>
 810d8e8:	4603      	mov	r3, r0
 810d8ea:	2b00      	cmp	r3, #0
 810d8ec:	f47f af67 	bne.w	810d7be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810d8f0:	4b18      	ldr	r3, [pc, #96]	@ (810d954 <xQueueSemaphoreTake+0x21c>)
 810d8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d8f6:	601a      	str	r2, [r3, #0]
 810d8f8:	f3bf 8f4f 	dsb	sy
 810d8fc:	f3bf 8f6f 	isb	sy
 810d900:	e75d      	b.n	810d7be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810d902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d904:	f000 f976 	bl	810dbf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d908:	f000 fcce 	bl	810e2a8 <xTaskResumeAll>
 810d90c:	e757      	b.n	810d7be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810d90e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d910:	f000 f970 	bl	810dbf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d914:	f000 fcc8 	bl	810e2a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d91a:	f000 f9bd 	bl	810dc98 <prvIsQueueEmpty>
 810d91e:	4603      	mov	r3, r0
 810d920:	2b00      	cmp	r3, #0
 810d922:	f43f af4c 	beq.w	810d7be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810d926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d928:	2b00      	cmp	r3, #0
 810d92a:	d00d      	beq.n	810d948 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810d92c:	f7ff f91c 	bl	810cb68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810d930:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d932:	f000 f8b7 	bl	810daa4 <prvGetDisinheritPriorityAfterTimeout>
 810d936:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810d938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d93a:	689b      	ldr	r3, [r3, #8]
 810d93c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d93e:	4618      	mov	r0, r3
 810d940:	f001 f980 	bl	810ec44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810d944:	f7ff f942 	bl	810cbcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d948:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d94a:	4618      	mov	r0, r3
 810d94c:	3738      	adds	r7, #56	@ 0x38
 810d94e:	46bd      	mov	sp, r7
 810d950:	bd80      	pop	{r7, pc}
 810d952:	bf00      	nop
 810d954:	e000ed04 	.word	0xe000ed04

0810d958 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d958:	b580      	push	{r7, lr}
 810d95a:	b08e      	sub	sp, #56	@ 0x38
 810d95c:	af00      	add	r7, sp, #0
 810d95e:	60f8      	str	r0, [r7, #12]
 810d960:	60b9      	str	r1, [r7, #8]
 810d962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d964:	68fb      	ldr	r3, [r7, #12]
 810d966:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810d968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d96a:	2b00      	cmp	r3, #0
 810d96c:	d10b      	bne.n	810d986 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810d96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d972:	f383 8811 	msr	BASEPRI, r3
 810d976:	f3bf 8f6f 	isb	sy
 810d97a:	f3bf 8f4f 	dsb	sy
 810d97e:	623b      	str	r3, [r7, #32]
}
 810d980:	bf00      	nop
 810d982:	bf00      	nop
 810d984:	e7fd      	b.n	810d982 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d986:	68bb      	ldr	r3, [r7, #8]
 810d988:	2b00      	cmp	r3, #0
 810d98a:	d103      	bne.n	810d994 <xQueueReceiveFromISR+0x3c>
 810d98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d990:	2b00      	cmp	r3, #0
 810d992:	d101      	bne.n	810d998 <xQueueReceiveFromISR+0x40>
 810d994:	2301      	movs	r3, #1
 810d996:	e000      	b.n	810d99a <xQueueReceiveFromISR+0x42>
 810d998:	2300      	movs	r3, #0
 810d99a:	2b00      	cmp	r3, #0
 810d99c:	d10b      	bne.n	810d9b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810d99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9a2:	f383 8811 	msr	BASEPRI, r3
 810d9a6:	f3bf 8f6f 	isb	sy
 810d9aa:	f3bf 8f4f 	dsb	sy
 810d9ae:	61fb      	str	r3, [r7, #28]
}
 810d9b0:	bf00      	nop
 810d9b2:	bf00      	nop
 810d9b4:	e7fd      	b.n	810d9b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d9b6:	f7ff f9b7 	bl	810cd28 <vPortValidateInterruptPriority>
	__asm volatile
 810d9ba:	f3ef 8211 	mrs	r2, BASEPRI
 810d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9c2:	f383 8811 	msr	BASEPRI, r3
 810d9c6:	f3bf 8f6f 	isb	sy
 810d9ca:	f3bf 8f4f 	dsb	sy
 810d9ce:	61ba      	str	r2, [r7, #24]
 810d9d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810d9d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d9da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9de:	2b00      	cmp	r3, #0
 810d9e0:	d02f      	beq.n	810da42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810d9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d9e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d9ec:	68b9      	ldr	r1, [r7, #8]
 810d9ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d9f0:	f000 f8da 	bl	810dba8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9f6:	1e5a      	subs	r2, r3, #1
 810d9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810d9fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810da00:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da04:	d112      	bne.n	810da2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da08:	691b      	ldr	r3, [r3, #16]
 810da0a:	2b00      	cmp	r3, #0
 810da0c:	d016      	beq.n	810da3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da10:	3310      	adds	r3, #16
 810da12:	4618      	mov	r0, r3
 810da14:	f000 fe60 	bl	810e6d8 <xTaskRemoveFromEventList>
 810da18:	4603      	mov	r3, r0
 810da1a:	2b00      	cmp	r3, #0
 810da1c:	d00e      	beq.n	810da3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810da1e:	687b      	ldr	r3, [r7, #4]
 810da20:	2b00      	cmp	r3, #0
 810da22:	d00b      	beq.n	810da3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810da24:	687b      	ldr	r3, [r7, #4]
 810da26:	2201      	movs	r2, #1
 810da28:	601a      	str	r2, [r3, #0]
 810da2a:	e007      	b.n	810da3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810da2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810da30:	3301      	adds	r3, #1
 810da32:	b2db      	uxtb	r3, r3
 810da34:	b25a      	sxtb	r2, r3
 810da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810da3c:	2301      	movs	r3, #1
 810da3e:	637b      	str	r3, [r7, #52]	@ 0x34
 810da40:	e001      	b.n	810da46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810da42:	2300      	movs	r3, #0
 810da44:	637b      	str	r3, [r7, #52]	@ 0x34
 810da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da48:	613b      	str	r3, [r7, #16]
	__asm volatile
 810da4a:	693b      	ldr	r3, [r7, #16]
 810da4c:	f383 8811 	msr	BASEPRI, r3
}
 810da50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810da52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810da54:	4618      	mov	r0, r3
 810da56:	3738      	adds	r7, #56	@ 0x38
 810da58:	46bd      	mov	sp, r7
 810da5a:	bd80      	pop	{r7, pc}

0810da5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810da5c:	b580      	push	{r7, lr}
 810da5e:	b084      	sub	sp, #16
 810da60:	af00      	add	r7, sp, #0
 810da62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810da64:	687b      	ldr	r3, [r7, #4]
 810da66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810da68:	68fb      	ldr	r3, [r7, #12]
 810da6a:	2b00      	cmp	r3, #0
 810da6c:	d10b      	bne.n	810da86 <vQueueDelete+0x2a>
	__asm volatile
 810da6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da72:	f383 8811 	msr	BASEPRI, r3
 810da76:	f3bf 8f6f 	isb	sy
 810da7a:	f3bf 8f4f 	dsb	sy
 810da7e:	60bb      	str	r3, [r7, #8]
}
 810da80:	bf00      	nop
 810da82:	bf00      	nop
 810da84:	e7fd      	b.n	810da82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810da86:	68f8      	ldr	r0, [r7, #12]
 810da88:	f000 f95e 	bl	810dd48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810da8c:	68fb      	ldr	r3, [r7, #12]
 810da8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 810da92:	2b00      	cmp	r3, #0
 810da94:	d102      	bne.n	810da9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 810da96:	68f8      	ldr	r0, [r7, #12]
 810da98:	f7fe fd64 	bl	810c564 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810da9c:	bf00      	nop
 810da9e:	3710      	adds	r7, #16
 810daa0:	46bd      	mov	sp, r7
 810daa2:	bd80      	pop	{r7, pc}

0810daa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810daa4:	b480      	push	{r7}
 810daa6:	b085      	sub	sp, #20
 810daa8:	af00      	add	r7, sp, #0
 810daaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810daac:	687b      	ldr	r3, [r7, #4]
 810daae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810dab0:	2b00      	cmp	r3, #0
 810dab2:	d006      	beq.n	810dac2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810dab4:	687b      	ldr	r3, [r7, #4]
 810dab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810dab8:	681b      	ldr	r3, [r3, #0]
 810daba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810dabe:	60fb      	str	r3, [r7, #12]
 810dac0:	e001      	b.n	810dac6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810dac2:	2300      	movs	r3, #0
 810dac4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810dac6:	68fb      	ldr	r3, [r7, #12]
	}
 810dac8:	4618      	mov	r0, r3
 810daca:	3714      	adds	r7, #20
 810dacc:	46bd      	mov	sp, r7
 810dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dad2:	4770      	bx	lr

0810dad4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810dad4:	b580      	push	{r7, lr}
 810dad6:	b086      	sub	sp, #24
 810dad8:	af00      	add	r7, sp, #0
 810dada:	60f8      	str	r0, [r7, #12]
 810dadc:	60b9      	str	r1, [r7, #8]
 810dade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810dae0:	2300      	movs	r3, #0
 810dae2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dae4:	68fb      	ldr	r3, [r7, #12]
 810dae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dae8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810daea:	68fb      	ldr	r3, [r7, #12]
 810daec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810daee:	2b00      	cmp	r3, #0
 810daf0:	d10d      	bne.n	810db0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810daf2:	68fb      	ldr	r3, [r7, #12]
 810daf4:	681b      	ldr	r3, [r3, #0]
 810daf6:	2b00      	cmp	r3, #0
 810daf8:	d14d      	bne.n	810db96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810dafa:	68fb      	ldr	r3, [r7, #12]
 810dafc:	689b      	ldr	r3, [r3, #8]
 810dafe:	4618      	mov	r0, r3
 810db00:	f001 f830 	bl	810eb64 <xTaskPriorityDisinherit>
 810db04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810db06:	68fb      	ldr	r3, [r7, #12]
 810db08:	2200      	movs	r2, #0
 810db0a:	609a      	str	r2, [r3, #8]
 810db0c:	e043      	b.n	810db96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810db0e:	687b      	ldr	r3, [r7, #4]
 810db10:	2b00      	cmp	r3, #0
 810db12:	d119      	bne.n	810db48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810db14:	68fb      	ldr	r3, [r7, #12]
 810db16:	6858      	ldr	r0, [r3, #4]
 810db18:	68fb      	ldr	r3, [r7, #12]
 810db1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810db1c:	461a      	mov	r2, r3
 810db1e:	68b9      	ldr	r1, [r7, #8]
 810db20:	f005 fb0f 	bl	8113142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810db24:	68fb      	ldr	r3, [r7, #12]
 810db26:	685a      	ldr	r2, [r3, #4]
 810db28:	68fb      	ldr	r3, [r7, #12]
 810db2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810db2c:	441a      	add	r2, r3
 810db2e:	68fb      	ldr	r3, [r7, #12]
 810db30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810db32:	68fb      	ldr	r3, [r7, #12]
 810db34:	685a      	ldr	r2, [r3, #4]
 810db36:	68fb      	ldr	r3, [r7, #12]
 810db38:	689b      	ldr	r3, [r3, #8]
 810db3a:	429a      	cmp	r2, r3
 810db3c:	d32b      	bcc.n	810db96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810db3e:	68fb      	ldr	r3, [r7, #12]
 810db40:	681a      	ldr	r2, [r3, #0]
 810db42:	68fb      	ldr	r3, [r7, #12]
 810db44:	605a      	str	r2, [r3, #4]
 810db46:	e026      	b.n	810db96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810db48:	68fb      	ldr	r3, [r7, #12]
 810db4a:	68d8      	ldr	r0, [r3, #12]
 810db4c:	68fb      	ldr	r3, [r7, #12]
 810db4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810db50:	461a      	mov	r2, r3
 810db52:	68b9      	ldr	r1, [r7, #8]
 810db54:	f005 faf5 	bl	8113142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810db58:	68fb      	ldr	r3, [r7, #12]
 810db5a:	68da      	ldr	r2, [r3, #12]
 810db5c:	68fb      	ldr	r3, [r7, #12]
 810db5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810db60:	425b      	negs	r3, r3
 810db62:	441a      	add	r2, r3
 810db64:	68fb      	ldr	r3, [r7, #12]
 810db66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810db68:	68fb      	ldr	r3, [r7, #12]
 810db6a:	68da      	ldr	r2, [r3, #12]
 810db6c:	68fb      	ldr	r3, [r7, #12]
 810db6e:	681b      	ldr	r3, [r3, #0]
 810db70:	429a      	cmp	r2, r3
 810db72:	d207      	bcs.n	810db84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810db74:	68fb      	ldr	r3, [r7, #12]
 810db76:	689a      	ldr	r2, [r3, #8]
 810db78:	68fb      	ldr	r3, [r7, #12]
 810db7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810db7c:	425b      	negs	r3, r3
 810db7e:	441a      	add	r2, r3
 810db80:	68fb      	ldr	r3, [r7, #12]
 810db82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810db84:	687b      	ldr	r3, [r7, #4]
 810db86:	2b02      	cmp	r3, #2
 810db88:	d105      	bne.n	810db96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810db8a:	693b      	ldr	r3, [r7, #16]
 810db8c:	2b00      	cmp	r3, #0
 810db8e:	d002      	beq.n	810db96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810db90:	693b      	ldr	r3, [r7, #16]
 810db92:	3b01      	subs	r3, #1
 810db94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810db96:	693b      	ldr	r3, [r7, #16]
 810db98:	1c5a      	adds	r2, r3, #1
 810db9a:	68fb      	ldr	r3, [r7, #12]
 810db9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810db9e:	697b      	ldr	r3, [r7, #20]
}
 810dba0:	4618      	mov	r0, r3
 810dba2:	3718      	adds	r7, #24
 810dba4:	46bd      	mov	sp, r7
 810dba6:	bd80      	pop	{r7, pc}

0810dba8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810dba8:	b580      	push	{r7, lr}
 810dbaa:	b082      	sub	sp, #8
 810dbac:	af00      	add	r7, sp, #0
 810dbae:	6078      	str	r0, [r7, #4]
 810dbb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810dbb2:	687b      	ldr	r3, [r7, #4]
 810dbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dbb6:	2b00      	cmp	r3, #0
 810dbb8:	d018      	beq.n	810dbec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810dbba:	687b      	ldr	r3, [r7, #4]
 810dbbc:	68da      	ldr	r2, [r3, #12]
 810dbbe:	687b      	ldr	r3, [r7, #4]
 810dbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dbc2:	441a      	add	r2, r3
 810dbc4:	687b      	ldr	r3, [r7, #4]
 810dbc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810dbc8:	687b      	ldr	r3, [r7, #4]
 810dbca:	68da      	ldr	r2, [r3, #12]
 810dbcc:	687b      	ldr	r3, [r7, #4]
 810dbce:	689b      	ldr	r3, [r3, #8]
 810dbd0:	429a      	cmp	r2, r3
 810dbd2:	d303      	bcc.n	810dbdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810dbd4:	687b      	ldr	r3, [r7, #4]
 810dbd6:	681a      	ldr	r2, [r3, #0]
 810dbd8:	687b      	ldr	r3, [r7, #4]
 810dbda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810dbdc:	687b      	ldr	r3, [r7, #4]
 810dbde:	68d9      	ldr	r1, [r3, #12]
 810dbe0:	687b      	ldr	r3, [r7, #4]
 810dbe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dbe4:	461a      	mov	r2, r3
 810dbe6:	6838      	ldr	r0, [r7, #0]
 810dbe8:	f005 faab 	bl	8113142 <memcpy>
	}
}
 810dbec:	bf00      	nop
 810dbee:	3708      	adds	r7, #8
 810dbf0:	46bd      	mov	sp, r7
 810dbf2:	bd80      	pop	{r7, pc}

0810dbf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810dbf4:	b580      	push	{r7, lr}
 810dbf6:	b084      	sub	sp, #16
 810dbf8:	af00      	add	r7, sp, #0
 810dbfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810dbfc:	f7fe ffb4 	bl	810cb68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810dc00:	687b      	ldr	r3, [r7, #4]
 810dc02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810dc06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810dc08:	e011      	b.n	810dc2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810dc0a:	687b      	ldr	r3, [r7, #4]
 810dc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810dc0e:	2b00      	cmp	r3, #0
 810dc10:	d012      	beq.n	810dc38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810dc12:	687b      	ldr	r3, [r7, #4]
 810dc14:	3324      	adds	r3, #36	@ 0x24
 810dc16:	4618      	mov	r0, r3
 810dc18:	f000 fd5e 	bl	810e6d8 <xTaskRemoveFromEventList>
 810dc1c:	4603      	mov	r3, r0
 810dc1e:	2b00      	cmp	r3, #0
 810dc20:	d001      	beq.n	810dc26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810dc22:	f000 fe37 	bl	810e894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810dc26:	7bfb      	ldrb	r3, [r7, #15]
 810dc28:	3b01      	subs	r3, #1
 810dc2a:	b2db      	uxtb	r3, r3
 810dc2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810dc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810dc32:	2b00      	cmp	r3, #0
 810dc34:	dce9      	bgt.n	810dc0a <prvUnlockQueue+0x16>
 810dc36:	e000      	b.n	810dc3a <prvUnlockQueue+0x46>
					break;
 810dc38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810dc3a:	687b      	ldr	r3, [r7, #4]
 810dc3c:	22ff      	movs	r2, #255	@ 0xff
 810dc3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810dc42:	f7fe ffc3 	bl	810cbcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810dc46:	f7fe ff8f 	bl	810cb68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810dc4a:	687b      	ldr	r3, [r7, #4]
 810dc4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810dc50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810dc52:	e011      	b.n	810dc78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810dc54:	687b      	ldr	r3, [r7, #4]
 810dc56:	691b      	ldr	r3, [r3, #16]
 810dc58:	2b00      	cmp	r3, #0
 810dc5a:	d012      	beq.n	810dc82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810dc5c:	687b      	ldr	r3, [r7, #4]
 810dc5e:	3310      	adds	r3, #16
 810dc60:	4618      	mov	r0, r3
 810dc62:	f000 fd39 	bl	810e6d8 <xTaskRemoveFromEventList>
 810dc66:	4603      	mov	r3, r0
 810dc68:	2b00      	cmp	r3, #0
 810dc6a:	d001      	beq.n	810dc70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810dc6c:	f000 fe12 	bl	810e894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810dc70:	7bbb      	ldrb	r3, [r7, #14]
 810dc72:	3b01      	subs	r3, #1
 810dc74:	b2db      	uxtb	r3, r3
 810dc76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810dc78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810dc7c:	2b00      	cmp	r3, #0
 810dc7e:	dce9      	bgt.n	810dc54 <prvUnlockQueue+0x60>
 810dc80:	e000      	b.n	810dc84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810dc82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810dc84:	687b      	ldr	r3, [r7, #4]
 810dc86:	22ff      	movs	r2, #255	@ 0xff
 810dc88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810dc8c:	f7fe ff9e 	bl	810cbcc <vPortExitCritical>
}
 810dc90:	bf00      	nop
 810dc92:	3710      	adds	r7, #16
 810dc94:	46bd      	mov	sp, r7
 810dc96:	bd80      	pop	{r7, pc}

0810dc98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810dc98:	b580      	push	{r7, lr}
 810dc9a:	b084      	sub	sp, #16
 810dc9c:	af00      	add	r7, sp, #0
 810dc9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810dca0:	f7fe ff62 	bl	810cb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810dca4:	687b      	ldr	r3, [r7, #4]
 810dca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dca8:	2b00      	cmp	r3, #0
 810dcaa:	d102      	bne.n	810dcb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810dcac:	2301      	movs	r3, #1
 810dcae:	60fb      	str	r3, [r7, #12]
 810dcb0:	e001      	b.n	810dcb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810dcb2:	2300      	movs	r3, #0
 810dcb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810dcb6:	f7fe ff89 	bl	810cbcc <vPortExitCritical>

	return xReturn;
 810dcba:	68fb      	ldr	r3, [r7, #12]
}
 810dcbc:	4618      	mov	r0, r3
 810dcbe:	3710      	adds	r7, #16
 810dcc0:	46bd      	mov	sp, r7
 810dcc2:	bd80      	pop	{r7, pc}

0810dcc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810dcc4:	b580      	push	{r7, lr}
 810dcc6:	b084      	sub	sp, #16
 810dcc8:	af00      	add	r7, sp, #0
 810dcca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810dccc:	f7fe ff4c 	bl	810cb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810dcd0:	687b      	ldr	r3, [r7, #4]
 810dcd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810dcd4:	687b      	ldr	r3, [r7, #4]
 810dcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dcd8:	429a      	cmp	r2, r3
 810dcda:	d102      	bne.n	810dce2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810dcdc:	2301      	movs	r3, #1
 810dcde:	60fb      	str	r3, [r7, #12]
 810dce0:	e001      	b.n	810dce6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810dce2:	2300      	movs	r3, #0
 810dce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810dce6:	f7fe ff71 	bl	810cbcc <vPortExitCritical>

	return xReturn;
 810dcea:	68fb      	ldr	r3, [r7, #12]
}
 810dcec:	4618      	mov	r0, r3
 810dcee:	3710      	adds	r7, #16
 810dcf0:	46bd      	mov	sp, r7
 810dcf2:	bd80      	pop	{r7, pc}

0810dcf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810dcf4:	b480      	push	{r7}
 810dcf6:	b085      	sub	sp, #20
 810dcf8:	af00      	add	r7, sp, #0
 810dcfa:	6078      	str	r0, [r7, #4]
 810dcfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810dcfe:	2300      	movs	r3, #0
 810dd00:	60fb      	str	r3, [r7, #12]
 810dd02:	e014      	b.n	810dd2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810dd04:	4a0f      	ldr	r2, [pc, #60]	@ (810dd44 <vQueueAddToRegistry+0x50>)
 810dd06:	68fb      	ldr	r3, [r7, #12]
 810dd08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810dd0c:	2b00      	cmp	r3, #0
 810dd0e:	d10b      	bne.n	810dd28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810dd10:	490c      	ldr	r1, [pc, #48]	@ (810dd44 <vQueueAddToRegistry+0x50>)
 810dd12:	68fb      	ldr	r3, [r7, #12]
 810dd14:	683a      	ldr	r2, [r7, #0]
 810dd16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810dd1a:	4a0a      	ldr	r2, [pc, #40]	@ (810dd44 <vQueueAddToRegistry+0x50>)
 810dd1c:	68fb      	ldr	r3, [r7, #12]
 810dd1e:	00db      	lsls	r3, r3, #3
 810dd20:	4413      	add	r3, r2
 810dd22:	687a      	ldr	r2, [r7, #4]
 810dd24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810dd26:	e006      	b.n	810dd36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810dd28:	68fb      	ldr	r3, [r7, #12]
 810dd2a:	3301      	adds	r3, #1
 810dd2c:	60fb      	str	r3, [r7, #12]
 810dd2e:	68fb      	ldr	r3, [r7, #12]
 810dd30:	2b07      	cmp	r3, #7
 810dd32:	d9e7      	bls.n	810dd04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810dd34:	bf00      	nop
 810dd36:	bf00      	nop
 810dd38:	3714      	adds	r7, #20
 810dd3a:	46bd      	mov	sp, r7
 810dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd40:	4770      	bx	lr
 810dd42:	bf00      	nop
 810dd44:	10004914 	.word	0x10004914

0810dd48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810dd48:	b480      	push	{r7}
 810dd4a:	b085      	sub	sp, #20
 810dd4c:	af00      	add	r7, sp, #0
 810dd4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810dd50:	2300      	movs	r3, #0
 810dd52:	60fb      	str	r3, [r7, #12]
 810dd54:	e016      	b.n	810dd84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810dd56:	4a10      	ldr	r2, [pc, #64]	@ (810dd98 <vQueueUnregisterQueue+0x50>)
 810dd58:	68fb      	ldr	r3, [r7, #12]
 810dd5a:	00db      	lsls	r3, r3, #3
 810dd5c:	4413      	add	r3, r2
 810dd5e:	685b      	ldr	r3, [r3, #4]
 810dd60:	687a      	ldr	r2, [r7, #4]
 810dd62:	429a      	cmp	r2, r3
 810dd64:	d10b      	bne.n	810dd7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810dd66:	4a0c      	ldr	r2, [pc, #48]	@ (810dd98 <vQueueUnregisterQueue+0x50>)
 810dd68:	68fb      	ldr	r3, [r7, #12]
 810dd6a:	2100      	movs	r1, #0
 810dd6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810dd70:	4a09      	ldr	r2, [pc, #36]	@ (810dd98 <vQueueUnregisterQueue+0x50>)
 810dd72:	68fb      	ldr	r3, [r7, #12]
 810dd74:	00db      	lsls	r3, r3, #3
 810dd76:	4413      	add	r3, r2
 810dd78:	2200      	movs	r2, #0
 810dd7a:	605a      	str	r2, [r3, #4]
				break;
 810dd7c:	e006      	b.n	810dd8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810dd7e:	68fb      	ldr	r3, [r7, #12]
 810dd80:	3301      	adds	r3, #1
 810dd82:	60fb      	str	r3, [r7, #12]
 810dd84:	68fb      	ldr	r3, [r7, #12]
 810dd86:	2b07      	cmp	r3, #7
 810dd88:	d9e5      	bls.n	810dd56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810dd8a:	bf00      	nop
 810dd8c:	bf00      	nop
 810dd8e:	3714      	adds	r7, #20
 810dd90:	46bd      	mov	sp, r7
 810dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd96:	4770      	bx	lr
 810dd98:	10004914 	.word	0x10004914

0810dd9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810dd9c:	b580      	push	{r7, lr}
 810dd9e:	b086      	sub	sp, #24
 810dda0:	af00      	add	r7, sp, #0
 810dda2:	60f8      	str	r0, [r7, #12]
 810dda4:	60b9      	str	r1, [r7, #8]
 810dda6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810dda8:	68fb      	ldr	r3, [r7, #12]
 810ddaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810ddac:	f7fe fedc 	bl	810cb68 <vPortEnterCritical>
 810ddb0:	697b      	ldr	r3, [r7, #20]
 810ddb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810ddb6:	b25b      	sxtb	r3, r3
 810ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ddbc:	d103      	bne.n	810ddc6 <vQueueWaitForMessageRestricted+0x2a>
 810ddbe:	697b      	ldr	r3, [r7, #20]
 810ddc0:	2200      	movs	r2, #0
 810ddc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ddc6:	697b      	ldr	r3, [r7, #20]
 810ddc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810ddcc:	b25b      	sxtb	r3, r3
 810ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ddd2:	d103      	bne.n	810dddc <vQueueWaitForMessageRestricted+0x40>
 810ddd4:	697b      	ldr	r3, [r7, #20]
 810ddd6:	2200      	movs	r2, #0
 810ddd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810dddc:	f7fe fef6 	bl	810cbcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810dde0:	697b      	ldr	r3, [r7, #20]
 810dde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dde4:	2b00      	cmp	r3, #0
 810dde6:	d106      	bne.n	810ddf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810dde8:	697b      	ldr	r3, [r7, #20]
 810ddea:	3324      	adds	r3, #36	@ 0x24
 810ddec:	687a      	ldr	r2, [r7, #4]
 810ddee:	68b9      	ldr	r1, [r7, #8]
 810ddf0:	4618      	mov	r0, r3
 810ddf2:	f000 fc45 	bl	810e680 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810ddf6:	6978      	ldr	r0, [r7, #20]
 810ddf8:	f7ff fefc 	bl	810dbf4 <prvUnlockQueue>
	}
 810ddfc:	bf00      	nop
 810ddfe:	3718      	adds	r7, #24
 810de00:	46bd      	mov	sp, r7
 810de02:	bd80      	pop	{r7, pc}

0810de04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810de04:	b580      	push	{r7, lr}
 810de06:	b08e      	sub	sp, #56	@ 0x38
 810de08:	af04      	add	r7, sp, #16
 810de0a:	60f8      	str	r0, [r7, #12]
 810de0c:	60b9      	str	r1, [r7, #8]
 810de0e:	607a      	str	r2, [r7, #4]
 810de10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810de12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810de14:	2b00      	cmp	r3, #0
 810de16:	d10b      	bne.n	810de30 <xTaskCreateStatic+0x2c>
	__asm volatile
 810de18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de1c:	f383 8811 	msr	BASEPRI, r3
 810de20:	f3bf 8f6f 	isb	sy
 810de24:	f3bf 8f4f 	dsb	sy
 810de28:	623b      	str	r3, [r7, #32]
}
 810de2a:	bf00      	nop
 810de2c:	bf00      	nop
 810de2e:	e7fd      	b.n	810de2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810de30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810de32:	2b00      	cmp	r3, #0
 810de34:	d10b      	bne.n	810de4e <xTaskCreateStatic+0x4a>
	__asm volatile
 810de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de3a:	f383 8811 	msr	BASEPRI, r3
 810de3e:	f3bf 8f6f 	isb	sy
 810de42:	f3bf 8f4f 	dsb	sy
 810de46:	61fb      	str	r3, [r7, #28]
}
 810de48:	bf00      	nop
 810de4a:	bf00      	nop
 810de4c:	e7fd      	b.n	810de4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810de4e:	235c      	movs	r3, #92	@ 0x5c
 810de50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810de52:	693b      	ldr	r3, [r7, #16]
 810de54:	2b5c      	cmp	r3, #92	@ 0x5c
 810de56:	d00b      	beq.n	810de70 <xTaskCreateStatic+0x6c>
	__asm volatile
 810de58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de5c:	f383 8811 	msr	BASEPRI, r3
 810de60:	f3bf 8f6f 	isb	sy
 810de64:	f3bf 8f4f 	dsb	sy
 810de68:	61bb      	str	r3, [r7, #24]
}
 810de6a:	bf00      	nop
 810de6c:	bf00      	nop
 810de6e:	e7fd      	b.n	810de6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810de70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810de72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810de74:	2b00      	cmp	r3, #0
 810de76:	d01e      	beq.n	810deb6 <xTaskCreateStatic+0xb2>
 810de78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810de7a:	2b00      	cmp	r3, #0
 810de7c:	d01b      	beq.n	810deb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810de7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810de80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810de84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810de86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810de8a:	2202      	movs	r2, #2
 810de8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810de90:	2300      	movs	r3, #0
 810de92:	9303      	str	r3, [sp, #12]
 810de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810de96:	9302      	str	r3, [sp, #8]
 810de98:	f107 0314 	add.w	r3, r7, #20
 810de9c:	9301      	str	r3, [sp, #4]
 810de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dea0:	9300      	str	r3, [sp, #0]
 810dea2:	683b      	ldr	r3, [r7, #0]
 810dea4:	687a      	ldr	r2, [r7, #4]
 810dea6:	68b9      	ldr	r1, [r7, #8]
 810dea8:	68f8      	ldr	r0, [r7, #12]
 810deaa:	f000 f850 	bl	810df4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810deae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810deb0:	f000 f8de 	bl	810e070 <prvAddNewTaskToReadyList>
 810deb4:	e001      	b.n	810deba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810deb6:	2300      	movs	r3, #0
 810deb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810deba:	697b      	ldr	r3, [r7, #20]
	}
 810debc:	4618      	mov	r0, r3
 810debe:	3728      	adds	r7, #40	@ 0x28
 810dec0:	46bd      	mov	sp, r7
 810dec2:	bd80      	pop	{r7, pc}

0810dec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810dec4:	b580      	push	{r7, lr}
 810dec6:	b08c      	sub	sp, #48	@ 0x30
 810dec8:	af04      	add	r7, sp, #16
 810deca:	60f8      	str	r0, [r7, #12]
 810decc:	60b9      	str	r1, [r7, #8]
 810dece:	603b      	str	r3, [r7, #0]
 810ded0:	4613      	mov	r3, r2
 810ded2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810ded4:	88fb      	ldrh	r3, [r7, #6]
 810ded6:	009b      	lsls	r3, r3, #2
 810ded8:	4618      	mov	r0, r3
 810deda:	f7fe fa75 	bl	810c3c8 <pvPortMalloc>
 810dede:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810dee0:	697b      	ldr	r3, [r7, #20]
 810dee2:	2b00      	cmp	r3, #0
 810dee4:	d00e      	beq.n	810df04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810dee6:	205c      	movs	r0, #92	@ 0x5c
 810dee8:	f7fe fa6e 	bl	810c3c8 <pvPortMalloc>
 810deec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810deee:	69fb      	ldr	r3, [r7, #28]
 810def0:	2b00      	cmp	r3, #0
 810def2:	d003      	beq.n	810defc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810def4:	69fb      	ldr	r3, [r7, #28]
 810def6:	697a      	ldr	r2, [r7, #20]
 810def8:	631a      	str	r2, [r3, #48]	@ 0x30
 810defa:	e005      	b.n	810df08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810defc:	6978      	ldr	r0, [r7, #20]
 810defe:	f7fe fb31 	bl	810c564 <vPortFree>
 810df02:	e001      	b.n	810df08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810df04:	2300      	movs	r3, #0
 810df06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810df08:	69fb      	ldr	r3, [r7, #28]
 810df0a:	2b00      	cmp	r3, #0
 810df0c:	d017      	beq.n	810df3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810df0e:	69fb      	ldr	r3, [r7, #28]
 810df10:	2200      	movs	r2, #0
 810df12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810df16:	88fa      	ldrh	r2, [r7, #6]
 810df18:	2300      	movs	r3, #0
 810df1a:	9303      	str	r3, [sp, #12]
 810df1c:	69fb      	ldr	r3, [r7, #28]
 810df1e:	9302      	str	r3, [sp, #8]
 810df20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df22:	9301      	str	r3, [sp, #4]
 810df24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df26:	9300      	str	r3, [sp, #0]
 810df28:	683b      	ldr	r3, [r7, #0]
 810df2a:	68b9      	ldr	r1, [r7, #8]
 810df2c:	68f8      	ldr	r0, [r7, #12]
 810df2e:	f000 f80e 	bl	810df4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810df32:	69f8      	ldr	r0, [r7, #28]
 810df34:	f000 f89c 	bl	810e070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810df38:	2301      	movs	r3, #1
 810df3a:	61bb      	str	r3, [r7, #24]
 810df3c:	e002      	b.n	810df44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810df3e:	f04f 33ff 	mov.w	r3, #4294967295
 810df42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810df44:	69bb      	ldr	r3, [r7, #24]
	}
 810df46:	4618      	mov	r0, r3
 810df48:	3720      	adds	r7, #32
 810df4a:	46bd      	mov	sp, r7
 810df4c:	bd80      	pop	{r7, pc}

0810df4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810df4e:	b580      	push	{r7, lr}
 810df50:	b088      	sub	sp, #32
 810df52:	af00      	add	r7, sp, #0
 810df54:	60f8      	str	r0, [r7, #12]
 810df56:	60b9      	str	r1, [r7, #8]
 810df58:	607a      	str	r2, [r7, #4]
 810df5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810df5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810df5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810df60:	687b      	ldr	r3, [r7, #4]
 810df62:	009b      	lsls	r3, r3, #2
 810df64:	461a      	mov	r2, r3
 810df66:	21a5      	movs	r1, #165	@ 0xa5
 810df68:	f005 f837 	bl	8112fda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810df6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810df6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810df70:	687b      	ldr	r3, [r7, #4]
 810df72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810df76:	3b01      	subs	r3, #1
 810df78:	009b      	lsls	r3, r3, #2
 810df7a:	4413      	add	r3, r2
 810df7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810df7e:	69bb      	ldr	r3, [r7, #24]
 810df80:	f023 0307 	bic.w	r3, r3, #7
 810df84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810df86:	69bb      	ldr	r3, [r7, #24]
 810df88:	f003 0307 	and.w	r3, r3, #7
 810df8c:	2b00      	cmp	r3, #0
 810df8e:	d00b      	beq.n	810dfa8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810df90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810df94:	f383 8811 	msr	BASEPRI, r3
 810df98:	f3bf 8f6f 	isb	sy
 810df9c:	f3bf 8f4f 	dsb	sy
 810dfa0:	617b      	str	r3, [r7, #20]
}
 810dfa2:	bf00      	nop
 810dfa4:	bf00      	nop
 810dfa6:	e7fd      	b.n	810dfa4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810dfa8:	68bb      	ldr	r3, [r7, #8]
 810dfaa:	2b00      	cmp	r3, #0
 810dfac:	d01f      	beq.n	810dfee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810dfae:	2300      	movs	r3, #0
 810dfb0:	61fb      	str	r3, [r7, #28]
 810dfb2:	e012      	b.n	810dfda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810dfb4:	68ba      	ldr	r2, [r7, #8]
 810dfb6:	69fb      	ldr	r3, [r7, #28]
 810dfb8:	4413      	add	r3, r2
 810dfba:	7819      	ldrb	r1, [r3, #0]
 810dfbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dfbe:	69fb      	ldr	r3, [r7, #28]
 810dfc0:	4413      	add	r3, r2
 810dfc2:	3334      	adds	r3, #52	@ 0x34
 810dfc4:	460a      	mov	r2, r1
 810dfc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810dfc8:	68ba      	ldr	r2, [r7, #8]
 810dfca:	69fb      	ldr	r3, [r7, #28]
 810dfcc:	4413      	add	r3, r2
 810dfce:	781b      	ldrb	r3, [r3, #0]
 810dfd0:	2b00      	cmp	r3, #0
 810dfd2:	d006      	beq.n	810dfe2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810dfd4:	69fb      	ldr	r3, [r7, #28]
 810dfd6:	3301      	adds	r3, #1
 810dfd8:	61fb      	str	r3, [r7, #28]
 810dfda:	69fb      	ldr	r3, [r7, #28]
 810dfdc:	2b0f      	cmp	r3, #15
 810dfde:	d9e9      	bls.n	810dfb4 <prvInitialiseNewTask+0x66>
 810dfe0:	e000      	b.n	810dfe4 <prvInitialiseNewTask+0x96>
			{
				break;
 810dfe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810dfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dfe6:	2200      	movs	r2, #0
 810dfe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810dfec:	e003      	b.n	810dff6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810dfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dff0:	2200      	movs	r2, #0
 810dff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dff8:	2b37      	cmp	r3, #55	@ 0x37
 810dffa:	d901      	bls.n	810e000 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810dffc:	2337      	movs	r3, #55	@ 0x37
 810dffe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810e000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810e004:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810e006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810e00a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810e00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e00e:	2200      	movs	r2, #0
 810e010:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810e012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e014:	3304      	adds	r3, #4
 810e016:	4618      	mov	r0, r3
 810e018:	f7fe fbe4 	bl	810c7e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810e01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e01e:	3318      	adds	r3, #24
 810e020:	4618      	mov	r0, r3
 810e022:	f7fe fbdf 	bl	810c7e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810e026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e02e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e03a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810e03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e03e:	2200      	movs	r2, #0
 810e040:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810e042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e044:	2200      	movs	r2, #0
 810e046:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810e04a:	683a      	ldr	r2, [r7, #0]
 810e04c:	68f9      	ldr	r1, [r7, #12]
 810e04e:	69b8      	ldr	r0, [r7, #24]
 810e050:	f7fe fc5c 	bl	810c90c <pxPortInitialiseStack>
 810e054:	4602      	mov	r2, r0
 810e056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e05c:	2b00      	cmp	r3, #0
 810e05e:	d002      	beq.n	810e066 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e066:	bf00      	nop
 810e068:	3720      	adds	r7, #32
 810e06a:	46bd      	mov	sp, r7
 810e06c:	bd80      	pop	{r7, pc}
	...

0810e070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810e070:	b580      	push	{r7, lr}
 810e072:	b082      	sub	sp, #8
 810e074:	af00      	add	r7, sp, #0
 810e076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810e078:	f7fe fd76 	bl	810cb68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810e07c:	4b2d      	ldr	r3, [pc, #180]	@ (810e134 <prvAddNewTaskToReadyList+0xc4>)
 810e07e:	681b      	ldr	r3, [r3, #0]
 810e080:	3301      	adds	r3, #1
 810e082:	4a2c      	ldr	r2, [pc, #176]	@ (810e134 <prvAddNewTaskToReadyList+0xc4>)
 810e084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810e086:	4b2c      	ldr	r3, [pc, #176]	@ (810e138 <prvAddNewTaskToReadyList+0xc8>)
 810e088:	681b      	ldr	r3, [r3, #0]
 810e08a:	2b00      	cmp	r3, #0
 810e08c:	d109      	bne.n	810e0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810e08e:	4a2a      	ldr	r2, [pc, #168]	@ (810e138 <prvAddNewTaskToReadyList+0xc8>)
 810e090:	687b      	ldr	r3, [r7, #4]
 810e092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810e094:	4b27      	ldr	r3, [pc, #156]	@ (810e134 <prvAddNewTaskToReadyList+0xc4>)
 810e096:	681b      	ldr	r3, [r3, #0]
 810e098:	2b01      	cmp	r3, #1
 810e09a:	d110      	bne.n	810e0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810e09c:	f000 fc1e 	bl	810e8dc <prvInitialiseTaskLists>
 810e0a0:	e00d      	b.n	810e0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810e0a2:	4b26      	ldr	r3, [pc, #152]	@ (810e13c <prvAddNewTaskToReadyList+0xcc>)
 810e0a4:	681b      	ldr	r3, [r3, #0]
 810e0a6:	2b00      	cmp	r3, #0
 810e0a8:	d109      	bne.n	810e0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810e0aa:	4b23      	ldr	r3, [pc, #140]	@ (810e138 <prvAddNewTaskToReadyList+0xc8>)
 810e0ac:	681b      	ldr	r3, [r3, #0]
 810e0ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e0b0:	687b      	ldr	r3, [r7, #4]
 810e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0b4:	429a      	cmp	r2, r3
 810e0b6:	d802      	bhi.n	810e0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810e0b8:	4a1f      	ldr	r2, [pc, #124]	@ (810e138 <prvAddNewTaskToReadyList+0xc8>)
 810e0ba:	687b      	ldr	r3, [r7, #4]
 810e0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810e0be:	4b20      	ldr	r3, [pc, #128]	@ (810e140 <prvAddNewTaskToReadyList+0xd0>)
 810e0c0:	681b      	ldr	r3, [r3, #0]
 810e0c2:	3301      	adds	r3, #1
 810e0c4:	4a1e      	ldr	r2, [pc, #120]	@ (810e140 <prvAddNewTaskToReadyList+0xd0>)
 810e0c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810e0c8:	4b1d      	ldr	r3, [pc, #116]	@ (810e140 <prvAddNewTaskToReadyList+0xd0>)
 810e0ca:	681a      	ldr	r2, [r3, #0]
 810e0cc:	687b      	ldr	r3, [r7, #4]
 810e0ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810e0d0:	687b      	ldr	r3, [r7, #4]
 810e0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e0d4:	4b1b      	ldr	r3, [pc, #108]	@ (810e144 <prvAddNewTaskToReadyList+0xd4>)
 810e0d6:	681b      	ldr	r3, [r3, #0]
 810e0d8:	429a      	cmp	r2, r3
 810e0da:	d903      	bls.n	810e0e4 <prvAddNewTaskToReadyList+0x74>
 810e0dc:	687b      	ldr	r3, [r7, #4]
 810e0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0e0:	4a18      	ldr	r2, [pc, #96]	@ (810e144 <prvAddNewTaskToReadyList+0xd4>)
 810e0e2:	6013      	str	r3, [r2, #0]
 810e0e4:	687b      	ldr	r3, [r7, #4]
 810e0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e0e8:	4613      	mov	r3, r2
 810e0ea:	009b      	lsls	r3, r3, #2
 810e0ec:	4413      	add	r3, r2
 810e0ee:	009b      	lsls	r3, r3, #2
 810e0f0:	4a15      	ldr	r2, [pc, #84]	@ (810e148 <prvAddNewTaskToReadyList+0xd8>)
 810e0f2:	441a      	add	r2, r3
 810e0f4:	687b      	ldr	r3, [r7, #4]
 810e0f6:	3304      	adds	r3, #4
 810e0f8:	4619      	mov	r1, r3
 810e0fa:	4610      	mov	r0, r2
 810e0fc:	f7fe fb7f 	bl	810c7fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810e100:	f7fe fd64 	bl	810cbcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810e104:	4b0d      	ldr	r3, [pc, #52]	@ (810e13c <prvAddNewTaskToReadyList+0xcc>)
 810e106:	681b      	ldr	r3, [r3, #0]
 810e108:	2b00      	cmp	r3, #0
 810e10a:	d00e      	beq.n	810e12a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810e10c:	4b0a      	ldr	r3, [pc, #40]	@ (810e138 <prvAddNewTaskToReadyList+0xc8>)
 810e10e:	681b      	ldr	r3, [r3, #0]
 810e110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e112:	687b      	ldr	r3, [r7, #4]
 810e114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e116:	429a      	cmp	r2, r3
 810e118:	d207      	bcs.n	810e12a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810e11a:	4b0c      	ldr	r3, [pc, #48]	@ (810e14c <prvAddNewTaskToReadyList+0xdc>)
 810e11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e120:	601a      	str	r2, [r3, #0]
 810e122:	f3bf 8f4f 	dsb	sy
 810e126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e12a:	bf00      	nop
 810e12c:	3708      	adds	r7, #8
 810e12e:	46bd      	mov	sp, r7
 810e130:	bd80      	pop	{r7, pc}
 810e132:	bf00      	nop
 810e134:	10004e28 	.word	0x10004e28
 810e138:	10004954 	.word	0x10004954
 810e13c:	10004e34 	.word	0x10004e34
 810e140:	10004e44 	.word	0x10004e44
 810e144:	10004e30 	.word	0x10004e30
 810e148:	10004958 	.word	0x10004958
 810e14c:	e000ed04 	.word	0xe000ed04

0810e150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810e150:	b580      	push	{r7, lr}
 810e152:	b084      	sub	sp, #16
 810e154:	af00      	add	r7, sp, #0
 810e156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810e158:	2300      	movs	r3, #0
 810e15a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810e15c:	687b      	ldr	r3, [r7, #4]
 810e15e:	2b00      	cmp	r3, #0
 810e160:	d018      	beq.n	810e194 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810e162:	4b14      	ldr	r3, [pc, #80]	@ (810e1b4 <vTaskDelay+0x64>)
 810e164:	681b      	ldr	r3, [r3, #0]
 810e166:	2b00      	cmp	r3, #0
 810e168:	d00b      	beq.n	810e182 <vTaskDelay+0x32>
	__asm volatile
 810e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e16e:	f383 8811 	msr	BASEPRI, r3
 810e172:	f3bf 8f6f 	isb	sy
 810e176:	f3bf 8f4f 	dsb	sy
 810e17a:	60bb      	str	r3, [r7, #8]
}
 810e17c:	bf00      	nop
 810e17e:	bf00      	nop
 810e180:	e7fd      	b.n	810e17e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810e182:	f000 f883 	bl	810e28c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810e186:	2100      	movs	r1, #0
 810e188:	6878      	ldr	r0, [r7, #4]
 810e18a:	f000 ff89 	bl	810f0a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810e18e:	f000 f88b 	bl	810e2a8 <xTaskResumeAll>
 810e192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810e194:	68fb      	ldr	r3, [r7, #12]
 810e196:	2b00      	cmp	r3, #0
 810e198:	d107      	bne.n	810e1aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810e19a:	4b07      	ldr	r3, [pc, #28]	@ (810e1b8 <vTaskDelay+0x68>)
 810e19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e1a0:	601a      	str	r2, [r3, #0]
 810e1a2:	f3bf 8f4f 	dsb	sy
 810e1a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e1aa:	bf00      	nop
 810e1ac:	3710      	adds	r7, #16
 810e1ae:	46bd      	mov	sp, r7
 810e1b0:	bd80      	pop	{r7, pc}
 810e1b2:	bf00      	nop
 810e1b4:	10004e50 	.word	0x10004e50
 810e1b8:	e000ed04 	.word	0xe000ed04

0810e1bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810e1bc:	b580      	push	{r7, lr}
 810e1be:	b08a      	sub	sp, #40	@ 0x28
 810e1c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810e1c2:	2300      	movs	r3, #0
 810e1c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810e1c6:	2300      	movs	r3, #0
 810e1c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810e1ca:	463a      	mov	r2, r7
 810e1cc:	1d39      	adds	r1, r7, #4
 810e1ce:	f107 0308 	add.w	r3, r7, #8
 810e1d2:	4618      	mov	r0, r3
 810e1d4:	f7fe f8c4 	bl	810c360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810e1d8:	6839      	ldr	r1, [r7, #0]
 810e1da:	687b      	ldr	r3, [r7, #4]
 810e1dc:	68ba      	ldr	r2, [r7, #8]
 810e1de:	9202      	str	r2, [sp, #8]
 810e1e0:	9301      	str	r3, [sp, #4]
 810e1e2:	2300      	movs	r3, #0
 810e1e4:	9300      	str	r3, [sp, #0]
 810e1e6:	2300      	movs	r3, #0
 810e1e8:	460a      	mov	r2, r1
 810e1ea:	4922      	ldr	r1, [pc, #136]	@ (810e274 <vTaskStartScheduler+0xb8>)
 810e1ec:	4822      	ldr	r0, [pc, #136]	@ (810e278 <vTaskStartScheduler+0xbc>)
 810e1ee:	f7ff fe09 	bl	810de04 <xTaskCreateStatic>
 810e1f2:	4603      	mov	r3, r0
 810e1f4:	4a21      	ldr	r2, [pc, #132]	@ (810e27c <vTaskStartScheduler+0xc0>)
 810e1f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810e1f8:	4b20      	ldr	r3, [pc, #128]	@ (810e27c <vTaskStartScheduler+0xc0>)
 810e1fa:	681b      	ldr	r3, [r3, #0]
 810e1fc:	2b00      	cmp	r3, #0
 810e1fe:	d002      	beq.n	810e206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810e200:	2301      	movs	r3, #1
 810e202:	617b      	str	r3, [r7, #20]
 810e204:	e001      	b.n	810e20a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810e206:	2300      	movs	r3, #0
 810e208:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810e20a:	697b      	ldr	r3, [r7, #20]
 810e20c:	2b01      	cmp	r3, #1
 810e20e:	d102      	bne.n	810e216 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810e210:	f000 ff9a 	bl	810f148 <xTimerCreateTimerTask>
 810e214:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810e216:	697b      	ldr	r3, [r7, #20]
 810e218:	2b01      	cmp	r3, #1
 810e21a:	d116      	bne.n	810e24a <vTaskStartScheduler+0x8e>
	__asm volatile
 810e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e220:	f383 8811 	msr	BASEPRI, r3
 810e224:	f3bf 8f6f 	isb	sy
 810e228:	f3bf 8f4f 	dsb	sy
 810e22c:	613b      	str	r3, [r7, #16]
}
 810e22e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810e230:	4b13      	ldr	r3, [pc, #76]	@ (810e280 <vTaskStartScheduler+0xc4>)
 810e232:	f04f 32ff 	mov.w	r2, #4294967295
 810e236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810e238:	4b12      	ldr	r3, [pc, #72]	@ (810e284 <vTaskStartScheduler+0xc8>)
 810e23a:	2201      	movs	r2, #1
 810e23c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810e23e:	4b12      	ldr	r3, [pc, #72]	@ (810e288 <vTaskStartScheduler+0xcc>)
 810e240:	2200      	movs	r2, #0
 810e242:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810e244:	f7fe fbec 	bl	810ca20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810e248:	e00f      	b.n	810e26a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810e24a:	697b      	ldr	r3, [r7, #20]
 810e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e250:	d10b      	bne.n	810e26a <vTaskStartScheduler+0xae>
	__asm volatile
 810e252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e256:	f383 8811 	msr	BASEPRI, r3
 810e25a:	f3bf 8f6f 	isb	sy
 810e25e:	f3bf 8f4f 	dsb	sy
 810e262:	60fb      	str	r3, [r7, #12]
}
 810e264:	bf00      	nop
 810e266:	bf00      	nop
 810e268:	e7fd      	b.n	810e266 <vTaskStartScheduler+0xaa>
}
 810e26a:	bf00      	nop
 810e26c:	3718      	adds	r7, #24
 810e26e:	46bd      	mov	sp, r7
 810e270:	bd80      	pop	{r7, pc}
 810e272:	bf00      	nop
 810e274:	08117518 	.word	0x08117518
 810e278:	0810e8ad 	.word	0x0810e8ad
 810e27c:	10004e4c 	.word	0x10004e4c
 810e280:	10004e48 	.word	0x10004e48
 810e284:	10004e34 	.word	0x10004e34
 810e288:	10004e2c 	.word	0x10004e2c

0810e28c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810e28c:	b480      	push	{r7}
 810e28e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810e290:	4b04      	ldr	r3, [pc, #16]	@ (810e2a4 <vTaskSuspendAll+0x18>)
 810e292:	681b      	ldr	r3, [r3, #0]
 810e294:	3301      	adds	r3, #1
 810e296:	4a03      	ldr	r2, [pc, #12]	@ (810e2a4 <vTaskSuspendAll+0x18>)
 810e298:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810e29a:	bf00      	nop
 810e29c:	46bd      	mov	sp, r7
 810e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2a2:	4770      	bx	lr
 810e2a4:	10004e50 	.word	0x10004e50

0810e2a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810e2a8:	b580      	push	{r7, lr}
 810e2aa:	b084      	sub	sp, #16
 810e2ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810e2ae:	2300      	movs	r3, #0
 810e2b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810e2b2:	2300      	movs	r3, #0
 810e2b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810e2b6:	4b42      	ldr	r3, [pc, #264]	@ (810e3c0 <xTaskResumeAll+0x118>)
 810e2b8:	681b      	ldr	r3, [r3, #0]
 810e2ba:	2b00      	cmp	r3, #0
 810e2bc:	d10b      	bne.n	810e2d6 <xTaskResumeAll+0x2e>
	__asm volatile
 810e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e2c2:	f383 8811 	msr	BASEPRI, r3
 810e2c6:	f3bf 8f6f 	isb	sy
 810e2ca:	f3bf 8f4f 	dsb	sy
 810e2ce:	603b      	str	r3, [r7, #0]
}
 810e2d0:	bf00      	nop
 810e2d2:	bf00      	nop
 810e2d4:	e7fd      	b.n	810e2d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810e2d6:	f7fe fc47 	bl	810cb68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810e2da:	4b39      	ldr	r3, [pc, #228]	@ (810e3c0 <xTaskResumeAll+0x118>)
 810e2dc:	681b      	ldr	r3, [r3, #0]
 810e2de:	3b01      	subs	r3, #1
 810e2e0:	4a37      	ldr	r2, [pc, #220]	@ (810e3c0 <xTaskResumeAll+0x118>)
 810e2e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e2e4:	4b36      	ldr	r3, [pc, #216]	@ (810e3c0 <xTaskResumeAll+0x118>)
 810e2e6:	681b      	ldr	r3, [r3, #0]
 810e2e8:	2b00      	cmp	r3, #0
 810e2ea:	d162      	bne.n	810e3b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810e2ec:	4b35      	ldr	r3, [pc, #212]	@ (810e3c4 <xTaskResumeAll+0x11c>)
 810e2ee:	681b      	ldr	r3, [r3, #0]
 810e2f0:	2b00      	cmp	r3, #0
 810e2f2:	d05e      	beq.n	810e3b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810e2f4:	e02f      	b.n	810e356 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e2f6:	4b34      	ldr	r3, [pc, #208]	@ (810e3c8 <xTaskResumeAll+0x120>)
 810e2f8:	68db      	ldr	r3, [r3, #12]
 810e2fa:	68db      	ldr	r3, [r3, #12]
 810e2fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e2fe:	68fb      	ldr	r3, [r7, #12]
 810e300:	3318      	adds	r3, #24
 810e302:	4618      	mov	r0, r3
 810e304:	f7fe fad8 	bl	810c8b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e308:	68fb      	ldr	r3, [r7, #12]
 810e30a:	3304      	adds	r3, #4
 810e30c:	4618      	mov	r0, r3
 810e30e:	f7fe fad3 	bl	810c8b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810e312:	68fb      	ldr	r3, [r7, #12]
 810e314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e316:	4b2d      	ldr	r3, [pc, #180]	@ (810e3cc <xTaskResumeAll+0x124>)
 810e318:	681b      	ldr	r3, [r3, #0]
 810e31a:	429a      	cmp	r2, r3
 810e31c:	d903      	bls.n	810e326 <xTaskResumeAll+0x7e>
 810e31e:	68fb      	ldr	r3, [r7, #12]
 810e320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e322:	4a2a      	ldr	r2, [pc, #168]	@ (810e3cc <xTaskResumeAll+0x124>)
 810e324:	6013      	str	r3, [r2, #0]
 810e326:	68fb      	ldr	r3, [r7, #12]
 810e328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e32a:	4613      	mov	r3, r2
 810e32c:	009b      	lsls	r3, r3, #2
 810e32e:	4413      	add	r3, r2
 810e330:	009b      	lsls	r3, r3, #2
 810e332:	4a27      	ldr	r2, [pc, #156]	@ (810e3d0 <xTaskResumeAll+0x128>)
 810e334:	441a      	add	r2, r3
 810e336:	68fb      	ldr	r3, [r7, #12]
 810e338:	3304      	adds	r3, #4
 810e33a:	4619      	mov	r1, r3
 810e33c:	4610      	mov	r0, r2
 810e33e:	f7fe fa5e 	bl	810c7fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e342:	68fb      	ldr	r3, [r7, #12]
 810e344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e346:	4b23      	ldr	r3, [pc, #140]	@ (810e3d4 <xTaskResumeAll+0x12c>)
 810e348:	681b      	ldr	r3, [r3, #0]
 810e34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e34c:	429a      	cmp	r2, r3
 810e34e:	d302      	bcc.n	810e356 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810e350:	4b21      	ldr	r3, [pc, #132]	@ (810e3d8 <xTaskResumeAll+0x130>)
 810e352:	2201      	movs	r2, #1
 810e354:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810e356:	4b1c      	ldr	r3, [pc, #112]	@ (810e3c8 <xTaskResumeAll+0x120>)
 810e358:	681b      	ldr	r3, [r3, #0]
 810e35a:	2b00      	cmp	r3, #0
 810e35c:	d1cb      	bne.n	810e2f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810e35e:	68fb      	ldr	r3, [r7, #12]
 810e360:	2b00      	cmp	r3, #0
 810e362:	d001      	beq.n	810e368 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810e364:	f000 fb58 	bl	810ea18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810e368:	4b1c      	ldr	r3, [pc, #112]	@ (810e3dc <xTaskResumeAll+0x134>)
 810e36a:	681b      	ldr	r3, [r3, #0]
 810e36c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810e36e:	687b      	ldr	r3, [r7, #4]
 810e370:	2b00      	cmp	r3, #0
 810e372:	d010      	beq.n	810e396 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810e374:	f000 f846 	bl	810e404 <xTaskIncrementTick>
 810e378:	4603      	mov	r3, r0
 810e37a:	2b00      	cmp	r3, #0
 810e37c:	d002      	beq.n	810e384 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810e37e:	4b16      	ldr	r3, [pc, #88]	@ (810e3d8 <xTaskResumeAll+0x130>)
 810e380:	2201      	movs	r2, #1
 810e382:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810e384:	687b      	ldr	r3, [r7, #4]
 810e386:	3b01      	subs	r3, #1
 810e388:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810e38a:	687b      	ldr	r3, [r7, #4]
 810e38c:	2b00      	cmp	r3, #0
 810e38e:	d1f1      	bne.n	810e374 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810e390:	4b12      	ldr	r3, [pc, #72]	@ (810e3dc <xTaskResumeAll+0x134>)
 810e392:	2200      	movs	r2, #0
 810e394:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810e396:	4b10      	ldr	r3, [pc, #64]	@ (810e3d8 <xTaskResumeAll+0x130>)
 810e398:	681b      	ldr	r3, [r3, #0]
 810e39a:	2b00      	cmp	r3, #0
 810e39c:	d009      	beq.n	810e3b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810e39e:	2301      	movs	r3, #1
 810e3a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810e3a2:	4b0f      	ldr	r3, [pc, #60]	@ (810e3e0 <xTaskResumeAll+0x138>)
 810e3a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e3a8:	601a      	str	r2, [r3, #0]
 810e3aa:	f3bf 8f4f 	dsb	sy
 810e3ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810e3b2:	f7fe fc0b 	bl	810cbcc <vPortExitCritical>

	return xAlreadyYielded;
 810e3b6:	68bb      	ldr	r3, [r7, #8]
}
 810e3b8:	4618      	mov	r0, r3
 810e3ba:	3710      	adds	r7, #16
 810e3bc:	46bd      	mov	sp, r7
 810e3be:	bd80      	pop	{r7, pc}
 810e3c0:	10004e50 	.word	0x10004e50
 810e3c4:	10004e28 	.word	0x10004e28
 810e3c8:	10004de8 	.word	0x10004de8
 810e3cc:	10004e30 	.word	0x10004e30
 810e3d0:	10004958 	.word	0x10004958
 810e3d4:	10004954 	.word	0x10004954
 810e3d8:	10004e3c 	.word	0x10004e3c
 810e3dc:	10004e38 	.word	0x10004e38
 810e3e0:	e000ed04 	.word	0xe000ed04

0810e3e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810e3e4:	b480      	push	{r7}
 810e3e6:	b083      	sub	sp, #12
 810e3e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810e3ea:	4b05      	ldr	r3, [pc, #20]	@ (810e400 <xTaskGetTickCount+0x1c>)
 810e3ec:	681b      	ldr	r3, [r3, #0]
 810e3ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810e3f0:	687b      	ldr	r3, [r7, #4]
}
 810e3f2:	4618      	mov	r0, r3
 810e3f4:	370c      	adds	r7, #12
 810e3f6:	46bd      	mov	sp, r7
 810e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3fc:	4770      	bx	lr
 810e3fe:	bf00      	nop
 810e400:	10004e2c 	.word	0x10004e2c

0810e404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810e404:	b580      	push	{r7, lr}
 810e406:	b086      	sub	sp, #24
 810e408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810e40a:	2300      	movs	r3, #0
 810e40c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e40e:	4b4f      	ldr	r3, [pc, #316]	@ (810e54c <xTaskIncrementTick+0x148>)
 810e410:	681b      	ldr	r3, [r3, #0]
 810e412:	2b00      	cmp	r3, #0
 810e414:	f040 8090 	bne.w	810e538 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810e418:	4b4d      	ldr	r3, [pc, #308]	@ (810e550 <xTaskIncrementTick+0x14c>)
 810e41a:	681b      	ldr	r3, [r3, #0]
 810e41c:	3301      	adds	r3, #1
 810e41e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810e420:	4a4b      	ldr	r2, [pc, #300]	@ (810e550 <xTaskIncrementTick+0x14c>)
 810e422:	693b      	ldr	r3, [r7, #16]
 810e424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810e426:	693b      	ldr	r3, [r7, #16]
 810e428:	2b00      	cmp	r3, #0
 810e42a:	d121      	bne.n	810e470 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810e42c:	4b49      	ldr	r3, [pc, #292]	@ (810e554 <xTaskIncrementTick+0x150>)
 810e42e:	681b      	ldr	r3, [r3, #0]
 810e430:	681b      	ldr	r3, [r3, #0]
 810e432:	2b00      	cmp	r3, #0
 810e434:	d00b      	beq.n	810e44e <xTaskIncrementTick+0x4a>
	__asm volatile
 810e436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e43a:	f383 8811 	msr	BASEPRI, r3
 810e43e:	f3bf 8f6f 	isb	sy
 810e442:	f3bf 8f4f 	dsb	sy
 810e446:	603b      	str	r3, [r7, #0]
}
 810e448:	bf00      	nop
 810e44a:	bf00      	nop
 810e44c:	e7fd      	b.n	810e44a <xTaskIncrementTick+0x46>
 810e44e:	4b41      	ldr	r3, [pc, #260]	@ (810e554 <xTaskIncrementTick+0x150>)
 810e450:	681b      	ldr	r3, [r3, #0]
 810e452:	60fb      	str	r3, [r7, #12]
 810e454:	4b40      	ldr	r3, [pc, #256]	@ (810e558 <xTaskIncrementTick+0x154>)
 810e456:	681b      	ldr	r3, [r3, #0]
 810e458:	4a3e      	ldr	r2, [pc, #248]	@ (810e554 <xTaskIncrementTick+0x150>)
 810e45a:	6013      	str	r3, [r2, #0]
 810e45c:	4a3e      	ldr	r2, [pc, #248]	@ (810e558 <xTaskIncrementTick+0x154>)
 810e45e:	68fb      	ldr	r3, [r7, #12]
 810e460:	6013      	str	r3, [r2, #0]
 810e462:	4b3e      	ldr	r3, [pc, #248]	@ (810e55c <xTaskIncrementTick+0x158>)
 810e464:	681b      	ldr	r3, [r3, #0]
 810e466:	3301      	adds	r3, #1
 810e468:	4a3c      	ldr	r2, [pc, #240]	@ (810e55c <xTaskIncrementTick+0x158>)
 810e46a:	6013      	str	r3, [r2, #0]
 810e46c:	f000 fad4 	bl	810ea18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810e470:	4b3b      	ldr	r3, [pc, #236]	@ (810e560 <xTaskIncrementTick+0x15c>)
 810e472:	681b      	ldr	r3, [r3, #0]
 810e474:	693a      	ldr	r2, [r7, #16]
 810e476:	429a      	cmp	r2, r3
 810e478:	d349      	bcc.n	810e50e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e47a:	4b36      	ldr	r3, [pc, #216]	@ (810e554 <xTaskIncrementTick+0x150>)
 810e47c:	681b      	ldr	r3, [r3, #0]
 810e47e:	681b      	ldr	r3, [r3, #0]
 810e480:	2b00      	cmp	r3, #0
 810e482:	d104      	bne.n	810e48e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e484:	4b36      	ldr	r3, [pc, #216]	@ (810e560 <xTaskIncrementTick+0x15c>)
 810e486:	f04f 32ff 	mov.w	r2, #4294967295
 810e48a:	601a      	str	r2, [r3, #0]
					break;
 810e48c:	e03f      	b.n	810e50e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e48e:	4b31      	ldr	r3, [pc, #196]	@ (810e554 <xTaskIncrementTick+0x150>)
 810e490:	681b      	ldr	r3, [r3, #0]
 810e492:	68db      	ldr	r3, [r3, #12]
 810e494:	68db      	ldr	r3, [r3, #12]
 810e496:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810e498:	68bb      	ldr	r3, [r7, #8]
 810e49a:	685b      	ldr	r3, [r3, #4]
 810e49c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810e49e:	693a      	ldr	r2, [r7, #16]
 810e4a0:	687b      	ldr	r3, [r7, #4]
 810e4a2:	429a      	cmp	r2, r3
 810e4a4:	d203      	bcs.n	810e4ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810e4a6:	4a2e      	ldr	r2, [pc, #184]	@ (810e560 <xTaskIncrementTick+0x15c>)
 810e4a8:	687b      	ldr	r3, [r7, #4]
 810e4aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810e4ac:	e02f      	b.n	810e50e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e4ae:	68bb      	ldr	r3, [r7, #8]
 810e4b0:	3304      	adds	r3, #4
 810e4b2:	4618      	mov	r0, r3
 810e4b4:	f7fe fa00 	bl	810c8b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810e4b8:	68bb      	ldr	r3, [r7, #8]
 810e4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e4bc:	2b00      	cmp	r3, #0
 810e4be:	d004      	beq.n	810e4ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e4c0:	68bb      	ldr	r3, [r7, #8]
 810e4c2:	3318      	adds	r3, #24
 810e4c4:	4618      	mov	r0, r3
 810e4c6:	f7fe f9f7 	bl	810c8b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810e4ca:	68bb      	ldr	r3, [r7, #8]
 810e4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e4ce:	4b25      	ldr	r3, [pc, #148]	@ (810e564 <xTaskIncrementTick+0x160>)
 810e4d0:	681b      	ldr	r3, [r3, #0]
 810e4d2:	429a      	cmp	r2, r3
 810e4d4:	d903      	bls.n	810e4de <xTaskIncrementTick+0xda>
 810e4d6:	68bb      	ldr	r3, [r7, #8]
 810e4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e4da:	4a22      	ldr	r2, [pc, #136]	@ (810e564 <xTaskIncrementTick+0x160>)
 810e4dc:	6013      	str	r3, [r2, #0]
 810e4de:	68bb      	ldr	r3, [r7, #8]
 810e4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e4e2:	4613      	mov	r3, r2
 810e4e4:	009b      	lsls	r3, r3, #2
 810e4e6:	4413      	add	r3, r2
 810e4e8:	009b      	lsls	r3, r3, #2
 810e4ea:	4a1f      	ldr	r2, [pc, #124]	@ (810e568 <xTaskIncrementTick+0x164>)
 810e4ec:	441a      	add	r2, r3
 810e4ee:	68bb      	ldr	r3, [r7, #8]
 810e4f0:	3304      	adds	r3, #4
 810e4f2:	4619      	mov	r1, r3
 810e4f4:	4610      	mov	r0, r2
 810e4f6:	f7fe f982 	bl	810c7fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e4fa:	68bb      	ldr	r3, [r7, #8]
 810e4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e4fe:	4b1b      	ldr	r3, [pc, #108]	@ (810e56c <xTaskIncrementTick+0x168>)
 810e500:	681b      	ldr	r3, [r3, #0]
 810e502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e504:	429a      	cmp	r2, r3
 810e506:	d3b8      	bcc.n	810e47a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810e508:	2301      	movs	r3, #1
 810e50a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e50c:	e7b5      	b.n	810e47a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810e50e:	4b17      	ldr	r3, [pc, #92]	@ (810e56c <xTaskIncrementTick+0x168>)
 810e510:	681b      	ldr	r3, [r3, #0]
 810e512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e514:	4914      	ldr	r1, [pc, #80]	@ (810e568 <xTaskIncrementTick+0x164>)
 810e516:	4613      	mov	r3, r2
 810e518:	009b      	lsls	r3, r3, #2
 810e51a:	4413      	add	r3, r2
 810e51c:	009b      	lsls	r3, r3, #2
 810e51e:	440b      	add	r3, r1
 810e520:	681b      	ldr	r3, [r3, #0]
 810e522:	2b01      	cmp	r3, #1
 810e524:	d901      	bls.n	810e52a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810e526:	2301      	movs	r3, #1
 810e528:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810e52a:	4b11      	ldr	r3, [pc, #68]	@ (810e570 <xTaskIncrementTick+0x16c>)
 810e52c:	681b      	ldr	r3, [r3, #0]
 810e52e:	2b00      	cmp	r3, #0
 810e530:	d007      	beq.n	810e542 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810e532:	2301      	movs	r3, #1
 810e534:	617b      	str	r3, [r7, #20]
 810e536:	e004      	b.n	810e542 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810e538:	4b0e      	ldr	r3, [pc, #56]	@ (810e574 <xTaskIncrementTick+0x170>)
 810e53a:	681b      	ldr	r3, [r3, #0]
 810e53c:	3301      	adds	r3, #1
 810e53e:	4a0d      	ldr	r2, [pc, #52]	@ (810e574 <xTaskIncrementTick+0x170>)
 810e540:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810e542:	697b      	ldr	r3, [r7, #20]
}
 810e544:	4618      	mov	r0, r3
 810e546:	3718      	adds	r7, #24
 810e548:	46bd      	mov	sp, r7
 810e54a:	bd80      	pop	{r7, pc}
 810e54c:	10004e50 	.word	0x10004e50
 810e550:	10004e2c 	.word	0x10004e2c
 810e554:	10004de0 	.word	0x10004de0
 810e558:	10004de4 	.word	0x10004de4
 810e55c:	10004e40 	.word	0x10004e40
 810e560:	10004e48 	.word	0x10004e48
 810e564:	10004e30 	.word	0x10004e30
 810e568:	10004958 	.word	0x10004958
 810e56c:	10004954 	.word	0x10004954
 810e570:	10004e3c 	.word	0x10004e3c
 810e574:	10004e38 	.word	0x10004e38

0810e578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810e578:	b480      	push	{r7}
 810e57a:	b085      	sub	sp, #20
 810e57c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810e57e:	4b28      	ldr	r3, [pc, #160]	@ (810e620 <vTaskSwitchContext+0xa8>)
 810e580:	681b      	ldr	r3, [r3, #0]
 810e582:	2b00      	cmp	r3, #0
 810e584:	d003      	beq.n	810e58e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810e586:	4b27      	ldr	r3, [pc, #156]	@ (810e624 <vTaskSwitchContext+0xac>)
 810e588:	2201      	movs	r2, #1
 810e58a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810e58c:	e042      	b.n	810e614 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810e58e:	4b25      	ldr	r3, [pc, #148]	@ (810e624 <vTaskSwitchContext+0xac>)
 810e590:	2200      	movs	r2, #0
 810e592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e594:	4b24      	ldr	r3, [pc, #144]	@ (810e628 <vTaskSwitchContext+0xb0>)
 810e596:	681b      	ldr	r3, [r3, #0]
 810e598:	60fb      	str	r3, [r7, #12]
 810e59a:	e011      	b.n	810e5c0 <vTaskSwitchContext+0x48>
 810e59c:	68fb      	ldr	r3, [r7, #12]
 810e59e:	2b00      	cmp	r3, #0
 810e5a0:	d10b      	bne.n	810e5ba <vTaskSwitchContext+0x42>
	__asm volatile
 810e5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e5a6:	f383 8811 	msr	BASEPRI, r3
 810e5aa:	f3bf 8f6f 	isb	sy
 810e5ae:	f3bf 8f4f 	dsb	sy
 810e5b2:	607b      	str	r3, [r7, #4]
}
 810e5b4:	bf00      	nop
 810e5b6:	bf00      	nop
 810e5b8:	e7fd      	b.n	810e5b6 <vTaskSwitchContext+0x3e>
 810e5ba:	68fb      	ldr	r3, [r7, #12]
 810e5bc:	3b01      	subs	r3, #1
 810e5be:	60fb      	str	r3, [r7, #12]
 810e5c0:	491a      	ldr	r1, [pc, #104]	@ (810e62c <vTaskSwitchContext+0xb4>)
 810e5c2:	68fa      	ldr	r2, [r7, #12]
 810e5c4:	4613      	mov	r3, r2
 810e5c6:	009b      	lsls	r3, r3, #2
 810e5c8:	4413      	add	r3, r2
 810e5ca:	009b      	lsls	r3, r3, #2
 810e5cc:	440b      	add	r3, r1
 810e5ce:	681b      	ldr	r3, [r3, #0]
 810e5d0:	2b00      	cmp	r3, #0
 810e5d2:	d0e3      	beq.n	810e59c <vTaskSwitchContext+0x24>
 810e5d4:	68fa      	ldr	r2, [r7, #12]
 810e5d6:	4613      	mov	r3, r2
 810e5d8:	009b      	lsls	r3, r3, #2
 810e5da:	4413      	add	r3, r2
 810e5dc:	009b      	lsls	r3, r3, #2
 810e5de:	4a13      	ldr	r2, [pc, #76]	@ (810e62c <vTaskSwitchContext+0xb4>)
 810e5e0:	4413      	add	r3, r2
 810e5e2:	60bb      	str	r3, [r7, #8]
 810e5e4:	68bb      	ldr	r3, [r7, #8]
 810e5e6:	685b      	ldr	r3, [r3, #4]
 810e5e8:	685a      	ldr	r2, [r3, #4]
 810e5ea:	68bb      	ldr	r3, [r7, #8]
 810e5ec:	605a      	str	r2, [r3, #4]
 810e5ee:	68bb      	ldr	r3, [r7, #8]
 810e5f0:	685a      	ldr	r2, [r3, #4]
 810e5f2:	68bb      	ldr	r3, [r7, #8]
 810e5f4:	3308      	adds	r3, #8
 810e5f6:	429a      	cmp	r2, r3
 810e5f8:	d104      	bne.n	810e604 <vTaskSwitchContext+0x8c>
 810e5fa:	68bb      	ldr	r3, [r7, #8]
 810e5fc:	685b      	ldr	r3, [r3, #4]
 810e5fe:	685a      	ldr	r2, [r3, #4]
 810e600:	68bb      	ldr	r3, [r7, #8]
 810e602:	605a      	str	r2, [r3, #4]
 810e604:	68bb      	ldr	r3, [r7, #8]
 810e606:	685b      	ldr	r3, [r3, #4]
 810e608:	68db      	ldr	r3, [r3, #12]
 810e60a:	4a09      	ldr	r2, [pc, #36]	@ (810e630 <vTaskSwitchContext+0xb8>)
 810e60c:	6013      	str	r3, [r2, #0]
 810e60e:	4a06      	ldr	r2, [pc, #24]	@ (810e628 <vTaskSwitchContext+0xb0>)
 810e610:	68fb      	ldr	r3, [r7, #12]
 810e612:	6013      	str	r3, [r2, #0]
}
 810e614:	bf00      	nop
 810e616:	3714      	adds	r7, #20
 810e618:	46bd      	mov	sp, r7
 810e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e61e:	4770      	bx	lr
 810e620:	10004e50 	.word	0x10004e50
 810e624:	10004e3c 	.word	0x10004e3c
 810e628:	10004e30 	.word	0x10004e30
 810e62c:	10004958 	.word	0x10004958
 810e630:	10004954 	.word	0x10004954

0810e634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810e634:	b580      	push	{r7, lr}
 810e636:	b084      	sub	sp, #16
 810e638:	af00      	add	r7, sp, #0
 810e63a:	6078      	str	r0, [r7, #4]
 810e63c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810e63e:	687b      	ldr	r3, [r7, #4]
 810e640:	2b00      	cmp	r3, #0
 810e642:	d10b      	bne.n	810e65c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810e644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e648:	f383 8811 	msr	BASEPRI, r3
 810e64c:	f3bf 8f6f 	isb	sy
 810e650:	f3bf 8f4f 	dsb	sy
 810e654:	60fb      	str	r3, [r7, #12]
}
 810e656:	bf00      	nop
 810e658:	bf00      	nop
 810e65a:	e7fd      	b.n	810e658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e65c:	4b07      	ldr	r3, [pc, #28]	@ (810e67c <vTaskPlaceOnEventList+0x48>)
 810e65e:	681b      	ldr	r3, [r3, #0]
 810e660:	3318      	adds	r3, #24
 810e662:	4619      	mov	r1, r3
 810e664:	6878      	ldr	r0, [r7, #4]
 810e666:	f7fe f8ee 	bl	810c846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810e66a:	2101      	movs	r1, #1
 810e66c:	6838      	ldr	r0, [r7, #0]
 810e66e:	f000 fd17 	bl	810f0a0 <prvAddCurrentTaskToDelayedList>
}
 810e672:	bf00      	nop
 810e674:	3710      	adds	r7, #16
 810e676:	46bd      	mov	sp, r7
 810e678:	bd80      	pop	{r7, pc}
 810e67a:	bf00      	nop
 810e67c:	10004954 	.word	0x10004954

0810e680 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e680:	b580      	push	{r7, lr}
 810e682:	b086      	sub	sp, #24
 810e684:	af00      	add	r7, sp, #0
 810e686:	60f8      	str	r0, [r7, #12]
 810e688:	60b9      	str	r1, [r7, #8]
 810e68a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810e68c:	68fb      	ldr	r3, [r7, #12]
 810e68e:	2b00      	cmp	r3, #0
 810e690:	d10b      	bne.n	810e6aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810e692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e696:	f383 8811 	msr	BASEPRI, r3
 810e69a:	f3bf 8f6f 	isb	sy
 810e69e:	f3bf 8f4f 	dsb	sy
 810e6a2:	617b      	str	r3, [r7, #20]
}
 810e6a4:	bf00      	nop
 810e6a6:	bf00      	nop
 810e6a8:	e7fd      	b.n	810e6a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e6aa:	4b0a      	ldr	r3, [pc, #40]	@ (810e6d4 <vTaskPlaceOnEventListRestricted+0x54>)
 810e6ac:	681b      	ldr	r3, [r3, #0]
 810e6ae:	3318      	adds	r3, #24
 810e6b0:	4619      	mov	r1, r3
 810e6b2:	68f8      	ldr	r0, [r7, #12]
 810e6b4:	f7fe f8a3 	bl	810c7fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810e6b8:	687b      	ldr	r3, [r7, #4]
 810e6ba:	2b00      	cmp	r3, #0
 810e6bc:	d002      	beq.n	810e6c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810e6be:	f04f 33ff 	mov.w	r3, #4294967295
 810e6c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810e6c4:	6879      	ldr	r1, [r7, #4]
 810e6c6:	68b8      	ldr	r0, [r7, #8]
 810e6c8:	f000 fcea 	bl	810f0a0 <prvAddCurrentTaskToDelayedList>
	}
 810e6cc:	bf00      	nop
 810e6ce:	3718      	adds	r7, #24
 810e6d0:	46bd      	mov	sp, r7
 810e6d2:	bd80      	pop	{r7, pc}
 810e6d4:	10004954 	.word	0x10004954

0810e6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810e6d8:	b580      	push	{r7, lr}
 810e6da:	b086      	sub	sp, #24
 810e6dc:	af00      	add	r7, sp, #0
 810e6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e6e0:	687b      	ldr	r3, [r7, #4]
 810e6e2:	68db      	ldr	r3, [r3, #12]
 810e6e4:	68db      	ldr	r3, [r3, #12]
 810e6e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810e6e8:	693b      	ldr	r3, [r7, #16]
 810e6ea:	2b00      	cmp	r3, #0
 810e6ec:	d10b      	bne.n	810e706 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6f2:	f383 8811 	msr	BASEPRI, r3
 810e6f6:	f3bf 8f6f 	isb	sy
 810e6fa:	f3bf 8f4f 	dsb	sy
 810e6fe:	60fb      	str	r3, [r7, #12]
}
 810e700:	bf00      	nop
 810e702:	bf00      	nop
 810e704:	e7fd      	b.n	810e702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810e706:	693b      	ldr	r3, [r7, #16]
 810e708:	3318      	adds	r3, #24
 810e70a:	4618      	mov	r0, r3
 810e70c:	f7fe f8d4 	bl	810c8b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e710:	4b1d      	ldr	r3, [pc, #116]	@ (810e788 <xTaskRemoveFromEventList+0xb0>)
 810e712:	681b      	ldr	r3, [r3, #0]
 810e714:	2b00      	cmp	r3, #0
 810e716:	d11d      	bne.n	810e754 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810e718:	693b      	ldr	r3, [r7, #16]
 810e71a:	3304      	adds	r3, #4
 810e71c:	4618      	mov	r0, r3
 810e71e:	f7fe f8cb 	bl	810c8b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810e722:	693b      	ldr	r3, [r7, #16]
 810e724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e726:	4b19      	ldr	r3, [pc, #100]	@ (810e78c <xTaskRemoveFromEventList+0xb4>)
 810e728:	681b      	ldr	r3, [r3, #0]
 810e72a:	429a      	cmp	r2, r3
 810e72c:	d903      	bls.n	810e736 <xTaskRemoveFromEventList+0x5e>
 810e72e:	693b      	ldr	r3, [r7, #16]
 810e730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e732:	4a16      	ldr	r2, [pc, #88]	@ (810e78c <xTaskRemoveFromEventList+0xb4>)
 810e734:	6013      	str	r3, [r2, #0]
 810e736:	693b      	ldr	r3, [r7, #16]
 810e738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e73a:	4613      	mov	r3, r2
 810e73c:	009b      	lsls	r3, r3, #2
 810e73e:	4413      	add	r3, r2
 810e740:	009b      	lsls	r3, r3, #2
 810e742:	4a13      	ldr	r2, [pc, #76]	@ (810e790 <xTaskRemoveFromEventList+0xb8>)
 810e744:	441a      	add	r2, r3
 810e746:	693b      	ldr	r3, [r7, #16]
 810e748:	3304      	adds	r3, #4
 810e74a:	4619      	mov	r1, r3
 810e74c:	4610      	mov	r0, r2
 810e74e:	f7fe f856 	bl	810c7fe <vListInsertEnd>
 810e752:	e005      	b.n	810e760 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810e754:	693b      	ldr	r3, [r7, #16]
 810e756:	3318      	adds	r3, #24
 810e758:	4619      	mov	r1, r3
 810e75a:	480e      	ldr	r0, [pc, #56]	@ (810e794 <xTaskRemoveFromEventList+0xbc>)
 810e75c:	f7fe f84f 	bl	810c7fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810e760:	693b      	ldr	r3, [r7, #16]
 810e762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e764:	4b0c      	ldr	r3, [pc, #48]	@ (810e798 <xTaskRemoveFromEventList+0xc0>)
 810e766:	681b      	ldr	r3, [r3, #0]
 810e768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e76a:	429a      	cmp	r2, r3
 810e76c:	d905      	bls.n	810e77a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810e76e:	2301      	movs	r3, #1
 810e770:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810e772:	4b0a      	ldr	r3, [pc, #40]	@ (810e79c <xTaskRemoveFromEventList+0xc4>)
 810e774:	2201      	movs	r2, #1
 810e776:	601a      	str	r2, [r3, #0]
 810e778:	e001      	b.n	810e77e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810e77a:	2300      	movs	r3, #0
 810e77c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810e77e:	697b      	ldr	r3, [r7, #20]
}
 810e780:	4618      	mov	r0, r3
 810e782:	3718      	adds	r7, #24
 810e784:	46bd      	mov	sp, r7
 810e786:	bd80      	pop	{r7, pc}
 810e788:	10004e50 	.word	0x10004e50
 810e78c:	10004e30 	.word	0x10004e30
 810e790:	10004958 	.word	0x10004958
 810e794:	10004de8 	.word	0x10004de8
 810e798:	10004954 	.word	0x10004954
 810e79c:	10004e3c 	.word	0x10004e3c

0810e7a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810e7a0:	b480      	push	{r7}
 810e7a2:	b083      	sub	sp, #12
 810e7a4:	af00      	add	r7, sp, #0
 810e7a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810e7a8:	4b06      	ldr	r3, [pc, #24]	@ (810e7c4 <vTaskInternalSetTimeOutState+0x24>)
 810e7aa:	681a      	ldr	r2, [r3, #0]
 810e7ac:	687b      	ldr	r3, [r7, #4]
 810e7ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810e7b0:	4b05      	ldr	r3, [pc, #20]	@ (810e7c8 <vTaskInternalSetTimeOutState+0x28>)
 810e7b2:	681a      	ldr	r2, [r3, #0]
 810e7b4:	687b      	ldr	r3, [r7, #4]
 810e7b6:	605a      	str	r2, [r3, #4]
}
 810e7b8:	bf00      	nop
 810e7ba:	370c      	adds	r7, #12
 810e7bc:	46bd      	mov	sp, r7
 810e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7c2:	4770      	bx	lr
 810e7c4:	10004e40 	.word	0x10004e40
 810e7c8:	10004e2c 	.word	0x10004e2c

0810e7cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810e7cc:	b580      	push	{r7, lr}
 810e7ce:	b088      	sub	sp, #32
 810e7d0:	af00      	add	r7, sp, #0
 810e7d2:	6078      	str	r0, [r7, #4]
 810e7d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810e7d6:	687b      	ldr	r3, [r7, #4]
 810e7d8:	2b00      	cmp	r3, #0
 810e7da:	d10b      	bne.n	810e7f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7e0:	f383 8811 	msr	BASEPRI, r3
 810e7e4:	f3bf 8f6f 	isb	sy
 810e7e8:	f3bf 8f4f 	dsb	sy
 810e7ec:	613b      	str	r3, [r7, #16]
}
 810e7ee:	bf00      	nop
 810e7f0:	bf00      	nop
 810e7f2:	e7fd      	b.n	810e7f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810e7f4:	683b      	ldr	r3, [r7, #0]
 810e7f6:	2b00      	cmp	r3, #0
 810e7f8:	d10b      	bne.n	810e812 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810e7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7fe:	f383 8811 	msr	BASEPRI, r3
 810e802:	f3bf 8f6f 	isb	sy
 810e806:	f3bf 8f4f 	dsb	sy
 810e80a:	60fb      	str	r3, [r7, #12]
}
 810e80c:	bf00      	nop
 810e80e:	bf00      	nop
 810e810:	e7fd      	b.n	810e80e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810e812:	f7fe f9a9 	bl	810cb68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810e816:	4b1d      	ldr	r3, [pc, #116]	@ (810e88c <xTaskCheckForTimeOut+0xc0>)
 810e818:	681b      	ldr	r3, [r3, #0]
 810e81a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810e81c:	687b      	ldr	r3, [r7, #4]
 810e81e:	685b      	ldr	r3, [r3, #4]
 810e820:	69ba      	ldr	r2, [r7, #24]
 810e822:	1ad3      	subs	r3, r2, r3
 810e824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810e826:	683b      	ldr	r3, [r7, #0]
 810e828:	681b      	ldr	r3, [r3, #0]
 810e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e82e:	d102      	bne.n	810e836 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810e830:	2300      	movs	r3, #0
 810e832:	61fb      	str	r3, [r7, #28]
 810e834:	e023      	b.n	810e87e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810e836:	687b      	ldr	r3, [r7, #4]
 810e838:	681a      	ldr	r2, [r3, #0]
 810e83a:	4b15      	ldr	r3, [pc, #84]	@ (810e890 <xTaskCheckForTimeOut+0xc4>)
 810e83c:	681b      	ldr	r3, [r3, #0]
 810e83e:	429a      	cmp	r2, r3
 810e840:	d007      	beq.n	810e852 <xTaskCheckForTimeOut+0x86>
 810e842:	687b      	ldr	r3, [r7, #4]
 810e844:	685b      	ldr	r3, [r3, #4]
 810e846:	69ba      	ldr	r2, [r7, #24]
 810e848:	429a      	cmp	r2, r3
 810e84a:	d302      	bcc.n	810e852 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810e84c:	2301      	movs	r3, #1
 810e84e:	61fb      	str	r3, [r7, #28]
 810e850:	e015      	b.n	810e87e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810e852:	683b      	ldr	r3, [r7, #0]
 810e854:	681b      	ldr	r3, [r3, #0]
 810e856:	697a      	ldr	r2, [r7, #20]
 810e858:	429a      	cmp	r2, r3
 810e85a:	d20b      	bcs.n	810e874 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810e85c:	683b      	ldr	r3, [r7, #0]
 810e85e:	681a      	ldr	r2, [r3, #0]
 810e860:	697b      	ldr	r3, [r7, #20]
 810e862:	1ad2      	subs	r2, r2, r3
 810e864:	683b      	ldr	r3, [r7, #0]
 810e866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810e868:	6878      	ldr	r0, [r7, #4]
 810e86a:	f7ff ff99 	bl	810e7a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810e86e:	2300      	movs	r3, #0
 810e870:	61fb      	str	r3, [r7, #28]
 810e872:	e004      	b.n	810e87e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810e874:	683b      	ldr	r3, [r7, #0]
 810e876:	2200      	movs	r2, #0
 810e878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810e87a:	2301      	movs	r3, #1
 810e87c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810e87e:	f7fe f9a5 	bl	810cbcc <vPortExitCritical>

	return xReturn;
 810e882:	69fb      	ldr	r3, [r7, #28]
}
 810e884:	4618      	mov	r0, r3
 810e886:	3720      	adds	r7, #32
 810e888:	46bd      	mov	sp, r7
 810e88a:	bd80      	pop	{r7, pc}
 810e88c:	10004e2c 	.word	0x10004e2c
 810e890:	10004e40 	.word	0x10004e40

0810e894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810e894:	b480      	push	{r7}
 810e896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810e898:	4b03      	ldr	r3, [pc, #12]	@ (810e8a8 <vTaskMissedYield+0x14>)
 810e89a:	2201      	movs	r2, #1
 810e89c:	601a      	str	r2, [r3, #0]
}
 810e89e:	bf00      	nop
 810e8a0:	46bd      	mov	sp, r7
 810e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8a6:	4770      	bx	lr
 810e8a8:	10004e3c 	.word	0x10004e3c

0810e8ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810e8ac:	b580      	push	{r7, lr}
 810e8ae:	b082      	sub	sp, #8
 810e8b0:	af00      	add	r7, sp, #0
 810e8b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810e8b4:	f000 f852 	bl	810e95c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810e8b8:	4b06      	ldr	r3, [pc, #24]	@ (810e8d4 <prvIdleTask+0x28>)
 810e8ba:	681b      	ldr	r3, [r3, #0]
 810e8bc:	2b01      	cmp	r3, #1
 810e8be:	d9f9      	bls.n	810e8b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 810e8c0:	4b05      	ldr	r3, [pc, #20]	@ (810e8d8 <prvIdleTask+0x2c>)
 810e8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e8c6:	601a      	str	r2, [r3, #0]
 810e8c8:	f3bf 8f4f 	dsb	sy
 810e8cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810e8d0:	e7f0      	b.n	810e8b4 <prvIdleTask+0x8>
 810e8d2:	bf00      	nop
 810e8d4:	10004958 	.word	0x10004958
 810e8d8:	e000ed04 	.word	0xe000ed04

0810e8dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810e8dc:	b580      	push	{r7, lr}
 810e8de:	b082      	sub	sp, #8
 810e8e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e8e2:	2300      	movs	r3, #0
 810e8e4:	607b      	str	r3, [r7, #4]
 810e8e6:	e00c      	b.n	810e902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810e8e8:	687a      	ldr	r2, [r7, #4]
 810e8ea:	4613      	mov	r3, r2
 810e8ec:	009b      	lsls	r3, r3, #2
 810e8ee:	4413      	add	r3, r2
 810e8f0:	009b      	lsls	r3, r3, #2
 810e8f2:	4a12      	ldr	r2, [pc, #72]	@ (810e93c <prvInitialiseTaskLists+0x60>)
 810e8f4:	4413      	add	r3, r2
 810e8f6:	4618      	mov	r0, r3
 810e8f8:	f7fd ff54 	bl	810c7a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e8fc:	687b      	ldr	r3, [r7, #4]
 810e8fe:	3301      	adds	r3, #1
 810e900:	607b      	str	r3, [r7, #4]
 810e902:	687b      	ldr	r3, [r7, #4]
 810e904:	2b37      	cmp	r3, #55	@ 0x37
 810e906:	d9ef      	bls.n	810e8e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810e908:	480d      	ldr	r0, [pc, #52]	@ (810e940 <prvInitialiseTaskLists+0x64>)
 810e90a:	f7fd ff4b 	bl	810c7a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810e90e:	480d      	ldr	r0, [pc, #52]	@ (810e944 <prvInitialiseTaskLists+0x68>)
 810e910:	f7fd ff48 	bl	810c7a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810e914:	480c      	ldr	r0, [pc, #48]	@ (810e948 <prvInitialiseTaskLists+0x6c>)
 810e916:	f7fd ff45 	bl	810c7a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810e91a:	480c      	ldr	r0, [pc, #48]	@ (810e94c <prvInitialiseTaskLists+0x70>)
 810e91c:	f7fd ff42 	bl	810c7a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810e920:	480b      	ldr	r0, [pc, #44]	@ (810e950 <prvInitialiseTaskLists+0x74>)
 810e922:	f7fd ff3f 	bl	810c7a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810e926:	4b0b      	ldr	r3, [pc, #44]	@ (810e954 <prvInitialiseTaskLists+0x78>)
 810e928:	4a05      	ldr	r2, [pc, #20]	@ (810e940 <prvInitialiseTaskLists+0x64>)
 810e92a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810e92c:	4b0a      	ldr	r3, [pc, #40]	@ (810e958 <prvInitialiseTaskLists+0x7c>)
 810e92e:	4a05      	ldr	r2, [pc, #20]	@ (810e944 <prvInitialiseTaskLists+0x68>)
 810e930:	601a      	str	r2, [r3, #0]
}
 810e932:	bf00      	nop
 810e934:	3708      	adds	r7, #8
 810e936:	46bd      	mov	sp, r7
 810e938:	bd80      	pop	{r7, pc}
 810e93a:	bf00      	nop
 810e93c:	10004958 	.word	0x10004958
 810e940:	10004db8 	.word	0x10004db8
 810e944:	10004dcc 	.word	0x10004dcc
 810e948:	10004de8 	.word	0x10004de8
 810e94c:	10004dfc 	.word	0x10004dfc
 810e950:	10004e14 	.word	0x10004e14
 810e954:	10004de0 	.word	0x10004de0
 810e958:	10004de4 	.word	0x10004de4

0810e95c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810e95c:	b580      	push	{r7, lr}
 810e95e:	b082      	sub	sp, #8
 810e960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e962:	e019      	b.n	810e998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810e964:	f7fe f900 	bl	810cb68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e968:	4b10      	ldr	r3, [pc, #64]	@ (810e9ac <prvCheckTasksWaitingTermination+0x50>)
 810e96a:	68db      	ldr	r3, [r3, #12]
 810e96c:	68db      	ldr	r3, [r3, #12]
 810e96e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e970:	687b      	ldr	r3, [r7, #4]
 810e972:	3304      	adds	r3, #4
 810e974:	4618      	mov	r0, r3
 810e976:	f7fd ff9f 	bl	810c8b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810e97a:	4b0d      	ldr	r3, [pc, #52]	@ (810e9b0 <prvCheckTasksWaitingTermination+0x54>)
 810e97c:	681b      	ldr	r3, [r3, #0]
 810e97e:	3b01      	subs	r3, #1
 810e980:	4a0b      	ldr	r2, [pc, #44]	@ (810e9b0 <prvCheckTasksWaitingTermination+0x54>)
 810e982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810e984:	4b0b      	ldr	r3, [pc, #44]	@ (810e9b4 <prvCheckTasksWaitingTermination+0x58>)
 810e986:	681b      	ldr	r3, [r3, #0]
 810e988:	3b01      	subs	r3, #1
 810e98a:	4a0a      	ldr	r2, [pc, #40]	@ (810e9b4 <prvCheckTasksWaitingTermination+0x58>)
 810e98c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810e98e:	f7fe f91d 	bl	810cbcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810e992:	6878      	ldr	r0, [r7, #4]
 810e994:	f000 f810 	bl	810e9b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e998:	4b06      	ldr	r3, [pc, #24]	@ (810e9b4 <prvCheckTasksWaitingTermination+0x58>)
 810e99a:	681b      	ldr	r3, [r3, #0]
 810e99c:	2b00      	cmp	r3, #0
 810e99e:	d1e1      	bne.n	810e964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810e9a0:	bf00      	nop
 810e9a2:	bf00      	nop
 810e9a4:	3708      	adds	r7, #8
 810e9a6:	46bd      	mov	sp, r7
 810e9a8:	bd80      	pop	{r7, pc}
 810e9aa:	bf00      	nop
 810e9ac:	10004dfc 	.word	0x10004dfc
 810e9b0:	10004e28 	.word	0x10004e28
 810e9b4:	10004e10 	.word	0x10004e10

0810e9b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810e9b8:	b580      	push	{r7, lr}
 810e9ba:	b084      	sub	sp, #16
 810e9bc:	af00      	add	r7, sp, #0
 810e9be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810e9c0:	687b      	ldr	r3, [r7, #4]
 810e9c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e9c6:	2b00      	cmp	r3, #0
 810e9c8:	d108      	bne.n	810e9dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810e9ca:	687b      	ldr	r3, [r7, #4]
 810e9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e9ce:	4618      	mov	r0, r3
 810e9d0:	f7fd fdc8 	bl	810c564 <vPortFree>
				vPortFree( pxTCB );
 810e9d4:	6878      	ldr	r0, [r7, #4]
 810e9d6:	f7fd fdc5 	bl	810c564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810e9da:	e019      	b.n	810ea10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810e9dc:	687b      	ldr	r3, [r7, #4]
 810e9de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e9e2:	2b01      	cmp	r3, #1
 810e9e4:	d103      	bne.n	810e9ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810e9e6:	6878      	ldr	r0, [r7, #4]
 810e9e8:	f7fd fdbc 	bl	810c564 <vPortFree>
	}
 810e9ec:	e010      	b.n	810ea10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810e9ee:	687b      	ldr	r3, [r7, #4]
 810e9f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810e9f4:	2b02      	cmp	r3, #2
 810e9f6:	d00b      	beq.n	810ea10 <prvDeleteTCB+0x58>
	__asm volatile
 810e9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e9fc:	f383 8811 	msr	BASEPRI, r3
 810ea00:	f3bf 8f6f 	isb	sy
 810ea04:	f3bf 8f4f 	dsb	sy
 810ea08:	60fb      	str	r3, [r7, #12]
}
 810ea0a:	bf00      	nop
 810ea0c:	bf00      	nop
 810ea0e:	e7fd      	b.n	810ea0c <prvDeleteTCB+0x54>
	}
 810ea10:	bf00      	nop
 810ea12:	3710      	adds	r7, #16
 810ea14:	46bd      	mov	sp, r7
 810ea16:	bd80      	pop	{r7, pc}

0810ea18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810ea18:	b480      	push	{r7}
 810ea1a:	b083      	sub	sp, #12
 810ea1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ea1e:	4b0c      	ldr	r3, [pc, #48]	@ (810ea50 <prvResetNextTaskUnblockTime+0x38>)
 810ea20:	681b      	ldr	r3, [r3, #0]
 810ea22:	681b      	ldr	r3, [r3, #0]
 810ea24:	2b00      	cmp	r3, #0
 810ea26:	d104      	bne.n	810ea32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810ea28:	4b0a      	ldr	r3, [pc, #40]	@ (810ea54 <prvResetNextTaskUnblockTime+0x3c>)
 810ea2a:	f04f 32ff 	mov.w	r2, #4294967295
 810ea2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810ea30:	e008      	b.n	810ea44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ea32:	4b07      	ldr	r3, [pc, #28]	@ (810ea50 <prvResetNextTaskUnblockTime+0x38>)
 810ea34:	681b      	ldr	r3, [r3, #0]
 810ea36:	68db      	ldr	r3, [r3, #12]
 810ea38:	68db      	ldr	r3, [r3, #12]
 810ea3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810ea3c:	687b      	ldr	r3, [r7, #4]
 810ea3e:	685b      	ldr	r3, [r3, #4]
 810ea40:	4a04      	ldr	r2, [pc, #16]	@ (810ea54 <prvResetNextTaskUnblockTime+0x3c>)
 810ea42:	6013      	str	r3, [r2, #0]
}
 810ea44:	bf00      	nop
 810ea46:	370c      	adds	r7, #12
 810ea48:	46bd      	mov	sp, r7
 810ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea4e:	4770      	bx	lr
 810ea50:	10004de0 	.word	0x10004de0
 810ea54:	10004e48 	.word	0x10004e48

0810ea58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810ea58:	b480      	push	{r7}
 810ea5a:	b083      	sub	sp, #12
 810ea5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810ea5e:	4b0b      	ldr	r3, [pc, #44]	@ (810ea8c <xTaskGetSchedulerState+0x34>)
 810ea60:	681b      	ldr	r3, [r3, #0]
 810ea62:	2b00      	cmp	r3, #0
 810ea64:	d102      	bne.n	810ea6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810ea66:	2301      	movs	r3, #1
 810ea68:	607b      	str	r3, [r7, #4]
 810ea6a:	e008      	b.n	810ea7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ea6c:	4b08      	ldr	r3, [pc, #32]	@ (810ea90 <xTaskGetSchedulerState+0x38>)
 810ea6e:	681b      	ldr	r3, [r3, #0]
 810ea70:	2b00      	cmp	r3, #0
 810ea72:	d102      	bne.n	810ea7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810ea74:	2302      	movs	r3, #2
 810ea76:	607b      	str	r3, [r7, #4]
 810ea78:	e001      	b.n	810ea7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810ea7a:	2300      	movs	r3, #0
 810ea7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810ea7e:	687b      	ldr	r3, [r7, #4]
	}
 810ea80:	4618      	mov	r0, r3
 810ea82:	370c      	adds	r7, #12
 810ea84:	46bd      	mov	sp, r7
 810ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea8a:	4770      	bx	lr
 810ea8c:	10004e34 	.word	0x10004e34
 810ea90:	10004e50 	.word	0x10004e50

0810ea94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810ea94:	b580      	push	{r7, lr}
 810ea96:	b084      	sub	sp, #16
 810ea98:	af00      	add	r7, sp, #0
 810ea9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810ea9c:	687b      	ldr	r3, [r7, #4]
 810ea9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810eaa0:	2300      	movs	r3, #0
 810eaa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810eaa4:	687b      	ldr	r3, [r7, #4]
 810eaa6:	2b00      	cmp	r3, #0
 810eaa8:	d051      	beq.n	810eb4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810eaaa:	68bb      	ldr	r3, [r7, #8]
 810eaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eaae:	4b2a      	ldr	r3, [pc, #168]	@ (810eb58 <xTaskPriorityInherit+0xc4>)
 810eab0:	681b      	ldr	r3, [r3, #0]
 810eab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eab4:	429a      	cmp	r2, r3
 810eab6:	d241      	bcs.n	810eb3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810eab8:	68bb      	ldr	r3, [r7, #8]
 810eaba:	699b      	ldr	r3, [r3, #24]
 810eabc:	2b00      	cmp	r3, #0
 810eabe:	db06      	blt.n	810eace <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810eac0:	4b25      	ldr	r3, [pc, #148]	@ (810eb58 <xTaskPriorityInherit+0xc4>)
 810eac2:	681b      	ldr	r3, [r3, #0]
 810eac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eac6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810eaca:	68bb      	ldr	r3, [r7, #8]
 810eacc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810eace:	68bb      	ldr	r3, [r7, #8]
 810ead0:	6959      	ldr	r1, [r3, #20]
 810ead2:	68bb      	ldr	r3, [r7, #8]
 810ead4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ead6:	4613      	mov	r3, r2
 810ead8:	009b      	lsls	r3, r3, #2
 810eada:	4413      	add	r3, r2
 810eadc:	009b      	lsls	r3, r3, #2
 810eade:	4a1f      	ldr	r2, [pc, #124]	@ (810eb5c <xTaskPriorityInherit+0xc8>)
 810eae0:	4413      	add	r3, r2
 810eae2:	4299      	cmp	r1, r3
 810eae4:	d122      	bne.n	810eb2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810eae6:	68bb      	ldr	r3, [r7, #8]
 810eae8:	3304      	adds	r3, #4
 810eaea:	4618      	mov	r0, r3
 810eaec:	f7fd fee4 	bl	810c8b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810eaf0:	4b19      	ldr	r3, [pc, #100]	@ (810eb58 <xTaskPriorityInherit+0xc4>)
 810eaf2:	681b      	ldr	r3, [r3, #0]
 810eaf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eaf6:	68bb      	ldr	r3, [r7, #8]
 810eaf8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810eafa:	68bb      	ldr	r3, [r7, #8]
 810eafc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eafe:	4b18      	ldr	r3, [pc, #96]	@ (810eb60 <xTaskPriorityInherit+0xcc>)
 810eb00:	681b      	ldr	r3, [r3, #0]
 810eb02:	429a      	cmp	r2, r3
 810eb04:	d903      	bls.n	810eb0e <xTaskPriorityInherit+0x7a>
 810eb06:	68bb      	ldr	r3, [r7, #8]
 810eb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eb0a:	4a15      	ldr	r2, [pc, #84]	@ (810eb60 <xTaskPriorityInherit+0xcc>)
 810eb0c:	6013      	str	r3, [r2, #0]
 810eb0e:	68bb      	ldr	r3, [r7, #8]
 810eb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eb12:	4613      	mov	r3, r2
 810eb14:	009b      	lsls	r3, r3, #2
 810eb16:	4413      	add	r3, r2
 810eb18:	009b      	lsls	r3, r3, #2
 810eb1a:	4a10      	ldr	r2, [pc, #64]	@ (810eb5c <xTaskPriorityInherit+0xc8>)
 810eb1c:	441a      	add	r2, r3
 810eb1e:	68bb      	ldr	r3, [r7, #8]
 810eb20:	3304      	adds	r3, #4
 810eb22:	4619      	mov	r1, r3
 810eb24:	4610      	mov	r0, r2
 810eb26:	f7fd fe6a 	bl	810c7fe <vListInsertEnd>
 810eb2a:	e004      	b.n	810eb36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810eb2c:	4b0a      	ldr	r3, [pc, #40]	@ (810eb58 <xTaskPriorityInherit+0xc4>)
 810eb2e:	681b      	ldr	r3, [r3, #0]
 810eb30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eb32:	68bb      	ldr	r3, [r7, #8]
 810eb34:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810eb36:	2301      	movs	r3, #1
 810eb38:	60fb      	str	r3, [r7, #12]
 810eb3a:	e008      	b.n	810eb4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810eb3c:	68bb      	ldr	r3, [r7, #8]
 810eb3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810eb40:	4b05      	ldr	r3, [pc, #20]	@ (810eb58 <xTaskPriorityInherit+0xc4>)
 810eb42:	681b      	ldr	r3, [r3, #0]
 810eb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eb46:	429a      	cmp	r2, r3
 810eb48:	d201      	bcs.n	810eb4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810eb4a:	2301      	movs	r3, #1
 810eb4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810eb4e:	68fb      	ldr	r3, [r7, #12]
	}
 810eb50:	4618      	mov	r0, r3
 810eb52:	3710      	adds	r7, #16
 810eb54:	46bd      	mov	sp, r7
 810eb56:	bd80      	pop	{r7, pc}
 810eb58:	10004954 	.word	0x10004954
 810eb5c:	10004958 	.word	0x10004958
 810eb60:	10004e30 	.word	0x10004e30

0810eb64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810eb64:	b580      	push	{r7, lr}
 810eb66:	b086      	sub	sp, #24
 810eb68:	af00      	add	r7, sp, #0
 810eb6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810eb6c:	687b      	ldr	r3, [r7, #4]
 810eb6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810eb70:	2300      	movs	r3, #0
 810eb72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810eb74:	687b      	ldr	r3, [r7, #4]
 810eb76:	2b00      	cmp	r3, #0
 810eb78:	d058      	beq.n	810ec2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810eb7a:	4b2f      	ldr	r3, [pc, #188]	@ (810ec38 <xTaskPriorityDisinherit+0xd4>)
 810eb7c:	681b      	ldr	r3, [r3, #0]
 810eb7e:	693a      	ldr	r2, [r7, #16]
 810eb80:	429a      	cmp	r2, r3
 810eb82:	d00b      	beq.n	810eb9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810eb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb88:	f383 8811 	msr	BASEPRI, r3
 810eb8c:	f3bf 8f6f 	isb	sy
 810eb90:	f3bf 8f4f 	dsb	sy
 810eb94:	60fb      	str	r3, [r7, #12]
}
 810eb96:	bf00      	nop
 810eb98:	bf00      	nop
 810eb9a:	e7fd      	b.n	810eb98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810eb9c:	693b      	ldr	r3, [r7, #16]
 810eb9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810eba0:	2b00      	cmp	r3, #0
 810eba2:	d10b      	bne.n	810ebbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810eba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eba8:	f383 8811 	msr	BASEPRI, r3
 810ebac:	f3bf 8f6f 	isb	sy
 810ebb0:	f3bf 8f4f 	dsb	sy
 810ebb4:	60bb      	str	r3, [r7, #8]
}
 810ebb6:	bf00      	nop
 810ebb8:	bf00      	nop
 810ebba:	e7fd      	b.n	810ebb8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810ebbc:	693b      	ldr	r3, [r7, #16]
 810ebbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ebc0:	1e5a      	subs	r2, r3, #1
 810ebc2:	693b      	ldr	r3, [r7, #16]
 810ebc4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810ebc6:	693b      	ldr	r3, [r7, #16]
 810ebc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ebca:	693b      	ldr	r3, [r7, #16]
 810ebcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ebce:	429a      	cmp	r2, r3
 810ebd0:	d02c      	beq.n	810ec2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810ebd2:	693b      	ldr	r3, [r7, #16]
 810ebd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ebd6:	2b00      	cmp	r3, #0
 810ebd8:	d128      	bne.n	810ec2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ebda:	693b      	ldr	r3, [r7, #16]
 810ebdc:	3304      	adds	r3, #4
 810ebde:	4618      	mov	r0, r3
 810ebe0:	f7fd fe6a 	bl	810c8b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810ebe4:	693b      	ldr	r3, [r7, #16]
 810ebe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810ebe8:	693b      	ldr	r3, [r7, #16]
 810ebea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ebec:	693b      	ldr	r3, [r7, #16]
 810ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ebf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810ebf4:	693b      	ldr	r3, [r7, #16]
 810ebf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810ebf8:	693b      	ldr	r3, [r7, #16]
 810ebfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ebfc:	4b0f      	ldr	r3, [pc, #60]	@ (810ec3c <xTaskPriorityDisinherit+0xd8>)
 810ebfe:	681b      	ldr	r3, [r3, #0]
 810ec00:	429a      	cmp	r2, r3
 810ec02:	d903      	bls.n	810ec0c <xTaskPriorityDisinherit+0xa8>
 810ec04:	693b      	ldr	r3, [r7, #16]
 810ec06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ec08:	4a0c      	ldr	r2, [pc, #48]	@ (810ec3c <xTaskPriorityDisinherit+0xd8>)
 810ec0a:	6013      	str	r3, [r2, #0]
 810ec0c:	693b      	ldr	r3, [r7, #16]
 810ec0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ec10:	4613      	mov	r3, r2
 810ec12:	009b      	lsls	r3, r3, #2
 810ec14:	4413      	add	r3, r2
 810ec16:	009b      	lsls	r3, r3, #2
 810ec18:	4a09      	ldr	r2, [pc, #36]	@ (810ec40 <xTaskPriorityDisinherit+0xdc>)
 810ec1a:	441a      	add	r2, r3
 810ec1c:	693b      	ldr	r3, [r7, #16]
 810ec1e:	3304      	adds	r3, #4
 810ec20:	4619      	mov	r1, r3
 810ec22:	4610      	mov	r0, r2
 810ec24:	f7fd fdeb 	bl	810c7fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810ec28:	2301      	movs	r3, #1
 810ec2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810ec2c:	697b      	ldr	r3, [r7, #20]
	}
 810ec2e:	4618      	mov	r0, r3
 810ec30:	3718      	adds	r7, #24
 810ec32:	46bd      	mov	sp, r7
 810ec34:	bd80      	pop	{r7, pc}
 810ec36:	bf00      	nop
 810ec38:	10004954 	.word	0x10004954
 810ec3c:	10004e30 	.word	0x10004e30
 810ec40:	10004958 	.word	0x10004958

0810ec44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810ec44:	b580      	push	{r7, lr}
 810ec46:	b088      	sub	sp, #32
 810ec48:	af00      	add	r7, sp, #0
 810ec4a:	6078      	str	r0, [r7, #4]
 810ec4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810ec4e:	687b      	ldr	r3, [r7, #4]
 810ec50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810ec52:	2301      	movs	r3, #1
 810ec54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810ec56:	687b      	ldr	r3, [r7, #4]
 810ec58:	2b00      	cmp	r3, #0
 810ec5a:	d06c      	beq.n	810ed36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810ec5c:	69bb      	ldr	r3, [r7, #24]
 810ec5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ec60:	2b00      	cmp	r3, #0
 810ec62:	d10b      	bne.n	810ec7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810ec64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec68:	f383 8811 	msr	BASEPRI, r3
 810ec6c:	f3bf 8f6f 	isb	sy
 810ec70:	f3bf 8f4f 	dsb	sy
 810ec74:	60fb      	str	r3, [r7, #12]
}
 810ec76:	bf00      	nop
 810ec78:	bf00      	nop
 810ec7a:	e7fd      	b.n	810ec78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810ec7c:	69bb      	ldr	r3, [r7, #24]
 810ec7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ec80:	683a      	ldr	r2, [r7, #0]
 810ec82:	429a      	cmp	r2, r3
 810ec84:	d902      	bls.n	810ec8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810ec86:	683b      	ldr	r3, [r7, #0]
 810ec88:	61fb      	str	r3, [r7, #28]
 810ec8a:	e002      	b.n	810ec92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810ec8c:	69bb      	ldr	r3, [r7, #24]
 810ec8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ec90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810ec92:	69bb      	ldr	r3, [r7, #24]
 810ec94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ec96:	69fa      	ldr	r2, [r7, #28]
 810ec98:	429a      	cmp	r2, r3
 810ec9a:	d04c      	beq.n	810ed36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810ec9c:	69bb      	ldr	r3, [r7, #24]
 810ec9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810eca0:	697a      	ldr	r2, [r7, #20]
 810eca2:	429a      	cmp	r2, r3
 810eca4:	d147      	bne.n	810ed36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810eca6:	4b26      	ldr	r3, [pc, #152]	@ (810ed40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810eca8:	681b      	ldr	r3, [r3, #0]
 810ecaa:	69ba      	ldr	r2, [r7, #24]
 810ecac:	429a      	cmp	r2, r3
 810ecae:	d10b      	bne.n	810ecc8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810ecb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecb4:	f383 8811 	msr	BASEPRI, r3
 810ecb8:	f3bf 8f6f 	isb	sy
 810ecbc:	f3bf 8f4f 	dsb	sy
 810ecc0:	60bb      	str	r3, [r7, #8]
}
 810ecc2:	bf00      	nop
 810ecc4:	bf00      	nop
 810ecc6:	e7fd      	b.n	810ecc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810ecc8:	69bb      	ldr	r3, [r7, #24]
 810ecca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eccc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810ecce:	69bb      	ldr	r3, [r7, #24]
 810ecd0:	69fa      	ldr	r2, [r7, #28]
 810ecd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810ecd4:	69bb      	ldr	r3, [r7, #24]
 810ecd6:	699b      	ldr	r3, [r3, #24]
 810ecd8:	2b00      	cmp	r3, #0
 810ecda:	db04      	blt.n	810ece6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ecdc:	69fb      	ldr	r3, [r7, #28]
 810ecde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810ece2:	69bb      	ldr	r3, [r7, #24]
 810ece4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810ece6:	69bb      	ldr	r3, [r7, #24]
 810ece8:	6959      	ldr	r1, [r3, #20]
 810ecea:	693a      	ldr	r2, [r7, #16]
 810ecec:	4613      	mov	r3, r2
 810ecee:	009b      	lsls	r3, r3, #2
 810ecf0:	4413      	add	r3, r2
 810ecf2:	009b      	lsls	r3, r3, #2
 810ecf4:	4a13      	ldr	r2, [pc, #76]	@ (810ed44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ecf6:	4413      	add	r3, r2
 810ecf8:	4299      	cmp	r1, r3
 810ecfa:	d11c      	bne.n	810ed36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ecfc:	69bb      	ldr	r3, [r7, #24]
 810ecfe:	3304      	adds	r3, #4
 810ed00:	4618      	mov	r0, r3
 810ed02:	f7fd fdd9 	bl	810c8b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810ed06:	69bb      	ldr	r3, [r7, #24]
 810ed08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ed0a:	4b0f      	ldr	r3, [pc, #60]	@ (810ed48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ed0c:	681b      	ldr	r3, [r3, #0]
 810ed0e:	429a      	cmp	r2, r3
 810ed10:	d903      	bls.n	810ed1a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810ed12:	69bb      	ldr	r3, [r7, #24]
 810ed14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ed16:	4a0c      	ldr	r2, [pc, #48]	@ (810ed48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ed18:	6013      	str	r3, [r2, #0]
 810ed1a:	69bb      	ldr	r3, [r7, #24]
 810ed1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ed1e:	4613      	mov	r3, r2
 810ed20:	009b      	lsls	r3, r3, #2
 810ed22:	4413      	add	r3, r2
 810ed24:	009b      	lsls	r3, r3, #2
 810ed26:	4a07      	ldr	r2, [pc, #28]	@ (810ed44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ed28:	441a      	add	r2, r3
 810ed2a:	69bb      	ldr	r3, [r7, #24]
 810ed2c:	3304      	adds	r3, #4
 810ed2e:	4619      	mov	r1, r3
 810ed30:	4610      	mov	r0, r2
 810ed32:	f7fd fd64 	bl	810c7fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ed36:	bf00      	nop
 810ed38:	3720      	adds	r7, #32
 810ed3a:	46bd      	mov	sp, r7
 810ed3c:	bd80      	pop	{r7, pc}
 810ed3e:	bf00      	nop
 810ed40:	10004954 	.word	0x10004954
 810ed44:	10004958 	.word	0x10004958
 810ed48:	10004e30 	.word	0x10004e30

0810ed4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810ed4c:	b480      	push	{r7}
 810ed4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810ed50:	4b07      	ldr	r3, [pc, #28]	@ (810ed70 <pvTaskIncrementMutexHeldCount+0x24>)
 810ed52:	681b      	ldr	r3, [r3, #0]
 810ed54:	2b00      	cmp	r3, #0
 810ed56:	d004      	beq.n	810ed62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ed58:	4b05      	ldr	r3, [pc, #20]	@ (810ed70 <pvTaskIncrementMutexHeldCount+0x24>)
 810ed5a:	681b      	ldr	r3, [r3, #0]
 810ed5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ed5e:	3201      	adds	r2, #1
 810ed60:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810ed62:	4b03      	ldr	r3, [pc, #12]	@ (810ed70 <pvTaskIncrementMutexHeldCount+0x24>)
 810ed64:	681b      	ldr	r3, [r3, #0]
	}
 810ed66:	4618      	mov	r0, r3
 810ed68:	46bd      	mov	sp, r7
 810ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed6e:	4770      	bx	lr
 810ed70:	10004954 	.word	0x10004954

0810ed74 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 810ed74:	b580      	push	{r7, lr}
 810ed76:	b084      	sub	sp, #16
 810ed78:	af00      	add	r7, sp, #0
 810ed7a:	6078      	str	r0, [r7, #4]
 810ed7c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 810ed7e:	f7fd fef3 	bl	810cb68 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 810ed82:	4b1e      	ldr	r3, [pc, #120]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810ed84:	681b      	ldr	r3, [r3, #0]
 810ed86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ed88:	2b00      	cmp	r3, #0
 810ed8a:	d113      	bne.n	810edb4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ed8c:	4b1b      	ldr	r3, [pc, #108]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810ed8e:	681b      	ldr	r3, [r3, #0]
 810ed90:	2201      	movs	r2, #1
 810ed92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 810ed96:	683b      	ldr	r3, [r7, #0]
 810ed98:	2b00      	cmp	r3, #0
 810ed9a:	d00b      	beq.n	810edb4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ed9c:	2101      	movs	r1, #1
 810ed9e:	6838      	ldr	r0, [r7, #0]
 810eda0:	f000 f97e 	bl	810f0a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810eda4:	4b16      	ldr	r3, [pc, #88]	@ (810ee00 <ulTaskNotifyTake+0x8c>)
 810eda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810edaa:	601a      	str	r2, [r3, #0]
 810edac:	f3bf 8f4f 	dsb	sy
 810edb0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810edb4:	f7fd ff0a 	bl	810cbcc <vPortExitCritical>

		taskENTER_CRITICAL();
 810edb8:	f7fd fed6 	bl	810cb68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 810edbc:	4b0f      	ldr	r3, [pc, #60]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810edbe:	681b      	ldr	r3, [r3, #0]
 810edc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810edc2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 810edc4:	68fb      	ldr	r3, [r7, #12]
 810edc6:	2b00      	cmp	r3, #0
 810edc8:	d00c      	beq.n	810ede4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 810edca:	687b      	ldr	r3, [r7, #4]
 810edcc:	2b00      	cmp	r3, #0
 810edce:	d004      	beq.n	810edda <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 810edd0:	4b0a      	ldr	r3, [pc, #40]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810edd2:	681b      	ldr	r3, [r3, #0]
 810edd4:	2200      	movs	r2, #0
 810edd6:	655a      	str	r2, [r3, #84]	@ 0x54
 810edd8:	e004      	b.n	810ede4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 810edda:	4b08      	ldr	r3, [pc, #32]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810eddc:	681b      	ldr	r3, [r3, #0]
 810edde:	68fa      	ldr	r2, [r7, #12]
 810ede0:	3a01      	subs	r2, #1
 810ede2:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ede4:	4b05      	ldr	r3, [pc, #20]	@ (810edfc <ulTaskNotifyTake+0x88>)
 810ede6:	681b      	ldr	r3, [r3, #0]
 810ede8:	2200      	movs	r2, #0
 810edea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 810edee:	f7fd feed 	bl	810cbcc <vPortExitCritical>

		return ulReturn;
 810edf2:	68fb      	ldr	r3, [r7, #12]
	}
 810edf4:	4618      	mov	r0, r3
 810edf6:	3710      	adds	r7, #16
 810edf8:	46bd      	mov	sp, r7
 810edfa:	bd80      	pop	{r7, pc}
 810edfc:	10004954 	.word	0x10004954
 810ee00:	e000ed04 	.word	0xe000ed04

0810ee04 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 810ee04:	b580      	push	{r7, lr}
 810ee06:	b08a      	sub	sp, #40	@ 0x28
 810ee08:	af00      	add	r7, sp, #0
 810ee0a:	60f8      	str	r0, [r7, #12]
 810ee0c:	60b9      	str	r1, [r7, #8]
 810ee0e:	603b      	str	r3, [r7, #0]
 810ee10:	4613      	mov	r3, r2
 810ee12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 810ee14:	2301      	movs	r3, #1
 810ee16:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 810ee18:	68fb      	ldr	r3, [r7, #12]
 810ee1a:	2b00      	cmp	r3, #0
 810ee1c:	d10b      	bne.n	810ee36 <xTaskGenericNotify+0x32>
	__asm volatile
 810ee1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee22:	f383 8811 	msr	BASEPRI, r3
 810ee26:	f3bf 8f6f 	isb	sy
 810ee2a:	f3bf 8f4f 	dsb	sy
 810ee2e:	61bb      	str	r3, [r7, #24]
}
 810ee30:	bf00      	nop
 810ee32:	bf00      	nop
 810ee34:	e7fd      	b.n	810ee32 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 810ee36:	68fb      	ldr	r3, [r7, #12]
 810ee38:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 810ee3a:	f7fd fe95 	bl	810cb68 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 810ee3e:	683b      	ldr	r3, [r7, #0]
 810ee40:	2b00      	cmp	r3, #0
 810ee42:	d003      	beq.n	810ee4c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810ee44:	6a3b      	ldr	r3, [r7, #32]
 810ee46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810ee48:	683b      	ldr	r3, [r7, #0]
 810ee4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810ee4c:	6a3b      	ldr	r3, [r7, #32]
 810ee4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 810ee52:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810ee54:	6a3b      	ldr	r3, [r7, #32]
 810ee56:	2202      	movs	r2, #2
 810ee58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 810ee5c:	79fb      	ldrb	r3, [r7, #7]
 810ee5e:	2b04      	cmp	r3, #4
 810ee60:	d827      	bhi.n	810eeb2 <xTaskGenericNotify+0xae>
 810ee62:	a201      	add	r2, pc, #4	@ (adr r2, 810ee68 <xTaskGenericNotify+0x64>)
 810ee64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ee68:	0810eed5 	.word	0x0810eed5
 810ee6c:	0810ee7d 	.word	0x0810ee7d
 810ee70:	0810ee8b 	.word	0x0810ee8b
 810ee74:	0810ee97 	.word	0x0810ee97
 810ee78:	0810ee9f 	.word	0x0810ee9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810ee7c:	6a3b      	ldr	r3, [r7, #32]
 810ee7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810ee80:	68bb      	ldr	r3, [r7, #8]
 810ee82:	431a      	orrs	r2, r3
 810ee84:	6a3b      	ldr	r3, [r7, #32]
 810ee86:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810ee88:	e027      	b.n	810eeda <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810ee8a:	6a3b      	ldr	r3, [r7, #32]
 810ee8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ee8e:	1c5a      	adds	r2, r3, #1
 810ee90:	6a3b      	ldr	r3, [r7, #32]
 810ee92:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810ee94:	e021      	b.n	810eeda <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810ee96:	6a3b      	ldr	r3, [r7, #32]
 810ee98:	68ba      	ldr	r2, [r7, #8]
 810ee9a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 810ee9c:	e01d      	b.n	810eeda <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810ee9e:	7ffb      	ldrb	r3, [r7, #31]
 810eea0:	2b02      	cmp	r3, #2
 810eea2:	d003      	beq.n	810eeac <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810eea4:	6a3b      	ldr	r3, [r7, #32]
 810eea6:	68ba      	ldr	r2, [r7, #8]
 810eea8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810eeaa:	e016      	b.n	810eeda <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 810eeac:	2300      	movs	r3, #0
 810eeae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 810eeb0:	e013      	b.n	810eeda <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810eeb2:	6a3b      	ldr	r3, [r7, #32]
 810eeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eeba:	d00d      	beq.n	810eed8 <xTaskGenericNotify+0xd4>
	__asm volatile
 810eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eec0:	f383 8811 	msr	BASEPRI, r3
 810eec4:	f3bf 8f6f 	isb	sy
 810eec8:	f3bf 8f4f 	dsb	sy
 810eecc:	617b      	str	r3, [r7, #20]
}
 810eece:	bf00      	nop
 810eed0:	bf00      	nop
 810eed2:	e7fd      	b.n	810eed0 <xTaskGenericNotify+0xcc>
					break;
 810eed4:	bf00      	nop
 810eed6:	e000      	b.n	810eeda <xTaskGenericNotify+0xd6>

					break;
 810eed8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810eeda:	7ffb      	ldrb	r3, [r7, #31]
 810eedc:	2b01      	cmp	r3, #1
 810eede:	d13b      	bne.n	810ef58 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810eee0:	6a3b      	ldr	r3, [r7, #32]
 810eee2:	3304      	adds	r3, #4
 810eee4:	4618      	mov	r0, r3
 810eee6:	f7fd fce7 	bl	810c8b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 810eeea:	6a3b      	ldr	r3, [r7, #32]
 810eeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810eeee:	4b1e      	ldr	r3, [pc, #120]	@ (810ef68 <xTaskGenericNotify+0x164>)
 810eef0:	681b      	ldr	r3, [r3, #0]
 810eef2:	429a      	cmp	r2, r3
 810eef4:	d903      	bls.n	810eefe <xTaskGenericNotify+0xfa>
 810eef6:	6a3b      	ldr	r3, [r7, #32]
 810eef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810eefa:	4a1b      	ldr	r2, [pc, #108]	@ (810ef68 <xTaskGenericNotify+0x164>)
 810eefc:	6013      	str	r3, [r2, #0]
 810eefe:	6a3b      	ldr	r3, [r7, #32]
 810ef00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ef02:	4613      	mov	r3, r2
 810ef04:	009b      	lsls	r3, r3, #2
 810ef06:	4413      	add	r3, r2
 810ef08:	009b      	lsls	r3, r3, #2
 810ef0a:	4a18      	ldr	r2, [pc, #96]	@ (810ef6c <xTaskGenericNotify+0x168>)
 810ef0c:	441a      	add	r2, r3
 810ef0e:	6a3b      	ldr	r3, [r7, #32]
 810ef10:	3304      	adds	r3, #4
 810ef12:	4619      	mov	r1, r3
 810ef14:	4610      	mov	r0, r2
 810ef16:	f7fd fc72 	bl	810c7fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810ef1a:	6a3b      	ldr	r3, [r7, #32]
 810ef1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ef1e:	2b00      	cmp	r3, #0
 810ef20:	d00b      	beq.n	810ef3a <xTaskGenericNotify+0x136>
	__asm volatile
 810ef22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef26:	f383 8811 	msr	BASEPRI, r3
 810ef2a:	f3bf 8f6f 	isb	sy
 810ef2e:	f3bf 8f4f 	dsb	sy
 810ef32:	613b      	str	r3, [r7, #16]
}
 810ef34:	bf00      	nop
 810ef36:	bf00      	nop
 810ef38:	e7fd      	b.n	810ef36 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ef3a:	6a3b      	ldr	r3, [r7, #32]
 810ef3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ef3e:	4b0c      	ldr	r3, [pc, #48]	@ (810ef70 <xTaskGenericNotify+0x16c>)
 810ef40:	681b      	ldr	r3, [r3, #0]
 810ef42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ef44:	429a      	cmp	r2, r3
 810ef46:	d907      	bls.n	810ef58 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 810ef48:	4b0a      	ldr	r3, [pc, #40]	@ (810ef74 <xTaskGenericNotify+0x170>)
 810ef4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ef4e:	601a      	str	r2, [r3, #0]
 810ef50:	f3bf 8f4f 	dsb	sy
 810ef54:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ef58:	f7fd fe38 	bl	810cbcc <vPortExitCritical>

		return xReturn;
 810ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 810ef5e:	4618      	mov	r0, r3
 810ef60:	3728      	adds	r7, #40	@ 0x28
 810ef62:	46bd      	mov	sp, r7
 810ef64:	bd80      	pop	{r7, pc}
 810ef66:	bf00      	nop
 810ef68:	10004e30 	.word	0x10004e30
 810ef6c:	10004958 	.word	0x10004958
 810ef70:	10004954 	.word	0x10004954
 810ef74:	e000ed04 	.word	0xe000ed04

0810ef78 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 810ef78:	b580      	push	{r7, lr}
 810ef7a:	b08a      	sub	sp, #40	@ 0x28
 810ef7c:	af00      	add	r7, sp, #0
 810ef7e:	6078      	str	r0, [r7, #4]
 810ef80:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810ef82:	687b      	ldr	r3, [r7, #4]
 810ef84:	2b00      	cmp	r3, #0
 810ef86:	d10b      	bne.n	810efa0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 810ef88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef8c:	f383 8811 	msr	BASEPRI, r3
 810ef90:	f3bf 8f6f 	isb	sy
 810ef94:	f3bf 8f4f 	dsb	sy
 810ef98:	61bb      	str	r3, [r7, #24]
}
 810ef9a:	bf00      	nop
 810ef9c:	bf00      	nop
 810ef9e:	e7fd      	b.n	810ef9c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810efa0:	f7fd fec2 	bl	810cd28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810efa4:	687b      	ldr	r3, [r7, #4]
 810efa6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 810efa8:	f3ef 8211 	mrs	r2, BASEPRI
 810efac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810efb0:	f383 8811 	msr	BASEPRI, r3
 810efb4:	f3bf 8f6f 	isb	sy
 810efb8:	f3bf 8f4f 	dsb	sy
 810efbc:	617a      	str	r2, [r7, #20]
 810efbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810efc0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810efc2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 810efca:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810efcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efce:	2202      	movs	r2, #2
 810efd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 810efd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810efd8:	1c5a      	adds	r2, r3, #1
 810efda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efdc:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810efde:	7ffb      	ldrb	r3, [r7, #31]
 810efe0:	2b01      	cmp	r3, #1
 810efe2:	d147      	bne.n	810f074 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810efe8:	2b00      	cmp	r3, #0
 810efea:	d00b      	beq.n	810f004 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 810efec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eff0:	f383 8811 	msr	BASEPRI, r3
 810eff4:	f3bf 8f6f 	isb	sy
 810eff8:	f3bf 8f4f 	dsb	sy
 810effc:	60fb      	str	r3, [r7, #12]
}
 810effe:	bf00      	nop
 810f000:	bf00      	nop
 810f002:	e7fd      	b.n	810f000 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f004:	4b20      	ldr	r3, [pc, #128]	@ (810f088 <vTaskNotifyGiveFromISR+0x110>)
 810f006:	681b      	ldr	r3, [r3, #0]
 810f008:	2b00      	cmp	r3, #0
 810f00a:	d11d      	bne.n	810f048 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f00e:	3304      	adds	r3, #4
 810f010:	4618      	mov	r0, r3
 810f012:	f7fd fc51 	bl	810c8b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810f016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f01a:	4b1c      	ldr	r3, [pc, #112]	@ (810f08c <vTaskNotifyGiveFromISR+0x114>)
 810f01c:	681b      	ldr	r3, [r3, #0]
 810f01e:	429a      	cmp	r2, r3
 810f020:	d903      	bls.n	810f02a <vTaskNotifyGiveFromISR+0xb2>
 810f022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f026:	4a19      	ldr	r2, [pc, #100]	@ (810f08c <vTaskNotifyGiveFromISR+0x114>)
 810f028:	6013      	str	r3, [r2, #0]
 810f02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f02e:	4613      	mov	r3, r2
 810f030:	009b      	lsls	r3, r3, #2
 810f032:	4413      	add	r3, r2
 810f034:	009b      	lsls	r3, r3, #2
 810f036:	4a16      	ldr	r2, [pc, #88]	@ (810f090 <vTaskNotifyGiveFromISR+0x118>)
 810f038:	441a      	add	r2, r3
 810f03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f03c:	3304      	adds	r3, #4
 810f03e:	4619      	mov	r1, r3
 810f040:	4610      	mov	r0, r2
 810f042:	f7fd fbdc 	bl	810c7fe <vListInsertEnd>
 810f046:	e005      	b.n	810f054 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 810f048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f04a:	3318      	adds	r3, #24
 810f04c:	4619      	mov	r1, r3
 810f04e:	4811      	ldr	r0, [pc, #68]	@ (810f094 <vTaskNotifyGiveFromISR+0x11c>)
 810f050:	f7fd fbd5 	bl	810c7fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810f054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f058:	4b0f      	ldr	r3, [pc, #60]	@ (810f098 <vTaskNotifyGiveFromISR+0x120>)
 810f05a:	681b      	ldr	r3, [r3, #0]
 810f05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f05e:	429a      	cmp	r2, r3
 810f060:	d908      	bls.n	810f074 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 810f062:	683b      	ldr	r3, [r7, #0]
 810f064:	2b00      	cmp	r3, #0
 810f066:	d002      	beq.n	810f06e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810f068:	683b      	ldr	r3, [r7, #0]
 810f06a:	2201      	movs	r2, #1
 810f06c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810f06e:	4b0b      	ldr	r3, [pc, #44]	@ (810f09c <vTaskNotifyGiveFromISR+0x124>)
 810f070:	2201      	movs	r2, #1
 810f072:	601a      	str	r2, [r3, #0]
 810f074:	6a3b      	ldr	r3, [r7, #32]
 810f076:	60bb      	str	r3, [r7, #8]
	__asm volatile
 810f078:	68bb      	ldr	r3, [r7, #8]
 810f07a:	f383 8811 	msr	BASEPRI, r3
}
 810f07e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 810f080:	bf00      	nop
 810f082:	3728      	adds	r7, #40	@ 0x28
 810f084:	46bd      	mov	sp, r7
 810f086:	bd80      	pop	{r7, pc}
 810f088:	10004e50 	.word	0x10004e50
 810f08c:	10004e30 	.word	0x10004e30
 810f090:	10004958 	.word	0x10004958
 810f094:	10004de8 	.word	0x10004de8
 810f098:	10004954 	.word	0x10004954
 810f09c:	10004e3c 	.word	0x10004e3c

0810f0a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810f0a0:	b580      	push	{r7, lr}
 810f0a2:	b084      	sub	sp, #16
 810f0a4:	af00      	add	r7, sp, #0
 810f0a6:	6078      	str	r0, [r7, #4]
 810f0a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810f0aa:	4b21      	ldr	r3, [pc, #132]	@ (810f130 <prvAddCurrentTaskToDelayedList+0x90>)
 810f0ac:	681b      	ldr	r3, [r3, #0]
 810f0ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f0b0:	4b20      	ldr	r3, [pc, #128]	@ (810f134 <prvAddCurrentTaskToDelayedList+0x94>)
 810f0b2:	681b      	ldr	r3, [r3, #0]
 810f0b4:	3304      	adds	r3, #4
 810f0b6:	4618      	mov	r0, r3
 810f0b8:	f7fd fbfe 	bl	810c8b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810f0bc:	687b      	ldr	r3, [r7, #4]
 810f0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f0c2:	d10a      	bne.n	810f0da <prvAddCurrentTaskToDelayedList+0x3a>
 810f0c4:	683b      	ldr	r3, [r7, #0]
 810f0c6:	2b00      	cmp	r3, #0
 810f0c8:	d007      	beq.n	810f0da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f0ca:	4b1a      	ldr	r3, [pc, #104]	@ (810f134 <prvAddCurrentTaskToDelayedList+0x94>)
 810f0cc:	681b      	ldr	r3, [r3, #0]
 810f0ce:	3304      	adds	r3, #4
 810f0d0:	4619      	mov	r1, r3
 810f0d2:	4819      	ldr	r0, [pc, #100]	@ (810f138 <prvAddCurrentTaskToDelayedList+0x98>)
 810f0d4:	f7fd fb93 	bl	810c7fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810f0d8:	e026      	b.n	810f128 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810f0da:	68fa      	ldr	r2, [r7, #12]
 810f0dc:	687b      	ldr	r3, [r7, #4]
 810f0de:	4413      	add	r3, r2
 810f0e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810f0e2:	4b14      	ldr	r3, [pc, #80]	@ (810f134 <prvAddCurrentTaskToDelayedList+0x94>)
 810f0e4:	681b      	ldr	r3, [r3, #0]
 810f0e6:	68ba      	ldr	r2, [r7, #8]
 810f0e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810f0ea:	68ba      	ldr	r2, [r7, #8]
 810f0ec:	68fb      	ldr	r3, [r7, #12]
 810f0ee:	429a      	cmp	r2, r3
 810f0f0:	d209      	bcs.n	810f106 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f0f2:	4b12      	ldr	r3, [pc, #72]	@ (810f13c <prvAddCurrentTaskToDelayedList+0x9c>)
 810f0f4:	681a      	ldr	r2, [r3, #0]
 810f0f6:	4b0f      	ldr	r3, [pc, #60]	@ (810f134 <prvAddCurrentTaskToDelayedList+0x94>)
 810f0f8:	681b      	ldr	r3, [r3, #0]
 810f0fa:	3304      	adds	r3, #4
 810f0fc:	4619      	mov	r1, r3
 810f0fe:	4610      	mov	r0, r2
 810f100:	f7fd fba1 	bl	810c846 <vListInsert>
}
 810f104:	e010      	b.n	810f128 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f106:	4b0e      	ldr	r3, [pc, #56]	@ (810f140 <prvAddCurrentTaskToDelayedList+0xa0>)
 810f108:	681a      	ldr	r2, [r3, #0]
 810f10a:	4b0a      	ldr	r3, [pc, #40]	@ (810f134 <prvAddCurrentTaskToDelayedList+0x94>)
 810f10c:	681b      	ldr	r3, [r3, #0]
 810f10e:	3304      	adds	r3, #4
 810f110:	4619      	mov	r1, r3
 810f112:	4610      	mov	r0, r2
 810f114:	f7fd fb97 	bl	810c846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810f118:	4b0a      	ldr	r3, [pc, #40]	@ (810f144 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f11a:	681b      	ldr	r3, [r3, #0]
 810f11c:	68ba      	ldr	r2, [r7, #8]
 810f11e:	429a      	cmp	r2, r3
 810f120:	d202      	bcs.n	810f128 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810f122:	4a08      	ldr	r2, [pc, #32]	@ (810f144 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f124:	68bb      	ldr	r3, [r7, #8]
 810f126:	6013      	str	r3, [r2, #0]
}
 810f128:	bf00      	nop
 810f12a:	3710      	adds	r7, #16
 810f12c:	46bd      	mov	sp, r7
 810f12e:	bd80      	pop	{r7, pc}
 810f130:	10004e2c 	.word	0x10004e2c
 810f134:	10004954 	.word	0x10004954
 810f138:	10004e14 	.word	0x10004e14
 810f13c:	10004de4 	.word	0x10004de4
 810f140:	10004de0 	.word	0x10004de0
 810f144:	10004e48 	.word	0x10004e48

0810f148 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810f148:	b580      	push	{r7, lr}
 810f14a:	b08a      	sub	sp, #40	@ 0x28
 810f14c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810f14e:	2300      	movs	r3, #0
 810f150:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810f152:	f000 fb13 	bl	810f77c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810f156:	4b1d      	ldr	r3, [pc, #116]	@ (810f1cc <xTimerCreateTimerTask+0x84>)
 810f158:	681b      	ldr	r3, [r3, #0]
 810f15a:	2b00      	cmp	r3, #0
 810f15c:	d021      	beq.n	810f1a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810f15e:	2300      	movs	r3, #0
 810f160:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810f162:	2300      	movs	r3, #0
 810f164:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810f166:	1d3a      	adds	r2, r7, #4
 810f168:	f107 0108 	add.w	r1, r7, #8
 810f16c:	f107 030c 	add.w	r3, r7, #12
 810f170:	4618      	mov	r0, r3
 810f172:	f7fd f90f 	bl	810c394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810f176:	6879      	ldr	r1, [r7, #4]
 810f178:	68bb      	ldr	r3, [r7, #8]
 810f17a:	68fa      	ldr	r2, [r7, #12]
 810f17c:	9202      	str	r2, [sp, #8]
 810f17e:	9301      	str	r3, [sp, #4]
 810f180:	2302      	movs	r3, #2
 810f182:	9300      	str	r3, [sp, #0]
 810f184:	2300      	movs	r3, #0
 810f186:	460a      	mov	r2, r1
 810f188:	4911      	ldr	r1, [pc, #68]	@ (810f1d0 <xTimerCreateTimerTask+0x88>)
 810f18a:	4812      	ldr	r0, [pc, #72]	@ (810f1d4 <xTimerCreateTimerTask+0x8c>)
 810f18c:	f7fe fe3a 	bl	810de04 <xTaskCreateStatic>
 810f190:	4603      	mov	r3, r0
 810f192:	4a11      	ldr	r2, [pc, #68]	@ (810f1d8 <xTimerCreateTimerTask+0x90>)
 810f194:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810f196:	4b10      	ldr	r3, [pc, #64]	@ (810f1d8 <xTimerCreateTimerTask+0x90>)
 810f198:	681b      	ldr	r3, [r3, #0]
 810f19a:	2b00      	cmp	r3, #0
 810f19c:	d001      	beq.n	810f1a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810f19e:	2301      	movs	r3, #1
 810f1a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810f1a2:	697b      	ldr	r3, [r7, #20]
 810f1a4:	2b00      	cmp	r3, #0
 810f1a6:	d10b      	bne.n	810f1c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810f1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f1ac:	f383 8811 	msr	BASEPRI, r3
 810f1b0:	f3bf 8f6f 	isb	sy
 810f1b4:	f3bf 8f4f 	dsb	sy
 810f1b8:	613b      	str	r3, [r7, #16]
}
 810f1ba:	bf00      	nop
 810f1bc:	bf00      	nop
 810f1be:	e7fd      	b.n	810f1bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 810f1c0:	697b      	ldr	r3, [r7, #20]
}
 810f1c2:	4618      	mov	r0, r3
 810f1c4:	3718      	adds	r7, #24
 810f1c6:	46bd      	mov	sp, r7
 810f1c8:	bd80      	pop	{r7, pc}
 810f1ca:	bf00      	nop
 810f1cc:	10004e84 	.word	0x10004e84
 810f1d0:	08117520 	.word	0x08117520
 810f1d4:	0810f315 	.word	0x0810f315
 810f1d8:	10004e88 	.word	0x10004e88

0810f1dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810f1dc:	b580      	push	{r7, lr}
 810f1de:	b08a      	sub	sp, #40	@ 0x28
 810f1e0:	af00      	add	r7, sp, #0
 810f1e2:	60f8      	str	r0, [r7, #12]
 810f1e4:	60b9      	str	r1, [r7, #8]
 810f1e6:	607a      	str	r2, [r7, #4]
 810f1e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810f1ea:	2300      	movs	r3, #0
 810f1ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810f1ee:	68fb      	ldr	r3, [r7, #12]
 810f1f0:	2b00      	cmp	r3, #0
 810f1f2:	d10b      	bne.n	810f20c <xTimerGenericCommand+0x30>
	__asm volatile
 810f1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f1f8:	f383 8811 	msr	BASEPRI, r3
 810f1fc:	f3bf 8f6f 	isb	sy
 810f200:	f3bf 8f4f 	dsb	sy
 810f204:	623b      	str	r3, [r7, #32]
}
 810f206:	bf00      	nop
 810f208:	bf00      	nop
 810f20a:	e7fd      	b.n	810f208 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810f20c:	4b19      	ldr	r3, [pc, #100]	@ (810f274 <xTimerGenericCommand+0x98>)
 810f20e:	681b      	ldr	r3, [r3, #0]
 810f210:	2b00      	cmp	r3, #0
 810f212:	d02a      	beq.n	810f26a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810f214:	68bb      	ldr	r3, [r7, #8]
 810f216:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810f218:	687b      	ldr	r3, [r7, #4]
 810f21a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810f21c:	68fb      	ldr	r3, [r7, #12]
 810f21e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810f220:	68bb      	ldr	r3, [r7, #8]
 810f222:	2b05      	cmp	r3, #5
 810f224:	dc18      	bgt.n	810f258 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810f226:	f7ff fc17 	bl	810ea58 <xTaskGetSchedulerState>
 810f22a:	4603      	mov	r3, r0
 810f22c:	2b02      	cmp	r3, #2
 810f22e:	d109      	bne.n	810f244 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810f230:	4b10      	ldr	r3, [pc, #64]	@ (810f274 <xTimerGenericCommand+0x98>)
 810f232:	6818      	ldr	r0, [r3, #0]
 810f234:	f107 0110 	add.w	r1, r7, #16
 810f238:	2300      	movs	r3, #0
 810f23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f23c:	f7fd ff6a 	bl	810d114 <xQueueGenericSend>
 810f240:	6278      	str	r0, [r7, #36]	@ 0x24
 810f242:	e012      	b.n	810f26a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810f244:	4b0b      	ldr	r3, [pc, #44]	@ (810f274 <xTimerGenericCommand+0x98>)
 810f246:	6818      	ldr	r0, [r3, #0]
 810f248:	f107 0110 	add.w	r1, r7, #16
 810f24c:	2300      	movs	r3, #0
 810f24e:	2200      	movs	r2, #0
 810f250:	f7fd ff60 	bl	810d114 <xQueueGenericSend>
 810f254:	6278      	str	r0, [r7, #36]	@ 0x24
 810f256:	e008      	b.n	810f26a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810f258:	4b06      	ldr	r3, [pc, #24]	@ (810f274 <xTimerGenericCommand+0x98>)
 810f25a:	6818      	ldr	r0, [r3, #0]
 810f25c:	f107 0110 	add.w	r1, r7, #16
 810f260:	2300      	movs	r3, #0
 810f262:	683a      	ldr	r2, [r7, #0]
 810f264:	f7fe f858 	bl	810d318 <xQueueGenericSendFromISR>
 810f268:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810f26c:	4618      	mov	r0, r3
 810f26e:	3728      	adds	r7, #40	@ 0x28
 810f270:	46bd      	mov	sp, r7
 810f272:	bd80      	pop	{r7, pc}
 810f274:	10004e84 	.word	0x10004e84

0810f278 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810f278:	b580      	push	{r7, lr}
 810f27a:	b088      	sub	sp, #32
 810f27c:	af02      	add	r7, sp, #8
 810f27e:	6078      	str	r0, [r7, #4]
 810f280:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f282:	4b23      	ldr	r3, [pc, #140]	@ (810f310 <prvProcessExpiredTimer+0x98>)
 810f284:	681b      	ldr	r3, [r3, #0]
 810f286:	68db      	ldr	r3, [r3, #12]
 810f288:	68db      	ldr	r3, [r3, #12]
 810f28a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f28c:	697b      	ldr	r3, [r7, #20]
 810f28e:	3304      	adds	r3, #4
 810f290:	4618      	mov	r0, r3
 810f292:	f7fd fb11 	bl	810c8b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f296:	697b      	ldr	r3, [r7, #20]
 810f298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f29c:	f003 0304 	and.w	r3, r3, #4
 810f2a0:	2b00      	cmp	r3, #0
 810f2a2:	d023      	beq.n	810f2ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810f2a4:	697b      	ldr	r3, [r7, #20]
 810f2a6:	699a      	ldr	r2, [r3, #24]
 810f2a8:	687b      	ldr	r3, [r7, #4]
 810f2aa:	18d1      	adds	r1, r2, r3
 810f2ac:	687b      	ldr	r3, [r7, #4]
 810f2ae:	683a      	ldr	r2, [r7, #0]
 810f2b0:	6978      	ldr	r0, [r7, #20]
 810f2b2:	f000 f8d5 	bl	810f460 <prvInsertTimerInActiveList>
 810f2b6:	4603      	mov	r3, r0
 810f2b8:	2b00      	cmp	r3, #0
 810f2ba:	d020      	beq.n	810f2fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f2bc:	2300      	movs	r3, #0
 810f2be:	9300      	str	r3, [sp, #0]
 810f2c0:	2300      	movs	r3, #0
 810f2c2:	687a      	ldr	r2, [r7, #4]
 810f2c4:	2100      	movs	r1, #0
 810f2c6:	6978      	ldr	r0, [r7, #20]
 810f2c8:	f7ff ff88 	bl	810f1dc <xTimerGenericCommand>
 810f2cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810f2ce:	693b      	ldr	r3, [r7, #16]
 810f2d0:	2b00      	cmp	r3, #0
 810f2d2:	d114      	bne.n	810f2fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 810f2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f2d8:	f383 8811 	msr	BASEPRI, r3
 810f2dc:	f3bf 8f6f 	isb	sy
 810f2e0:	f3bf 8f4f 	dsb	sy
 810f2e4:	60fb      	str	r3, [r7, #12]
}
 810f2e6:	bf00      	nop
 810f2e8:	bf00      	nop
 810f2ea:	e7fd      	b.n	810f2e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f2ec:	697b      	ldr	r3, [r7, #20]
 810f2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f2f2:	f023 0301 	bic.w	r3, r3, #1
 810f2f6:	b2da      	uxtb	r2, r3
 810f2f8:	697b      	ldr	r3, [r7, #20]
 810f2fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f2fe:	697b      	ldr	r3, [r7, #20]
 810f300:	6a1b      	ldr	r3, [r3, #32]
 810f302:	6978      	ldr	r0, [r7, #20]
 810f304:	4798      	blx	r3
}
 810f306:	bf00      	nop
 810f308:	3718      	adds	r7, #24
 810f30a:	46bd      	mov	sp, r7
 810f30c:	bd80      	pop	{r7, pc}
 810f30e:	bf00      	nop
 810f310:	10004e7c 	.word	0x10004e7c

0810f314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810f314:	b580      	push	{r7, lr}
 810f316:	b084      	sub	sp, #16
 810f318:	af00      	add	r7, sp, #0
 810f31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f31c:	f107 0308 	add.w	r3, r7, #8
 810f320:	4618      	mov	r0, r3
 810f322:	f000 f859 	bl	810f3d8 <prvGetNextExpireTime>
 810f326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810f328:	68bb      	ldr	r3, [r7, #8]
 810f32a:	4619      	mov	r1, r3
 810f32c:	68f8      	ldr	r0, [r7, #12]
 810f32e:	f000 f805 	bl	810f33c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810f332:	f000 f8d7 	bl	810f4e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f336:	bf00      	nop
 810f338:	e7f0      	b.n	810f31c <prvTimerTask+0x8>
	...

0810f33c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810f33c:	b580      	push	{r7, lr}
 810f33e:	b084      	sub	sp, #16
 810f340:	af00      	add	r7, sp, #0
 810f342:	6078      	str	r0, [r7, #4]
 810f344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810f346:	f7fe ffa1 	bl	810e28c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f34a:	f107 0308 	add.w	r3, r7, #8
 810f34e:	4618      	mov	r0, r3
 810f350:	f000 f866 	bl	810f420 <prvSampleTimeNow>
 810f354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810f356:	68bb      	ldr	r3, [r7, #8]
 810f358:	2b00      	cmp	r3, #0
 810f35a:	d130      	bne.n	810f3be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810f35c:	683b      	ldr	r3, [r7, #0]
 810f35e:	2b00      	cmp	r3, #0
 810f360:	d10a      	bne.n	810f378 <prvProcessTimerOrBlockTask+0x3c>
 810f362:	687a      	ldr	r2, [r7, #4]
 810f364:	68fb      	ldr	r3, [r7, #12]
 810f366:	429a      	cmp	r2, r3
 810f368:	d806      	bhi.n	810f378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810f36a:	f7fe ff9d 	bl	810e2a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810f36e:	68f9      	ldr	r1, [r7, #12]
 810f370:	6878      	ldr	r0, [r7, #4]
 810f372:	f7ff ff81 	bl	810f278 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810f376:	e024      	b.n	810f3c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810f378:	683b      	ldr	r3, [r7, #0]
 810f37a:	2b00      	cmp	r3, #0
 810f37c:	d008      	beq.n	810f390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810f37e:	4b13      	ldr	r3, [pc, #76]	@ (810f3cc <prvProcessTimerOrBlockTask+0x90>)
 810f380:	681b      	ldr	r3, [r3, #0]
 810f382:	681b      	ldr	r3, [r3, #0]
 810f384:	2b00      	cmp	r3, #0
 810f386:	d101      	bne.n	810f38c <prvProcessTimerOrBlockTask+0x50>
 810f388:	2301      	movs	r3, #1
 810f38a:	e000      	b.n	810f38e <prvProcessTimerOrBlockTask+0x52>
 810f38c:	2300      	movs	r3, #0
 810f38e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810f390:	4b0f      	ldr	r3, [pc, #60]	@ (810f3d0 <prvProcessTimerOrBlockTask+0x94>)
 810f392:	6818      	ldr	r0, [r3, #0]
 810f394:	687a      	ldr	r2, [r7, #4]
 810f396:	68fb      	ldr	r3, [r7, #12]
 810f398:	1ad3      	subs	r3, r2, r3
 810f39a:	683a      	ldr	r2, [r7, #0]
 810f39c:	4619      	mov	r1, r3
 810f39e:	f7fe fcfd 	bl	810dd9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810f3a2:	f7fe ff81 	bl	810e2a8 <xTaskResumeAll>
 810f3a6:	4603      	mov	r3, r0
 810f3a8:	2b00      	cmp	r3, #0
 810f3aa:	d10a      	bne.n	810f3c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810f3ac:	4b09      	ldr	r3, [pc, #36]	@ (810f3d4 <prvProcessTimerOrBlockTask+0x98>)
 810f3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f3b2:	601a      	str	r2, [r3, #0]
 810f3b4:	f3bf 8f4f 	dsb	sy
 810f3b8:	f3bf 8f6f 	isb	sy
}
 810f3bc:	e001      	b.n	810f3c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810f3be:	f7fe ff73 	bl	810e2a8 <xTaskResumeAll>
}
 810f3c2:	bf00      	nop
 810f3c4:	3710      	adds	r7, #16
 810f3c6:	46bd      	mov	sp, r7
 810f3c8:	bd80      	pop	{r7, pc}
 810f3ca:	bf00      	nop
 810f3cc:	10004e80 	.word	0x10004e80
 810f3d0:	10004e84 	.word	0x10004e84
 810f3d4:	e000ed04 	.word	0xe000ed04

0810f3d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810f3d8:	b480      	push	{r7}
 810f3da:	b085      	sub	sp, #20
 810f3dc:	af00      	add	r7, sp, #0
 810f3de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810f3e0:	4b0e      	ldr	r3, [pc, #56]	@ (810f41c <prvGetNextExpireTime+0x44>)
 810f3e2:	681b      	ldr	r3, [r3, #0]
 810f3e4:	681b      	ldr	r3, [r3, #0]
 810f3e6:	2b00      	cmp	r3, #0
 810f3e8:	d101      	bne.n	810f3ee <prvGetNextExpireTime+0x16>
 810f3ea:	2201      	movs	r2, #1
 810f3ec:	e000      	b.n	810f3f0 <prvGetNextExpireTime+0x18>
 810f3ee:	2200      	movs	r2, #0
 810f3f0:	687b      	ldr	r3, [r7, #4]
 810f3f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810f3f4:	687b      	ldr	r3, [r7, #4]
 810f3f6:	681b      	ldr	r3, [r3, #0]
 810f3f8:	2b00      	cmp	r3, #0
 810f3fa:	d105      	bne.n	810f408 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f3fc:	4b07      	ldr	r3, [pc, #28]	@ (810f41c <prvGetNextExpireTime+0x44>)
 810f3fe:	681b      	ldr	r3, [r3, #0]
 810f400:	68db      	ldr	r3, [r3, #12]
 810f402:	681b      	ldr	r3, [r3, #0]
 810f404:	60fb      	str	r3, [r7, #12]
 810f406:	e001      	b.n	810f40c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810f408:	2300      	movs	r3, #0
 810f40a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810f40c:	68fb      	ldr	r3, [r7, #12]
}
 810f40e:	4618      	mov	r0, r3
 810f410:	3714      	adds	r7, #20
 810f412:	46bd      	mov	sp, r7
 810f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f418:	4770      	bx	lr
 810f41a:	bf00      	nop
 810f41c:	10004e7c 	.word	0x10004e7c

0810f420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810f420:	b580      	push	{r7, lr}
 810f422:	b084      	sub	sp, #16
 810f424:	af00      	add	r7, sp, #0
 810f426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810f428:	f7fe ffdc 	bl	810e3e4 <xTaskGetTickCount>
 810f42c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810f42e:	4b0b      	ldr	r3, [pc, #44]	@ (810f45c <prvSampleTimeNow+0x3c>)
 810f430:	681b      	ldr	r3, [r3, #0]
 810f432:	68fa      	ldr	r2, [r7, #12]
 810f434:	429a      	cmp	r2, r3
 810f436:	d205      	bcs.n	810f444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810f438:	f000 f93a 	bl	810f6b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810f43c:	687b      	ldr	r3, [r7, #4]
 810f43e:	2201      	movs	r2, #1
 810f440:	601a      	str	r2, [r3, #0]
 810f442:	e002      	b.n	810f44a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810f444:	687b      	ldr	r3, [r7, #4]
 810f446:	2200      	movs	r2, #0
 810f448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810f44a:	4a04      	ldr	r2, [pc, #16]	@ (810f45c <prvSampleTimeNow+0x3c>)
 810f44c:	68fb      	ldr	r3, [r7, #12]
 810f44e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810f450:	68fb      	ldr	r3, [r7, #12]
}
 810f452:	4618      	mov	r0, r3
 810f454:	3710      	adds	r7, #16
 810f456:	46bd      	mov	sp, r7
 810f458:	bd80      	pop	{r7, pc}
 810f45a:	bf00      	nop
 810f45c:	10004e8c 	.word	0x10004e8c

0810f460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810f460:	b580      	push	{r7, lr}
 810f462:	b086      	sub	sp, #24
 810f464:	af00      	add	r7, sp, #0
 810f466:	60f8      	str	r0, [r7, #12]
 810f468:	60b9      	str	r1, [r7, #8]
 810f46a:	607a      	str	r2, [r7, #4]
 810f46c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810f46e:	2300      	movs	r3, #0
 810f470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810f472:	68fb      	ldr	r3, [r7, #12]
 810f474:	68ba      	ldr	r2, [r7, #8]
 810f476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f478:	68fb      	ldr	r3, [r7, #12]
 810f47a:	68fa      	ldr	r2, [r7, #12]
 810f47c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810f47e:	68ba      	ldr	r2, [r7, #8]
 810f480:	687b      	ldr	r3, [r7, #4]
 810f482:	429a      	cmp	r2, r3
 810f484:	d812      	bhi.n	810f4ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f486:	687a      	ldr	r2, [r7, #4]
 810f488:	683b      	ldr	r3, [r7, #0]
 810f48a:	1ad2      	subs	r2, r2, r3
 810f48c:	68fb      	ldr	r3, [r7, #12]
 810f48e:	699b      	ldr	r3, [r3, #24]
 810f490:	429a      	cmp	r2, r3
 810f492:	d302      	bcc.n	810f49a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810f494:	2301      	movs	r3, #1
 810f496:	617b      	str	r3, [r7, #20]
 810f498:	e01b      	b.n	810f4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810f49a:	4b10      	ldr	r3, [pc, #64]	@ (810f4dc <prvInsertTimerInActiveList+0x7c>)
 810f49c:	681a      	ldr	r2, [r3, #0]
 810f49e:	68fb      	ldr	r3, [r7, #12]
 810f4a0:	3304      	adds	r3, #4
 810f4a2:	4619      	mov	r1, r3
 810f4a4:	4610      	mov	r0, r2
 810f4a6:	f7fd f9ce 	bl	810c846 <vListInsert>
 810f4aa:	e012      	b.n	810f4d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810f4ac:	687a      	ldr	r2, [r7, #4]
 810f4ae:	683b      	ldr	r3, [r7, #0]
 810f4b0:	429a      	cmp	r2, r3
 810f4b2:	d206      	bcs.n	810f4c2 <prvInsertTimerInActiveList+0x62>
 810f4b4:	68ba      	ldr	r2, [r7, #8]
 810f4b6:	683b      	ldr	r3, [r7, #0]
 810f4b8:	429a      	cmp	r2, r3
 810f4ba:	d302      	bcc.n	810f4c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810f4bc:	2301      	movs	r3, #1
 810f4be:	617b      	str	r3, [r7, #20]
 810f4c0:	e007      	b.n	810f4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f4c2:	4b07      	ldr	r3, [pc, #28]	@ (810f4e0 <prvInsertTimerInActiveList+0x80>)
 810f4c4:	681a      	ldr	r2, [r3, #0]
 810f4c6:	68fb      	ldr	r3, [r7, #12]
 810f4c8:	3304      	adds	r3, #4
 810f4ca:	4619      	mov	r1, r3
 810f4cc:	4610      	mov	r0, r2
 810f4ce:	f7fd f9ba 	bl	810c846 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810f4d2:	697b      	ldr	r3, [r7, #20]
}
 810f4d4:	4618      	mov	r0, r3
 810f4d6:	3718      	adds	r7, #24
 810f4d8:	46bd      	mov	sp, r7
 810f4da:	bd80      	pop	{r7, pc}
 810f4dc:	10004e80 	.word	0x10004e80
 810f4e0:	10004e7c 	.word	0x10004e7c

0810f4e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810f4e4:	b580      	push	{r7, lr}
 810f4e6:	b08e      	sub	sp, #56	@ 0x38
 810f4e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f4ea:	e0ce      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810f4ec:	687b      	ldr	r3, [r7, #4]
 810f4ee:	2b00      	cmp	r3, #0
 810f4f0:	da19      	bge.n	810f526 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810f4f2:	1d3b      	adds	r3, r7, #4
 810f4f4:	3304      	adds	r3, #4
 810f4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810f4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f4fa:	2b00      	cmp	r3, #0
 810f4fc:	d10b      	bne.n	810f516 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810f4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f502:	f383 8811 	msr	BASEPRI, r3
 810f506:	f3bf 8f6f 	isb	sy
 810f50a:	f3bf 8f4f 	dsb	sy
 810f50e:	61fb      	str	r3, [r7, #28]
}
 810f510:	bf00      	nop
 810f512:	bf00      	nop
 810f514:	e7fd      	b.n	810f512 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810f516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f518:	681b      	ldr	r3, [r3, #0]
 810f51a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f51c:	6850      	ldr	r0, [r2, #4]
 810f51e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f520:	6892      	ldr	r2, [r2, #8]
 810f522:	4611      	mov	r1, r2
 810f524:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810f526:	687b      	ldr	r3, [r7, #4]
 810f528:	2b00      	cmp	r3, #0
 810f52a:	f2c0 80ae 	blt.w	810f68a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810f52e:	68fb      	ldr	r3, [r7, #12]
 810f530:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f534:	695b      	ldr	r3, [r3, #20]
 810f536:	2b00      	cmp	r3, #0
 810f538:	d004      	beq.n	810f544 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f53c:	3304      	adds	r3, #4
 810f53e:	4618      	mov	r0, r3
 810f540:	f7fd f9ba 	bl	810c8b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f544:	463b      	mov	r3, r7
 810f546:	4618      	mov	r0, r3
 810f548:	f7ff ff6a 	bl	810f420 <prvSampleTimeNow>
 810f54c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810f54e:	687b      	ldr	r3, [r7, #4]
 810f550:	2b09      	cmp	r3, #9
 810f552:	f200 8097 	bhi.w	810f684 <prvProcessReceivedCommands+0x1a0>
 810f556:	a201      	add	r2, pc, #4	@ (adr r2, 810f55c <prvProcessReceivedCommands+0x78>)
 810f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f55c:	0810f585 	.word	0x0810f585
 810f560:	0810f585 	.word	0x0810f585
 810f564:	0810f585 	.word	0x0810f585
 810f568:	0810f5fb 	.word	0x0810f5fb
 810f56c:	0810f60f 	.word	0x0810f60f
 810f570:	0810f65b 	.word	0x0810f65b
 810f574:	0810f585 	.word	0x0810f585
 810f578:	0810f585 	.word	0x0810f585
 810f57c:	0810f5fb 	.word	0x0810f5fb
 810f580:	0810f60f 	.word	0x0810f60f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f58a:	f043 0301 	orr.w	r3, r3, #1
 810f58e:	b2da      	uxtb	r2, r3
 810f590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810f596:	68ba      	ldr	r2, [r7, #8]
 810f598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f59a:	699b      	ldr	r3, [r3, #24]
 810f59c:	18d1      	adds	r1, r2, r3
 810f59e:	68bb      	ldr	r3, [r7, #8]
 810f5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f5a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f5a4:	f7ff ff5c 	bl	810f460 <prvInsertTimerInActiveList>
 810f5a8:	4603      	mov	r3, r0
 810f5aa:	2b00      	cmp	r3, #0
 810f5ac:	d06c      	beq.n	810f688 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f5b0:	6a1b      	ldr	r3, [r3, #32]
 810f5b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f5b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f5bc:	f003 0304 	and.w	r3, r3, #4
 810f5c0:	2b00      	cmp	r3, #0
 810f5c2:	d061      	beq.n	810f688 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810f5c4:	68ba      	ldr	r2, [r7, #8]
 810f5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f5c8:	699b      	ldr	r3, [r3, #24]
 810f5ca:	441a      	add	r2, r3
 810f5cc:	2300      	movs	r3, #0
 810f5ce:	9300      	str	r3, [sp, #0]
 810f5d0:	2300      	movs	r3, #0
 810f5d2:	2100      	movs	r1, #0
 810f5d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f5d6:	f7ff fe01 	bl	810f1dc <xTimerGenericCommand>
 810f5da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810f5dc:	6a3b      	ldr	r3, [r7, #32]
 810f5de:	2b00      	cmp	r3, #0
 810f5e0:	d152      	bne.n	810f688 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810f5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f5e6:	f383 8811 	msr	BASEPRI, r3
 810f5ea:	f3bf 8f6f 	isb	sy
 810f5ee:	f3bf 8f4f 	dsb	sy
 810f5f2:	61bb      	str	r3, [r7, #24]
}
 810f5f4:	bf00      	nop
 810f5f6:	bf00      	nop
 810f5f8:	e7fd      	b.n	810f5f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f600:	f023 0301 	bic.w	r3, r3, #1
 810f604:	b2da      	uxtb	r2, r3
 810f606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f608:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810f60c:	e03d      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f614:	f043 0301 	orr.w	r3, r3, #1
 810f618:	b2da      	uxtb	r2, r3
 810f61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f61c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810f620:	68ba      	ldr	r2, [r7, #8]
 810f622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f624:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810f626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f628:	699b      	ldr	r3, [r3, #24]
 810f62a:	2b00      	cmp	r3, #0
 810f62c:	d10b      	bne.n	810f646 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f632:	f383 8811 	msr	BASEPRI, r3
 810f636:	f3bf 8f6f 	isb	sy
 810f63a:	f3bf 8f4f 	dsb	sy
 810f63e:	617b      	str	r3, [r7, #20]
}
 810f640:	bf00      	nop
 810f642:	bf00      	nop
 810f644:	e7fd      	b.n	810f642 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810f646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f648:	699a      	ldr	r2, [r3, #24]
 810f64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f64c:	18d1      	adds	r1, r2, r3
 810f64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f654:	f7ff ff04 	bl	810f460 <prvInsertTimerInActiveList>
					break;
 810f658:	e017      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f65c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f660:	f003 0302 	and.w	r3, r3, #2
 810f664:	2b00      	cmp	r3, #0
 810f666:	d103      	bne.n	810f670 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810f668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f66a:	f7fc ff7b 	bl	810c564 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810f66e:	e00c      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f672:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f676:	f023 0301 	bic.w	r3, r3, #1
 810f67a:	b2da      	uxtb	r2, r3
 810f67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f67e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810f682:	e002      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810f684:	bf00      	nop
 810f686:	e000      	b.n	810f68a <prvProcessReceivedCommands+0x1a6>
					break;
 810f688:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f68a:	4b08      	ldr	r3, [pc, #32]	@ (810f6ac <prvProcessReceivedCommands+0x1c8>)
 810f68c:	681b      	ldr	r3, [r3, #0]
 810f68e:	1d39      	adds	r1, r7, #4
 810f690:	2200      	movs	r2, #0
 810f692:	4618      	mov	r0, r3
 810f694:	f7fd ff6e 	bl	810d574 <xQueueReceive>
 810f698:	4603      	mov	r3, r0
 810f69a:	2b00      	cmp	r3, #0
 810f69c:	f47f af26 	bne.w	810f4ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810f6a0:	bf00      	nop
 810f6a2:	bf00      	nop
 810f6a4:	3730      	adds	r7, #48	@ 0x30
 810f6a6:	46bd      	mov	sp, r7
 810f6a8:	bd80      	pop	{r7, pc}
 810f6aa:	bf00      	nop
 810f6ac:	10004e84 	.word	0x10004e84

0810f6b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810f6b0:	b580      	push	{r7, lr}
 810f6b2:	b088      	sub	sp, #32
 810f6b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f6b6:	e049      	b.n	810f74c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f6b8:	4b2e      	ldr	r3, [pc, #184]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f6ba:	681b      	ldr	r3, [r3, #0]
 810f6bc:	68db      	ldr	r3, [r3, #12]
 810f6be:	681b      	ldr	r3, [r3, #0]
 810f6c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f6c2:	4b2c      	ldr	r3, [pc, #176]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f6c4:	681b      	ldr	r3, [r3, #0]
 810f6c6:	68db      	ldr	r3, [r3, #12]
 810f6c8:	68db      	ldr	r3, [r3, #12]
 810f6ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f6cc:	68fb      	ldr	r3, [r7, #12]
 810f6ce:	3304      	adds	r3, #4
 810f6d0:	4618      	mov	r0, r3
 810f6d2:	f7fd f8f1 	bl	810c8b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f6d6:	68fb      	ldr	r3, [r7, #12]
 810f6d8:	6a1b      	ldr	r3, [r3, #32]
 810f6da:	68f8      	ldr	r0, [r7, #12]
 810f6dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f6de:	68fb      	ldr	r3, [r7, #12]
 810f6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f6e4:	f003 0304 	and.w	r3, r3, #4
 810f6e8:	2b00      	cmp	r3, #0
 810f6ea:	d02f      	beq.n	810f74c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810f6ec:	68fb      	ldr	r3, [r7, #12]
 810f6ee:	699b      	ldr	r3, [r3, #24]
 810f6f0:	693a      	ldr	r2, [r7, #16]
 810f6f2:	4413      	add	r3, r2
 810f6f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810f6f6:	68ba      	ldr	r2, [r7, #8]
 810f6f8:	693b      	ldr	r3, [r7, #16]
 810f6fa:	429a      	cmp	r2, r3
 810f6fc:	d90e      	bls.n	810f71c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810f6fe:	68fb      	ldr	r3, [r7, #12]
 810f700:	68ba      	ldr	r2, [r7, #8]
 810f702:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f704:	68fb      	ldr	r3, [r7, #12]
 810f706:	68fa      	ldr	r2, [r7, #12]
 810f708:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f70a:	4b1a      	ldr	r3, [pc, #104]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f70c:	681a      	ldr	r2, [r3, #0]
 810f70e:	68fb      	ldr	r3, [r7, #12]
 810f710:	3304      	adds	r3, #4
 810f712:	4619      	mov	r1, r3
 810f714:	4610      	mov	r0, r2
 810f716:	f7fd f896 	bl	810c846 <vListInsert>
 810f71a:	e017      	b.n	810f74c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f71c:	2300      	movs	r3, #0
 810f71e:	9300      	str	r3, [sp, #0]
 810f720:	2300      	movs	r3, #0
 810f722:	693a      	ldr	r2, [r7, #16]
 810f724:	2100      	movs	r1, #0
 810f726:	68f8      	ldr	r0, [r7, #12]
 810f728:	f7ff fd58 	bl	810f1dc <xTimerGenericCommand>
 810f72c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810f72e:	687b      	ldr	r3, [r7, #4]
 810f730:	2b00      	cmp	r3, #0
 810f732:	d10b      	bne.n	810f74c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810f734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f738:	f383 8811 	msr	BASEPRI, r3
 810f73c:	f3bf 8f6f 	isb	sy
 810f740:	f3bf 8f4f 	dsb	sy
 810f744:	603b      	str	r3, [r7, #0]
}
 810f746:	bf00      	nop
 810f748:	bf00      	nop
 810f74a:	e7fd      	b.n	810f748 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f74c:	4b09      	ldr	r3, [pc, #36]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f74e:	681b      	ldr	r3, [r3, #0]
 810f750:	681b      	ldr	r3, [r3, #0]
 810f752:	2b00      	cmp	r3, #0
 810f754:	d1b0      	bne.n	810f6b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810f756:	4b07      	ldr	r3, [pc, #28]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f758:	681b      	ldr	r3, [r3, #0]
 810f75a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810f75c:	4b06      	ldr	r3, [pc, #24]	@ (810f778 <prvSwitchTimerLists+0xc8>)
 810f75e:	681b      	ldr	r3, [r3, #0]
 810f760:	4a04      	ldr	r2, [pc, #16]	@ (810f774 <prvSwitchTimerLists+0xc4>)
 810f762:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810f764:	4a04      	ldr	r2, [pc, #16]	@ (810f778 <prvSwitchTimerLists+0xc8>)
 810f766:	697b      	ldr	r3, [r7, #20]
 810f768:	6013      	str	r3, [r2, #0]
}
 810f76a:	bf00      	nop
 810f76c:	3718      	adds	r7, #24
 810f76e:	46bd      	mov	sp, r7
 810f770:	bd80      	pop	{r7, pc}
 810f772:	bf00      	nop
 810f774:	10004e7c 	.word	0x10004e7c
 810f778:	10004e80 	.word	0x10004e80

0810f77c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810f77c:	b580      	push	{r7, lr}
 810f77e:	b082      	sub	sp, #8
 810f780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810f782:	f7fd f9f1 	bl	810cb68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810f786:	4b15      	ldr	r3, [pc, #84]	@ (810f7dc <prvCheckForValidListAndQueue+0x60>)
 810f788:	681b      	ldr	r3, [r3, #0]
 810f78a:	2b00      	cmp	r3, #0
 810f78c:	d120      	bne.n	810f7d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810f78e:	4814      	ldr	r0, [pc, #80]	@ (810f7e0 <prvCheckForValidListAndQueue+0x64>)
 810f790:	f7fd f808 	bl	810c7a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810f794:	4813      	ldr	r0, [pc, #76]	@ (810f7e4 <prvCheckForValidListAndQueue+0x68>)
 810f796:	f7fd f805 	bl	810c7a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810f79a:	4b13      	ldr	r3, [pc, #76]	@ (810f7e8 <prvCheckForValidListAndQueue+0x6c>)
 810f79c:	4a10      	ldr	r2, [pc, #64]	@ (810f7e0 <prvCheckForValidListAndQueue+0x64>)
 810f79e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810f7a0:	4b12      	ldr	r3, [pc, #72]	@ (810f7ec <prvCheckForValidListAndQueue+0x70>)
 810f7a2:	4a10      	ldr	r2, [pc, #64]	@ (810f7e4 <prvCheckForValidListAndQueue+0x68>)
 810f7a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810f7a6:	2300      	movs	r3, #0
 810f7a8:	9300      	str	r3, [sp, #0]
 810f7aa:	4b11      	ldr	r3, [pc, #68]	@ (810f7f0 <prvCheckForValidListAndQueue+0x74>)
 810f7ac:	4a11      	ldr	r2, [pc, #68]	@ (810f7f4 <prvCheckForValidListAndQueue+0x78>)
 810f7ae:	2110      	movs	r1, #16
 810f7b0:	200a      	movs	r0, #10
 810f7b2:	f7fd fb65 	bl	810ce80 <xQueueGenericCreateStatic>
 810f7b6:	4603      	mov	r3, r0
 810f7b8:	4a08      	ldr	r2, [pc, #32]	@ (810f7dc <prvCheckForValidListAndQueue+0x60>)
 810f7ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810f7bc:	4b07      	ldr	r3, [pc, #28]	@ (810f7dc <prvCheckForValidListAndQueue+0x60>)
 810f7be:	681b      	ldr	r3, [r3, #0]
 810f7c0:	2b00      	cmp	r3, #0
 810f7c2:	d005      	beq.n	810f7d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810f7c4:	4b05      	ldr	r3, [pc, #20]	@ (810f7dc <prvCheckForValidListAndQueue+0x60>)
 810f7c6:	681b      	ldr	r3, [r3, #0]
 810f7c8:	490b      	ldr	r1, [pc, #44]	@ (810f7f8 <prvCheckForValidListAndQueue+0x7c>)
 810f7ca:	4618      	mov	r0, r3
 810f7cc:	f7fe fa92 	bl	810dcf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f7d0:	f7fd f9fc 	bl	810cbcc <vPortExitCritical>
}
 810f7d4:	bf00      	nop
 810f7d6:	46bd      	mov	sp, r7
 810f7d8:	bd80      	pop	{r7, pc}
 810f7da:	bf00      	nop
 810f7dc:	10004e84 	.word	0x10004e84
 810f7e0:	10004e54 	.word	0x10004e54
 810f7e4:	10004e68 	.word	0x10004e68
 810f7e8:	10004e7c 	.word	0x10004e7c
 810f7ec:	10004e80 	.word	0x10004e80
 810f7f0:	10004f30 	.word	0x10004f30
 810f7f4:	10004e90 	.word	0x10004e90
 810f7f8:	08117528 	.word	0x08117528

0810f7fc <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 810f7fc:	b480      	push	{r7}
 810f7fe:	b083      	sub	sp, #12
 810f800:	af00      	add	r7, sp, #0
 810f802:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810f804:	687b      	ldr	r3, [r7, #4]
 810f806:	687a      	ldr	r2, [r7, #4]
 810f808:	605a      	str	r2, [r3, #4]
 810f80a:	687b      	ldr	r3, [r7, #4]
 810f80c:	685a      	ldr	r2, [r3, #4]
 810f80e:	687b      	ldr	r3, [r7, #4]
 810f810:	601a      	str	r2, [r3, #0]
}
 810f812:	bf00      	nop
 810f814:	370c      	adds	r7, #12
 810f816:	46bd      	mov	sp, r7
 810f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f81c:	4770      	bx	lr

0810f81e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 810f81e:	b480      	push	{r7}
 810f820:	b083      	sub	sp, #12
 810f822:	af00      	add	r7, sp, #0
 810f824:	6078      	str	r0, [r7, #4]
 810f826:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810f828:	687b      	ldr	r3, [r7, #4]
 810f82a:	685a      	ldr	r2, [r3, #4]
 810f82c:	683b      	ldr	r3, [r7, #0]
 810f82e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 810f830:	683b      	ldr	r3, [r7, #0]
 810f832:	687a      	ldr	r2, [r7, #4]
 810f834:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810f836:	683b      	ldr	r3, [r7, #0]
 810f838:	681b      	ldr	r3, [r3, #0]
 810f83a:	683a      	ldr	r2, [r7, #0]
 810f83c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 810f83e:	683b      	ldr	r3, [r7, #0]
 810f840:	685b      	ldr	r3, [r3, #4]
 810f842:	683a      	ldr	r2, [r7, #0]
 810f844:	601a      	str	r2, [r3, #0]
}
 810f846:	bf00      	nop
 810f848:	370c      	adds	r7, #12
 810f84a:	46bd      	mov	sp, r7
 810f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f850:	4770      	bx	lr

0810f852 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 810f852:	b580      	push	{r7, lr}
 810f854:	b082      	sub	sp, #8
 810f856:	af00      	add	r7, sp, #0
 810f858:	6078      	str	r0, [r7, #4]
 810f85a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 810f85c:	6839      	ldr	r1, [r7, #0]
 810f85e:	6878      	ldr	r0, [r7, #4]
 810f860:	f7ff ffdd 	bl	810f81e <metal_list_add_before>
}
 810f864:	bf00      	nop
 810f866:	3708      	adds	r7, #8
 810f868:	46bd      	mov	sp, r7
 810f86a:	bd80      	pop	{r7, pc}

0810f86c <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 810f86c:	b580      	push	{r7, lr}
 810f86e:	b082      	sub	sp, #8
 810f870:	af00      	add	r7, sp, #0
 810f872:	6078      	str	r0, [r7, #4]
 810f874:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 810f876:	6839      	ldr	r1, [r7, #0]
 810f878:	6878      	ldr	r0, [r7, #4]
 810f87a:	f001 fdbf 	bl	81113fc <metal_machine_cache_flush>
}
 810f87e:	bf00      	nop
 810f880:	3708      	adds	r7, #8
 810f882:	46bd      	mov	sp, r7
 810f884:	bd80      	pop	{r7, pc}

0810f886 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 810f886:	b580      	push	{r7, lr}
 810f888:	b082      	sub	sp, #8
 810f88a:	af00      	add	r7, sp, #0
 810f88c:	6078      	str	r0, [r7, #4]
 810f88e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810f890:	6839      	ldr	r1, [r7, #0]
 810f892:	6878      	ldr	r0, [r7, #4]
 810f894:	f001 fdbd 	bl	8111412 <metal_machine_cache_invalidate>
}
 810f898:	bf00      	nop
 810f89a:	3708      	adds	r7, #8
 810f89c:	46bd      	mov	sp, r7
 810f89e:	bd80      	pop	{r7, pc}

0810f8a0 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 810f8a0:	b580      	push	{r7, lr}
 810f8a2:	b082      	sub	sp, #8
 810f8a4:	af00      	add	r7, sp, #0
 810f8a6:	6078      	str	r0, [r7, #4]
 810f8a8:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810f8aa:	6839      	ldr	r1, [r7, #0]
 810f8ac:	6878      	ldr	r0, [r7, #4]
 810f8ae:	f7ff ffdd 	bl	810f86c <__metal_cache_flush>
}
 810f8b2:	bf00      	nop
 810f8b4:	3708      	adds	r7, #8
 810f8b6:	46bd      	mov	sp, r7
 810f8b8:	bd80      	pop	{r7, pc}

0810f8ba <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810f8ba:	b580      	push	{r7, lr}
 810f8bc:	b082      	sub	sp, #8
 810f8be:	af00      	add	r7, sp, #0
 810f8c0:	6078      	str	r0, [r7, #4]
 810f8c2:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 810f8c4:	6839      	ldr	r1, [r7, #0]
 810f8c6:	6878      	ldr	r0, [r7, #4]
 810f8c8:	f7ff ffdd 	bl	810f886 <__metal_cache_invalidate>
}
 810f8cc:	bf00      	nop
 810f8ce:	3708      	adds	r7, #8
 810f8d0:	46bd      	mov	sp, r7
 810f8d2:	bd80      	pop	{r7, pc}

0810f8d4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 810f8d4:	b580      	push	{r7, lr}
 810f8d6:	b082      	sub	sp, #8
 810f8d8:	af00      	add	r7, sp, #0
 810f8da:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 810f8dc:	687b      	ldr	r3, [r7, #4]
 810f8de:	2b00      	cmp	r3, #0
 810f8e0:	d008      	beq.n	810f8f4 <metal_bus_register+0x20>
 810f8e2:	687b      	ldr	r3, [r7, #4]
 810f8e4:	681b      	ldr	r3, [r3, #0]
 810f8e6:	2b00      	cmp	r3, #0
 810f8e8:	d004      	beq.n	810f8f4 <metal_bus_register+0x20>
 810f8ea:	687b      	ldr	r3, [r7, #4]
 810f8ec:	681b      	ldr	r3, [r3, #0]
 810f8ee:	781b      	ldrb	r3, [r3, #0]
 810f8f0:	2b00      	cmp	r3, #0
 810f8f2:	d102      	bne.n	810f8fa <metal_bus_register+0x26>
		return -EINVAL;
 810f8f4:	f06f 0315 	mvn.w	r3, #21
 810f8f8:	e026      	b.n	810f948 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810f8fa:	687b      	ldr	r3, [r7, #4]
 810f8fc:	681b      	ldr	r3, [r3, #0]
 810f8fe:	2100      	movs	r1, #0
 810f900:	4618      	mov	r0, r3
 810f902:	f000 f82b 	bl	810f95c <metal_bus_find>
 810f906:	4603      	mov	r3, r0
 810f908:	2b00      	cmp	r3, #0
 810f90a:	d102      	bne.n	810f912 <metal_bus_register+0x3e>
		return -EEXIST;
 810f90c:	f06f 0310 	mvn.w	r3, #16
 810f910:	e01a      	b.n	810f948 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 810f912:	687b      	ldr	r3, [r7, #4]
 810f914:	331c      	adds	r3, #28
 810f916:	4618      	mov	r0, r3
 810f918:	f7ff ff70 	bl	810f7fc <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810f91c:	687b      	ldr	r3, [r7, #4]
 810f91e:	3324      	adds	r3, #36	@ 0x24
 810f920:	4619      	mov	r1, r3
 810f922:	480b      	ldr	r0, [pc, #44]	@ (810f950 <metal_bus_register+0x7c>)
 810f924:	f7ff ff95 	bl	810f852 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 810f928:	4b0a      	ldr	r3, [pc, #40]	@ (810f954 <metal_bus_register+0x80>)
 810f92a:	781b      	ldrb	r3, [r3, #0]
 810f92c:	2b06      	cmp	r3, #6
 810f92e:	d90a      	bls.n	810f946 <metal_bus_register+0x72>
 810f930:	4b08      	ldr	r3, [pc, #32]	@ (810f954 <metal_bus_register+0x80>)
 810f932:	685b      	ldr	r3, [r3, #4]
 810f934:	2b00      	cmp	r3, #0
 810f936:	d006      	beq.n	810f946 <metal_bus_register+0x72>
 810f938:	4b06      	ldr	r3, [pc, #24]	@ (810f954 <metal_bus_register+0x80>)
 810f93a:	685b      	ldr	r3, [r3, #4]
 810f93c:	687a      	ldr	r2, [r7, #4]
 810f93e:	6812      	ldr	r2, [r2, #0]
 810f940:	4905      	ldr	r1, [pc, #20]	@ (810f958 <metal_bus_register+0x84>)
 810f942:	2007      	movs	r0, #7
 810f944:	4798      	blx	r3
	return 0;
 810f946:	2300      	movs	r3, #0
}
 810f948:	4618      	mov	r0, r3
 810f94a:	3708      	adds	r7, #8
 810f94c:	46bd      	mov	sp, r7
 810f94e:	bd80      	pop	{r7, pc}
 810f950:	10004f88 	.word	0x10004f88
 810f954:	10004f80 	.word	0x10004f80
 810f958:	08117530 	.word	0x08117530

0810f95c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 810f95c:	b580      	push	{r7, lr}
 810f95e:	b084      	sub	sp, #16
 810f960:	af00      	add	r7, sp, #0
 810f962:	6078      	str	r0, [r7, #4]
 810f964:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 810f966:	4b13      	ldr	r3, [pc, #76]	@ (810f9b4 <metal_bus_find+0x58>)
 810f968:	689b      	ldr	r3, [r3, #8]
 810f96a:	60fb      	str	r3, [r7, #12]
 810f96c:	e017      	b.n	810f99e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 810f96e:	68fb      	ldr	r3, [r7, #12]
 810f970:	3b24      	subs	r3, #36	@ 0x24
 810f972:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 810f974:	68bb      	ldr	r3, [r7, #8]
 810f976:	681b      	ldr	r3, [r3, #0]
 810f978:	6879      	ldr	r1, [r7, #4]
 810f97a:	4618      	mov	r0, r3
 810f97c:	f7f0 fcb0 	bl	81002e0 <strcmp>
 810f980:	4603      	mov	r3, r0
 810f982:	2b00      	cmp	r3, #0
 810f984:	d107      	bne.n	810f996 <metal_bus_find+0x3a>
			continue;
		if (result)
 810f986:	683b      	ldr	r3, [r7, #0]
 810f988:	2b00      	cmp	r3, #0
 810f98a:	d002      	beq.n	810f992 <metal_bus_find+0x36>
			*result = bus;
 810f98c:	683b      	ldr	r3, [r7, #0]
 810f98e:	68ba      	ldr	r2, [r7, #8]
 810f990:	601a      	str	r2, [r3, #0]
		return 0;
 810f992:	2300      	movs	r3, #0
 810f994:	e009      	b.n	810f9aa <metal_bus_find+0x4e>
			continue;
 810f996:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 810f998:	68fb      	ldr	r3, [r7, #12]
 810f99a:	681b      	ldr	r3, [r3, #0]
 810f99c:	60fb      	str	r3, [r7, #12]
 810f99e:	68fb      	ldr	r3, [r7, #12]
 810f9a0:	4a05      	ldr	r2, [pc, #20]	@ (810f9b8 <metal_bus_find+0x5c>)
 810f9a2:	4293      	cmp	r3, r2
 810f9a4:	d1e3      	bne.n	810f96e <metal_bus_find+0x12>
	}
	return -ENOENT;
 810f9a6:	f06f 0301 	mvn.w	r3, #1
}
 810f9aa:	4618      	mov	r0, r3
 810f9ac:	3710      	adds	r7, #16
 810f9ae:	46bd      	mov	sp, r7
 810f9b0:	bd80      	pop	{r7, pc}
 810f9b2:	bf00      	nop
 810f9b4:	10004f80 	.word	0x10004f80
 810f9b8:	10004f88 	.word	0x10004f88

0810f9bc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 810f9bc:	b580      	push	{r7, lr}
 810f9be:	b086      	sub	sp, #24
 810f9c0:	af00      	add	r7, sp, #0
 810f9c2:	60f8      	str	r0, [r7, #12]
 810f9c4:	60b9      	str	r1, [r7, #8]
 810f9c6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 810f9c8:	68fb      	ldr	r3, [r7, #12]
 810f9ca:	2b00      	cmp	r3, #0
 810f9cc:	d00d      	beq.n	810f9ea <metal_device_open+0x2e>
 810f9ce:	68fb      	ldr	r3, [r7, #12]
 810f9d0:	781b      	ldrb	r3, [r3, #0]
 810f9d2:	2b00      	cmp	r3, #0
 810f9d4:	d009      	beq.n	810f9ea <metal_device_open+0x2e>
 810f9d6:	68bb      	ldr	r3, [r7, #8]
 810f9d8:	2b00      	cmp	r3, #0
 810f9da:	d006      	beq.n	810f9ea <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 810f9dc:	68bb      	ldr	r3, [r7, #8]
 810f9de:	781b      	ldrb	r3, [r3, #0]
 810f9e0:	2b00      	cmp	r3, #0
 810f9e2:	d002      	beq.n	810f9ea <metal_device_open+0x2e>
 810f9e4:	687b      	ldr	r3, [r7, #4]
 810f9e6:	2b00      	cmp	r3, #0
 810f9e8:	d102      	bne.n	810f9f0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 810f9ea:	f06f 0315 	mvn.w	r3, #21
 810f9ee:	e01f      	b.n	810fa30 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 810f9f0:	f107 0310 	add.w	r3, r7, #16
 810f9f4:	4619      	mov	r1, r3
 810f9f6:	68f8      	ldr	r0, [r7, #12]
 810f9f8:	f7ff ffb0 	bl	810f95c <metal_bus_find>
 810f9fc:	6178      	str	r0, [r7, #20]
	if (error)
 810f9fe:	697b      	ldr	r3, [r7, #20]
 810fa00:	2b00      	cmp	r3, #0
 810fa02:	d001      	beq.n	810fa08 <metal_device_open+0x4c>
		return error;
 810fa04:	697b      	ldr	r3, [r7, #20]
 810fa06:	e013      	b.n	810fa30 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 810fa08:	693b      	ldr	r3, [r7, #16]
 810fa0a:	689b      	ldr	r3, [r3, #8]
 810fa0c:	2b00      	cmp	r3, #0
 810fa0e:	d102      	bne.n	810fa16 <metal_device_open+0x5a>
		return -ENODEV;
 810fa10:	f06f 0312 	mvn.w	r3, #18
 810fa14:	e00c      	b.n	810fa30 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 810fa16:	693b      	ldr	r3, [r7, #16]
 810fa18:	689b      	ldr	r3, [r3, #8]
 810fa1a:	6938      	ldr	r0, [r7, #16]
 810fa1c:	687a      	ldr	r2, [r7, #4]
 810fa1e:	68b9      	ldr	r1, [r7, #8]
 810fa20:	4798      	blx	r3
 810fa22:	6178      	str	r0, [r7, #20]
	if (error)
 810fa24:	697b      	ldr	r3, [r7, #20]
 810fa26:	2b00      	cmp	r3, #0
 810fa28:	d001      	beq.n	810fa2e <metal_device_open+0x72>
		return error;
 810fa2a:	697b      	ldr	r3, [r7, #20]
 810fa2c:	e000      	b.n	810fa30 <metal_device_open+0x74>

	return 0;
 810fa2e:	2300      	movs	r3, #0
}
 810fa30:	4618      	mov	r0, r3
 810fa32:	3718      	adds	r7, #24
 810fa34:	46bd      	mov	sp, r7
 810fa36:	bd80      	pop	{r7, pc}

0810fa38 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 810fa38:	b580      	push	{r7, lr}
 810fa3a:	b082      	sub	sp, #8
 810fa3c:	af00      	add	r7, sp, #0
 810fa3e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 810fa40:	687b      	ldr	r3, [r7, #4]
 810fa42:	681b      	ldr	r3, [r3, #0]
 810fa44:	2b00      	cmp	r3, #0
 810fa46:	d008      	beq.n	810fa5a <metal_register_generic_device+0x22>
 810fa48:	687b      	ldr	r3, [r7, #4]
 810fa4a:	681b      	ldr	r3, [r3, #0]
 810fa4c:	781b      	ldrb	r3, [r3, #0]
 810fa4e:	2b00      	cmp	r3, #0
 810fa50:	d003      	beq.n	810fa5a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 810fa52:	687b      	ldr	r3, [r7, #4]
 810fa54:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 810fa56:	2b02      	cmp	r3, #2
 810fa58:	d902      	bls.n	810fa60 <metal_register_generic_device+0x28>
		return -EINVAL;
 810fa5a:	f06f 0315 	mvn.w	r3, #21
 810fa5e:	e009      	b.n	810fa74 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 810fa60:	687b      	ldr	r3, [r7, #4]
 810fa62:	4a06      	ldr	r2, [pc, #24]	@ (810fa7c <metal_register_generic_device+0x44>)
 810fa64:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 810fa66:	687b      	ldr	r3, [r7, #4]
 810fa68:	336c      	adds	r3, #108	@ 0x6c
 810fa6a:	4619      	mov	r1, r3
 810fa6c:	4804      	ldr	r0, [pc, #16]	@ (810fa80 <metal_register_generic_device+0x48>)
 810fa6e:	f7ff fef0 	bl	810f852 <metal_list_add_tail>
			    &device->node);
	return 0;
 810fa72:	2300      	movs	r3, #0
}
 810fa74:	4618      	mov	r0, r3
 810fa76:	3708      	adds	r7, #8
 810fa78:	46bd      	mov	sp, r7
 810fa7a:	bd80      	pop	{r7, pc}
 810fa7c:	10000014 	.word	0x10000014
 810fa80:	10004f98 	.word	0x10004f98

0810fa84 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 810fa84:	b580      	push	{r7, lr}
 810fa86:	b086      	sub	sp, #24
 810fa88:	af00      	add	r7, sp, #0
 810fa8a:	60f8      	str	r0, [r7, #12]
 810fa8c:	60b9      	str	r1, [r7, #8]
 810fa8e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 810fa90:	4b12      	ldr	r3, [pc, #72]	@ (810fadc <metal_generic_dev_open+0x58>)
 810fa92:	699b      	ldr	r3, [r3, #24]
 810fa94:	617b      	str	r3, [r7, #20]
 810fa96:	e017      	b.n	810fac8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 810fa98:	697b      	ldr	r3, [r7, #20]
 810fa9a:	3b6c      	subs	r3, #108	@ 0x6c
 810fa9c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810fa9e:	693b      	ldr	r3, [r7, #16]
 810faa0:	681b      	ldr	r3, [r3, #0]
 810faa2:	68b9      	ldr	r1, [r7, #8]
 810faa4:	4618      	mov	r0, r3
 810faa6:	f7f0 fc1b 	bl	81002e0 <strcmp>
 810faaa:	4603      	mov	r3, r0
 810faac:	2b00      	cmp	r3, #0
 810faae:	d107      	bne.n	810fac0 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 810fab0:	687b      	ldr	r3, [r7, #4]
 810fab2:	693a      	ldr	r2, [r7, #16]
 810fab4:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 810fab6:	6938      	ldr	r0, [r7, #16]
 810fab8:	f000 f890 	bl	810fbdc <metal_generic_dev_sys_open>
 810fabc:	4603      	mov	r3, r0
 810fabe:	e009      	b.n	810fad4 <metal_generic_dev_open+0x50>
			continue;
 810fac0:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 810fac2:	697b      	ldr	r3, [r7, #20]
 810fac4:	681b      	ldr	r3, [r3, #0]
 810fac6:	617b      	str	r3, [r7, #20]
 810fac8:	697b      	ldr	r3, [r7, #20]
 810faca:	4a05      	ldr	r2, [pc, #20]	@ (810fae0 <metal_generic_dev_open+0x5c>)
 810facc:	4293      	cmp	r3, r2
 810face:	d1e3      	bne.n	810fa98 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 810fad0:	f06f 0312 	mvn.w	r3, #18
}
 810fad4:	4618      	mov	r0, r3
 810fad6:	3718      	adds	r7, #24
 810fad8:	46bd      	mov	sp, r7
 810fada:	bd80      	pop	{r7, pc}
 810fadc:	10004f80 	.word	0x10004f80
 810fae0:	10004f98 	.word	0x10004f98

0810fae4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 810fae4:	b580      	push	{r7, lr}
 810fae6:	b086      	sub	sp, #24
 810fae8:	af00      	add	r7, sp, #0
 810faea:	60f8      	str	r0, [r7, #12]
 810faec:	60b9      	str	r1, [r7, #8]
 810faee:	607a      	str	r2, [r7, #4]
 810faf0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 810faf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810faf4:	683b      	ldr	r3, [r7, #0]
 810faf6:	429a      	cmp	r2, r3
 810faf8:	d009      	beq.n	810fb0e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 810fafa:	6a3a      	ldr	r2, [r7, #32]
 810fafc:	4613      	mov	r3, r2
 810fafe:	005b      	lsls	r3, r3, #1
 810fb00:	4413      	add	r3, r2
 810fb02:	009b      	lsls	r3, r3, #2
 810fb04:	461a      	mov	r2, r3
 810fb06:	6839      	ldr	r1, [r7, #0]
 810fb08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810fb0a:	f003 fb1a 	bl	8113142 <memcpy>
	for (i = 0; i < nents_in; i++) {
 810fb0e:	2300      	movs	r3, #0
 810fb10:	617b      	str	r3, [r7, #20]
 810fb12:	e02f      	b.n	810fb74 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 810fb14:	687b      	ldr	r3, [r7, #4]
 810fb16:	2b02      	cmp	r3, #2
 810fb18:	d114      	bne.n	810fb44 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810fb1a:	697a      	ldr	r2, [r7, #20]
 810fb1c:	4613      	mov	r3, r2
 810fb1e:	005b      	lsls	r3, r3, #1
 810fb20:	4413      	add	r3, r2
 810fb22:	009b      	lsls	r3, r3, #2
 810fb24:	461a      	mov	r2, r3
 810fb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb28:	4413      	add	r3, r2
 810fb2a:	6818      	ldr	r0, [r3, #0]
 810fb2c:	697a      	ldr	r2, [r7, #20]
 810fb2e:	4613      	mov	r3, r2
 810fb30:	005b      	lsls	r3, r3, #1
 810fb32:	4413      	add	r3, r2
 810fb34:	009b      	lsls	r3, r3, #2
 810fb36:	461a      	mov	r2, r3
 810fb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb3a:	4413      	add	r3, r2
 810fb3c:	689b      	ldr	r3, [r3, #8]
 810fb3e:	4619      	mov	r1, r3
 810fb40:	f7ff feae 	bl	810f8a0 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 810fb44:	697a      	ldr	r2, [r7, #20]
 810fb46:	4613      	mov	r3, r2
 810fb48:	005b      	lsls	r3, r3, #1
 810fb4a:	4413      	add	r3, r2
 810fb4c:	009b      	lsls	r3, r3, #2
 810fb4e:	461a      	mov	r2, r3
 810fb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb52:	4413      	add	r3, r2
 810fb54:	6818      	ldr	r0, [r3, #0]
 810fb56:	697a      	ldr	r2, [r7, #20]
 810fb58:	4613      	mov	r3, r2
 810fb5a:	005b      	lsls	r3, r3, #1
 810fb5c:	4413      	add	r3, r2
 810fb5e:	009b      	lsls	r3, r3, #2
 810fb60:	461a      	mov	r2, r3
 810fb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb64:	4413      	add	r3, r2
 810fb66:	689b      	ldr	r3, [r3, #8]
 810fb68:	4619      	mov	r1, r3
 810fb6a:	f7ff fea6 	bl	810f8ba <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 810fb6e:	697b      	ldr	r3, [r7, #20]
 810fb70:	3301      	adds	r3, #1
 810fb72:	617b      	str	r3, [r7, #20]
 810fb74:	697a      	ldr	r2, [r7, #20]
 810fb76:	6a3b      	ldr	r3, [r7, #32]
 810fb78:	429a      	cmp	r2, r3
 810fb7a:	dbcb      	blt.n	810fb14 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 810fb7c:	6a3b      	ldr	r3, [r7, #32]
}
 810fb7e:	4618      	mov	r0, r3
 810fb80:	3718      	adds	r7, #24
 810fb82:	46bd      	mov	sp, r7
 810fb84:	bd80      	pop	{r7, pc}

0810fb86 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 810fb86:	b580      	push	{r7, lr}
 810fb88:	b086      	sub	sp, #24
 810fb8a:	af00      	add	r7, sp, #0
 810fb8c:	60f8      	str	r0, [r7, #12]
 810fb8e:	60b9      	str	r1, [r7, #8]
 810fb90:	607a      	str	r2, [r7, #4]
 810fb92:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 810fb94:	2300      	movs	r3, #0
 810fb96:	617b      	str	r3, [r7, #20]
 810fb98:	e017      	b.n	810fbca <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810fb9a:	697a      	ldr	r2, [r7, #20]
 810fb9c:	4613      	mov	r3, r2
 810fb9e:	005b      	lsls	r3, r3, #1
 810fba0:	4413      	add	r3, r2
 810fba2:	009b      	lsls	r3, r3, #2
 810fba4:	461a      	mov	r2, r3
 810fba6:	683b      	ldr	r3, [r7, #0]
 810fba8:	4413      	add	r3, r2
 810fbaa:	6818      	ldr	r0, [r3, #0]
 810fbac:	697a      	ldr	r2, [r7, #20]
 810fbae:	4613      	mov	r3, r2
 810fbb0:	005b      	lsls	r3, r3, #1
 810fbb2:	4413      	add	r3, r2
 810fbb4:	009b      	lsls	r3, r3, #2
 810fbb6:	461a      	mov	r2, r3
 810fbb8:	683b      	ldr	r3, [r7, #0]
 810fbba:	4413      	add	r3, r2
 810fbbc:	689b      	ldr	r3, [r3, #8]
 810fbbe:	4619      	mov	r1, r3
 810fbc0:	f7ff fe7b 	bl	810f8ba <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 810fbc4:	697b      	ldr	r3, [r7, #20]
 810fbc6:	3301      	adds	r3, #1
 810fbc8:	617b      	str	r3, [r7, #20]
 810fbca:	697a      	ldr	r2, [r7, #20]
 810fbcc:	6a3b      	ldr	r3, [r7, #32]
 810fbce:	429a      	cmp	r2, r3
 810fbd0:	dbe3      	blt.n	810fb9a <metal_generic_dev_dma_unmap+0x14>
	}
}
 810fbd2:	bf00      	nop
 810fbd4:	bf00      	nop
 810fbd6:	3718      	adds	r7, #24
 810fbd8:	46bd      	mov	sp, r7
 810fbda:	bd80      	pop	{r7, pc}

0810fbdc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 810fbdc:	b580      	push	{r7, lr}
 810fbde:	b084      	sub	sp, #16
 810fbe0:	af00      	add	r7, sp, #0
 810fbe2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 810fbe4:	2300      	movs	r3, #0
 810fbe6:	60fb      	str	r3, [r7, #12]
 810fbe8:	e013      	b.n	810fc12 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 810fbea:	68fa      	ldr	r2, [r7, #12]
 810fbec:	4613      	mov	r3, r2
 810fbee:	005b      	lsls	r3, r3, #1
 810fbf0:	4413      	add	r3, r2
 810fbf2:	011b      	lsls	r3, r3, #4
 810fbf4:	3308      	adds	r3, #8
 810fbf6:	687a      	ldr	r2, [r7, #4]
 810fbf8:	4413      	add	r3, r2
 810fbfa:	3304      	adds	r3, #4
 810fbfc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 810fbfe:	68bb      	ldr	r3, [r7, #8]
 810fc00:	689b      	ldr	r3, [r3, #8]
 810fc02:	2b00      	cmp	r3, #0
 810fc04:	d00b      	beq.n	810fc1e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 810fc06:	68b8      	ldr	r0, [r7, #8]
 810fc08:	f000 f81e 	bl	810fc48 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 810fc0c:	68fb      	ldr	r3, [r7, #12]
 810fc0e:	3301      	adds	r3, #1
 810fc10:	60fb      	str	r3, [r7, #12]
 810fc12:	687b      	ldr	r3, [r7, #4]
 810fc14:	689b      	ldr	r3, [r3, #8]
 810fc16:	68fa      	ldr	r2, [r7, #12]
 810fc18:	429a      	cmp	r2, r3
 810fc1a:	d3e6      	bcc.n	810fbea <metal_generic_dev_sys_open+0xe>
 810fc1c:	e000      	b.n	810fc20 <metal_generic_dev_sys_open+0x44>
			break;
 810fc1e:	bf00      	nop
	}

	return 0;
 810fc20:	2300      	movs	r3, #0
}
 810fc22:	4618      	mov	r0, r3
 810fc24:	3710      	adds	r7, #16
 810fc26:	46bd      	mov	sp, r7
 810fc28:	bd80      	pop	{r7, pc}
	...

0810fc2c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 810fc2c:	b580      	push	{r7, lr}
 810fc2e:	b082      	sub	sp, #8
 810fc30:	af00      	add	r7, sp, #0
 810fc32:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 810fc34:	4803      	ldr	r0, [pc, #12]	@ (810fc44 <metal_sys_init+0x18>)
 810fc36:	f7ff fe4d 	bl	810f8d4 <metal_bus_register>
	return 0;
 810fc3a:	2300      	movs	r3, #0
}
 810fc3c:	4618      	mov	r0, r3
 810fc3e:	3708      	adds	r7, #8
 810fc40:	46bd      	mov	sp, r7
 810fc42:	bd80      	pop	{r7, pc}
 810fc44:	10000014 	.word	0x10000014

0810fc48 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 810fc48:	b580      	push	{r7, lr}
 810fc4a:	b086      	sub	sp, #24
 810fc4c:	af00      	add	r7, sp, #0
 810fc4e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 810fc50:	687b      	ldr	r3, [r7, #4]
 810fc52:	681b      	ldr	r3, [r3, #0]
 810fc54:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 810fc56:	687b      	ldr	r3, [r7, #4]
 810fc58:	689b      	ldr	r3, [r3, #8]
 810fc5a:	613b      	str	r3, [r7, #16]
	if (psize) {
 810fc5c:	693b      	ldr	r3, [r7, #16]
 810fc5e:	2b00      	cmp	r3, #0
 810fc60:	d02c      	beq.n	810fcbc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 810fc62:	687b      	ldr	r3, [r7, #4]
 810fc64:	68db      	ldr	r3, [r3, #12]
 810fc66:	693a      	ldr	r2, [r7, #16]
 810fc68:	fa22 f303 	lsr.w	r3, r2, r3
 810fc6c:	2b00      	cmp	r3, #0
 810fc6e:	d005      	beq.n	810fc7c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 810fc70:	687b      	ldr	r3, [r7, #4]
 810fc72:	68db      	ldr	r3, [r3, #12]
 810fc74:	2201      	movs	r2, #1
 810fc76:	fa02 f303 	lsl.w	r3, r2, r3
 810fc7a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810fc7c:	2300      	movs	r3, #0
 810fc7e:	617b      	str	r3, [r7, #20]
 810fc80:	e013      	b.n	810fcaa <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810fc82:	687b      	ldr	r3, [r7, #4]
 810fc84:	685a      	ldr	r2, [r3, #4]
 810fc86:	697b      	ldr	r3, [r7, #20]
 810fc88:	009b      	lsls	r3, r3, #2
 810fc8a:	4413      	add	r3, r2
 810fc8c:	6819      	ldr	r1, [r3, #0]
 810fc8e:	687b      	ldr	r3, [r7, #4]
 810fc90:	695b      	ldr	r3, [r3, #20]
 810fc92:	693a      	ldr	r2, [r7, #16]
 810fc94:	68f8      	ldr	r0, [r7, #12]
 810fc96:	f001 fbc7 	bl	8111428 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810fc9a:	693b      	ldr	r3, [r7, #16]
 810fc9c:	009b      	lsls	r3, r3, #2
 810fc9e:	68fa      	ldr	r2, [r7, #12]
 810fca0:	4413      	add	r3, r2
 810fca2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810fca4:	697b      	ldr	r3, [r7, #20]
 810fca6:	3301      	adds	r3, #1
 810fca8:	617b      	str	r3, [r7, #20]
 810fcaa:	687b      	ldr	r3, [r7, #4]
 810fcac:	689a      	ldr	r2, [r3, #8]
 810fcae:	687b      	ldr	r3, [r7, #4]
 810fcb0:	68db      	ldr	r3, [r3, #12]
 810fcb2:	fa22 f303 	lsr.w	r3, r2, r3
 810fcb6:	697a      	ldr	r2, [r7, #20]
 810fcb8:	429a      	cmp	r2, r3
 810fcba:	d9e2      	bls.n	810fc82 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 810fcbc:	bf00      	nop
 810fcbe:	3718      	adds	r7, #24
 810fcc0:	46bd      	mov	sp, r7
 810fcc2:	bd80      	pop	{r7, pc}

0810fcc4 <metal_list_init>:
{
 810fcc4:	b480      	push	{r7}
 810fcc6:	b083      	sub	sp, #12
 810fcc8:	af00      	add	r7, sp, #0
 810fcca:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810fccc:	687b      	ldr	r3, [r7, #4]
 810fcce:	687a      	ldr	r2, [r7, #4]
 810fcd0:	605a      	str	r2, [r3, #4]
 810fcd2:	687b      	ldr	r3, [r7, #4]
 810fcd4:	685a      	ldr	r2, [r3, #4]
 810fcd6:	687b      	ldr	r3, [r7, #4]
 810fcd8:	601a      	str	r2, [r3, #0]
}
 810fcda:	bf00      	nop
 810fcdc:	370c      	adds	r7, #12
 810fcde:	46bd      	mov	sp, r7
 810fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fce4:	4770      	bx	lr
	...

0810fce8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 810fce8:	b580      	push	{r7, lr}
 810fcea:	b084      	sub	sp, #16
 810fcec:	af00      	add	r7, sp, #0
 810fcee:	6078      	str	r0, [r7, #4]
	int error = 0;
 810fcf0:	2300      	movs	r3, #0
 810fcf2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 810fcf4:	2220      	movs	r2, #32
 810fcf6:	2100      	movs	r1, #0
 810fcf8:	4810      	ldr	r0, [pc, #64]	@ (810fd3c <metal_init+0x54>)
 810fcfa:	f003 f96e 	bl	8112fda <memset>

	_metal.common.log_handler   = params->log_handler;
 810fcfe:	687b      	ldr	r3, [r7, #4]
 810fd00:	681b      	ldr	r3, [r3, #0]
 810fd02:	4a0e      	ldr	r2, [pc, #56]	@ (810fd3c <metal_init+0x54>)
 810fd04:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810fd06:	687b      	ldr	r3, [r7, #4]
 810fd08:	791a      	ldrb	r2, [r3, #4]
 810fd0a:	4b0c      	ldr	r3, [pc, #48]	@ (810fd3c <metal_init+0x54>)
 810fd0c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 810fd0e:	480c      	ldr	r0, [pc, #48]	@ (810fd40 <metal_init+0x58>)
 810fd10:	f7ff ffd8 	bl	810fcc4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 810fd14:	480b      	ldr	r0, [pc, #44]	@ (810fd44 <metal_init+0x5c>)
 810fd16:	f7ff ffd5 	bl	810fcc4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810fd1a:	480b      	ldr	r0, [pc, #44]	@ (810fd48 <metal_init+0x60>)
 810fd1c:	f7ff ffd2 	bl	810fcc4 <metal_list_init>

	error = metal_sys_init(params);
 810fd20:	6878      	ldr	r0, [r7, #4]
 810fd22:	f7ff ff83 	bl	810fc2c <metal_sys_init>
 810fd26:	60f8      	str	r0, [r7, #12]
	if (error)
 810fd28:	68fb      	ldr	r3, [r7, #12]
 810fd2a:	2b00      	cmp	r3, #0
 810fd2c:	d001      	beq.n	810fd32 <metal_init+0x4a>
		return error;
 810fd2e:	68fb      	ldr	r3, [r7, #12]
 810fd30:	e000      	b.n	810fd34 <metal_init+0x4c>

	return error;
 810fd32:	68fb      	ldr	r3, [r7, #12]
}
 810fd34:	4618      	mov	r0, r3
 810fd36:	3710      	adds	r7, #16
 810fd38:	46bd      	mov	sp, r7
 810fd3a:	bd80      	pop	{r7, pc}
 810fd3c:	10004f80 	.word	0x10004f80
 810fd40:	10004f88 	.word	0x10004f88
 810fd44:	10004f90 	.word	0x10004f90
 810fd48:	10004f98 	.word	0x10004f98

0810fd4c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 810fd4c:	b480      	push	{r7}
 810fd4e:	b083      	sub	sp, #12
 810fd50:	af00      	add	r7, sp, #0
 810fd52:	6078      	str	r0, [r7, #4]
 810fd54:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810fd56:	687b      	ldr	r3, [r7, #4]
 810fd58:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 810fd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fd5e:	d009      	beq.n	810fd74 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810fd60:	687b      	ldr	r3, [r7, #4]
 810fd62:	689b      	ldr	r3, [r3, #8]
 810fd64:	683a      	ldr	r2, [r7, #0]
 810fd66:	429a      	cmp	r2, r3
 810fd68:	d804      	bhi.n	810fd74 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810fd6a:	687b      	ldr	r3, [r7, #4]
 810fd6c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810fd6e:	683b      	ldr	r3, [r7, #0]
 810fd70:	4413      	add	r3, r2
 810fd72:	e000      	b.n	810fd76 <metal_io_virt+0x2a>
 810fd74:	2300      	movs	r3, #0
}
 810fd76:	4618      	mov	r0, r3
 810fd78:	370c      	adds	r7, #12
 810fd7a:	46bd      	mov	sp, r7
 810fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd80:	4770      	bx	lr

0810fd82 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810fd82:	b5b0      	push	{r4, r5, r7, lr}
 810fd84:	b08a      	sub	sp, #40	@ 0x28
 810fd86:	af00      	add	r7, sp, #0
 810fd88:	60f8      	str	r0, [r7, #12]
 810fd8a:	60b9      	str	r1, [r7, #8]
 810fd8c:	607a      	str	r2, [r7, #4]
 810fd8e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 810fd90:	f107 0310 	add.w	r3, r7, #16
 810fd94:	2200      	movs	r2, #0
 810fd96:	601a      	str	r2, [r3, #0]
 810fd98:	605a      	str	r2, [r3, #4]
 810fd9a:	609a      	str	r2, [r3, #8]
 810fd9c:	60da      	str	r2, [r3, #12]
 810fd9e:	611a      	str	r2, [r3, #16]
 810fda0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 810fda2:	68fb      	ldr	r3, [r7, #12]
 810fda4:	68ba      	ldr	r2, [r7, #8]
 810fda6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 810fda8:	68fb      	ldr	r3, [r7, #12]
 810fdaa:	687a      	ldr	r2, [r7, #4]
 810fdac:	605a      	str	r2, [r3, #4]
	io->size = size;
 810fdae:	68fb      	ldr	r3, [r7, #12]
 810fdb0:	683a      	ldr	r2, [r7, #0]
 810fdb2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 810fdb4:	68fb      	ldr	r3, [r7, #12]
 810fdb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810fdb8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 810fdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fdbc:	2b1f      	cmp	r3, #31
 810fdbe:	d904      	bls.n	810fdca <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 810fdc0:	68fb      	ldr	r3, [r7, #12]
 810fdc2:	f04f 32ff 	mov.w	r2, #4294967295
 810fdc6:	611a      	str	r2, [r3, #16]
 810fdc8:	e006      	b.n	810fdd8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 810fdca:	2201      	movs	r2, #1
 810fdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fdce:	fa02 f303 	lsl.w	r3, r2, r3
 810fdd2:	1e5a      	subs	r2, r3, #1
 810fdd4:	68fb      	ldr	r3, [r7, #12]
 810fdd6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 810fdd8:	68fb      	ldr	r3, [r7, #12]
 810fdda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810fddc:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 810fdde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fde0:	2b00      	cmp	r3, #0
 810fde2:	d00b      	beq.n	810fdfc <metal_io_init+0x7a>
 810fde4:	68fb      	ldr	r3, [r7, #12]
 810fde6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810fde8:	f103 0418 	add.w	r4, r3, #24
 810fdec:	4615      	mov	r5, r2
 810fdee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810fdf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810fdf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 810fdf6:	e884 0003 	stmia.w	r4, {r0, r1}
 810fdfa:	e00a      	b.n	810fe12 <metal_io_init+0x90>
 810fdfc:	68fb      	ldr	r3, [r7, #12]
 810fdfe:	f103 0418 	add.w	r4, r3, #24
 810fe02:	f107 0510 	add.w	r5, r7, #16
 810fe06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810fe08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810fe0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810fe0e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 810fe12:	68f8      	ldr	r0, [r7, #12]
 810fe14:	f7ff ff18 	bl	810fc48 <metal_sys_io_mem_map>
}
 810fe18:	bf00      	nop
 810fe1a:	3728      	adds	r7, #40	@ 0x28
 810fe1c:	46bd      	mov	sp, r7
 810fe1e:	bdb0      	pop	{r4, r5, r7, pc}

0810fe20 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 810fe20:	b590      	push	{r4, r7, lr}
 810fe22:	b08b      	sub	sp, #44	@ 0x2c
 810fe24:	af02      	add	r7, sp, #8
 810fe26:	60f8      	str	r0, [r7, #12]
 810fe28:	60b9      	str	r1, [r7, #8]
 810fe2a:	607a      	str	r2, [r7, #4]
 810fe2c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810fe2e:	68b9      	ldr	r1, [r7, #8]
 810fe30:	68f8      	ldr	r0, [r7, #12]
 810fe32:	f7ff ff8b 	bl	810fd4c <metal_io_virt>
 810fe36:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 810fe38:	687b      	ldr	r3, [r7, #4]
 810fe3a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810fe3c:	68fb      	ldr	r3, [r7, #12]
 810fe3e:	689b      	ldr	r3, [r3, #8]
 810fe40:	68ba      	ldr	r2, [r7, #8]
 810fe42:	429a      	cmp	r2, r3
 810fe44:	d902      	bls.n	810fe4c <metal_io_block_read+0x2c>
		return -ERANGE;
 810fe46:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 810fe4a:	e05c      	b.n	810ff06 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 810fe4c:	683a      	ldr	r2, [r7, #0]
 810fe4e:	68bb      	ldr	r3, [r7, #8]
 810fe50:	441a      	add	r2, r3
 810fe52:	68fb      	ldr	r3, [r7, #12]
 810fe54:	689b      	ldr	r3, [r3, #8]
 810fe56:	429a      	cmp	r2, r3
 810fe58:	d904      	bls.n	810fe64 <metal_io_block_read+0x44>
		len = io->size - offset;
 810fe5a:	68fb      	ldr	r3, [r7, #12]
 810fe5c:	689a      	ldr	r2, [r3, #8]
 810fe5e:	68bb      	ldr	r3, [r7, #8]
 810fe60:	1ad3      	subs	r3, r2, r3
 810fe62:	603b      	str	r3, [r7, #0]
	retlen = len;
 810fe64:	683b      	ldr	r3, [r7, #0]
 810fe66:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 810fe68:	68fb      	ldr	r3, [r7, #12]
 810fe6a:	6a1b      	ldr	r3, [r3, #32]
 810fe6c:	2b00      	cmp	r3, #0
 810fe6e:	d00a      	beq.n	810fe86 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 810fe70:	68fb      	ldr	r3, [r7, #12]
 810fe72:	6a1c      	ldr	r4, [r3, #32]
 810fe74:	683b      	ldr	r3, [r7, #0]
 810fe76:	9300      	str	r3, [sp, #0]
 810fe78:	2305      	movs	r3, #5
 810fe7a:	687a      	ldr	r2, [r7, #4]
 810fe7c:	68b9      	ldr	r1, [r7, #8]
 810fe7e:	68f8      	ldr	r0, [r7, #12]
 810fe80:	47a0      	blx	r4
 810fe82:	6178      	str	r0, [r7, #20]
 810fe84:	e03e      	b.n	810ff04 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810fe86:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810fe8a:	e00c      	b.n	810fea6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810fe8c:	69fb      	ldr	r3, [r7, #28]
 810fe8e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 810fe90:	69bb      	ldr	r3, [r7, #24]
 810fe92:	701a      	strb	r2, [r3, #0]
			dest++;
 810fe94:	69bb      	ldr	r3, [r7, #24]
 810fe96:	3301      	adds	r3, #1
 810fe98:	61bb      	str	r3, [r7, #24]
			ptr++;
 810fe9a:	69fb      	ldr	r3, [r7, #28]
 810fe9c:	3301      	adds	r3, #1
 810fe9e:	61fb      	str	r3, [r7, #28]
			len--;
 810fea0:	683b      	ldr	r3, [r7, #0]
 810fea2:	3b01      	subs	r3, #1
 810fea4:	603b      	str	r3, [r7, #0]
		while ( len && (
 810fea6:	683b      	ldr	r3, [r7, #0]
 810fea8:	2b00      	cmp	r3, #0
 810feaa:	d017      	beq.n	810fedc <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810feac:	69bb      	ldr	r3, [r7, #24]
 810feae:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810feb2:	2b00      	cmp	r3, #0
 810feb4:	d1ea      	bne.n	810fe8c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 810feb6:	69fb      	ldr	r3, [r7, #28]
 810feb8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 810febc:	2b00      	cmp	r3, #0
 810febe:	d1e5      	bne.n	810fe8c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810fec0:	e00c      	b.n	810fedc <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 810fec2:	69fb      	ldr	r3, [r7, #28]
 810fec4:	681a      	ldr	r2, [r3, #0]
 810fec6:	69bb      	ldr	r3, [r7, #24]
 810fec8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810feca:	69bb      	ldr	r3, [r7, #24]
 810fecc:	3304      	adds	r3, #4
 810fece:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 810fed0:	69fb      	ldr	r3, [r7, #28]
 810fed2:	3304      	adds	r3, #4
 810fed4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 810fed6:	683b      	ldr	r3, [r7, #0]
 810fed8:	3b04      	subs	r3, #4
 810feda:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810fedc:	683b      	ldr	r3, [r7, #0]
 810fede:	2b03      	cmp	r3, #3
 810fee0:	dcef      	bgt.n	810fec2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 810fee2:	e00c      	b.n	810fefe <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810fee4:	69fb      	ldr	r3, [r7, #28]
 810fee6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 810fee8:	69bb      	ldr	r3, [r7, #24]
 810feea:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 810feec:	69bb      	ldr	r3, [r7, #24]
 810feee:	3301      	adds	r3, #1
 810fef0:	61bb      	str	r3, [r7, #24]
 810fef2:	69fb      	ldr	r3, [r7, #28]
 810fef4:	3301      	adds	r3, #1
 810fef6:	61fb      	str	r3, [r7, #28]
 810fef8:	683b      	ldr	r3, [r7, #0]
 810fefa:	3b01      	subs	r3, #1
 810fefc:	603b      	str	r3, [r7, #0]
 810fefe:	683b      	ldr	r3, [r7, #0]
 810ff00:	2b00      	cmp	r3, #0
 810ff02:	d1ef      	bne.n	810fee4 <metal_io_block_read+0xc4>
	}
	return retlen;
 810ff04:	697b      	ldr	r3, [r7, #20]
}
 810ff06:	4618      	mov	r0, r3
 810ff08:	3724      	adds	r7, #36	@ 0x24
 810ff0a:	46bd      	mov	sp, r7
 810ff0c:	bd90      	pop	{r4, r7, pc}

0810ff0e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 810ff0e:	b590      	push	{r4, r7, lr}
 810ff10:	b08b      	sub	sp, #44	@ 0x2c
 810ff12:	af02      	add	r7, sp, #8
 810ff14:	60f8      	str	r0, [r7, #12]
 810ff16:	60b9      	str	r1, [r7, #8]
 810ff18:	607a      	str	r2, [r7, #4]
 810ff1a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810ff1c:	68b9      	ldr	r1, [r7, #8]
 810ff1e:	68f8      	ldr	r0, [r7, #12]
 810ff20:	f7ff ff14 	bl	810fd4c <metal_io_virt>
 810ff24:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 810ff26:	687b      	ldr	r3, [r7, #4]
 810ff28:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810ff2a:	68fb      	ldr	r3, [r7, #12]
 810ff2c:	689b      	ldr	r3, [r3, #8]
 810ff2e:	68ba      	ldr	r2, [r7, #8]
 810ff30:	429a      	cmp	r2, r3
 810ff32:	d902      	bls.n	810ff3a <metal_io_block_write+0x2c>
		return -ERANGE;
 810ff34:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 810ff38:	e05b      	b.n	810fff2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810ff3a:	683a      	ldr	r2, [r7, #0]
 810ff3c:	68bb      	ldr	r3, [r7, #8]
 810ff3e:	441a      	add	r2, r3
 810ff40:	68fb      	ldr	r3, [r7, #12]
 810ff42:	689b      	ldr	r3, [r3, #8]
 810ff44:	429a      	cmp	r2, r3
 810ff46:	d904      	bls.n	810ff52 <metal_io_block_write+0x44>
		len = io->size - offset;
 810ff48:	68fb      	ldr	r3, [r7, #12]
 810ff4a:	689a      	ldr	r2, [r3, #8]
 810ff4c:	68bb      	ldr	r3, [r7, #8]
 810ff4e:	1ad3      	subs	r3, r2, r3
 810ff50:	603b      	str	r3, [r7, #0]
	retlen = len;
 810ff52:	683b      	ldr	r3, [r7, #0]
 810ff54:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 810ff56:	68fb      	ldr	r3, [r7, #12]
 810ff58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ff5a:	2b00      	cmp	r3, #0
 810ff5c:	d017      	beq.n	810ff8e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810ff5e:	68fb      	ldr	r3, [r7, #12]
 810ff60:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810ff62:	683b      	ldr	r3, [r7, #0]
 810ff64:	9300      	str	r3, [sp, #0]
 810ff66:	2305      	movs	r3, #5
 810ff68:	687a      	ldr	r2, [r7, #4]
 810ff6a:	68b9      	ldr	r1, [r7, #8]
 810ff6c:	68f8      	ldr	r0, [r7, #12]
 810ff6e:	47a0      	blx	r4
 810ff70:	6178      	str	r0, [r7, #20]
 810ff72:	e03d      	b.n	810fff0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810ff74:	69bb      	ldr	r3, [r7, #24]
 810ff76:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810ff78:	69fb      	ldr	r3, [r7, #28]
 810ff7a:	701a      	strb	r2, [r3, #0]
			ptr++;
 810ff7c:	69fb      	ldr	r3, [r7, #28]
 810ff7e:	3301      	adds	r3, #1
 810ff80:	61fb      	str	r3, [r7, #28]
			source++;
 810ff82:	69bb      	ldr	r3, [r7, #24]
 810ff84:	3301      	adds	r3, #1
 810ff86:	61bb      	str	r3, [r7, #24]
			len--;
 810ff88:	683b      	ldr	r3, [r7, #0]
 810ff8a:	3b01      	subs	r3, #1
 810ff8c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810ff8e:	683b      	ldr	r3, [r7, #0]
 810ff90:	2b00      	cmp	r3, #0
 810ff92:	d017      	beq.n	810ffc4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 810ff94:	69fb      	ldr	r3, [r7, #28]
 810ff96:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810ff9a:	2b00      	cmp	r3, #0
 810ff9c:	d1ea      	bne.n	810ff74 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810ff9e:	69bb      	ldr	r3, [r7, #24]
 810ffa0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 810ffa4:	2b00      	cmp	r3, #0
 810ffa6:	d1e5      	bne.n	810ff74 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810ffa8:	e00c      	b.n	810ffc4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810ffaa:	69bb      	ldr	r3, [r7, #24]
 810ffac:	681a      	ldr	r2, [r3, #0]
 810ffae:	69fb      	ldr	r3, [r7, #28]
 810ffb0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810ffb2:	69fb      	ldr	r3, [r7, #28]
 810ffb4:	3304      	adds	r3, #4
 810ffb6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 810ffb8:	69bb      	ldr	r3, [r7, #24]
 810ffba:	3304      	adds	r3, #4
 810ffbc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810ffbe:	683b      	ldr	r3, [r7, #0]
 810ffc0:	3b04      	subs	r3, #4
 810ffc2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810ffc4:	683b      	ldr	r3, [r7, #0]
 810ffc6:	2b03      	cmp	r3, #3
 810ffc8:	dcef      	bgt.n	810ffaa <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810ffca:	e00c      	b.n	810ffe6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810ffcc:	69bb      	ldr	r3, [r7, #24]
 810ffce:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810ffd0:	69fb      	ldr	r3, [r7, #28]
 810ffd2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 810ffd4:	69fb      	ldr	r3, [r7, #28]
 810ffd6:	3301      	adds	r3, #1
 810ffd8:	61fb      	str	r3, [r7, #28]
 810ffda:	69bb      	ldr	r3, [r7, #24]
 810ffdc:	3301      	adds	r3, #1
 810ffde:	61bb      	str	r3, [r7, #24]
 810ffe0:	683b      	ldr	r3, [r7, #0]
 810ffe2:	3b01      	subs	r3, #1
 810ffe4:	603b      	str	r3, [r7, #0]
 810ffe6:	683b      	ldr	r3, [r7, #0]
 810ffe8:	2b00      	cmp	r3, #0
 810ffea:	d1ef      	bne.n	810ffcc <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 810ffec:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 810fff0:	697b      	ldr	r3, [r7, #20]
}
 810fff2:	4618      	mov	r0, r3
 810fff4:	3724      	adds	r7, #36	@ 0x24
 810fff6:	46bd      	mov	sp, r7
 810fff8:	bd90      	pop	{r4, r7, pc}

0810fffa <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810fffa:	b40e      	push	{r1, r2, r3}
 810fffc:	b480      	push	{r7}
 810fffe:	b082      	sub	sp, #8
 8110000:	af00      	add	r7, sp, #0
 8110002:	4603      	mov	r3, r0
 8110004:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8110006:	bf00      	nop
 8110008:	3708      	adds	r7, #8
 811000a:	46bd      	mov	sp, r7
 811000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110010:	b003      	add	sp, #12
 8110012:	4770      	bx	lr

08110014 <metal_io_virt>:
{
 8110014:	b480      	push	{r7}
 8110016:	b083      	sub	sp, #12
 8110018:	af00      	add	r7, sp, #0
 811001a:	6078      	str	r0, [r7, #4]
 811001c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 811001e:	687b      	ldr	r3, [r7, #4]
 8110020:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8110022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110026:	d009      	beq.n	811003c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8110028:	687b      	ldr	r3, [r7, #4]
 811002a:	689b      	ldr	r3, [r3, #8]
 811002c:	683a      	ldr	r2, [r7, #0]
 811002e:	429a      	cmp	r2, r3
 8110030:	d804      	bhi.n	811003c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8110032:	687b      	ldr	r3, [r7, #4]
 8110034:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8110036:	683b      	ldr	r3, [r7, #0]
 8110038:	4413      	add	r3, r2
 811003a:	e000      	b.n	811003e <metal_io_virt+0x2a>
 811003c:	2300      	movs	r3, #0
}
 811003e:	4618      	mov	r0, r3
 8110040:	370c      	adds	r7, #12
 8110042:	46bd      	mov	sp, r7
 8110044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110048:	4770      	bx	lr

0811004a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 811004a:	b480      	push	{r7}
 811004c:	b085      	sub	sp, #20
 811004e:	af00      	add	r7, sp, #0
 8110050:	6078      	str	r0, [r7, #4]
 8110052:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8110054:	687b      	ldr	r3, [r7, #4]
 8110056:	681b      	ldr	r3, [r3, #0]
 8110058:	683a      	ldr	r2, [r7, #0]
 811005a:	1ad3      	subs	r3, r2, r3
 811005c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 811005e:	687b      	ldr	r3, [r7, #4]
 8110060:	689b      	ldr	r3, [r3, #8]
 8110062:	68fa      	ldr	r2, [r7, #12]
 8110064:	429a      	cmp	r2, r3
 8110066:	d201      	bcs.n	811006c <metal_io_virt_to_offset+0x22>
 8110068:	68fb      	ldr	r3, [r7, #12]
 811006a:	e001      	b.n	8110070 <metal_io_virt_to_offset+0x26>
 811006c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8110070:	4618      	mov	r0, r3
 8110072:	3714      	adds	r7, #20
 8110074:	46bd      	mov	sp, r7
 8110076:	f85d 7b04 	ldr.w	r7, [sp], #4
 811007a:	4770      	bx	lr

0811007c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 811007c:	b5b0      	push	{r4, r5, r7, lr}
 811007e:	b08c      	sub	sp, #48	@ 0x30
 8110080:	af00      	add	r7, sp, #0
 8110082:	60f8      	str	r0, [r7, #12]
 8110084:	60b9      	str	r1, [r7, #8]
 8110086:	603b      	str	r3, [r7, #0]
 8110088:	4613      	mov	r3, r2
 811008a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 811008c:	68b9      	ldr	r1, [r7, #8]
 811008e:	68f8      	ldr	r0, [r7, #12]
 8110090:	f7ff ffc0 	bl	8110014 <metal_io_virt>
 8110094:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8110096:	68fb      	ldr	r3, [r7, #12]
 8110098:	699b      	ldr	r3, [r3, #24]
 811009a:	2b00      	cmp	r3, #0
 811009c:	d009      	beq.n	81100b2 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 811009e:	68fb      	ldr	r3, [r7, #12]
 81100a0:	699c      	ldr	r4, [r3, #24]
 81100a2:	79fa      	ldrb	r2, [r7, #7]
 81100a4:	683b      	ldr	r3, [r7, #0]
 81100a6:	68b9      	ldr	r1, [r7, #8]
 81100a8:	68f8      	ldr	r0, [r7, #12]
 81100aa:	47a0      	blx	r4
 81100ac:	4604      	mov	r4, r0
 81100ae:	460d      	mov	r5, r1
 81100b0:	e059      	b.n	8110166 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 81100b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81100b4:	2b00      	cmp	r3, #0
 81100b6:	d012      	beq.n	81100de <metal_io_read+0x62>
 81100b8:	683b      	ldr	r3, [r7, #0]
 81100ba:	2b01      	cmp	r3, #1
 81100bc:	d10f      	bne.n	81100de <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 81100be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81100c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 81100c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81100c4:	f3bf 8f5b 	dmb	ish
 81100c8:	781b      	ldrb	r3, [r3, #0]
 81100ca:	f3bf 8f5b 	dmb	ish
 81100ce:	b2db      	uxtb	r3, r3
 81100d0:	76fb      	strb	r3, [r7, #27]
 81100d2:	7efb      	ldrb	r3, [r7, #27]
 81100d4:	b2db      	uxtb	r3, r3
 81100d6:	2200      	movs	r2, #0
 81100d8:	461c      	mov	r4, r3
 81100da:	4615      	mov	r5, r2
 81100dc:	e043      	b.n	8110166 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 81100de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81100e0:	2b00      	cmp	r3, #0
 81100e2:	d012      	beq.n	811010a <metal_io_read+0x8e>
 81100e4:	683b      	ldr	r3, [r7, #0]
 81100e6:	2b02      	cmp	r3, #2
 81100e8:	d10f      	bne.n	811010a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81100ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81100ec:	627b      	str	r3, [r7, #36]	@ 0x24
 81100ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81100f0:	f3bf 8f5b 	dmb	ish
 81100f4:	881b      	ldrh	r3, [r3, #0]
 81100f6:	f3bf 8f5b 	dmb	ish
 81100fa:	b29b      	uxth	r3, r3
 81100fc:	833b      	strh	r3, [r7, #24]
 81100fe:	8b3b      	ldrh	r3, [r7, #24]
 8110100:	b29b      	uxth	r3, r3
 8110102:	2200      	movs	r2, #0
 8110104:	461c      	mov	r4, r3
 8110106:	4615      	mov	r5, r2
 8110108:	e02d      	b.n	8110166 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 811010a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811010c:	2b00      	cmp	r3, #0
 811010e:	d010      	beq.n	8110132 <metal_io_read+0xb6>
 8110110:	683b      	ldr	r3, [r7, #0]
 8110112:	2b04      	cmp	r3, #4
 8110114:	d10d      	bne.n	8110132 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8110116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110118:	623b      	str	r3, [r7, #32]
 811011a:	6a3b      	ldr	r3, [r7, #32]
 811011c:	f3bf 8f5b 	dmb	ish
 8110120:	681b      	ldr	r3, [r3, #0]
 8110122:	f3bf 8f5b 	dmb	ish
 8110126:	617b      	str	r3, [r7, #20]
 8110128:	697b      	ldr	r3, [r7, #20]
 811012a:	2200      	movs	r2, #0
 811012c:	461c      	mov	r4, r3
 811012e:	4615      	mov	r5, r2
 8110130:	e019      	b.n	8110166 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8110132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110134:	2b00      	cmp	r3, #0
 8110136:	d010      	beq.n	811015a <metal_io_read+0xde>
 8110138:	683b      	ldr	r3, [r7, #0]
 811013a:	2b04      	cmp	r3, #4
 811013c:	d10d      	bne.n	811015a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 811013e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110140:	61fb      	str	r3, [r7, #28]
 8110142:	69fb      	ldr	r3, [r7, #28]
 8110144:	f3bf 8f5b 	dmb	ish
 8110148:	681b      	ldr	r3, [r3, #0]
 811014a:	f3bf 8f5b 	dmb	ish
 811014e:	613b      	str	r3, [r7, #16]
 8110150:	693b      	ldr	r3, [r7, #16]
 8110152:	2200      	movs	r2, #0
 8110154:	461c      	mov	r4, r3
 8110156:	4615      	mov	r5, r2
 8110158:	e005      	b.n	8110166 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 811015a:	4b06      	ldr	r3, [pc, #24]	@ (8110174 <metal_io_read+0xf8>)
 811015c:	4a06      	ldr	r2, [pc, #24]	@ (8110178 <metal_io_read+0xfc>)
 811015e:	21f0      	movs	r1, #240	@ 0xf0
 8110160:	4806      	ldr	r0, [pc, #24]	@ (811017c <metal_io_read+0x100>)
 8110162:	f001 fe3f 	bl	8111de4 <__assert_func>
	return 0; /* quiet compiler */
}
 8110166:	4622      	mov	r2, r4
 8110168:	462b      	mov	r3, r5
 811016a:	4610      	mov	r0, r2
 811016c:	4619      	mov	r1, r3
 811016e:	3730      	adds	r7, #48	@ 0x30
 8110170:	46bd      	mov	sp, r7
 8110172:	bdb0      	pop	{r4, r5, r7, pc}
 8110174:	081175e4 	.word	0x081175e4
 8110178:	0811783c 	.word	0x0811783c
 811017c:	081175e8 	.word	0x081175e8

08110180 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8110180:	b580      	push	{r7, lr}
 8110182:	b082      	sub	sp, #8
 8110184:	af00      	add	r7, sp, #0
 8110186:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8110188:	6878      	ldr	r0, [r7, #4]
 811018a:	f001 fe49 	bl	8111e20 <malloc>
 811018e:	4603      	mov	r3, r0
}
 8110190:	4618      	mov	r0, r3
 8110192:	3708      	adds	r7, #8
 8110194:	46bd      	mov	sp, r7
 8110196:	bd80      	pop	{r7, pc}

08110198 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8110198:	b580      	push	{r7, lr}
 811019a:	b082      	sub	sp, #8
 811019c:	af00      	add	r7, sp, #0
 811019e:	6078      	str	r0, [r7, #4]
	free(ptr);
 81101a0:	6878      	ldr	r0, [r7, #4]
 81101a2:	f001 fe45 	bl	8111e30 <free>
}
 81101a6:	bf00      	nop
 81101a8:	3708      	adds	r7, #8
 81101aa:	46bd      	mov	sp, r7
 81101ac:	bd80      	pop	{r7, pc}

081101ae <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 81101ae:	b580      	push	{r7, lr}
 81101b0:	b084      	sub	sp, #16
 81101b2:	af00      	add	r7, sp, #0
 81101b4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 81101b6:	687b      	ldr	r3, [r7, #4]
 81101b8:	3307      	adds	r3, #7
 81101ba:	00db      	lsls	r3, r3, #3
 81101bc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 81101be:	68f8      	ldr	r0, [r7, #12]
 81101c0:	f7ff ffde 	bl	8110180 <metal_allocate_memory>
 81101c4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 81101c6:	68bb      	ldr	r3, [r7, #8]
 81101c8:	2b00      	cmp	r3, #0
 81101ca:	d004      	beq.n	81101d6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81101cc:	68fa      	ldr	r2, [r7, #12]
 81101ce:	2100      	movs	r1, #0
 81101d0:	68b8      	ldr	r0, [r7, #8]
 81101d2:	f002 ff02 	bl	8112fda <memset>
	}

	return vqs;
 81101d6:	68bb      	ldr	r3, [r7, #8]
}
 81101d8:	4618      	mov	r0, r3
 81101da:	3710      	adds	r7, #16
 81101dc:	46bd      	mov	sp, r7
 81101de:	bd80      	pop	{r7, pc}

081101e0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81101e0:	b580      	push	{r7, lr}
 81101e2:	b086      	sub	sp, #24
 81101e4:	af00      	add	r7, sp, #0
 81101e6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81101e8:	687b      	ldr	r3, [r7, #4]
 81101ea:	891b      	ldrh	r3, [r3, #8]
 81101ec:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81101ee:	687b      	ldr	r3, [r7, #4]
 81101f0:	681b      	ldr	r3, [r3, #0]
 81101f2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81101f4:	693b      	ldr	r3, [r7, #16]
 81101f6:	3b18      	subs	r3, #24
 81101f8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81101fa:	693b      	ldr	r3, [r7, #16]
 81101fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81101fe:	697a      	ldr	r2, [r7, #20]
 8110200:	429a      	cmp	r2, r3
 8110202:	d905      	bls.n	8110210 <rproc_virtio_virtqueue_notify+0x30>
 8110204:	4b0d      	ldr	r3, [pc, #52]	@ (811023c <rproc_virtio_virtqueue_notify+0x5c>)
 8110206:	4a0e      	ldr	r2, [pc, #56]	@ (8110240 <rproc_virtio_virtqueue_notify+0x60>)
 8110208:	2133      	movs	r1, #51	@ 0x33
 811020a:	480e      	ldr	r0, [pc, #56]	@ (8110244 <rproc_virtio_virtqueue_notify+0x64>)
 811020c:	f001 fdea 	bl	8111de4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8110210:	693b      	ldr	r3, [r7, #16]
 8110212:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8110214:	697a      	ldr	r2, [r7, #20]
 8110216:	4613      	mov	r3, r2
 8110218:	005b      	lsls	r3, r3, #1
 811021a:	4413      	add	r3, r2
 811021c:	00db      	lsls	r3, r3, #3
 811021e:	440b      	add	r3, r1
 8110220:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8110222:	68fb      	ldr	r3, [r7, #12]
 8110224:	691b      	ldr	r3, [r3, #16]
 8110226:	68fa      	ldr	r2, [r7, #12]
 8110228:	6810      	ldr	r0, [r2, #0]
 811022a:	68ba      	ldr	r2, [r7, #8]
 811022c:	6912      	ldr	r2, [r2, #16]
 811022e:	4611      	mov	r1, r2
 8110230:	4798      	blx	r3
}
 8110232:	bf00      	nop
 8110234:	3718      	adds	r7, #24
 8110236:	46bd      	mov	sp, r7
 8110238:	bd80      	pop	{r7, pc}
 811023a:	bf00      	nop
 811023c:	08117630 	.word	0x08117630
 8110240:	0811781c 	.word	0x0811781c
 8110244:	0811764c 	.word	0x0811764c

08110248 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8110248:	b580      	push	{r7, lr}
 811024a:	b086      	sub	sp, #24
 811024c:	af00      	add	r7, sp, #0
 811024e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8110250:	687b      	ldr	r3, [r7, #4]
 8110252:	3b18      	subs	r3, #24
 8110254:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8110256:	697b      	ldr	r3, [r7, #20]
 8110258:	689b      	ldr	r3, [r3, #8]
 811025a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 811025c:	697b      	ldr	r3, [r7, #20]
 811025e:	68db      	ldr	r3, [r3, #12]
 8110260:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8110262:	693b      	ldr	r3, [r7, #16]
 8110264:	3318      	adds	r3, #24
 8110266:	4619      	mov	r1, r3
 8110268:	68f8      	ldr	r0, [r7, #12]
 811026a:	f7ff feee 	bl	811004a <metal_io_virt_to_offset>
 811026e:	4601      	mov	r1, r0
 8110270:	2301      	movs	r3, #1
 8110272:	2205      	movs	r2, #5
 8110274:	68f8      	ldr	r0, [r7, #12]
 8110276:	f7ff ff01 	bl	811007c <metal_io_read>
 811027a:	4602      	mov	r2, r0
 811027c:	460b      	mov	r3, r1
 811027e:	4613      	mov	r3, r2
 8110280:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8110282:	7afb      	ldrb	r3, [r7, #11]
}
 8110284:	4618      	mov	r0, r3
 8110286:	3718      	adds	r7, #24
 8110288:	46bd      	mov	sp, r7
 811028a:	bd80      	pop	{r7, pc}

0811028c <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 811028c:	b580      	push	{r7, lr}
 811028e:	b086      	sub	sp, #24
 8110290:	af00      	add	r7, sp, #0
 8110292:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8110294:	687b      	ldr	r3, [r7, #4]
 8110296:	3b18      	subs	r3, #24
 8110298:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 811029a:	697b      	ldr	r3, [r7, #20]
 811029c:	689b      	ldr	r3, [r3, #8]
 811029e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81102a0:	697b      	ldr	r3, [r7, #20]
 81102a2:	68db      	ldr	r3, [r3, #12]
 81102a4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 81102a6:	693b      	ldr	r3, [r7, #16]
 81102a8:	330c      	adds	r3, #12
 81102aa:	4619      	mov	r1, r3
 81102ac:	68f8      	ldr	r0, [r7, #12]
 81102ae:	f7ff fecc 	bl	811004a <metal_io_virt_to_offset>
 81102b2:	4601      	mov	r1, r0
 81102b4:	2304      	movs	r3, #4
 81102b6:	2205      	movs	r2, #5
 81102b8:	68f8      	ldr	r0, [r7, #12]
 81102ba:	f7ff fedf 	bl	811007c <metal_io_read>
 81102be:	4602      	mov	r2, r0
 81102c0:	460b      	mov	r3, r1
 81102c2:	4613      	mov	r3, r2
 81102c4:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 81102c6:	68bb      	ldr	r3, [r7, #8]
}
 81102c8:	4618      	mov	r0, r3
 81102ca:	3718      	adds	r7, #24
 81102cc:	46bd      	mov	sp, r7
 81102ce:	bd80      	pop	{r7, pc}

081102d0 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81102d0:	b480      	push	{r7}
 81102d2:	b083      	sub	sp, #12
 81102d4:	af00      	add	r7, sp, #0
 81102d6:	6078      	str	r0, [r7, #4]
 81102d8:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81102da:	2300      	movs	r3, #0
}
 81102dc:	4618      	mov	r0, r3
 81102de:	370c      	adds	r7, #12
 81102e0:	46bd      	mov	sp, r7
 81102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81102e6:	4770      	bx	lr

081102e8 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81102e8:	b480      	push	{r7}
 81102ea:	b085      	sub	sp, #20
 81102ec:	af00      	add	r7, sp, #0
 81102ee:	60f8      	str	r0, [r7, #12]
 81102f0:	60b9      	str	r1, [r7, #8]
 81102f2:	607a      	str	r2, [r7, #4]
 81102f4:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81102f6:	bf00      	nop
 81102f8:	3714      	adds	r7, #20
 81102fa:	46bd      	mov	sp, r7
 81102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110300:	4770      	bx	lr
	...

08110304 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8110304:	b580      	push	{r7, lr}
 8110306:	b08e      	sub	sp, #56	@ 0x38
 8110308:	af00      	add	r7, sp, #0
 811030a:	60f8      	str	r0, [r7, #12]
 811030c:	60b9      	str	r1, [r7, #8]
 811030e:	607a      	str	r2, [r7, #4]
 8110310:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8110312:	687b      	ldr	r3, [r7, #4]
 8110314:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8110316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110318:	7e5b      	ldrb	r3, [r3, #25]
 811031a:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 811031c:	2050      	movs	r0, #80	@ 0x50
 811031e:	f7ff ff2f 	bl	8110180 <metal_allocate_memory>
 8110322:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8110324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110326:	2b00      	cmp	r3, #0
 8110328:	d101      	bne.n	811032e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 811032a:	2300      	movs	r3, #0
 811032c:	e092      	b.n	8110454 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 811032e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110330:	4613      	mov	r3, r2
 8110332:	005b      	lsls	r3, r3, #1
 8110334:	4413      	add	r3, r2
 8110336:	00db      	lsls	r3, r3, #3
 8110338:	4618      	mov	r0, r3
 811033a:	f7ff ff21 	bl	8110180 <metal_allocate_memory>
 811033e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8110340:	6a3b      	ldr	r3, [r7, #32]
 8110342:	2b00      	cmp	r3, #0
 8110344:	f000 8081 	beq.w	811044a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8110348:	2250      	movs	r2, #80	@ 0x50
 811034a:	2100      	movs	r1, #0
 811034c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811034e:	f002 fe44 	bl	8112fda <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8110352:	2218      	movs	r2, #24
 8110354:	2100      	movs	r1, #0
 8110356:	6a38      	ldr	r0, [r7, #32]
 8110358:	f002 fe3f 	bl	8112fda <memset>
	vdev = &rpvdev->vdev;
 811035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811035e:	3318      	adds	r3, #24
 8110360:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8110362:	2300      	movs	r3, #0
 8110364:	637b      	str	r3, [r7, #52]	@ 0x34
 8110366:	e025      	b.n	81103b4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8110368:	2300      	movs	r3, #0
 811036a:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 811036c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811036e:	4613      	mov	r3, r2
 8110370:	009b      	lsls	r3, r3, #2
 8110372:	4413      	add	r3, r2
 8110374:	009b      	lsls	r3, r3, #2
 8110376:	3318      	adds	r3, #24
 8110378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811037a:	4413      	add	r3, r2
 811037c:	3304      	adds	r3, #4
 811037e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8110380:	68fb      	ldr	r3, [r7, #12]
 8110382:	2b00      	cmp	r3, #0
 8110384:	d102      	bne.n	811038c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8110386:	69bb      	ldr	r3, [r7, #24]
 8110388:	689b      	ldr	r3, [r3, #8]
 811038a:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 811038c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811038e:	f7ff ff0e 	bl	81101ae <virtqueue_allocate>
 8110392:	6178      	str	r0, [r7, #20]
		if (!vq)
 8110394:	697b      	ldr	r3, [r7, #20]
 8110396:	2b00      	cmp	r3, #0
 8110398:	d031      	beq.n	81103fe <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 811039a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811039c:	4613      	mov	r3, r2
 811039e:	005b      	lsls	r3, r3, #1
 81103a0:	4413      	add	r3, r2
 81103a2:	00db      	lsls	r3, r3, #3
 81103a4:	461a      	mov	r2, r3
 81103a6:	6a3b      	ldr	r3, [r7, #32]
 81103a8:	4413      	add	r3, r2
 81103aa:	697a      	ldr	r2, [r7, #20]
 81103ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 81103ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81103b0:	3301      	adds	r3, #1
 81103b2:	637b      	str	r3, [r7, #52]	@ 0x34
 81103b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81103b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81103b8:	429a      	cmp	r2, r3
 81103ba:	d3d5      	bcc.n	8110368 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 81103bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81103be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81103c0:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 81103c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81103c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81103c6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 81103c8:	69fb      	ldr	r3, [r7, #28]
 81103ca:	6a3a      	ldr	r2, [r7, #32]
 81103cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 81103ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81103d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81103d2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 81103d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81103d6:	683a      	ldr	r2, [r7, #0]
 81103d8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 81103da:	69fb      	ldr	r3, [r7, #28]
 81103dc:	68ba      	ldr	r2, [r7, #8]
 81103de:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 81103e0:	69fb      	ldr	r3, [r7, #28]
 81103e2:	68fa      	ldr	r2, [r7, #12]
 81103e4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81103e6:	69fb      	ldr	r3, [r7, #28]
 81103e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81103ea:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 81103ec:	69fb      	ldr	r3, [r7, #28]
 81103ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81103f0:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 81103f2:	69fb      	ldr	r3, [r7, #28]
 81103f4:	4a19      	ldr	r2, [pc, #100]	@ (811045c <rproc_virtio_create_vdev+0x158>)
 81103f6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 81103f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81103fa:	3318      	adds	r3, #24
 81103fc:	e02a      	b.n	8110454 <rproc_virtio_create_vdev+0x150>
			goto err1;
 81103fe:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8110400:	2300      	movs	r3, #0
 8110402:	637b      	str	r3, [r7, #52]	@ 0x34
 8110404:	e019      	b.n	811043a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8110406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110408:	4613      	mov	r3, r2
 811040a:	005b      	lsls	r3, r3, #1
 811040c:	4413      	add	r3, r2
 811040e:	00db      	lsls	r3, r3, #3
 8110410:	461a      	mov	r2, r3
 8110412:	6a3b      	ldr	r3, [r7, #32]
 8110414:	4413      	add	r3, r2
 8110416:	681b      	ldr	r3, [r3, #0]
 8110418:	2b00      	cmp	r3, #0
 811041a:	d00b      	beq.n	8110434 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 811041c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811041e:	4613      	mov	r3, r2
 8110420:	005b      	lsls	r3, r3, #1
 8110422:	4413      	add	r3, r2
 8110424:	00db      	lsls	r3, r3, #3
 8110426:	461a      	mov	r2, r3
 8110428:	6a3b      	ldr	r3, [r7, #32]
 811042a:	4413      	add	r3, r2
 811042c:	681b      	ldr	r3, [r3, #0]
 811042e:	4618      	mov	r0, r3
 8110430:	f7ff feb2 	bl	8110198 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8110434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110436:	3301      	adds	r3, #1
 8110438:	637b      	str	r3, [r7, #52]	@ 0x34
 811043a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811043c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811043e:	429a      	cmp	r2, r3
 8110440:	d3e1      	bcc.n	8110406 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8110442:	6a38      	ldr	r0, [r7, #32]
 8110444:	f7ff fea8 	bl	8110198 <metal_free_memory>
 8110448:	e000      	b.n	811044c <rproc_virtio_create_vdev+0x148>
		goto err0;
 811044a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 811044c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811044e:	f7ff fea3 	bl	8110198 <metal_free_memory>
	return NULL;
 8110452:	2300      	movs	r3, #0
}
 8110454:	4618      	mov	r0, r3
 8110456:	3738      	adds	r7, #56	@ 0x38
 8110458:	46bd      	mov	sp, r7
 811045a:	bd80      	pop	{r7, pc}
 811045c:	081177f8 	.word	0x081177f8

08110460 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8110460:	b480      	push	{r7}
 8110462:	b087      	sub	sp, #28
 8110464:	af00      	add	r7, sp, #0
 8110466:	60f8      	str	r0, [r7, #12]
 8110468:	60b9      	str	r1, [r7, #8]
 811046a:	607a      	str	r2, [r7, #4]
 811046c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 811046e:	68fb      	ldr	r3, [r7, #12]
 8110470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110472:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8110474:	68ba      	ldr	r2, [r7, #8]
 8110476:	697b      	ldr	r3, [r7, #20]
 8110478:	429a      	cmp	r2, r3
 811047a:	d302      	bcc.n	8110482 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 811047c:	f06f 0301 	mvn.w	r3, #1
 8110480:	e019      	b.n	81104b6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8110482:	68fb      	ldr	r3, [r7, #12]
 8110484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8110486:	68ba      	ldr	r2, [r7, #8]
 8110488:	4613      	mov	r3, r2
 811048a:	005b      	lsls	r3, r3, #1
 811048c:	4413      	add	r3, r2
 811048e:	00db      	lsls	r3, r3, #3
 8110490:	440b      	add	r3, r1
 8110492:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8110494:	693b      	ldr	r3, [r7, #16]
 8110496:	6a3a      	ldr	r2, [r7, #32]
 8110498:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 811049a:	693b      	ldr	r3, [r7, #16]
 811049c:	687a      	ldr	r2, [r7, #4]
 811049e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 81104a0:	693b      	ldr	r3, [r7, #16]
 81104a2:	683a      	ldr	r2, [r7, #0]
 81104a4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 81104a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104a8:	b29a      	uxth	r2, r3
 81104aa:	693b      	ldr	r3, [r7, #16]
 81104ac:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 81104ae:	693b      	ldr	r3, [r7, #16]
 81104b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81104b2:	609a      	str	r2, [r3, #8]

	return 0;
 81104b4:	2300      	movs	r3, #0
}
 81104b6:	4618      	mov	r0, r3
 81104b8:	371c      	adds	r7, #28
 81104ba:	46bd      	mov	sp, r7
 81104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81104c0:	4770      	bx	lr

081104c2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 81104c2:	b580      	push	{r7, lr}
 81104c4:	b086      	sub	sp, #24
 81104c6:	af00      	add	r7, sp, #0
 81104c8:	6078      	str	r0, [r7, #4]
 81104ca:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 81104cc:	687b      	ldr	r3, [r7, #4]
 81104ce:	2b00      	cmp	r3, #0
 81104d0:	d102      	bne.n	81104d8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 81104d2:	f06f 0315 	mvn.w	r3, #21
 81104d6:	e02c      	b.n	8110532 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 81104d8:	687b      	ldr	r3, [r7, #4]
 81104da:	681b      	ldr	r3, [r3, #0]
 81104dc:	683a      	ldr	r2, [r7, #0]
 81104de:	429a      	cmp	r2, r3
 81104e0:	d101      	bne.n	81104e6 <rproc_virtio_notified+0x24>
		return 0;
 81104e2:	2300      	movs	r3, #0
 81104e4:	e025      	b.n	8110532 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81104e6:	687b      	ldr	r3, [r7, #4]
 81104e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81104ea:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 81104ec:	2300      	movs	r3, #0
 81104ee:	617b      	str	r3, [r7, #20]
 81104f0:	e01a      	b.n	8110528 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 81104f2:	687b      	ldr	r3, [r7, #4]
 81104f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81104f6:	697a      	ldr	r2, [r7, #20]
 81104f8:	4613      	mov	r3, r2
 81104fa:	005b      	lsls	r3, r3, #1
 81104fc:	4413      	add	r3, r2
 81104fe:	00db      	lsls	r3, r3, #3
 8110500:	440b      	add	r3, r1
 8110502:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8110504:	68fb      	ldr	r3, [r7, #12]
 8110506:	691b      	ldr	r3, [r3, #16]
 8110508:	683a      	ldr	r2, [r7, #0]
 811050a:	429a      	cmp	r2, r3
 811050c:	d003      	beq.n	8110516 <rproc_virtio_notified+0x54>
 811050e:	683b      	ldr	r3, [r7, #0]
 8110510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110514:	d105      	bne.n	8110522 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8110516:	68fb      	ldr	r3, [r7, #12]
 8110518:	681b      	ldr	r3, [r3, #0]
 811051a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 811051c:	68b8      	ldr	r0, [r7, #8]
 811051e:	f001 fa1b 	bl	8111958 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8110522:	697b      	ldr	r3, [r7, #20]
 8110524:	3301      	adds	r3, #1
 8110526:	617b      	str	r3, [r7, #20]
 8110528:	697a      	ldr	r2, [r7, #20]
 811052a:	693b      	ldr	r3, [r7, #16]
 811052c:	429a      	cmp	r2, r3
 811052e:	d3e0      	bcc.n	81104f2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8110530:	2300      	movs	r3, #0
}
 8110532:	4618      	mov	r0, r3
 8110534:	3718      	adds	r7, #24
 8110536:	46bd      	mov	sp, r7
 8110538:	bd80      	pop	{r7, pc}

0811053a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 811053a:	b580      	push	{r7, lr}
 811053c:	b084      	sub	sp, #16
 811053e:	af00      	add	r7, sp, #0
 8110540:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8110542:	687b      	ldr	r3, [r7, #4]
 8110544:	699b      	ldr	r3, [r3, #24]
 8110546:	2b00      	cmp	r3, #0
 8110548:	d00a      	beq.n	8110560 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 811054a:	6878      	ldr	r0, [r7, #4]
 811054c:	f7ff fe7c 	bl	8110248 <rproc_virtio_get_status>
 8110550:	4603      	mov	r3, r0
 8110552:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8110554:	7bfb      	ldrb	r3, [r7, #15]
 8110556:	f003 0304 	and.w	r3, r3, #4
 811055a:	2b00      	cmp	r3, #0
 811055c:	d102      	bne.n	8110564 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 811055e:	e7f4      	b.n	811054a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8110560:	bf00      	nop
 8110562:	e000      	b.n	8110566 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8110564:	bf00      	nop
	}
}
 8110566:	3710      	adds	r7, #16
 8110568:	46bd      	mov	sp, r7
 811056a:	bd80      	pop	{r7, pc}

0811056c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 811056c:	b480      	push	{r7}
 811056e:	b083      	sub	sp, #12
 8110570:	af00      	add	r7, sp, #0
 8110572:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8110574:	bf00      	nop
 8110576:	687b      	ldr	r3, [r7, #4]
 8110578:	2201      	movs	r2, #1
 811057a:	4611      	mov	r1, r2
 811057c:	f3bf 8f5b 	dmb	ish
 8110580:	e8d3 2f4f 	ldrexb	r2, [r3]
 8110584:	e8c3 1f40 	strexb	r0, r1, [r3]
 8110588:	2800      	cmp	r0, #0
 811058a:	d1f9      	bne.n	8110580 <__metal_mutex_acquire+0x14>
 811058c:	f3bf 8f5b 	dmb	ish
 8110590:	b2d3      	uxtb	r3, r2
 8110592:	2b00      	cmp	r3, #0
 8110594:	d1ef      	bne.n	8110576 <__metal_mutex_acquire+0xa>
		;
	}
}
 8110596:	bf00      	nop
 8110598:	bf00      	nop
 811059a:	370c      	adds	r7, #12
 811059c:	46bd      	mov	sp, r7
 811059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105a2:	4770      	bx	lr

081105a4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81105a4:	b480      	push	{r7}
 81105a6:	b083      	sub	sp, #12
 81105a8:	af00      	add	r7, sp, #0
 81105aa:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81105ac:	687b      	ldr	r3, [r7, #4]
 81105ae:	f3bf 8f5b 	dmb	ish
 81105b2:	2200      	movs	r2, #0
 81105b4:	701a      	strb	r2, [r3, #0]
 81105b6:	f3bf 8f5b 	dmb	ish
}
 81105ba:	bf00      	nop
 81105bc:	370c      	adds	r7, #12
 81105be:	46bd      	mov	sp, r7
 81105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105c4:	4770      	bx	lr

081105c6 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 81105c6:	b580      	push	{r7, lr}
 81105c8:	b082      	sub	sp, #8
 81105ca:	af00      	add	r7, sp, #0
 81105cc:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81105ce:	6878      	ldr	r0, [r7, #4]
 81105d0:	f7ff ffcc 	bl	811056c <__metal_mutex_acquire>
}
 81105d4:	bf00      	nop
 81105d6:	3708      	adds	r7, #8
 81105d8:	46bd      	mov	sp, r7
 81105da:	bd80      	pop	{r7, pc}

081105dc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 81105dc:	b580      	push	{r7, lr}
 81105de:	b082      	sub	sp, #8
 81105e0:	af00      	add	r7, sp, #0
 81105e2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81105e4:	6878      	ldr	r0, [r7, #4]
 81105e6:	f7ff ffdd 	bl	81105a4 <__metal_mutex_release>
}
 81105ea:	bf00      	nop
 81105ec:	3708      	adds	r7, #8
 81105ee:	46bd      	mov	sp, r7
 81105f0:	bd80      	pop	{r7, pc}

081105f2 <metal_list_add_before>:
{
 81105f2:	b480      	push	{r7}
 81105f4:	b083      	sub	sp, #12
 81105f6:	af00      	add	r7, sp, #0
 81105f8:	6078      	str	r0, [r7, #4]
 81105fa:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81105fc:	687b      	ldr	r3, [r7, #4]
 81105fe:	685a      	ldr	r2, [r3, #4]
 8110600:	683b      	ldr	r3, [r7, #0]
 8110602:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8110604:	683b      	ldr	r3, [r7, #0]
 8110606:	687a      	ldr	r2, [r7, #4]
 8110608:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 811060a:	683b      	ldr	r3, [r7, #0]
 811060c:	681b      	ldr	r3, [r3, #0]
 811060e:	683a      	ldr	r2, [r7, #0]
 8110610:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8110612:	683b      	ldr	r3, [r7, #0]
 8110614:	685b      	ldr	r3, [r3, #4]
 8110616:	683a      	ldr	r2, [r7, #0]
 8110618:	601a      	str	r2, [r3, #0]
}
 811061a:	bf00      	nop
 811061c:	370c      	adds	r7, #12
 811061e:	46bd      	mov	sp, r7
 8110620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110624:	4770      	bx	lr

08110626 <metal_list_add_tail>:
{
 8110626:	b580      	push	{r7, lr}
 8110628:	b082      	sub	sp, #8
 811062a:	af00      	add	r7, sp, #0
 811062c:	6078      	str	r0, [r7, #4]
 811062e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8110630:	6839      	ldr	r1, [r7, #0]
 8110632:	6878      	ldr	r0, [r7, #4]
 8110634:	f7ff ffdd 	bl	81105f2 <metal_list_add_before>
}
 8110638:	bf00      	nop
 811063a:	3708      	adds	r7, #8
 811063c:	46bd      	mov	sp, r7
 811063e:	bd80      	pop	{r7, pc}

08110640 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8110640:	b480      	push	{r7}
 8110642:	b083      	sub	sp, #12
 8110644:	af00      	add	r7, sp, #0
 8110646:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8110648:	687b      	ldr	r3, [r7, #4]
 811064a:	681b      	ldr	r3, [r3, #0]
 811064c:	687a      	ldr	r2, [r7, #4]
 811064e:	6852      	ldr	r2, [r2, #4]
 8110650:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	685b      	ldr	r3, [r3, #4]
 8110656:	687a      	ldr	r2, [r7, #4]
 8110658:	6812      	ldr	r2, [r2, #0]
 811065a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 811065c:	687b      	ldr	r3, [r7, #4]
 811065e:	687a      	ldr	r2, [r7, #4]
 8110660:	605a      	str	r2, [r3, #4]
 8110662:	687b      	ldr	r3, [r7, #4]
 8110664:	685a      	ldr	r2, [r3, #4]
 8110666:	687b      	ldr	r3, [r7, #4]
 8110668:	601a      	str	r2, [r3, #0]
}
 811066a:	bf00      	nop
 811066c:	370c      	adds	r7, #12
 811066e:	46bd      	mov	sp, r7
 8110670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110674:	4770      	bx	lr

08110676 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8110676:	b480      	push	{r7}
 8110678:	b083      	sub	sp, #12
 811067a:	af00      	add	r7, sp, #0
 811067c:	6078      	str	r0, [r7, #4]
 811067e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8110680:	683b      	ldr	r3, [r7, #0]
 8110682:	095b      	lsrs	r3, r3, #5
 8110684:	009a      	lsls	r2, r3, #2
 8110686:	6879      	ldr	r1, [r7, #4]
 8110688:	440a      	add	r2, r1
 811068a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 811068c:	683a      	ldr	r2, [r7, #0]
 811068e:	f002 021f 	and.w	r2, r2, #31
 8110692:	2001      	movs	r0, #1
 8110694:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8110698:	009b      	lsls	r3, r3, #2
 811069a:	6878      	ldr	r0, [r7, #4]
 811069c:	4403      	add	r3, r0
 811069e:	430a      	orrs	r2, r1
 81106a0:	601a      	str	r2, [r3, #0]
}
 81106a2:	bf00      	nop
 81106a4:	370c      	adds	r7, #12
 81106a6:	46bd      	mov	sp, r7
 81106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106ac:	4770      	bx	lr

081106ae <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 81106ae:	b480      	push	{r7}
 81106b0:	b083      	sub	sp, #12
 81106b2:	af00      	add	r7, sp, #0
 81106b4:	6078      	str	r0, [r7, #4]
 81106b6:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 81106b8:	683b      	ldr	r3, [r7, #0]
 81106ba:	095b      	lsrs	r3, r3, #5
 81106bc:	009b      	lsls	r3, r3, #2
 81106be:	687a      	ldr	r2, [r7, #4]
 81106c0:	4413      	add	r3, r2
 81106c2:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81106c4:	683b      	ldr	r3, [r7, #0]
 81106c6:	f003 031f 	and.w	r3, r3, #31
 81106ca:	2101      	movs	r1, #1
 81106cc:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 81106d0:	4013      	ands	r3, r2
}
 81106d2:	4618      	mov	r0, r3
 81106d4:	370c      	adds	r7, #12
 81106d6:	46bd      	mov	sp, r7
 81106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106dc:	4770      	bx	lr

081106de <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 81106de:	b480      	push	{r7}
 81106e0:	b083      	sub	sp, #12
 81106e2:	af00      	add	r7, sp, #0
 81106e4:	6078      	str	r0, [r7, #4]
 81106e6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 81106e8:	683b      	ldr	r3, [r7, #0]
 81106ea:	095b      	lsrs	r3, r3, #5
 81106ec:	009a      	lsls	r2, r3, #2
 81106ee:	6879      	ldr	r1, [r7, #4]
 81106f0:	440a      	add	r2, r1
 81106f2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81106f4:	683a      	ldr	r2, [r7, #0]
 81106f6:	f002 021f 	and.w	r2, r2, #31
 81106fa:	2001      	movs	r0, #1
 81106fc:	fa00 f202 	lsl.w	r2, r0, r2
 8110700:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8110702:	009b      	lsls	r3, r3, #2
 8110704:	6878      	ldr	r0, [r7, #4]
 8110706:	4403      	add	r3, r0
 8110708:	400a      	ands	r2, r1
 811070a:	601a      	str	r2, [r3, #0]
}
 811070c:	bf00      	nop
 811070e:	370c      	adds	r7, #12
 8110710:	46bd      	mov	sp, r7
 8110712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110716:	4770      	bx	lr

08110718 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8110718:	b580      	push	{r7, lr}
 811071a:	b082      	sub	sp, #8
 811071c:	af00      	add	r7, sp, #0
 811071e:	6078      	str	r0, [r7, #4]
 8110720:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8110722:	6839      	ldr	r1, [r7, #0]
 8110724:	6878      	ldr	r0, [r7, #4]
 8110726:	f7ff ffc2 	bl	81106ae <metal_bitmap_is_bit_set>
 811072a:	4603      	mov	r3, r0
 811072c:	2b00      	cmp	r3, #0
 811072e:	bf0c      	ite	eq
 8110730:	2301      	moveq	r3, #1
 8110732:	2300      	movne	r3, #0
 8110734:	b2db      	uxtb	r3, r3
}
 8110736:	4618      	mov	r0, r3
 8110738:	3708      	adds	r7, #8
 811073a:	46bd      	mov	sp, r7
 811073c:	bd80      	pop	{r7, pc}

0811073e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 811073e:	b580      	push	{r7, lr}
 8110740:	b086      	sub	sp, #24
 8110742:	af00      	add	r7, sp, #0
 8110744:	60f8      	str	r0, [r7, #12]
 8110746:	60b9      	str	r1, [r7, #8]
 8110748:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 811074a:	68bb      	ldr	r3, [r7, #8]
 811074c:	617b      	str	r3, [r7, #20]
 811074e:	e002      	b.n	8110756 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8110750:	697b      	ldr	r3, [r7, #20]
 8110752:	3301      	adds	r3, #1
 8110754:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8110756:	697a      	ldr	r2, [r7, #20]
 8110758:	687b      	ldr	r3, [r7, #4]
 811075a:	429a      	cmp	r2, r3
 811075c:	d207      	bcs.n	811076e <metal_bitmap_next_clear_bit+0x30>
 811075e:	697b      	ldr	r3, [r7, #20]
 8110760:	4619      	mov	r1, r3
 8110762:	68f8      	ldr	r0, [r7, #12]
 8110764:	f7ff ffd8 	bl	8110718 <metal_bitmap_is_bit_clear>
 8110768:	4603      	mov	r3, r0
 811076a:	2b00      	cmp	r3, #0
 811076c:	d0f0      	beq.n	8110750 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 811076e:	697b      	ldr	r3, [r7, #20]
}
 8110770:	4618      	mov	r0, r3
 8110772:	3718      	adds	r7, #24
 8110774:	46bd      	mov	sp, r7
 8110776:	bd80      	pop	{r7, pc}

08110778 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8110778:	b580      	push	{r7, lr}
 811077a:	b084      	sub	sp, #16
 811077c:	af00      	add	r7, sp, #0
 811077e:	60f8      	str	r0, [r7, #12]
 8110780:	60b9      	str	r1, [r7, #8]
 8110782:	607a      	str	r2, [r7, #4]
 8110784:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8110786:	68fb      	ldr	r3, [r7, #12]
 8110788:	2220      	movs	r2, #32
 811078a:	68b9      	ldr	r1, [r7, #8]
 811078c:	4618      	mov	r0, r3
 811078e:	f002 fc3e 	bl	811300e <strncpy>
	ept->addr = src;
 8110792:	68fb      	ldr	r3, [r7, #12]
 8110794:	687a      	ldr	r2, [r7, #4]
 8110796:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8110798:	68fb      	ldr	r3, [r7, #12]
 811079a:	683a      	ldr	r2, [r7, #0]
 811079c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 811079e:	68fb      	ldr	r3, [r7, #12]
 81107a0:	69ba      	ldr	r2, [r7, #24]
 81107a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81107a4:	68fb      	ldr	r3, [r7, #12]
 81107a6:	69fa      	ldr	r2, [r7, #28]
 81107a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 81107aa:	bf00      	nop
 81107ac:	3710      	adds	r7, #16
 81107ae:	46bd      	mov	sp, r7
 81107b0:	bd80      	pop	{r7, pc}

081107b2 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 81107b2:	b580      	push	{r7, lr}
 81107b4:	b084      	sub	sp, #16
 81107b6:	af00      	add	r7, sp, #0
 81107b8:	6078      	str	r0, [r7, #4]
 81107ba:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 81107bc:	f04f 33ff 	mov.w	r3, #4294967295
 81107c0:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 81107c2:	683b      	ldr	r3, [r7, #0]
 81107c4:	461a      	mov	r2, r3
 81107c6:	2100      	movs	r1, #0
 81107c8:	6878      	ldr	r0, [r7, #4]
 81107ca:	f7ff ffb8 	bl	811073e <metal_bitmap_next_clear_bit>
 81107ce:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 81107d0:	683b      	ldr	r3, [r7, #0]
 81107d2:	68ba      	ldr	r2, [r7, #8]
 81107d4:	429a      	cmp	r2, r3
 81107d6:	d206      	bcs.n	81107e6 <rpmsg_get_address+0x34>
		addr = nextbit;
 81107d8:	68bb      	ldr	r3, [r7, #8]
 81107da:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 81107dc:	68bb      	ldr	r3, [r7, #8]
 81107de:	4619      	mov	r1, r3
 81107e0:	6878      	ldr	r0, [r7, #4]
 81107e2:	f7ff ff48 	bl	8110676 <metal_bitmap_set_bit>
	}

	return addr;
 81107e6:	68fb      	ldr	r3, [r7, #12]
}
 81107e8:	4618      	mov	r0, r3
 81107ea:	3710      	adds	r7, #16
 81107ec:	46bd      	mov	sp, r7
 81107ee:	bd80      	pop	{r7, pc}

081107f0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 81107f0:	b580      	push	{r7, lr}
 81107f2:	b084      	sub	sp, #16
 81107f4:	af00      	add	r7, sp, #0
 81107f6:	60f8      	str	r0, [r7, #12]
 81107f8:	60b9      	str	r1, [r7, #8]
 81107fa:	607a      	str	r2, [r7, #4]
	if (addr < size)
 81107fc:	687a      	ldr	r2, [r7, #4]
 81107fe:	68bb      	ldr	r3, [r7, #8]
 8110800:	429a      	cmp	r2, r3
 8110802:	da03      	bge.n	811080c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8110804:	6879      	ldr	r1, [r7, #4]
 8110806:	68f8      	ldr	r0, [r7, #12]
 8110808:	f7ff ff69 	bl	81106de <metal_bitmap_clear_bit>
}
 811080c:	bf00      	nop
 811080e:	3710      	adds	r7, #16
 8110810:	46bd      	mov	sp, r7
 8110812:	bd80      	pop	{r7, pc}

08110814 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8110814:	b580      	push	{r7, lr}
 8110816:	b084      	sub	sp, #16
 8110818:	af00      	add	r7, sp, #0
 811081a:	60f8      	str	r0, [r7, #12]
 811081c:	60b9      	str	r1, [r7, #8]
 811081e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8110820:	687a      	ldr	r2, [r7, #4]
 8110822:	68bb      	ldr	r3, [r7, #8]
 8110824:	429a      	cmp	r2, r3
 8110826:	da05      	bge.n	8110834 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8110828:	6879      	ldr	r1, [r7, #4]
 811082a:	68f8      	ldr	r0, [r7, #12]
 811082c:	f7ff ff3f 	bl	81106ae <metal_bitmap_is_bit_set>
 8110830:	4603      	mov	r3, r0
 8110832:	e000      	b.n	8110836 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8110834:	4b02      	ldr	r3, [pc, #8]	@ (8110840 <rpmsg_is_address_set+0x2c>)
}
 8110836:	4618      	mov	r0, r3
 8110838:	3710      	adds	r7, #16
 811083a:	46bd      	mov	sp, r7
 811083c:	bd80      	pop	{r7, pc}
 811083e:	bf00      	nop
 8110840:	fffff82d 	.word	0xfffff82d

08110844 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8110844:	b580      	push	{r7, lr}
 8110846:	b084      	sub	sp, #16
 8110848:	af00      	add	r7, sp, #0
 811084a:	60f8      	str	r0, [r7, #12]
 811084c:	60b9      	str	r1, [r7, #8]
 811084e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8110850:	687a      	ldr	r2, [r7, #4]
 8110852:	68bb      	ldr	r3, [r7, #8]
 8110854:	429a      	cmp	r2, r3
 8110856:	da05      	bge.n	8110864 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8110858:	6879      	ldr	r1, [r7, #4]
 811085a:	68f8      	ldr	r0, [r7, #12]
 811085c:	f7ff ff0b 	bl	8110676 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8110860:	2300      	movs	r3, #0
 8110862:	e000      	b.n	8110866 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8110864:	4b02      	ldr	r3, [pc, #8]	@ (8110870 <rpmsg_set_address+0x2c>)
	}
}
 8110866:	4618      	mov	r0, r3
 8110868:	3710      	adds	r7, #16
 811086a:	46bd      	mov	sp, r7
 811086c:	bd80      	pop	{r7, pc}
 811086e:	bf00      	nop
 8110870:	fffff82d 	.word	0xfffff82d

08110874 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8110874:	b590      	push	{r4, r7, lr}
 8110876:	b089      	sub	sp, #36	@ 0x24
 8110878:	af02      	add	r7, sp, #8
 811087a:	60f8      	str	r0, [r7, #12]
 811087c:	60b9      	str	r1, [r7, #8]
 811087e:	607a      	str	r2, [r7, #4]
 8110880:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8110882:	68fb      	ldr	r3, [r7, #12]
 8110884:	2b00      	cmp	r3, #0
 8110886:	d00a      	beq.n	811089e <rpmsg_send_offchannel_raw+0x2a>
 8110888:	68fb      	ldr	r3, [r7, #12]
 811088a:	6a1b      	ldr	r3, [r3, #32]
 811088c:	2b00      	cmp	r3, #0
 811088e:	d006      	beq.n	811089e <rpmsg_send_offchannel_raw+0x2a>
 8110890:	683b      	ldr	r3, [r7, #0]
 8110892:	2b00      	cmp	r3, #0
 8110894:	d003      	beq.n	811089e <rpmsg_send_offchannel_raw+0x2a>
 8110896:	687b      	ldr	r3, [r7, #4]
 8110898:	f1b3 3fff 	cmp.w	r3, #4294967295
 811089c:	d101      	bne.n	81108a2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 811089e:	4b0d      	ldr	r3, [pc, #52]	@ (81108d4 <rpmsg_send_offchannel_raw+0x60>)
 81108a0:	e014      	b.n	81108cc <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 81108a2:	68fb      	ldr	r3, [r7, #12]
 81108a4:	6a1b      	ldr	r3, [r3, #32]
 81108a6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 81108a8:	697b      	ldr	r3, [r7, #20]
 81108aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81108ac:	2b00      	cmp	r3, #0
 81108ae:	d00c      	beq.n	81108ca <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 81108b0:	697b      	ldr	r3, [r7, #20]
 81108b2:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 81108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108b6:	9301      	str	r3, [sp, #4]
 81108b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81108ba:	9300      	str	r3, [sp, #0]
 81108bc:	683b      	ldr	r3, [r7, #0]
 81108be:	687a      	ldr	r2, [r7, #4]
 81108c0:	68b9      	ldr	r1, [r7, #8]
 81108c2:	6978      	ldr	r0, [r7, #20]
 81108c4:	47a0      	blx	r4
 81108c6:	4603      	mov	r3, r0
 81108c8:	e000      	b.n	81108cc <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 81108ca:	4b02      	ldr	r3, [pc, #8]	@ (81108d4 <rpmsg_send_offchannel_raw+0x60>)
}
 81108cc:	4618      	mov	r0, r3
 81108ce:	371c      	adds	r7, #28
 81108d0:	46bd      	mov	sp, r7
 81108d2:	bd90      	pop	{r4, r7, pc}
 81108d4:	fffff82d 	.word	0xfffff82d

081108d8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 81108d8:	b580      	push	{r7, lr}
 81108da:	b090      	sub	sp, #64	@ 0x40
 81108dc:	af02      	add	r7, sp, #8
 81108de:	6078      	str	r0, [r7, #4]
 81108e0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 81108e2:	683b      	ldr	r3, [r7, #0]
 81108e4:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 81108e6:	687b      	ldr	r3, [r7, #4]
 81108e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81108ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 81108ec:	6879      	ldr	r1, [r7, #4]
 81108ee:	f107 030c 	add.w	r3, r7, #12
 81108f2:	2220      	movs	r2, #32
 81108f4:	4618      	mov	r0, r3
 81108f6:	f002 fb8a 	bl	811300e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 81108fa:	687b      	ldr	r3, [r7, #4]
 81108fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 81108fe:	f107 030c 	add.w	r3, r7, #12
 8110902:	2201      	movs	r2, #1
 8110904:	9201      	str	r2, [sp, #4]
 8110906:	2228      	movs	r2, #40	@ 0x28
 8110908:	9200      	str	r2, [sp, #0]
 811090a:	2235      	movs	r2, #53	@ 0x35
 811090c:	6878      	ldr	r0, [r7, #4]
 811090e:	f7ff ffb1 	bl	8110874 <rpmsg_send_offchannel_raw>
 8110912:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8110914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110916:	2b00      	cmp	r3, #0
 8110918:	da01      	bge.n	811091e <rpmsg_send_ns_message+0x46>
		return ret;
 811091a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811091c:	e000      	b.n	8110920 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 811091e:	2300      	movs	r3, #0
}
 8110920:	4618      	mov	r0, r3
 8110922:	3738      	adds	r7, #56	@ 0x38
 8110924:	46bd      	mov	sp, r7
 8110926:	bd80      	pop	{r7, pc}

08110928 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8110928:	b580      	push	{r7, lr}
 811092a:	b088      	sub	sp, #32
 811092c:	af00      	add	r7, sp, #0
 811092e:	60f8      	str	r0, [r7, #12]
 8110930:	60b9      	str	r1, [r7, #8]
 8110932:	607a      	str	r2, [r7, #4]
 8110934:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8110936:	68fb      	ldr	r3, [r7, #12]
 8110938:	681b      	ldr	r3, [r3, #0]
 811093a:	61fb      	str	r3, [r7, #28]
 811093c:	e04b      	b.n	81109d6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 811093e:	2300      	movs	r3, #0
 8110940:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8110942:	69fb      	ldr	r3, [r7, #28]
 8110944:	3b34      	subs	r3, #52	@ 0x34
 8110946:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8110948:	687b      	ldr	r3, [r7, #4]
 811094a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811094e:	d006      	beq.n	811095e <rpmsg_get_endpoint+0x36>
 8110950:	697b      	ldr	r3, [r7, #20]
 8110952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110954:	687a      	ldr	r2, [r7, #4]
 8110956:	429a      	cmp	r2, r3
 8110958:	d101      	bne.n	811095e <rpmsg_get_endpoint+0x36>
			return ept;
 811095a:	697b      	ldr	r3, [r7, #20]
 811095c:	e040      	b.n	81109e0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 811095e:	697b      	ldr	r3, [r7, #20]
 8110960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110962:	687a      	ldr	r2, [r7, #4]
 8110964:	429a      	cmp	r2, r3
 8110966:	d106      	bne.n	8110976 <rpmsg_get_endpoint+0x4e>
 8110968:	697b      	ldr	r3, [r7, #20]
 811096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811096c:	683a      	ldr	r2, [r7, #0]
 811096e:	429a      	cmp	r2, r3
 8110970:	d101      	bne.n	8110976 <rpmsg_get_endpoint+0x4e>
			return ept;
 8110972:	697b      	ldr	r3, [r7, #20]
 8110974:	e034      	b.n	81109e0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8110976:	68bb      	ldr	r3, [r7, #8]
 8110978:	2b00      	cmp	r3, #0
 811097a:	d00c      	beq.n	8110996 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 811097c:	697b      	ldr	r3, [r7, #20]
 811097e:	2220      	movs	r2, #32
 8110980:	68b9      	ldr	r1, [r7, #8]
 8110982:	4618      	mov	r0, r3
 8110984:	f002 fb31 	bl	8112fea <strncmp>
 8110988:	4603      	mov	r3, r0
 811098a:	2b00      	cmp	r3, #0
 811098c:	bf0c      	ite	eq
 811098e:	2301      	moveq	r3, #1
 8110990:	2300      	movne	r3, #0
 8110992:	b2db      	uxtb	r3, r3
 8110994:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8110996:	68bb      	ldr	r3, [r7, #8]
 8110998:	2b00      	cmp	r3, #0
 811099a:	d018      	beq.n	81109ce <rpmsg_get_endpoint+0xa6>
 811099c:	69bb      	ldr	r3, [r7, #24]
 811099e:	2b00      	cmp	r3, #0
 81109a0:	d015      	beq.n	81109ce <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 81109a2:	683b      	ldr	r3, [r7, #0]
 81109a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81109a8:	d006      	beq.n	81109b8 <rpmsg_get_endpoint+0x90>
 81109aa:	697b      	ldr	r3, [r7, #20]
 81109ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81109ae:	683a      	ldr	r2, [r7, #0]
 81109b0:	429a      	cmp	r2, r3
 81109b2:	d101      	bne.n	81109b8 <rpmsg_get_endpoint+0x90>
			return ept;
 81109b4:	697b      	ldr	r3, [r7, #20]
 81109b6:	e013      	b.n	81109e0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 81109b8:	687b      	ldr	r3, [r7, #4]
 81109ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81109be:	d107      	bne.n	81109d0 <rpmsg_get_endpoint+0xa8>
 81109c0:	697b      	ldr	r3, [r7, #20]
 81109c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81109c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81109c8:	d102      	bne.n	81109d0 <rpmsg_get_endpoint+0xa8>
			return ept;
 81109ca:	697b      	ldr	r3, [r7, #20]
 81109cc:	e008      	b.n	81109e0 <rpmsg_get_endpoint+0xb8>
			continue;
 81109ce:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 81109d0:	69fb      	ldr	r3, [r7, #28]
 81109d2:	681b      	ldr	r3, [r3, #0]
 81109d4:	61fb      	str	r3, [r7, #28]
 81109d6:	68fb      	ldr	r3, [r7, #12]
 81109d8:	69fa      	ldr	r2, [r7, #28]
 81109da:	429a      	cmp	r2, r3
 81109dc:	d1af      	bne.n	811093e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 81109de:	2300      	movs	r3, #0
}
 81109e0:	4618      	mov	r0, r3
 81109e2:	3720      	adds	r7, #32
 81109e4:	46bd      	mov	sp, r7
 81109e6:	bd80      	pop	{r7, pc}

081109e8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 81109e8:	b580      	push	{r7, lr}
 81109ea:	b084      	sub	sp, #16
 81109ec:	af00      	add	r7, sp, #0
 81109ee:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 81109f0:	687b      	ldr	r3, [r7, #4]
 81109f2:	2b00      	cmp	r3, #0
 81109f4:	d016      	beq.n	8110a24 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 81109f6:	687b      	ldr	r3, [r7, #4]
 81109f8:	6a1b      	ldr	r3, [r3, #32]
 81109fa:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 81109fc:	687b      	ldr	r3, [r7, #4]
 81109fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110a04:	d008      	beq.n	8110a18 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8110a06:	68fb      	ldr	r3, [r7, #12]
 8110a08:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8110a0c:	687b      	ldr	r3, [r7, #4]
 8110a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8110a10:	461a      	mov	r2, r3
 8110a12:	2180      	movs	r1, #128	@ 0x80
 8110a14:	f7ff feec 	bl	81107f0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8110a18:	687b      	ldr	r3, [r7, #4]
 8110a1a:	3334      	adds	r3, #52	@ 0x34
 8110a1c:	4618      	mov	r0, r3
 8110a1e:	f7ff fe0f 	bl	8110640 <metal_list_del>
 8110a22:	e000      	b.n	8110a26 <rpmsg_unregister_endpoint+0x3e>
		return;
 8110a24:	bf00      	nop
}
 8110a26:	3710      	adds	r7, #16
 8110a28:	46bd      	mov	sp, r7
 8110a2a:	bd80      	pop	{r7, pc}

08110a2c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8110a2c:	b580      	push	{r7, lr}
 8110a2e:	b082      	sub	sp, #8
 8110a30:	af00      	add	r7, sp, #0
 8110a32:	6078      	str	r0, [r7, #4]
 8110a34:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8110a36:	683b      	ldr	r3, [r7, #0]
 8110a38:	687a      	ldr	r2, [r7, #4]
 8110a3a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8110a3c:	687a      	ldr	r2, [r7, #4]
 8110a3e:	683b      	ldr	r3, [r7, #0]
 8110a40:	3334      	adds	r3, #52	@ 0x34
 8110a42:	4619      	mov	r1, r3
 8110a44:	4610      	mov	r0, r2
 8110a46:	f7ff fdee 	bl	8110626 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8110a4a:	2300      	movs	r3, #0
}
 8110a4c:	4618      	mov	r0, r3
 8110a4e:	3708      	adds	r7, #8
 8110a50:	46bd      	mov	sp, r7
 8110a52:	bd80      	pop	{r7, pc}

08110a54 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8110a54:	b580      	push	{r7, lr}
 8110a56:	b088      	sub	sp, #32
 8110a58:	af02      	add	r7, sp, #8
 8110a5a:	60f8      	str	r0, [r7, #12]
 8110a5c:	60b9      	str	r1, [r7, #8]
 8110a5e:	607a      	str	r2, [r7, #4]
 8110a60:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8110a62:	683b      	ldr	r3, [r7, #0]
 8110a64:	613b      	str	r3, [r7, #16]

	if (!ept)
 8110a66:	68fb      	ldr	r3, [r7, #12]
 8110a68:	2b00      	cmp	r3, #0
 8110a6a:	d101      	bne.n	8110a70 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8110a6c:	4b37      	ldr	r3, [pc, #220]	@ (8110b4c <rpmsg_create_ept+0xf8>)
 8110a6e:	e068      	b.n	8110b42 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8110a70:	68bb      	ldr	r3, [r7, #8]
 8110a72:	3358      	adds	r3, #88	@ 0x58
 8110a74:	4618      	mov	r0, r3
 8110a76:	f7ff fda6 	bl	81105c6 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8110a7a:	683b      	ldr	r3, [r7, #0]
 8110a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110a80:	d018      	beq.n	8110ab4 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8110a82:	68bb      	ldr	r3, [r7, #8]
 8110a84:	3348      	adds	r3, #72	@ 0x48
 8110a86:	683a      	ldr	r2, [r7, #0]
 8110a88:	2180      	movs	r1, #128	@ 0x80
 8110a8a:	4618      	mov	r0, r3
 8110a8c:	f7ff fec2 	bl	8110814 <rpmsg_is_address_set>
 8110a90:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8110a92:	697b      	ldr	r3, [r7, #20]
 8110a94:	2b00      	cmp	r3, #0
 8110a96:	d107      	bne.n	8110aa8 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8110a98:	68bb      	ldr	r3, [r7, #8]
 8110a9a:	3348      	adds	r3, #72	@ 0x48
 8110a9c:	683a      	ldr	r2, [r7, #0]
 8110a9e:	2180      	movs	r1, #128	@ 0x80
 8110aa0:	4618      	mov	r0, r3
 8110aa2:	f7ff fecf 	bl	8110844 <rpmsg_set_address>
 8110aa6:	e00c      	b.n	8110ac2 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8110aa8:	697b      	ldr	r3, [r7, #20]
 8110aaa:	2b00      	cmp	r3, #0
 8110aac:	dd40      	ble.n	8110b30 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8110aae:	2300      	movs	r3, #0
 8110ab0:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8110ab2:	e040      	b.n	8110b36 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8110ab4:	68bb      	ldr	r3, [r7, #8]
 8110ab6:	3348      	adds	r3, #72	@ 0x48
 8110ab8:	2180      	movs	r1, #128	@ 0x80
 8110aba:	4618      	mov	r0, r3
 8110abc:	f7ff fe79 	bl	81107b2 <rpmsg_get_address>
 8110ac0:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8110ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110ac4:	9301      	str	r3, [sp, #4]
 8110ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110ac8:	9300      	str	r3, [sp, #0]
 8110aca:	6a3b      	ldr	r3, [r7, #32]
 8110acc:	693a      	ldr	r2, [r7, #16]
 8110ace:	6879      	ldr	r1, [r7, #4]
 8110ad0:	68f8      	ldr	r0, [r7, #12]
 8110ad2:	f7ff fe51 	bl	8110778 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8110ad6:	68f9      	ldr	r1, [r7, #12]
 8110ad8:	68b8      	ldr	r0, [r7, #8]
 8110ada:	f7ff ffa7 	bl	8110a2c <rpmsg_register_endpoint>
 8110ade:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8110ae0:	697b      	ldr	r3, [r7, #20]
 8110ae2:	2b00      	cmp	r3, #0
 8110ae4:	da06      	bge.n	8110af4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8110ae6:	68bb      	ldr	r3, [r7, #8]
 8110ae8:	3348      	adds	r3, #72	@ 0x48
 8110aea:	693a      	ldr	r2, [r7, #16]
 8110aec:	2180      	movs	r1, #128	@ 0x80
 8110aee:	4618      	mov	r0, r3
 8110af0:	f7ff fe7e 	bl	81107f0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8110af4:	697b      	ldr	r3, [r7, #20]
 8110af6:	2b00      	cmp	r3, #0
 8110af8:	d11c      	bne.n	8110b34 <rpmsg_create_ept+0xe0>
 8110afa:	68fb      	ldr	r3, [r7, #12]
 8110afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110b02:	d117      	bne.n	8110b34 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8110b04:	68bb      	ldr	r3, [r7, #8]
 8110b06:	3358      	adds	r3, #88	@ 0x58
 8110b08:	4618      	mov	r0, r3
 8110b0a:	f7ff fd67 	bl	81105dc <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8110b0e:	2100      	movs	r1, #0
 8110b10:	68f8      	ldr	r0, [r7, #12]
 8110b12:	f7ff fee1 	bl	81108d8 <rpmsg_send_ns_message>
 8110b16:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8110b18:	68bb      	ldr	r3, [r7, #8]
 8110b1a:	3358      	adds	r3, #88	@ 0x58
 8110b1c:	4618      	mov	r0, r3
 8110b1e:	f7ff fd52 	bl	81105c6 <metal_mutex_acquire>
		if (status)
 8110b22:	697b      	ldr	r3, [r7, #20]
 8110b24:	2b00      	cmp	r3, #0
 8110b26:	d005      	beq.n	8110b34 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8110b28:	68f8      	ldr	r0, [r7, #12]
 8110b2a:	f7ff ff5d 	bl	81109e8 <rpmsg_unregister_endpoint>
 8110b2e:	e002      	b.n	8110b36 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8110b30:	bf00      	nop
 8110b32:	e000      	b.n	8110b36 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8110b34:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8110b36:	68bb      	ldr	r3, [r7, #8]
 8110b38:	3358      	adds	r3, #88	@ 0x58
 8110b3a:	4618      	mov	r0, r3
 8110b3c:	f7ff fd4e 	bl	81105dc <metal_mutex_release>
	return status;
 8110b40:	697b      	ldr	r3, [r7, #20]
}
 8110b42:	4618      	mov	r0, r3
 8110b44:	3718      	adds	r7, #24
 8110b46:	46bd      	mov	sp, r7
 8110b48:	bd80      	pop	{r7, pc}
 8110b4a:	bf00      	nop
 8110b4c:	fffff82d 	.word	0xfffff82d

08110b50 <__metal_cache_invalidate>:
{
 8110b50:	b580      	push	{r7, lr}
 8110b52:	b082      	sub	sp, #8
 8110b54:	af00      	add	r7, sp, #0
 8110b56:	6078      	str	r0, [r7, #4]
 8110b58:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8110b5a:	6839      	ldr	r1, [r7, #0]
 8110b5c:	6878      	ldr	r0, [r7, #4]
 8110b5e:	f000 fc58 	bl	8111412 <metal_machine_cache_invalidate>
}
 8110b62:	bf00      	nop
 8110b64:	3708      	adds	r7, #8
 8110b66:	46bd      	mov	sp, r7
 8110b68:	bd80      	pop	{r7, pc}

08110b6a <metal_cache_invalidate>:
{
 8110b6a:	b580      	push	{r7, lr}
 8110b6c:	b082      	sub	sp, #8
 8110b6e:	af00      	add	r7, sp, #0
 8110b70:	6078      	str	r0, [r7, #4]
 8110b72:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8110b74:	6839      	ldr	r1, [r7, #0]
 8110b76:	6878      	ldr	r0, [r7, #4]
 8110b78:	f7ff ffea 	bl	8110b50 <__metal_cache_invalidate>
}
 8110b7c:	bf00      	nop
 8110b7e:	3708      	adds	r7, #8
 8110b80:	46bd      	mov	sp, r7
 8110b82:	bd80      	pop	{r7, pc}

08110b84 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8110b84:	b480      	push	{r7}
 8110b86:	b083      	sub	sp, #12
 8110b88:	af00      	add	r7, sp, #0
 8110b8a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8110b8c:	2300      	movs	r3, #0
}
 8110b8e:	4618      	mov	r0, r3
 8110b90:	370c      	adds	r7, #12
 8110b92:	46bd      	mov	sp, r7
 8110b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b98:	4770      	bx	lr

08110b9a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8110b9a:	b580      	push	{r7, lr}
 8110b9c:	b082      	sub	sp, #8
 8110b9e:	af00      	add	r7, sp, #0
 8110ba0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8110ba2:	6878      	ldr	r0, [r7, #4]
 8110ba4:	f7ff ffee 	bl	8110b84 <__metal_sleep_usec>
 8110ba8:	4603      	mov	r3, r0
}
 8110baa:	4618      	mov	r0, r3
 8110bac:	3708      	adds	r7, #8
 8110bae:	46bd      	mov	sp, r7
 8110bb0:	bd80      	pop	{r7, pc}

08110bb2 <metal_list_init>:
{
 8110bb2:	b480      	push	{r7}
 8110bb4:	b083      	sub	sp, #12
 8110bb6:	af00      	add	r7, sp, #0
 8110bb8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8110bba:	687b      	ldr	r3, [r7, #4]
 8110bbc:	687a      	ldr	r2, [r7, #4]
 8110bbe:	605a      	str	r2, [r3, #4]
 8110bc0:	687b      	ldr	r3, [r7, #4]
 8110bc2:	685a      	ldr	r2, [r3, #4]
 8110bc4:	687b      	ldr	r3, [r7, #4]
 8110bc6:	601a      	str	r2, [r3, #0]
}
 8110bc8:	bf00      	nop
 8110bca:	370c      	adds	r7, #12
 8110bcc:	46bd      	mov	sp, r7
 8110bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bd2:	4770      	bx	lr

08110bd4 <metal_io_virt_to_offset>:
{
 8110bd4:	b480      	push	{r7}
 8110bd6:	b085      	sub	sp, #20
 8110bd8:	af00      	add	r7, sp, #0
 8110bda:	6078      	str	r0, [r7, #4]
 8110bdc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8110bde:	687b      	ldr	r3, [r7, #4]
 8110be0:	681b      	ldr	r3, [r3, #0]
 8110be2:	683a      	ldr	r2, [r7, #0]
 8110be4:	1ad3      	subs	r3, r2, r3
 8110be6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8110be8:	687b      	ldr	r3, [r7, #4]
 8110bea:	689b      	ldr	r3, [r3, #8]
 8110bec:	68fa      	ldr	r2, [r7, #12]
 8110bee:	429a      	cmp	r2, r3
 8110bf0:	d201      	bcs.n	8110bf6 <metal_io_virt_to_offset+0x22>
 8110bf2:	68fb      	ldr	r3, [r7, #12]
 8110bf4:	e001      	b.n	8110bfa <metal_io_virt_to_offset+0x26>
 8110bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8110bfa:	4618      	mov	r0, r3
 8110bfc:	3714      	adds	r7, #20
 8110bfe:	46bd      	mov	sp, r7
 8110c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c04:	4770      	bx	lr

08110c06 <__metal_mutex_init>:
{
 8110c06:	b480      	push	{r7}
 8110c08:	b085      	sub	sp, #20
 8110c0a:	af00      	add	r7, sp, #0
 8110c0c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8110c0e:	687b      	ldr	r3, [r7, #4]
 8110c10:	60fb      	str	r3, [r7, #12]
 8110c12:	2300      	movs	r3, #0
 8110c14:	60bb      	str	r3, [r7, #8]
 8110c16:	68bb      	ldr	r3, [r7, #8]
 8110c18:	461a      	mov	r2, r3
 8110c1a:	68fb      	ldr	r3, [r7, #12]
 8110c1c:	f3bf 8f5b 	dmb	ish
 8110c20:	601a      	str	r2, [r3, #0]
 8110c22:	f3bf 8f5b 	dmb	ish
}
 8110c26:	bf00      	nop
 8110c28:	3714      	adds	r7, #20
 8110c2a:	46bd      	mov	sp, r7
 8110c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c30:	4770      	bx	lr

08110c32 <__metal_mutex_acquire>:
{
 8110c32:	b480      	push	{r7}
 8110c34:	b083      	sub	sp, #12
 8110c36:	af00      	add	r7, sp, #0
 8110c38:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8110c3a:	bf00      	nop
 8110c3c:	687b      	ldr	r3, [r7, #4]
 8110c3e:	2201      	movs	r2, #1
 8110c40:	4611      	mov	r1, r2
 8110c42:	f3bf 8f5b 	dmb	ish
 8110c46:	e8d3 2f4f 	ldrexb	r2, [r3]
 8110c4a:	e8c3 1f40 	strexb	r0, r1, [r3]
 8110c4e:	2800      	cmp	r0, #0
 8110c50:	d1f9      	bne.n	8110c46 <__metal_mutex_acquire+0x14>
 8110c52:	f3bf 8f5b 	dmb	ish
 8110c56:	b2d3      	uxtb	r3, r2
 8110c58:	2b00      	cmp	r3, #0
 8110c5a:	d1ef      	bne.n	8110c3c <__metal_mutex_acquire+0xa>
}
 8110c5c:	bf00      	nop
 8110c5e:	bf00      	nop
 8110c60:	370c      	adds	r7, #12
 8110c62:	46bd      	mov	sp, r7
 8110c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c68:	4770      	bx	lr

08110c6a <__metal_mutex_release>:
{
 8110c6a:	b480      	push	{r7}
 8110c6c:	b083      	sub	sp, #12
 8110c6e:	af00      	add	r7, sp, #0
 8110c70:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8110c72:	687b      	ldr	r3, [r7, #4]
 8110c74:	f3bf 8f5b 	dmb	ish
 8110c78:	2200      	movs	r2, #0
 8110c7a:	701a      	strb	r2, [r3, #0]
 8110c7c:	f3bf 8f5b 	dmb	ish
}
 8110c80:	bf00      	nop
 8110c82:	370c      	adds	r7, #12
 8110c84:	46bd      	mov	sp, r7
 8110c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c8a:	4770      	bx	lr

08110c8c <metal_mutex_init>:
{
 8110c8c:	b580      	push	{r7, lr}
 8110c8e:	b082      	sub	sp, #8
 8110c90:	af00      	add	r7, sp, #0
 8110c92:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8110c94:	6878      	ldr	r0, [r7, #4]
 8110c96:	f7ff ffb6 	bl	8110c06 <__metal_mutex_init>
}
 8110c9a:	bf00      	nop
 8110c9c:	3708      	adds	r7, #8
 8110c9e:	46bd      	mov	sp, r7
 8110ca0:	bd80      	pop	{r7, pc}

08110ca2 <metal_mutex_acquire>:
{
 8110ca2:	b580      	push	{r7, lr}
 8110ca4:	b082      	sub	sp, #8
 8110ca6:	af00      	add	r7, sp, #0
 8110ca8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8110caa:	6878      	ldr	r0, [r7, #4]
 8110cac:	f7ff ffc1 	bl	8110c32 <__metal_mutex_acquire>
}
 8110cb0:	bf00      	nop
 8110cb2:	3708      	adds	r7, #8
 8110cb4:	46bd      	mov	sp, r7
 8110cb6:	bd80      	pop	{r7, pc}

08110cb8 <metal_mutex_release>:
{
 8110cb8:	b580      	push	{r7, lr}
 8110cba:	b082      	sub	sp, #8
 8110cbc:	af00      	add	r7, sp, #0
 8110cbe:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8110cc0:	6878      	ldr	r0, [r7, #4]
 8110cc2:	f7ff ffd2 	bl	8110c6a <__metal_mutex_release>
}
 8110cc6:	bf00      	nop
 8110cc8:	3708      	adds	r7, #8
 8110cca:	46bd      	mov	sp, r7
 8110ccc:	bd80      	pop	{r7, pc}

08110cce <rpmsg_init_ept>:
{
 8110cce:	b580      	push	{r7, lr}
 8110cd0:	b084      	sub	sp, #16
 8110cd2:	af00      	add	r7, sp, #0
 8110cd4:	60f8      	str	r0, [r7, #12]
 8110cd6:	60b9      	str	r1, [r7, #8]
 8110cd8:	607a      	str	r2, [r7, #4]
 8110cda:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8110cdc:	68fb      	ldr	r3, [r7, #12]
 8110cde:	2220      	movs	r2, #32
 8110ce0:	68b9      	ldr	r1, [r7, #8]
 8110ce2:	4618      	mov	r0, r3
 8110ce4:	f002 f993 	bl	811300e <strncpy>
	ept->addr = src;
 8110ce8:	68fb      	ldr	r3, [r7, #12]
 8110cea:	687a      	ldr	r2, [r7, #4]
 8110cec:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8110cee:	68fb      	ldr	r3, [r7, #12]
 8110cf0:	683a      	ldr	r2, [r7, #0]
 8110cf2:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8110cf4:	68fb      	ldr	r3, [r7, #12]
 8110cf6:	69ba      	ldr	r2, [r7, #24]
 8110cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8110cfa:	68fb      	ldr	r3, [r7, #12]
 8110cfc:	69fa      	ldr	r2, [r7, #28]
 8110cfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8110d00:	bf00      	nop
 8110d02:	3710      	adds	r7, #16
 8110d04:	46bd      	mov	sp, r7
 8110d06:	bd80      	pop	{r7, pc}

08110d08 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8110d08:	b480      	push	{r7}
 8110d0a:	b083      	sub	sp, #12
 8110d0c:	af00      	add	r7, sp, #0
 8110d0e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8110d10:	687b      	ldr	r3, [r7, #4]
 8110d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110d14:	699b      	ldr	r3, [r3, #24]
}
 8110d16:	4618      	mov	r0, r3
 8110d18:	370c      	adds	r7, #12
 8110d1a:	46bd      	mov	sp, r7
 8110d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d20:	4770      	bx	lr

08110d22 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8110d22:	b580      	push	{r7, lr}
 8110d24:	b082      	sub	sp, #8
 8110d26:	af00      	add	r7, sp, #0
 8110d28:	6078      	str	r0, [r7, #4]
 8110d2a:	460b      	mov	r3, r1
 8110d2c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8110d2e:	687b      	ldr	r3, [r7, #4]
 8110d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110d32:	6a1b      	ldr	r3, [r3, #32]
 8110d34:	685b      	ldr	r3, [r3, #4]
 8110d36:	687a      	ldr	r2, [r7, #4]
 8110d38:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8110d3a:	78f9      	ldrb	r1, [r7, #3]
 8110d3c:	4610      	mov	r0, r2
 8110d3e:	4798      	blx	r3
}
 8110d40:	bf00      	nop
 8110d42:	3708      	adds	r7, #8
 8110d44:	46bd      	mov	sp, r7
 8110d46:	bd80      	pop	{r7, pc}

08110d48 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8110d48:	b580      	push	{r7, lr}
 8110d4a:	b082      	sub	sp, #8
 8110d4c:	af00      	add	r7, sp, #0
 8110d4e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8110d50:	687b      	ldr	r3, [r7, #4]
 8110d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110d54:	6a1b      	ldr	r3, [r3, #32]
 8110d56:	681b      	ldr	r3, [r3, #0]
 8110d58:	687a      	ldr	r2, [r7, #4]
 8110d5a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8110d5c:	4610      	mov	r0, r2
 8110d5e:	4798      	blx	r3
 8110d60:	4603      	mov	r3, r0
}
 8110d62:	4618      	mov	r0, r3
 8110d64:	3708      	adds	r7, #8
 8110d66:	46bd      	mov	sp, r7
 8110d68:	bd80      	pop	{r7, pc}

08110d6a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8110d6a:	b580      	push	{r7, lr}
 8110d6c:	b082      	sub	sp, #8
 8110d6e:	af00      	add	r7, sp, #0
 8110d70:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8110d72:	687b      	ldr	r3, [r7, #4]
 8110d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110d76:	6a1b      	ldr	r3, [r3, #32]
 8110d78:	689b      	ldr	r3, [r3, #8]
 8110d7a:	687a      	ldr	r2, [r7, #4]
 8110d7c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8110d7e:	4610      	mov	r0, r2
 8110d80:	4798      	blx	r3
 8110d82:	4603      	mov	r3, r0
}
 8110d84:	4618      	mov	r0, r3
 8110d86:	3708      	adds	r7, #8
 8110d88:	46bd      	mov	sp, r7
 8110d8a:	bd80      	pop	{r7, pc}

08110d8c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8110d8c:	b580      	push	{r7, lr}
 8110d8e:	b086      	sub	sp, #24
 8110d90:	af02      	add	r7, sp, #8
 8110d92:	60f8      	str	r0, [r7, #12]
 8110d94:	60b9      	str	r1, [r7, #8]
 8110d96:	607a      	str	r2, [r7, #4]
 8110d98:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8110d9a:	68fb      	ldr	r3, [r7, #12]
 8110d9c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8110d9e:	68b9      	ldr	r1, [r7, #8]
 8110da0:	69bb      	ldr	r3, [r7, #24]
 8110da2:	9300      	str	r3, [sp, #0]
 8110da4:	683b      	ldr	r3, [r7, #0]
 8110da6:	687a      	ldr	r2, [r7, #4]
 8110da8:	f000 fb4c 	bl	8111444 <virtio_create_virtqueues>
 8110dac:	4603      	mov	r3, r0
					callbacks);
}
 8110dae:	4618      	mov	r0, r3
 8110db0:	3710      	adds	r7, #16
 8110db2:	46bd      	mov	sp, r7
 8110db4:	bd80      	pop	{r7, pc}

08110db6 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8110db6:	b580      	push	{r7, lr}
 8110db8:	b082      	sub	sp, #8
 8110dba:	af00      	add	r7, sp, #0
 8110dbc:	6078      	str	r0, [r7, #4]
 8110dbe:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8110dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8110dc4:	683a      	ldr	r2, [r7, #0]
 8110dc6:	2100      	movs	r1, #0
 8110dc8:	6878      	ldr	r0, [r7, #4]
 8110dca:	f7ff fdad 	bl	8110928 <rpmsg_get_endpoint>
 8110dce:	4603      	mov	r3, r0
}
 8110dd0:	4618      	mov	r0, r3
 8110dd2:	3708      	adds	r7, #8
 8110dd4:	46bd      	mov	sp, r7
 8110dd6:	bd80      	pop	{r7, pc}

08110dd8 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8110dd8:	b480      	push	{r7}
 8110dda:	b085      	sub	sp, #20
 8110ddc:	af00      	add	r7, sp, #0
 8110dde:	60f8      	str	r0, [r7, #12]
 8110de0:	60b9      	str	r1, [r7, #8]
 8110de2:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8110de4:	68fb      	ldr	r3, [r7, #12]
 8110de6:	2b00      	cmp	r3, #0
 8110de8:	d01d      	beq.n	8110e26 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8110dea:	68fb      	ldr	r3, [r7, #12]
 8110dec:	68ba      	ldr	r2, [r7, #8]
 8110dee:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8110df0:	687b      	ldr	r3, [r7, #4]
 8110df2:	f003 0303 	and.w	r3, r3, #3
 8110df6:	2b00      	cmp	r3, #0
 8110df8:	d004      	beq.n	8110e04 <rpmsg_virtio_init_shm_pool+0x2c>
 8110dfa:	687b      	ldr	r3, [r7, #4]
 8110dfc:	f023 0303 	bic.w	r3, r3, #3
 8110e00:	3304      	adds	r3, #4
 8110e02:	e000      	b.n	8110e06 <rpmsg_virtio_init_shm_pool+0x2e>
 8110e04:	687b      	ldr	r3, [r7, #4]
 8110e06:	68fa      	ldr	r2, [r7, #12]
 8110e08:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8110e0a:	687b      	ldr	r3, [r7, #4]
 8110e0c:	f003 0303 	and.w	r3, r3, #3
 8110e10:	2b00      	cmp	r3, #0
 8110e12:	d004      	beq.n	8110e1e <rpmsg_virtio_init_shm_pool+0x46>
 8110e14:	687b      	ldr	r3, [r7, #4]
 8110e16:	f023 0303 	bic.w	r3, r3, #3
 8110e1a:	3304      	adds	r3, #4
 8110e1c:	e000      	b.n	8110e20 <rpmsg_virtio_init_shm_pool+0x48>
 8110e1e:	687b      	ldr	r3, [r7, #4]
 8110e20:	68fa      	ldr	r2, [r7, #12]
 8110e22:	6053      	str	r3, [r2, #4]
 8110e24:	e000      	b.n	8110e28 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8110e26:	bf00      	nop
}
 8110e28:	3714      	adds	r7, #20
 8110e2a:	46bd      	mov	sp, r7
 8110e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e30:	4770      	bx	lr

08110e32 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8110e32:	b580      	push	{r7, lr}
 8110e34:	b086      	sub	sp, #24
 8110e36:	af00      	add	r7, sp, #0
 8110e38:	60f8      	str	r0, [r7, #12]
 8110e3a:	60b9      	str	r1, [r7, #8]
 8110e3c:	607a      	str	r2, [r7, #4]
 8110e3e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110e40:	68f8      	ldr	r0, [r7, #12]
 8110e42:	f7ff ff61 	bl	8110d08 <rpmsg_virtio_get_role>
 8110e46:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110e48:	697b      	ldr	r3, [r7, #20]
 8110e4a:	2b01      	cmp	r3, #1
 8110e4c:	d106      	bne.n	8110e5c <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8110e4e:	68fb      	ldr	r3, [r7, #12]
 8110e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110e52:	8879      	ldrh	r1, [r7, #2]
 8110e54:	687a      	ldr	r2, [r7, #4]
 8110e56:	4618      	mov	r0, r3
 8110e58:	f000 fc9e 	bl	8111798 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8110e5c:	bf00      	nop
 8110e5e:	3718      	adds	r7, #24
 8110e60:	46bd      	mov	sp, r7
 8110e62:	bd80      	pop	{r7, pc}

08110e64 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8110e64:	b580      	push	{r7, lr}
 8110e66:	b086      	sub	sp, #24
 8110e68:	af00      	add	r7, sp, #0
 8110e6a:	60f8      	str	r0, [r7, #12]
 8110e6c:	60b9      	str	r1, [r7, #8]
 8110e6e:	607a      	str	r2, [r7, #4]
 8110e70:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110e72:	68f8      	ldr	r0, [r7, #12]
 8110e74:	f7ff ff48 	bl	8110d08 <rpmsg_virtio_get_role>
 8110e78:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110e7a:	697b      	ldr	r3, [r7, #20]
 8110e7c:	2b01      	cmp	r3, #1
 8110e7e:	d108      	bne.n	8110e92 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8110e80:	68fb      	ldr	r3, [r7, #12]
 8110e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110e84:	8879      	ldrh	r1, [r7, #2]
 8110e86:	687a      	ldr	r2, [r7, #4]
 8110e88:	4618      	mov	r0, r3
 8110e8a:	f000 fc85 	bl	8111798 <virtqueue_add_consumed_buffer>
 8110e8e:	4603      	mov	r3, r0
 8110e90:	e000      	b.n	8110e94 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8110e92:	2300      	movs	r3, #0
}
 8110e94:	4618      	mov	r0, r3
 8110e96:	3718      	adds	r7, #24
 8110e98:	46bd      	mov	sp, r7
 8110e9a:	bd80      	pop	{r7, pc}

08110e9c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8110e9c:	b580      	push	{r7, lr}
 8110e9e:	b086      	sub	sp, #24
 8110ea0:	af00      	add	r7, sp, #0
 8110ea2:	60f8      	str	r0, [r7, #12]
 8110ea4:	60b9      	str	r1, [r7, #8]
 8110ea6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110ea8:	68f8      	ldr	r0, [r7, #12]
 8110eaa:	f7ff ff2d 	bl	8110d08 <rpmsg_virtio_get_role>
 8110eae:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8110eb0:	2300      	movs	r3, #0
 8110eb2:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110eb4:	693b      	ldr	r3, [r7, #16]
 8110eb6:	2b01      	cmp	r3, #1
 8110eb8:	d107      	bne.n	8110eca <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8110eba:	68fb      	ldr	r3, [r7, #12]
 8110ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110ebe:	68ba      	ldr	r2, [r7, #8]
 8110ec0:	6879      	ldr	r1, [r7, #4]
 8110ec2:	4618      	mov	r0, r3
 8110ec4:	f000 fc22 	bl	811170c <virtqueue_get_available_buffer>
 8110ec8:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8110eca:	697b      	ldr	r3, [r7, #20]
}
 8110ecc:	4618      	mov	r0, r3
 8110ece:	3718      	adds	r7, #24
 8110ed0:	46bd      	mov	sp, r7
 8110ed2:	bd80      	pop	{r7, pc}

08110ed4 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8110ed4:	b580      	push	{r7, lr}
 8110ed6:	b086      	sub	sp, #24
 8110ed8:	af00      	add	r7, sp, #0
 8110eda:	60f8      	str	r0, [r7, #12]
 8110edc:	60b9      	str	r1, [r7, #8]
 8110ede:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110ee0:	68f8      	ldr	r0, [r7, #12]
 8110ee2:	f7ff ff11 	bl	8110d08 <rpmsg_virtio_get_role>
 8110ee6:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8110ee8:	2300      	movs	r3, #0
 8110eea:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110eec:	693b      	ldr	r3, [r7, #16]
 8110eee:	2b01      	cmp	r3, #1
 8110ef0:	d107      	bne.n	8110f02 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8110ef2:	68fb      	ldr	r3, [r7, #12]
 8110ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110ef6:	68ba      	ldr	r2, [r7, #8]
 8110ef8:	6879      	ldr	r1, [r7, #4]
 8110efa:	4618      	mov	r0, r3
 8110efc:	f000 fc06 	bl	811170c <virtqueue_get_available_buffer>
 8110f00:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8110f02:	697b      	ldr	r3, [r7, #20]
 8110f04:	2b00      	cmp	r3, #0
 8110f06:	d005      	beq.n	8110f14 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8110f08:	68bb      	ldr	r3, [r7, #8]
 8110f0a:	681b      	ldr	r3, [r3, #0]
 8110f0c:	4619      	mov	r1, r3
 8110f0e:	6978      	ldr	r0, [r7, #20]
 8110f10:	f7ff fe2b 	bl	8110b6a <metal_cache_invalidate>
	}

	return data;
 8110f14:	697b      	ldr	r3, [r7, #20]
}
 8110f16:	4618      	mov	r0, r3
 8110f18:	3718      	adds	r7, #24
 8110f1a:	46bd      	mov	sp, r7
 8110f1c:	bd80      	pop	{r7, pc}

08110f1e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8110f1e:	b580      	push	{r7, lr}
 8110f20:	b084      	sub	sp, #16
 8110f22:	af00      	add	r7, sp, #0
 8110f24:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8110f26:	6878      	ldr	r0, [r7, #4]
 8110f28:	f7ff ff0e 	bl	8110d48 <rpmsg_virtio_get_status>
 8110f2c:	4603      	mov	r3, r0
 8110f2e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8110f30:	7bfb      	ldrb	r3, [r7, #15]
 8110f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8110f36:	2b00      	cmp	r3, #0
 8110f38:	d004      	beq.n	8110f44 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8110f3a:	2100      	movs	r1, #0
 8110f3c:	6878      	ldr	r0, [r7, #4]
 8110f3e:	f7ff fef0 	bl	8110d22 <rpmsg_virtio_set_status>
 8110f42:	e7f0      	b.n	8110f26 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8110f44:	7bfb      	ldrb	r3, [r7, #15]
 8110f46:	f003 0304 	and.w	r3, r3, #4
 8110f4a:	2b00      	cmp	r3, #0
 8110f4c:	d0eb      	beq.n	8110f26 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8110f4e:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8110f50:	4618      	mov	r0, r3
 8110f52:	3710      	adds	r7, #16
 8110f54:	46bd      	mov	sp, r7
 8110f56:	bd80      	pop	{r7, pc}

08110f58 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8110f58:	b580      	push	{r7, lr}
 8110f5a:	b084      	sub	sp, #16
 8110f5c:	af00      	add	r7, sp, #0
 8110f5e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8110f60:	6878      	ldr	r0, [r7, #4]
 8110f62:	f7ff fed1 	bl	8110d08 <rpmsg_virtio_get_role>
 8110f66:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8110f68:	2300      	movs	r3, #0
 8110f6a:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8110f6c:	68bb      	ldr	r3, [r7, #8]
 8110f6e:	2b01      	cmp	r3, #1
 8110f70:	d107      	bne.n	8110f82 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8110f72:	687b      	ldr	r3, [r7, #4]
 8110f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110f76:	4618      	mov	r0, r3
 8110f78:	f000 fc88 	bl	811188c <virtqueue_get_desc_size>
 8110f7c:	4603      	mov	r3, r0
 8110f7e:	3b10      	subs	r3, #16
		length =
 8110f80:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8110f82:	68fb      	ldr	r3, [r7, #12]
}
 8110f84:	4618      	mov	r0, r3
 8110f86:	3710      	adds	r7, #16
 8110f88:	46bd      	mov	sp, r7
 8110f8a:	bd80      	pop	{r7, pc}

08110f8c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8110f8c:	b580      	push	{r7, lr}
 8110f8e:	b090      	sub	sp, #64	@ 0x40
 8110f90:	af00      	add	r7, sp, #0
 8110f92:	60f8      	str	r0, [r7, #12]
 8110f94:	60b9      	str	r1, [r7, #8]
 8110f96:	607a      	str	r2, [r7, #4]
 8110f98:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8110f9a:	2300      	movs	r3, #0
 8110f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8110f9e:	2300      	movs	r3, #0
 8110fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8110fa2:	68fb      	ldr	r3, [r7, #12]
 8110fa4:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8110fa6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110fa8:	f7ff fece 	bl	8110d48 <rpmsg_virtio_get_status>
 8110fac:	4603      	mov	r3, r0
 8110fae:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8110fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110fb2:	f003 0304 	and.w	r3, r3, #4
 8110fb6:	2b00      	cmp	r3, #0
 8110fb8:	d101      	bne.n	8110fbe <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8110fba:	4b46      	ldr	r3, [pc, #280]	@ (81110d4 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8110fbc:	e086      	b.n	81110cc <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8110fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110fc0:	2b00      	cmp	r3, #0
 8110fc2:	d003      	beq.n	8110fcc <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8110fc4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8110fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110fca:	e001      	b.n	8110fd0 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8110fcc:	2300      	movs	r3, #0
 8110fce:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8110fd0:	68fb      	ldr	r3, [r7, #12]
 8110fd2:	3358      	adds	r3, #88	@ 0x58
 8110fd4:	4618      	mov	r0, r3
 8110fd6:	f7ff fe64 	bl	8110ca2 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8110fda:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110fdc:	f7ff ffbc 	bl	8110f58 <_rpmsg_virtio_get_buffer_size>
 8110fe0:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8110fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8110fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110fe6:	429a      	cmp	r2, r3
 8110fe8:	dc08      	bgt.n	8110ffc <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8110fea:	f107 0216 	add.w	r2, r7, #22
 8110fee:	f107 0310 	add.w	r3, r7, #16
 8110ff2:	4619      	mov	r1, r3
 8110ff4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8110ff6:	f7ff ff51 	bl	8110e9c <rpmsg_virtio_get_tx_buffer>
 8110ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8110ffc:	68fb      	ldr	r3, [r7, #12]
 8110ffe:	3358      	adds	r3, #88	@ 0x58
 8111000:	4618      	mov	r0, r3
 8111002:	f7ff fe59 	bl	8110cb8 <metal_mutex_release>
		if (buffer || !tick_count)
 8111006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111008:	2b00      	cmp	r3, #0
 811100a:	d10e      	bne.n	811102a <rpmsg_virtio_send_offchannel_raw+0x9e>
 811100c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811100e:	2b00      	cmp	r3, #0
 8111010:	d00b      	beq.n	811102a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8111012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111014:	2b00      	cmp	r3, #0
 8111016:	d001      	beq.n	811101c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8111018:	4b2f      	ldr	r3, [pc, #188]	@ (81110d8 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 811101a:	e057      	b.n	81110cc <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 811101c:	200a      	movs	r0, #10
 811101e:	f7ff fdbc 	bl	8110b9a <metal_sleep_usec>
		tick_count--;
 8111022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111024:	3b01      	subs	r3, #1
 8111026:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8111028:	e7d2      	b.n	8110fd0 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 811102a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811102c:	2b00      	cmp	r3, #0
 811102e:	d101      	bne.n	8111034 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8111030:	4b2a      	ldr	r3, [pc, #168]	@ (81110dc <rpmsg_virtio_send_offchannel_raw+0x150>)
 8111032:	e04b      	b.n	81110cc <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8111034:	687b      	ldr	r3, [r7, #4]
 8111036:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8111038:	68bb      	ldr	r3, [r7, #8]
 811103a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 811103c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811103e:	b29b      	uxth	r3, r3
 8111040:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8111042:	2300      	movs	r3, #0
 8111044:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8111046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811104a:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 811104c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811104e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111050:	f7ff fdc0 	bl	8110bd4 <metal_io_virt_to_offset>
 8111054:	4601      	mov	r1, r0
 8111056:	f107 0218 	add.w	r2, r7, #24
 811105a:	2310      	movs	r3, #16
 811105c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811105e:	f7fe ff56 	bl	810ff0e <metal_io_block_write>
 8111062:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8111064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111066:	2b10      	cmp	r3, #16
 8111068:	d001      	beq.n	811106e <rpmsg_virtio_send_offchannel_raw+0xe2>
 811106a:	bf00      	nop
 811106c:	e7fd      	b.n	811106a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 811106e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111070:	3310      	adds	r3, #16
 8111072:	4619      	mov	r1, r3
 8111074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111076:	f7ff fdad 	bl	8110bd4 <metal_io_virt_to_offset>
 811107a:	4601      	mov	r1, r0
 811107c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811107e:	683a      	ldr	r2, [r7, #0]
 8111080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111082:	f7fe ff44 	bl	810ff0e <metal_io_block_write>
 8111086:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8111088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811108a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811108c:	429a      	cmp	r2, r3
 811108e:	d001      	beq.n	8111094 <rpmsg_virtio_send_offchannel_raw+0x108>
 8111090:	bf00      	nop
 8111092:	e7fd      	b.n	8111090 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8111094:	68fb      	ldr	r3, [r7, #12]
 8111096:	3358      	adds	r3, #88	@ 0x58
 8111098:	4618      	mov	r0, r3
 811109a:	f7ff fe02 	bl	8110ca2 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 811109e:	693a      	ldr	r2, [r7, #16]
 81110a0:	8afb      	ldrh	r3, [r7, #22]
 81110a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81110a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81110a6:	f7ff fedd 	bl	8110e64 <rpmsg_virtio_enqueue_buffer>
 81110aa:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 81110ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81110ae:	2b00      	cmp	r3, #0
 81110b0:	d001      	beq.n	81110b6 <rpmsg_virtio_send_offchannel_raw+0x12a>
 81110b2:	bf00      	nop
 81110b4:	e7fd      	b.n	81110b2 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 81110b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81110b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81110ba:	4618      	mov	r0, r3
 81110bc:	f000 fbd0 	bl	8111860 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81110c0:	68fb      	ldr	r3, [r7, #12]
 81110c2:	3358      	adds	r3, #88	@ 0x58
 81110c4:	4618      	mov	r0, r3
 81110c6:	f7ff fdf7 	bl	8110cb8 <metal_mutex_release>

	return size;
 81110ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 81110cc:	4618      	mov	r0, r3
 81110ce:	3740      	adds	r7, #64	@ 0x40
 81110d0:	46bd      	mov	sp, r7
 81110d2:	bd80      	pop	{r7, pc}
 81110d4:	fffff82c 	.word	0xfffff82c
 81110d8:	fffff82b 	.word	0xfffff82b
 81110dc:	fffff82e 	.word	0xfffff82e

081110e0 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81110e0:	b480      	push	{r7}
 81110e2:	b083      	sub	sp, #12
 81110e4:	af00      	add	r7, sp, #0
 81110e6:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81110e8:	bf00      	nop
 81110ea:	370c      	adds	r7, #12
 81110ec:	46bd      	mov	sp, r7
 81110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81110f2:	4770      	bx	lr

081110f4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81110f4:	b590      	push	{r4, r7, lr}
 81110f6:	b08d      	sub	sp, #52	@ 0x34
 81110f8:	af02      	add	r7, sp, #8
 81110fa:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81110fc:	687b      	ldr	r3, [r7, #4]
 81110fe:	681b      	ldr	r3, [r3, #0]
 8111100:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8111102:	6a3b      	ldr	r3, [r7, #32]
 8111104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111106:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8111108:	69fb      	ldr	r3, [r7, #28]
 811110a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 811110c:	69bb      	ldr	r3, [r7, #24]
 811110e:	3358      	adds	r3, #88	@ 0x58
 8111110:	4618      	mov	r0, r3
 8111112:	f7ff fdc6 	bl	8110ca2 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8111116:	f107 020a 	add.w	r2, r7, #10
 811111a:	f107 030c 	add.w	r3, r7, #12
 811111e:	4619      	mov	r1, r3
 8111120:	69f8      	ldr	r0, [r7, #28]
 8111122:	f7ff fed7 	bl	8110ed4 <rpmsg_virtio_get_rx_buffer>
 8111126:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8111128:	69bb      	ldr	r3, [r7, #24]
 811112a:	3358      	adds	r3, #88	@ 0x58
 811112c:	4618      	mov	r0, r3
 811112e:	f7ff fdc3 	bl	8110cb8 <metal_mutex_release>

	while (rp_hdr) {
 8111132:	e04d      	b.n	81111d0 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8111134:	69bb      	ldr	r3, [r7, #24]
 8111136:	3358      	adds	r3, #88	@ 0x58
 8111138:	4618      	mov	r0, r3
 811113a:	f7ff fdb2 	bl	8110ca2 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 811113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111140:	685b      	ldr	r3, [r3, #4]
 8111142:	4619      	mov	r1, r3
 8111144:	69b8      	ldr	r0, [r7, #24]
 8111146:	f7ff fe36 	bl	8110db6 <rpmsg_get_ept_from_addr>
 811114a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 811114c:	69bb      	ldr	r3, [r7, #24]
 811114e:	3358      	adds	r3, #88	@ 0x58
 8111150:	4618      	mov	r0, r3
 8111152:	f7ff fdb1 	bl	8110cb8 <metal_mutex_release>

		if (!ept)
 8111156:	697b      	ldr	r3, [r7, #20]
 8111158:	2b00      	cmp	r3, #0
 811115a:	d03d      	beq.n	81111d8 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 811115c:	697b      	ldr	r3, [r7, #20]
 811115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111164:	d103      	bne.n	811116e <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8111166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111168:	681a      	ldr	r2, [r3, #0]
 811116a:	697b      	ldr	r3, [r7, #20]
 811116c:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 811116e:	697b      	ldr	r3, [r7, #20]
 8111170:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8111172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111174:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8111178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811117a:	899b      	ldrh	r3, [r3, #12]
 811117c:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 811117e:	4618      	mov	r0, r3
 8111180:	697b      	ldr	r3, [r7, #20]
 8111182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111184:	697b      	ldr	r3, [r7, #20]
 8111186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111188:	9300      	str	r3, [sp, #0]
 811118a:	4613      	mov	r3, r2
 811118c:	4602      	mov	r2, r0
 811118e:	6978      	ldr	r0, [r7, #20]
 8111190:	47a0      	blx	r4
 8111192:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8111194:	693b      	ldr	r3, [r7, #16]
 8111196:	2b00      	cmp	r3, #0
 8111198:	d001      	beq.n	811119e <rpmsg_virtio_rx_callback+0xaa>
 811119a:	bf00      	nop
 811119c:	e7fd      	b.n	811119a <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 811119e:	69bb      	ldr	r3, [r7, #24]
 81111a0:	3358      	adds	r3, #88	@ 0x58
 81111a2:	4618      	mov	r0, r3
 81111a4:	f7ff fd7d 	bl	8110ca2 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 81111a8:	68fa      	ldr	r2, [r7, #12]
 81111aa:	897b      	ldrh	r3, [r7, #10]
 81111ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81111ae:	69f8      	ldr	r0, [r7, #28]
 81111b0:	f7ff fe3f 	bl	8110e32 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 81111b4:	f107 020a 	add.w	r2, r7, #10
 81111b8:	f107 030c 	add.w	r3, r7, #12
 81111bc:	4619      	mov	r1, r3
 81111be:	69f8      	ldr	r0, [r7, #28]
 81111c0:	f7ff fe88 	bl	8110ed4 <rpmsg_virtio_get_rx_buffer>
 81111c4:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 81111c6:	69bb      	ldr	r3, [r7, #24]
 81111c8:	3358      	adds	r3, #88	@ 0x58
 81111ca:	4618      	mov	r0, r3
 81111cc:	f7ff fd74 	bl	8110cb8 <metal_mutex_release>
	while (rp_hdr) {
 81111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81111d2:	2b00      	cmp	r3, #0
 81111d4:	d1ae      	bne.n	8111134 <rpmsg_virtio_rx_callback+0x40>
 81111d6:	e000      	b.n	81111da <rpmsg_virtio_rx_callback+0xe6>
			return;
 81111d8:	bf00      	nop
	}
}
 81111da:	372c      	adds	r7, #44	@ 0x2c
 81111dc:	46bd      	mov	sp, r7
 81111de:	bd90      	pop	{r4, r7, pc}

081111e0 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81111e0:	b580      	push	{r7, lr}
 81111e2:	b092      	sub	sp, #72	@ 0x48
 81111e4:	af00      	add	r7, sp, #0
 81111e6:	60f8      	str	r0, [r7, #12]
 81111e8:	60b9      	str	r1, [r7, #8]
 81111ea:	607a      	str	r2, [r7, #4]
 81111ec:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81111ee:	68fb      	ldr	r3, [r7, #12]
 81111f0:	6a1b      	ldr	r3, [r3, #32]
 81111f2:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81111f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81111f6:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81111f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81111fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81111fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81111fe:	68bb      	ldr	r3, [r7, #8]
 8111200:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 8111202:	687b      	ldr	r3, [r7, #4]
 8111204:	2b28      	cmp	r3, #40	@ 0x28
 8111206:	d001      	beq.n	811120c <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8111208:	2300      	movs	r3, #0
 811120a:	e057      	b.n	81112bc <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 811120c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 811120e:	4619      	mov	r1, r3
 8111210:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8111212:	f7ff fcdf 	bl	8110bd4 <metal_io_virt_to_offset>
 8111216:	4601      	mov	r1, r0
 8111218:	f107 0210 	add.w	r2, r7, #16
 811121c:	2320      	movs	r3, #32
 811121e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8111220:	f7fe fdfe 	bl	810fe20 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8111224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111226:	6a1b      	ldr	r3, [r3, #32]
 8111228:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 811122a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811122c:	3358      	adds	r3, #88	@ 0x58
 811122e:	4618      	mov	r0, r3
 8111230:	f7ff fd37 	bl	8110ca2 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8111234:	f107 0110 	add.w	r1, r7, #16
 8111238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811123a:	f04f 32ff 	mov.w	r2, #4294967295
 811123e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8111240:	f7ff fb72 	bl	8110928 <rpmsg_get_endpoint>
 8111244:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8111246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811124a:	f003 0301 	and.w	r3, r3, #1
 811124e:	2b00      	cmp	r3, #0
 8111250:	d017      	beq.n	8111282 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8111252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111254:	2b00      	cmp	r3, #0
 8111256:	d003      	beq.n	8111260 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8111258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811125a:	f04f 32ff 	mov.w	r2, #4294967295
 811125e:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8111260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111262:	3358      	adds	r3, #88	@ 0x58
 8111264:	4618      	mov	r0, r3
 8111266:	f7ff fd27 	bl	8110cb8 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 811126a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811126c:	2b00      	cmp	r3, #0
 811126e:	d024      	beq.n	81112ba <rpmsg_virtio_ns_callback+0xda>
 8111270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111274:	2b00      	cmp	r3, #0
 8111276:	d020      	beq.n	81112ba <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8111278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 811127c:	68f8      	ldr	r0, [r7, #12]
 811127e:	4798      	blx	r3
 8111280:	e01b      	b.n	81112ba <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8111282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111284:	2b00      	cmp	r3, #0
 8111286:	d110      	bne.n	81112aa <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8111288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811128a:	3358      	adds	r3, #88	@ 0x58
 811128c:	4618      	mov	r0, r3
 811128e:	f7ff fd13 	bl	8110cb8 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8111292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8111296:	2b00      	cmp	r3, #0
 8111298:	d00f      	beq.n	81112ba <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 811129a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811129c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811129e:	f107 0110 	add.w	r1, r7, #16
 81112a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81112a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 81112a6:	4798      	blx	r3
 81112a8:	e007      	b.n	81112ba <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 81112aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81112ae:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 81112b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81112b2:	3358      	adds	r3, #88	@ 0x58
 81112b4:	4618      	mov	r0, r3
 81112b6:	f7ff fcff 	bl	8110cb8 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 81112ba:	2300      	movs	r3, #0
}
 81112bc:	4618      	mov	r0, r3
 81112be:	3748      	adds	r7, #72	@ 0x48
 81112c0:	46bd      	mov	sp, r7
 81112c2:	bd80      	pop	{r7, pc}

081112c4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81112c4:	b580      	push	{r7, lr}
 81112c6:	b090      	sub	sp, #64	@ 0x40
 81112c8:	af02      	add	r7, sp, #8
 81112ca:	60f8      	str	r0, [r7, #12]
 81112cc:	60b9      	str	r1, [r7, #8]
 81112ce:	607a      	str	r2, [r7, #4]
 81112d0:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81112d2:	68fb      	ldr	r3, [r7, #12]
 81112d4:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 81112d6:	2264      	movs	r2, #100	@ 0x64
 81112d8:	2100      	movs	r1, #0
 81112da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81112dc:	f001 fe7d 	bl	8112fda <memset>
	metal_mutex_init(&rdev->lock);
 81112e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112e2:	3358      	adds	r3, #88	@ 0x58
 81112e4:	4618      	mov	r0, r3
 81112e6:	f7ff fcd1 	bl	8110c8c <metal_mutex_init>
	rvdev->vdev = vdev;
 81112ea:	68fb      	ldr	r3, [r7, #12]
 81112ec:	68ba      	ldr	r2, [r7, #8]
 81112ee:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81112f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112f2:	687a      	ldr	r2, [r7, #4]
 81112f4:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 81112f6:	68bb      	ldr	r3, [r7, #8]
 81112f8:	68fa      	ldr	r2, [r7, #12]
 81112fa:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81112fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112fe:	4a38      	ldr	r2, [pc, #224]	@ (81113e0 <rpmsg_init_vdev+0x11c>)
 8111300:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8111302:	68f8      	ldr	r0, [r7, #12]
 8111304:	f7ff fd00 	bl	8110d08 <rpmsg_virtio_get_role>
 8111308:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 811130a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811130c:	2b01      	cmp	r3, #1
 811130e:	d112      	bne.n	8111336 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8111310:	4b34      	ldr	r3, [pc, #208]	@ (81113e4 <rpmsg_init_vdev+0x120>)
 8111312:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8111314:	4b34      	ldr	r3, [pc, #208]	@ (81113e8 <rpmsg_init_vdev+0x124>)
 8111316:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8111318:	4b34      	ldr	r3, [pc, #208]	@ (81113ec <rpmsg_init_vdev+0x128>)
 811131a:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 811131c:	4b34      	ldr	r3, [pc, #208]	@ (81113f0 <rpmsg_init_vdev+0x12c>)
 811131e:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8111320:	68bb      	ldr	r3, [r7, #8]
 8111322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111324:	3318      	adds	r3, #24
 8111326:	681a      	ldr	r2, [r3, #0]
 8111328:	68fb      	ldr	r3, [r7, #12]
 811132a:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 811132c:	68bb      	ldr	r3, [r7, #8]
 811132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111330:	681a      	ldr	r2, [r3, #0]
 8111332:	68fb      	ldr	r3, [r7, #12]
 8111334:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8111336:	68fb      	ldr	r3, [r7, #12]
 8111338:	683a      	ldr	r2, [r7, #0]
 811133a:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 811133c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811133e:	2b01      	cmp	r3, #1
 8111340:	d102      	bne.n	8111348 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8111342:	68f8      	ldr	r0, [r7, #12]
 8111344:	f7ff fdeb 	bl	8110f1e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8111348:	f107 0218 	add.w	r2, r7, #24
 811134c:	f107 0310 	add.w	r3, r7, #16
 8111350:	9300      	str	r3, [sp, #0]
 8111352:	4613      	mov	r3, r2
 8111354:	2202      	movs	r2, #2
 8111356:	2100      	movs	r1, #0
 8111358:	68f8      	ldr	r0, [r7, #12]
 811135a:	f7ff fd17 	bl	8110d8c <rpmsg_virtio_create_virtqueues>
 811135e:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8111360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111362:	2b00      	cmp	r3, #0
 8111364:	d001      	beq.n	811136a <rpmsg_init_vdev+0xa6>
		return status;
 8111366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111368:	e035      	b.n	81113d6 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 811136a:	2300      	movs	r3, #0
 811136c:	637b      	str	r3, [r7, #52]	@ 0x34
 811136e:	e00f      	b.n	8111390 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8111370:	68bb      	ldr	r3, [r7, #8]
 8111372:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8111374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8111376:	4613      	mov	r3, r2
 8111378:	005b      	lsls	r3, r3, #1
 811137a:	4413      	add	r3, r2
 811137c:	00db      	lsls	r3, r3, #3
 811137e:	440b      	add	r3, r1
 8111380:	681b      	ldr	r3, [r3, #0]
 8111382:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8111384:	6a3b      	ldr	r3, [r7, #32]
 8111386:	683a      	ldr	r2, [r7, #0]
 8111388:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 811138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811138c:	3301      	adds	r3, #1
 811138e:	637b      	str	r3, [r7, #52]	@ 0x34
 8111390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111392:	2b01      	cmp	r3, #1
 8111394:	d9ec      	bls.n	8111370 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8111396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111398:	4618      	mov	r0, r3
 811139a:	f7ff fc0a 	bl	8110bb2 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 811139e:	68f8      	ldr	r0, [r7, #12]
 81113a0:	f7ff fce3 	bl	8110d6a <rpmsg_virtio_get_features>
 81113a4:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 81113a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81113a8:	f003 0301 	and.w	r3, r3, #1
 81113ac:	2b00      	cmp	r3, #0
 81113ae:	d011      	beq.n	81113d4 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 81113b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113b2:	f103 0008 	add.w	r0, r3, #8
 81113b6:	2300      	movs	r3, #0
 81113b8:	9301      	str	r3, [sp, #4]
 81113ba:	4b0e      	ldr	r3, [pc, #56]	@ (81113f4 <rpmsg_init_vdev+0x130>)
 81113bc:	9300      	str	r3, [sp, #0]
 81113be:	2335      	movs	r3, #53	@ 0x35
 81113c0:	2235      	movs	r2, #53	@ 0x35
 81113c2:	490d      	ldr	r1, [pc, #52]	@ (81113f8 <rpmsg_init_vdev+0x134>)
 81113c4:	f7ff fc83 	bl	8110cce <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81113c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113ca:	3308      	adds	r3, #8
 81113cc:	4619      	mov	r1, r3
 81113ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81113d0:	f7ff fb2c 	bl	8110a2c <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81113d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 81113d6:	4618      	mov	r0, r3
 81113d8:	3738      	adds	r7, #56	@ 0x38
 81113da:	46bd      	mov	sp, r7
 81113dc:	bd80      	pop	{r7, pc}
 81113de:	bf00      	nop
 81113e0:	08110f8d 	.word	0x08110f8d
 81113e4:	081176cc 	.word	0x081176cc
 81113e8:	081176d4 	.word	0x081176d4
 81113ec:	081110e1 	.word	0x081110e1
 81113f0:	081110f5 	.word	0x081110f5
 81113f4:	081111e1 	.word	0x081111e1
 81113f8:	081176dc 	.word	0x081176dc

081113fc <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 81113fc:	b480      	push	{r7}
 81113fe:	b083      	sub	sp, #12
 8111400:	af00      	add	r7, sp, #0
 8111402:	6078      	str	r0, [r7, #4]
 8111404:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8111406:	bf00      	nop
 8111408:	370c      	adds	r7, #12
 811140a:	46bd      	mov	sp, r7
 811140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111410:	4770      	bx	lr

08111412 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8111412:	b480      	push	{r7}
 8111414:	b083      	sub	sp, #12
 8111416:	af00      	add	r7, sp, #0
 8111418:	6078      	str	r0, [r7, #4]
 811141a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 811141c:	bf00      	nop
 811141e:	370c      	adds	r7, #12
 8111420:	46bd      	mov	sp, r7
 8111422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111426:	4770      	bx	lr

08111428 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8111428:	b480      	push	{r7}
 811142a:	b085      	sub	sp, #20
 811142c:	af00      	add	r7, sp, #0
 811142e:	60f8      	str	r0, [r7, #12]
 8111430:	60b9      	str	r1, [r7, #8]
 8111432:	607a      	str	r2, [r7, #4]
 8111434:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8111436:	68fb      	ldr	r3, [r7, #12]
}
 8111438:	4618      	mov	r0, r3
 811143a:	3714      	adds	r7, #20
 811143c:	46bd      	mov	sp, r7
 811143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111442:	4770      	bx	lr

08111444 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8111444:	b590      	push	{r4, r7, lr}
 8111446:	b08f      	sub	sp, #60	@ 0x3c
 8111448:	af04      	add	r7, sp, #16
 811144a:	60f8      	str	r0, [r7, #12]
 811144c:	60b9      	str	r1, [r7, #8]
 811144e:	607a      	str	r2, [r7, #4]
 8111450:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8111452:	68fb      	ldr	r3, [r7, #12]
 8111454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111456:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8111458:	687a      	ldr	r2, [r7, #4]
 811145a:	6a3b      	ldr	r3, [r7, #32]
 811145c:	429a      	cmp	r2, r3
 811145e:	d902      	bls.n	8111466 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8111460:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8111464:	e036      	b.n	81114d4 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8111466:	2300      	movs	r3, #0
 8111468:	627b      	str	r3, [r7, #36]	@ 0x24
 811146a:	e02e      	b.n	81114ca <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 811146c:	68fb      	ldr	r3, [r7, #12]
 811146e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8111470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111472:	4613      	mov	r3, r2
 8111474:	005b      	lsls	r3, r3, #1
 8111476:	4413      	add	r3, r2
 8111478:	00db      	lsls	r3, r3, #3
 811147a:	440b      	add	r3, r1
 811147c:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 811147e:	69fb      	ldr	r3, [r7, #28]
 8111480:	3304      	adds	r3, #4
 8111482:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8111484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111486:	b298      	uxth	r0, r3
 8111488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811148a:	009b      	lsls	r3, r3, #2
 811148c:	683a      	ldr	r2, [r7, #0]
 811148e:	4413      	add	r3, r2
 8111490:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8111492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111494:	009b      	lsls	r3, r3, #2
 8111496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8111498:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 811149a:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 811149c:	68fa      	ldr	r2, [r7, #12]
 811149e:	6a12      	ldr	r2, [r2, #32]
 81114a0:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81114a2:	69f9      	ldr	r1, [r7, #28]
 81114a4:	6809      	ldr	r1, [r1, #0]
 81114a6:	9102      	str	r1, [sp, #8]
 81114a8:	9201      	str	r2, [sp, #4]
 81114aa:	9300      	str	r3, [sp, #0]
 81114ac:	69bb      	ldr	r3, [r7, #24]
 81114ae:	4622      	mov	r2, r4
 81114b0:	4601      	mov	r1, r0
 81114b2:	68f8      	ldr	r0, [r7, #12]
 81114b4:	f000 f8f6 	bl	81116a4 <virtqueue_create>
 81114b8:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 81114ba:	697b      	ldr	r3, [r7, #20]
 81114bc:	2b00      	cmp	r3, #0
 81114be:	d001      	beq.n	81114c4 <virtio_create_virtqueues+0x80>
			return ret;
 81114c0:	697b      	ldr	r3, [r7, #20]
 81114c2:	e007      	b.n	81114d4 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 81114c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81114c6:	3301      	adds	r3, #1
 81114c8:	627b      	str	r3, [r7, #36]	@ 0x24
 81114ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81114cc:	687b      	ldr	r3, [r7, #4]
 81114ce:	429a      	cmp	r2, r3
 81114d0:	d3cc      	bcc.n	811146c <virtio_create_virtqueues+0x28>
	}
	return 0;
 81114d2:	2300      	movs	r3, #0
}
 81114d4:	4618      	mov	r0, r3
 81114d6:	372c      	adds	r7, #44	@ 0x2c
 81114d8:	46bd      	mov	sp, r7
 81114da:	bd90      	pop	{r4, r7, pc}

081114dc <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 81114dc:	b480      	push	{r7}
 81114de:	b085      	sub	sp, #20
 81114e0:	af00      	add	r7, sp, #0
 81114e2:	60f8      	str	r0, [r7, #12]
 81114e4:	60b9      	str	r1, [r7, #8]
 81114e6:	607a      	str	r2, [r7, #4]
 81114e8:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81114ea:	68fb      	ldr	r3, [r7, #12]
 81114ec:	68ba      	ldr	r2, [r7, #8]
 81114ee:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 81114f0:	68fb      	ldr	r3, [r7, #12]
 81114f2:	687a      	ldr	r2, [r7, #4]
 81114f4:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 81114f6:	68bb      	ldr	r3, [r7, #8]
 81114f8:	011b      	lsls	r3, r3, #4
 81114fa:	687a      	ldr	r2, [r7, #4]
 81114fc:	441a      	add	r2, r3
 81114fe:	68fb      	ldr	r3, [r7, #12]
 8111500:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8111502:	68fb      	ldr	r3, [r7, #12]
 8111504:	689a      	ldr	r2, [r3, #8]
 8111506:	68bb      	ldr	r3, [r7, #8]
 8111508:	005b      	lsls	r3, r3, #1
 811150a:	4413      	add	r3, r2
 811150c:	3304      	adds	r3, #4
 811150e:	461a      	mov	r2, r3
 8111510:	683b      	ldr	r3, [r7, #0]
 8111512:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8111514:	1c5a      	adds	r2, r3, #1
 8111516:	683b      	ldr	r3, [r7, #0]
 8111518:	425b      	negs	r3, r3
 811151a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 811151c:	461a      	mov	r2, r3
 811151e:	68fb      	ldr	r3, [r7, #12]
 8111520:	60da      	str	r2, [r3, #12]
}
 8111522:	bf00      	nop
 8111524:	3714      	adds	r7, #20
 8111526:	46bd      	mov	sp, r7
 8111528:	f85d 7b04 	ldr.w	r7, [sp], #4
 811152c:	4770      	bx	lr

0811152e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 811152e:	b480      	push	{r7}
 8111530:	b083      	sub	sp, #12
 8111532:	af00      	add	r7, sp, #0
 8111534:	4603      	mov	r3, r0
 8111536:	80fb      	strh	r3, [r7, #6]
 8111538:	460b      	mov	r3, r1
 811153a:	80bb      	strh	r3, [r7, #4]
 811153c:	4613      	mov	r3, r2
 811153e:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8111540:	88ba      	ldrh	r2, [r7, #4]
 8111542:	88fb      	ldrh	r3, [r7, #6]
 8111544:	1ad3      	subs	r3, r2, r3
 8111546:	b29b      	uxth	r3, r3
 8111548:	3b01      	subs	r3, #1
 811154a:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 811154c:	88b9      	ldrh	r1, [r7, #4]
 811154e:	887b      	ldrh	r3, [r7, #2]
 8111550:	1acb      	subs	r3, r1, r3
 8111552:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8111554:	429a      	cmp	r2, r3
 8111556:	bf34      	ite	cc
 8111558:	2301      	movcc	r3, #1
 811155a:	2300      	movcs	r3, #0
 811155c:	b2db      	uxtb	r3, r3
}
 811155e:	4618      	mov	r0, r3
 8111560:	370c      	adds	r7, #12
 8111562:	46bd      	mov	sp, r7
 8111564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111568:	4770      	bx	lr

0811156a <metal_io_virt>:
{
 811156a:	b480      	push	{r7}
 811156c:	b083      	sub	sp, #12
 811156e:	af00      	add	r7, sp, #0
 8111570:	6078      	str	r0, [r7, #4]
 8111572:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8111574:	687b      	ldr	r3, [r7, #4]
 8111576:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8111578:	f1b3 3fff 	cmp.w	r3, #4294967295
 811157c:	d009      	beq.n	8111592 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 811157e:	687b      	ldr	r3, [r7, #4]
 8111580:	689b      	ldr	r3, [r3, #8]
 8111582:	683a      	ldr	r2, [r7, #0]
 8111584:	429a      	cmp	r2, r3
 8111586:	d804      	bhi.n	8111592 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8111588:	687b      	ldr	r3, [r7, #4]
 811158a:	681a      	ldr	r2, [r3, #0]
		: NULL);
 811158c:	683b      	ldr	r3, [r7, #0]
 811158e:	4413      	add	r3, r2
 8111590:	e000      	b.n	8111594 <metal_io_virt+0x2a>
 8111592:	2300      	movs	r3, #0
}
 8111594:	4618      	mov	r0, r3
 8111596:	370c      	adds	r7, #12
 8111598:	46bd      	mov	sp, r7
 811159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811159e:	4770      	bx	lr

081115a0 <metal_io_phys>:
{
 81115a0:	b480      	push	{r7}
 81115a2:	b085      	sub	sp, #20
 81115a4:	af00      	add	r7, sp, #0
 81115a6:	6078      	str	r0, [r7, #4]
 81115a8:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 81115aa:	687b      	ldr	r3, [r7, #4]
 81115ac:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 81115ae:	2b1f      	cmp	r3, #31
 81115b0:	d805      	bhi.n	81115be <metal_io_phys+0x1e>
 81115b2:	687b      	ldr	r3, [r7, #4]
 81115b4:	68db      	ldr	r3, [r3, #12]
 81115b6:	683a      	ldr	r2, [r7, #0]
 81115b8:	fa22 f303 	lsr.w	r3, r2, r3
 81115bc:	e000      	b.n	81115c0 <metal_io_phys+0x20>
 81115be:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 81115c0:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 81115c2:	687b      	ldr	r3, [r7, #4]
 81115c4:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 81115c6:	2b00      	cmp	r3, #0
 81115c8:	d010      	beq.n	81115ec <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 81115ca:	687b      	ldr	r3, [r7, #4]
 81115cc:	689b      	ldr	r3, [r3, #8]
 81115ce:	683a      	ldr	r2, [r7, #0]
 81115d0:	429a      	cmp	r2, r3
 81115d2:	d80b      	bhi.n	81115ec <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 81115d4:	687b      	ldr	r3, [r7, #4]
 81115d6:	685a      	ldr	r2, [r3, #4]
 81115d8:	68fb      	ldr	r3, [r7, #12]
 81115da:	009b      	lsls	r3, r3, #2
 81115dc:	4413      	add	r3, r2
 81115de:	681a      	ldr	r2, [r3, #0]
 81115e0:	687b      	ldr	r3, [r7, #4]
 81115e2:	6919      	ldr	r1, [r3, #16]
 81115e4:	683b      	ldr	r3, [r7, #0]
 81115e6:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 81115e8:	4413      	add	r3, r2
 81115ea:	e001      	b.n	81115f0 <metal_io_phys+0x50>
 81115ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 81115f0:	4618      	mov	r0, r3
 81115f2:	3714      	adds	r7, #20
 81115f4:	46bd      	mov	sp, r7
 81115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81115fa:	4770      	bx	lr

081115fc <metal_io_phys_to_offset>:
{
 81115fc:	b580      	push	{r7, lr}
 81115fe:	b084      	sub	sp, #16
 8111600:	af00      	add	r7, sp, #0
 8111602:	6078      	str	r0, [r7, #4]
 8111604:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8111606:	687b      	ldr	r3, [r7, #4]
 8111608:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 811160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811160e:	d105      	bne.n	811161c <metal_io_phys_to_offset+0x20>
 8111610:	687b      	ldr	r3, [r7, #4]
 8111612:	685b      	ldr	r3, [r3, #4]
 8111614:	681b      	ldr	r3, [r3, #0]
 8111616:	683a      	ldr	r2, [r7, #0]
 8111618:	1ad3      	subs	r3, r2, r3
 811161a:	e003      	b.n	8111624 <metal_io_phys_to_offset+0x28>
 811161c:	687b      	ldr	r3, [r7, #4]
 811161e:	691a      	ldr	r2, [r3, #16]
 8111620:	683b      	ldr	r3, [r7, #0]
 8111622:	4013      	ands	r3, r2
	unsigned long offset =
 8111624:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8111626:	68f9      	ldr	r1, [r7, #12]
 8111628:	6878      	ldr	r0, [r7, #4]
 811162a:	f7ff ffb9 	bl	81115a0 <metal_io_phys>
 811162e:	4602      	mov	r2, r0
 8111630:	683b      	ldr	r3, [r7, #0]
 8111632:	4293      	cmp	r3, r2
 8111634:	d101      	bne.n	811163a <metal_io_phys_to_offset+0x3e>
			return offset;
 8111636:	68fb      	ldr	r3, [r7, #12]
 8111638:	e00c      	b.n	8111654 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 811163a:	687b      	ldr	r3, [r7, #4]
 811163c:	691a      	ldr	r2, [r3, #16]
 811163e:	68fb      	ldr	r3, [r7, #12]
 8111640:	4413      	add	r3, r2
 8111642:	3301      	adds	r3, #1
 8111644:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8111646:	687b      	ldr	r3, [r7, #4]
 8111648:	689b      	ldr	r3, [r3, #8]
 811164a:	68fa      	ldr	r2, [r7, #12]
 811164c:	429a      	cmp	r2, r3
 811164e:	d3ea      	bcc.n	8111626 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8111650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8111654:	4618      	mov	r0, r3
 8111656:	3710      	adds	r7, #16
 8111658:	46bd      	mov	sp, r7
 811165a:	bd80      	pop	{r7, pc}

0811165c <metal_io_phys_to_virt>:
{
 811165c:	b580      	push	{r7, lr}
 811165e:	b082      	sub	sp, #8
 8111660:	af00      	add	r7, sp, #0
 8111662:	6078      	str	r0, [r7, #4]
 8111664:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8111666:	6839      	ldr	r1, [r7, #0]
 8111668:	6878      	ldr	r0, [r7, #4]
 811166a:	f7ff ffc7 	bl	81115fc <metal_io_phys_to_offset>
 811166e:	4603      	mov	r3, r0
 8111670:	4619      	mov	r1, r3
 8111672:	6878      	ldr	r0, [r7, #4]
 8111674:	f7ff ff79 	bl	811156a <metal_io_virt>
 8111678:	4603      	mov	r3, r0
}
 811167a:	4618      	mov	r0, r3
 811167c:	3708      	adds	r7, #8
 811167e:	46bd      	mov	sp, r7
 8111680:	bd80      	pop	{r7, pc}

08111682 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8111682:	b580      	push	{r7, lr}
 8111684:	b084      	sub	sp, #16
 8111686:	af00      	add	r7, sp, #0
 8111688:	6078      	str	r0, [r7, #4]
 811168a:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 811168c:	687b      	ldr	r3, [r7, #4]
 811168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111690:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8111692:	6839      	ldr	r1, [r7, #0]
 8111694:	68f8      	ldr	r0, [r7, #12]
 8111696:	f7ff ffe1 	bl	811165c <metal_io_phys_to_virt>
 811169a:	4603      	mov	r3, r0
}
 811169c:	4618      	mov	r0, r3
 811169e:	3710      	adds	r7, #16
 81116a0:	46bd      	mov	sp, r7
 81116a2:	bd80      	pop	{r7, pc}

081116a4 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 81116a4:	b580      	push	{r7, lr}
 81116a6:	b086      	sub	sp, #24
 81116a8:	af00      	add	r7, sp, #0
 81116aa:	60f8      	str	r0, [r7, #12]
 81116ac:	607a      	str	r2, [r7, #4]
 81116ae:	603b      	str	r3, [r7, #0]
 81116b0:	460b      	mov	r3, r1
 81116b2:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 81116b4:	2300      	movs	r3, #0
 81116b6:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 81116b8:	697b      	ldr	r3, [r7, #20]
 81116ba:	2b00      	cmp	r3, #0
 81116bc:	d121      	bne.n	8111702 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 81116be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116c0:	68fa      	ldr	r2, [r7, #12]
 81116c2:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 81116c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116c6:	687a      	ldr	r2, [r7, #4]
 81116c8:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 81116ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116cc:	897a      	ldrh	r2, [r7, #10]
 81116ce:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 81116d0:	683b      	ldr	r3, [r7, #0]
 81116d2:	891a      	ldrh	r2, [r3, #8]
 81116d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116d6:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 81116d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116da:	895a      	ldrh	r2, [r3, #10]
 81116dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116de:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 81116e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116e2:	6a3a      	ldr	r2, [r7, #32]
 81116e4:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 81116e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81116ea:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 81116ec:	683b      	ldr	r3, [r7, #0]
 81116ee:	6819      	ldr	r1, [r3, #0]
 81116f0:	683b      	ldr	r3, [r7, #0]
 81116f2:	685b      	ldr	r3, [r3, #4]
 81116f4:	461a      	mov	r2, r3
 81116f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81116f8:	f000 f8fb 	bl	81118f2 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 81116fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81116fe:	f000 f885 	bl	811180c <virtqueue_disable_cb>
	}

	return (status);
 8111702:	697b      	ldr	r3, [r7, #20]
}
 8111704:	4618      	mov	r0, r3
 8111706:	3718      	adds	r7, #24
 8111708:	46bd      	mov	sp, r7
 811170a:	bd80      	pop	{r7, pc}

0811170c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 811170c:	b580      	push	{r7, lr}
 811170e:	b086      	sub	sp, #24
 8111710:	af00      	add	r7, sp, #0
 8111712:	60f8      	str	r0, [r7, #12]
 8111714:	60b9      	str	r1, [r7, #8]
 8111716:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8111718:	2300      	movs	r3, #0
 811171a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 811171c:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8111720:	68fb      	ldr	r3, [r7, #12]
 8111722:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8111724:	68fb      	ldr	r3, [r7, #12]
 8111726:	6a1b      	ldr	r3, [r3, #32]
 8111728:	885b      	ldrh	r3, [r3, #2]
 811172a:	429a      	cmp	r2, r3
 811172c:	d101      	bne.n	8111732 <virtqueue_get_available_buffer+0x26>
		return NULL;
 811172e:	2300      	movs	r3, #0
 8111730:	e02e      	b.n	8111790 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8111732:	68fb      	ldr	r3, [r7, #12]
 8111734:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8111736:	1c5a      	adds	r2, r3, #1
 8111738:	b291      	uxth	r1, r2
 811173a:	68fa      	ldr	r2, [r7, #12]
 811173c:	8691      	strh	r1, [r2, #52]	@ 0x34
 811173e:	b21a      	sxth	r2, r3
 8111740:	68fb      	ldr	r3, [r7, #12]
 8111742:	895b      	ldrh	r3, [r3, #10]
 8111744:	3b01      	subs	r3, #1
 8111746:	b29b      	uxth	r3, r3
 8111748:	b21b      	sxth	r3, r3
 811174a:	4013      	ands	r3, r2
 811174c:	b21b      	sxth	r3, r3
 811174e:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8111750:	68fb      	ldr	r3, [r7, #12]
 8111752:	6a1a      	ldr	r2, [r3, #32]
 8111754:	8afb      	ldrh	r3, [r7, #22]
 8111756:	005b      	lsls	r3, r3, #1
 8111758:	4413      	add	r3, r2
 811175a:	889a      	ldrh	r2, [r3, #4]
 811175c:	68bb      	ldr	r3, [r7, #8]
 811175e:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8111760:	68fb      	ldr	r3, [r7, #12]
 8111762:	69da      	ldr	r2, [r3, #28]
 8111764:	68bb      	ldr	r3, [r7, #8]
 8111766:	881b      	ldrh	r3, [r3, #0]
 8111768:	011b      	lsls	r3, r3, #4
 811176a:	4413      	add	r3, r2
 811176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111770:	4613      	mov	r3, r2
 8111772:	4619      	mov	r1, r3
 8111774:	68f8      	ldr	r0, [r7, #12]
 8111776:	f7ff ff84 	bl	8111682 <virtqueue_phys_to_virt>
 811177a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 811177c:	68fb      	ldr	r3, [r7, #12]
 811177e:	69da      	ldr	r2, [r3, #28]
 8111780:	68bb      	ldr	r3, [r7, #8]
 8111782:	881b      	ldrh	r3, [r3, #0]
 8111784:	011b      	lsls	r3, r3, #4
 8111786:	4413      	add	r3, r2
 8111788:	689a      	ldr	r2, [r3, #8]
 811178a:	687b      	ldr	r3, [r7, #4]
 811178c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 811178e:	693b      	ldr	r3, [r7, #16]
}
 8111790:	4618      	mov	r0, r3
 8111792:	3718      	adds	r7, #24
 8111794:	46bd      	mov	sp, r7
 8111796:	bd80      	pop	{r7, pc}

08111798 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8111798:	b480      	push	{r7}
 811179a:	b087      	sub	sp, #28
 811179c:	af00      	add	r7, sp, #0
 811179e:	60f8      	str	r0, [r7, #12]
 81117a0:	460b      	mov	r3, r1
 81117a2:	607a      	str	r2, [r7, #4]
 81117a4:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 81117a6:	2300      	movs	r3, #0
 81117a8:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 81117aa:	68fb      	ldr	r3, [r7, #12]
 81117ac:	895b      	ldrh	r3, [r3, #10]
 81117ae:	897a      	ldrh	r2, [r7, #10]
 81117b0:	429a      	cmp	r2, r3
 81117b2:	d901      	bls.n	81117b8 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 81117b4:	4b14      	ldr	r3, [pc, #80]	@ (8111808 <virtqueue_add_consumed_buffer+0x70>)
 81117b6:	e021      	b.n	81117fc <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 81117b8:	68fb      	ldr	r3, [r7, #12]
 81117ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81117bc:	885b      	ldrh	r3, [r3, #2]
 81117be:	b21a      	sxth	r2, r3
 81117c0:	68fb      	ldr	r3, [r7, #12]
 81117c2:	895b      	ldrh	r3, [r3, #10]
 81117c4:	3b01      	subs	r3, #1
 81117c6:	b29b      	uxth	r3, r3
 81117c8:	b21b      	sxth	r3, r3
 81117ca:	4013      	ands	r3, r2
 81117cc:	b21b      	sxth	r3, r3
 81117ce:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 81117d0:	68fb      	ldr	r3, [r7, #12]
 81117d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81117d4:	8a7b      	ldrh	r3, [r7, #18]
 81117d6:	00db      	lsls	r3, r3, #3
 81117d8:	4413      	add	r3, r2
 81117da:	3304      	adds	r3, #4
 81117dc:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 81117de:	897a      	ldrh	r2, [r7, #10]
 81117e0:	697b      	ldr	r3, [r7, #20]
 81117e2:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 81117e4:	697b      	ldr	r3, [r7, #20]
 81117e6:	687a      	ldr	r2, [r7, #4]
 81117e8:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 81117ea:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 81117ee:	68fb      	ldr	r3, [r7, #12]
 81117f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81117f2:	885a      	ldrh	r2, [r3, #2]
 81117f4:	3201      	adds	r2, #1
 81117f6:	b292      	uxth	r2, r2
 81117f8:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 81117fa:	2300      	movs	r3, #0
}
 81117fc:	4618      	mov	r0, r3
 81117fe:	371c      	adds	r7, #28
 8111800:	46bd      	mov	sp, r7
 8111802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111806:	4770      	bx	lr
 8111808:	fffff441 	.word	0xfffff441

0811180c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 811180c:	b480      	push	{r7}
 811180e:	b083      	sub	sp, #12
 8111810:	af00      	add	r7, sp, #0
 8111812:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8111814:	687b      	ldr	r3, [r7, #4]
 8111816:	68db      	ldr	r3, [r3, #12]
 8111818:	f003 0302 	and.w	r3, r3, #2
 811181c:	2b00      	cmp	r3, #0
 811181e:	d010      	beq.n	8111842 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8111820:	687b      	ldr	r3, [r7, #4]
 8111822:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8111824:	687b      	ldr	r3, [r7, #4]
 8111826:	895b      	ldrh	r3, [r3, #10]
 8111828:	1ad3      	subs	r3, r2, r3
 811182a:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 811182c:	687b      	ldr	r3, [r7, #4]
 811182e:	6a1a      	ldr	r2, [r3, #32]
 8111830:	687b      	ldr	r3, [r7, #4]
 8111832:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8111834:	3901      	subs	r1, #1
 8111836:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8111838:	005b      	lsls	r3, r3, #1
 811183a:	4413      	add	r3, r2
 811183c:	460a      	mov	r2, r1
 811183e:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8111840:	e008      	b.n	8111854 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8111842:	687b      	ldr	r3, [r7, #4]
 8111844:	6a1b      	ldr	r3, [r3, #32]
 8111846:	881a      	ldrh	r2, [r3, #0]
 8111848:	687b      	ldr	r3, [r7, #4]
 811184a:	6a1b      	ldr	r3, [r3, #32]
 811184c:	f042 0201 	orr.w	r2, r2, #1
 8111850:	b292      	uxth	r2, r2
 8111852:	801a      	strh	r2, [r3, #0]
}
 8111854:	bf00      	nop
 8111856:	370c      	adds	r7, #12
 8111858:	46bd      	mov	sp, r7
 811185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811185e:	4770      	bx	lr

08111860 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8111860:	b580      	push	{r7, lr}
 8111862:	b082      	sub	sp, #8
 8111864:	af00      	add	r7, sp, #0
 8111866:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8111868:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 811186c:	6878      	ldr	r0, [r7, #4]
 811186e:	f000 f885 	bl	811197c <vq_ring_must_notify_host>
 8111872:	4603      	mov	r3, r0
 8111874:	2b00      	cmp	r3, #0
 8111876:	d002      	beq.n	811187e <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8111878:	6878      	ldr	r0, [r7, #4]
 811187a:	f000 f8b5 	bl	81119e8 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 811187e:	687b      	ldr	r3, [r7, #4]
 8111880:	2200      	movs	r2, #0
 8111882:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8111884:	bf00      	nop
 8111886:	3708      	adds	r7, #8
 8111888:	46bd      	mov	sp, r7
 811188a:	bd80      	pop	{r7, pc}

0811188c <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 811188c:	b480      	push	{r7}
 811188e:	b085      	sub	sp, #20
 8111890:	af00      	add	r7, sp, #0
 8111892:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8111894:	2300      	movs	r3, #0
 8111896:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8111898:	2300      	movs	r3, #0
 811189a:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 811189c:	2300      	movs	r3, #0
 811189e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 81118a0:	687b      	ldr	r3, [r7, #4]
 81118a2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 81118a4:	687b      	ldr	r3, [r7, #4]
 81118a6:	6a1b      	ldr	r3, [r3, #32]
 81118a8:	885b      	ldrh	r3, [r3, #2]
 81118aa:	429a      	cmp	r2, r3
 81118ac:	d101      	bne.n	81118b2 <virtqueue_get_desc_size+0x26>
		return 0;
 81118ae:	2300      	movs	r3, #0
 81118b0:	e019      	b.n	81118e6 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 81118b2:	687b      	ldr	r3, [r7, #4]
 81118b4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 81118b6:	b21a      	sxth	r2, r3
 81118b8:	687b      	ldr	r3, [r7, #4]
 81118ba:	895b      	ldrh	r3, [r3, #10]
 81118bc:	3b01      	subs	r3, #1
 81118be:	b29b      	uxth	r3, r3
 81118c0:	b21b      	sxth	r3, r3
 81118c2:	4013      	ands	r3, r2
 81118c4:	b21b      	sxth	r3, r3
 81118c6:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 81118c8:	687b      	ldr	r3, [r7, #4]
 81118ca:	6a1a      	ldr	r2, [r3, #32]
 81118cc:	89fb      	ldrh	r3, [r7, #14]
 81118ce:	005b      	lsls	r3, r3, #1
 81118d0:	4413      	add	r3, r2
 81118d2:	889b      	ldrh	r3, [r3, #4]
 81118d4:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 81118d6:	687b      	ldr	r3, [r7, #4]
 81118d8:	69da      	ldr	r2, [r3, #28]
 81118da:	89bb      	ldrh	r3, [r7, #12]
 81118dc:	011b      	lsls	r3, r3, #4
 81118de:	4413      	add	r3, r2
 81118e0:	689b      	ldr	r3, [r3, #8]
 81118e2:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 81118e4:	68bb      	ldr	r3, [r7, #8]
}
 81118e6:	4618      	mov	r0, r3
 81118e8:	3714      	adds	r7, #20
 81118ea:	46bd      	mov	sp, r7
 81118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81118f0:	4770      	bx	lr

081118f2 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 81118f2:	b580      	push	{r7, lr}
 81118f4:	b088      	sub	sp, #32
 81118f6:	af00      	add	r7, sp, #0
 81118f8:	60f8      	str	r0, [r7, #12]
 81118fa:	60b9      	str	r1, [r7, #8]
 81118fc:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 81118fe:	68fb      	ldr	r3, [r7, #12]
 8111900:	895b      	ldrh	r3, [r3, #10]
 8111902:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8111904:	68fb      	ldr	r3, [r7, #12]
 8111906:	3318      	adds	r3, #24
 8111908:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 811190a:	69b9      	ldr	r1, [r7, #24]
 811190c:	687b      	ldr	r3, [r7, #4]
 811190e:	68ba      	ldr	r2, [r7, #8]
 8111910:	6978      	ldr	r0, [r7, #20]
 8111912:	f7ff fde3 	bl	81114dc <vring_init>

	for (i = 0; i < size - 1; i++)
 8111916:	2300      	movs	r3, #0
 8111918:	61fb      	str	r3, [r7, #28]
 811191a:	e00c      	b.n	8111936 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 811191c:	69fb      	ldr	r3, [r7, #28]
 811191e:	b29a      	uxth	r2, r3
 8111920:	697b      	ldr	r3, [r7, #20]
 8111922:	6859      	ldr	r1, [r3, #4]
 8111924:	69fb      	ldr	r3, [r7, #28]
 8111926:	011b      	lsls	r3, r3, #4
 8111928:	440b      	add	r3, r1
 811192a:	3201      	adds	r2, #1
 811192c:	b292      	uxth	r2, r2
 811192e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8111930:	69fb      	ldr	r3, [r7, #28]
 8111932:	3301      	adds	r3, #1
 8111934:	61fb      	str	r3, [r7, #28]
 8111936:	69bb      	ldr	r3, [r7, #24]
 8111938:	3b01      	subs	r3, #1
 811193a:	69fa      	ldr	r2, [r7, #28]
 811193c:	429a      	cmp	r2, r3
 811193e:	dbed      	blt.n	811191c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8111940:	697b      	ldr	r3, [r7, #20]
 8111942:	685a      	ldr	r2, [r3, #4]
 8111944:	69fb      	ldr	r3, [r7, #28]
 8111946:	011b      	lsls	r3, r3, #4
 8111948:	4413      	add	r3, r2
 811194a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 811194e:	81da      	strh	r2, [r3, #14]
}
 8111950:	bf00      	nop
 8111952:	3720      	adds	r7, #32
 8111954:	46bd      	mov	sp, r7
 8111956:	bd80      	pop	{r7, pc}

08111958 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8111958:	b580      	push	{r7, lr}
 811195a:	b082      	sub	sp, #8
 811195c:	af00      	add	r7, sp, #0
 811195e:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8111960:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8111964:	687b      	ldr	r3, [r7, #4]
 8111966:	691b      	ldr	r3, [r3, #16]
 8111968:	2b00      	cmp	r3, #0
 811196a:	d003      	beq.n	8111974 <virtqueue_notification+0x1c>
		vq->callback(vq);
 811196c:	687b      	ldr	r3, [r7, #4]
 811196e:	691b      	ldr	r3, [r3, #16]
 8111970:	6878      	ldr	r0, [r7, #4]
 8111972:	4798      	blx	r3
}
 8111974:	bf00      	nop
 8111976:	3708      	adds	r7, #8
 8111978:	46bd      	mov	sp, r7
 811197a:	bd80      	pop	{r7, pc}

0811197c <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 811197c:	b580      	push	{r7, lr}
 811197e:	b084      	sub	sp, #16
 8111980:	af00      	add	r7, sp, #0
 8111982:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8111984:	687b      	ldr	r3, [r7, #4]
 8111986:	68db      	ldr	r3, [r3, #12]
 8111988:	f003 0302 	and.w	r3, r3, #2
 811198c:	2b00      	cmp	r3, #0
 811198e:	d01d      	beq.n	81119cc <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8111990:	687b      	ldr	r3, [r7, #4]
 8111992:	6a1b      	ldr	r3, [r3, #32]
 8111994:	885b      	ldrh	r3, [r3, #2]
 8111996:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8111998:	687b      	ldr	r3, [r7, #4]
 811199a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811199c:	89fa      	ldrh	r2, [r7, #14]
 811199e:	1ad3      	subs	r3, r2, r3
 81119a0:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 81119a2:	687b      	ldr	r3, [r7, #4]
 81119a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81119a6:	687b      	ldr	r3, [r7, #4]
 81119a8:	699b      	ldr	r3, [r3, #24]
 81119aa:	00db      	lsls	r3, r3, #3
 81119ac:	4413      	add	r3, r2
 81119ae:	685b      	ldr	r3, [r3, #4]
 81119b0:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 81119b2:	89ba      	ldrh	r2, [r7, #12]
 81119b4:	89f9      	ldrh	r1, [r7, #14]
 81119b6:	897b      	ldrh	r3, [r7, #10]
 81119b8:	4618      	mov	r0, r3
 81119ba:	f7ff fdb8 	bl	811152e <vring_need_event>
 81119be:	4603      	mov	r3, r0
 81119c0:	2b00      	cmp	r3, #0
 81119c2:	bf14      	ite	ne
 81119c4:	2301      	movne	r3, #1
 81119c6:	2300      	moveq	r3, #0
 81119c8:	b2db      	uxtb	r3, r3
 81119ca:	e009      	b.n	81119e0 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 81119cc:	687b      	ldr	r3, [r7, #4]
 81119ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81119d0:	881b      	ldrh	r3, [r3, #0]
 81119d2:	f003 0301 	and.w	r3, r3, #1
 81119d6:	2b00      	cmp	r3, #0
 81119d8:	bf0c      	ite	eq
 81119da:	2301      	moveq	r3, #1
 81119dc:	2300      	movne	r3, #0
 81119de:	b2db      	uxtb	r3, r3
}
 81119e0:	4618      	mov	r0, r3
 81119e2:	3710      	adds	r7, #16
 81119e4:	46bd      	mov	sp, r7
 81119e6:	bd80      	pop	{r7, pc}

081119e8 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 81119e8:	b580      	push	{r7, lr}
 81119ea:	b082      	sub	sp, #8
 81119ec:	af00      	add	r7, sp, #0
 81119ee:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 81119f0:	687b      	ldr	r3, [r7, #4]
 81119f2:	695b      	ldr	r3, [r3, #20]
 81119f4:	2b00      	cmp	r3, #0
 81119f6:	d003      	beq.n	8111a00 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 81119f8:	687b      	ldr	r3, [r7, #4]
 81119fa:	695b      	ldr	r3, [r3, #20]
 81119fc:	6878      	ldr	r0, [r7, #4]
 81119fe:	4798      	blx	r3
}
 8111a00:	bf00      	nop
 8111a02:	3708      	adds	r7, #8
 8111a04:	46bd      	mov	sp, r7
 8111a06:	bd80      	pop	{r7, pc}

08111a08 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8111a08:	b580      	push	{r7, lr}
 8111a0a:	b082      	sub	sp, #8
 8111a0c:	af00      	add	r7, sp, #0
 8111a0e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8111a10:	4b04      	ldr	r3, [pc, #16]	@ (8111a24 <HAL_HSEM_FreeCallback+0x1c>)
 8111a12:	2201      	movs	r2, #1
 8111a14:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8111a16:	2001      	movs	r0, #1
 8111a18:	f7f4 fb7e 	bl	8106118 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8111a1c:	bf00      	nop
 8111a1e:	3708      	adds	r7, #8
 8111a20:	46bd      	mov	sp, r7
 8111a22:	bd80      	pop	{r7, pc}
 8111a24:	10004fa0 	.word	0x10004fa0

08111a28 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8111a28:	b580      	push	{r7, lr}
 8111a2a:	b082      	sub	sp, #8
 8111a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8111a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8111a5c <MAILBOX_Init+0x34>)
 8111a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8111a34:	4a09      	ldr	r2, [pc, #36]	@ (8111a5c <MAILBOX_Init+0x34>)
 8111a36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8111a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8111a3e:	4b07      	ldr	r3, [pc, #28]	@ (8111a5c <MAILBOX_Init+0x34>)
 8111a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8111a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8111a48:	607b      	str	r3, [r7, #4]
 8111a4a:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8111a4c:	2001      	movs	r0, #1
 8111a4e:	f7f4 fb63 	bl	8106118 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8111a52:	2300      	movs	r3, #0
}
 8111a54:	4618      	mov	r0, r3
 8111a56:	3708      	adds	r7, #8
 8111a58:	46bd      	mov	sp, r7
 8111a5a:	bd80      	pop	{r7, pc}
 8111a5c:	58024400 	.word	0x58024400

08111a60 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8111a60:	b580      	push	{r7, lr}
 8111a62:	b082      	sub	sp, #8
 8111a64:	af00      	add	r7, sp, #0
 8111a66:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8111a68:	4b09      	ldr	r3, [pc, #36]	@ (8111a90 <MAILBOX_Poll+0x30>)
 8111a6a:	681b      	ldr	r3, [r3, #0]
 8111a6c:	2b01      	cmp	r3, #1
 8111a6e:	d108      	bne.n	8111a82 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8111a70:	2101      	movs	r1, #1
 8111a72:	6878      	ldr	r0, [r7, #4]
 8111a74:	f7fe fd25 	bl	81104c2 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8111a78:	4b05      	ldr	r3, [pc, #20]	@ (8111a90 <MAILBOX_Poll+0x30>)
 8111a7a:	2200      	movs	r2, #0
 8111a7c:	601a      	str	r2, [r3, #0]
    return 0;
 8111a7e:	2300      	movs	r3, #0
 8111a80:	e001      	b.n	8111a86 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8111a82:	f06f 030a 	mvn.w	r3, #10
}
 8111a86:	4618      	mov	r0, r3
 8111a88:	3708      	adds	r7, #8
 8111a8a:	46bd      	mov	sp, r7
 8111a8c:	bd80      	pop	{r7, pc}
 8111a8e:	bf00      	nop
 8111a90:	10004fa0 	.word	0x10004fa0

08111a94 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8111a94:	b580      	push	{r7, lr}
 8111a96:	b082      	sub	sp, #8
 8111a98:	af00      	add	r7, sp, #0
 8111a9a:	6078      	str	r0, [r7, #4]
 8111a9c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8111a9e:	2001      	movs	r0, #1
 8111aa0:	f7f4 fb0c 	bl	81060bc <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8111aa4:	2100      	movs	r1, #0
 8111aa6:	2001      	movs	r0, #1
 8111aa8:	f7f4 fb22 	bl	81060f0 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8111aac:	2300      	movs	r3, #0
}
 8111aae:	4618      	mov	r0, r3
 8111ab0:	3708      	adds	r7, #8
 8111ab2:	46bd      	mov	sp, r7
 8111ab4:	bd80      	pop	{r7, pc}

08111ab6 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8111ab6:	b480      	push	{r7}
 8111ab8:	b083      	sub	sp, #12
 8111aba:	af00      	add	r7, sp, #0
 8111abc:	6078      	str	r0, [r7, #4]
 8111abe:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8111ac0:	687b      	ldr	r3, [r7, #4]
 8111ac2:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8111ac4:	683a      	ldr	r2, [r7, #0]
 8111ac6:	429a      	cmp	r2, r3
 8111ac8:	d209      	bcs.n	8111ade <metal_device_io_region+0x28>
 8111aca:	683a      	ldr	r2, [r7, #0]
 8111acc:	4613      	mov	r3, r2
 8111ace:	005b      	lsls	r3, r3, #1
 8111ad0:	4413      	add	r3, r2
 8111ad2:	011b      	lsls	r3, r3, #4
 8111ad4:	3308      	adds	r3, #8
 8111ad6:	687a      	ldr	r2, [r7, #4]
 8111ad8:	4413      	add	r3, r2
 8111ada:	3304      	adds	r3, #4
 8111adc:	e000      	b.n	8111ae0 <metal_device_io_region+0x2a>
 8111ade:	2300      	movs	r3, #0
}
 8111ae0:	4618      	mov	r0, r3
 8111ae2:	370c      	adds	r7, #12
 8111ae4:	46bd      	mov	sp, r7
 8111ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111aea:	4770      	bx	lr

08111aec <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8111aec:	b590      	push	{r4, r7, lr}
 8111aee:	b08d      	sub	sp, #52	@ 0x34
 8111af0:	af04      	add	r7, sp, #16
 8111af2:	6078      	str	r0, [r7, #4]
  int status = 0;
 8111af4:	2300      	movs	r3, #0
 8111af6:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8111af8:	2300      	movs	r3, #0
 8111afa:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8111afc:	4a41      	ldr	r2, [pc, #260]	@ (8111c04 <OPENAMP_shmem_init+0x118>)
 8111afe:	f107 0310 	add.w	r3, r7, #16
 8111b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8111b06:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8111b0a:	2300      	movs	r3, #0
 8111b0c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8111b0e:	2300      	movs	r3, #0
 8111b10:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8111b12:	f107 0310 	add.w	r3, r7, #16
 8111b16:	4618      	mov	r0, r3
 8111b18:	f7fe f8e6 	bl	810fce8 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8111b1c:	483a      	ldr	r0, [pc, #232]	@ (8111c08 <OPENAMP_shmem_init+0x11c>)
 8111b1e:	f7fd ff8b 	bl	810fa38 <metal_register_generic_device>
 8111b22:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8111b24:	69fb      	ldr	r3, [r7, #28]
 8111b26:	2b00      	cmp	r3, #0
 8111b28:	d001      	beq.n	8111b2e <OPENAMP_shmem_init+0x42>
    return status;
 8111b2a:	69fb      	ldr	r3, [r7, #28]
 8111b2c:	e066      	b.n	8111bfc <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8111b2e:	f107 0318 	add.w	r3, r7, #24
 8111b32:	461a      	mov	r2, r3
 8111b34:	4935      	ldr	r1, [pc, #212]	@ (8111c0c <OPENAMP_shmem_init+0x120>)
 8111b36:	4836      	ldr	r0, [pc, #216]	@ (8111c10 <OPENAMP_shmem_init+0x124>)
 8111b38:	f7fd ff40 	bl	810f9bc <metal_device_open>
 8111b3c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8111b3e:	69fb      	ldr	r3, [r7, #28]
 8111b40:	2b00      	cmp	r3, #0
 8111b42:	d001      	beq.n	8111b48 <OPENAMP_shmem_init+0x5c>
    return status;
 8111b44:	69fb      	ldr	r3, [r7, #28]
 8111b46:	e059      	b.n	8111bfc <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8111b48:	4a32      	ldr	r2, [pc, #200]	@ (8111c14 <OPENAMP_shmem_init+0x128>)
 8111b4a:	4b33      	ldr	r3, [pc, #204]	@ (8111c18 <OPENAMP_shmem_init+0x12c>)
 8111b4c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8111b4e:	69bb      	ldr	r3, [r7, #24]
 8111b50:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8111b54:	4a31      	ldr	r2, [pc, #196]	@ (8111c1c <OPENAMP_shmem_init+0x130>)
 8111b56:	4b2f      	ldr	r3, [pc, #188]	@ (8111c14 <OPENAMP_shmem_init+0x128>)
 8111b58:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8111b5a:	461a      	mov	r2, r3
 8111b5c:	2300      	movs	r3, #0
 8111b5e:	9302      	str	r3, [sp, #8]
 8111b60:	2300      	movs	r3, #0
 8111b62:	9301      	str	r3, [sp, #4]
 8111b64:	f04f 33ff 	mov.w	r3, #4294967295
 8111b68:	9300      	str	r3, [sp, #0]
 8111b6a:	4613      	mov	r3, r2
 8111b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8111c18 <OPENAMP_shmem_init+0x12c>)
 8111b6e:	4929      	ldr	r1, [pc, #164]	@ (8111c14 <OPENAMP_shmem_init+0x128>)
 8111b70:	f7fe f907 	bl	810fd82 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8111b74:	69bb      	ldr	r3, [r7, #24]
 8111b76:	2100      	movs	r1, #0
 8111b78:	4618      	mov	r0, r3
 8111b7a:	f7ff ff9c 	bl	8111ab6 <metal_device_io_region>
 8111b7e:	4603      	mov	r3, r0
 8111b80:	4a27      	ldr	r2, [pc, #156]	@ (8111c20 <OPENAMP_shmem_init+0x134>)
 8111b82:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8111b84:	4b26      	ldr	r3, [pc, #152]	@ (8111c20 <OPENAMP_shmem_init+0x134>)
 8111b86:	681b      	ldr	r3, [r3, #0]
 8111b88:	2b00      	cmp	r3, #0
 8111b8a:	d102      	bne.n	8111b92 <OPENAMP_shmem_init+0xa6>
    return -1;
 8111b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8111b90:	e034      	b.n	8111bfc <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8111b92:	f107 0208 	add.w	r2, r7, #8
 8111b96:	f107 030c 	add.w	r3, r7, #12
 8111b9a:	4619      	mov	r1, r3
 8111b9c:	6878      	ldr	r0, [r7, #4]
 8111b9e:	f000 f905 	bl	8111dac <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8111ba2:	68fb      	ldr	r3, [r7, #12]
 8111ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8111c24 <OPENAMP_shmem_init+0x138>)
 8111ba6:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8111ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8111c24 <OPENAMP_shmem_init+0x138>)
 8111baa:	681b      	ldr	r3, [r3, #0]
 8111bac:	2b00      	cmp	r3, #0
 8111bae:	d102      	bne.n	8111bb6 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8111bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8111bb4:	e022      	b.n	8111bfc <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8111bb6:	69bb      	ldr	r3, [r7, #24]
 8111bb8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8111bbc:	4b19      	ldr	r3, [pc, #100]	@ (8111c24 <OPENAMP_shmem_init+0x138>)
 8111bbe:	6819      	ldr	r1, [r3, #0]
 8111bc0:	4b18      	ldr	r3, [pc, #96]	@ (8111c24 <OPENAMP_shmem_init+0x138>)
 8111bc2:	681a      	ldr	r2, [r3, #0]
 8111bc4:	68bb      	ldr	r3, [r7, #8]
 8111bc6:	461c      	mov	r4, r3
 8111bc8:	2300      	movs	r3, #0
 8111bca:	9302      	str	r3, [sp, #8]
 8111bcc:	2300      	movs	r3, #0
 8111bce:	9301      	str	r3, [sp, #4]
 8111bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8111bd4:	9300      	str	r3, [sp, #0]
 8111bd6:	4623      	mov	r3, r4
 8111bd8:	f7fe f8d3 	bl	810fd82 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8111bdc:	69bb      	ldr	r3, [r7, #24]
 8111bde:	2101      	movs	r1, #1
 8111be0:	4618      	mov	r0, r3
 8111be2:	f7ff ff68 	bl	8111ab6 <metal_device_io_region>
 8111be6:	4603      	mov	r3, r0
 8111be8:	4a0f      	ldr	r2, [pc, #60]	@ (8111c28 <OPENAMP_shmem_init+0x13c>)
 8111bea:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8111bec:	4b0e      	ldr	r3, [pc, #56]	@ (8111c28 <OPENAMP_shmem_init+0x13c>)
 8111bee:	681b      	ldr	r3, [r3, #0]
 8111bf0:	2b00      	cmp	r3, #0
 8111bf2:	d102      	bne.n	8111bfa <OPENAMP_shmem_init+0x10e>
    return -1;
 8111bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8111bf8:	e000      	b.n	8111bfc <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8111bfa:	2300      	movs	r3, #0
}
 8111bfc:	4618      	mov	r0, r3
 8111bfe:	3724      	adds	r7, #36	@ 0x24
 8111c00:	46bd      	mov	sp, r7
 8111c02:	bd90      	pop	{r4, r7, pc}
 8111c04:	081176f4 	.word	0x081176f4
 8111c08:	10000040 	.word	0x10000040
 8111c0c:	081176e0 	.word	0x081176e0
 8111c10:	081176ec 	.word	0x081176ec
 8111c14:	38000400 	.word	0x38000400
 8111c18:	10005034 	.word	0x10005034
 8111c1c:	38010000 	.word	0x38010000
 8111c20:	10004fa4 	.word	0x10004fa4
 8111c24:	10004fac 	.word	0x10004fac
 8111c28:	10004fa8 	.word	0x10004fa8

08111c2c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8111c2c:	b590      	push	{r4, r7, lr}
 8111c2e:	b08b      	sub	sp, #44	@ 0x2c
 8111c30:	af04      	add	r7, sp, #16
 8111c32:	6078      	str	r0, [r7, #4]
 8111c34:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8111c36:	2300      	movs	r3, #0
 8111c38:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8111c3a:	2300      	movs	r3, #0
 8111c3c:	613b      	str	r3, [r7, #16]
  int status = 0;
 8111c3e:	2300      	movs	r3, #0
 8111c40:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8111c42:	f7ff fef1 	bl	8111a28 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8111c46:	6878      	ldr	r0, [r7, #4]
 8111c48:	f7ff ff50 	bl	8111aec <OPENAMP_shmem_init>
 8111c4c:	60f8      	str	r0, [r7, #12]
  if(status)
 8111c4e:	68fb      	ldr	r3, [r7, #12]
 8111c50:	2b00      	cmp	r3, #0
 8111c52:	d001      	beq.n	8111c58 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8111c54:	68fb      	ldr	r3, [r7, #12]
 8111c56:	e06a      	b.n	8111d2e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8111c58:	6878      	ldr	r0, [r7, #4]
 8111c5a:	4b37      	ldr	r3, [pc, #220]	@ (8111d38 <MX_OPENAMP_Init+0x10c>)
 8111c5c:	681b      	ldr	r3, [r3, #0]
 8111c5e:	f103 0218 	add.w	r2, r3, #24
 8111c62:	4b36      	ldr	r3, [pc, #216]	@ (8111d3c <MX_OPENAMP_Init+0x110>)
 8111c64:	681b      	ldr	r3, [r3, #0]
 8111c66:	2100      	movs	r1, #0
 8111c68:	9102      	str	r1, [sp, #8]
 8111c6a:	4935      	ldr	r1, [pc, #212]	@ (8111d40 <MX_OPENAMP_Init+0x114>)
 8111c6c:	9101      	str	r1, [sp, #4]
 8111c6e:	2100      	movs	r1, #0
 8111c70:	9100      	str	r1, [sp, #0]
 8111c72:	21ff      	movs	r1, #255	@ 0xff
 8111c74:	f7fe fb46 	bl	8110304 <rproc_virtio_create_vdev>
 8111c78:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8111c7a:	693b      	ldr	r3, [r7, #16]
 8111c7c:	2b00      	cmp	r3, #0
 8111c7e:	d102      	bne.n	8111c86 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8111c80:	f04f 33ff 	mov.w	r3, #4294967295
 8111c84:	e053      	b.n	8111d2e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8111c86:	6938      	ldr	r0, [r7, #16]
 8111c88:	f7fe fc57 	bl	811053a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8111c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8111d38 <MX_OPENAMP_Init+0x10c>)
 8111c8e:	681b      	ldr	r3, [r3, #0]
 8111c90:	3334      	adds	r3, #52	@ 0x34
 8111c92:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8111c94:	697b      	ldr	r3, [r7, #20]
 8111c96:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8111c98:	697b      	ldr	r3, [r7, #20]
 8111c9a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8111c9c:	461c      	mov	r4, r3
 8111c9e:	4b29      	ldr	r3, [pc, #164]	@ (8111d44 <MX_OPENAMP_Init+0x118>)
 8111ca0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8111ca2:	697a      	ldr	r2, [r7, #20]
 8111ca4:	6892      	ldr	r2, [r2, #8]
 8111ca6:	6979      	ldr	r1, [r7, #20]
 8111ca8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8111caa:	9102      	str	r1, [sp, #8]
 8111cac:	9201      	str	r2, [sp, #4]
 8111cae:	9300      	str	r3, [sp, #0]
 8111cb0:	4623      	mov	r3, r4
 8111cb2:	4602      	mov	r2, r0
 8111cb4:	2100      	movs	r1, #0
 8111cb6:	6938      	ldr	r0, [r7, #16]
 8111cb8:	f7fe fbd2 	bl	8110460 <rproc_virtio_init_vring>
 8111cbc:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8111cbe:	68fb      	ldr	r3, [r7, #12]
 8111cc0:	2b00      	cmp	r3, #0
 8111cc2:	d001      	beq.n	8111cc8 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8111cc4:	68fb      	ldr	r3, [r7, #12]
 8111cc6:	e032      	b.n	8111d2e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8111cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8111d38 <MX_OPENAMP_Init+0x10c>)
 8111cca:	681b      	ldr	r3, [r3, #0]
 8111ccc:	3348      	adds	r3, #72	@ 0x48
 8111cce:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111cd0:	697b      	ldr	r3, [r7, #20]
 8111cd2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8111cd4:	697b      	ldr	r3, [r7, #20]
 8111cd6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111cd8:	461c      	mov	r4, r3
 8111cda:	4b1a      	ldr	r3, [pc, #104]	@ (8111d44 <MX_OPENAMP_Init+0x118>)
 8111cdc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8111cde:	697a      	ldr	r2, [r7, #20]
 8111ce0:	6892      	ldr	r2, [r2, #8]
 8111ce2:	6979      	ldr	r1, [r7, #20]
 8111ce4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8111ce6:	9102      	str	r1, [sp, #8]
 8111ce8:	9201      	str	r2, [sp, #4]
 8111cea:	9300      	str	r3, [sp, #0]
 8111cec:	4623      	mov	r3, r4
 8111cee:	4602      	mov	r2, r0
 8111cf0:	2101      	movs	r1, #1
 8111cf2:	6938      	ldr	r0, [r7, #16]
 8111cf4:	f7fe fbb4 	bl	8110460 <rproc_virtio_init_vring>
 8111cf8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8111cfa:	68fb      	ldr	r3, [r7, #12]
 8111cfc:	2b00      	cmp	r3, #0
 8111cfe:	d001      	beq.n	8111d04 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8111d00:	68fb      	ldr	r3, [r7, #12]
 8111d02:	e014      	b.n	8111d2e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8111d04:	4b10      	ldr	r3, [pc, #64]	@ (8111d48 <MX_OPENAMP_Init+0x11c>)
 8111d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8111d0a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8111d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8111d4c <MX_OPENAMP_Init+0x120>)
 8111d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8111d48 <MX_OPENAMP_Init+0x11c>)
 8111d10:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8111d12:	461a      	mov	r2, r3
 8111d14:	480e      	ldr	r0, [pc, #56]	@ (8111d50 <MX_OPENAMP_Init+0x124>)
 8111d16:	f7ff f85f 	bl	8110dd8 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8111d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8111d44 <MX_OPENAMP_Init+0x118>)
 8111d1c:	681b      	ldr	r3, [r3, #0]
 8111d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8111d50 <MX_OPENAMP_Init+0x124>)
 8111d20:	9200      	str	r2, [sp, #0]
 8111d22:	683a      	ldr	r2, [r7, #0]
 8111d24:	6939      	ldr	r1, [r7, #16]
 8111d26:	480b      	ldr	r0, [pc, #44]	@ (8111d54 <MX_OPENAMP_Init+0x128>)
 8111d28:	f7ff facc 	bl	81112c4 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8111d2c:	2300      	movs	r3, #0
}
 8111d2e:	4618      	mov	r0, r3
 8111d30:	371c      	adds	r7, #28
 8111d32:	46bd      	mov	sp, r7
 8111d34:	bd90      	pop	{r4, r7, pc}
 8111d36:	bf00      	nop
 8111d38:	10004fac 	.word	0x10004fac
 8111d3c:	10004fa8 	.word	0x10004fa8
 8111d40:	08111a95 	.word	0x08111a95
 8111d44:	10004fa4 	.word	0x10004fa4
 8111d48:	38000400 	.word	0x38000400
 8111d4c:	38010000 	.word	0x38010000
 8111d50:	10004fb0 	.word	0x10004fb0
 8111d54:	10004fbc 	.word	0x10004fbc

08111d58 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8111d58:	b580      	push	{r7, lr}
 8111d5a:	b08a      	sub	sp, #40	@ 0x28
 8111d5c:	af04      	add	r7, sp, #16
 8111d5e:	60f8      	str	r0, [r7, #12]
 8111d60:	60b9      	str	r1, [r7, #8]
 8111d62:	607a      	str	r2, [r7, #4]
 8111d64:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8111d66:	2300      	movs	r3, #0
 8111d68:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8111d6a:	6a3b      	ldr	r3, [r7, #32]
 8111d6c:	9302      	str	r3, [sp, #8]
 8111d6e:	683b      	ldr	r3, [r7, #0]
 8111d70:	9301      	str	r3, [sp, #4]
 8111d72:	687b      	ldr	r3, [r7, #4]
 8111d74:	9300      	str	r3, [sp, #0]
 8111d76:	f04f 33ff 	mov.w	r3, #4294967295
 8111d7a:	68ba      	ldr	r2, [r7, #8]
 8111d7c:	4904      	ldr	r1, [pc, #16]	@ (8111d90 <OPENAMP_create_endpoint+0x38>)
 8111d7e:	68f8      	ldr	r0, [r7, #12]
 8111d80:	f7fe fe68 	bl	8110a54 <rpmsg_create_ept>
 8111d84:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8111d86:	697b      	ldr	r3, [r7, #20]
}
 8111d88:	4618      	mov	r0, r3
 8111d8a:	3718      	adds	r7, #24
 8111d8c:	46bd      	mov	sp, r7
 8111d8e:	bd80      	pop	{r7, pc}
 8111d90:	10004fbc 	.word	0x10004fbc

08111d94 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8111d94:	b580      	push	{r7, lr}
 8111d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8111d98:	4b03      	ldr	r3, [pc, #12]	@ (8111da8 <OPENAMP_check_for_message+0x14>)
 8111d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8111d9c:	4618      	mov	r0, r3
 8111d9e:	f7ff fe5f 	bl	8111a60 <MAILBOX_Poll>
}
 8111da2:	bf00      	nop
 8111da4:	bd80      	pop	{r7, pc}
 8111da6:	bf00      	nop
 8111da8:	10004fbc 	.word	0x10004fbc

08111dac <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8111dac:	b480      	push	{r7}
 8111dae:	b085      	sub	sp, #20
 8111db0:	af00      	add	r7, sp, #0
 8111db2:	60f8      	str	r0, [r7, #12]
 8111db4:	60b9      	str	r1, [r7, #8]
 8111db6:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8111db8:	bf00      	nop
 8111dba:	4b08      	ldr	r3, [pc, #32]	@ (8111ddc <resource_table_init+0x30>)
 8111dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8111dbe:	4a08      	ldr	r2, [pc, #32]	@ (8111de0 <resource_table_init+0x34>)
 8111dc0:	4293      	cmp	r3, r2
 8111dc2:	d1fa      	bne.n	8111dba <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8111dc4:	687b      	ldr	r3, [r7, #4]
 8111dc6:	228c      	movs	r2, #140	@ 0x8c
 8111dc8:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8111dca:	68bb      	ldr	r3, [r7, #8]
 8111dcc:	4a03      	ldr	r2, [pc, #12]	@ (8111ddc <resource_table_init+0x30>)
 8111dce:	601a      	str	r2, [r3, #0]
}
 8111dd0:	bf00      	nop
 8111dd2:	3714      	adds	r7, #20
 8111dd4:	46bd      	mov	sp, r7
 8111dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111dda:	4770      	bx	lr
 8111ddc:	38000000 	.word	0x38000000
 8111de0:	38000400 	.word	0x38000400

08111de4 <__assert_func>:
 8111de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8111de6:	4614      	mov	r4, r2
 8111de8:	461a      	mov	r2, r3
 8111dea:	4b09      	ldr	r3, [pc, #36]	@ (8111e10 <__assert_func+0x2c>)
 8111dec:	681b      	ldr	r3, [r3, #0]
 8111dee:	4605      	mov	r5, r0
 8111df0:	68d8      	ldr	r0, [r3, #12]
 8111df2:	b954      	cbnz	r4, 8111e0a <__assert_func+0x26>
 8111df4:	4b07      	ldr	r3, [pc, #28]	@ (8111e14 <__assert_func+0x30>)
 8111df6:	461c      	mov	r4, r3
 8111df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8111dfc:	9100      	str	r1, [sp, #0]
 8111dfe:	462b      	mov	r3, r5
 8111e00:	4905      	ldr	r1, [pc, #20]	@ (8111e18 <__assert_func+0x34>)
 8111e02:	f001 f857 	bl	8112eb4 <fiprintf>
 8111e06:	f001 f9b1 	bl	811316c <abort>
 8111e0a:	4b04      	ldr	r3, [pc, #16]	@ (8111e1c <__assert_func+0x38>)
 8111e0c:	e7f4      	b.n	8111df8 <__assert_func+0x14>
 8111e0e:	bf00      	nop
 8111e10:	100000c8 	.word	0x100000c8
 8111e14:	08117885 	.word	0x08117885
 8111e18:	08117857 	.word	0x08117857
 8111e1c:	0811784a 	.word	0x0811784a

08111e20 <malloc>:
 8111e20:	4b02      	ldr	r3, [pc, #8]	@ (8111e2c <malloc+0xc>)
 8111e22:	4601      	mov	r1, r0
 8111e24:	6818      	ldr	r0, [r3, #0]
 8111e26:	f000 b82d 	b.w	8111e84 <_malloc_r>
 8111e2a:	bf00      	nop
 8111e2c:	100000c8 	.word	0x100000c8

08111e30 <free>:
 8111e30:	4b02      	ldr	r3, [pc, #8]	@ (8111e3c <free+0xc>)
 8111e32:	4601      	mov	r1, r0
 8111e34:	6818      	ldr	r0, [r3, #0]
 8111e36:	f001 bfef 	b.w	8113e18 <_free_r>
 8111e3a:	bf00      	nop
 8111e3c:	100000c8 	.word	0x100000c8

08111e40 <sbrk_aligned>:
 8111e40:	b570      	push	{r4, r5, r6, lr}
 8111e42:	4e0f      	ldr	r6, [pc, #60]	@ (8111e80 <sbrk_aligned+0x40>)
 8111e44:	460c      	mov	r4, r1
 8111e46:	6831      	ldr	r1, [r6, #0]
 8111e48:	4605      	mov	r5, r0
 8111e4a:	b911      	cbnz	r1, 8111e52 <sbrk_aligned+0x12>
 8111e4c:	f001 f92a 	bl	81130a4 <_sbrk_r>
 8111e50:	6030      	str	r0, [r6, #0]
 8111e52:	4621      	mov	r1, r4
 8111e54:	4628      	mov	r0, r5
 8111e56:	f001 f925 	bl	81130a4 <_sbrk_r>
 8111e5a:	1c43      	adds	r3, r0, #1
 8111e5c:	d103      	bne.n	8111e66 <sbrk_aligned+0x26>
 8111e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8111e62:	4620      	mov	r0, r4
 8111e64:	bd70      	pop	{r4, r5, r6, pc}
 8111e66:	1cc4      	adds	r4, r0, #3
 8111e68:	f024 0403 	bic.w	r4, r4, #3
 8111e6c:	42a0      	cmp	r0, r4
 8111e6e:	d0f8      	beq.n	8111e62 <sbrk_aligned+0x22>
 8111e70:	1a21      	subs	r1, r4, r0
 8111e72:	4628      	mov	r0, r5
 8111e74:	f001 f916 	bl	81130a4 <_sbrk_r>
 8111e78:	3001      	adds	r0, #1
 8111e7a:	d1f2      	bne.n	8111e62 <sbrk_aligned+0x22>
 8111e7c:	e7ef      	b.n	8111e5e <sbrk_aligned+0x1e>
 8111e7e:	bf00      	nop
 8111e80:	10005038 	.word	0x10005038

08111e84 <_malloc_r>:
 8111e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111e88:	1ccd      	adds	r5, r1, #3
 8111e8a:	f025 0503 	bic.w	r5, r5, #3
 8111e8e:	3508      	adds	r5, #8
 8111e90:	2d0c      	cmp	r5, #12
 8111e92:	bf38      	it	cc
 8111e94:	250c      	movcc	r5, #12
 8111e96:	2d00      	cmp	r5, #0
 8111e98:	4606      	mov	r6, r0
 8111e9a:	db01      	blt.n	8111ea0 <_malloc_r+0x1c>
 8111e9c:	42a9      	cmp	r1, r5
 8111e9e:	d904      	bls.n	8111eaa <_malloc_r+0x26>
 8111ea0:	230c      	movs	r3, #12
 8111ea2:	6033      	str	r3, [r6, #0]
 8111ea4:	2000      	movs	r0, #0
 8111ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8111f80 <_malloc_r+0xfc>
 8111eae:	f000 f869 	bl	8111f84 <__malloc_lock>
 8111eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8111eb6:	461c      	mov	r4, r3
 8111eb8:	bb44      	cbnz	r4, 8111f0c <_malloc_r+0x88>
 8111eba:	4629      	mov	r1, r5
 8111ebc:	4630      	mov	r0, r6
 8111ebe:	f7ff ffbf 	bl	8111e40 <sbrk_aligned>
 8111ec2:	1c43      	adds	r3, r0, #1
 8111ec4:	4604      	mov	r4, r0
 8111ec6:	d158      	bne.n	8111f7a <_malloc_r+0xf6>
 8111ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8111ecc:	4627      	mov	r7, r4
 8111ece:	2f00      	cmp	r7, #0
 8111ed0:	d143      	bne.n	8111f5a <_malloc_r+0xd6>
 8111ed2:	2c00      	cmp	r4, #0
 8111ed4:	d04b      	beq.n	8111f6e <_malloc_r+0xea>
 8111ed6:	6823      	ldr	r3, [r4, #0]
 8111ed8:	4639      	mov	r1, r7
 8111eda:	4630      	mov	r0, r6
 8111edc:	eb04 0903 	add.w	r9, r4, r3
 8111ee0:	f001 f8e0 	bl	81130a4 <_sbrk_r>
 8111ee4:	4581      	cmp	r9, r0
 8111ee6:	d142      	bne.n	8111f6e <_malloc_r+0xea>
 8111ee8:	6821      	ldr	r1, [r4, #0]
 8111eea:	1a6d      	subs	r5, r5, r1
 8111eec:	4629      	mov	r1, r5
 8111eee:	4630      	mov	r0, r6
 8111ef0:	f7ff ffa6 	bl	8111e40 <sbrk_aligned>
 8111ef4:	3001      	adds	r0, #1
 8111ef6:	d03a      	beq.n	8111f6e <_malloc_r+0xea>
 8111ef8:	6823      	ldr	r3, [r4, #0]
 8111efa:	442b      	add	r3, r5
 8111efc:	6023      	str	r3, [r4, #0]
 8111efe:	f8d8 3000 	ldr.w	r3, [r8]
 8111f02:	685a      	ldr	r2, [r3, #4]
 8111f04:	bb62      	cbnz	r2, 8111f60 <_malloc_r+0xdc>
 8111f06:	f8c8 7000 	str.w	r7, [r8]
 8111f0a:	e00f      	b.n	8111f2c <_malloc_r+0xa8>
 8111f0c:	6822      	ldr	r2, [r4, #0]
 8111f0e:	1b52      	subs	r2, r2, r5
 8111f10:	d420      	bmi.n	8111f54 <_malloc_r+0xd0>
 8111f12:	2a0b      	cmp	r2, #11
 8111f14:	d917      	bls.n	8111f46 <_malloc_r+0xc2>
 8111f16:	1961      	adds	r1, r4, r5
 8111f18:	42a3      	cmp	r3, r4
 8111f1a:	6025      	str	r5, [r4, #0]
 8111f1c:	bf18      	it	ne
 8111f1e:	6059      	strne	r1, [r3, #4]
 8111f20:	6863      	ldr	r3, [r4, #4]
 8111f22:	bf08      	it	eq
 8111f24:	f8c8 1000 	streq.w	r1, [r8]
 8111f28:	5162      	str	r2, [r4, r5]
 8111f2a:	604b      	str	r3, [r1, #4]
 8111f2c:	4630      	mov	r0, r6
 8111f2e:	f000 f82f 	bl	8111f90 <__malloc_unlock>
 8111f32:	f104 000b 	add.w	r0, r4, #11
 8111f36:	1d23      	adds	r3, r4, #4
 8111f38:	f020 0007 	bic.w	r0, r0, #7
 8111f3c:	1ac2      	subs	r2, r0, r3
 8111f3e:	bf1c      	itt	ne
 8111f40:	1a1b      	subne	r3, r3, r0
 8111f42:	50a3      	strne	r3, [r4, r2]
 8111f44:	e7af      	b.n	8111ea6 <_malloc_r+0x22>
 8111f46:	6862      	ldr	r2, [r4, #4]
 8111f48:	42a3      	cmp	r3, r4
 8111f4a:	bf0c      	ite	eq
 8111f4c:	f8c8 2000 	streq.w	r2, [r8]
 8111f50:	605a      	strne	r2, [r3, #4]
 8111f52:	e7eb      	b.n	8111f2c <_malloc_r+0xa8>
 8111f54:	4623      	mov	r3, r4
 8111f56:	6864      	ldr	r4, [r4, #4]
 8111f58:	e7ae      	b.n	8111eb8 <_malloc_r+0x34>
 8111f5a:	463c      	mov	r4, r7
 8111f5c:	687f      	ldr	r7, [r7, #4]
 8111f5e:	e7b6      	b.n	8111ece <_malloc_r+0x4a>
 8111f60:	461a      	mov	r2, r3
 8111f62:	685b      	ldr	r3, [r3, #4]
 8111f64:	42a3      	cmp	r3, r4
 8111f66:	d1fb      	bne.n	8111f60 <_malloc_r+0xdc>
 8111f68:	2300      	movs	r3, #0
 8111f6a:	6053      	str	r3, [r2, #4]
 8111f6c:	e7de      	b.n	8111f2c <_malloc_r+0xa8>
 8111f6e:	230c      	movs	r3, #12
 8111f70:	6033      	str	r3, [r6, #0]
 8111f72:	4630      	mov	r0, r6
 8111f74:	f000 f80c 	bl	8111f90 <__malloc_unlock>
 8111f78:	e794      	b.n	8111ea4 <_malloc_r+0x20>
 8111f7a:	6005      	str	r5, [r0, #0]
 8111f7c:	e7d6      	b.n	8111f2c <_malloc_r+0xa8>
 8111f7e:	bf00      	nop
 8111f80:	1000503c 	.word	0x1000503c

08111f84 <__malloc_lock>:
 8111f84:	4801      	ldr	r0, [pc, #4]	@ (8111f8c <__malloc_lock+0x8>)
 8111f86:	f001 b8da 	b.w	811313e <__retarget_lock_acquire_recursive>
 8111f8a:	bf00      	nop
 8111f8c:	10005180 	.word	0x10005180

08111f90 <__malloc_unlock>:
 8111f90:	4801      	ldr	r0, [pc, #4]	@ (8111f98 <__malloc_unlock+0x8>)
 8111f92:	f001 b8d5 	b.w	8113140 <__retarget_lock_release_recursive>
 8111f96:	bf00      	nop
 8111f98:	10005180 	.word	0x10005180

08111f9c <_strtol_l.constprop.0>:
 8111f9c:	2b24      	cmp	r3, #36	@ 0x24
 8111f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111fa2:	4686      	mov	lr, r0
 8111fa4:	4690      	mov	r8, r2
 8111fa6:	d801      	bhi.n	8111fac <_strtol_l.constprop.0+0x10>
 8111fa8:	2b01      	cmp	r3, #1
 8111faa:	d106      	bne.n	8111fba <_strtol_l.constprop.0+0x1e>
 8111fac:	f001 f89c 	bl	81130e8 <__errno>
 8111fb0:	2316      	movs	r3, #22
 8111fb2:	6003      	str	r3, [r0, #0]
 8111fb4:	2000      	movs	r0, #0
 8111fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111fba:	4834      	ldr	r0, [pc, #208]	@ (811208c <_strtol_l.constprop.0+0xf0>)
 8111fbc:	460d      	mov	r5, r1
 8111fbe:	462a      	mov	r2, r5
 8111fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8111fc4:	5d06      	ldrb	r6, [r0, r4]
 8111fc6:	f016 0608 	ands.w	r6, r6, #8
 8111fca:	d1f8      	bne.n	8111fbe <_strtol_l.constprop.0+0x22>
 8111fcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8111fce:	d12d      	bne.n	811202c <_strtol_l.constprop.0+0x90>
 8111fd0:	782c      	ldrb	r4, [r5, #0]
 8111fd2:	2601      	movs	r6, #1
 8111fd4:	1c95      	adds	r5, r2, #2
 8111fd6:	f033 0210 	bics.w	r2, r3, #16
 8111fda:	d109      	bne.n	8111ff0 <_strtol_l.constprop.0+0x54>
 8111fdc:	2c30      	cmp	r4, #48	@ 0x30
 8111fde:	d12a      	bne.n	8112036 <_strtol_l.constprop.0+0x9a>
 8111fe0:	782a      	ldrb	r2, [r5, #0]
 8111fe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8111fe6:	2a58      	cmp	r2, #88	@ 0x58
 8111fe8:	d125      	bne.n	8112036 <_strtol_l.constprop.0+0x9a>
 8111fea:	786c      	ldrb	r4, [r5, #1]
 8111fec:	2310      	movs	r3, #16
 8111fee:	3502      	adds	r5, #2
 8111ff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8111ff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8111ff8:	2200      	movs	r2, #0
 8111ffa:	fbbc f9f3 	udiv	r9, ip, r3
 8111ffe:	4610      	mov	r0, r2
 8112000:	fb03 ca19 	mls	sl, r3, r9, ip
 8112004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8112008:	2f09      	cmp	r7, #9
 811200a:	d81b      	bhi.n	8112044 <_strtol_l.constprop.0+0xa8>
 811200c:	463c      	mov	r4, r7
 811200e:	42a3      	cmp	r3, r4
 8112010:	dd27      	ble.n	8112062 <_strtol_l.constprop.0+0xc6>
 8112012:	1c57      	adds	r7, r2, #1
 8112014:	d007      	beq.n	8112026 <_strtol_l.constprop.0+0x8a>
 8112016:	4581      	cmp	r9, r0
 8112018:	d320      	bcc.n	811205c <_strtol_l.constprop.0+0xc0>
 811201a:	d101      	bne.n	8112020 <_strtol_l.constprop.0+0x84>
 811201c:	45a2      	cmp	sl, r4
 811201e:	db1d      	blt.n	811205c <_strtol_l.constprop.0+0xc0>
 8112020:	fb00 4003 	mla	r0, r0, r3, r4
 8112024:	2201      	movs	r2, #1
 8112026:	f815 4b01 	ldrb.w	r4, [r5], #1
 811202a:	e7eb      	b.n	8112004 <_strtol_l.constprop.0+0x68>
 811202c:	2c2b      	cmp	r4, #43	@ 0x2b
 811202e:	bf04      	itt	eq
 8112030:	782c      	ldrbeq	r4, [r5, #0]
 8112032:	1c95      	addeq	r5, r2, #2
 8112034:	e7cf      	b.n	8111fd6 <_strtol_l.constprop.0+0x3a>
 8112036:	2b00      	cmp	r3, #0
 8112038:	d1da      	bne.n	8111ff0 <_strtol_l.constprop.0+0x54>
 811203a:	2c30      	cmp	r4, #48	@ 0x30
 811203c:	bf0c      	ite	eq
 811203e:	2308      	moveq	r3, #8
 8112040:	230a      	movne	r3, #10
 8112042:	e7d5      	b.n	8111ff0 <_strtol_l.constprop.0+0x54>
 8112044:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8112048:	2f19      	cmp	r7, #25
 811204a:	d801      	bhi.n	8112050 <_strtol_l.constprop.0+0xb4>
 811204c:	3c37      	subs	r4, #55	@ 0x37
 811204e:	e7de      	b.n	811200e <_strtol_l.constprop.0+0x72>
 8112050:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8112054:	2f19      	cmp	r7, #25
 8112056:	d804      	bhi.n	8112062 <_strtol_l.constprop.0+0xc6>
 8112058:	3c57      	subs	r4, #87	@ 0x57
 811205a:	e7d8      	b.n	811200e <_strtol_l.constprop.0+0x72>
 811205c:	f04f 32ff 	mov.w	r2, #4294967295
 8112060:	e7e1      	b.n	8112026 <_strtol_l.constprop.0+0x8a>
 8112062:	1c53      	adds	r3, r2, #1
 8112064:	d108      	bne.n	8112078 <_strtol_l.constprop.0+0xdc>
 8112066:	2322      	movs	r3, #34	@ 0x22
 8112068:	f8ce 3000 	str.w	r3, [lr]
 811206c:	4660      	mov	r0, ip
 811206e:	f1b8 0f00 	cmp.w	r8, #0
 8112072:	d0a0      	beq.n	8111fb6 <_strtol_l.constprop.0+0x1a>
 8112074:	1e69      	subs	r1, r5, #1
 8112076:	e006      	b.n	8112086 <_strtol_l.constprop.0+0xea>
 8112078:	b106      	cbz	r6, 811207c <_strtol_l.constprop.0+0xe0>
 811207a:	4240      	negs	r0, r0
 811207c:	f1b8 0f00 	cmp.w	r8, #0
 8112080:	d099      	beq.n	8111fb6 <_strtol_l.constprop.0+0x1a>
 8112082:	2a00      	cmp	r2, #0
 8112084:	d1f6      	bne.n	8112074 <_strtol_l.constprop.0+0xd8>
 8112086:	f8c8 1000 	str.w	r1, [r8]
 811208a:	e794      	b.n	8111fb6 <_strtol_l.constprop.0+0x1a>
 811208c:	08117887 	.word	0x08117887

08112090 <_strtol_r>:
 8112090:	f7ff bf84 	b.w	8111f9c <_strtol_l.constprop.0>

08112094 <__cvt>:
 8112094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8112098:	ec57 6b10 	vmov	r6, r7, d0
 811209c:	2f00      	cmp	r7, #0
 811209e:	460c      	mov	r4, r1
 81120a0:	4619      	mov	r1, r3
 81120a2:	463b      	mov	r3, r7
 81120a4:	bfbb      	ittet	lt
 81120a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 81120aa:	461f      	movlt	r7, r3
 81120ac:	2300      	movge	r3, #0
 81120ae:	232d      	movlt	r3, #45	@ 0x2d
 81120b0:	700b      	strb	r3, [r1, #0]
 81120b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81120b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81120b8:	4691      	mov	r9, r2
 81120ba:	f023 0820 	bic.w	r8, r3, #32
 81120be:	bfbc      	itt	lt
 81120c0:	4632      	movlt	r2, r6
 81120c2:	4616      	movlt	r6, r2
 81120c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81120c8:	d005      	beq.n	81120d6 <__cvt+0x42>
 81120ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81120ce:	d100      	bne.n	81120d2 <__cvt+0x3e>
 81120d0:	3401      	adds	r4, #1
 81120d2:	2102      	movs	r1, #2
 81120d4:	e000      	b.n	81120d8 <__cvt+0x44>
 81120d6:	2103      	movs	r1, #3
 81120d8:	ab03      	add	r3, sp, #12
 81120da:	9301      	str	r3, [sp, #4]
 81120dc:	ab02      	add	r3, sp, #8
 81120de:	9300      	str	r3, [sp, #0]
 81120e0:	ec47 6b10 	vmov	d0, r6, r7
 81120e4:	4653      	mov	r3, sl
 81120e6:	4622      	mov	r2, r4
 81120e8:	f001 f8d2 	bl	8113290 <_dtoa_r>
 81120ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 81120f0:	4605      	mov	r5, r0
 81120f2:	d119      	bne.n	8112128 <__cvt+0x94>
 81120f4:	f019 0f01 	tst.w	r9, #1
 81120f8:	d00e      	beq.n	8112118 <__cvt+0x84>
 81120fa:	eb00 0904 	add.w	r9, r0, r4
 81120fe:	2200      	movs	r2, #0
 8112100:	2300      	movs	r3, #0
 8112102:	4630      	mov	r0, r6
 8112104:	4639      	mov	r1, r7
 8112106:	f7ee fd77 	bl	8100bf8 <__aeabi_dcmpeq>
 811210a:	b108      	cbz	r0, 8112110 <__cvt+0x7c>
 811210c:	f8cd 900c 	str.w	r9, [sp, #12]
 8112110:	2230      	movs	r2, #48	@ 0x30
 8112112:	9b03      	ldr	r3, [sp, #12]
 8112114:	454b      	cmp	r3, r9
 8112116:	d31e      	bcc.n	8112156 <__cvt+0xc2>
 8112118:	9b03      	ldr	r3, [sp, #12]
 811211a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811211c:	1b5b      	subs	r3, r3, r5
 811211e:	4628      	mov	r0, r5
 8112120:	6013      	str	r3, [r2, #0]
 8112122:	b004      	add	sp, #16
 8112124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 811212c:	eb00 0904 	add.w	r9, r0, r4
 8112130:	d1e5      	bne.n	81120fe <__cvt+0x6a>
 8112132:	7803      	ldrb	r3, [r0, #0]
 8112134:	2b30      	cmp	r3, #48	@ 0x30
 8112136:	d10a      	bne.n	811214e <__cvt+0xba>
 8112138:	2200      	movs	r2, #0
 811213a:	2300      	movs	r3, #0
 811213c:	4630      	mov	r0, r6
 811213e:	4639      	mov	r1, r7
 8112140:	f7ee fd5a 	bl	8100bf8 <__aeabi_dcmpeq>
 8112144:	b918      	cbnz	r0, 811214e <__cvt+0xba>
 8112146:	f1c4 0401 	rsb	r4, r4, #1
 811214a:	f8ca 4000 	str.w	r4, [sl]
 811214e:	f8da 3000 	ldr.w	r3, [sl]
 8112152:	4499      	add	r9, r3
 8112154:	e7d3      	b.n	81120fe <__cvt+0x6a>
 8112156:	1c59      	adds	r1, r3, #1
 8112158:	9103      	str	r1, [sp, #12]
 811215a:	701a      	strb	r2, [r3, #0]
 811215c:	e7d9      	b.n	8112112 <__cvt+0x7e>

0811215e <__exponent>:
 811215e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8112160:	2900      	cmp	r1, #0
 8112162:	bfba      	itte	lt
 8112164:	4249      	neglt	r1, r1
 8112166:	232d      	movlt	r3, #45	@ 0x2d
 8112168:	232b      	movge	r3, #43	@ 0x2b
 811216a:	2909      	cmp	r1, #9
 811216c:	7002      	strb	r2, [r0, #0]
 811216e:	7043      	strb	r3, [r0, #1]
 8112170:	dd29      	ble.n	81121c6 <__exponent+0x68>
 8112172:	f10d 0307 	add.w	r3, sp, #7
 8112176:	461d      	mov	r5, r3
 8112178:	270a      	movs	r7, #10
 811217a:	461a      	mov	r2, r3
 811217c:	fbb1 f6f7 	udiv	r6, r1, r7
 8112180:	fb07 1416 	mls	r4, r7, r6, r1
 8112184:	3430      	adds	r4, #48	@ 0x30
 8112186:	f802 4c01 	strb.w	r4, [r2, #-1]
 811218a:	460c      	mov	r4, r1
 811218c:	2c63      	cmp	r4, #99	@ 0x63
 811218e:	f103 33ff 	add.w	r3, r3, #4294967295
 8112192:	4631      	mov	r1, r6
 8112194:	dcf1      	bgt.n	811217a <__exponent+0x1c>
 8112196:	3130      	adds	r1, #48	@ 0x30
 8112198:	1e94      	subs	r4, r2, #2
 811219a:	f803 1c01 	strb.w	r1, [r3, #-1]
 811219e:	1c41      	adds	r1, r0, #1
 81121a0:	4623      	mov	r3, r4
 81121a2:	42ab      	cmp	r3, r5
 81121a4:	d30a      	bcc.n	81121bc <__exponent+0x5e>
 81121a6:	f10d 0309 	add.w	r3, sp, #9
 81121aa:	1a9b      	subs	r3, r3, r2
 81121ac:	42ac      	cmp	r4, r5
 81121ae:	bf88      	it	hi
 81121b0:	2300      	movhi	r3, #0
 81121b2:	3302      	adds	r3, #2
 81121b4:	4403      	add	r3, r0
 81121b6:	1a18      	subs	r0, r3, r0
 81121b8:	b003      	add	sp, #12
 81121ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81121bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 81121c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 81121c4:	e7ed      	b.n	81121a2 <__exponent+0x44>
 81121c6:	2330      	movs	r3, #48	@ 0x30
 81121c8:	3130      	adds	r1, #48	@ 0x30
 81121ca:	7083      	strb	r3, [r0, #2]
 81121cc:	70c1      	strb	r1, [r0, #3]
 81121ce:	1d03      	adds	r3, r0, #4
 81121d0:	e7f1      	b.n	81121b6 <__exponent+0x58>
	...

081121d4 <_printf_float>:
 81121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81121d8:	b08d      	sub	sp, #52	@ 0x34
 81121da:	460c      	mov	r4, r1
 81121dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81121e0:	4616      	mov	r6, r2
 81121e2:	461f      	mov	r7, r3
 81121e4:	4605      	mov	r5, r0
 81121e6:	f000 ff25 	bl	8113034 <_localeconv_r>
 81121ea:	6803      	ldr	r3, [r0, #0]
 81121ec:	9304      	str	r3, [sp, #16]
 81121ee:	4618      	mov	r0, r3
 81121f0:	f7ee f8d6 	bl	81003a0 <strlen>
 81121f4:	2300      	movs	r3, #0
 81121f6:	930a      	str	r3, [sp, #40]	@ 0x28
 81121f8:	f8d8 3000 	ldr.w	r3, [r8]
 81121fc:	9005      	str	r0, [sp, #20]
 81121fe:	3307      	adds	r3, #7
 8112200:	f023 0307 	bic.w	r3, r3, #7
 8112204:	f103 0208 	add.w	r2, r3, #8
 8112208:	f894 a018 	ldrb.w	sl, [r4, #24]
 811220c:	f8d4 b000 	ldr.w	fp, [r4]
 8112210:	f8c8 2000 	str.w	r2, [r8]
 8112214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8112218:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 811221c:	9307      	str	r3, [sp, #28]
 811221e:	f8cd 8018 	str.w	r8, [sp, #24]
 8112222:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8112226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811222a:	4b9c      	ldr	r3, [pc, #624]	@ (811249c <_printf_float+0x2c8>)
 811222c:	f04f 32ff 	mov.w	r2, #4294967295
 8112230:	f7ee fd14 	bl	8100c5c <__aeabi_dcmpun>
 8112234:	bb70      	cbnz	r0, 8112294 <_printf_float+0xc0>
 8112236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811223a:	4b98      	ldr	r3, [pc, #608]	@ (811249c <_printf_float+0x2c8>)
 811223c:	f04f 32ff 	mov.w	r2, #4294967295
 8112240:	f7ee fcee 	bl	8100c20 <__aeabi_dcmple>
 8112244:	bb30      	cbnz	r0, 8112294 <_printf_float+0xc0>
 8112246:	2200      	movs	r2, #0
 8112248:	2300      	movs	r3, #0
 811224a:	4640      	mov	r0, r8
 811224c:	4649      	mov	r1, r9
 811224e:	f7ee fcdd 	bl	8100c0c <__aeabi_dcmplt>
 8112252:	b110      	cbz	r0, 811225a <_printf_float+0x86>
 8112254:	232d      	movs	r3, #45	@ 0x2d
 8112256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811225a:	4a91      	ldr	r2, [pc, #580]	@ (81124a0 <_printf_float+0x2cc>)
 811225c:	4b91      	ldr	r3, [pc, #580]	@ (81124a4 <_printf_float+0x2d0>)
 811225e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8112262:	bf94      	ite	ls
 8112264:	4690      	movls	r8, r2
 8112266:	4698      	movhi	r8, r3
 8112268:	2303      	movs	r3, #3
 811226a:	6123      	str	r3, [r4, #16]
 811226c:	f02b 0304 	bic.w	r3, fp, #4
 8112270:	6023      	str	r3, [r4, #0]
 8112272:	f04f 0900 	mov.w	r9, #0
 8112276:	9700      	str	r7, [sp, #0]
 8112278:	4633      	mov	r3, r6
 811227a:	aa0b      	add	r2, sp, #44	@ 0x2c
 811227c:	4621      	mov	r1, r4
 811227e:	4628      	mov	r0, r5
 8112280:	f000 f9d2 	bl	8112628 <_printf_common>
 8112284:	3001      	adds	r0, #1
 8112286:	f040 808d 	bne.w	81123a4 <_printf_float+0x1d0>
 811228a:	f04f 30ff 	mov.w	r0, #4294967295
 811228e:	b00d      	add	sp, #52	@ 0x34
 8112290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112294:	4642      	mov	r2, r8
 8112296:	464b      	mov	r3, r9
 8112298:	4640      	mov	r0, r8
 811229a:	4649      	mov	r1, r9
 811229c:	f7ee fcde 	bl	8100c5c <__aeabi_dcmpun>
 81122a0:	b140      	cbz	r0, 81122b4 <_printf_float+0xe0>
 81122a2:	464b      	mov	r3, r9
 81122a4:	2b00      	cmp	r3, #0
 81122a6:	bfbc      	itt	lt
 81122a8:	232d      	movlt	r3, #45	@ 0x2d
 81122aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 81122ae:	4a7e      	ldr	r2, [pc, #504]	@ (81124a8 <_printf_float+0x2d4>)
 81122b0:	4b7e      	ldr	r3, [pc, #504]	@ (81124ac <_printf_float+0x2d8>)
 81122b2:	e7d4      	b.n	811225e <_printf_float+0x8a>
 81122b4:	6863      	ldr	r3, [r4, #4]
 81122b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 81122ba:	9206      	str	r2, [sp, #24]
 81122bc:	1c5a      	adds	r2, r3, #1
 81122be:	d13b      	bne.n	8112338 <_printf_float+0x164>
 81122c0:	2306      	movs	r3, #6
 81122c2:	6063      	str	r3, [r4, #4]
 81122c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 81122c8:	2300      	movs	r3, #0
 81122ca:	6022      	str	r2, [r4, #0]
 81122cc:	9303      	str	r3, [sp, #12]
 81122ce:	ab0a      	add	r3, sp, #40	@ 0x28
 81122d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 81122d4:	ab09      	add	r3, sp, #36	@ 0x24
 81122d6:	9300      	str	r3, [sp, #0]
 81122d8:	6861      	ldr	r1, [r4, #4]
 81122da:	ec49 8b10 	vmov	d0, r8, r9
 81122de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 81122e2:	4628      	mov	r0, r5
 81122e4:	f7ff fed6 	bl	8112094 <__cvt>
 81122e8:	9b06      	ldr	r3, [sp, #24]
 81122ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81122ec:	2b47      	cmp	r3, #71	@ 0x47
 81122ee:	4680      	mov	r8, r0
 81122f0:	d129      	bne.n	8112346 <_printf_float+0x172>
 81122f2:	1cc8      	adds	r0, r1, #3
 81122f4:	db02      	blt.n	81122fc <_printf_float+0x128>
 81122f6:	6863      	ldr	r3, [r4, #4]
 81122f8:	4299      	cmp	r1, r3
 81122fa:	dd41      	ble.n	8112380 <_printf_float+0x1ac>
 81122fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8112300:	fa5f fa8a 	uxtb.w	sl, sl
 8112304:	3901      	subs	r1, #1
 8112306:	4652      	mov	r2, sl
 8112308:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 811230c:	9109      	str	r1, [sp, #36]	@ 0x24
 811230e:	f7ff ff26 	bl	811215e <__exponent>
 8112312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8112314:	1813      	adds	r3, r2, r0
 8112316:	2a01      	cmp	r2, #1
 8112318:	4681      	mov	r9, r0
 811231a:	6123      	str	r3, [r4, #16]
 811231c:	dc02      	bgt.n	8112324 <_printf_float+0x150>
 811231e:	6822      	ldr	r2, [r4, #0]
 8112320:	07d2      	lsls	r2, r2, #31
 8112322:	d501      	bpl.n	8112328 <_printf_float+0x154>
 8112324:	3301      	adds	r3, #1
 8112326:	6123      	str	r3, [r4, #16]
 8112328:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 811232c:	2b00      	cmp	r3, #0
 811232e:	d0a2      	beq.n	8112276 <_printf_float+0xa2>
 8112330:	232d      	movs	r3, #45	@ 0x2d
 8112332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8112336:	e79e      	b.n	8112276 <_printf_float+0xa2>
 8112338:	9a06      	ldr	r2, [sp, #24]
 811233a:	2a47      	cmp	r2, #71	@ 0x47
 811233c:	d1c2      	bne.n	81122c4 <_printf_float+0xf0>
 811233e:	2b00      	cmp	r3, #0
 8112340:	d1c0      	bne.n	81122c4 <_printf_float+0xf0>
 8112342:	2301      	movs	r3, #1
 8112344:	e7bd      	b.n	81122c2 <_printf_float+0xee>
 8112346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 811234a:	d9db      	bls.n	8112304 <_printf_float+0x130>
 811234c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8112350:	d118      	bne.n	8112384 <_printf_float+0x1b0>
 8112352:	2900      	cmp	r1, #0
 8112354:	6863      	ldr	r3, [r4, #4]
 8112356:	dd0b      	ble.n	8112370 <_printf_float+0x19c>
 8112358:	6121      	str	r1, [r4, #16]
 811235a:	b913      	cbnz	r3, 8112362 <_printf_float+0x18e>
 811235c:	6822      	ldr	r2, [r4, #0]
 811235e:	07d0      	lsls	r0, r2, #31
 8112360:	d502      	bpl.n	8112368 <_printf_float+0x194>
 8112362:	3301      	adds	r3, #1
 8112364:	440b      	add	r3, r1
 8112366:	6123      	str	r3, [r4, #16]
 8112368:	65a1      	str	r1, [r4, #88]	@ 0x58
 811236a:	f04f 0900 	mov.w	r9, #0
 811236e:	e7db      	b.n	8112328 <_printf_float+0x154>
 8112370:	b913      	cbnz	r3, 8112378 <_printf_float+0x1a4>
 8112372:	6822      	ldr	r2, [r4, #0]
 8112374:	07d2      	lsls	r2, r2, #31
 8112376:	d501      	bpl.n	811237c <_printf_float+0x1a8>
 8112378:	3302      	adds	r3, #2
 811237a:	e7f4      	b.n	8112366 <_printf_float+0x192>
 811237c:	2301      	movs	r3, #1
 811237e:	e7f2      	b.n	8112366 <_printf_float+0x192>
 8112380:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8112384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112386:	4299      	cmp	r1, r3
 8112388:	db05      	blt.n	8112396 <_printf_float+0x1c2>
 811238a:	6823      	ldr	r3, [r4, #0]
 811238c:	6121      	str	r1, [r4, #16]
 811238e:	07d8      	lsls	r0, r3, #31
 8112390:	d5ea      	bpl.n	8112368 <_printf_float+0x194>
 8112392:	1c4b      	adds	r3, r1, #1
 8112394:	e7e7      	b.n	8112366 <_printf_float+0x192>
 8112396:	2900      	cmp	r1, #0
 8112398:	bfd4      	ite	le
 811239a:	f1c1 0202 	rsble	r2, r1, #2
 811239e:	2201      	movgt	r2, #1
 81123a0:	4413      	add	r3, r2
 81123a2:	e7e0      	b.n	8112366 <_printf_float+0x192>
 81123a4:	6823      	ldr	r3, [r4, #0]
 81123a6:	055a      	lsls	r2, r3, #21
 81123a8:	d407      	bmi.n	81123ba <_printf_float+0x1e6>
 81123aa:	6923      	ldr	r3, [r4, #16]
 81123ac:	4642      	mov	r2, r8
 81123ae:	4631      	mov	r1, r6
 81123b0:	4628      	mov	r0, r5
 81123b2:	47b8      	blx	r7
 81123b4:	3001      	adds	r0, #1
 81123b6:	d12b      	bne.n	8112410 <_printf_float+0x23c>
 81123b8:	e767      	b.n	811228a <_printf_float+0xb6>
 81123ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81123be:	f240 80dd 	bls.w	811257c <_printf_float+0x3a8>
 81123c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81123c6:	2200      	movs	r2, #0
 81123c8:	2300      	movs	r3, #0
 81123ca:	f7ee fc15 	bl	8100bf8 <__aeabi_dcmpeq>
 81123ce:	2800      	cmp	r0, #0
 81123d0:	d033      	beq.n	811243a <_printf_float+0x266>
 81123d2:	4a37      	ldr	r2, [pc, #220]	@ (81124b0 <_printf_float+0x2dc>)
 81123d4:	2301      	movs	r3, #1
 81123d6:	4631      	mov	r1, r6
 81123d8:	4628      	mov	r0, r5
 81123da:	47b8      	blx	r7
 81123dc:	3001      	adds	r0, #1
 81123de:	f43f af54 	beq.w	811228a <_printf_float+0xb6>
 81123e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 81123e6:	4543      	cmp	r3, r8
 81123e8:	db02      	blt.n	81123f0 <_printf_float+0x21c>
 81123ea:	6823      	ldr	r3, [r4, #0]
 81123ec:	07d8      	lsls	r0, r3, #31
 81123ee:	d50f      	bpl.n	8112410 <_printf_float+0x23c>
 81123f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81123f4:	4631      	mov	r1, r6
 81123f6:	4628      	mov	r0, r5
 81123f8:	47b8      	blx	r7
 81123fa:	3001      	adds	r0, #1
 81123fc:	f43f af45 	beq.w	811228a <_printf_float+0xb6>
 8112400:	f04f 0900 	mov.w	r9, #0
 8112404:	f108 38ff 	add.w	r8, r8, #4294967295
 8112408:	f104 0a1a 	add.w	sl, r4, #26
 811240c:	45c8      	cmp	r8, r9
 811240e:	dc09      	bgt.n	8112424 <_printf_float+0x250>
 8112410:	6823      	ldr	r3, [r4, #0]
 8112412:	079b      	lsls	r3, r3, #30
 8112414:	f100 8103 	bmi.w	811261e <_printf_float+0x44a>
 8112418:	68e0      	ldr	r0, [r4, #12]
 811241a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 811241c:	4298      	cmp	r0, r3
 811241e:	bfb8      	it	lt
 8112420:	4618      	movlt	r0, r3
 8112422:	e734      	b.n	811228e <_printf_float+0xba>
 8112424:	2301      	movs	r3, #1
 8112426:	4652      	mov	r2, sl
 8112428:	4631      	mov	r1, r6
 811242a:	4628      	mov	r0, r5
 811242c:	47b8      	blx	r7
 811242e:	3001      	adds	r0, #1
 8112430:	f43f af2b 	beq.w	811228a <_printf_float+0xb6>
 8112434:	f109 0901 	add.w	r9, r9, #1
 8112438:	e7e8      	b.n	811240c <_printf_float+0x238>
 811243a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811243c:	2b00      	cmp	r3, #0
 811243e:	dc39      	bgt.n	81124b4 <_printf_float+0x2e0>
 8112440:	4a1b      	ldr	r2, [pc, #108]	@ (81124b0 <_printf_float+0x2dc>)
 8112442:	2301      	movs	r3, #1
 8112444:	4631      	mov	r1, r6
 8112446:	4628      	mov	r0, r5
 8112448:	47b8      	blx	r7
 811244a:	3001      	adds	r0, #1
 811244c:	f43f af1d 	beq.w	811228a <_printf_float+0xb6>
 8112450:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8112454:	ea59 0303 	orrs.w	r3, r9, r3
 8112458:	d102      	bne.n	8112460 <_printf_float+0x28c>
 811245a:	6823      	ldr	r3, [r4, #0]
 811245c:	07d9      	lsls	r1, r3, #31
 811245e:	d5d7      	bpl.n	8112410 <_printf_float+0x23c>
 8112460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8112464:	4631      	mov	r1, r6
 8112466:	4628      	mov	r0, r5
 8112468:	47b8      	blx	r7
 811246a:	3001      	adds	r0, #1
 811246c:	f43f af0d 	beq.w	811228a <_printf_float+0xb6>
 8112470:	f04f 0a00 	mov.w	sl, #0
 8112474:	f104 0b1a 	add.w	fp, r4, #26
 8112478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811247a:	425b      	negs	r3, r3
 811247c:	4553      	cmp	r3, sl
 811247e:	dc01      	bgt.n	8112484 <_printf_float+0x2b0>
 8112480:	464b      	mov	r3, r9
 8112482:	e793      	b.n	81123ac <_printf_float+0x1d8>
 8112484:	2301      	movs	r3, #1
 8112486:	465a      	mov	r2, fp
 8112488:	4631      	mov	r1, r6
 811248a:	4628      	mov	r0, r5
 811248c:	47b8      	blx	r7
 811248e:	3001      	adds	r0, #1
 8112490:	f43f aefb 	beq.w	811228a <_printf_float+0xb6>
 8112494:	f10a 0a01 	add.w	sl, sl, #1
 8112498:	e7ee      	b.n	8112478 <_printf_float+0x2a4>
 811249a:	bf00      	nop
 811249c:	7fefffff 	.word	0x7fefffff
 81124a0:	08117987 	.word	0x08117987
 81124a4:	0811798b 	.word	0x0811798b
 81124a8:	0811798f 	.word	0x0811798f
 81124ac:	08117993 	.word	0x08117993
 81124b0:	08117997 	.word	0x08117997
 81124b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81124b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81124ba:	4553      	cmp	r3, sl
 81124bc:	bfa8      	it	ge
 81124be:	4653      	movge	r3, sl
 81124c0:	2b00      	cmp	r3, #0
 81124c2:	4699      	mov	r9, r3
 81124c4:	dc36      	bgt.n	8112534 <_printf_float+0x360>
 81124c6:	f04f 0b00 	mov.w	fp, #0
 81124ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81124ce:	f104 021a 	add.w	r2, r4, #26
 81124d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81124d4:	9306      	str	r3, [sp, #24]
 81124d6:	eba3 0309 	sub.w	r3, r3, r9
 81124da:	455b      	cmp	r3, fp
 81124dc:	dc31      	bgt.n	8112542 <_printf_float+0x36e>
 81124de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81124e0:	459a      	cmp	sl, r3
 81124e2:	dc3a      	bgt.n	811255a <_printf_float+0x386>
 81124e4:	6823      	ldr	r3, [r4, #0]
 81124e6:	07da      	lsls	r2, r3, #31
 81124e8:	d437      	bmi.n	811255a <_printf_float+0x386>
 81124ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81124ec:	ebaa 0903 	sub.w	r9, sl, r3
 81124f0:	9b06      	ldr	r3, [sp, #24]
 81124f2:	ebaa 0303 	sub.w	r3, sl, r3
 81124f6:	4599      	cmp	r9, r3
 81124f8:	bfa8      	it	ge
 81124fa:	4699      	movge	r9, r3
 81124fc:	f1b9 0f00 	cmp.w	r9, #0
 8112500:	dc33      	bgt.n	811256a <_printf_float+0x396>
 8112502:	f04f 0800 	mov.w	r8, #0
 8112506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811250a:	f104 0b1a 	add.w	fp, r4, #26
 811250e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112510:	ebaa 0303 	sub.w	r3, sl, r3
 8112514:	eba3 0309 	sub.w	r3, r3, r9
 8112518:	4543      	cmp	r3, r8
 811251a:	f77f af79 	ble.w	8112410 <_printf_float+0x23c>
 811251e:	2301      	movs	r3, #1
 8112520:	465a      	mov	r2, fp
 8112522:	4631      	mov	r1, r6
 8112524:	4628      	mov	r0, r5
 8112526:	47b8      	blx	r7
 8112528:	3001      	adds	r0, #1
 811252a:	f43f aeae 	beq.w	811228a <_printf_float+0xb6>
 811252e:	f108 0801 	add.w	r8, r8, #1
 8112532:	e7ec      	b.n	811250e <_printf_float+0x33a>
 8112534:	4642      	mov	r2, r8
 8112536:	4631      	mov	r1, r6
 8112538:	4628      	mov	r0, r5
 811253a:	47b8      	blx	r7
 811253c:	3001      	adds	r0, #1
 811253e:	d1c2      	bne.n	81124c6 <_printf_float+0x2f2>
 8112540:	e6a3      	b.n	811228a <_printf_float+0xb6>
 8112542:	2301      	movs	r3, #1
 8112544:	4631      	mov	r1, r6
 8112546:	4628      	mov	r0, r5
 8112548:	9206      	str	r2, [sp, #24]
 811254a:	47b8      	blx	r7
 811254c:	3001      	adds	r0, #1
 811254e:	f43f ae9c 	beq.w	811228a <_printf_float+0xb6>
 8112552:	9a06      	ldr	r2, [sp, #24]
 8112554:	f10b 0b01 	add.w	fp, fp, #1
 8112558:	e7bb      	b.n	81124d2 <_printf_float+0x2fe>
 811255a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811255e:	4631      	mov	r1, r6
 8112560:	4628      	mov	r0, r5
 8112562:	47b8      	blx	r7
 8112564:	3001      	adds	r0, #1
 8112566:	d1c0      	bne.n	81124ea <_printf_float+0x316>
 8112568:	e68f      	b.n	811228a <_printf_float+0xb6>
 811256a:	9a06      	ldr	r2, [sp, #24]
 811256c:	464b      	mov	r3, r9
 811256e:	4442      	add	r2, r8
 8112570:	4631      	mov	r1, r6
 8112572:	4628      	mov	r0, r5
 8112574:	47b8      	blx	r7
 8112576:	3001      	adds	r0, #1
 8112578:	d1c3      	bne.n	8112502 <_printf_float+0x32e>
 811257a:	e686      	b.n	811228a <_printf_float+0xb6>
 811257c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8112580:	f1ba 0f01 	cmp.w	sl, #1
 8112584:	dc01      	bgt.n	811258a <_printf_float+0x3b6>
 8112586:	07db      	lsls	r3, r3, #31
 8112588:	d536      	bpl.n	81125f8 <_printf_float+0x424>
 811258a:	2301      	movs	r3, #1
 811258c:	4642      	mov	r2, r8
 811258e:	4631      	mov	r1, r6
 8112590:	4628      	mov	r0, r5
 8112592:	47b8      	blx	r7
 8112594:	3001      	adds	r0, #1
 8112596:	f43f ae78 	beq.w	811228a <_printf_float+0xb6>
 811259a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811259e:	4631      	mov	r1, r6
 81125a0:	4628      	mov	r0, r5
 81125a2:	47b8      	blx	r7
 81125a4:	3001      	adds	r0, #1
 81125a6:	f43f ae70 	beq.w	811228a <_printf_float+0xb6>
 81125aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81125ae:	2200      	movs	r2, #0
 81125b0:	2300      	movs	r3, #0
 81125b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81125b6:	f7ee fb1f 	bl	8100bf8 <__aeabi_dcmpeq>
 81125ba:	b9c0      	cbnz	r0, 81125ee <_printf_float+0x41a>
 81125bc:	4653      	mov	r3, sl
 81125be:	f108 0201 	add.w	r2, r8, #1
 81125c2:	4631      	mov	r1, r6
 81125c4:	4628      	mov	r0, r5
 81125c6:	47b8      	blx	r7
 81125c8:	3001      	adds	r0, #1
 81125ca:	d10c      	bne.n	81125e6 <_printf_float+0x412>
 81125cc:	e65d      	b.n	811228a <_printf_float+0xb6>
 81125ce:	2301      	movs	r3, #1
 81125d0:	465a      	mov	r2, fp
 81125d2:	4631      	mov	r1, r6
 81125d4:	4628      	mov	r0, r5
 81125d6:	47b8      	blx	r7
 81125d8:	3001      	adds	r0, #1
 81125da:	f43f ae56 	beq.w	811228a <_printf_float+0xb6>
 81125de:	f108 0801 	add.w	r8, r8, #1
 81125e2:	45d0      	cmp	r8, sl
 81125e4:	dbf3      	blt.n	81125ce <_printf_float+0x3fa>
 81125e6:	464b      	mov	r3, r9
 81125e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 81125ec:	e6df      	b.n	81123ae <_printf_float+0x1da>
 81125ee:	f04f 0800 	mov.w	r8, #0
 81125f2:	f104 0b1a 	add.w	fp, r4, #26
 81125f6:	e7f4      	b.n	81125e2 <_printf_float+0x40e>
 81125f8:	2301      	movs	r3, #1
 81125fa:	4642      	mov	r2, r8
 81125fc:	e7e1      	b.n	81125c2 <_printf_float+0x3ee>
 81125fe:	2301      	movs	r3, #1
 8112600:	464a      	mov	r2, r9
 8112602:	4631      	mov	r1, r6
 8112604:	4628      	mov	r0, r5
 8112606:	47b8      	blx	r7
 8112608:	3001      	adds	r0, #1
 811260a:	f43f ae3e 	beq.w	811228a <_printf_float+0xb6>
 811260e:	f108 0801 	add.w	r8, r8, #1
 8112612:	68e3      	ldr	r3, [r4, #12]
 8112614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8112616:	1a5b      	subs	r3, r3, r1
 8112618:	4543      	cmp	r3, r8
 811261a:	dcf0      	bgt.n	81125fe <_printf_float+0x42a>
 811261c:	e6fc      	b.n	8112418 <_printf_float+0x244>
 811261e:	f04f 0800 	mov.w	r8, #0
 8112622:	f104 0919 	add.w	r9, r4, #25
 8112626:	e7f4      	b.n	8112612 <_printf_float+0x43e>

08112628 <_printf_common>:
 8112628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811262c:	4616      	mov	r6, r2
 811262e:	4698      	mov	r8, r3
 8112630:	688a      	ldr	r2, [r1, #8]
 8112632:	690b      	ldr	r3, [r1, #16]
 8112634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8112638:	4293      	cmp	r3, r2
 811263a:	bfb8      	it	lt
 811263c:	4613      	movlt	r3, r2
 811263e:	6033      	str	r3, [r6, #0]
 8112640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8112644:	4607      	mov	r7, r0
 8112646:	460c      	mov	r4, r1
 8112648:	b10a      	cbz	r2, 811264e <_printf_common+0x26>
 811264a:	3301      	adds	r3, #1
 811264c:	6033      	str	r3, [r6, #0]
 811264e:	6823      	ldr	r3, [r4, #0]
 8112650:	0699      	lsls	r1, r3, #26
 8112652:	bf42      	ittt	mi
 8112654:	6833      	ldrmi	r3, [r6, #0]
 8112656:	3302      	addmi	r3, #2
 8112658:	6033      	strmi	r3, [r6, #0]
 811265a:	6825      	ldr	r5, [r4, #0]
 811265c:	f015 0506 	ands.w	r5, r5, #6
 8112660:	d106      	bne.n	8112670 <_printf_common+0x48>
 8112662:	f104 0a19 	add.w	sl, r4, #25
 8112666:	68e3      	ldr	r3, [r4, #12]
 8112668:	6832      	ldr	r2, [r6, #0]
 811266a:	1a9b      	subs	r3, r3, r2
 811266c:	42ab      	cmp	r3, r5
 811266e:	dc26      	bgt.n	81126be <_printf_common+0x96>
 8112670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8112674:	6822      	ldr	r2, [r4, #0]
 8112676:	3b00      	subs	r3, #0
 8112678:	bf18      	it	ne
 811267a:	2301      	movne	r3, #1
 811267c:	0692      	lsls	r2, r2, #26
 811267e:	d42b      	bmi.n	81126d8 <_printf_common+0xb0>
 8112680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8112684:	4641      	mov	r1, r8
 8112686:	4638      	mov	r0, r7
 8112688:	47c8      	blx	r9
 811268a:	3001      	adds	r0, #1
 811268c:	d01e      	beq.n	81126cc <_printf_common+0xa4>
 811268e:	6823      	ldr	r3, [r4, #0]
 8112690:	6922      	ldr	r2, [r4, #16]
 8112692:	f003 0306 	and.w	r3, r3, #6
 8112696:	2b04      	cmp	r3, #4
 8112698:	bf02      	ittt	eq
 811269a:	68e5      	ldreq	r5, [r4, #12]
 811269c:	6833      	ldreq	r3, [r6, #0]
 811269e:	1aed      	subeq	r5, r5, r3
 81126a0:	68a3      	ldr	r3, [r4, #8]
 81126a2:	bf0c      	ite	eq
 81126a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81126a8:	2500      	movne	r5, #0
 81126aa:	4293      	cmp	r3, r2
 81126ac:	bfc4      	itt	gt
 81126ae:	1a9b      	subgt	r3, r3, r2
 81126b0:	18ed      	addgt	r5, r5, r3
 81126b2:	2600      	movs	r6, #0
 81126b4:	341a      	adds	r4, #26
 81126b6:	42b5      	cmp	r5, r6
 81126b8:	d11a      	bne.n	81126f0 <_printf_common+0xc8>
 81126ba:	2000      	movs	r0, #0
 81126bc:	e008      	b.n	81126d0 <_printf_common+0xa8>
 81126be:	2301      	movs	r3, #1
 81126c0:	4652      	mov	r2, sl
 81126c2:	4641      	mov	r1, r8
 81126c4:	4638      	mov	r0, r7
 81126c6:	47c8      	blx	r9
 81126c8:	3001      	adds	r0, #1
 81126ca:	d103      	bne.n	81126d4 <_printf_common+0xac>
 81126cc:	f04f 30ff 	mov.w	r0, #4294967295
 81126d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81126d4:	3501      	adds	r5, #1
 81126d6:	e7c6      	b.n	8112666 <_printf_common+0x3e>
 81126d8:	18e1      	adds	r1, r4, r3
 81126da:	1c5a      	adds	r2, r3, #1
 81126dc:	2030      	movs	r0, #48	@ 0x30
 81126de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81126e2:	4422      	add	r2, r4
 81126e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81126e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81126ec:	3302      	adds	r3, #2
 81126ee:	e7c7      	b.n	8112680 <_printf_common+0x58>
 81126f0:	2301      	movs	r3, #1
 81126f2:	4622      	mov	r2, r4
 81126f4:	4641      	mov	r1, r8
 81126f6:	4638      	mov	r0, r7
 81126f8:	47c8      	blx	r9
 81126fa:	3001      	adds	r0, #1
 81126fc:	d0e6      	beq.n	81126cc <_printf_common+0xa4>
 81126fe:	3601      	adds	r6, #1
 8112700:	e7d9      	b.n	81126b6 <_printf_common+0x8e>
	...

08112704 <_printf_i>:
 8112704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8112708:	7e0f      	ldrb	r7, [r1, #24]
 811270a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811270c:	2f78      	cmp	r7, #120	@ 0x78
 811270e:	4691      	mov	r9, r2
 8112710:	4680      	mov	r8, r0
 8112712:	460c      	mov	r4, r1
 8112714:	469a      	mov	sl, r3
 8112716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811271a:	d807      	bhi.n	811272c <_printf_i+0x28>
 811271c:	2f62      	cmp	r7, #98	@ 0x62
 811271e:	d80a      	bhi.n	8112736 <_printf_i+0x32>
 8112720:	2f00      	cmp	r7, #0
 8112722:	f000 80d2 	beq.w	81128ca <_printf_i+0x1c6>
 8112726:	2f58      	cmp	r7, #88	@ 0x58
 8112728:	f000 80b9 	beq.w	811289e <_printf_i+0x19a>
 811272c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8112730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8112734:	e03a      	b.n	81127ac <_printf_i+0xa8>
 8112736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 811273a:	2b15      	cmp	r3, #21
 811273c:	d8f6      	bhi.n	811272c <_printf_i+0x28>
 811273e:	a101      	add	r1, pc, #4	@ (adr r1, 8112744 <_printf_i+0x40>)
 8112740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8112744:	0811279d 	.word	0x0811279d
 8112748:	081127b1 	.word	0x081127b1
 811274c:	0811272d 	.word	0x0811272d
 8112750:	0811272d 	.word	0x0811272d
 8112754:	0811272d 	.word	0x0811272d
 8112758:	0811272d 	.word	0x0811272d
 811275c:	081127b1 	.word	0x081127b1
 8112760:	0811272d 	.word	0x0811272d
 8112764:	0811272d 	.word	0x0811272d
 8112768:	0811272d 	.word	0x0811272d
 811276c:	0811272d 	.word	0x0811272d
 8112770:	081128b1 	.word	0x081128b1
 8112774:	081127db 	.word	0x081127db
 8112778:	0811286b 	.word	0x0811286b
 811277c:	0811272d 	.word	0x0811272d
 8112780:	0811272d 	.word	0x0811272d
 8112784:	081128d3 	.word	0x081128d3
 8112788:	0811272d 	.word	0x0811272d
 811278c:	081127db 	.word	0x081127db
 8112790:	0811272d 	.word	0x0811272d
 8112794:	0811272d 	.word	0x0811272d
 8112798:	08112873 	.word	0x08112873
 811279c:	6833      	ldr	r3, [r6, #0]
 811279e:	1d1a      	adds	r2, r3, #4
 81127a0:	681b      	ldr	r3, [r3, #0]
 81127a2:	6032      	str	r2, [r6, #0]
 81127a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81127a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81127ac:	2301      	movs	r3, #1
 81127ae:	e09d      	b.n	81128ec <_printf_i+0x1e8>
 81127b0:	6833      	ldr	r3, [r6, #0]
 81127b2:	6820      	ldr	r0, [r4, #0]
 81127b4:	1d19      	adds	r1, r3, #4
 81127b6:	6031      	str	r1, [r6, #0]
 81127b8:	0606      	lsls	r6, r0, #24
 81127ba:	d501      	bpl.n	81127c0 <_printf_i+0xbc>
 81127bc:	681d      	ldr	r5, [r3, #0]
 81127be:	e003      	b.n	81127c8 <_printf_i+0xc4>
 81127c0:	0645      	lsls	r5, r0, #25
 81127c2:	d5fb      	bpl.n	81127bc <_printf_i+0xb8>
 81127c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 81127c8:	2d00      	cmp	r5, #0
 81127ca:	da03      	bge.n	81127d4 <_printf_i+0xd0>
 81127cc:	232d      	movs	r3, #45	@ 0x2d
 81127ce:	426d      	negs	r5, r5
 81127d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81127d4:	4859      	ldr	r0, [pc, #356]	@ (811293c <_printf_i+0x238>)
 81127d6:	230a      	movs	r3, #10
 81127d8:	e011      	b.n	81127fe <_printf_i+0xfa>
 81127da:	6821      	ldr	r1, [r4, #0]
 81127dc:	6833      	ldr	r3, [r6, #0]
 81127de:	0608      	lsls	r0, r1, #24
 81127e0:	f853 5b04 	ldr.w	r5, [r3], #4
 81127e4:	d402      	bmi.n	81127ec <_printf_i+0xe8>
 81127e6:	0649      	lsls	r1, r1, #25
 81127e8:	bf48      	it	mi
 81127ea:	b2ad      	uxthmi	r5, r5
 81127ec:	2f6f      	cmp	r7, #111	@ 0x6f
 81127ee:	4853      	ldr	r0, [pc, #332]	@ (811293c <_printf_i+0x238>)
 81127f0:	6033      	str	r3, [r6, #0]
 81127f2:	bf14      	ite	ne
 81127f4:	230a      	movne	r3, #10
 81127f6:	2308      	moveq	r3, #8
 81127f8:	2100      	movs	r1, #0
 81127fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 81127fe:	6866      	ldr	r6, [r4, #4]
 8112800:	60a6      	str	r6, [r4, #8]
 8112802:	2e00      	cmp	r6, #0
 8112804:	bfa2      	ittt	ge
 8112806:	6821      	ldrge	r1, [r4, #0]
 8112808:	f021 0104 	bicge.w	r1, r1, #4
 811280c:	6021      	strge	r1, [r4, #0]
 811280e:	b90d      	cbnz	r5, 8112814 <_printf_i+0x110>
 8112810:	2e00      	cmp	r6, #0
 8112812:	d04b      	beq.n	81128ac <_printf_i+0x1a8>
 8112814:	4616      	mov	r6, r2
 8112816:	fbb5 f1f3 	udiv	r1, r5, r3
 811281a:	fb03 5711 	mls	r7, r3, r1, r5
 811281e:	5dc7      	ldrb	r7, [r0, r7]
 8112820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8112824:	462f      	mov	r7, r5
 8112826:	42bb      	cmp	r3, r7
 8112828:	460d      	mov	r5, r1
 811282a:	d9f4      	bls.n	8112816 <_printf_i+0x112>
 811282c:	2b08      	cmp	r3, #8
 811282e:	d10b      	bne.n	8112848 <_printf_i+0x144>
 8112830:	6823      	ldr	r3, [r4, #0]
 8112832:	07df      	lsls	r7, r3, #31
 8112834:	d508      	bpl.n	8112848 <_printf_i+0x144>
 8112836:	6923      	ldr	r3, [r4, #16]
 8112838:	6861      	ldr	r1, [r4, #4]
 811283a:	4299      	cmp	r1, r3
 811283c:	bfde      	ittt	le
 811283e:	2330      	movle	r3, #48	@ 0x30
 8112840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8112844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8112848:	1b92      	subs	r2, r2, r6
 811284a:	6122      	str	r2, [r4, #16]
 811284c:	f8cd a000 	str.w	sl, [sp]
 8112850:	464b      	mov	r3, r9
 8112852:	aa03      	add	r2, sp, #12
 8112854:	4621      	mov	r1, r4
 8112856:	4640      	mov	r0, r8
 8112858:	f7ff fee6 	bl	8112628 <_printf_common>
 811285c:	3001      	adds	r0, #1
 811285e:	d14a      	bne.n	81128f6 <_printf_i+0x1f2>
 8112860:	f04f 30ff 	mov.w	r0, #4294967295
 8112864:	b004      	add	sp, #16
 8112866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811286a:	6823      	ldr	r3, [r4, #0]
 811286c:	f043 0320 	orr.w	r3, r3, #32
 8112870:	6023      	str	r3, [r4, #0]
 8112872:	4833      	ldr	r0, [pc, #204]	@ (8112940 <_printf_i+0x23c>)
 8112874:	2778      	movs	r7, #120	@ 0x78
 8112876:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 811287a:	6823      	ldr	r3, [r4, #0]
 811287c:	6831      	ldr	r1, [r6, #0]
 811287e:	061f      	lsls	r7, r3, #24
 8112880:	f851 5b04 	ldr.w	r5, [r1], #4
 8112884:	d402      	bmi.n	811288c <_printf_i+0x188>
 8112886:	065f      	lsls	r7, r3, #25
 8112888:	bf48      	it	mi
 811288a:	b2ad      	uxthmi	r5, r5
 811288c:	6031      	str	r1, [r6, #0]
 811288e:	07d9      	lsls	r1, r3, #31
 8112890:	bf44      	itt	mi
 8112892:	f043 0320 	orrmi.w	r3, r3, #32
 8112896:	6023      	strmi	r3, [r4, #0]
 8112898:	b11d      	cbz	r5, 81128a2 <_printf_i+0x19e>
 811289a:	2310      	movs	r3, #16
 811289c:	e7ac      	b.n	81127f8 <_printf_i+0xf4>
 811289e:	4827      	ldr	r0, [pc, #156]	@ (811293c <_printf_i+0x238>)
 81128a0:	e7e9      	b.n	8112876 <_printf_i+0x172>
 81128a2:	6823      	ldr	r3, [r4, #0]
 81128a4:	f023 0320 	bic.w	r3, r3, #32
 81128a8:	6023      	str	r3, [r4, #0]
 81128aa:	e7f6      	b.n	811289a <_printf_i+0x196>
 81128ac:	4616      	mov	r6, r2
 81128ae:	e7bd      	b.n	811282c <_printf_i+0x128>
 81128b0:	6833      	ldr	r3, [r6, #0]
 81128b2:	6825      	ldr	r5, [r4, #0]
 81128b4:	6961      	ldr	r1, [r4, #20]
 81128b6:	1d18      	adds	r0, r3, #4
 81128b8:	6030      	str	r0, [r6, #0]
 81128ba:	062e      	lsls	r6, r5, #24
 81128bc:	681b      	ldr	r3, [r3, #0]
 81128be:	d501      	bpl.n	81128c4 <_printf_i+0x1c0>
 81128c0:	6019      	str	r1, [r3, #0]
 81128c2:	e002      	b.n	81128ca <_printf_i+0x1c6>
 81128c4:	0668      	lsls	r0, r5, #25
 81128c6:	d5fb      	bpl.n	81128c0 <_printf_i+0x1bc>
 81128c8:	8019      	strh	r1, [r3, #0]
 81128ca:	2300      	movs	r3, #0
 81128cc:	6123      	str	r3, [r4, #16]
 81128ce:	4616      	mov	r6, r2
 81128d0:	e7bc      	b.n	811284c <_printf_i+0x148>
 81128d2:	6833      	ldr	r3, [r6, #0]
 81128d4:	1d1a      	adds	r2, r3, #4
 81128d6:	6032      	str	r2, [r6, #0]
 81128d8:	681e      	ldr	r6, [r3, #0]
 81128da:	6862      	ldr	r2, [r4, #4]
 81128dc:	2100      	movs	r1, #0
 81128de:	4630      	mov	r0, r6
 81128e0:	f7ed fd0e 	bl	8100300 <memchr>
 81128e4:	b108      	cbz	r0, 81128ea <_printf_i+0x1e6>
 81128e6:	1b80      	subs	r0, r0, r6
 81128e8:	6060      	str	r0, [r4, #4]
 81128ea:	6863      	ldr	r3, [r4, #4]
 81128ec:	6123      	str	r3, [r4, #16]
 81128ee:	2300      	movs	r3, #0
 81128f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81128f4:	e7aa      	b.n	811284c <_printf_i+0x148>
 81128f6:	6923      	ldr	r3, [r4, #16]
 81128f8:	4632      	mov	r2, r6
 81128fa:	4649      	mov	r1, r9
 81128fc:	4640      	mov	r0, r8
 81128fe:	47d0      	blx	sl
 8112900:	3001      	adds	r0, #1
 8112902:	d0ad      	beq.n	8112860 <_printf_i+0x15c>
 8112904:	6823      	ldr	r3, [r4, #0]
 8112906:	079b      	lsls	r3, r3, #30
 8112908:	d413      	bmi.n	8112932 <_printf_i+0x22e>
 811290a:	68e0      	ldr	r0, [r4, #12]
 811290c:	9b03      	ldr	r3, [sp, #12]
 811290e:	4298      	cmp	r0, r3
 8112910:	bfb8      	it	lt
 8112912:	4618      	movlt	r0, r3
 8112914:	e7a6      	b.n	8112864 <_printf_i+0x160>
 8112916:	2301      	movs	r3, #1
 8112918:	4632      	mov	r2, r6
 811291a:	4649      	mov	r1, r9
 811291c:	4640      	mov	r0, r8
 811291e:	47d0      	blx	sl
 8112920:	3001      	adds	r0, #1
 8112922:	d09d      	beq.n	8112860 <_printf_i+0x15c>
 8112924:	3501      	adds	r5, #1
 8112926:	68e3      	ldr	r3, [r4, #12]
 8112928:	9903      	ldr	r1, [sp, #12]
 811292a:	1a5b      	subs	r3, r3, r1
 811292c:	42ab      	cmp	r3, r5
 811292e:	dcf2      	bgt.n	8112916 <_printf_i+0x212>
 8112930:	e7eb      	b.n	811290a <_printf_i+0x206>
 8112932:	2500      	movs	r5, #0
 8112934:	f104 0619 	add.w	r6, r4, #25
 8112938:	e7f5      	b.n	8112926 <_printf_i+0x222>
 811293a:	bf00      	nop
 811293c:	08117999 	.word	0x08117999
 8112940:	081179aa 	.word	0x081179aa

08112944 <_scanf_float>:
 8112944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112948:	b087      	sub	sp, #28
 811294a:	4617      	mov	r7, r2
 811294c:	9303      	str	r3, [sp, #12]
 811294e:	688b      	ldr	r3, [r1, #8]
 8112950:	1e5a      	subs	r2, r3, #1
 8112952:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8112956:	bf81      	itttt	hi
 8112958:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 811295c:	eb03 0b05 	addhi.w	fp, r3, r5
 8112960:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8112964:	608b      	strhi	r3, [r1, #8]
 8112966:	680b      	ldr	r3, [r1, #0]
 8112968:	460a      	mov	r2, r1
 811296a:	f04f 0500 	mov.w	r5, #0
 811296e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8112972:	f842 3b1c 	str.w	r3, [r2], #28
 8112976:	e9cd 5504 	strd	r5, r5, [sp, #16]
 811297a:	4680      	mov	r8, r0
 811297c:	460c      	mov	r4, r1
 811297e:	bf98      	it	ls
 8112980:	f04f 0b00 	movls.w	fp, #0
 8112984:	9201      	str	r2, [sp, #4]
 8112986:	4616      	mov	r6, r2
 8112988:	46aa      	mov	sl, r5
 811298a:	46a9      	mov	r9, r5
 811298c:	9502      	str	r5, [sp, #8]
 811298e:	68a2      	ldr	r2, [r4, #8]
 8112990:	b152      	cbz	r2, 81129a8 <_scanf_float+0x64>
 8112992:	683b      	ldr	r3, [r7, #0]
 8112994:	781b      	ldrb	r3, [r3, #0]
 8112996:	2b4e      	cmp	r3, #78	@ 0x4e
 8112998:	d864      	bhi.n	8112a64 <_scanf_float+0x120>
 811299a:	2b40      	cmp	r3, #64	@ 0x40
 811299c:	d83c      	bhi.n	8112a18 <_scanf_float+0xd4>
 811299e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 81129a2:	b2c8      	uxtb	r0, r1
 81129a4:	280e      	cmp	r0, #14
 81129a6:	d93a      	bls.n	8112a1e <_scanf_float+0xda>
 81129a8:	f1b9 0f00 	cmp.w	r9, #0
 81129ac:	d003      	beq.n	81129b6 <_scanf_float+0x72>
 81129ae:	6823      	ldr	r3, [r4, #0]
 81129b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81129b4:	6023      	str	r3, [r4, #0]
 81129b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81129ba:	f1ba 0f01 	cmp.w	sl, #1
 81129be:	f200 8117 	bhi.w	8112bf0 <_scanf_float+0x2ac>
 81129c2:	9b01      	ldr	r3, [sp, #4]
 81129c4:	429e      	cmp	r6, r3
 81129c6:	f200 8108 	bhi.w	8112bda <_scanf_float+0x296>
 81129ca:	2001      	movs	r0, #1
 81129cc:	b007      	add	sp, #28
 81129ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81129d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 81129d6:	2a0d      	cmp	r2, #13
 81129d8:	d8e6      	bhi.n	81129a8 <_scanf_float+0x64>
 81129da:	a101      	add	r1, pc, #4	@ (adr r1, 81129e0 <_scanf_float+0x9c>)
 81129dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81129e0:	08112b27 	.word	0x08112b27
 81129e4:	081129a9 	.word	0x081129a9
 81129e8:	081129a9 	.word	0x081129a9
 81129ec:	081129a9 	.word	0x081129a9
 81129f0:	08112b87 	.word	0x08112b87
 81129f4:	08112b5f 	.word	0x08112b5f
 81129f8:	081129a9 	.word	0x081129a9
 81129fc:	081129a9 	.word	0x081129a9
 8112a00:	08112b35 	.word	0x08112b35
 8112a04:	081129a9 	.word	0x081129a9
 8112a08:	081129a9 	.word	0x081129a9
 8112a0c:	081129a9 	.word	0x081129a9
 8112a10:	081129a9 	.word	0x081129a9
 8112a14:	08112aed 	.word	0x08112aed
 8112a18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8112a1c:	e7db      	b.n	81129d6 <_scanf_float+0x92>
 8112a1e:	290e      	cmp	r1, #14
 8112a20:	d8c2      	bhi.n	81129a8 <_scanf_float+0x64>
 8112a22:	a001      	add	r0, pc, #4	@ (adr r0, 8112a28 <_scanf_float+0xe4>)
 8112a24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8112a28:	08112add 	.word	0x08112add
 8112a2c:	081129a9 	.word	0x081129a9
 8112a30:	08112add 	.word	0x08112add
 8112a34:	08112b73 	.word	0x08112b73
 8112a38:	081129a9 	.word	0x081129a9
 8112a3c:	08112a85 	.word	0x08112a85
 8112a40:	08112ac3 	.word	0x08112ac3
 8112a44:	08112ac3 	.word	0x08112ac3
 8112a48:	08112ac3 	.word	0x08112ac3
 8112a4c:	08112ac3 	.word	0x08112ac3
 8112a50:	08112ac3 	.word	0x08112ac3
 8112a54:	08112ac3 	.word	0x08112ac3
 8112a58:	08112ac3 	.word	0x08112ac3
 8112a5c:	08112ac3 	.word	0x08112ac3
 8112a60:	08112ac3 	.word	0x08112ac3
 8112a64:	2b6e      	cmp	r3, #110	@ 0x6e
 8112a66:	d809      	bhi.n	8112a7c <_scanf_float+0x138>
 8112a68:	2b60      	cmp	r3, #96	@ 0x60
 8112a6a:	d8b2      	bhi.n	81129d2 <_scanf_float+0x8e>
 8112a6c:	2b54      	cmp	r3, #84	@ 0x54
 8112a6e:	d07b      	beq.n	8112b68 <_scanf_float+0x224>
 8112a70:	2b59      	cmp	r3, #89	@ 0x59
 8112a72:	d199      	bne.n	81129a8 <_scanf_float+0x64>
 8112a74:	2d07      	cmp	r5, #7
 8112a76:	d197      	bne.n	81129a8 <_scanf_float+0x64>
 8112a78:	2508      	movs	r5, #8
 8112a7a:	e02c      	b.n	8112ad6 <_scanf_float+0x192>
 8112a7c:	2b74      	cmp	r3, #116	@ 0x74
 8112a7e:	d073      	beq.n	8112b68 <_scanf_float+0x224>
 8112a80:	2b79      	cmp	r3, #121	@ 0x79
 8112a82:	e7f6      	b.n	8112a72 <_scanf_float+0x12e>
 8112a84:	6821      	ldr	r1, [r4, #0]
 8112a86:	05c8      	lsls	r0, r1, #23
 8112a88:	d51b      	bpl.n	8112ac2 <_scanf_float+0x17e>
 8112a8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8112a8e:	6021      	str	r1, [r4, #0]
 8112a90:	f109 0901 	add.w	r9, r9, #1
 8112a94:	f1bb 0f00 	cmp.w	fp, #0
 8112a98:	d003      	beq.n	8112aa2 <_scanf_float+0x15e>
 8112a9a:	3201      	adds	r2, #1
 8112a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8112aa0:	60a2      	str	r2, [r4, #8]
 8112aa2:	68a3      	ldr	r3, [r4, #8]
 8112aa4:	3b01      	subs	r3, #1
 8112aa6:	60a3      	str	r3, [r4, #8]
 8112aa8:	6923      	ldr	r3, [r4, #16]
 8112aaa:	3301      	adds	r3, #1
 8112aac:	6123      	str	r3, [r4, #16]
 8112aae:	687b      	ldr	r3, [r7, #4]
 8112ab0:	3b01      	subs	r3, #1
 8112ab2:	2b00      	cmp	r3, #0
 8112ab4:	607b      	str	r3, [r7, #4]
 8112ab6:	f340 8087 	ble.w	8112bc8 <_scanf_float+0x284>
 8112aba:	683b      	ldr	r3, [r7, #0]
 8112abc:	3301      	adds	r3, #1
 8112abe:	603b      	str	r3, [r7, #0]
 8112ac0:	e765      	b.n	811298e <_scanf_float+0x4a>
 8112ac2:	eb1a 0105 	adds.w	r1, sl, r5
 8112ac6:	f47f af6f 	bne.w	81129a8 <_scanf_float+0x64>
 8112aca:	6822      	ldr	r2, [r4, #0]
 8112acc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8112ad0:	6022      	str	r2, [r4, #0]
 8112ad2:	460d      	mov	r5, r1
 8112ad4:	468a      	mov	sl, r1
 8112ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8112ada:	e7e2      	b.n	8112aa2 <_scanf_float+0x15e>
 8112adc:	6822      	ldr	r2, [r4, #0]
 8112ade:	0610      	lsls	r0, r2, #24
 8112ae0:	f57f af62 	bpl.w	81129a8 <_scanf_float+0x64>
 8112ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8112ae8:	6022      	str	r2, [r4, #0]
 8112aea:	e7f4      	b.n	8112ad6 <_scanf_float+0x192>
 8112aec:	f1ba 0f00 	cmp.w	sl, #0
 8112af0:	d10e      	bne.n	8112b10 <_scanf_float+0x1cc>
 8112af2:	f1b9 0f00 	cmp.w	r9, #0
 8112af6:	d10e      	bne.n	8112b16 <_scanf_float+0x1d2>
 8112af8:	6822      	ldr	r2, [r4, #0]
 8112afa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8112afe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8112b02:	d108      	bne.n	8112b16 <_scanf_float+0x1d2>
 8112b04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8112b08:	6022      	str	r2, [r4, #0]
 8112b0a:	f04f 0a01 	mov.w	sl, #1
 8112b0e:	e7e2      	b.n	8112ad6 <_scanf_float+0x192>
 8112b10:	f1ba 0f02 	cmp.w	sl, #2
 8112b14:	d055      	beq.n	8112bc2 <_scanf_float+0x27e>
 8112b16:	2d01      	cmp	r5, #1
 8112b18:	d002      	beq.n	8112b20 <_scanf_float+0x1dc>
 8112b1a:	2d04      	cmp	r5, #4
 8112b1c:	f47f af44 	bne.w	81129a8 <_scanf_float+0x64>
 8112b20:	3501      	adds	r5, #1
 8112b22:	b2ed      	uxtb	r5, r5
 8112b24:	e7d7      	b.n	8112ad6 <_scanf_float+0x192>
 8112b26:	f1ba 0f01 	cmp.w	sl, #1
 8112b2a:	f47f af3d 	bne.w	81129a8 <_scanf_float+0x64>
 8112b2e:	f04f 0a02 	mov.w	sl, #2
 8112b32:	e7d0      	b.n	8112ad6 <_scanf_float+0x192>
 8112b34:	b97d      	cbnz	r5, 8112b56 <_scanf_float+0x212>
 8112b36:	f1b9 0f00 	cmp.w	r9, #0
 8112b3a:	f47f af38 	bne.w	81129ae <_scanf_float+0x6a>
 8112b3e:	6822      	ldr	r2, [r4, #0]
 8112b40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8112b44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8112b48:	f040 8108 	bne.w	8112d5c <_scanf_float+0x418>
 8112b4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8112b50:	6022      	str	r2, [r4, #0]
 8112b52:	2501      	movs	r5, #1
 8112b54:	e7bf      	b.n	8112ad6 <_scanf_float+0x192>
 8112b56:	2d03      	cmp	r5, #3
 8112b58:	d0e2      	beq.n	8112b20 <_scanf_float+0x1dc>
 8112b5a:	2d05      	cmp	r5, #5
 8112b5c:	e7de      	b.n	8112b1c <_scanf_float+0x1d8>
 8112b5e:	2d02      	cmp	r5, #2
 8112b60:	f47f af22 	bne.w	81129a8 <_scanf_float+0x64>
 8112b64:	2503      	movs	r5, #3
 8112b66:	e7b6      	b.n	8112ad6 <_scanf_float+0x192>
 8112b68:	2d06      	cmp	r5, #6
 8112b6a:	f47f af1d 	bne.w	81129a8 <_scanf_float+0x64>
 8112b6e:	2507      	movs	r5, #7
 8112b70:	e7b1      	b.n	8112ad6 <_scanf_float+0x192>
 8112b72:	6822      	ldr	r2, [r4, #0]
 8112b74:	0591      	lsls	r1, r2, #22
 8112b76:	f57f af17 	bpl.w	81129a8 <_scanf_float+0x64>
 8112b7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8112b7e:	6022      	str	r2, [r4, #0]
 8112b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8112b84:	e7a7      	b.n	8112ad6 <_scanf_float+0x192>
 8112b86:	6822      	ldr	r2, [r4, #0]
 8112b88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8112b8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8112b90:	d006      	beq.n	8112ba0 <_scanf_float+0x25c>
 8112b92:	0550      	lsls	r0, r2, #21
 8112b94:	f57f af08 	bpl.w	81129a8 <_scanf_float+0x64>
 8112b98:	f1b9 0f00 	cmp.w	r9, #0
 8112b9c:	f000 80de 	beq.w	8112d5c <_scanf_float+0x418>
 8112ba0:	0591      	lsls	r1, r2, #22
 8112ba2:	bf58      	it	pl
 8112ba4:	9902      	ldrpl	r1, [sp, #8]
 8112ba6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8112baa:	bf58      	it	pl
 8112bac:	eba9 0101 	subpl.w	r1, r9, r1
 8112bb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8112bb4:	bf58      	it	pl
 8112bb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8112bba:	6022      	str	r2, [r4, #0]
 8112bbc:	f04f 0900 	mov.w	r9, #0
 8112bc0:	e789      	b.n	8112ad6 <_scanf_float+0x192>
 8112bc2:	f04f 0a03 	mov.w	sl, #3
 8112bc6:	e786      	b.n	8112ad6 <_scanf_float+0x192>
 8112bc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8112bcc:	4639      	mov	r1, r7
 8112bce:	4640      	mov	r0, r8
 8112bd0:	4798      	blx	r3
 8112bd2:	2800      	cmp	r0, #0
 8112bd4:	f43f aedb 	beq.w	811298e <_scanf_float+0x4a>
 8112bd8:	e6e6      	b.n	81129a8 <_scanf_float+0x64>
 8112bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112be2:	463a      	mov	r2, r7
 8112be4:	4640      	mov	r0, r8
 8112be6:	4798      	blx	r3
 8112be8:	6923      	ldr	r3, [r4, #16]
 8112bea:	3b01      	subs	r3, #1
 8112bec:	6123      	str	r3, [r4, #16]
 8112bee:	e6e8      	b.n	81129c2 <_scanf_float+0x7e>
 8112bf0:	1e6b      	subs	r3, r5, #1
 8112bf2:	2b06      	cmp	r3, #6
 8112bf4:	d824      	bhi.n	8112c40 <_scanf_float+0x2fc>
 8112bf6:	2d02      	cmp	r5, #2
 8112bf8:	d836      	bhi.n	8112c68 <_scanf_float+0x324>
 8112bfa:	9b01      	ldr	r3, [sp, #4]
 8112bfc:	429e      	cmp	r6, r3
 8112bfe:	f67f aee4 	bls.w	81129ca <_scanf_float+0x86>
 8112c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112c0a:	463a      	mov	r2, r7
 8112c0c:	4640      	mov	r0, r8
 8112c0e:	4798      	blx	r3
 8112c10:	6923      	ldr	r3, [r4, #16]
 8112c12:	3b01      	subs	r3, #1
 8112c14:	6123      	str	r3, [r4, #16]
 8112c16:	e7f0      	b.n	8112bfa <_scanf_float+0x2b6>
 8112c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112c1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8112c20:	463a      	mov	r2, r7
 8112c22:	4640      	mov	r0, r8
 8112c24:	4798      	blx	r3
 8112c26:	6923      	ldr	r3, [r4, #16]
 8112c28:	3b01      	subs	r3, #1
 8112c2a:	6123      	str	r3, [r4, #16]
 8112c2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8112c30:	fa5f fa8a 	uxtb.w	sl, sl
 8112c34:	f1ba 0f02 	cmp.w	sl, #2
 8112c38:	d1ee      	bne.n	8112c18 <_scanf_float+0x2d4>
 8112c3a:	3d03      	subs	r5, #3
 8112c3c:	b2ed      	uxtb	r5, r5
 8112c3e:	1b76      	subs	r6, r6, r5
 8112c40:	6823      	ldr	r3, [r4, #0]
 8112c42:	05da      	lsls	r2, r3, #23
 8112c44:	d530      	bpl.n	8112ca8 <_scanf_float+0x364>
 8112c46:	055b      	lsls	r3, r3, #21
 8112c48:	d511      	bpl.n	8112c6e <_scanf_float+0x32a>
 8112c4a:	9b01      	ldr	r3, [sp, #4]
 8112c4c:	429e      	cmp	r6, r3
 8112c4e:	f67f aebc 	bls.w	81129ca <_scanf_float+0x86>
 8112c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112c5a:	463a      	mov	r2, r7
 8112c5c:	4640      	mov	r0, r8
 8112c5e:	4798      	blx	r3
 8112c60:	6923      	ldr	r3, [r4, #16]
 8112c62:	3b01      	subs	r3, #1
 8112c64:	6123      	str	r3, [r4, #16]
 8112c66:	e7f0      	b.n	8112c4a <_scanf_float+0x306>
 8112c68:	46aa      	mov	sl, r5
 8112c6a:	46b3      	mov	fp, r6
 8112c6c:	e7de      	b.n	8112c2c <_scanf_float+0x2e8>
 8112c6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8112c72:	6923      	ldr	r3, [r4, #16]
 8112c74:	2965      	cmp	r1, #101	@ 0x65
 8112c76:	f103 33ff 	add.w	r3, r3, #4294967295
 8112c7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8112c7e:	6123      	str	r3, [r4, #16]
 8112c80:	d00c      	beq.n	8112c9c <_scanf_float+0x358>
 8112c82:	2945      	cmp	r1, #69	@ 0x45
 8112c84:	d00a      	beq.n	8112c9c <_scanf_float+0x358>
 8112c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112c8a:	463a      	mov	r2, r7
 8112c8c:	4640      	mov	r0, r8
 8112c8e:	4798      	blx	r3
 8112c90:	6923      	ldr	r3, [r4, #16]
 8112c92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8112c96:	3b01      	subs	r3, #1
 8112c98:	1eb5      	subs	r5, r6, #2
 8112c9a:	6123      	str	r3, [r4, #16]
 8112c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112ca0:	463a      	mov	r2, r7
 8112ca2:	4640      	mov	r0, r8
 8112ca4:	4798      	blx	r3
 8112ca6:	462e      	mov	r6, r5
 8112ca8:	6822      	ldr	r2, [r4, #0]
 8112caa:	f012 0210 	ands.w	r2, r2, #16
 8112cae:	d001      	beq.n	8112cb4 <_scanf_float+0x370>
 8112cb0:	2000      	movs	r0, #0
 8112cb2:	e68b      	b.n	81129cc <_scanf_float+0x88>
 8112cb4:	7032      	strb	r2, [r6, #0]
 8112cb6:	6823      	ldr	r3, [r4, #0]
 8112cb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8112cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8112cc0:	d11c      	bne.n	8112cfc <_scanf_float+0x3b8>
 8112cc2:	9b02      	ldr	r3, [sp, #8]
 8112cc4:	454b      	cmp	r3, r9
 8112cc6:	eba3 0209 	sub.w	r2, r3, r9
 8112cca:	d123      	bne.n	8112d14 <_scanf_float+0x3d0>
 8112ccc:	9901      	ldr	r1, [sp, #4]
 8112cce:	2200      	movs	r2, #0
 8112cd0:	4640      	mov	r0, r8
 8112cd2:	f002 fba1 	bl	8115418 <_strtod_r>
 8112cd6:	9b03      	ldr	r3, [sp, #12]
 8112cd8:	6821      	ldr	r1, [r4, #0]
 8112cda:	681b      	ldr	r3, [r3, #0]
 8112cdc:	f011 0f02 	tst.w	r1, #2
 8112ce0:	ec57 6b10 	vmov	r6, r7, d0
 8112ce4:	f103 0204 	add.w	r2, r3, #4
 8112ce8:	d01f      	beq.n	8112d2a <_scanf_float+0x3e6>
 8112cea:	9903      	ldr	r1, [sp, #12]
 8112cec:	600a      	str	r2, [r1, #0]
 8112cee:	681b      	ldr	r3, [r3, #0]
 8112cf0:	e9c3 6700 	strd	r6, r7, [r3]
 8112cf4:	68e3      	ldr	r3, [r4, #12]
 8112cf6:	3301      	adds	r3, #1
 8112cf8:	60e3      	str	r3, [r4, #12]
 8112cfa:	e7d9      	b.n	8112cb0 <_scanf_float+0x36c>
 8112cfc:	9b04      	ldr	r3, [sp, #16]
 8112cfe:	2b00      	cmp	r3, #0
 8112d00:	d0e4      	beq.n	8112ccc <_scanf_float+0x388>
 8112d02:	9905      	ldr	r1, [sp, #20]
 8112d04:	230a      	movs	r3, #10
 8112d06:	3101      	adds	r1, #1
 8112d08:	4640      	mov	r0, r8
 8112d0a:	f7ff f9c1 	bl	8112090 <_strtol_r>
 8112d0e:	9b04      	ldr	r3, [sp, #16]
 8112d10:	9e05      	ldr	r6, [sp, #20]
 8112d12:	1ac2      	subs	r2, r0, r3
 8112d14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8112d18:	429e      	cmp	r6, r3
 8112d1a:	bf28      	it	cs
 8112d1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8112d20:	4910      	ldr	r1, [pc, #64]	@ (8112d64 <_scanf_float+0x420>)
 8112d22:	4630      	mov	r0, r6
 8112d24:	f000 f8f6 	bl	8112f14 <siprintf>
 8112d28:	e7d0      	b.n	8112ccc <_scanf_float+0x388>
 8112d2a:	f011 0f04 	tst.w	r1, #4
 8112d2e:	9903      	ldr	r1, [sp, #12]
 8112d30:	600a      	str	r2, [r1, #0]
 8112d32:	d1dc      	bne.n	8112cee <_scanf_float+0x3aa>
 8112d34:	681d      	ldr	r5, [r3, #0]
 8112d36:	4632      	mov	r2, r6
 8112d38:	463b      	mov	r3, r7
 8112d3a:	4630      	mov	r0, r6
 8112d3c:	4639      	mov	r1, r7
 8112d3e:	f7ed ff8d 	bl	8100c5c <__aeabi_dcmpun>
 8112d42:	b128      	cbz	r0, 8112d50 <_scanf_float+0x40c>
 8112d44:	4808      	ldr	r0, [pc, #32]	@ (8112d68 <_scanf_float+0x424>)
 8112d46:	f000 fa0b 	bl	8113160 <nanf>
 8112d4a:	ed85 0a00 	vstr	s0, [r5]
 8112d4e:	e7d1      	b.n	8112cf4 <_scanf_float+0x3b0>
 8112d50:	4630      	mov	r0, r6
 8112d52:	4639      	mov	r1, r7
 8112d54:	f7ed ffe0 	bl	8100d18 <__aeabi_d2f>
 8112d58:	6028      	str	r0, [r5, #0]
 8112d5a:	e7cb      	b.n	8112cf4 <_scanf_float+0x3b0>
 8112d5c:	f04f 0900 	mov.w	r9, #0
 8112d60:	e629      	b.n	81129b6 <_scanf_float+0x72>
 8112d62:	bf00      	nop
 8112d64:	081179bb 	.word	0x081179bb
 8112d68:	08117885 	.word	0x08117885

08112d6c <std>:
 8112d6c:	2300      	movs	r3, #0
 8112d6e:	b510      	push	{r4, lr}
 8112d70:	4604      	mov	r4, r0
 8112d72:	e9c0 3300 	strd	r3, r3, [r0]
 8112d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8112d7a:	6083      	str	r3, [r0, #8]
 8112d7c:	8181      	strh	r1, [r0, #12]
 8112d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8112d80:	81c2      	strh	r2, [r0, #14]
 8112d82:	6183      	str	r3, [r0, #24]
 8112d84:	4619      	mov	r1, r3
 8112d86:	2208      	movs	r2, #8
 8112d88:	305c      	adds	r0, #92	@ 0x5c
 8112d8a:	f000 f926 	bl	8112fda <memset>
 8112d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8112dc4 <std+0x58>)
 8112d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8112d92:	4b0d      	ldr	r3, [pc, #52]	@ (8112dc8 <std+0x5c>)
 8112d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8112d96:	4b0d      	ldr	r3, [pc, #52]	@ (8112dcc <std+0x60>)
 8112d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8112d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8112dd0 <std+0x64>)
 8112d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8112d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8112dd4 <std+0x68>)
 8112da0:	6224      	str	r4, [r4, #32]
 8112da2:	429c      	cmp	r4, r3
 8112da4:	d006      	beq.n	8112db4 <std+0x48>
 8112da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8112daa:	4294      	cmp	r4, r2
 8112dac:	d002      	beq.n	8112db4 <std+0x48>
 8112dae:	33d0      	adds	r3, #208	@ 0xd0
 8112db0:	429c      	cmp	r4, r3
 8112db2:	d105      	bne.n	8112dc0 <std+0x54>
 8112db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8112db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112dbc:	f000 b9be 	b.w	811313c <__retarget_lock_init_recursive>
 8112dc0:	bd10      	pop	{r4, pc}
 8112dc2:	bf00      	nop
 8112dc4:	08112f55 	.word	0x08112f55
 8112dc8:	08112f77 	.word	0x08112f77
 8112dcc:	08112faf 	.word	0x08112faf
 8112dd0:	08112fd3 	.word	0x08112fd3
 8112dd4:	10005040 	.word	0x10005040

08112dd8 <stdio_exit_handler>:
 8112dd8:	4a02      	ldr	r2, [pc, #8]	@ (8112de4 <stdio_exit_handler+0xc>)
 8112dda:	4903      	ldr	r1, [pc, #12]	@ (8112de8 <stdio_exit_handler+0x10>)
 8112ddc:	4803      	ldr	r0, [pc, #12]	@ (8112dec <stdio_exit_handler+0x14>)
 8112dde:	f000 b87b 	b.w	8112ed8 <_fwalk_sglue>
 8112de2:	bf00      	nop
 8112de4:	100000bc 	.word	0x100000bc
 8112de8:	08115a61 	.word	0x08115a61
 8112dec:	100000cc 	.word	0x100000cc

08112df0 <cleanup_stdio>:
 8112df0:	6841      	ldr	r1, [r0, #4]
 8112df2:	4b0c      	ldr	r3, [pc, #48]	@ (8112e24 <cleanup_stdio+0x34>)
 8112df4:	4299      	cmp	r1, r3
 8112df6:	b510      	push	{r4, lr}
 8112df8:	4604      	mov	r4, r0
 8112dfa:	d001      	beq.n	8112e00 <cleanup_stdio+0x10>
 8112dfc:	f002 fe30 	bl	8115a60 <_fflush_r>
 8112e00:	68a1      	ldr	r1, [r4, #8]
 8112e02:	4b09      	ldr	r3, [pc, #36]	@ (8112e28 <cleanup_stdio+0x38>)
 8112e04:	4299      	cmp	r1, r3
 8112e06:	d002      	beq.n	8112e0e <cleanup_stdio+0x1e>
 8112e08:	4620      	mov	r0, r4
 8112e0a:	f002 fe29 	bl	8115a60 <_fflush_r>
 8112e0e:	68e1      	ldr	r1, [r4, #12]
 8112e10:	4b06      	ldr	r3, [pc, #24]	@ (8112e2c <cleanup_stdio+0x3c>)
 8112e12:	4299      	cmp	r1, r3
 8112e14:	d004      	beq.n	8112e20 <cleanup_stdio+0x30>
 8112e16:	4620      	mov	r0, r4
 8112e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112e1c:	f002 be20 	b.w	8115a60 <_fflush_r>
 8112e20:	bd10      	pop	{r4, pc}
 8112e22:	bf00      	nop
 8112e24:	10005040 	.word	0x10005040
 8112e28:	100050a8 	.word	0x100050a8
 8112e2c:	10005110 	.word	0x10005110

08112e30 <global_stdio_init.part.0>:
 8112e30:	b510      	push	{r4, lr}
 8112e32:	4b0b      	ldr	r3, [pc, #44]	@ (8112e60 <global_stdio_init.part.0+0x30>)
 8112e34:	4c0b      	ldr	r4, [pc, #44]	@ (8112e64 <global_stdio_init.part.0+0x34>)
 8112e36:	4a0c      	ldr	r2, [pc, #48]	@ (8112e68 <global_stdio_init.part.0+0x38>)
 8112e38:	601a      	str	r2, [r3, #0]
 8112e3a:	4620      	mov	r0, r4
 8112e3c:	2200      	movs	r2, #0
 8112e3e:	2104      	movs	r1, #4
 8112e40:	f7ff ff94 	bl	8112d6c <std>
 8112e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8112e48:	2201      	movs	r2, #1
 8112e4a:	2109      	movs	r1, #9
 8112e4c:	f7ff ff8e 	bl	8112d6c <std>
 8112e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8112e54:	2202      	movs	r2, #2
 8112e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112e5a:	2112      	movs	r1, #18
 8112e5c:	f7ff bf86 	b.w	8112d6c <std>
 8112e60:	10005178 	.word	0x10005178
 8112e64:	10005040 	.word	0x10005040
 8112e68:	08112dd9 	.word	0x08112dd9

08112e6c <__sfp_lock_acquire>:
 8112e6c:	4801      	ldr	r0, [pc, #4]	@ (8112e74 <__sfp_lock_acquire+0x8>)
 8112e6e:	f000 b966 	b.w	811313e <__retarget_lock_acquire_recursive>
 8112e72:	bf00      	nop
 8112e74:	10005181 	.word	0x10005181

08112e78 <__sfp_lock_release>:
 8112e78:	4801      	ldr	r0, [pc, #4]	@ (8112e80 <__sfp_lock_release+0x8>)
 8112e7a:	f000 b961 	b.w	8113140 <__retarget_lock_release_recursive>
 8112e7e:	bf00      	nop
 8112e80:	10005181 	.word	0x10005181

08112e84 <__sinit>:
 8112e84:	b510      	push	{r4, lr}
 8112e86:	4604      	mov	r4, r0
 8112e88:	f7ff fff0 	bl	8112e6c <__sfp_lock_acquire>
 8112e8c:	6a23      	ldr	r3, [r4, #32]
 8112e8e:	b11b      	cbz	r3, 8112e98 <__sinit+0x14>
 8112e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112e94:	f7ff bff0 	b.w	8112e78 <__sfp_lock_release>
 8112e98:	4b04      	ldr	r3, [pc, #16]	@ (8112eac <__sinit+0x28>)
 8112e9a:	6223      	str	r3, [r4, #32]
 8112e9c:	4b04      	ldr	r3, [pc, #16]	@ (8112eb0 <__sinit+0x2c>)
 8112e9e:	681b      	ldr	r3, [r3, #0]
 8112ea0:	2b00      	cmp	r3, #0
 8112ea2:	d1f5      	bne.n	8112e90 <__sinit+0xc>
 8112ea4:	f7ff ffc4 	bl	8112e30 <global_stdio_init.part.0>
 8112ea8:	e7f2      	b.n	8112e90 <__sinit+0xc>
 8112eaa:	bf00      	nop
 8112eac:	08112df1 	.word	0x08112df1
 8112eb0:	10005178 	.word	0x10005178

08112eb4 <fiprintf>:
 8112eb4:	b40e      	push	{r1, r2, r3}
 8112eb6:	b503      	push	{r0, r1, lr}
 8112eb8:	4601      	mov	r1, r0
 8112eba:	ab03      	add	r3, sp, #12
 8112ebc:	4805      	ldr	r0, [pc, #20]	@ (8112ed4 <fiprintf+0x20>)
 8112ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8112ec2:	6800      	ldr	r0, [r0, #0]
 8112ec4:	9301      	str	r3, [sp, #4]
 8112ec6:	f002 fc2f 	bl	8115728 <_vfiprintf_r>
 8112eca:	b002      	add	sp, #8
 8112ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8112ed0:	b003      	add	sp, #12
 8112ed2:	4770      	bx	lr
 8112ed4:	100000c8 	.word	0x100000c8

08112ed8 <_fwalk_sglue>:
 8112ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112edc:	4607      	mov	r7, r0
 8112ede:	4688      	mov	r8, r1
 8112ee0:	4614      	mov	r4, r2
 8112ee2:	2600      	movs	r6, #0
 8112ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8112ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8112eec:	d505      	bpl.n	8112efa <_fwalk_sglue+0x22>
 8112eee:	6824      	ldr	r4, [r4, #0]
 8112ef0:	2c00      	cmp	r4, #0
 8112ef2:	d1f7      	bne.n	8112ee4 <_fwalk_sglue+0xc>
 8112ef4:	4630      	mov	r0, r6
 8112ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8112efa:	89ab      	ldrh	r3, [r5, #12]
 8112efc:	2b01      	cmp	r3, #1
 8112efe:	d907      	bls.n	8112f10 <_fwalk_sglue+0x38>
 8112f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8112f04:	3301      	adds	r3, #1
 8112f06:	d003      	beq.n	8112f10 <_fwalk_sglue+0x38>
 8112f08:	4629      	mov	r1, r5
 8112f0a:	4638      	mov	r0, r7
 8112f0c:	47c0      	blx	r8
 8112f0e:	4306      	orrs	r6, r0
 8112f10:	3568      	adds	r5, #104	@ 0x68
 8112f12:	e7e9      	b.n	8112ee8 <_fwalk_sglue+0x10>

08112f14 <siprintf>:
 8112f14:	b40e      	push	{r1, r2, r3}
 8112f16:	b500      	push	{lr}
 8112f18:	b09c      	sub	sp, #112	@ 0x70
 8112f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8112f1c:	9002      	str	r0, [sp, #8]
 8112f1e:	9006      	str	r0, [sp, #24]
 8112f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8112f24:	4809      	ldr	r0, [pc, #36]	@ (8112f4c <siprintf+0x38>)
 8112f26:	9107      	str	r1, [sp, #28]
 8112f28:	9104      	str	r1, [sp, #16]
 8112f2a:	4909      	ldr	r1, [pc, #36]	@ (8112f50 <siprintf+0x3c>)
 8112f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8112f30:	9105      	str	r1, [sp, #20]
 8112f32:	6800      	ldr	r0, [r0, #0]
 8112f34:	9301      	str	r3, [sp, #4]
 8112f36:	a902      	add	r1, sp, #8
 8112f38:	f002 fad0 	bl	81154dc <_svfiprintf_r>
 8112f3c:	9b02      	ldr	r3, [sp, #8]
 8112f3e:	2200      	movs	r2, #0
 8112f40:	701a      	strb	r2, [r3, #0]
 8112f42:	b01c      	add	sp, #112	@ 0x70
 8112f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8112f48:	b003      	add	sp, #12
 8112f4a:	4770      	bx	lr
 8112f4c:	100000c8 	.word	0x100000c8
 8112f50:	ffff0208 	.word	0xffff0208

08112f54 <__sread>:
 8112f54:	b510      	push	{r4, lr}
 8112f56:	460c      	mov	r4, r1
 8112f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112f5c:	f000 f890 	bl	8113080 <_read_r>
 8112f60:	2800      	cmp	r0, #0
 8112f62:	bfab      	itete	ge
 8112f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8112f66:	89a3      	ldrhlt	r3, [r4, #12]
 8112f68:	181b      	addge	r3, r3, r0
 8112f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8112f6e:	bfac      	ite	ge
 8112f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8112f72:	81a3      	strhlt	r3, [r4, #12]
 8112f74:	bd10      	pop	{r4, pc}

08112f76 <__swrite>:
 8112f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112f7a:	461f      	mov	r7, r3
 8112f7c:	898b      	ldrh	r3, [r1, #12]
 8112f7e:	05db      	lsls	r3, r3, #23
 8112f80:	4605      	mov	r5, r0
 8112f82:	460c      	mov	r4, r1
 8112f84:	4616      	mov	r6, r2
 8112f86:	d505      	bpl.n	8112f94 <__swrite+0x1e>
 8112f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112f8c:	2302      	movs	r3, #2
 8112f8e:	2200      	movs	r2, #0
 8112f90:	f000 f864 	bl	811305c <_lseek_r>
 8112f94:	89a3      	ldrh	r3, [r4, #12]
 8112f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8112f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8112f9e:	81a3      	strh	r3, [r4, #12]
 8112fa0:	4632      	mov	r2, r6
 8112fa2:	463b      	mov	r3, r7
 8112fa4:	4628      	mov	r0, r5
 8112fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8112faa:	f000 b88b 	b.w	81130c4 <_write_r>

08112fae <__sseek>:
 8112fae:	b510      	push	{r4, lr}
 8112fb0:	460c      	mov	r4, r1
 8112fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112fb6:	f000 f851 	bl	811305c <_lseek_r>
 8112fba:	1c43      	adds	r3, r0, #1
 8112fbc:	89a3      	ldrh	r3, [r4, #12]
 8112fbe:	bf15      	itete	ne
 8112fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8112fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8112fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8112fca:	81a3      	strheq	r3, [r4, #12]
 8112fcc:	bf18      	it	ne
 8112fce:	81a3      	strhne	r3, [r4, #12]
 8112fd0:	bd10      	pop	{r4, pc}

08112fd2 <__sclose>:
 8112fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112fd6:	f000 b831 	b.w	811303c <_close_r>

08112fda <memset>:
 8112fda:	4402      	add	r2, r0
 8112fdc:	4603      	mov	r3, r0
 8112fde:	4293      	cmp	r3, r2
 8112fe0:	d100      	bne.n	8112fe4 <memset+0xa>
 8112fe2:	4770      	bx	lr
 8112fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8112fe8:	e7f9      	b.n	8112fde <memset+0x4>

08112fea <strncmp>:
 8112fea:	b510      	push	{r4, lr}
 8112fec:	b16a      	cbz	r2, 811300a <strncmp+0x20>
 8112fee:	3901      	subs	r1, #1
 8112ff0:	1884      	adds	r4, r0, r2
 8112ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112ff6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8112ffa:	429a      	cmp	r2, r3
 8112ffc:	d103      	bne.n	8113006 <strncmp+0x1c>
 8112ffe:	42a0      	cmp	r0, r4
 8113000:	d001      	beq.n	8113006 <strncmp+0x1c>
 8113002:	2a00      	cmp	r2, #0
 8113004:	d1f5      	bne.n	8112ff2 <strncmp+0x8>
 8113006:	1ad0      	subs	r0, r2, r3
 8113008:	bd10      	pop	{r4, pc}
 811300a:	4610      	mov	r0, r2
 811300c:	e7fc      	b.n	8113008 <strncmp+0x1e>

0811300e <strncpy>:
 811300e:	b510      	push	{r4, lr}
 8113010:	3901      	subs	r1, #1
 8113012:	4603      	mov	r3, r0
 8113014:	b132      	cbz	r2, 8113024 <strncpy+0x16>
 8113016:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811301a:	f803 4b01 	strb.w	r4, [r3], #1
 811301e:	3a01      	subs	r2, #1
 8113020:	2c00      	cmp	r4, #0
 8113022:	d1f7      	bne.n	8113014 <strncpy+0x6>
 8113024:	441a      	add	r2, r3
 8113026:	2100      	movs	r1, #0
 8113028:	4293      	cmp	r3, r2
 811302a:	d100      	bne.n	811302e <strncpy+0x20>
 811302c:	bd10      	pop	{r4, pc}
 811302e:	f803 1b01 	strb.w	r1, [r3], #1
 8113032:	e7f9      	b.n	8113028 <strncpy+0x1a>

08113034 <_localeconv_r>:
 8113034:	4800      	ldr	r0, [pc, #0]	@ (8113038 <_localeconv_r+0x4>)
 8113036:	4770      	bx	lr
 8113038:	10000208 	.word	0x10000208

0811303c <_close_r>:
 811303c:	b538      	push	{r3, r4, r5, lr}
 811303e:	4d06      	ldr	r5, [pc, #24]	@ (8113058 <_close_r+0x1c>)
 8113040:	2300      	movs	r3, #0
 8113042:	4604      	mov	r4, r0
 8113044:	4608      	mov	r0, r1
 8113046:	602b      	str	r3, [r5, #0]
 8113048:	f7ef f976 	bl	8102338 <_close>
 811304c:	1c43      	adds	r3, r0, #1
 811304e:	d102      	bne.n	8113056 <_close_r+0x1a>
 8113050:	682b      	ldr	r3, [r5, #0]
 8113052:	b103      	cbz	r3, 8113056 <_close_r+0x1a>
 8113054:	6023      	str	r3, [r4, #0]
 8113056:	bd38      	pop	{r3, r4, r5, pc}
 8113058:	1000517c 	.word	0x1000517c

0811305c <_lseek_r>:
 811305c:	b538      	push	{r3, r4, r5, lr}
 811305e:	4d07      	ldr	r5, [pc, #28]	@ (811307c <_lseek_r+0x20>)
 8113060:	4604      	mov	r4, r0
 8113062:	4608      	mov	r0, r1
 8113064:	4611      	mov	r1, r2
 8113066:	2200      	movs	r2, #0
 8113068:	602a      	str	r2, [r5, #0]
 811306a:	461a      	mov	r2, r3
 811306c:	f7ef f98b 	bl	8102386 <_lseek>
 8113070:	1c43      	adds	r3, r0, #1
 8113072:	d102      	bne.n	811307a <_lseek_r+0x1e>
 8113074:	682b      	ldr	r3, [r5, #0]
 8113076:	b103      	cbz	r3, 811307a <_lseek_r+0x1e>
 8113078:	6023      	str	r3, [r4, #0]
 811307a:	bd38      	pop	{r3, r4, r5, pc}
 811307c:	1000517c 	.word	0x1000517c

08113080 <_read_r>:
 8113080:	b538      	push	{r3, r4, r5, lr}
 8113082:	4d07      	ldr	r5, [pc, #28]	@ (81130a0 <_read_r+0x20>)
 8113084:	4604      	mov	r4, r0
 8113086:	4608      	mov	r0, r1
 8113088:	4611      	mov	r1, r2
 811308a:	2200      	movs	r2, #0
 811308c:	602a      	str	r2, [r5, #0]
 811308e:	461a      	mov	r2, r3
 8113090:	f7ef f919 	bl	81022c6 <_read>
 8113094:	1c43      	adds	r3, r0, #1
 8113096:	d102      	bne.n	811309e <_read_r+0x1e>
 8113098:	682b      	ldr	r3, [r5, #0]
 811309a:	b103      	cbz	r3, 811309e <_read_r+0x1e>
 811309c:	6023      	str	r3, [r4, #0]
 811309e:	bd38      	pop	{r3, r4, r5, pc}
 81130a0:	1000517c 	.word	0x1000517c

081130a4 <_sbrk_r>:
 81130a4:	b538      	push	{r3, r4, r5, lr}
 81130a6:	4d06      	ldr	r5, [pc, #24]	@ (81130c0 <_sbrk_r+0x1c>)
 81130a8:	2300      	movs	r3, #0
 81130aa:	4604      	mov	r4, r0
 81130ac:	4608      	mov	r0, r1
 81130ae:	602b      	str	r3, [r5, #0]
 81130b0:	f7ef f976 	bl	81023a0 <_sbrk>
 81130b4:	1c43      	adds	r3, r0, #1
 81130b6:	d102      	bne.n	81130be <_sbrk_r+0x1a>
 81130b8:	682b      	ldr	r3, [r5, #0]
 81130ba:	b103      	cbz	r3, 81130be <_sbrk_r+0x1a>
 81130bc:	6023      	str	r3, [r4, #0]
 81130be:	bd38      	pop	{r3, r4, r5, pc}
 81130c0:	1000517c 	.word	0x1000517c

081130c4 <_write_r>:
 81130c4:	b538      	push	{r3, r4, r5, lr}
 81130c6:	4d07      	ldr	r5, [pc, #28]	@ (81130e4 <_write_r+0x20>)
 81130c8:	4604      	mov	r4, r0
 81130ca:	4608      	mov	r0, r1
 81130cc:	4611      	mov	r1, r2
 81130ce:	2200      	movs	r2, #0
 81130d0:	602a      	str	r2, [r5, #0]
 81130d2:	461a      	mov	r2, r3
 81130d4:	f7ef f914 	bl	8102300 <_write>
 81130d8:	1c43      	adds	r3, r0, #1
 81130da:	d102      	bne.n	81130e2 <_write_r+0x1e>
 81130dc:	682b      	ldr	r3, [r5, #0]
 81130de:	b103      	cbz	r3, 81130e2 <_write_r+0x1e>
 81130e0:	6023      	str	r3, [r4, #0]
 81130e2:	bd38      	pop	{r3, r4, r5, pc}
 81130e4:	1000517c 	.word	0x1000517c

081130e8 <__errno>:
 81130e8:	4b01      	ldr	r3, [pc, #4]	@ (81130f0 <__errno+0x8>)
 81130ea:	6818      	ldr	r0, [r3, #0]
 81130ec:	4770      	bx	lr
 81130ee:	bf00      	nop
 81130f0:	100000c8 	.word	0x100000c8

081130f4 <__libc_init_array>:
 81130f4:	b570      	push	{r4, r5, r6, lr}
 81130f6:	4d0d      	ldr	r5, [pc, #52]	@ (811312c <__libc_init_array+0x38>)
 81130f8:	4c0d      	ldr	r4, [pc, #52]	@ (8113130 <__libc_init_array+0x3c>)
 81130fa:	1b64      	subs	r4, r4, r5
 81130fc:	10a4      	asrs	r4, r4, #2
 81130fe:	2600      	movs	r6, #0
 8113100:	42a6      	cmp	r6, r4
 8113102:	d109      	bne.n	8113118 <__libc_init_array+0x24>
 8113104:	4d0b      	ldr	r5, [pc, #44]	@ (8113134 <__libc_init_array+0x40>)
 8113106:	4c0c      	ldr	r4, [pc, #48]	@ (8113138 <__libc_init_array+0x44>)
 8113108:	f004 f98c 	bl	8117424 <_init>
 811310c:	1b64      	subs	r4, r4, r5
 811310e:	10a4      	asrs	r4, r4, #2
 8113110:	2600      	movs	r6, #0
 8113112:	42a6      	cmp	r6, r4
 8113114:	d105      	bne.n	8113122 <__libc_init_array+0x2e>
 8113116:	bd70      	pop	{r4, r5, r6, pc}
 8113118:	f855 3b04 	ldr.w	r3, [r5], #4
 811311c:	4798      	blx	r3
 811311e:	3601      	adds	r6, #1
 8113120:	e7ee      	b.n	8113100 <__libc_init_array+0xc>
 8113122:	f855 3b04 	ldr.w	r3, [r5], #4
 8113126:	4798      	blx	r3
 8113128:	3601      	adds	r6, #1
 811312a:	e7f2      	b.n	8113112 <__libc_init_array+0x1e>
 811312c:	08117cb8 	.word	0x08117cb8
 8113130:	08117cb8 	.word	0x08117cb8
 8113134:	08117cb8 	.word	0x08117cb8
 8113138:	08117cbc 	.word	0x08117cbc

0811313c <__retarget_lock_init_recursive>:
 811313c:	4770      	bx	lr

0811313e <__retarget_lock_acquire_recursive>:
 811313e:	4770      	bx	lr

08113140 <__retarget_lock_release_recursive>:
 8113140:	4770      	bx	lr

08113142 <memcpy>:
 8113142:	440a      	add	r2, r1
 8113144:	4291      	cmp	r1, r2
 8113146:	f100 33ff 	add.w	r3, r0, #4294967295
 811314a:	d100      	bne.n	811314e <memcpy+0xc>
 811314c:	4770      	bx	lr
 811314e:	b510      	push	{r4, lr}
 8113150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8113154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8113158:	4291      	cmp	r1, r2
 811315a:	d1f9      	bne.n	8113150 <memcpy+0xe>
 811315c:	bd10      	pop	{r4, pc}
	...

08113160 <nanf>:
 8113160:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8113168 <nanf+0x8>
 8113164:	4770      	bx	lr
 8113166:	bf00      	nop
 8113168:	7fc00000 	.word	0x7fc00000

0811316c <abort>:
 811316c:	b508      	push	{r3, lr}
 811316e:	2006      	movs	r0, #6
 8113170:	f002 fd74 	bl	8115c5c <raise>
 8113174:	2001      	movs	r0, #1
 8113176:	f7ef f89b 	bl	81022b0 <_exit>

0811317a <quorem>:
 811317a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811317e:	6903      	ldr	r3, [r0, #16]
 8113180:	690c      	ldr	r4, [r1, #16]
 8113182:	42a3      	cmp	r3, r4
 8113184:	4607      	mov	r7, r0
 8113186:	db7e      	blt.n	8113286 <quorem+0x10c>
 8113188:	3c01      	subs	r4, #1
 811318a:	f101 0814 	add.w	r8, r1, #20
 811318e:	00a3      	lsls	r3, r4, #2
 8113190:	f100 0514 	add.w	r5, r0, #20
 8113194:	9300      	str	r3, [sp, #0]
 8113196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811319a:	9301      	str	r3, [sp, #4]
 811319c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81131a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81131a4:	3301      	adds	r3, #1
 81131a6:	429a      	cmp	r2, r3
 81131a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81131ac:	fbb2 f6f3 	udiv	r6, r2, r3
 81131b0:	d32e      	bcc.n	8113210 <quorem+0x96>
 81131b2:	f04f 0a00 	mov.w	sl, #0
 81131b6:	46c4      	mov	ip, r8
 81131b8:	46ae      	mov	lr, r5
 81131ba:	46d3      	mov	fp, sl
 81131bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 81131c0:	b298      	uxth	r0, r3
 81131c2:	fb06 a000 	mla	r0, r6, r0, sl
 81131c6:	0c02      	lsrs	r2, r0, #16
 81131c8:	0c1b      	lsrs	r3, r3, #16
 81131ca:	fb06 2303 	mla	r3, r6, r3, r2
 81131ce:	f8de 2000 	ldr.w	r2, [lr]
 81131d2:	b280      	uxth	r0, r0
 81131d4:	b292      	uxth	r2, r2
 81131d6:	1a12      	subs	r2, r2, r0
 81131d8:	445a      	add	r2, fp
 81131da:	f8de 0000 	ldr.w	r0, [lr]
 81131de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81131e2:	b29b      	uxth	r3, r3
 81131e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 81131e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 81131ec:	b292      	uxth	r2, r2
 81131ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81131f2:	45e1      	cmp	r9, ip
 81131f4:	f84e 2b04 	str.w	r2, [lr], #4
 81131f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81131fc:	d2de      	bcs.n	81131bc <quorem+0x42>
 81131fe:	9b00      	ldr	r3, [sp, #0]
 8113200:	58eb      	ldr	r3, [r5, r3]
 8113202:	b92b      	cbnz	r3, 8113210 <quorem+0x96>
 8113204:	9b01      	ldr	r3, [sp, #4]
 8113206:	3b04      	subs	r3, #4
 8113208:	429d      	cmp	r5, r3
 811320a:	461a      	mov	r2, r3
 811320c:	d32f      	bcc.n	811326e <quorem+0xf4>
 811320e:	613c      	str	r4, [r7, #16]
 8113210:	4638      	mov	r0, r7
 8113212:	f001 f90f 	bl	8114434 <__mcmp>
 8113216:	2800      	cmp	r0, #0
 8113218:	db25      	blt.n	8113266 <quorem+0xec>
 811321a:	4629      	mov	r1, r5
 811321c:	2000      	movs	r0, #0
 811321e:	f858 2b04 	ldr.w	r2, [r8], #4
 8113222:	f8d1 c000 	ldr.w	ip, [r1]
 8113226:	fa1f fe82 	uxth.w	lr, r2
 811322a:	fa1f f38c 	uxth.w	r3, ip
 811322e:	eba3 030e 	sub.w	r3, r3, lr
 8113232:	4403      	add	r3, r0
 8113234:	0c12      	lsrs	r2, r2, #16
 8113236:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 811323a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 811323e:	b29b      	uxth	r3, r3
 8113240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8113244:	45c1      	cmp	r9, r8
 8113246:	f841 3b04 	str.w	r3, [r1], #4
 811324a:	ea4f 4022 	mov.w	r0, r2, asr #16
 811324e:	d2e6      	bcs.n	811321e <quorem+0xa4>
 8113250:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8113254:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8113258:	b922      	cbnz	r2, 8113264 <quorem+0xea>
 811325a:	3b04      	subs	r3, #4
 811325c:	429d      	cmp	r5, r3
 811325e:	461a      	mov	r2, r3
 8113260:	d30b      	bcc.n	811327a <quorem+0x100>
 8113262:	613c      	str	r4, [r7, #16]
 8113264:	3601      	adds	r6, #1
 8113266:	4630      	mov	r0, r6
 8113268:	b003      	add	sp, #12
 811326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811326e:	6812      	ldr	r2, [r2, #0]
 8113270:	3b04      	subs	r3, #4
 8113272:	2a00      	cmp	r2, #0
 8113274:	d1cb      	bne.n	811320e <quorem+0x94>
 8113276:	3c01      	subs	r4, #1
 8113278:	e7c6      	b.n	8113208 <quorem+0x8e>
 811327a:	6812      	ldr	r2, [r2, #0]
 811327c:	3b04      	subs	r3, #4
 811327e:	2a00      	cmp	r2, #0
 8113280:	d1ef      	bne.n	8113262 <quorem+0xe8>
 8113282:	3c01      	subs	r4, #1
 8113284:	e7ea      	b.n	811325c <quorem+0xe2>
 8113286:	2000      	movs	r0, #0
 8113288:	e7ee      	b.n	8113268 <quorem+0xee>
 811328a:	0000      	movs	r0, r0
 811328c:	0000      	movs	r0, r0
	...

08113290 <_dtoa_r>:
 8113290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113294:	69c7      	ldr	r7, [r0, #28]
 8113296:	b099      	sub	sp, #100	@ 0x64
 8113298:	ed8d 0b02 	vstr	d0, [sp, #8]
 811329c:	ec55 4b10 	vmov	r4, r5, d0
 81132a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 81132a2:	9109      	str	r1, [sp, #36]	@ 0x24
 81132a4:	4683      	mov	fp, r0
 81132a6:	920e      	str	r2, [sp, #56]	@ 0x38
 81132a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 81132aa:	b97f      	cbnz	r7, 81132cc <_dtoa_r+0x3c>
 81132ac:	2010      	movs	r0, #16
 81132ae:	f7fe fdb7 	bl	8111e20 <malloc>
 81132b2:	4602      	mov	r2, r0
 81132b4:	f8cb 001c 	str.w	r0, [fp, #28]
 81132b8:	b920      	cbnz	r0, 81132c4 <_dtoa_r+0x34>
 81132ba:	4ba7      	ldr	r3, [pc, #668]	@ (8113558 <_dtoa_r+0x2c8>)
 81132bc:	21ef      	movs	r1, #239	@ 0xef
 81132be:	48a7      	ldr	r0, [pc, #668]	@ (811355c <_dtoa_r+0x2cc>)
 81132c0:	f7fe fd90 	bl	8111de4 <__assert_func>
 81132c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81132c8:	6007      	str	r7, [r0, #0]
 81132ca:	60c7      	str	r7, [r0, #12]
 81132cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 81132d0:	6819      	ldr	r1, [r3, #0]
 81132d2:	b159      	cbz	r1, 81132ec <_dtoa_r+0x5c>
 81132d4:	685a      	ldr	r2, [r3, #4]
 81132d6:	604a      	str	r2, [r1, #4]
 81132d8:	2301      	movs	r3, #1
 81132da:	4093      	lsls	r3, r2
 81132dc:	608b      	str	r3, [r1, #8]
 81132de:	4658      	mov	r0, fp
 81132e0:	f000 fe24 	bl	8113f2c <_Bfree>
 81132e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81132e8:	2200      	movs	r2, #0
 81132ea:	601a      	str	r2, [r3, #0]
 81132ec:	1e2b      	subs	r3, r5, #0
 81132ee:	bfb9      	ittee	lt
 81132f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81132f4:	9303      	strlt	r3, [sp, #12]
 81132f6:	2300      	movge	r3, #0
 81132f8:	6033      	strge	r3, [r6, #0]
 81132fa:	9f03      	ldr	r7, [sp, #12]
 81132fc:	4b98      	ldr	r3, [pc, #608]	@ (8113560 <_dtoa_r+0x2d0>)
 81132fe:	bfbc      	itt	lt
 8113300:	2201      	movlt	r2, #1
 8113302:	6032      	strlt	r2, [r6, #0]
 8113304:	43bb      	bics	r3, r7
 8113306:	d112      	bne.n	811332e <_dtoa_r+0x9e>
 8113308:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 811330a:	f242 730f 	movw	r3, #9999	@ 0x270f
 811330e:	6013      	str	r3, [r2, #0]
 8113310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8113314:	4323      	orrs	r3, r4
 8113316:	f000 854d 	beq.w	8113db4 <_dtoa_r+0xb24>
 811331a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 811331c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8113574 <_dtoa_r+0x2e4>
 8113320:	2b00      	cmp	r3, #0
 8113322:	f000 854f 	beq.w	8113dc4 <_dtoa_r+0xb34>
 8113326:	f10a 0303 	add.w	r3, sl, #3
 811332a:	f000 bd49 	b.w	8113dc0 <_dtoa_r+0xb30>
 811332e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8113332:	2200      	movs	r2, #0
 8113334:	ec51 0b17 	vmov	r0, r1, d7
 8113338:	2300      	movs	r3, #0
 811333a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 811333e:	f7ed fc5b 	bl	8100bf8 <__aeabi_dcmpeq>
 8113342:	4680      	mov	r8, r0
 8113344:	b158      	cbz	r0, 811335e <_dtoa_r+0xce>
 8113346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8113348:	2301      	movs	r3, #1
 811334a:	6013      	str	r3, [r2, #0]
 811334c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 811334e:	b113      	cbz	r3, 8113356 <_dtoa_r+0xc6>
 8113350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8113352:	4b84      	ldr	r3, [pc, #528]	@ (8113564 <_dtoa_r+0x2d4>)
 8113354:	6013      	str	r3, [r2, #0]
 8113356:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8113578 <_dtoa_r+0x2e8>
 811335a:	f000 bd33 	b.w	8113dc4 <_dtoa_r+0xb34>
 811335e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8113362:	aa16      	add	r2, sp, #88	@ 0x58
 8113364:	a917      	add	r1, sp, #92	@ 0x5c
 8113366:	4658      	mov	r0, fp
 8113368:	f001 f984 	bl	8114674 <__d2b>
 811336c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8113370:	4681      	mov	r9, r0
 8113372:	2e00      	cmp	r6, #0
 8113374:	d077      	beq.n	8113466 <_dtoa_r+0x1d6>
 8113376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8113378:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 811337c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8113380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8113384:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8113388:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 811338c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8113390:	4619      	mov	r1, r3
 8113392:	2200      	movs	r2, #0
 8113394:	4b74      	ldr	r3, [pc, #464]	@ (8113568 <_dtoa_r+0x2d8>)
 8113396:	f7ed f80f 	bl	81003b8 <__aeabi_dsub>
 811339a:	a369      	add	r3, pc, #420	@ (adr r3, 8113540 <_dtoa_r+0x2b0>)
 811339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81133a0:	f7ed f9c2 	bl	8100728 <__aeabi_dmul>
 81133a4:	a368      	add	r3, pc, #416	@ (adr r3, 8113548 <_dtoa_r+0x2b8>)
 81133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81133aa:	f7ed f807 	bl	81003bc <__adddf3>
 81133ae:	4604      	mov	r4, r0
 81133b0:	4630      	mov	r0, r6
 81133b2:	460d      	mov	r5, r1
 81133b4:	f7ed f94e 	bl	8100654 <__aeabi_i2d>
 81133b8:	a365      	add	r3, pc, #404	@ (adr r3, 8113550 <_dtoa_r+0x2c0>)
 81133ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81133be:	f7ed f9b3 	bl	8100728 <__aeabi_dmul>
 81133c2:	4602      	mov	r2, r0
 81133c4:	460b      	mov	r3, r1
 81133c6:	4620      	mov	r0, r4
 81133c8:	4629      	mov	r1, r5
 81133ca:	f7ec fff7 	bl	81003bc <__adddf3>
 81133ce:	4604      	mov	r4, r0
 81133d0:	460d      	mov	r5, r1
 81133d2:	f7ed fc59 	bl	8100c88 <__aeabi_d2iz>
 81133d6:	2200      	movs	r2, #0
 81133d8:	4607      	mov	r7, r0
 81133da:	2300      	movs	r3, #0
 81133dc:	4620      	mov	r0, r4
 81133de:	4629      	mov	r1, r5
 81133e0:	f7ed fc14 	bl	8100c0c <__aeabi_dcmplt>
 81133e4:	b140      	cbz	r0, 81133f8 <_dtoa_r+0x168>
 81133e6:	4638      	mov	r0, r7
 81133e8:	f7ed f934 	bl	8100654 <__aeabi_i2d>
 81133ec:	4622      	mov	r2, r4
 81133ee:	462b      	mov	r3, r5
 81133f0:	f7ed fc02 	bl	8100bf8 <__aeabi_dcmpeq>
 81133f4:	b900      	cbnz	r0, 81133f8 <_dtoa_r+0x168>
 81133f6:	3f01      	subs	r7, #1
 81133f8:	2f16      	cmp	r7, #22
 81133fa:	d851      	bhi.n	81134a0 <_dtoa_r+0x210>
 81133fc:	4b5b      	ldr	r3, [pc, #364]	@ (811356c <_dtoa_r+0x2dc>)
 81133fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8113402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811340a:	f7ed fbff 	bl	8100c0c <__aeabi_dcmplt>
 811340e:	2800      	cmp	r0, #0
 8113410:	d048      	beq.n	81134a4 <_dtoa_r+0x214>
 8113412:	3f01      	subs	r7, #1
 8113414:	2300      	movs	r3, #0
 8113416:	9312      	str	r3, [sp, #72]	@ 0x48
 8113418:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 811341a:	1b9b      	subs	r3, r3, r6
 811341c:	1e5a      	subs	r2, r3, #1
 811341e:	bf44      	itt	mi
 8113420:	f1c3 0801 	rsbmi	r8, r3, #1
 8113424:	2300      	movmi	r3, #0
 8113426:	9208      	str	r2, [sp, #32]
 8113428:	bf54      	ite	pl
 811342a:	f04f 0800 	movpl.w	r8, #0
 811342e:	9308      	strmi	r3, [sp, #32]
 8113430:	2f00      	cmp	r7, #0
 8113432:	db39      	blt.n	81134a8 <_dtoa_r+0x218>
 8113434:	9b08      	ldr	r3, [sp, #32]
 8113436:	970f      	str	r7, [sp, #60]	@ 0x3c
 8113438:	443b      	add	r3, r7
 811343a:	9308      	str	r3, [sp, #32]
 811343c:	2300      	movs	r3, #0
 811343e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113442:	2b09      	cmp	r3, #9
 8113444:	d864      	bhi.n	8113510 <_dtoa_r+0x280>
 8113446:	2b05      	cmp	r3, #5
 8113448:	bfc4      	itt	gt
 811344a:	3b04      	subgt	r3, #4
 811344c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 811344e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113450:	f1a3 0302 	sub.w	r3, r3, #2
 8113454:	bfcc      	ite	gt
 8113456:	2400      	movgt	r4, #0
 8113458:	2401      	movle	r4, #1
 811345a:	2b03      	cmp	r3, #3
 811345c:	d863      	bhi.n	8113526 <_dtoa_r+0x296>
 811345e:	e8df f003 	tbb	[pc, r3]
 8113462:	372a      	.short	0x372a
 8113464:	5535      	.short	0x5535
 8113466:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 811346a:	441e      	add	r6, r3
 811346c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8113470:	2b20      	cmp	r3, #32
 8113472:	bfc1      	itttt	gt
 8113474:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8113478:	409f      	lslgt	r7, r3
 811347a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 811347e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8113482:	bfd6      	itet	le
 8113484:	f1c3 0320 	rsble	r3, r3, #32
 8113488:	ea47 0003 	orrgt.w	r0, r7, r3
 811348c:	fa04 f003 	lslle.w	r0, r4, r3
 8113490:	f7ed f8d0 	bl	8100634 <__aeabi_ui2d>
 8113494:	2201      	movs	r2, #1
 8113496:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 811349a:	3e01      	subs	r6, #1
 811349c:	9214      	str	r2, [sp, #80]	@ 0x50
 811349e:	e777      	b.n	8113390 <_dtoa_r+0x100>
 81134a0:	2301      	movs	r3, #1
 81134a2:	e7b8      	b.n	8113416 <_dtoa_r+0x186>
 81134a4:	9012      	str	r0, [sp, #72]	@ 0x48
 81134a6:	e7b7      	b.n	8113418 <_dtoa_r+0x188>
 81134a8:	427b      	negs	r3, r7
 81134aa:	930a      	str	r3, [sp, #40]	@ 0x28
 81134ac:	2300      	movs	r3, #0
 81134ae:	eba8 0807 	sub.w	r8, r8, r7
 81134b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 81134b4:	e7c4      	b.n	8113440 <_dtoa_r+0x1b0>
 81134b6:	2300      	movs	r3, #0
 81134b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81134ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81134bc:	2b00      	cmp	r3, #0
 81134be:	dc35      	bgt.n	811352c <_dtoa_r+0x29c>
 81134c0:	2301      	movs	r3, #1
 81134c2:	9300      	str	r3, [sp, #0]
 81134c4:	9307      	str	r3, [sp, #28]
 81134c6:	461a      	mov	r2, r3
 81134c8:	920e      	str	r2, [sp, #56]	@ 0x38
 81134ca:	e00b      	b.n	81134e4 <_dtoa_r+0x254>
 81134cc:	2301      	movs	r3, #1
 81134ce:	e7f3      	b.n	81134b8 <_dtoa_r+0x228>
 81134d0:	2300      	movs	r3, #0
 81134d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 81134d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81134d6:	18fb      	adds	r3, r7, r3
 81134d8:	9300      	str	r3, [sp, #0]
 81134da:	3301      	adds	r3, #1
 81134dc:	2b01      	cmp	r3, #1
 81134de:	9307      	str	r3, [sp, #28]
 81134e0:	bfb8      	it	lt
 81134e2:	2301      	movlt	r3, #1
 81134e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 81134e8:	2100      	movs	r1, #0
 81134ea:	2204      	movs	r2, #4
 81134ec:	f102 0514 	add.w	r5, r2, #20
 81134f0:	429d      	cmp	r5, r3
 81134f2:	d91f      	bls.n	8113534 <_dtoa_r+0x2a4>
 81134f4:	6041      	str	r1, [r0, #4]
 81134f6:	4658      	mov	r0, fp
 81134f8:	f000 fcd8 	bl	8113eac <_Balloc>
 81134fc:	4682      	mov	sl, r0
 81134fe:	2800      	cmp	r0, #0
 8113500:	d13c      	bne.n	811357c <_dtoa_r+0x2ec>
 8113502:	4b1b      	ldr	r3, [pc, #108]	@ (8113570 <_dtoa_r+0x2e0>)
 8113504:	4602      	mov	r2, r0
 8113506:	f240 11af 	movw	r1, #431	@ 0x1af
 811350a:	e6d8      	b.n	81132be <_dtoa_r+0x2e>
 811350c:	2301      	movs	r3, #1
 811350e:	e7e0      	b.n	81134d2 <_dtoa_r+0x242>
 8113510:	2401      	movs	r4, #1
 8113512:	2300      	movs	r3, #0
 8113514:	9309      	str	r3, [sp, #36]	@ 0x24
 8113516:	940b      	str	r4, [sp, #44]	@ 0x2c
 8113518:	f04f 33ff 	mov.w	r3, #4294967295
 811351c:	9300      	str	r3, [sp, #0]
 811351e:	9307      	str	r3, [sp, #28]
 8113520:	2200      	movs	r2, #0
 8113522:	2312      	movs	r3, #18
 8113524:	e7d0      	b.n	81134c8 <_dtoa_r+0x238>
 8113526:	2301      	movs	r3, #1
 8113528:	930b      	str	r3, [sp, #44]	@ 0x2c
 811352a:	e7f5      	b.n	8113518 <_dtoa_r+0x288>
 811352c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811352e:	9300      	str	r3, [sp, #0]
 8113530:	9307      	str	r3, [sp, #28]
 8113532:	e7d7      	b.n	81134e4 <_dtoa_r+0x254>
 8113534:	3101      	adds	r1, #1
 8113536:	0052      	lsls	r2, r2, #1
 8113538:	e7d8      	b.n	81134ec <_dtoa_r+0x25c>
 811353a:	bf00      	nop
 811353c:	f3af 8000 	nop.w
 8113540:	636f4361 	.word	0x636f4361
 8113544:	3fd287a7 	.word	0x3fd287a7
 8113548:	8b60c8b3 	.word	0x8b60c8b3
 811354c:	3fc68a28 	.word	0x3fc68a28
 8113550:	509f79fb 	.word	0x509f79fb
 8113554:	3fd34413 	.word	0x3fd34413
 8113558:	081179cd 	.word	0x081179cd
 811355c:	081179e4 	.word	0x081179e4
 8113560:	7ff00000 	.word	0x7ff00000
 8113564:	08117998 	.word	0x08117998
 8113568:	3ff80000 	.word	0x3ff80000
 811356c:	08117ae0 	.word	0x08117ae0
 8113570:	08117a3c 	.word	0x08117a3c
 8113574:	081179c9 	.word	0x081179c9
 8113578:	08117997 	.word	0x08117997
 811357c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8113580:	6018      	str	r0, [r3, #0]
 8113582:	9b07      	ldr	r3, [sp, #28]
 8113584:	2b0e      	cmp	r3, #14
 8113586:	f200 80a4 	bhi.w	81136d2 <_dtoa_r+0x442>
 811358a:	2c00      	cmp	r4, #0
 811358c:	f000 80a1 	beq.w	81136d2 <_dtoa_r+0x442>
 8113590:	2f00      	cmp	r7, #0
 8113592:	dd33      	ble.n	81135fc <_dtoa_r+0x36c>
 8113594:	4bad      	ldr	r3, [pc, #692]	@ (811384c <_dtoa_r+0x5bc>)
 8113596:	f007 020f 	and.w	r2, r7, #15
 811359a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811359e:	ed93 7b00 	vldr	d7, [r3]
 81135a2:	05f8      	lsls	r0, r7, #23
 81135a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 81135a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 81135ac:	d516      	bpl.n	81135dc <_dtoa_r+0x34c>
 81135ae:	4ba8      	ldr	r3, [pc, #672]	@ (8113850 <_dtoa_r+0x5c0>)
 81135b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81135b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81135b8:	f7ed f9e0 	bl	810097c <__aeabi_ddiv>
 81135bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81135c0:	f004 040f 	and.w	r4, r4, #15
 81135c4:	2603      	movs	r6, #3
 81135c6:	4da2      	ldr	r5, [pc, #648]	@ (8113850 <_dtoa_r+0x5c0>)
 81135c8:	b954      	cbnz	r4, 81135e0 <_dtoa_r+0x350>
 81135ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81135ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81135d2:	f7ed f9d3 	bl	810097c <__aeabi_ddiv>
 81135d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81135da:	e028      	b.n	811362e <_dtoa_r+0x39e>
 81135dc:	2602      	movs	r6, #2
 81135de:	e7f2      	b.n	81135c6 <_dtoa_r+0x336>
 81135e0:	07e1      	lsls	r1, r4, #31
 81135e2:	d508      	bpl.n	81135f6 <_dtoa_r+0x366>
 81135e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81135e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 81135ec:	f7ed f89c 	bl	8100728 <__aeabi_dmul>
 81135f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81135f4:	3601      	adds	r6, #1
 81135f6:	1064      	asrs	r4, r4, #1
 81135f8:	3508      	adds	r5, #8
 81135fa:	e7e5      	b.n	81135c8 <_dtoa_r+0x338>
 81135fc:	f000 80d2 	beq.w	81137a4 <_dtoa_r+0x514>
 8113600:	427c      	negs	r4, r7
 8113602:	4b92      	ldr	r3, [pc, #584]	@ (811384c <_dtoa_r+0x5bc>)
 8113604:	4d92      	ldr	r5, [pc, #584]	@ (8113850 <_dtoa_r+0x5c0>)
 8113606:	f004 020f 	and.w	r2, r4, #15
 811360a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8113616:	f7ed f887 	bl	8100728 <__aeabi_dmul>
 811361a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811361e:	1124      	asrs	r4, r4, #4
 8113620:	2300      	movs	r3, #0
 8113622:	2602      	movs	r6, #2
 8113624:	2c00      	cmp	r4, #0
 8113626:	f040 80b2 	bne.w	811378e <_dtoa_r+0x4fe>
 811362a:	2b00      	cmp	r3, #0
 811362c:	d1d3      	bne.n	81135d6 <_dtoa_r+0x346>
 811362e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8113630:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8113634:	2b00      	cmp	r3, #0
 8113636:	f000 80b7 	beq.w	81137a8 <_dtoa_r+0x518>
 811363a:	4b86      	ldr	r3, [pc, #536]	@ (8113854 <_dtoa_r+0x5c4>)
 811363c:	2200      	movs	r2, #0
 811363e:	4620      	mov	r0, r4
 8113640:	4629      	mov	r1, r5
 8113642:	f7ed fae3 	bl	8100c0c <__aeabi_dcmplt>
 8113646:	2800      	cmp	r0, #0
 8113648:	f000 80ae 	beq.w	81137a8 <_dtoa_r+0x518>
 811364c:	9b07      	ldr	r3, [sp, #28]
 811364e:	2b00      	cmp	r3, #0
 8113650:	f000 80aa 	beq.w	81137a8 <_dtoa_r+0x518>
 8113654:	9b00      	ldr	r3, [sp, #0]
 8113656:	2b00      	cmp	r3, #0
 8113658:	dd37      	ble.n	81136ca <_dtoa_r+0x43a>
 811365a:	1e7b      	subs	r3, r7, #1
 811365c:	9304      	str	r3, [sp, #16]
 811365e:	4620      	mov	r0, r4
 8113660:	4b7d      	ldr	r3, [pc, #500]	@ (8113858 <_dtoa_r+0x5c8>)
 8113662:	2200      	movs	r2, #0
 8113664:	4629      	mov	r1, r5
 8113666:	f7ed f85f 	bl	8100728 <__aeabi_dmul>
 811366a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811366e:	9c00      	ldr	r4, [sp, #0]
 8113670:	3601      	adds	r6, #1
 8113672:	4630      	mov	r0, r6
 8113674:	f7ec ffee 	bl	8100654 <__aeabi_i2d>
 8113678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811367c:	f7ed f854 	bl	8100728 <__aeabi_dmul>
 8113680:	4b76      	ldr	r3, [pc, #472]	@ (811385c <_dtoa_r+0x5cc>)
 8113682:	2200      	movs	r2, #0
 8113684:	f7ec fe9a 	bl	81003bc <__adddf3>
 8113688:	4605      	mov	r5, r0
 811368a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 811368e:	2c00      	cmp	r4, #0
 8113690:	f040 808d 	bne.w	81137ae <_dtoa_r+0x51e>
 8113694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8113698:	4b71      	ldr	r3, [pc, #452]	@ (8113860 <_dtoa_r+0x5d0>)
 811369a:	2200      	movs	r2, #0
 811369c:	f7ec fe8c 	bl	81003b8 <__aeabi_dsub>
 81136a0:	4602      	mov	r2, r0
 81136a2:	460b      	mov	r3, r1
 81136a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81136a8:	462a      	mov	r2, r5
 81136aa:	4633      	mov	r3, r6
 81136ac:	f7ed facc 	bl	8100c48 <__aeabi_dcmpgt>
 81136b0:	2800      	cmp	r0, #0
 81136b2:	f040 828b 	bne.w	8113bcc <_dtoa_r+0x93c>
 81136b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81136ba:	462a      	mov	r2, r5
 81136bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81136c0:	f7ed faa4 	bl	8100c0c <__aeabi_dcmplt>
 81136c4:	2800      	cmp	r0, #0
 81136c6:	f040 8128 	bne.w	811391a <_dtoa_r+0x68a>
 81136ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 81136ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 81136d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81136d4:	2b00      	cmp	r3, #0
 81136d6:	f2c0 815a 	blt.w	811398e <_dtoa_r+0x6fe>
 81136da:	2f0e      	cmp	r7, #14
 81136dc:	f300 8157 	bgt.w	811398e <_dtoa_r+0x6fe>
 81136e0:	4b5a      	ldr	r3, [pc, #360]	@ (811384c <_dtoa_r+0x5bc>)
 81136e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81136e6:	ed93 7b00 	vldr	d7, [r3]
 81136ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81136ec:	2b00      	cmp	r3, #0
 81136ee:	ed8d 7b00 	vstr	d7, [sp]
 81136f2:	da03      	bge.n	81136fc <_dtoa_r+0x46c>
 81136f4:	9b07      	ldr	r3, [sp, #28]
 81136f6:	2b00      	cmp	r3, #0
 81136f8:	f340 8101 	ble.w	81138fe <_dtoa_r+0x66e>
 81136fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8113700:	4656      	mov	r6, sl
 8113702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8113706:	4620      	mov	r0, r4
 8113708:	4629      	mov	r1, r5
 811370a:	f7ed f937 	bl	810097c <__aeabi_ddiv>
 811370e:	f7ed fabb 	bl	8100c88 <__aeabi_d2iz>
 8113712:	4680      	mov	r8, r0
 8113714:	f7ec ff9e 	bl	8100654 <__aeabi_i2d>
 8113718:	e9dd 2300 	ldrd	r2, r3, [sp]
 811371c:	f7ed f804 	bl	8100728 <__aeabi_dmul>
 8113720:	4602      	mov	r2, r0
 8113722:	460b      	mov	r3, r1
 8113724:	4620      	mov	r0, r4
 8113726:	4629      	mov	r1, r5
 8113728:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 811372c:	f7ec fe44 	bl	81003b8 <__aeabi_dsub>
 8113730:	f806 4b01 	strb.w	r4, [r6], #1
 8113734:	9d07      	ldr	r5, [sp, #28]
 8113736:	eba6 040a 	sub.w	r4, r6, sl
 811373a:	42a5      	cmp	r5, r4
 811373c:	4602      	mov	r2, r0
 811373e:	460b      	mov	r3, r1
 8113740:	f040 8117 	bne.w	8113972 <_dtoa_r+0x6e2>
 8113744:	f7ec fe3a 	bl	81003bc <__adddf3>
 8113748:	e9dd 2300 	ldrd	r2, r3, [sp]
 811374c:	4604      	mov	r4, r0
 811374e:	460d      	mov	r5, r1
 8113750:	f7ed fa7a 	bl	8100c48 <__aeabi_dcmpgt>
 8113754:	2800      	cmp	r0, #0
 8113756:	f040 80f9 	bne.w	811394c <_dtoa_r+0x6bc>
 811375a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811375e:	4620      	mov	r0, r4
 8113760:	4629      	mov	r1, r5
 8113762:	f7ed fa49 	bl	8100bf8 <__aeabi_dcmpeq>
 8113766:	b118      	cbz	r0, 8113770 <_dtoa_r+0x4e0>
 8113768:	f018 0f01 	tst.w	r8, #1
 811376c:	f040 80ee 	bne.w	811394c <_dtoa_r+0x6bc>
 8113770:	4649      	mov	r1, r9
 8113772:	4658      	mov	r0, fp
 8113774:	f000 fbda 	bl	8113f2c <_Bfree>
 8113778:	2300      	movs	r3, #0
 811377a:	7033      	strb	r3, [r6, #0]
 811377c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 811377e:	3701      	adds	r7, #1
 8113780:	601f      	str	r7, [r3, #0]
 8113782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8113784:	2b00      	cmp	r3, #0
 8113786:	f000 831d 	beq.w	8113dc4 <_dtoa_r+0xb34>
 811378a:	601e      	str	r6, [r3, #0]
 811378c:	e31a      	b.n	8113dc4 <_dtoa_r+0xb34>
 811378e:	07e2      	lsls	r2, r4, #31
 8113790:	d505      	bpl.n	811379e <_dtoa_r+0x50e>
 8113792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8113796:	f7ec ffc7 	bl	8100728 <__aeabi_dmul>
 811379a:	3601      	adds	r6, #1
 811379c:	2301      	movs	r3, #1
 811379e:	1064      	asrs	r4, r4, #1
 81137a0:	3508      	adds	r5, #8
 81137a2:	e73f      	b.n	8113624 <_dtoa_r+0x394>
 81137a4:	2602      	movs	r6, #2
 81137a6:	e742      	b.n	811362e <_dtoa_r+0x39e>
 81137a8:	9c07      	ldr	r4, [sp, #28]
 81137aa:	9704      	str	r7, [sp, #16]
 81137ac:	e761      	b.n	8113672 <_dtoa_r+0x3e2>
 81137ae:	4b27      	ldr	r3, [pc, #156]	@ (811384c <_dtoa_r+0x5bc>)
 81137b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81137b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81137b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81137ba:	4454      	add	r4, sl
 81137bc:	2900      	cmp	r1, #0
 81137be:	d053      	beq.n	8113868 <_dtoa_r+0x5d8>
 81137c0:	4928      	ldr	r1, [pc, #160]	@ (8113864 <_dtoa_r+0x5d4>)
 81137c2:	2000      	movs	r0, #0
 81137c4:	f7ed f8da 	bl	810097c <__aeabi_ddiv>
 81137c8:	4633      	mov	r3, r6
 81137ca:	462a      	mov	r2, r5
 81137cc:	f7ec fdf4 	bl	81003b8 <__aeabi_dsub>
 81137d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 81137d4:	4656      	mov	r6, sl
 81137d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81137da:	f7ed fa55 	bl	8100c88 <__aeabi_d2iz>
 81137de:	4605      	mov	r5, r0
 81137e0:	f7ec ff38 	bl	8100654 <__aeabi_i2d>
 81137e4:	4602      	mov	r2, r0
 81137e6:	460b      	mov	r3, r1
 81137e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81137ec:	f7ec fde4 	bl	81003b8 <__aeabi_dsub>
 81137f0:	3530      	adds	r5, #48	@ 0x30
 81137f2:	4602      	mov	r2, r0
 81137f4:	460b      	mov	r3, r1
 81137f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81137fa:	f806 5b01 	strb.w	r5, [r6], #1
 81137fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8113802:	f7ed fa03 	bl	8100c0c <__aeabi_dcmplt>
 8113806:	2800      	cmp	r0, #0
 8113808:	d171      	bne.n	81138ee <_dtoa_r+0x65e>
 811380a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811380e:	4911      	ldr	r1, [pc, #68]	@ (8113854 <_dtoa_r+0x5c4>)
 8113810:	2000      	movs	r0, #0
 8113812:	f7ec fdd1 	bl	81003b8 <__aeabi_dsub>
 8113816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 811381a:	f7ed f9f7 	bl	8100c0c <__aeabi_dcmplt>
 811381e:	2800      	cmp	r0, #0
 8113820:	f040 8095 	bne.w	811394e <_dtoa_r+0x6be>
 8113824:	42a6      	cmp	r6, r4
 8113826:	f43f af50 	beq.w	81136ca <_dtoa_r+0x43a>
 811382a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 811382e:	4b0a      	ldr	r3, [pc, #40]	@ (8113858 <_dtoa_r+0x5c8>)
 8113830:	2200      	movs	r2, #0
 8113832:	f7ec ff79 	bl	8100728 <__aeabi_dmul>
 8113836:	4b08      	ldr	r3, [pc, #32]	@ (8113858 <_dtoa_r+0x5c8>)
 8113838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 811383c:	2200      	movs	r2, #0
 811383e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8113842:	f7ec ff71 	bl	8100728 <__aeabi_dmul>
 8113846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811384a:	e7c4      	b.n	81137d6 <_dtoa_r+0x546>
 811384c:	08117ae0 	.word	0x08117ae0
 8113850:	08117ab8 	.word	0x08117ab8
 8113854:	3ff00000 	.word	0x3ff00000
 8113858:	40240000 	.word	0x40240000
 811385c:	401c0000 	.word	0x401c0000
 8113860:	40140000 	.word	0x40140000
 8113864:	3fe00000 	.word	0x3fe00000
 8113868:	4631      	mov	r1, r6
 811386a:	4628      	mov	r0, r5
 811386c:	f7ec ff5c 	bl	8100728 <__aeabi_dmul>
 8113870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8113874:	9415      	str	r4, [sp, #84]	@ 0x54
 8113876:	4656      	mov	r6, sl
 8113878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811387c:	f7ed fa04 	bl	8100c88 <__aeabi_d2iz>
 8113880:	4605      	mov	r5, r0
 8113882:	f7ec fee7 	bl	8100654 <__aeabi_i2d>
 8113886:	4602      	mov	r2, r0
 8113888:	460b      	mov	r3, r1
 811388a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811388e:	f7ec fd93 	bl	81003b8 <__aeabi_dsub>
 8113892:	3530      	adds	r5, #48	@ 0x30
 8113894:	f806 5b01 	strb.w	r5, [r6], #1
 8113898:	4602      	mov	r2, r0
 811389a:	460b      	mov	r3, r1
 811389c:	42a6      	cmp	r6, r4
 811389e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81138a2:	f04f 0200 	mov.w	r2, #0
 81138a6:	d124      	bne.n	81138f2 <_dtoa_r+0x662>
 81138a8:	4bac      	ldr	r3, [pc, #688]	@ (8113b5c <_dtoa_r+0x8cc>)
 81138aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 81138ae:	f7ec fd85 	bl	81003bc <__adddf3>
 81138b2:	4602      	mov	r2, r0
 81138b4:	460b      	mov	r3, r1
 81138b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81138ba:	f7ed f9c5 	bl	8100c48 <__aeabi_dcmpgt>
 81138be:	2800      	cmp	r0, #0
 81138c0:	d145      	bne.n	811394e <_dtoa_r+0x6be>
 81138c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81138c6:	49a5      	ldr	r1, [pc, #660]	@ (8113b5c <_dtoa_r+0x8cc>)
 81138c8:	2000      	movs	r0, #0
 81138ca:	f7ec fd75 	bl	81003b8 <__aeabi_dsub>
 81138ce:	4602      	mov	r2, r0
 81138d0:	460b      	mov	r3, r1
 81138d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81138d6:	f7ed f999 	bl	8100c0c <__aeabi_dcmplt>
 81138da:	2800      	cmp	r0, #0
 81138dc:	f43f aef5 	beq.w	81136ca <_dtoa_r+0x43a>
 81138e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 81138e2:	1e73      	subs	r3, r6, #1
 81138e4:	9315      	str	r3, [sp, #84]	@ 0x54
 81138e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 81138ea:	2b30      	cmp	r3, #48	@ 0x30
 81138ec:	d0f8      	beq.n	81138e0 <_dtoa_r+0x650>
 81138ee:	9f04      	ldr	r7, [sp, #16]
 81138f0:	e73e      	b.n	8113770 <_dtoa_r+0x4e0>
 81138f2:	4b9b      	ldr	r3, [pc, #620]	@ (8113b60 <_dtoa_r+0x8d0>)
 81138f4:	f7ec ff18 	bl	8100728 <__aeabi_dmul>
 81138f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81138fc:	e7bc      	b.n	8113878 <_dtoa_r+0x5e8>
 81138fe:	d10c      	bne.n	811391a <_dtoa_r+0x68a>
 8113900:	4b98      	ldr	r3, [pc, #608]	@ (8113b64 <_dtoa_r+0x8d4>)
 8113902:	2200      	movs	r2, #0
 8113904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8113908:	f7ec ff0e 	bl	8100728 <__aeabi_dmul>
 811390c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8113910:	f7ed f990 	bl	8100c34 <__aeabi_dcmpge>
 8113914:	2800      	cmp	r0, #0
 8113916:	f000 8157 	beq.w	8113bc8 <_dtoa_r+0x938>
 811391a:	2400      	movs	r4, #0
 811391c:	4625      	mov	r5, r4
 811391e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8113920:	43db      	mvns	r3, r3
 8113922:	9304      	str	r3, [sp, #16]
 8113924:	4656      	mov	r6, sl
 8113926:	2700      	movs	r7, #0
 8113928:	4621      	mov	r1, r4
 811392a:	4658      	mov	r0, fp
 811392c:	f000 fafe 	bl	8113f2c <_Bfree>
 8113930:	2d00      	cmp	r5, #0
 8113932:	d0dc      	beq.n	81138ee <_dtoa_r+0x65e>
 8113934:	b12f      	cbz	r7, 8113942 <_dtoa_r+0x6b2>
 8113936:	42af      	cmp	r7, r5
 8113938:	d003      	beq.n	8113942 <_dtoa_r+0x6b2>
 811393a:	4639      	mov	r1, r7
 811393c:	4658      	mov	r0, fp
 811393e:	f000 faf5 	bl	8113f2c <_Bfree>
 8113942:	4629      	mov	r1, r5
 8113944:	4658      	mov	r0, fp
 8113946:	f000 faf1 	bl	8113f2c <_Bfree>
 811394a:	e7d0      	b.n	81138ee <_dtoa_r+0x65e>
 811394c:	9704      	str	r7, [sp, #16]
 811394e:	4633      	mov	r3, r6
 8113950:	461e      	mov	r6, r3
 8113952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113956:	2a39      	cmp	r2, #57	@ 0x39
 8113958:	d107      	bne.n	811396a <_dtoa_r+0x6da>
 811395a:	459a      	cmp	sl, r3
 811395c:	d1f8      	bne.n	8113950 <_dtoa_r+0x6c0>
 811395e:	9a04      	ldr	r2, [sp, #16]
 8113960:	3201      	adds	r2, #1
 8113962:	9204      	str	r2, [sp, #16]
 8113964:	2230      	movs	r2, #48	@ 0x30
 8113966:	f88a 2000 	strb.w	r2, [sl]
 811396a:	781a      	ldrb	r2, [r3, #0]
 811396c:	3201      	adds	r2, #1
 811396e:	701a      	strb	r2, [r3, #0]
 8113970:	e7bd      	b.n	81138ee <_dtoa_r+0x65e>
 8113972:	4b7b      	ldr	r3, [pc, #492]	@ (8113b60 <_dtoa_r+0x8d0>)
 8113974:	2200      	movs	r2, #0
 8113976:	f7ec fed7 	bl	8100728 <__aeabi_dmul>
 811397a:	2200      	movs	r2, #0
 811397c:	2300      	movs	r3, #0
 811397e:	4604      	mov	r4, r0
 8113980:	460d      	mov	r5, r1
 8113982:	f7ed f939 	bl	8100bf8 <__aeabi_dcmpeq>
 8113986:	2800      	cmp	r0, #0
 8113988:	f43f aebb 	beq.w	8113702 <_dtoa_r+0x472>
 811398c:	e6f0      	b.n	8113770 <_dtoa_r+0x4e0>
 811398e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8113990:	2a00      	cmp	r2, #0
 8113992:	f000 80db 	beq.w	8113b4c <_dtoa_r+0x8bc>
 8113996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8113998:	2a01      	cmp	r2, #1
 811399a:	f300 80bf 	bgt.w	8113b1c <_dtoa_r+0x88c>
 811399e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 81139a0:	2a00      	cmp	r2, #0
 81139a2:	f000 80b7 	beq.w	8113b14 <_dtoa_r+0x884>
 81139a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81139aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81139ac:	4646      	mov	r6, r8
 81139ae:	9a08      	ldr	r2, [sp, #32]
 81139b0:	2101      	movs	r1, #1
 81139b2:	441a      	add	r2, r3
 81139b4:	4658      	mov	r0, fp
 81139b6:	4498      	add	r8, r3
 81139b8:	9208      	str	r2, [sp, #32]
 81139ba:	f000 fbb5 	bl	8114128 <__i2b>
 81139be:	4605      	mov	r5, r0
 81139c0:	b15e      	cbz	r6, 81139da <_dtoa_r+0x74a>
 81139c2:	9b08      	ldr	r3, [sp, #32]
 81139c4:	2b00      	cmp	r3, #0
 81139c6:	dd08      	ble.n	81139da <_dtoa_r+0x74a>
 81139c8:	42b3      	cmp	r3, r6
 81139ca:	9a08      	ldr	r2, [sp, #32]
 81139cc:	bfa8      	it	ge
 81139ce:	4633      	movge	r3, r6
 81139d0:	eba8 0803 	sub.w	r8, r8, r3
 81139d4:	1af6      	subs	r6, r6, r3
 81139d6:	1ad3      	subs	r3, r2, r3
 81139d8:	9308      	str	r3, [sp, #32]
 81139da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81139dc:	b1f3      	cbz	r3, 8113a1c <_dtoa_r+0x78c>
 81139de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81139e0:	2b00      	cmp	r3, #0
 81139e2:	f000 80b7 	beq.w	8113b54 <_dtoa_r+0x8c4>
 81139e6:	b18c      	cbz	r4, 8113a0c <_dtoa_r+0x77c>
 81139e8:	4629      	mov	r1, r5
 81139ea:	4622      	mov	r2, r4
 81139ec:	4658      	mov	r0, fp
 81139ee:	f000 fc5b 	bl	81142a8 <__pow5mult>
 81139f2:	464a      	mov	r2, r9
 81139f4:	4601      	mov	r1, r0
 81139f6:	4605      	mov	r5, r0
 81139f8:	4658      	mov	r0, fp
 81139fa:	f000 fbab 	bl	8114154 <__multiply>
 81139fe:	4649      	mov	r1, r9
 8113a00:	9004      	str	r0, [sp, #16]
 8113a02:	4658      	mov	r0, fp
 8113a04:	f000 fa92 	bl	8113f2c <_Bfree>
 8113a08:	9b04      	ldr	r3, [sp, #16]
 8113a0a:	4699      	mov	r9, r3
 8113a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113a0e:	1b1a      	subs	r2, r3, r4
 8113a10:	d004      	beq.n	8113a1c <_dtoa_r+0x78c>
 8113a12:	4649      	mov	r1, r9
 8113a14:	4658      	mov	r0, fp
 8113a16:	f000 fc47 	bl	81142a8 <__pow5mult>
 8113a1a:	4681      	mov	r9, r0
 8113a1c:	2101      	movs	r1, #1
 8113a1e:	4658      	mov	r0, fp
 8113a20:	f000 fb82 	bl	8114128 <__i2b>
 8113a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113a26:	4604      	mov	r4, r0
 8113a28:	2b00      	cmp	r3, #0
 8113a2a:	f000 81cf 	beq.w	8113dcc <_dtoa_r+0xb3c>
 8113a2e:	461a      	mov	r2, r3
 8113a30:	4601      	mov	r1, r0
 8113a32:	4658      	mov	r0, fp
 8113a34:	f000 fc38 	bl	81142a8 <__pow5mult>
 8113a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113a3a:	2b01      	cmp	r3, #1
 8113a3c:	4604      	mov	r4, r0
 8113a3e:	f300 8095 	bgt.w	8113b6c <_dtoa_r+0x8dc>
 8113a42:	9b02      	ldr	r3, [sp, #8]
 8113a44:	2b00      	cmp	r3, #0
 8113a46:	f040 8087 	bne.w	8113b58 <_dtoa_r+0x8c8>
 8113a4a:	9b03      	ldr	r3, [sp, #12]
 8113a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8113a50:	2b00      	cmp	r3, #0
 8113a52:	f040 8089 	bne.w	8113b68 <_dtoa_r+0x8d8>
 8113a56:	9b03      	ldr	r3, [sp, #12]
 8113a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8113a5c:	0d1b      	lsrs	r3, r3, #20
 8113a5e:	051b      	lsls	r3, r3, #20
 8113a60:	b12b      	cbz	r3, 8113a6e <_dtoa_r+0x7de>
 8113a62:	9b08      	ldr	r3, [sp, #32]
 8113a64:	3301      	adds	r3, #1
 8113a66:	9308      	str	r3, [sp, #32]
 8113a68:	f108 0801 	add.w	r8, r8, #1
 8113a6c:	2301      	movs	r3, #1
 8113a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113a72:	2b00      	cmp	r3, #0
 8113a74:	f000 81b0 	beq.w	8113dd8 <_dtoa_r+0xb48>
 8113a78:	6923      	ldr	r3, [r4, #16]
 8113a7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8113a7e:	6918      	ldr	r0, [r3, #16]
 8113a80:	f000 fb06 	bl	8114090 <__hi0bits>
 8113a84:	f1c0 0020 	rsb	r0, r0, #32
 8113a88:	9b08      	ldr	r3, [sp, #32]
 8113a8a:	4418      	add	r0, r3
 8113a8c:	f010 001f 	ands.w	r0, r0, #31
 8113a90:	d077      	beq.n	8113b82 <_dtoa_r+0x8f2>
 8113a92:	f1c0 0320 	rsb	r3, r0, #32
 8113a96:	2b04      	cmp	r3, #4
 8113a98:	dd6b      	ble.n	8113b72 <_dtoa_r+0x8e2>
 8113a9a:	9b08      	ldr	r3, [sp, #32]
 8113a9c:	f1c0 001c 	rsb	r0, r0, #28
 8113aa0:	4403      	add	r3, r0
 8113aa2:	4480      	add	r8, r0
 8113aa4:	4406      	add	r6, r0
 8113aa6:	9308      	str	r3, [sp, #32]
 8113aa8:	f1b8 0f00 	cmp.w	r8, #0
 8113aac:	dd05      	ble.n	8113aba <_dtoa_r+0x82a>
 8113aae:	4649      	mov	r1, r9
 8113ab0:	4642      	mov	r2, r8
 8113ab2:	4658      	mov	r0, fp
 8113ab4:	f000 fc52 	bl	811435c <__lshift>
 8113ab8:	4681      	mov	r9, r0
 8113aba:	9b08      	ldr	r3, [sp, #32]
 8113abc:	2b00      	cmp	r3, #0
 8113abe:	dd05      	ble.n	8113acc <_dtoa_r+0x83c>
 8113ac0:	4621      	mov	r1, r4
 8113ac2:	461a      	mov	r2, r3
 8113ac4:	4658      	mov	r0, fp
 8113ac6:	f000 fc49 	bl	811435c <__lshift>
 8113aca:	4604      	mov	r4, r0
 8113acc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8113ace:	2b00      	cmp	r3, #0
 8113ad0:	d059      	beq.n	8113b86 <_dtoa_r+0x8f6>
 8113ad2:	4621      	mov	r1, r4
 8113ad4:	4648      	mov	r0, r9
 8113ad6:	f000 fcad 	bl	8114434 <__mcmp>
 8113ada:	2800      	cmp	r0, #0
 8113adc:	da53      	bge.n	8113b86 <_dtoa_r+0x8f6>
 8113ade:	1e7b      	subs	r3, r7, #1
 8113ae0:	9304      	str	r3, [sp, #16]
 8113ae2:	4649      	mov	r1, r9
 8113ae4:	2300      	movs	r3, #0
 8113ae6:	220a      	movs	r2, #10
 8113ae8:	4658      	mov	r0, fp
 8113aea:	f000 fa41 	bl	8113f70 <__multadd>
 8113aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113af0:	4681      	mov	r9, r0
 8113af2:	2b00      	cmp	r3, #0
 8113af4:	f000 8172 	beq.w	8113ddc <_dtoa_r+0xb4c>
 8113af8:	2300      	movs	r3, #0
 8113afa:	4629      	mov	r1, r5
 8113afc:	220a      	movs	r2, #10
 8113afe:	4658      	mov	r0, fp
 8113b00:	f000 fa36 	bl	8113f70 <__multadd>
 8113b04:	9b00      	ldr	r3, [sp, #0]
 8113b06:	2b00      	cmp	r3, #0
 8113b08:	4605      	mov	r5, r0
 8113b0a:	dc67      	bgt.n	8113bdc <_dtoa_r+0x94c>
 8113b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113b0e:	2b02      	cmp	r3, #2
 8113b10:	dc41      	bgt.n	8113b96 <_dtoa_r+0x906>
 8113b12:	e063      	b.n	8113bdc <_dtoa_r+0x94c>
 8113b14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8113b16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8113b1a:	e746      	b.n	81139aa <_dtoa_r+0x71a>
 8113b1c:	9b07      	ldr	r3, [sp, #28]
 8113b1e:	1e5c      	subs	r4, r3, #1
 8113b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113b22:	42a3      	cmp	r3, r4
 8113b24:	bfbf      	itttt	lt
 8113b26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8113b28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8113b2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8113b2c:	1ae3      	sublt	r3, r4, r3
 8113b2e:	bfb4      	ite	lt
 8113b30:	18d2      	addlt	r2, r2, r3
 8113b32:	1b1c      	subge	r4, r3, r4
 8113b34:	9b07      	ldr	r3, [sp, #28]
 8113b36:	bfbc      	itt	lt
 8113b38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8113b3a:	2400      	movlt	r4, #0
 8113b3c:	2b00      	cmp	r3, #0
 8113b3e:	bfb5      	itete	lt
 8113b40:	eba8 0603 	sublt.w	r6, r8, r3
 8113b44:	9b07      	ldrge	r3, [sp, #28]
 8113b46:	2300      	movlt	r3, #0
 8113b48:	4646      	movge	r6, r8
 8113b4a:	e730      	b.n	81139ae <_dtoa_r+0x71e>
 8113b4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8113b4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8113b50:	4646      	mov	r6, r8
 8113b52:	e735      	b.n	81139c0 <_dtoa_r+0x730>
 8113b54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8113b56:	e75c      	b.n	8113a12 <_dtoa_r+0x782>
 8113b58:	2300      	movs	r3, #0
 8113b5a:	e788      	b.n	8113a6e <_dtoa_r+0x7de>
 8113b5c:	3fe00000 	.word	0x3fe00000
 8113b60:	40240000 	.word	0x40240000
 8113b64:	40140000 	.word	0x40140000
 8113b68:	9b02      	ldr	r3, [sp, #8]
 8113b6a:	e780      	b.n	8113a6e <_dtoa_r+0x7de>
 8113b6c:	2300      	movs	r3, #0
 8113b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113b70:	e782      	b.n	8113a78 <_dtoa_r+0x7e8>
 8113b72:	d099      	beq.n	8113aa8 <_dtoa_r+0x818>
 8113b74:	9a08      	ldr	r2, [sp, #32]
 8113b76:	331c      	adds	r3, #28
 8113b78:	441a      	add	r2, r3
 8113b7a:	4498      	add	r8, r3
 8113b7c:	441e      	add	r6, r3
 8113b7e:	9208      	str	r2, [sp, #32]
 8113b80:	e792      	b.n	8113aa8 <_dtoa_r+0x818>
 8113b82:	4603      	mov	r3, r0
 8113b84:	e7f6      	b.n	8113b74 <_dtoa_r+0x8e4>
 8113b86:	9b07      	ldr	r3, [sp, #28]
 8113b88:	9704      	str	r7, [sp, #16]
 8113b8a:	2b00      	cmp	r3, #0
 8113b8c:	dc20      	bgt.n	8113bd0 <_dtoa_r+0x940>
 8113b8e:	9300      	str	r3, [sp, #0]
 8113b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113b92:	2b02      	cmp	r3, #2
 8113b94:	dd1e      	ble.n	8113bd4 <_dtoa_r+0x944>
 8113b96:	9b00      	ldr	r3, [sp, #0]
 8113b98:	2b00      	cmp	r3, #0
 8113b9a:	f47f aec0 	bne.w	811391e <_dtoa_r+0x68e>
 8113b9e:	4621      	mov	r1, r4
 8113ba0:	2205      	movs	r2, #5
 8113ba2:	4658      	mov	r0, fp
 8113ba4:	f000 f9e4 	bl	8113f70 <__multadd>
 8113ba8:	4601      	mov	r1, r0
 8113baa:	4604      	mov	r4, r0
 8113bac:	4648      	mov	r0, r9
 8113bae:	f000 fc41 	bl	8114434 <__mcmp>
 8113bb2:	2800      	cmp	r0, #0
 8113bb4:	f77f aeb3 	ble.w	811391e <_dtoa_r+0x68e>
 8113bb8:	4656      	mov	r6, sl
 8113bba:	2331      	movs	r3, #49	@ 0x31
 8113bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8113bc0:	9b04      	ldr	r3, [sp, #16]
 8113bc2:	3301      	adds	r3, #1
 8113bc4:	9304      	str	r3, [sp, #16]
 8113bc6:	e6ae      	b.n	8113926 <_dtoa_r+0x696>
 8113bc8:	9c07      	ldr	r4, [sp, #28]
 8113bca:	9704      	str	r7, [sp, #16]
 8113bcc:	4625      	mov	r5, r4
 8113bce:	e7f3      	b.n	8113bb8 <_dtoa_r+0x928>
 8113bd0:	9b07      	ldr	r3, [sp, #28]
 8113bd2:	9300      	str	r3, [sp, #0]
 8113bd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113bd6:	2b00      	cmp	r3, #0
 8113bd8:	f000 8104 	beq.w	8113de4 <_dtoa_r+0xb54>
 8113bdc:	2e00      	cmp	r6, #0
 8113bde:	dd05      	ble.n	8113bec <_dtoa_r+0x95c>
 8113be0:	4629      	mov	r1, r5
 8113be2:	4632      	mov	r2, r6
 8113be4:	4658      	mov	r0, fp
 8113be6:	f000 fbb9 	bl	811435c <__lshift>
 8113bea:	4605      	mov	r5, r0
 8113bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113bee:	2b00      	cmp	r3, #0
 8113bf0:	d05a      	beq.n	8113ca8 <_dtoa_r+0xa18>
 8113bf2:	6869      	ldr	r1, [r5, #4]
 8113bf4:	4658      	mov	r0, fp
 8113bf6:	f000 f959 	bl	8113eac <_Balloc>
 8113bfa:	4606      	mov	r6, r0
 8113bfc:	b928      	cbnz	r0, 8113c0a <_dtoa_r+0x97a>
 8113bfe:	4b84      	ldr	r3, [pc, #528]	@ (8113e10 <_dtoa_r+0xb80>)
 8113c00:	4602      	mov	r2, r0
 8113c02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8113c06:	f7ff bb5a 	b.w	81132be <_dtoa_r+0x2e>
 8113c0a:	692a      	ldr	r2, [r5, #16]
 8113c0c:	3202      	adds	r2, #2
 8113c0e:	0092      	lsls	r2, r2, #2
 8113c10:	f105 010c 	add.w	r1, r5, #12
 8113c14:	300c      	adds	r0, #12
 8113c16:	f7ff fa94 	bl	8113142 <memcpy>
 8113c1a:	2201      	movs	r2, #1
 8113c1c:	4631      	mov	r1, r6
 8113c1e:	4658      	mov	r0, fp
 8113c20:	f000 fb9c 	bl	811435c <__lshift>
 8113c24:	f10a 0301 	add.w	r3, sl, #1
 8113c28:	9307      	str	r3, [sp, #28]
 8113c2a:	9b00      	ldr	r3, [sp, #0]
 8113c2c:	4453      	add	r3, sl
 8113c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113c30:	9b02      	ldr	r3, [sp, #8]
 8113c32:	f003 0301 	and.w	r3, r3, #1
 8113c36:	462f      	mov	r7, r5
 8113c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8113c3a:	4605      	mov	r5, r0
 8113c3c:	9b07      	ldr	r3, [sp, #28]
 8113c3e:	4621      	mov	r1, r4
 8113c40:	3b01      	subs	r3, #1
 8113c42:	4648      	mov	r0, r9
 8113c44:	9300      	str	r3, [sp, #0]
 8113c46:	f7ff fa98 	bl	811317a <quorem>
 8113c4a:	4639      	mov	r1, r7
 8113c4c:	9002      	str	r0, [sp, #8]
 8113c4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8113c52:	4648      	mov	r0, r9
 8113c54:	f000 fbee 	bl	8114434 <__mcmp>
 8113c58:	462a      	mov	r2, r5
 8113c5a:	9008      	str	r0, [sp, #32]
 8113c5c:	4621      	mov	r1, r4
 8113c5e:	4658      	mov	r0, fp
 8113c60:	f000 fc04 	bl	811446c <__mdiff>
 8113c64:	68c2      	ldr	r2, [r0, #12]
 8113c66:	4606      	mov	r6, r0
 8113c68:	bb02      	cbnz	r2, 8113cac <_dtoa_r+0xa1c>
 8113c6a:	4601      	mov	r1, r0
 8113c6c:	4648      	mov	r0, r9
 8113c6e:	f000 fbe1 	bl	8114434 <__mcmp>
 8113c72:	4602      	mov	r2, r0
 8113c74:	4631      	mov	r1, r6
 8113c76:	4658      	mov	r0, fp
 8113c78:	920e      	str	r2, [sp, #56]	@ 0x38
 8113c7a:	f000 f957 	bl	8113f2c <_Bfree>
 8113c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113c80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8113c82:	9e07      	ldr	r6, [sp, #28]
 8113c84:	ea43 0102 	orr.w	r1, r3, r2
 8113c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113c8a:	4319      	orrs	r1, r3
 8113c8c:	d110      	bne.n	8113cb0 <_dtoa_r+0xa20>
 8113c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8113c92:	d029      	beq.n	8113ce8 <_dtoa_r+0xa58>
 8113c94:	9b08      	ldr	r3, [sp, #32]
 8113c96:	2b00      	cmp	r3, #0
 8113c98:	dd02      	ble.n	8113ca0 <_dtoa_r+0xa10>
 8113c9a:	9b02      	ldr	r3, [sp, #8]
 8113c9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8113ca0:	9b00      	ldr	r3, [sp, #0]
 8113ca2:	f883 8000 	strb.w	r8, [r3]
 8113ca6:	e63f      	b.n	8113928 <_dtoa_r+0x698>
 8113ca8:	4628      	mov	r0, r5
 8113caa:	e7bb      	b.n	8113c24 <_dtoa_r+0x994>
 8113cac:	2201      	movs	r2, #1
 8113cae:	e7e1      	b.n	8113c74 <_dtoa_r+0x9e4>
 8113cb0:	9b08      	ldr	r3, [sp, #32]
 8113cb2:	2b00      	cmp	r3, #0
 8113cb4:	db04      	blt.n	8113cc0 <_dtoa_r+0xa30>
 8113cb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8113cb8:	430b      	orrs	r3, r1
 8113cba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8113cbc:	430b      	orrs	r3, r1
 8113cbe:	d120      	bne.n	8113d02 <_dtoa_r+0xa72>
 8113cc0:	2a00      	cmp	r2, #0
 8113cc2:	dded      	ble.n	8113ca0 <_dtoa_r+0xa10>
 8113cc4:	4649      	mov	r1, r9
 8113cc6:	2201      	movs	r2, #1
 8113cc8:	4658      	mov	r0, fp
 8113cca:	f000 fb47 	bl	811435c <__lshift>
 8113cce:	4621      	mov	r1, r4
 8113cd0:	4681      	mov	r9, r0
 8113cd2:	f000 fbaf 	bl	8114434 <__mcmp>
 8113cd6:	2800      	cmp	r0, #0
 8113cd8:	dc03      	bgt.n	8113ce2 <_dtoa_r+0xa52>
 8113cda:	d1e1      	bne.n	8113ca0 <_dtoa_r+0xa10>
 8113cdc:	f018 0f01 	tst.w	r8, #1
 8113ce0:	d0de      	beq.n	8113ca0 <_dtoa_r+0xa10>
 8113ce2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8113ce6:	d1d8      	bne.n	8113c9a <_dtoa_r+0xa0a>
 8113ce8:	9a00      	ldr	r2, [sp, #0]
 8113cea:	2339      	movs	r3, #57	@ 0x39
 8113cec:	7013      	strb	r3, [r2, #0]
 8113cee:	4633      	mov	r3, r6
 8113cf0:	461e      	mov	r6, r3
 8113cf2:	3b01      	subs	r3, #1
 8113cf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8113cf8:	2a39      	cmp	r2, #57	@ 0x39
 8113cfa:	d052      	beq.n	8113da2 <_dtoa_r+0xb12>
 8113cfc:	3201      	adds	r2, #1
 8113cfe:	701a      	strb	r2, [r3, #0]
 8113d00:	e612      	b.n	8113928 <_dtoa_r+0x698>
 8113d02:	2a00      	cmp	r2, #0
 8113d04:	dd07      	ble.n	8113d16 <_dtoa_r+0xa86>
 8113d06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8113d0a:	d0ed      	beq.n	8113ce8 <_dtoa_r+0xa58>
 8113d0c:	9a00      	ldr	r2, [sp, #0]
 8113d0e:	f108 0301 	add.w	r3, r8, #1
 8113d12:	7013      	strb	r3, [r2, #0]
 8113d14:	e608      	b.n	8113928 <_dtoa_r+0x698>
 8113d16:	9b07      	ldr	r3, [sp, #28]
 8113d18:	9a07      	ldr	r2, [sp, #28]
 8113d1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8113d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113d20:	4293      	cmp	r3, r2
 8113d22:	d028      	beq.n	8113d76 <_dtoa_r+0xae6>
 8113d24:	4649      	mov	r1, r9
 8113d26:	2300      	movs	r3, #0
 8113d28:	220a      	movs	r2, #10
 8113d2a:	4658      	mov	r0, fp
 8113d2c:	f000 f920 	bl	8113f70 <__multadd>
 8113d30:	42af      	cmp	r7, r5
 8113d32:	4681      	mov	r9, r0
 8113d34:	f04f 0300 	mov.w	r3, #0
 8113d38:	f04f 020a 	mov.w	r2, #10
 8113d3c:	4639      	mov	r1, r7
 8113d3e:	4658      	mov	r0, fp
 8113d40:	d107      	bne.n	8113d52 <_dtoa_r+0xac2>
 8113d42:	f000 f915 	bl	8113f70 <__multadd>
 8113d46:	4607      	mov	r7, r0
 8113d48:	4605      	mov	r5, r0
 8113d4a:	9b07      	ldr	r3, [sp, #28]
 8113d4c:	3301      	adds	r3, #1
 8113d4e:	9307      	str	r3, [sp, #28]
 8113d50:	e774      	b.n	8113c3c <_dtoa_r+0x9ac>
 8113d52:	f000 f90d 	bl	8113f70 <__multadd>
 8113d56:	4629      	mov	r1, r5
 8113d58:	4607      	mov	r7, r0
 8113d5a:	2300      	movs	r3, #0
 8113d5c:	220a      	movs	r2, #10
 8113d5e:	4658      	mov	r0, fp
 8113d60:	f000 f906 	bl	8113f70 <__multadd>
 8113d64:	4605      	mov	r5, r0
 8113d66:	e7f0      	b.n	8113d4a <_dtoa_r+0xaba>
 8113d68:	9b00      	ldr	r3, [sp, #0]
 8113d6a:	2b00      	cmp	r3, #0
 8113d6c:	bfcc      	ite	gt
 8113d6e:	461e      	movgt	r6, r3
 8113d70:	2601      	movle	r6, #1
 8113d72:	4456      	add	r6, sl
 8113d74:	2700      	movs	r7, #0
 8113d76:	4649      	mov	r1, r9
 8113d78:	2201      	movs	r2, #1
 8113d7a:	4658      	mov	r0, fp
 8113d7c:	f000 faee 	bl	811435c <__lshift>
 8113d80:	4621      	mov	r1, r4
 8113d82:	4681      	mov	r9, r0
 8113d84:	f000 fb56 	bl	8114434 <__mcmp>
 8113d88:	2800      	cmp	r0, #0
 8113d8a:	dcb0      	bgt.n	8113cee <_dtoa_r+0xa5e>
 8113d8c:	d102      	bne.n	8113d94 <_dtoa_r+0xb04>
 8113d8e:	f018 0f01 	tst.w	r8, #1
 8113d92:	d1ac      	bne.n	8113cee <_dtoa_r+0xa5e>
 8113d94:	4633      	mov	r3, r6
 8113d96:	461e      	mov	r6, r3
 8113d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113d9c:	2a30      	cmp	r2, #48	@ 0x30
 8113d9e:	d0fa      	beq.n	8113d96 <_dtoa_r+0xb06>
 8113da0:	e5c2      	b.n	8113928 <_dtoa_r+0x698>
 8113da2:	459a      	cmp	sl, r3
 8113da4:	d1a4      	bne.n	8113cf0 <_dtoa_r+0xa60>
 8113da6:	9b04      	ldr	r3, [sp, #16]
 8113da8:	3301      	adds	r3, #1
 8113daa:	9304      	str	r3, [sp, #16]
 8113dac:	2331      	movs	r3, #49	@ 0x31
 8113dae:	f88a 3000 	strb.w	r3, [sl]
 8113db2:	e5b9      	b.n	8113928 <_dtoa_r+0x698>
 8113db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8113db6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8113e14 <_dtoa_r+0xb84>
 8113dba:	b11b      	cbz	r3, 8113dc4 <_dtoa_r+0xb34>
 8113dbc:	f10a 0308 	add.w	r3, sl, #8
 8113dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8113dc2:	6013      	str	r3, [r2, #0]
 8113dc4:	4650      	mov	r0, sl
 8113dc6:	b019      	add	sp, #100	@ 0x64
 8113dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113dce:	2b01      	cmp	r3, #1
 8113dd0:	f77f ae37 	ble.w	8113a42 <_dtoa_r+0x7b2>
 8113dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8113dd8:	2001      	movs	r0, #1
 8113dda:	e655      	b.n	8113a88 <_dtoa_r+0x7f8>
 8113ddc:	9b00      	ldr	r3, [sp, #0]
 8113dde:	2b00      	cmp	r3, #0
 8113de0:	f77f aed6 	ble.w	8113b90 <_dtoa_r+0x900>
 8113de4:	4656      	mov	r6, sl
 8113de6:	4621      	mov	r1, r4
 8113de8:	4648      	mov	r0, r9
 8113dea:	f7ff f9c6 	bl	811317a <quorem>
 8113dee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8113df2:	f806 8b01 	strb.w	r8, [r6], #1
 8113df6:	9b00      	ldr	r3, [sp, #0]
 8113df8:	eba6 020a 	sub.w	r2, r6, sl
 8113dfc:	4293      	cmp	r3, r2
 8113dfe:	ddb3      	ble.n	8113d68 <_dtoa_r+0xad8>
 8113e00:	4649      	mov	r1, r9
 8113e02:	2300      	movs	r3, #0
 8113e04:	220a      	movs	r2, #10
 8113e06:	4658      	mov	r0, fp
 8113e08:	f000 f8b2 	bl	8113f70 <__multadd>
 8113e0c:	4681      	mov	r9, r0
 8113e0e:	e7ea      	b.n	8113de6 <_dtoa_r+0xb56>
 8113e10:	08117a3c 	.word	0x08117a3c
 8113e14:	081179c0 	.word	0x081179c0

08113e18 <_free_r>:
 8113e18:	b538      	push	{r3, r4, r5, lr}
 8113e1a:	4605      	mov	r5, r0
 8113e1c:	2900      	cmp	r1, #0
 8113e1e:	d041      	beq.n	8113ea4 <_free_r+0x8c>
 8113e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8113e24:	1f0c      	subs	r4, r1, #4
 8113e26:	2b00      	cmp	r3, #0
 8113e28:	bfb8      	it	lt
 8113e2a:	18e4      	addlt	r4, r4, r3
 8113e2c:	f7fe f8aa 	bl	8111f84 <__malloc_lock>
 8113e30:	4a1d      	ldr	r2, [pc, #116]	@ (8113ea8 <_free_r+0x90>)
 8113e32:	6813      	ldr	r3, [r2, #0]
 8113e34:	b933      	cbnz	r3, 8113e44 <_free_r+0x2c>
 8113e36:	6063      	str	r3, [r4, #4]
 8113e38:	6014      	str	r4, [r2, #0]
 8113e3a:	4628      	mov	r0, r5
 8113e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113e40:	f7fe b8a6 	b.w	8111f90 <__malloc_unlock>
 8113e44:	42a3      	cmp	r3, r4
 8113e46:	d908      	bls.n	8113e5a <_free_r+0x42>
 8113e48:	6820      	ldr	r0, [r4, #0]
 8113e4a:	1821      	adds	r1, r4, r0
 8113e4c:	428b      	cmp	r3, r1
 8113e4e:	bf01      	itttt	eq
 8113e50:	6819      	ldreq	r1, [r3, #0]
 8113e52:	685b      	ldreq	r3, [r3, #4]
 8113e54:	1809      	addeq	r1, r1, r0
 8113e56:	6021      	streq	r1, [r4, #0]
 8113e58:	e7ed      	b.n	8113e36 <_free_r+0x1e>
 8113e5a:	461a      	mov	r2, r3
 8113e5c:	685b      	ldr	r3, [r3, #4]
 8113e5e:	b10b      	cbz	r3, 8113e64 <_free_r+0x4c>
 8113e60:	42a3      	cmp	r3, r4
 8113e62:	d9fa      	bls.n	8113e5a <_free_r+0x42>
 8113e64:	6811      	ldr	r1, [r2, #0]
 8113e66:	1850      	adds	r0, r2, r1
 8113e68:	42a0      	cmp	r0, r4
 8113e6a:	d10b      	bne.n	8113e84 <_free_r+0x6c>
 8113e6c:	6820      	ldr	r0, [r4, #0]
 8113e6e:	4401      	add	r1, r0
 8113e70:	1850      	adds	r0, r2, r1
 8113e72:	4283      	cmp	r3, r0
 8113e74:	6011      	str	r1, [r2, #0]
 8113e76:	d1e0      	bne.n	8113e3a <_free_r+0x22>
 8113e78:	6818      	ldr	r0, [r3, #0]
 8113e7a:	685b      	ldr	r3, [r3, #4]
 8113e7c:	6053      	str	r3, [r2, #4]
 8113e7e:	4408      	add	r0, r1
 8113e80:	6010      	str	r0, [r2, #0]
 8113e82:	e7da      	b.n	8113e3a <_free_r+0x22>
 8113e84:	d902      	bls.n	8113e8c <_free_r+0x74>
 8113e86:	230c      	movs	r3, #12
 8113e88:	602b      	str	r3, [r5, #0]
 8113e8a:	e7d6      	b.n	8113e3a <_free_r+0x22>
 8113e8c:	6820      	ldr	r0, [r4, #0]
 8113e8e:	1821      	adds	r1, r4, r0
 8113e90:	428b      	cmp	r3, r1
 8113e92:	bf04      	itt	eq
 8113e94:	6819      	ldreq	r1, [r3, #0]
 8113e96:	685b      	ldreq	r3, [r3, #4]
 8113e98:	6063      	str	r3, [r4, #4]
 8113e9a:	bf04      	itt	eq
 8113e9c:	1809      	addeq	r1, r1, r0
 8113e9e:	6021      	streq	r1, [r4, #0]
 8113ea0:	6054      	str	r4, [r2, #4]
 8113ea2:	e7ca      	b.n	8113e3a <_free_r+0x22>
 8113ea4:	bd38      	pop	{r3, r4, r5, pc}
 8113ea6:	bf00      	nop
 8113ea8:	1000503c 	.word	0x1000503c

08113eac <_Balloc>:
 8113eac:	b570      	push	{r4, r5, r6, lr}
 8113eae:	69c6      	ldr	r6, [r0, #28]
 8113eb0:	4604      	mov	r4, r0
 8113eb2:	460d      	mov	r5, r1
 8113eb4:	b976      	cbnz	r6, 8113ed4 <_Balloc+0x28>
 8113eb6:	2010      	movs	r0, #16
 8113eb8:	f7fd ffb2 	bl	8111e20 <malloc>
 8113ebc:	4602      	mov	r2, r0
 8113ebe:	61e0      	str	r0, [r4, #28]
 8113ec0:	b920      	cbnz	r0, 8113ecc <_Balloc+0x20>
 8113ec2:	4b18      	ldr	r3, [pc, #96]	@ (8113f24 <_Balloc+0x78>)
 8113ec4:	4818      	ldr	r0, [pc, #96]	@ (8113f28 <_Balloc+0x7c>)
 8113ec6:	216b      	movs	r1, #107	@ 0x6b
 8113ec8:	f7fd ff8c 	bl	8111de4 <__assert_func>
 8113ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8113ed0:	6006      	str	r6, [r0, #0]
 8113ed2:	60c6      	str	r6, [r0, #12]
 8113ed4:	69e6      	ldr	r6, [r4, #28]
 8113ed6:	68f3      	ldr	r3, [r6, #12]
 8113ed8:	b183      	cbz	r3, 8113efc <_Balloc+0x50>
 8113eda:	69e3      	ldr	r3, [r4, #28]
 8113edc:	68db      	ldr	r3, [r3, #12]
 8113ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8113ee2:	b9b8      	cbnz	r0, 8113f14 <_Balloc+0x68>
 8113ee4:	2101      	movs	r1, #1
 8113ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8113eea:	1d72      	adds	r2, r6, #5
 8113eec:	0092      	lsls	r2, r2, #2
 8113eee:	4620      	mov	r0, r4
 8113ef0:	f001 feda 	bl	8115ca8 <_calloc_r>
 8113ef4:	b160      	cbz	r0, 8113f10 <_Balloc+0x64>
 8113ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8113efa:	e00e      	b.n	8113f1a <_Balloc+0x6e>
 8113efc:	2221      	movs	r2, #33	@ 0x21
 8113efe:	2104      	movs	r1, #4
 8113f00:	4620      	mov	r0, r4
 8113f02:	f001 fed1 	bl	8115ca8 <_calloc_r>
 8113f06:	69e3      	ldr	r3, [r4, #28]
 8113f08:	60f0      	str	r0, [r6, #12]
 8113f0a:	68db      	ldr	r3, [r3, #12]
 8113f0c:	2b00      	cmp	r3, #0
 8113f0e:	d1e4      	bne.n	8113eda <_Balloc+0x2e>
 8113f10:	2000      	movs	r0, #0
 8113f12:	bd70      	pop	{r4, r5, r6, pc}
 8113f14:	6802      	ldr	r2, [r0, #0]
 8113f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8113f1a:	2300      	movs	r3, #0
 8113f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8113f20:	e7f7      	b.n	8113f12 <_Balloc+0x66>
 8113f22:	bf00      	nop
 8113f24:	081179cd 	.word	0x081179cd
 8113f28:	08117a4d 	.word	0x08117a4d

08113f2c <_Bfree>:
 8113f2c:	b570      	push	{r4, r5, r6, lr}
 8113f2e:	69c6      	ldr	r6, [r0, #28]
 8113f30:	4605      	mov	r5, r0
 8113f32:	460c      	mov	r4, r1
 8113f34:	b976      	cbnz	r6, 8113f54 <_Bfree+0x28>
 8113f36:	2010      	movs	r0, #16
 8113f38:	f7fd ff72 	bl	8111e20 <malloc>
 8113f3c:	4602      	mov	r2, r0
 8113f3e:	61e8      	str	r0, [r5, #28]
 8113f40:	b920      	cbnz	r0, 8113f4c <_Bfree+0x20>
 8113f42:	4b09      	ldr	r3, [pc, #36]	@ (8113f68 <_Bfree+0x3c>)
 8113f44:	4809      	ldr	r0, [pc, #36]	@ (8113f6c <_Bfree+0x40>)
 8113f46:	218f      	movs	r1, #143	@ 0x8f
 8113f48:	f7fd ff4c 	bl	8111de4 <__assert_func>
 8113f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8113f50:	6006      	str	r6, [r0, #0]
 8113f52:	60c6      	str	r6, [r0, #12]
 8113f54:	b13c      	cbz	r4, 8113f66 <_Bfree+0x3a>
 8113f56:	69eb      	ldr	r3, [r5, #28]
 8113f58:	6862      	ldr	r2, [r4, #4]
 8113f5a:	68db      	ldr	r3, [r3, #12]
 8113f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8113f60:	6021      	str	r1, [r4, #0]
 8113f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8113f66:	bd70      	pop	{r4, r5, r6, pc}
 8113f68:	081179cd 	.word	0x081179cd
 8113f6c:	08117a4d 	.word	0x08117a4d

08113f70 <__multadd>:
 8113f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113f74:	690d      	ldr	r5, [r1, #16]
 8113f76:	4607      	mov	r7, r0
 8113f78:	460c      	mov	r4, r1
 8113f7a:	461e      	mov	r6, r3
 8113f7c:	f101 0c14 	add.w	ip, r1, #20
 8113f80:	2000      	movs	r0, #0
 8113f82:	f8dc 3000 	ldr.w	r3, [ip]
 8113f86:	b299      	uxth	r1, r3
 8113f88:	fb02 6101 	mla	r1, r2, r1, r6
 8113f8c:	0c1e      	lsrs	r6, r3, #16
 8113f8e:	0c0b      	lsrs	r3, r1, #16
 8113f90:	fb02 3306 	mla	r3, r2, r6, r3
 8113f94:	b289      	uxth	r1, r1
 8113f96:	3001      	adds	r0, #1
 8113f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8113f9c:	4285      	cmp	r5, r0
 8113f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8113fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8113fa6:	dcec      	bgt.n	8113f82 <__multadd+0x12>
 8113fa8:	b30e      	cbz	r6, 8113fee <__multadd+0x7e>
 8113faa:	68a3      	ldr	r3, [r4, #8]
 8113fac:	42ab      	cmp	r3, r5
 8113fae:	dc19      	bgt.n	8113fe4 <__multadd+0x74>
 8113fb0:	6861      	ldr	r1, [r4, #4]
 8113fb2:	4638      	mov	r0, r7
 8113fb4:	3101      	adds	r1, #1
 8113fb6:	f7ff ff79 	bl	8113eac <_Balloc>
 8113fba:	4680      	mov	r8, r0
 8113fbc:	b928      	cbnz	r0, 8113fca <__multadd+0x5a>
 8113fbe:	4602      	mov	r2, r0
 8113fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8113ff4 <__multadd+0x84>)
 8113fc2:	480d      	ldr	r0, [pc, #52]	@ (8113ff8 <__multadd+0x88>)
 8113fc4:	21ba      	movs	r1, #186	@ 0xba
 8113fc6:	f7fd ff0d 	bl	8111de4 <__assert_func>
 8113fca:	6922      	ldr	r2, [r4, #16]
 8113fcc:	3202      	adds	r2, #2
 8113fce:	f104 010c 	add.w	r1, r4, #12
 8113fd2:	0092      	lsls	r2, r2, #2
 8113fd4:	300c      	adds	r0, #12
 8113fd6:	f7ff f8b4 	bl	8113142 <memcpy>
 8113fda:	4621      	mov	r1, r4
 8113fdc:	4638      	mov	r0, r7
 8113fde:	f7ff ffa5 	bl	8113f2c <_Bfree>
 8113fe2:	4644      	mov	r4, r8
 8113fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8113fe8:	3501      	adds	r5, #1
 8113fea:	615e      	str	r6, [r3, #20]
 8113fec:	6125      	str	r5, [r4, #16]
 8113fee:	4620      	mov	r0, r4
 8113ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113ff4:	08117a3c 	.word	0x08117a3c
 8113ff8:	08117a4d 	.word	0x08117a4d

08113ffc <__s2b>:
 8113ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8114000:	460c      	mov	r4, r1
 8114002:	4615      	mov	r5, r2
 8114004:	461f      	mov	r7, r3
 8114006:	2209      	movs	r2, #9
 8114008:	3308      	adds	r3, #8
 811400a:	4606      	mov	r6, r0
 811400c:	fb93 f3f2 	sdiv	r3, r3, r2
 8114010:	2100      	movs	r1, #0
 8114012:	2201      	movs	r2, #1
 8114014:	429a      	cmp	r2, r3
 8114016:	db09      	blt.n	811402c <__s2b+0x30>
 8114018:	4630      	mov	r0, r6
 811401a:	f7ff ff47 	bl	8113eac <_Balloc>
 811401e:	b940      	cbnz	r0, 8114032 <__s2b+0x36>
 8114020:	4602      	mov	r2, r0
 8114022:	4b19      	ldr	r3, [pc, #100]	@ (8114088 <__s2b+0x8c>)
 8114024:	4819      	ldr	r0, [pc, #100]	@ (811408c <__s2b+0x90>)
 8114026:	21d3      	movs	r1, #211	@ 0xd3
 8114028:	f7fd fedc 	bl	8111de4 <__assert_func>
 811402c:	0052      	lsls	r2, r2, #1
 811402e:	3101      	adds	r1, #1
 8114030:	e7f0      	b.n	8114014 <__s2b+0x18>
 8114032:	9b08      	ldr	r3, [sp, #32]
 8114034:	6143      	str	r3, [r0, #20]
 8114036:	2d09      	cmp	r5, #9
 8114038:	f04f 0301 	mov.w	r3, #1
 811403c:	6103      	str	r3, [r0, #16]
 811403e:	dd16      	ble.n	811406e <__s2b+0x72>
 8114040:	f104 0909 	add.w	r9, r4, #9
 8114044:	46c8      	mov	r8, r9
 8114046:	442c      	add	r4, r5
 8114048:	f818 3b01 	ldrb.w	r3, [r8], #1
 811404c:	4601      	mov	r1, r0
 811404e:	3b30      	subs	r3, #48	@ 0x30
 8114050:	220a      	movs	r2, #10
 8114052:	4630      	mov	r0, r6
 8114054:	f7ff ff8c 	bl	8113f70 <__multadd>
 8114058:	45a0      	cmp	r8, r4
 811405a:	d1f5      	bne.n	8114048 <__s2b+0x4c>
 811405c:	f1a5 0408 	sub.w	r4, r5, #8
 8114060:	444c      	add	r4, r9
 8114062:	1b2d      	subs	r5, r5, r4
 8114064:	1963      	adds	r3, r4, r5
 8114066:	42bb      	cmp	r3, r7
 8114068:	db04      	blt.n	8114074 <__s2b+0x78>
 811406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811406e:	340a      	adds	r4, #10
 8114070:	2509      	movs	r5, #9
 8114072:	e7f6      	b.n	8114062 <__s2b+0x66>
 8114074:	f814 3b01 	ldrb.w	r3, [r4], #1
 8114078:	4601      	mov	r1, r0
 811407a:	3b30      	subs	r3, #48	@ 0x30
 811407c:	220a      	movs	r2, #10
 811407e:	4630      	mov	r0, r6
 8114080:	f7ff ff76 	bl	8113f70 <__multadd>
 8114084:	e7ee      	b.n	8114064 <__s2b+0x68>
 8114086:	bf00      	nop
 8114088:	08117a3c 	.word	0x08117a3c
 811408c:	08117a4d 	.word	0x08117a4d

08114090 <__hi0bits>:
 8114090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8114094:	4603      	mov	r3, r0
 8114096:	bf36      	itet	cc
 8114098:	0403      	lslcc	r3, r0, #16
 811409a:	2000      	movcs	r0, #0
 811409c:	2010      	movcc	r0, #16
 811409e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81140a2:	bf3c      	itt	cc
 81140a4:	021b      	lslcc	r3, r3, #8
 81140a6:	3008      	addcc	r0, #8
 81140a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81140ac:	bf3c      	itt	cc
 81140ae:	011b      	lslcc	r3, r3, #4
 81140b0:	3004      	addcc	r0, #4
 81140b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81140b6:	bf3c      	itt	cc
 81140b8:	009b      	lslcc	r3, r3, #2
 81140ba:	3002      	addcc	r0, #2
 81140bc:	2b00      	cmp	r3, #0
 81140be:	db05      	blt.n	81140cc <__hi0bits+0x3c>
 81140c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 81140c4:	f100 0001 	add.w	r0, r0, #1
 81140c8:	bf08      	it	eq
 81140ca:	2020      	moveq	r0, #32
 81140cc:	4770      	bx	lr

081140ce <__lo0bits>:
 81140ce:	6803      	ldr	r3, [r0, #0]
 81140d0:	4602      	mov	r2, r0
 81140d2:	f013 0007 	ands.w	r0, r3, #7
 81140d6:	d00b      	beq.n	81140f0 <__lo0bits+0x22>
 81140d8:	07d9      	lsls	r1, r3, #31
 81140da:	d421      	bmi.n	8114120 <__lo0bits+0x52>
 81140dc:	0798      	lsls	r0, r3, #30
 81140de:	bf49      	itett	mi
 81140e0:	085b      	lsrmi	r3, r3, #1
 81140e2:	089b      	lsrpl	r3, r3, #2
 81140e4:	2001      	movmi	r0, #1
 81140e6:	6013      	strmi	r3, [r2, #0]
 81140e8:	bf5c      	itt	pl
 81140ea:	6013      	strpl	r3, [r2, #0]
 81140ec:	2002      	movpl	r0, #2
 81140ee:	4770      	bx	lr
 81140f0:	b299      	uxth	r1, r3
 81140f2:	b909      	cbnz	r1, 81140f8 <__lo0bits+0x2a>
 81140f4:	0c1b      	lsrs	r3, r3, #16
 81140f6:	2010      	movs	r0, #16
 81140f8:	b2d9      	uxtb	r1, r3
 81140fa:	b909      	cbnz	r1, 8114100 <__lo0bits+0x32>
 81140fc:	3008      	adds	r0, #8
 81140fe:	0a1b      	lsrs	r3, r3, #8
 8114100:	0719      	lsls	r1, r3, #28
 8114102:	bf04      	itt	eq
 8114104:	091b      	lsreq	r3, r3, #4
 8114106:	3004      	addeq	r0, #4
 8114108:	0799      	lsls	r1, r3, #30
 811410a:	bf04      	itt	eq
 811410c:	089b      	lsreq	r3, r3, #2
 811410e:	3002      	addeq	r0, #2
 8114110:	07d9      	lsls	r1, r3, #31
 8114112:	d403      	bmi.n	811411c <__lo0bits+0x4e>
 8114114:	085b      	lsrs	r3, r3, #1
 8114116:	f100 0001 	add.w	r0, r0, #1
 811411a:	d003      	beq.n	8114124 <__lo0bits+0x56>
 811411c:	6013      	str	r3, [r2, #0]
 811411e:	4770      	bx	lr
 8114120:	2000      	movs	r0, #0
 8114122:	4770      	bx	lr
 8114124:	2020      	movs	r0, #32
 8114126:	4770      	bx	lr

08114128 <__i2b>:
 8114128:	b510      	push	{r4, lr}
 811412a:	460c      	mov	r4, r1
 811412c:	2101      	movs	r1, #1
 811412e:	f7ff febd 	bl	8113eac <_Balloc>
 8114132:	4602      	mov	r2, r0
 8114134:	b928      	cbnz	r0, 8114142 <__i2b+0x1a>
 8114136:	4b05      	ldr	r3, [pc, #20]	@ (811414c <__i2b+0x24>)
 8114138:	4805      	ldr	r0, [pc, #20]	@ (8114150 <__i2b+0x28>)
 811413a:	f240 1145 	movw	r1, #325	@ 0x145
 811413e:	f7fd fe51 	bl	8111de4 <__assert_func>
 8114142:	2301      	movs	r3, #1
 8114144:	6144      	str	r4, [r0, #20]
 8114146:	6103      	str	r3, [r0, #16]
 8114148:	bd10      	pop	{r4, pc}
 811414a:	bf00      	nop
 811414c:	08117a3c 	.word	0x08117a3c
 8114150:	08117a4d 	.word	0x08117a4d

08114154 <__multiply>:
 8114154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114158:	4614      	mov	r4, r2
 811415a:	690a      	ldr	r2, [r1, #16]
 811415c:	6923      	ldr	r3, [r4, #16]
 811415e:	429a      	cmp	r2, r3
 8114160:	bfa8      	it	ge
 8114162:	4623      	movge	r3, r4
 8114164:	460f      	mov	r7, r1
 8114166:	bfa4      	itt	ge
 8114168:	460c      	movge	r4, r1
 811416a:	461f      	movge	r7, r3
 811416c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8114170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8114174:	68a3      	ldr	r3, [r4, #8]
 8114176:	6861      	ldr	r1, [r4, #4]
 8114178:	eb0a 0609 	add.w	r6, sl, r9
 811417c:	42b3      	cmp	r3, r6
 811417e:	b085      	sub	sp, #20
 8114180:	bfb8      	it	lt
 8114182:	3101      	addlt	r1, #1
 8114184:	f7ff fe92 	bl	8113eac <_Balloc>
 8114188:	b930      	cbnz	r0, 8114198 <__multiply+0x44>
 811418a:	4602      	mov	r2, r0
 811418c:	4b44      	ldr	r3, [pc, #272]	@ (81142a0 <__multiply+0x14c>)
 811418e:	4845      	ldr	r0, [pc, #276]	@ (81142a4 <__multiply+0x150>)
 8114190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8114194:	f7fd fe26 	bl	8111de4 <__assert_func>
 8114198:	f100 0514 	add.w	r5, r0, #20
 811419c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 81141a0:	462b      	mov	r3, r5
 81141a2:	2200      	movs	r2, #0
 81141a4:	4543      	cmp	r3, r8
 81141a6:	d321      	bcc.n	81141ec <__multiply+0x98>
 81141a8:	f107 0114 	add.w	r1, r7, #20
 81141ac:	f104 0214 	add.w	r2, r4, #20
 81141b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 81141b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 81141b8:	9302      	str	r3, [sp, #8]
 81141ba:	1b13      	subs	r3, r2, r4
 81141bc:	3b15      	subs	r3, #21
 81141be:	f023 0303 	bic.w	r3, r3, #3
 81141c2:	3304      	adds	r3, #4
 81141c4:	f104 0715 	add.w	r7, r4, #21
 81141c8:	42ba      	cmp	r2, r7
 81141ca:	bf38      	it	cc
 81141cc:	2304      	movcc	r3, #4
 81141ce:	9301      	str	r3, [sp, #4]
 81141d0:	9b02      	ldr	r3, [sp, #8]
 81141d2:	9103      	str	r1, [sp, #12]
 81141d4:	428b      	cmp	r3, r1
 81141d6:	d80c      	bhi.n	81141f2 <__multiply+0x9e>
 81141d8:	2e00      	cmp	r6, #0
 81141da:	dd03      	ble.n	81141e4 <__multiply+0x90>
 81141dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81141e0:	2b00      	cmp	r3, #0
 81141e2:	d05b      	beq.n	811429c <__multiply+0x148>
 81141e4:	6106      	str	r6, [r0, #16]
 81141e6:	b005      	add	sp, #20
 81141e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81141ec:	f843 2b04 	str.w	r2, [r3], #4
 81141f0:	e7d8      	b.n	81141a4 <__multiply+0x50>
 81141f2:	f8b1 a000 	ldrh.w	sl, [r1]
 81141f6:	f1ba 0f00 	cmp.w	sl, #0
 81141fa:	d024      	beq.n	8114246 <__multiply+0xf2>
 81141fc:	f104 0e14 	add.w	lr, r4, #20
 8114200:	46a9      	mov	r9, r5
 8114202:	f04f 0c00 	mov.w	ip, #0
 8114206:	f85e 7b04 	ldr.w	r7, [lr], #4
 811420a:	f8d9 3000 	ldr.w	r3, [r9]
 811420e:	fa1f fb87 	uxth.w	fp, r7
 8114212:	b29b      	uxth	r3, r3
 8114214:	fb0a 330b 	mla	r3, sl, fp, r3
 8114218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 811421c:	f8d9 7000 	ldr.w	r7, [r9]
 8114220:	4463      	add	r3, ip
 8114222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8114226:	fb0a c70b 	mla	r7, sl, fp, ip
 811422a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 811422e:	b29b      	uxth	r3, r3
 8114230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8114234:	4572      	cmp	r2, lr
 8114236:	f849 3b04 	str.w	r3, [r9], #4
 811423a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 811423e:	d8e2      	bhi.n	8114206 <__multiply+0xb2>
 8114240:	9b01      	ldr	r3, [sp, #4]
 8114242:	f845 c003 	str.w	ip, [r5, r3]
 8114246:	9b03      	ldr	r3, [sp, #12]
 8114248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 811424c:	3104      	adds	r1, #4
 811424e:	f1b9 0f00 	cmp.w	r9, #0
 8114252:	d021      	beq.n	8114298 <__multiply+0x144>
 8114254:	682b      	ldr	r3, [r5, #0]
 8114256:	f104 0c14 	add.w	ip, r4, #20
 811425a:	46ae      	mov	lr, r5
 811425c:	f04f 0a00 	mov.w	sl, #0
 8114260:	f8bc b000 	ldrh.w	fp, [ip]
 8114264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8114268:	fb09 770b 	mla	r7, r9, fp, r7
 811426c:	4457      	add	r7, sl
 811426e:	b29b      	uxth	r3, r3
 8114270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8114274:	f84e 3b04 	str.w	r3, [lr], #4
 8114278:	f85c 3b04 	ldr.w	r3, [ip], #4
 811427c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8114280:	f8be 3000 	ldrh.w	r3, [lr]
 8114284:	fb09 330a 	mla	r3, r9, sl, r3
 8114288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 811428c:	4562      	cmp	r2, ip
 811428e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8114292:	d8e5      	bhi.n	8114260 <__multiply+0x10c>
 8114294:	9f01      	ldr	r7, [sp, #4]
 8114296:	51eb      	str	r3, [r5, r7]
 8114298:	3504      	adds	r5, #4
 811429a:	e799      	b.n	81141d0 <__multiply+0x7c>
 811429c:	3e01      	subs	r6, #1
 811429e:	e79b      	b.n	81141d8 <__multiply+0x84>
 81142a0:	08117a3c 	.word	0x08117a3c
 81142a4:	08117a4d 	.word	0x08117a4d

081142a8 <__pow5mult>:
 81142a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81142ac:	4615      	mov	r5, r2
 81142ae:	f012 0203 	ands.w	r2, r2, #3
 81142b2:	4607      	mov	r7, r0
 81142b4:	460e      	mov	r6, r1
 81142b6:	d007      	beq.n	81142c8 <__pow5mult+0x20>
 81142b8:	4c25      	ldr	r4, [pc, #148]	@ (8114350 <__pow5mult+0xa8>)
 81142ba:	3a01      	subs	r2, #1
 81142bc:	2300      	movs	r3, #0
 81142be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81142c2:	f7ff fe55 	bl	8113f70 <__multadd>
 81142c6:	4606      	mov	r6, r0
 81142c8:	10ad      	asrs	r5, r5, #2
 81142ca:	d03d      	beq.n	8114348 <__pow5mult+0xa0>
 81142cc:	69fc      	ldr	r4, [r7, #28]
 81142ce:	b97c      	cbnz	r4, 81142f0 <__pow5mult+0x48>
 81142d0:	2010      	movs	r0, #16
 81142d2:	f7fd fda5 	bl	8111e20 <malloc>
 81142d6:	4602      	mov	r2, r0
 81142d8:	61f8      	str	r0, [r7, #28]
 81142da:	b928      	cbnz	r0, 81142e8 <__pow5mult+0x40>
 81142dc:	4b1d      	ldr	r3, [pc, #116]	@ (8114354 <__pow5mult+0xac>)
 81142de:	481e      	ldr	r0, [pc, #120]	@ (8114358 <__pow5mult+0xb0>)
 81142e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 81142e4:	f7fd fd7e 	bl	8111de4 <__assert_func>
 81142e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81142ec:	6004      	str	r4, [r0, #0]
 81142ee:	60c4      	str	r4, [r0, #12]
 81142f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 81142f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81142f8:	b94c      	cbnz	r4, 811430e <__pow5mult+0x66>
 81142fa:	f240 2171 	movw	r1, #625	@ 0x271
 81142fe:	4638      	mov	r0, r7
 8114300:	f7ff ff12 	bl	8114128 <__i2b>
 8114304:	2300      	movs	r3, #0
 8114306:	f8c8 0008 	str.w	r0, [r8, #8]
 811430a:	4604      	mov	r4, r0
 811430c:	6003      	str	r3, [r0, #0]
 811430e:	f04f 0900 	mov.w	r9, #0
 8114312:	07eb      	lsls	r3, r5, #31
 8114314:	d50a      	bpl.n	811432c <__pow5mult+0x84>
 8114316:	4631      	mov	r1, r6
 8114318:	4622      	mov	r2, r4
 811431a:	4638      	mov	r0, r7
 811431c:	f7ff ff1a 	bl	8114154 <__multiply>
 8114320:	4631      	mov	r1, r6
 8114322:	4680      	mov	r8, r0
 8114324:	4638      	mov	r0, r7
 8114326:	f7ff fe01 	bl	8113f2c <_Bfree>
 811432a:	4646      	mov	r6, r8
 811432c:	106d      	asrs	r5, r5, #1
 811432e:	d00b      	beq.n	8114348 <__pow5mult+0xa0>
 8114330:	6820      	ldr	r0, [r4, #0]
 8114332:	b938      	cbnz	r0, 8114344 <__pow5mult+0x9c>
 8114334:	4622      	mov	r2, r4
 8114336:	4621      	mov	r1, r4
 8114338:	4638      	mov	r0, r7
 811433a:	f7ff ff0b 	bl	8114154 <__multiply>
 811433e:	6020      	str	r0, [r4, #0]
 8114340:	f8c0 9000 	str.w	r9, [r0]
 8114344:	4604      	mov	r4, r0
 8114346:	e7e4      	b.n	8114312 <__pow5mult+0x6a>
 8114348:	4630      	mov	r0, r6
 811434a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811434e:	bf00      	nop
 8114350:	08117aa8 	.word	0x08117aa8
 8114354:	081179cd 	.word	0x081179cd
 8114358:	08117a4d 	.word	0x08117a4d

0811435c <__lshift>:
 811435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114360:	460c      	mov	r4, r1
 8114362:	6849      	ldr	r1, [r1, #4]
 8114364:	6923      	ldr	r3, [r4, #16]
 8114366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811436a:	68a3      	ldr	r3, [r4, #8]
 811436c:	4607      	mov	r7, r0
 811436e:	4691      	mov	r9, r2
 8114370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8114374:	f108 0601 	add.w	r6, r8, #1
 8114378:	42b3      	cmp	r3, r6
 811437a:	db0b      	blt.n	8114394 <__lshift+0x38>
 811437c:	4638      	mov	r0, r7
 811437e:	f7ff fd95 	bl	8113eac <_Balloc>
 8114382:	4605      	mov	r5, r0
 8114384:	b948      	cbnz	r0, 811439a <__lshift+0x3e>
 8114386:	4602      	mov	r2, r0
 8114388:	4b28      	ldr	r3, [pc, #160]	@ (811442c <__lshift+0xd0>)
 811438a:	4829      	ldr	r0, [pc, #164]	@ (8114430 <__lshift+0xd4>)
 811438c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8114390:	f7fd fd28 	bl	8111de4 <__assert_func>
 8114394:	3101      	adds	r1, #1
 8114396:	005b      	lsls	r3, r3, #1
 8114398:	e7ee      	b.n	8114378 <__lshift+0x1c>
 811439a:	2300      	movs	r3, #0
 811439c:	f100 0114 	add.w	r1, r0, #20
 81143a0:	f100 0210 	add.w	r2, r0, #16
 81143a4:	4618      	mov	r0, r3
 81143a6:	4553      	cmp	r3, sl
 81143a8:	db33      	blt.n	8114412 <__lshift+0xb6>
 81143aa:	6920      	ldr	r0, [r4, #16]
 81143ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81143b0:	f104 0314 	add.w	r3, r4, #20
 81143b4:	f019 091f 	ands.w	r9, r9, #31
 81143b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81143bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81143c0:	d02b      	beq.n	811441a <__lshift+0xbe>
 81143c2:	f1c9 0e20 	rsb	lr, r9, #32
 81143c6:	468a      	mov	sl, r1
 81143c8:	2200      	movs	r2, #0
 81143ca:	6818      	ldr	r0, [r3, #0]
 81143cc:	fa00 f009 	lsl.w	r0, r0, r9
 81143d0:	4310      	orrs	r0, r2
 81143d2:	f84a 0b04 	str.w	r0, [sl], #4
 81143d6:	f853 2b04 	ldr.w	r2, [r3], #4
 81143da:	459c      	cmp	ip, r3
 81143dc:	fa22 f20e 	lsr.w	r2, r2, lr
 81143e0:	d8f3      	bhi.n	81143ca <__lshift+0x6e>
 81143e2:	ebac 0304 	sub.w	r3, ip, r4
 81143e6:	3b15      	subs	r3, #21
 81143e8:	f023 0303 	bic.w	r3, r3, #3
 81143ec:	3304      	adds	r3, #4
 81143ee:	f104 0015 	add.w	r0, r4, #21
 81143f2:	4584      	cmp	ip, r0
 81143f4:	bf38      	it	cc
 81143f6:	2304      	movcc	r3, #4
 81143f8:	50ca      	str	r2, [r1, r3]
 81143fa:	b10a      	cbz	r2, 8114400 <__lshift+0xa4>
 81143fc:	f108 0602 	add.w	r6, r8, #2
 8114400:	3e01      	subs	r6, #1
 8114402:	4638      	mov	r0, r7
 8114404:	612e      	str	r6, [r5, #16]
 8114406:	4621      	mov	r1, r4
 8114408:	f7ff fd90 	bl	8113f2c <_Bfree>
 811440c:	4628      	mov	r0, r5
 811440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114412:	f842 0f04 	str.w	r0, [r2, #4]!
 8114416:	3301      	adds	r3, #1
 8114418:	e7c5      	b.n	81143a6 <__lshift+0x4a>
 811441a:	3904      	subs	r1, #4
 811441c:	f853 2b04 	ldr.w	r2, [r3], #4
 8114420:	f841 2f04 	str.w	r2, [r1, #4]!
 8114424:	459c      	cmp	ip, r3
 8114426:	d8f9      	bhi.n	811441c <__lshift+0xc0>
 8114428:	e7ea      	b.n	8114400 <__lshift+0xa4>
 811442a:	bf00      	nop
 811442c:	08117a3c 	.word	0x08117a3c
 8114430:	08117a4d 	.word	0x08117a4d

08114434 <__mcmp>:
 8114434:	690a      	ldr	r2, [r1, #16]
 8114436:	4603      	mov	r3, r0
 8114438:	6900      	ldr	r0, [r0, #16]
 811443a:	1a80      	subs	r0, r0, r2
 811443c:	b530      	push	{r4, r5, lr}
 811443e:	d10e      	bne.n	811445e <__mcmp+0x2a>
 8114440:	3314      	adds	r3, #20
 8114442:	3114      	adds	r1, #20
 8114444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8114448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 811444c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8114450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8114454:	4295      	cmp	r5, r2
 8114456:	d003      	beq.n	8114460 <__mcmp+0x2c>
 8114458:	d205      	bcs.n	8114466 <__mcmp+0x32>
 811445a:	f04f 30ff 	mov.w	r0, #4294967295
 811445e:	bd30      	pop	{r4, r5, pc}
 8114460:	42a3      	cmp	r3, r4
 8114462:	d3f3      	bcc.n	811444c <__mcmp+0x18>
 8114464:	e7fb      	b.n	811445e <__mcmp+0x2a>
 8114466:	2001      	movs	r0, #1
 8114468:	e7f9      	b.n	811445e <__mcmp+0x2a>
	...

0811446c <__mdiff>:
 811446c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114470:	4689      	mov	r9, r1
 8114472:	4606      	mov	r6, r0
 8114474:	4611      	mov	r1, r2
 8114476:	4648      	mov	r0, r9
 8114478:	4614      	mov	r4, r2
 811447a:	f7ff ffdb 	bl	8114434 <__mcmp>
 811447e:	1e05      	subs	r5, r0, #0
 8114480:	d112      	bne.n	81144a8 <__mdiff+0x3c>
 8114482:	4629      	mov	r1, r5
 8114484:	4630      	mov	r0, r6
 8114486:	f7ff fd11 	bl	8113eac <_Balloc>
 811448a:	4602      	mov	r2, r0
 811448c:	b928      	cbnz	r0, 811449a <__mdiff+0x2e>
 811448e:	4b3f      	ldr	r3, [pc, #252]	@ (811458c <__mdiff+0x120>)
 8114490:	f240 2137 	movw	r1, #567	@ 0x237
 8114494:	483e      	ldr	r0, [pc, #248]	@ (8114590 <__mdiff+0x124>)
 8114496:	f7fd fca5 	bl	8111de4 <__assert_func>
 811449a:	2301      	movs	r3, #1
 811449c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81144a0:	4610      	mov	r0, r2
 81144a2:	b003      	add	sp, #12
 81144a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81144a8:	bfbc      	itt	lt
 81144aa:	464b      	movlt	r3, r9
 81144ac:	46a1      	movlt	r9, r4
 81144ae:	4630      	mov	r0, r6
 81144b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 81144b4:	bfba      	itte	lt
 81144b6:	461c      	movlt	r4, r3
 81144b8:	2501      	movlt	r5, #1
 81144ba:	2500      	movge	r5, #0
 81144bc:	f7ff fcf6 	bl	8113eac <_Balloc>
 81144c0:	4602      	mov	r2, r0
 81144c2:	b918      	cbnz	r0, 81144cc <__mdiff+0x60>
 81144c4:	4b31      	ldr	r3, [pc, #196]	@ (811458c <__mdiff+0x120>)
 81144c6:	f240 2145 	movw	r1, #581	@ 0x245
 81144ca:	e7e3      	b.n	8114494 <__mdiff+0x28>
 81144cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 81144d0:	6926      	ldr	r6, [r4, #16]
 81144d2:	60c5      	str	r5, [r0, #12]
 81144d4:	f109 0310 	add.w	r3, r9, #16
 81144d8:	f109 0514 	add.w	r5, r9, #20
 81144dc:	f104 0e14 	add.w	lr, r4, #20
 81144e0:	f100 0b14 	add.w	fp, r0, #20
 81144e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 81144e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 81144ec:	9301      	str	r3, [sp, #4]
 81144ee:	46d9      	mov	r9, fp
 81144f0:	f04f 0c00 	mov.w	ip, #0
 81144f4:	9b01      	ldr	r3, [sp, #4]
 81144f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 81144fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 81144fe:	9301      	str	r3, [sp, #4]
 8114500:	fa1f f38a 	uxth.w	r3, sl
 8114504:	4619      	mov	r1, r3
 8114506:	b283      	uxth	r3, r0
 8114508:	1acb      	subs	r3, r1, r3
 811450a:	0c00      	lsrs	r0, r0, #16
 811450c:	4463      	add	r3, ip
 811450e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8114512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8114516:	b29b      	uxth	r3, r3
 8114518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 811451c:	4576      	cmp	r6, lr
 811451e:	f849 3b04 	str.w	r3, [r9], #4
 8114522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8114526:	d8e5      	bhi.n	81144f4 <__mdiff+0x88>
 8114528:	1b33      	subs	r3, r6, r4
 811452a:	3b15      	subs	r3, #21
 811452c:	f023 0303 	bic.w	r3, r3, #3
 8114530:	3415      	adds	r4, #21
 8114532:	3304      	adds	r3, #4
 8114534:	42a6      	cmp	r6, r4
 8114536:	bf38      	it	cc
 8114538:	2304      	movcc	r3, #4
 811453a:	441d      	add	r5, r3
 811453c:	445b      	add	r3, fp
 811453e:	461e      	mov	r6, r3
 8114540:	462c      	mov	r4, r5
 8114542:	4544      	cmp	r4, r8
 8114544:	d30e      	bcc.n	8114564 <__mdiff+0xf8>
 8114546:	f108 0103 	add.w	r1, r8, #3
 811454a:	1b49      	subs	r1, r1, r5
 811454c:	f021 0103 	bic.w	r1, r1, #3
 8114550:	3d03      	subs	r5, #3
 8114552:	45a8      	cmp	r8, r5
 8114554:	bf38      	it	cc
 8114556:	2100      	movcc	r1, #0
 8114558:	440b      	add	r3, r1
 811455a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 811455e:	b191      	cbz	r1, 8114586 <__mdiff+0x11a>
 8114560:	6117      	str	r7, [r2, #16]
 8114562:	e79d      	b.n	81144a0 <__mdiff+0x34>
 8114564:	f854 1b04 	ldr.w	r1, [r4], #4
 8114568:	46e6      	mov	lr, ip
 811456a:	0c08      	lsrs	r0, r1, #16
 811456c:	fa1c fc81 	uxtah	ip, ip, r1
 8114570:	4471      	add	r1, lr
 8114572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8114576:	b289      	uxth	r1, r1
 8114578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 811457c:	f846 1b04 	str.w	r1, [r6], #4
 8114580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8114584:	e7dd      	b.n	8114542 <__mdiff+0xd6>
 8114586:	3f01      	subs	r7, #1
 8114588:	e7e7      	b.n	811455a <__mdiff+0xee>
 811458a:	bf00      	nop
 811458c:	08117a3c 	.word	0x08117a3c
 8114590:	08117a4d 	.word	0x08117a4d

08114594 <__ulp>:
 8114594:	b082      	sub	sp, #8
 8114596:	ed8d 0b00 	vstr	d0, [sp]
 811459a:	9a01      	ldr	r2, [sp, #4]
 811459c:	4b0f      	ldr	r3, [pc, #60]	@ (81145dc <__ulp+0x48>)
 811459e:	4013      	ands	r3, r2
 81145a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 81145a4:	2b00      	cmp	r3, #0
 81145a6:	dc08      	bgt.n	81145ba <__ulp+0x26>
 81145a8:	425b      	negs	r3, r3
 81145aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 81145ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 81145b2:	da04      	bge.n	81145be <__ulp+0x2a>
 81145b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 81145b8:	4113      	asrs	r3, r2
 81145ba:	2200      	movs	r2, #0
 81145bc:	e008      	b.n	81145d0 <__ulp+0x3c>
 81145be:	f1a2 0314 	sub.w	r3, r2, #20
 81145c2:	2b1e      	cmp	r3, #30
 81145c4:	bfda      	itte	le
 81145c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 81145ca:	40da      	lsrle	r2, r3
 81145cc:	2201      	movgt	r2, #1
 81145ce:	2300      	movs	r3, #0
 81145d0:	4619      	mov	r1, r3
 81145d2:	4610      	mov	r0, r2
 81145d4:	ec41 0b10 	vmov	d0, r0, r1
 81145d8:	b002      	add	sp, #8
 81145da:	4770      	bx	lr
 81145dc:	7ff00000 	.word	0x7ff00000

081145e0 <__b2d>:
 81145e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81145e4:	6906      	ldr	r6, [r0, #16]
 81145e6:	f100 0814 	add.w	r8, r0, #20
 81145ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 81145ee:	1f37      	subs	r7, r6, #4
 81145f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 81145f4:	4610      	mov	r0, r2
 81145f6:	f7ff fd4b 	bl	8114090 <__hi0bits>
 81145fa:	f1c0 0320 	rsb	r3, r0, #32
 81145fe:	280a      	cmp	r0, #10
 8114600:	600b      	str	r3, [r1, #0]
 8114602:	491b      	ldr	r1, [pc, #108]	@ (8114670 <__b2d+0x90>)
 8114604:	dc15      	bgt.n	8114632 <__b2d+0x52>
 8114606:	f1c0 0c0b 	rsb	ip, r0, #11
 811460a:	fa22 f30c 	lsr.w	r3, r2, ip
 811460e:	45b8      	cmp	r8, r7
 8114610:	ea43 0501 	orr.w	r5, r3, r1
 8114614:	bf34      	ite	cc
 8114616:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811461a:	2300      	movcs	r3, #0
 811461c:	3015      	adds	r0, #21
 811461e:	fa02 f000 	lsl.w	r0, r2, r0
 8114622:	fa23 f30c 	lsr.w	r3, r3, ip
 8114626:	4303      	orrs	r3, r0
 8114628:	461c      	mov	r4, r3
 811462a:	ec45 4b10 	vmov	d0, r4, r5
 811462e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8114632:	45b8      	cmp	r8, r7
 8114634:	bf3a      	itte	cc
 8114636:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811463a:	f1a6 0708 	subcc.w	r7, r6, #8
 811463e:	2300      	movcs	r3, #0
 8114640:	380b      	subs	r0, #11
 8114642:	d012      	beq.n	811466a <__b2d+0x8a>
 8114644:	f1c0 0120 	rsb	r1, r0, #32
 8114648:	fa23 f401 	lsr.w	r4, r3, r1
 811464c:	4082      	lsls	r2, r0
 811464e:	4322      	orrs	r2, r4
 8114650:	4547      	cmp	r7, r8
 8114652:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8114656:	bf8c      	ite	hi
 8114658:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 811465c:	2200      	movls	r2, #0
 811465e:	4083      	lsls	r3, r0
 8114660:	40ca      	lsrs	r2, r1
 8114662:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8114666:	4313      	orrs	r3, r2
 8114668:	e7de      	b.n	8114628 <__b2d+0x48>
 811466a:	ea42 0501 	orr.w	r5, r2, r1
 811466e:	e7db      	b.n	8114628 <__b2d+0x48>
 8114670:	3ff00000 	.word	0x3ff00000

08114674 <__d2b>:
 8114674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8114678:	460f      	mov	r7, r1
 811467a:	2101      	movs	r1, #1
 811467c:	ec59 8b10 	vmov	r8, r9, d0
 8114680:	4616      	mov	r6, r2
 8114682:	f7ff fc13 	bl	8113eac <_Balloc>
 8114686:	4604      	mov	r4, r0
 8114688:	b930      	cbnz	r0, 8114698 <__d2b+0x24>
 811468a:	4602      	mov	r2, r0
 811468c:	4b23      	ldr	r3, [pc, #140]	@ (811471c <__d2b+0xa8>)
 811468e:	4824      	ldr	r0, [pc, #144]	@ (8114720 <__d2b+0xac>)
 8114690:	f240 310f 	movw	r1, #783	@ 0x30f
 8114694:	f7fd fba6 	bl	8111de4 <__assert_func>
 8114698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 811469c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81146a0:	b10d      	cbz	r5, 81146a6 <__d2b+0x32>
 81146a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81146a6:	9301      	str	r3, [sp, #4]
 81146a8:	f1b8 0300 	subs.w	r3, r8, #0
 81146ac:	d023      	beq.n	81146f6 <__d2b+0x82>
 81146ae:	4668      	mov	r0, sp
 81146b0:	9300      	str	r3, [sp, #0]
 81146b2:	f7ff fd0c 	bl	81140ce <__lo0bits>
 81146b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 81146ba:	b1d0      	cbz	r0, 81146f2 <__d2b+0x7e>
 81146bc:	f1c0 0320 	rsb	r3, r0, #32
 81146c0:	fa02 f303 	lsl.w	r3, r2, r3
 81146c4:	430b      	orrs	r3, r1
 81146c6:	40c2      	lsrs	r2, r0
 81146c8:	6163      	str	r3, [r4, #20]
 81146ca:	9201      	str	r2, [sp, #4]
 81146cc:	9b01      	ldr	r3, [sp, #4]
 81146ce:	61a3      	str	r3, [r4, #24]
 81146d0:	2b00      	cmp	r3, #0
 81146d2:	bf0c      	ite	eq
 81146d4:	2201      	moveq	r2, #1
 81146d6:	2202      	movne	r2, #2
 81146d8:	6122      	str	r2, [r4, #16]
 81146da:	b1a5      	cbz	r5, 8114706 <__d2b+0x92>
 81146dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 81146e0:	4405      	add	r5, r0
 81146e2:	603d      	str	r5, [r7, #0]
 81146e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 81146e8:	6030      	str	r0, [r6, #0]
 81146ea:	4620      	mov	r0, r4
 81146ec:	b003      	add	sp, #12
 81146ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81146f2:	6161      	str	r1, [r4, #20]
 81146f4:	e7ea      	b.n	81146cc <__d2b+0x58>
 81146f6:	a801      	add	r0, sp, #4
 81146f8:	f7ff fce9 	bl	81140ce <__lo0bits>
 81146fc:	9b01      	ldr	r3, [sp, #4]
 81146fe:	6163      	str	r3, [r4, #20]
 8114700:	3020      	adds	r0, #32
 8114702:	2201      	movs	r2, #1
 8114704:	e7e8      	b.n	81146d8 <__d2b+0x64>
 8114706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811470a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 811470e:	6038      	str	r0, [r7, #0]
 8114710:	6918      	ldr	r0, [r3, #16]
 8114712:	f7ff fcbd 	bl	8114090 <__hi0bits>
 8114716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811471a:	e7e5      	b.n	81146e8 <__d2b+0x74>
 811471c:	08117a3c 	.word	0x08117a3c
 8114720:	08117a4d 	.word	0x08117a4d

08114724 <__ratio>:
 8114724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114728:	b085      	sub	sp, #20
 811472a:	e9cd 1000 	strd	r1, r0, [sp]
 811472e:	a902      	add	r1, sp, #8
 8114730:	f7ff ff56 	bl	81145e0 <__b2d>
 8114734:	9800      	ldr	r0, [sp, #0]
 8114736:	a903      	add	r1, sp, #12
 8114738:	ec55 4b10 	vmov	r4, r5, d0
 811473c:	f7ff ff50 	bl	81145e0 <__b2d>
 8114740:	9b01      	ldr	r3, [sp, #4]
 8114742:	6919      	ldr	r1, [r3, #16]
 8114744:	9b00      	ldr	r3, [sp, #0]
 8114746:	691b      	ldr	r3, [r3, #16]
 8114748:	1ac9      	subs	r1, r1, r3
 811474a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 811474e:	1a9b      	subs	r3, r3, r2
 8114750:	ec5b ab10 	vmov	sl, fp, d0
 8114754:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8114758:	2b00      	cmp	r3, #0
 811475a:	bfce      	itee	gt
 811475c:	462a      	movgt	r2, r5
 811475e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8114762:	465a      	movle	r2, fp
 8114764:	462f      	mov	r7, r5
 8114766:	46d9      	mov	r9, fp
 8114768:	bfcc      	ite	gt
 811476a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 811476e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8114772:	464b      	mov	r3, r9
 8114774:	4652      	mov	r2, sl
 8114776:	4620      	mov	r0, r4
 8114778:	4639      	mov	r1, r7
 811477a:	f7ec f8ff 	bl	810097c <__aeabi_ddiv>
 811477e:	ec41 0b10 	vmov	d0, r0, r1
 8114782:	b005      	add	sp, #20
 8114784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08114788 <__copybits>:
 8114788:	3901      	subs	r1, #1
 811478a:	b570      	push	{r4, r5, r6, lr}
 811478c:	1149      	asrs	r1, r1, #5
 811478e:	6914      	ldr	r4, [r2, #16]
 8114790:	3101      	adds	r1, #1
 8114792:	f102 0314 	add.w	r3, r2, #20
 8114796:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 811479a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 811479e:	1f05      	subs	r5, r0, #4
 81147a0:	42a3      	cmp	r3, r4
 81147a2:	d30c      	bcc.n	81147be <__copybits+0x36>
 81147a4:	1aa3      	subs	r3, r4, r2
 81147a6:	3b11      	subs	r3, #17
 81147a8:	f023 0303 	bic.w	r3, r3, #3
 81147ac:	3211      	adds	r2, #17
 81147ae:	42a2      	cmp	r2, r4
 81147b0:	bf88      	it	hi
 81147b2:	2300      	movhi	r3, #0
 81147b4:	4418      	add	r0, r3
 81147b6:	2300      	movs	r3, #0
 81147b8:	4288      	cmp	r0, r1
 81147ba:	d305      	bcc.n	81147c8 <__copybits+0x40>
 81147bc:	bd70      	pop	{r4, r5, r6, pc}
 81147be:	f853 6b04 	ldr.w	r6, [r3], #4
 81147c2:	f845 6f04 	str.w	r6, [r5, #4]!
 81147c6:	e7eb      	b.n	81147a0 <__copybits+0x18>
 81147c8:	f840 3b04 	str.w	r3, [r0], #4
 81147cc:	e7f4      	b.n	81147b8 <__copybits+0x30>

081147ce <__any_on>:
 81147ce:	f100 0214 	add.w	r2, r0, #20
 81147d2:	6900      	ldr	r0, [r0, #16]
 81147d4:	114b      	asrs	r3, r1, #5
 81147d6:	4298      	cmp	r0, r3
 81147d8:	b510      	push	{r4, lr}
 81147da:	db11      	blt.n	8114800 <__any_on+0x32>
 81147dc:	dd0a      	ble.n	81147f4 <__any_on+0x26>
 81147de:	f011 011f 	ands.w	r1, r1, #31
 81147e2:	d007      	beq.n	81147f4 <__any_on+0x26>
 81147e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 81147e8:	fa24 f001 	lsr.w	r0, r4, r1
 81147ec:	fa00 f101 	lsl.w	r1, r0, r1
 81147f0:	428c      	cmp	r4, r1
 81147f2:	d10b      	bne.n	811480c <__any_on+0x3e>
 81147f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 81147f8:	4293      	cmp	r3, r2
 81147fa:	d803      	bhi.n	8114804 <__any_on+0x36>
 81147fc:	2000      	movs	r0, #0
 81147fe:	bd10      	pop	{r4, pc}
 8114800:	4603      	mov	r3, r0
 8114802:	e7f7      	b.n	81147f4 <__any_on+0x26>
 8114804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8114808:	2900      	cmp	r1, #0
 811480a:	d0f5      	beq.n	81147f8 <__any_on+0x2a>
 811480c:	2001      	movs	r0, #1
 811480e:	e7f6      	b.n	81147fe <__any_on+0x30>

08114810 <sulp>:
 8114810:	b570      	push	{r4, r5, r6, lr}
 8114812:	4604      	mov	r4, r0
 8114814:	460d      	mov	r5, r1
 8114816:	ec45 4b10 	vmov	d0, r4, r5
 811481a:	4616      	mov	r6, r2
 811481c:	f7ff feba 	bl	8114594 <__ulp>
 8114820:	ec51 0b10 	vmov	r0, r1, d0
 8114824:	b17e      	cbz	r6, 8114846 <sulp+0x36>
 8114826:	f3c5 530a 	ubfx	r3, r5, #20, #11
 811482a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 811482e:	2b00      	cmp	r3, #0
 8114830:	dd09      	ble.n	8114846 <sulp+0x36>
 8114832:	051b      	lsls	r3, r3, #20
 8114834:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8114838:	2400      	movs	r4, #0
 811483a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 811483e:	4622      	mov	r2, r4
 8114840:	462b      	mov	r3, r5
 8114842:	f7eb ff71 	bl	8100728 <__aeabi_dmul>
 8114846:	ec41 0b10 	vmov	d0, r0, r1
 811484a:	bd70      	pop	{r4, r5, r6, pc}
 811484c:	0000      	movs	r0, r0
	...

08114850 <_strtod_l>:
 8114850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114854:	b09f      	sub	sp, #124	@ 0x7c
 8114856:	460c      	mov	r4, r1
 8114858:	9217      	str	r2, [sp, #92]	@ 0x5c
 811485a:	2200      	movs	r2, #0
 811485c:	921a      	str	r2, [sp, #104]	@ 0x68
 811485e:	9005      	str	r0, [sp, #20]
 8114860:	f04f 0a00 	mov.w	sl, #0
 8114864:	f04f 0b00 	mov.w	fp, #0
 8114868:	460a      	mov	r2, r1
 811486a:	9219      	str	r2, [sp, #100]	@ 0x64
 811486c:	7811      	ldrb	r1, [r2, #0]
 811486e:	292b      	cmp	r1, #43	@ 0x2b
 8114870:	d04a      	beq.n	8114908 <_strtod_l+0xb8>
 8114872:	d838      	bhi.n	81148e6 <_strtod_l+0x96>
 8114874:	290d      	cmp	r1, #13
 8114876:	d832      	bhi.n	81148de <_strtod_l+0x8e>
 8114878:	2908      	cmp	r1, #8
 811487a:	d832      	bhi.n	81148e2 <_strtod_l+0x92>
 811487c:	2900      	cmp	r1, #0
 811487e:	d03b      	beq.n	81148f8 <_strtod_l+0xa8>
 8114880:	2200      	movs	r2, #0
 8114882:	920b      	str	r2, [sp, #44]	@ 0x2c
 8114884:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8114886:	782a      	ldrb	r2, [r5, #0]
 8114888:	2a30      	cmp	r2, #48	@ 0x30
 811488a:	f040 80b3 	bne.w	81149f4 <_strtod_l+0x1a4>
 811488e:	786a      	ldrb	r2, [r5, #1]
 8114890:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8114894:	2a58      	cmp	r2, #88	@ 0x58
 8114896:	d16e      	bne.n	8114976 <_strtod_l+0x126>
 8114898:	9302      	str	r3, [sp, #8]
 811489a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 811489c:	9301      	str	r3, [sp, #4]
 811489e:	ab1a      	add	r3, sp, #104	@ 0x68
 81148a0:	9300      	str	r3, [sp, #0]
 81148a2:	4a8e      	ldr	r2, [pc, #568]	@ (8114adc <_strtod_l+0x28c>)
 81148a4:	9805      	ldr	r0, [sp, #20]
 81148a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 81148a8:	a919      	add	r1, sp, #100	@ 0x64
 81148aa:	f001 fa79 	bl	8115da0 <__gethex>
 81148ae:	f010 060f 	ands.w	r6, r0, #15
 81148b2:	4604      	mov	r4, r0
 81148b4:	d005      	beq.n	81148c2 <_strtod_l+0x72>
 81148b6:	2e06      	cmp	r6, #6
 81148b8:	d128      	bne.n	811490c <_strtod_l+0xbc>
 81148ba:	3501      	adds	r5, #1
 81148bc:	2300      	movs	r3, #0
 81148be:	9519      	str	r5, [sp, #100]	@ 0x64
 81148c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 81148c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81148c4:	2b00      	cmp	r3, #0
 81148c6:	f040 858e 	bne.w	81153e6 <_strtod_l+0xb96>
 81148ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81148cc:	b1cb      	cbz	r3, 8114902 <_strtod_l+0xb2>
 81148ce:	4652      	mov	r2, sl
 81148d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 81148d4:	ec43 2b10 	vmov	d0, r2, r3
 81148d8:	b01f      	add	sp, #124	@ 0x7c
 81148da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81148de:	2920      	cmp	r1, #32
 81148e0:	d1ce      	bne.n	8114880 <_strtod_l+0x30>
 81148e2:	3201      	adds	r2, #1
 81148e4:	e7c1      	b.n	811486a <_strtod_l+0x1a>
 81148e6:	292d      	cmp	r1, #45	@ 0x2d
 81148e8:	d1ca      	bne.n	8114880 <_strtod_l+0x30>
 81148ea:	2101      	movs	r1, #1
 81148ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 81148ee:	1c51      	adds	r1, r2, #1
 81148f0:	9119      	str	r1, [sp, #100]	@ 0x64
 81148f2:	7852      	ldrb	r2, [r2, #1]
 81148f4:	2a00      	cmp	r2, #0
 81148f6:	d1c5      	bne.n	8114884 <_strtod_l+0x34>
 81148f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81148fa:	9419      	str	r4, [sp, #100]	@ 0x64
 81148fc:	2b00      	cmp	r3, #0
 81148fe:	f040 8570 	bne.w	81153e2 <_strtod_l+0xb92>
 8114902:	4652      	mov	r2, sl
 8114904:	465b      	mov	r3, fp
 8114906:	e7e5      	b.n	81148d4 <_strtod_l+0x84>
 8114908:	2100      	movs	r1, #0
 811490a:	e7ef      	b.n	81148ec <_strtod_l+0x9c>
 811490c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811490e:	b13a      	cbz	r2, 8114920 <_strtod_l+0xd0>
 8114910:	2135      	movs	r1, #53	@ 0x35
 8114912:	a81c      	add	r0, sp, #112	@ 0x70
 8114914:	f7ff ff38 	bl	8114788 <__copybits>
 8114918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811491a:	9805      	ldr	r0, [sp, #20]
 811491c:	f7ff fb06 	bl	8113f2c <_Bfree>
 8114920:	3e01      	subs	r6, #1
 8114922:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8114924:	2e04      	cmp	r6, #4
 8114926:	d806      	bhi.n	8114936 <_strtod_l+0xe6>
 8114928:	e8df f006 	tbb	[pc, r6]
 811492c:	201d0314 	.word	0x201d0314
 8114930:	14          	.byte	0x14
 8114931:	00          	.byte	0x00
 8114932:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8114936:	05e1      	lsls	r1, r4, #23
 8114938:	bf48      	it	mi
 811493a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 811493e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114942:	0d1b      	lsrs	r3, r3, #20
 8114944:	051b      	lsls	r3, r3, #20
 8114946:	2b00      	cmp	r3, #0
 8114948:	d1bb      	bne.n	81148c2 <_strtod_l+0x72>
 811494a:	f7fe fbcd 	bl	81130e8 <__errno>
 811494e:	2322      	movs	r3, #34	@ 0x22
 8114950:	6003      	str	r3, [r0, #0]
 8114952:	e7b6      	b.n	81148c2 <_strtod_l+0x72>
 8114954:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8114958:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 811495c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8114960:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8114964:	e7e7      	b.n	8114936 <_strtod_l+0xe6>
 8114966:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8114ae4 <_strtod_l+0x294>
 811496a:	e7e4      	b.n	8114936 <_strtod_l+0xe6>
 811496c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8114970:	f04f 3aff 	mov.w	sl, #4294967295
 8114974:	e7df      	b.n	8114936 <_strtod_l+0xe6>
 8114976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114978:	1c5a      	adds	r2, r3, #1
 811497a:	9219      	str	r2, [sp, #100]	@ 0x64
 811497c:	785b      	ldrb	r3, [r3, #1]
 811497e:	2b30      	cmp	r3, #48	@ 0x30
 8114980:	d0f9      	beq.n	8114976 <_strtod_l+0x126>
 8114982:	2b00      	cmp	r3, #0
 8114984:	d09d      	beq.n	81148c2 <_strtod_l+0x72>
 8114986:	2301      	movs	r3, #1
 8114988:	9309      	str	r3, [sp, #36]	@ 0x24
 811498a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811498c:	930c      	str	r3, [sp, #48]	@ 0x30
 811498e:	2300      	movs	r3, #0
 8114990:	9308      	str	r3, [sp, #32]
 8114992:	930a      	str	r3, [sp, #40]	@ 0x28
 8114994:	461f      	mov	r7, r3
 8114996:	220a      	movs	r2, #10
 8114998:	9819      	ldr	r0, [sp, #100]	@ 0x64
 811499a:	7805      	ldrb	r5, [r0, #0]
 811499c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 81149a0:	b2d9      	uxtb	r1, r3
 81149a2:	2909      	cmp	r1, #9
 81149a4:	d928      	bls.n	81149f8 <_strtod_l+0x1a8>
 81149a6:	494e      	ldr	r1, [pc, #312]	@ (8114ae0 <_strtod_l+0x290>)
 81149a8:	2201      	movs	r2, #1
 81149aa:	f7fe fb1e 	bl	8112fea <strncmp>
 81149ae:	2800      	cmp	r0, #0
 81149b0:	d032      	beq.n	8114a18 <_strtod_l+0x1c8>
 81149b2:	2000      	movs	r0, #0
 81149b4:	462a      	mov	r2, r5
 81149b6:	4681      	mov	r9, r0
 81149b8:	463d      	mov	r5, r7
 81149ba:	4603      	mov	r3, r0
 81149bc:	2a65      	cmp	r2, #101	@ 0x65
 81149be:	d001      	beq.n	81149c4 <_strtod_l+0x174>
 81149c0:	2a45      	cmp	r2, #69	@ 0x45
 81149c2:	d114      	bne.n	81149ee <_strtod_l+0x19e>
 81149c4:	b91d      	cbnz	r5, 81149ce <_strtod_l+0x17e>
 81149c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81149c8:	4302      	orrs	r2, r0
 81149ca:	d095      	beq.n	81148f8 <_strtod_l+0xa8>
 81149cc:	2500      	movs	r5, #0
 81149ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 81149d0:	1c62      	adds	r2, r4, #1
 81149d2:	9219      	str	r2, [sp, #100]	@ 0x64
 81149d4:	7862      	ldrb	r2, [r4, #1]
 81149d6:	2a2b      	cmp	r2, #43	@ 0x2b
 81149d8:	d077      	beq.n	8114aca <_strtod_l+0x27a>
 81149da:	2a2d      	cmp	r2, #45	@ 0x2d
 81149dc:	d07b      	beq.n	8114ad6 <_strtod_l+0x286>
 81149de:	f04f 0c00 	mov.w	ip, #0
 81149e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 81149e6:	2909      	cmp	r1, #9
 81149e8:	f240 8082 	bls.w	8114af0 <_strtod_l+0x2a0>
 81149ec:	9419      	str	r4, [sp, #100]	@ 0x64
 81149ee:	f04f 0800 	mov.w	r8, #0
 81149f2:	e0a2      	b.n	8114b3a <_strtod_l+0x2ea>
 81149f4:	2300      	movs	r3, #0
 81149f6:	e7c7      	b.n	8114988 <_strtod_l+0x138>
 81149f8:	2f08      	cmp	r7, #8
 81149fa:	bfd5      	itete	le
 81149fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 81149fe:	9908      	ldrgt	r1, [sp, #32]
 8114a00:	fb02 3301 	mlale	r3, r2, r1, r3
 8114a04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8114a08:	f100 0001 	add.w	r0, r0, #1
 8114a0c:	bfd4      	ite	le
 8114a0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8114a10:	9308      	strgt	r3, [sp, #32]
 8114a12:	3701      	adds	r7, #1
 8114a14:	9019      	str	r0, [sp, #100]	@ 0x64
 8114a16:	e7bf      	b.n	8114998 <_strtod_l+0x148>
 8114a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114a1a:	1c5a      	adds	r2, r3, #1
 8114a1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8114a1e:	785a      	ldrb	r2, [r3, #1]
 8114a20:	b37f      	cbz	r7, 8114a82 <_strtod_l+0x232>
 8114a22:	4681      	mov	r9, r0
 8114a24:	463d      	mov	r5, r7
 8114a26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8114a2a:	2b09      	cmp	r3, #9
 8114a2c:	d912      	bls.n	8114a54 <_strtod_l+0x204>
 8114a2e:	2301      	movs	r3, #1
 8114a30:	e7c4      	b.n	81149bc <_strtod_l+0x16c>
 8114a32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114a34:	1c5a      	adds	r2, r3, #1
 8114a36:	9219      	str	r2, [sp, #100]	@ 0x64
 8114a38:	785a      	ldrb	r2, [r3, #1]
 8114a3a:	3001      	adds	r0, #1
 8114a3c:	2a30      	cmp	r2, #48	@ 0x30
 8114a3e:	d0f8      	beq.n	8114a32 <_strtod_l+0x1e2>
 8114a40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8114a44:	2b08      	cmp	r3, #8
 8114a46:	f200 84d3 	bhi.w	81153f0 <_strtod_l+0xba0>
 8114a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8114a4e:	4681      	mov	r9, r0
 8114a50:	2000      	movs	r0, #0
 8114a52:	4605      	mov	r5, r0
 8114a54:	3a30      	subs	r2, #48	@ 0x30
 8114a56:	f100 0301 	add.w	r3, r0, #1
 8114a5a:	d02a      	beq.n	8114ab2 <_strtod_l+0x262>
 8114a5c:	4499      	add	r9, r3
 8114a5e:	eb00 0c05 	add.w	ip, r0, r5
 8114a62:	462b      	mov	r3, r5
 8114a64:	210a      	movs	r1, #10
 8114a66:	4563      	cmp	r3, ip
 8114a68:	d10d      	bne.n	8114a86 <_strtod_l+0x236>
 8114a6a:	1c69      	adds	r1, r5, #1
 8114a6c:	4401      	add	r1, r0
 8114a6e:	4428      	add	r0, r5
 8114a70:	2808      	cmp	r0, #8
 8114a72:	dc16      	bgt.n	8114aa2 <_strtod_l+0x252>
 8114a74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8114a76:	230a      	movs	r3, #10
 8114a78:	fb03 2300 	mla	r3, r3, r0, r2
 8114a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8114a7e:	2300      	movs	r3, #0
 8114a80:	e018      	b.n	8114ab4 <_strtod_l+0x264>
 8114a82:	4638      	mov	r0, r7
 8114a84:	e7da      	b.n	8114a3c <_strtod_l+0x1ec>
 8114a86:	2b08      	cmp	r3, #8
 8114a88:	f103 0301 	add.w	r3, r3, #1
 8114a8c:	dc03      	bgt.n	8114a96 <_strtod_l+0x246>
 8114a8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8114a90:	434e      	muls	r6, r1
 8114a92:	960a      	str	r6, [sp, #40]	@ 0x28
 8114a94:	e7e7      	b.n	8114a66 <_strtod_l+0x216>
 8114a96:	2b10      	cmp	r3, #16
 8114a98:	bfde      	ittt	le
 8114a9a:	9e08      	ldrle	r6, [sp, #32]
 8114a9c:	434e      	mulle	r6, r1
 8114a9e:	9608      	strle	r6, [sp, #32]
 8114aa0:	e7e1      	b.n	8114a66 <_strtod_l+0x216>
 8114aa2:	280f      	cmp	r0, #15
 8114aa4:	dceb      	bgt.n	8114a7e <_strtod_l+0x22e>
 8114aa6:	9808      	ldr	r0, [sp, #32]
 8114aa8:	230a      	movs	r3, #10
 8114aaa:	fb03 2300 	mla	r3, r3, r0, r2
 8114aae:	9308      	str	r3, [sp, #32]
 8114ab0:	e7e5      	b.n	8114a7e <_strtod_l+0x22e>
 8114ab2:	4629      	mov	r1, r5
 8114ab4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114ab6:	1c50      	adds	r0, r2, #1
 8114ab8:	9019      	str	r0, [sp, #100]	@ 0x64
 8114aba:	7852      	ldrb	r2, [r2, #1]
 8114abc:	4618      	mov	r0, r3
 8114abe:	460d      	mov	r5, r1
 8114ac0:	e7b1      	b.n	8114a26 <_strtod_l+0x1d6>
 8114ac2:	f04f 0900 	mov.w	r9, #0
 8114ac6:	2301      	movs	r3, #1
 8114ac8:	e77d      	b.n	81149c6 <_strtod_l+0x176>
 8114aca:	f04f 0c00 	mov.w	ip, #0
 8114ace:	1ca2      	adds	r2, r4, #2
 8114ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8114ad2:	78a2      	ldrb	r2, [r4, #2]
 8114ad4:	e785      	b.n	81149e2 <_strtod_l+0x192>
 8114ad6:	f04f 0c01 	mov.w	ip, #1
 8114ada:	e7f8      	b.n	8114ace <_strtod_l+0x27e>
 8114adc:	08117bc0 	.word	0x08117bc0
 8114ae0:	08117ba8 	.word	0x08117ba8
 8114ae4:	7ff00000 	.word	0x7ff00000
 8114ae8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114aea:	1c51      	adds	r1, r2, #1
 8114aec:	9119      	str	r1, [sp, #100]	@ 0x64
 8114aee:	7852      	ldrb	r2, [r2, #1]
 8114af0:	2a30      	cmp	r2, #48	@ 0x30
 8114af2:	d0f9      	beq.n	8114ae8 <_strtod_l+0x298>
 8114af4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8114af8:	2908      	cmp	r1, #8
 8114afa:	f63f af78 	bhi.w	81149ee <_strtod_l+0x19e>
 8114afe:	3a30      	subs	r2, #48	@ 0x30
 8114b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8114b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114b04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8114b06:	f04f 080a 	mov.w	r8, #10
 8114b0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114b0c:	1c56      	adds	r6, r2, #1
 8114b0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8114b10:	7852      	ldrb	r2, [r2, #1]
 8114b12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8114b16:	f1be 0f09 	cmp.w	lr, #9
 8114b1a:	d939      	bls.n	8114b90 <_strtod_l+0x340>
 8114b1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8114b1e:	1a76      	subs	r6, r6, r1
 8114b20:	2e08      	cmp	r6, #8
 8114b22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8114b26:	dc03      	bgt.n	8114b30 <_strtod_l+0x2e0>
 8114b28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8114b2a:	4588      	cmp	r8, r1
 8114b2c:	bfa8      	it	ge
 8114b2e:	4688      	movge	r8, r1
 8114b30:	f1bc 0f00 	cmp.w	ip, #0
 8114b34:	d001      	beq.n	8114b3a <_strtod_l+0x2ea>
 8114b36:	f1c8 0800 	rsb	r8, r8, #0
 8114b3a:	2d00      	cmp	r5, #0
 8114b3c:	d14e      	bne.n	8114bdc <_strtod_l+0x38c>
 8114b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8114b40:	4308      	orrs	r0, r1
 8114b42:	f47f aebe 	bne.w	81148c2 <_strtod_l+0x72>
 8114b46:	2b00      	cmp	r3, #0
 8114b48:	f47f aed6 	bne.w	81148f8 <_strtod_l+0xa8>
 8114b4c:	2a69      	cmp	r2, #105	@ 0x69
 8114b4e:	d028      	beq.n	8114ba2 <_strtod_l+0x352>
 8114b50:	dc25      	bgt.n	8114b9e <_strtod_l+0x34e>
 8114b52:	2a49      	cmp	r2, #73	@ 0x49
 8114b54:	d025      	beq.n	8114ba2 <_strtod_l+0x352>
 8114b56:	2a4e      	cmp	r2, #78	@ 0x4e
 8114b58:	f47f aece 	bne.w	81148f8 <_strtod_l+0xa8>
 8114b5c:	499b      	ldr	r1, [pc, #620]	@ (8114dcc <_strtod_l+0x57c>)
 8114b5e:	a819      	add	r0, sp, #100	@ 0x64
 8114b60:	f001 fb40 	bl	81161e4 <__match>
 8114b64:	2800      	cmp	r0, #0
 8114b66:	f43f aec7 	beq.w	81148f8 <_strtod_l+0xa8>
 8114b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114b6c:	781b      	ldrb	r3, [r3, #0]
 8114b6e:	2b28      	cmp	r3, #40	@ 0x28
 8114b70:	d12e      	bne.n	8114bd0 <_strtod_l+0x380>
 8114b72:	4997      	ldr	r1, [pc, #604]	@ (8114dd0 <_strtod_l+0x580>)
 8114b74:	aa1c      	add	r2, sp, #112	@ 0x70
 8114b76:	a819      	add	r0, sp, #100	@ 0x64
 8114b78:	f001 fb48 	bl	811620c <__hexnan>
 8114b7c:	2805      	cmp	r0, #5
 8114b7e:	d127      	bne.n	8114bd0 <_strtod_l+0x380>
 8114b80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8114b82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8114b86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8114b8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8114b8e:	e698      	b.n	81148c2 <_strtod_l+0x72>
 8114b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8114b92:	fb08 2101 	mla	r1, r8, r1, r2
 8114b96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8114b9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8114b9c:	e7b5      	b.n	8114b0a <_strtod_l+0x2ba>
 8114b9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8114ba0:	e7da      	b.n	8114b58 <_strtod_l+0x308>
 8114ba2:	498c      	ldr	r1, [pc, #560]	@ (8114dd4 <_strtod_l+0x584>)
 8114ba4:	a819      	add	r0, sp, #100	@ 0x64
 8114ba6:	f001 fb1d 	bl	81161e4 <__match>
 8114baa:	2800      	cmp	r0, #0
 8114bac:	f43f aea4 	beq.w	81148f8 <_strtod_l+0xa8>
 8114bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114bb2:	4989      	ldr	r1, [pc, #548]	@ (8114dd8 <_strtod_l+0x588>)
 8114bb4:	3b01      	subs	r3, #1
 8114bb6:	a819      	add	r0, sp, #100	@ 0x64
 8114bb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8114bba:	f001 fb13 	bl	81161e4 <__match>
 8114bbe:	b910      	cbnz	r0, 8114bc6 <_strtod_l+0x376>
 8114bc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114bc2:	3301      	adds	r3, #1
 8114bc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8114bc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8114de8 <_strtod_l+0x598>
 8114bca:	f04f 0a00 	mov.w	sl, #0
 8114bce:	e678      	b.n	81148c2 <_strtod_l+0x72>
 8114bd0:	4882      	ldr	r0, [pc, #520]	@ (8114ddc <_strtod_l+0x58c>)
 8114bd2:	f001 f861 	bl	8115c98 <nan>
 8114bd6:	ec5b ab10 	vmov	sl, fp, d0
 8114bda:	e672      	b.n	81148c2 <_strtod_l+0x72>
 8114bdc:	eba8 0309 	sub.w	r3, r8, r9
 8114be0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8114be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8114be4:	2f00      	cmp	r7, #0
 8114be6:	bf08      	it	eq
 8114be8:	462f      	moveq	r7, r5
 8114bea:	2d10      	cmp	r5, #16
 8114bec:	462c      	mov	r4, r5
 8114bee:	bfa8      	it	ge
 8114bf0:	2410      	movge	r4, #16
 8114bf2:	f7eb fd1f 	bl	8100634 <__aeabi_ui2d>
 8114bf6:	2d09      	cmp	r5, #9
 8114bf8:	4682      	mov	sl, r0
 8114bfa:	468b      	mov	fp, r1
 8114bfc:	dc13      	bgt.n	8114c26 <_strtod_l+0x3d6>
 8114bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114c00:	2b00      	cmp	r3, #0
 8114c02:	f43f ae5e 	beq.w	81148c2 <_strtod_l+0x72>
 8114c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114c08:	dd78      	ble.n	8114cfc <_strtod_l+0x4ac>
 8114c0a:	2b16      	cmp	r3, #22
 8114c0c:	dc5f      	bgt.n	8114cce <_strtod_l+0x47e>
 8114c0e:	4974      	ldr	r1, [pc, #464]	@ (8114de0 <_strtod_l+0x590>)
 8114c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8114c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114c18:	4652      	mov	r2, sl
 8114c1a:	465b      	mov	r3, fp
 8114c1c:	f7eb fd84 	bl	8100728 <__aeabi_dmul>
 8114c20:	4682      	mov	sl, r0
 8114c22:	468b      	mov	fp, r1
 8114c24:	e64d      	b.n	81148c2 <_strtod_l+0x72>
 8114c26:	4b6e      	ldr	r3, [pc, #440]	@ (8114de0 <_strtod_l+0x590>)
 8114c28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8114c2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8114c30:	f7eb fd7a 	bl	8100728 <__aeabi_dmul>
 8114c34:	4682      	mov	sl, r0
 8114c36:	9808      	ldr	r0, [sp, #32]
 8114c38:	468b      	mov	fp, r1
 8114c3a:	f7eb fcfb 	bl	8100634 <__aeabi_ui2d>
 8114c3e:	4602      	mov	r2, r0
 8114c40:	460b      	mov	r3, r1
 8114c42:	4650      	mov	r0, sl
 8114c44:	4659      	mov	r1, fp
 8114c46:	f7eb fbb9 	bl	81003bc <__adddf3>
 8114c4a:	2d0f      	cmp	r5, #15
 8114c4c:	4682      	mov	sl, r0
 8114c4e:	468b      	mov	fp, r1
 8114c50:	ddd5      	ble.n	8114bfe <_strtod_l+0x3ae>
 8114c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114c54:	1b2c      	subs	r4, r5, r4
 8114c56:	441c      	add	r4, r3
 8114c58:	2c00      	cmp	r4, #0
 8114c5a:	f340 8096 	ble.w	8114d8a <_strtod_l+0x53a>
 8114c5e:	f014 030f 	ands.w	r3, r4, #15
 8114c62:	d00a      	beq.n	8114c7a <_strtod_l+0x42a>
 8114c64:	495e      	ldr	r1, [pc, #376]	@ (8114de0 <_strtod_l+0x590>)
 8114c66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8114c6a:	4652      	mov	r2, sl
 8114c6c:	465b      	mov	r3, fp
 8114c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114c72:	f7eb fd59 	bl	8100728 <__aeabi_dmul>
 8114c76:	4682      	mov	sl, r0
 8114c78:	468b      	mov	fp, r1
 8114c7a:	f034 040f 	bics.w	r4, r4, #15
 8114c7e:	d073      	beq.n	8114d68 <_strtod_l+0x518>
 8114c80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8114c84:	dd48      	ble.n	8114d18 <_strtod_l+0x4c8>
 8114c86:	2400      	movs	r4, #0
 8114c88:	46a0      	mov	r8, r4
 8114c8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8114c8c:	46a1      	mov	r9, r4
 8114c8e:	9a05      	ldr	r2, [sp, #20]
 8114c90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8114de8 <_strtod_l+0x598>
 8114c94:	2322      	movs	r3, #34	@ 0x22
 8114c96:	6013      	str	r3, [r2, #0]
 8114c98:	f04f 0a00 	mov.w	sl, #0
 8114c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114c9e:	2b00      	cmp	r3, #0
 8114ca0:	f43f ae0f 	beq.w	81148c2 <_strtod_l+0x72>
 8114ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114ca6:	9805      	ldr	r0, [sp, #20]
 8114ca8:	f7ff f940 	bl	8113f2c <_Bfree>
 8114cac:	9805      	ldr	r0, [sp, #20]
 8114cae:	4649      	mov	r1, r9
 8114cb0:	f7ff f93c 	bl	8113f2c <_Bfree>
 8114cb4:	9805      	ldr	r0, [sp, #20]
 8114cb6:	4641      	mov	r1, r8
 8114cb8:	f7ff f938 	bl	8113f2c <_Bfree>
 8114cbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8114cbe:	9805      	ldr	r0, [sp, #20]
 8114cc0:	f7ff f934 	bl	8113f2c <_Bfree>
 8114cc4:	9805      	ldr	r0, [sp, #20]
 8114cc6:	4621      	mov	r1, r4
 8114cc8:	f7ff f930 	bl	8113f2c <_Bfree>
 8114ccc:	e5f9      	b.n	81148c2 <_strtod_l+0x72>
 8114cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114cd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8114cd4:	4293      	cmp	r3, r2
 8114cd6:	dbbc      	blt.n	8114c52 <_strtod_l+0x402>
 8114cd8:	4c41      	ldr	r4, [pc, #260]	@ (8114de0 <_strtod_l+0x590>)
 8114cda:	f1c5 050f 	rsb	r5, r5, #15
 8114cde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8114ce2:	4652      	mov	r2, sl
 8114ce4:	465b      	mov	r3, fp
 8114ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114cea:	f7eb fd1d 	bl	8100728 <__aeabi_dmul>
 8114cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114cf0:	1b5d      	subs	r5, r3, r5
 8114cf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8114cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8114cfa:	e78f      	b.n	8114c1c <_strtod_l+0x3cc>
 8114cfc:	3316      	adds	r3, #22
 8114cfe:	dba8      	blt.n	8114c52 <_strtod_l+0x402>
 8114d00:	4b37      	ldr	r3, [pc, #220]	@ (8114de0 <_strtod_l+0x590>)
 8114d02:	eba9 0808 	sub.w	r8, r9, r8
 8114d06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8114d0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8114d0e:	4650      	mov	r0, sl
 8114d10:	4659      	mov	r1, fp
 8114d12:	f7eb fe33 	bl	810097c <__aeabi_ddiv>
 8114d16:	e783      	b.n	8114c20 <_strtod_l+0x3d0>
 8114d18:	4b32      	ldr	r3, [pc, #200]	@ (8114de4 <_strtod_l+0x594>)
 8114d1a:	9308      	str	r3, [sp, #32]
 8114d1c:	2300      	movs	r3, #0
 8114d1e:	1124      	asrs	r4, r4, #4
 8114d20:	4650      	mov	r0, sl
 8114d22:	4659      	mov	r1, fp
 8114d24:	461e      	mov	r6, r3
 8114d26:	2c01      	cmp	r4, #1
 8114d28:	dc21      	bgt.n	8114d6e <_strtod_l+0x51e>
 8114d2a:	b10b      	cbz	r3, 8114d30 <_strtod_l+0x4e0>
 8114d2c:	4682      	mov	sl, r0
 8114d2e:	468b      	mov	fp, r1
 8114d30:	492c      	ldr	r1, [pc, #176]	@ (8114de4 <_strtod_l+0x594>)
 8114d32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8114d36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8114d3a:	4652      	mov	r2, sl
 8114d3c:	465b      	mov	r3, fp
 8114d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114d42:	f7eb fcf1 	bl	8100728 <__aeabi_dmul>
 8114d46:	4b28      	ldr	r3, [pc, #160]	@ (8114de8 <_strtod_l+0x598>)
 8114d48:	460a      	mov	r2, r1
 8114d4a:	400b      	ands	r3, r1
 8114d4c:	4927      	ldr	r1, [pc, #156]	@ (8114dec <_strtod_l+0x59c>)
 8114d4e:	428b      	cmp	r3, r1
 8114d50:	4682      	mov	sl, r0
 8114d52:	d898      	bhi.n	8114c86 <_strtod_l+0x436>
 8114d54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8114d58:	428b      	cmp	r3, r1
 8114d5a:	bf86      	itte	hi
 8114d5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8114df0 <_strtod_l+0x5a0>
 8114d60:	f04f 3aff 	movhi.w	sl, #4294967295
 8114d64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8114d68:	2300      	movs	r3, #0
 8114d6a:	9308      	str	r3, [sp, #32]
 8114d6c:	e07a      	b.n	8114e64 <_strtod_l+0x614>
 8114d6e:	07e2      	lsls	r2, r4, #31
 8114d70:	d505      	bpl.n	8114d7e <_strtod_l+0x52e>
 8114d72:	9b08      	ldr	r3, [sp, #32]
 8114d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114d78:	f7eb fcd6 	bl	8100728 <__aeabi_dmul>
 8114d7c:	2301      	movs	r3, #1
 8114d7e:	9a08      	ldr	r2, [sp, #32]
 8114d80:	3208      	adds	r2, #8
 8114d82:	3601      	adds	r6, #1
 8114d84:	1064      	asrs	r4, r4, #1
 8114d86:	9208      	str	r2, [sp, #32]
 8114d88:	e7cd      	b.n	8114d26 <_strtod_l+0x4d6>
 8114d8a:	d0ed      	beq.n	8114d68 <_strtod_l+0x518>
 8114d8c:	4264      	negs	r4, r4
 8114d8e:	f014 020f 	ands.w	r2, r4, #15
 8114d92:	d00a      	beq.n	8114daa <_strtod_l+0x55a>
 8114d94:	4b12      	ldr	r3, [pc, #72]	@ (8114de0 <_strtod_l+0x590>)
 8114d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8114d9a:	4650      	mov	r0, sl
 8114d9c:	4659      	mov	r1, fp
 8114d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114da2:	f7eb fdeb 	bl	810097c <__aeabi_ddiv>
 8114da6:	4682      	mov	sl, r0
 8114da8:	468b      	mov	fp, r1
 8114daa:	1124      	asrs	r4, r4, #4
 8114dac:	d0dc      	beq.n	8114d68 <_strtod_l+0x518>
 8114dae:	2c1f      	cmp	r4, #31
 8114db0:	dd20      	ble.n	8114df4 <_strtod_l+0x5a4>
 8114db2:	2400      	movs	r4, #0
 8114db4:	46a0      	mov	r8, r4
 8114db6:	940a      	str	r4, [sp, #40]	@ 0x28
 8114db8:	46a1      	mov	r9, r4
 8114dba:	9a05      	ldr	r2, [sp, #20]
 8114dbc:	2322      	movs	r3, #34	@ 0x22
 8114dbe:	f04f 0a00 	mov.w	sl, #0
 8114dc2:	f04f 0b00 	mov.w	fp, #0
 8114dc6:	6013      	str	r3, [r2, #0]
 8114dc8:	e768      	b.n	8114c9c <_strtod_l+0x44c>
 8114dca:	bf00      	nop
 8114dcc:	08117994 	.word	0x08117994
 8114dd0:	08117bac 	.word	0x08117bac
 8114dd4:	0811798c 	.word	0x0811798c
 8114dd8:	081179c3 	.word	0x081179c3
 8114ddc:	08117885 	.word	0x08117885
 8114de0:	08117ae0 	.word	0x08117ae0
 8114de4:	08117ab8 	.word	0x08117ab8
 8114de8:	7ff00000 	.word	0x7ff00000
 8114dec:	7ca00000 	.word	0x7ca00000
 8114df0:	7fefffff 	.word	0x7fefffff
 8114df4:	f014 0310 	ands.w	r3, r4, #16
 8114df8:	bf18      	it	ne
 8114dfa:	236a      	movne	r3, #106	@ 0x6a
 8114dfc:	4ea9      	ldr	r6, [pc, #676]	@ (81150a4 <_strtod_l+0x854>)
 8114dfe:	9308      	str	r3, [sp, #32]
 8114e00:	4650      	mov	r0, sl
 8114e02:	4659      	mov	r1, fp
 8114e04:	2300      	movs	r3, #0
 8114e06:	07e2      	lsls	r2, r4, #31
 8114e08:	d504      	bpl.n	8114e14 <_strtod_l+0x5c4>
 8114e0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8114e0e:	f7eb fc8b 	bl	8100728 <__aeabi_dmul>
 8114e12:	2301      	movs	r3, #1
 8114e14:	1064      	asrs	r4, r4, #1
 8114e16:	f106 0608 	add.w	r6, r6, #8
 8114e1a:	d1f4      	bne.n	8114e06 <_strtod_l+0x5b6>
 8114e1c:	b10b      	cbz	r3, 8114e22 <_strtod_l+0x5d2>
 8114e1e:	4682      	mov	sl, r0
 8114e20:	468b      	mov	fp, r1
 8114e22:	9b08      	ldr	r3, [sp, #32]
 8114e24:	b1b3      	cbz	r3, 8114e54 <_strtod_l+0x604>
 8114e26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8114e2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8114e2e:	2b00      	cmp	r3, #0
 8114e30:	4659      	mov	r1, fp
 8114e32:	dd0f      	ble.n	8114e54 <_strtod_l+0x604>
 8114e34:	2b1f      	cmp	r3, #31
 8114e36:	dd55      	ble.n	8114ee4 <_strtod_l+0x694>
 8114e38:	2b34      	cmp	r3, #52	@ 0x34
 8114e3a:	bfde      	ittt	le
 8114e3c:	f04f 33ff 	movle.w	r3, #4294967295
 8114e40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8114e44:	4093      	lslle	r3, r2
 8114e46:	f04f 0a00 	mov.w	sl, #0
 8114e4a:	bfcc      	ite	gt
 8114e4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8114e50:	ea03 0b01 	andle.w	fp, r3, r1
 8114e54:	2200      	movs	r2, #0
 8114e56:	2300      	movs	r3, #0
 8114e58:	4650      	mov	r0, sl
 8114e5a:	4659      	mov	r1, fp
 8114e5c:	f7eb fecc 	bl	8100bf8 <__aeabi_dcmpeq>
 8114e60:	2800      	cmp	r0, #0
 8114e62:	d1a6      	bne.n	8114db2 <_strtod_l+0x562>
 8114e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114e66:	9300      	str	r3, [sp, #0]
 8114e68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8114e6a:	9805      	ldr	r0, [sp, #20]
 8114e6c:	462b      	mov	r3, r5
 8114e6e:	463a      	mov	r2, r7
 8114e70:	f7ff f8c4 	bl	8113ffc <__s2b>
 8114e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8114e76:	2800      	cmp	r0, #0
 8114e78:	f43f af05 	beq.w	8114c86 <_strtod_l+0x436>
 8114e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114e7e:	2a00      	cmp	r2, #0
 8114e80:	eba9 0308 	sub.w	r3, r9, r8
 8114e84:	bfa8      	it	ge
 8114e86:	2300      	movge	r3, #0
 8114e88:	9312      	str	r3, [sp, #72]	@ 0x48
 8114e8a:	2400      	movs	r4, #0
 8114e8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8114e90:	9316      	str	r3, [sp, #88]	@ 0x58
 8114e92:	46a0      	mov	r8, r4
 8114e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114e96:	9805      	ldr	r0, [sp, #20]
 8114e98:	6859      	ldr	r1, [r3, #4]
 8114e9a:	f7ff f807 	bl	8113eac <_Balloc>
 8114e9e:	4681      	mov	r9, r0
 8114ea0:	2800      	cmp	r0, #0
 8114ea2:	f43f aef4 	beq.w	8114c8e <_strtod_l+0x43e>
 8114ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114ea8:	691a      	ldr	r2, [r3, #16]
 8114eaa:	3202      	adds	r2, #2
 8114eac:	f103 010c 	add.w	r1, r3, #12
 8114eb0:	0092      	lsls	r2, r2, #2
 8114eb2:	300c      	adds	r0, #12
 8114eb4:	f7fe f945 	bl	8113142 <memcpy>
 8114eb8:	ec4b ab10 	vmov	d0, sl, fp
 8114ebc:	9805      	ldr	r0, [sp, #20]
 8114ebe:	aa1c      	add	r2, sp, #112	@ 0x70
 8114ec0:	a91b      	add	r1, sp, #108	@ 0x6c
 8114ec2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8114ec6:	f7ff fbd5 	bl	8114674 <__d2b>
 8114eca:	901a      	str	r0, [sp, #104]	@ 0x68
 8114ecc:	2800      	cmp	r0, #0
 8114ece:	f43f aede 	beq.w	8114c8e <_strtod_l+0x43e>
 8114ed2:	9805      	ldr	r0, [sp, #20]
 8114ed4:	2101      	movs	r1, #1
 8114ed6:	f7ff f927 	bl	8114128 <__i2b>
 8114eda:	4680      	mov	r8, r0
 8114edc:	b948      	cbnz	r0, 8114ef2 <_strtod_l+0x6a2>
 8114ede:	f04f 0800 	mov.w	r8, #0
 8114ee2:	e6d4      	b.n	8114c8e <_strtod_l+0x43e>
 8114ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8114ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8114eec:	ea03 0a0a 	and.w	sl, r3, sl
 8114ef0:	e7b0      	b.n	8114e54 <_strtod_l+0x604>
 8114ef2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8114ef4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8114ef6:	2d00      	cmp	r5, #0
 8114ef8:	bfab      	itete	ge
 8114efa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8114efc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8114efe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8114f00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8114f02:	bfac      	ite	ge
 8114f04:	18ef      	addge	r7, r5, r3
 8114f06:	1b5e      	sublt	r6, r3, r5
 8114f08:	9b08      	ldr	r3, [sp, #32]
 8114f0a:	1aed      	subs	r5, r5, r3
 8114f0c:	4415      	add	r5, r2
 8114f0e:	4b66      	ldr	r3, [pc, #408]	@ (81150a8 <_strtod_l+0x858>)
 8114f10:	3d01      	subs	r5, #1
 8114f12:	429d      	cmp	r5, r3
 8114f14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8114f18:	da50      	bge.n	8114fbc <_strtod_l+0x76c>
 8114f1a:	1b5b      	subs	r3, r3, r5
 8114f1c:	2b1f      	cmp	r3, #31
 8114f1e:	eba2 0203 	sub.w	r2, r2, r3
 8114f22:	f04f 0101 	mov.w	r1, #1
 8114f26:	dc3d      	bgt.n	8114fa4 <_strtod_l+0x754>
 8114f28:	fa01 f303 	lsl.w	r3, r1, r3
 8114f2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114f2e:	2300      	movs	r3, #0
 8114f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8114f32:	18bd      	adds	r5, r7, r2
 8114f34:	9b08      	ldr	r3, [sp, #32]
 8114f36:	42af      	cmp	r7, r5
 8114f38:	4416      	add	r6, r2
 8114f3a:	441e      	add	r6, r3
 8114f3c:	463b      	mov	r3, r7
 8114f3e:	bfa8      	it	ge
 8114f40:	462b      	movge	r3, r5
 8114f42:	42b3      	cmp	r3, r6
 8114f44:	bfa8      	it	ge
 8114f46:	4633      	movge	r3, r6
 8114f48:	2b00      	cmp	r3, #0
 8114f4a:	bfc2      	ittt	gt
 8114f4c:	1aed      	subgt	r5, r5, r3
 8114f4e:	1af6      	subgt	r6, r6, r3
 8114f50:	1aff      	subgt	r7, r7, r3
 8114f52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8114f54:	2b00      	cmp	r3, #0
 8114f56:	dd16      	ble.n	8114f86 <_strtod_l+0x736>
 8114f58:	4641      	mov	r1, r8
 8114f5a:	9805      	ldr	r0, [sp, #20]
 8114f5c:	461a      	mov	r2, r3
 8114f5e:	f7ff f9a3 	bl	81142a8 <__pow5mult>
 8114f62:	4680      	mov	r8, r0
 8114f64:	2800      	cmp	r0, #0
 8114f66:	d0ba      	beq.n	8114ede <_strtod_l+0x68e>
 8114f68:	4601      	mov	r1, r0
 8114f6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8114f6c:	9805      	ldr	r0, [sp, #20]
 8114f6e:	f7ff f8f1 	bl	8114154 <__multiply>
 8114f72:	900e      	str	r0, [sp, #56]	@ 0x38
 8114f74:	2800      	cmp	r0, #0
 8114f76:	f43f ae8a 	beq.w	8114c8e <_strtod_l+0x43e>
 8114f7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114f7c:	9805      	ldr	r0, [sp, #20]
 8114f7e:	f7fe ffd5 	bl	8113f2c <_Bfree>
 8114f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8114f86:	2d00      	cmp	r5, #0
 8114f88:	dc1d      	bgt.n	8114fc6 <_strtod_l+0x776>
 8114f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114f8c:	2b00      	cmp	r3, #0
 8114f8e:	dd23      	ble.n	8114fd8 <_strtod_l+0x788>
 8114f90:	4649      	mov	r1, r9
 8114f92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8114f94:	9805      	ldr	r0, [sp, #20]
 8114f96:	f7ff f987 	bl	81142a8 <__pow5mult>
 8114f9a:	4681      	mov	r9, r0
 8114f9c:	b9e0      	cbnz	r0, 8114fd8 <_strtod_l+0x788>
 8114f9e:	f04f 0900 	mov.w	r9, #0
 8114fa2:	e674      	b.n	8114c8e <_strtod_l+0x43e>
 8114fa4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8114fa8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8114fac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8114fb0:	35e2      	adds	r5, #226	@ 0xe2
 8114fb2:	fa01 f305 	lsl.w	r3, r1, r5
 8114fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8114fb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8114fba:	e7ba      	b.n	8114f32 <_strtod_l+0x6e2>
 8114fbc:	2300      	movs	r3, #0
 8114fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8114fc0:	2301      	movs	r3, #1
 8114fc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114fc4:	e7b5      	b.n	8114f32 <_strtod_l+0x6e2>
 8114fc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114fc8:	9805      	ldr	r0, [sp, #20]
 8114fca:	462a      	mov	r2, r5
 8114fcc:	f7ff f9c6 	bl	811435c <__lshift>
 8114fd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8114fd2:	2800      	cmp	r0, #0
 8114fd4:	d1d9      	bne.n	8114f8a <_strtod_l+0x73a>
 8114fd6:	e65a      	b.n	8114c8e <_strtod_l+0x43e>
 8114fd8:	2e00      	cmp	r6, #0
 8114fda:	dd07      	ble.n	8114fec <_strtod_l+0x79c>
 8114fdc:	4649      	mov	r1, r9
 8114fde:	9805      	ldr	r0, [sp, #20]
 8114fe0:	4632      	mov	r2, r6
 8114fe2:	f7ff f9bb 	bl	811435c <__lshift>
 8114fe6:	4681      	mov	r9, r0
 8114fe8:	2800      	cmp	r0, #0
 8114fea:	d0d8      	beq.n	8114f9e <_strtod_l+0x74e>
 8114fec:	2f00      	cmp	r7, #0
 8114fee:	dd08      	ble.n	8115002 <_strtod_l+0x7b2>
 8114ff0:	4641      	mov	r1, r8
 8114ff2:	9805      	ldr	r0, [sp, #20]
 8114ff4:	463a      	mov	r2, r7
 8114ff6:	f7ff f9b1 	bl	811435c <__lshift>
 8114ffa:	4680      	mov	r8, r0
 8114ffc:	2800      	cmp	r0, #0
 8114ffe:	f43f ae46 	beq.w	8114c8e <_strtod_l+0x43e>
 8115002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8115004:	9805      	ldr	r0, [sp, #20]
 8115006:	464a      	mov	r2, r9
 8115008:	f7ff fa30 	bl	811446c <__mdiff>
 811500c:	4604      	mov	r4, r0
 811500e:	2800      	cmp	r0, #0
 8115010:	f43f ae3d 	beq.w	8114c8e <_strtod_l+0x43e>
 8115014:	68c3      	ldr	r3, [r0, #12]
 8115016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8115018:	2300      	movs	r3, #0
 811501a:	60c3      	str	r3, [r0, #12]
 811501c:	4641      	mov	r1, r8
 811501e:	f7ff fa09 	bl	8114434 <__mcmp>
 8115022:	2800      	cmp	r0, #0
 8115024:	da46      	bge.n	81150b4 <_strtod_l+0x864>
 8115026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115028:	ea53 030a 	orrs.w	r3, r3, sl
 811502c:	d16c      	bne.n	8115108 <_strtod_l+0x8b8>
 811502e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8115032:	2b00      	cmp	r3, #0
 8115034:	d168      	bne.n	8115108 <_strtod_l+0x8b8>
 8115036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 811503a:	0d1b      	lsrs	r3, r3, #20
 811503c:	051b      	lsls	r3, r3, #20
 811503e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8115042:	d961      	bls.n	8115108 <_strtod_l+0x8b8>
 8115044:	6963      	ldr	r3, [r4, #20]
 8115046:	b913      	cbnz	r3, 811504e <_strtod_l+0x7fe>
 8115048:	6923      	ldr	r3, [r4, #16]
 811504a:	2b01      	cmp	r3, #1
 811504c:	dd5c      	ble.n	8115108 <_strtod_l+0x8b8>
 811504e:	4621      	mov	r1, r4
 8115050:	2201      	movs	r2, #1
 8115052:	9805      	ldr	r0, [sp, #20]
 8115054:	f7ff f982 	bl	811435c <__lshift>
 8115058:	4641      	mov	r1, r8
 811505a:	4604      	mov	r4, r0
 811505c:	f7ff f9ea 	bl	8114434 <__mcmp>
 8115060:	2800      	cmp	r0, #0
 8115062:	dd51      	ble.n	8115108 <_strtod_l+0x8b8>
 8115064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8115068:	9a08      	ldr	r2, [sp, #32]
 811506a:	0d1b      	lsrs	r3, r3, #20
 811506c:	051b      	lsls	r3, r3, #20
 811506e:	2a00      	cmp	r2, #0
 8115070:	d06b      	beq.n	811514a <_strtod_l+0x8fa>
 8115072:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8115076:	d868      	bhi.n	811514a <_strtod_l+0x8fa>
 8115078:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 811507c:	f67f ae9d 	bls.w	8114dba <_strtod_l+0x56a>
 8115080:	4b0a      	ldr	r3, [pc, #40]	@ (81150ac <_strtod_l+0x85c>)
 8115082:	4650      	mov	r0, sl
 8115084:	4659      	mov	r1, fp
 8115086:	2200      	movs	r2, #0
 8115088:	f7eb fb4e 	bl	8100728 <__aeabi_dmul>
 811508c:	4b08      	ldr	r3, [pc, #32]	@ (81150b0 <_strtod_l+0x860>)
 811508e:	400b      	ands	r3, r1
 8115090:	4682      	mov	sl, r0
 8115092:	468b      	mov	fp, r1
 8115094:	2b00      	cmp	r3, #0
 8115096:	f47f ae05 	bne.w	8114ca4 <_strtod_l+0x454>
 811509a:	9a05      	ldr	r2, [sp, #20]
 811509c:	2322      	movs	r3, #34	@ 0x22
 811509e:	6013      	str	r3, [r2, #0]
 81150a0:	e600      	b.n	8114ca4 <_strtod_l+0x454>
 81150a2:	bf00      	nop
 81150a4:	08117bd8 	.word	0x08117bd8
 81150a8:	fffffc02 	.word	0xfffffc02
 81150ac:	39500000 	.word	0x39500000
 81150b0:	7ff00000 	.word	0x7ff00000
 81150b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81150b8:	d165      	bne.n	8115186 <_strtod_l+0x936>
 81150ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 81150bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81150c0:	b35a      	cbz	r2, 811511a <_strtod_l+0x8ca>
 81150c2:	4a9f      	ldr	r2, [pc, #636]	@ (8115340 <_strtod_l+0xaf0>)
 81150c4:	4293      	cmp	r3, r2
 81150c6:	d12b      	bne.n	8115120 <_strtod_l+0x8d0>
 81150c8:	9b08      	ldr	r3, [sp, #32]
 81150ca:	4651      	mov	r1, sl
 81150cc:	b303      	cbz	r3, 8115110 <_strtod_l+0x8c0>
 81150ce:	4b9d      	ldr	r3, [pc, #628]	@ (8115344 <_strtod_l+0xaf4>)
 81150d0:	465a      	mov	r2, fp
 81150d2:	4013      	ands	r3, r2
 81150d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 81150d8:	f04f 32ff 	mov.w	r2, #4294967295
 81150dc:	d81b      	bhi.n	8115116 <_strtod_l+0x8c6>
 81150de:	0d1b      	lsrs	r3, r3, #20
 81150e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 81150e4:	fa02 f303 	lsl.w	r3, r2, r3
 81150e8:	4299      	cmp	r1, r3
 81150ea:	d119      	bne.n	8115120 <_strtod_l+0x8d0>
 81150ec:	4b96      	ldr	r3, [pc, #600]	@ (8115348 <_strtod_l+0xaf8>)
 81150ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81150f0:	429a      	cmp	r2, r3
 81150f2:	d102      	bne.n	81150fa <_strtod_l+0x8aa>
 81150f4:	3101      	adds	r1, #1
 81150f6:	f43f adca 	beq.w	8114c8e <_strtod_l+0x43e>
 81150fa:	4b92      	ldr	r3, [pc, #584]	@ (8115344 <_strtod_l+0xaf4>)
 81150fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81150fe:	401a      	ands	r2, r3
 8115100:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8115104:	f04f 0a00 	mov.w	sl, #0
 8115108:	9b08      	ldr	r3, [sp, #32]
 811510a:	2b00      	cmp	r3, #0
 811510c:	d1b8      	bne.n	8115080 <_strtod_l+0x830>
 811510e:	e5c9      	b.n	8114ca4 <_strtod_l+0x454>
 8115110:	f04f 33ff 	mov.w	r3, #4294967295
 8115114:	e7e8      	b.n	81150e8 <_strtod_l+0x898>
 8115116:	4613      	mov	r3, r2
 8115118:	e7e6      	b.n	81150e8 <_strtod_l+0x898>
 811511a:	ea53 030a 	orrs.w	r3, r3, sl
 811511e:	d0a1      	beq.n	8115064 <_strtod_l+0x814>
 8115120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8115122:	b1db      	cbz	r3, 811515c <_strtod_l+0x90c>
 8115124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115126:	4213      	tst	r3, r2
 8115128:	d0ee      	beq.n	8115108 <_strtod_l+0x8b8>
 811512a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811512c:	9a08      	ldr	r2, [sp, #32]
 811512e:	4650      	mov	r0, sl
 8115130:	4659      	mov	r1, fp
 8115132:	b1bb      	cbz	r3, 8115164 <_strtod_l+0x914>
 8115134:	f7ff fb6c 	bl	8114810 <sulp>
 8115138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811513c:	ec53 2b10 	vmov	r2, r3, d0
 8115140:	f7eb f93c 	bl	81003bc <__adddf3>
 8115144:	4682      	mov	sl, r0
 8115146:	468b      	mov	fp, r1
 8115148:	e7de      	b.n	8115108 <_strtod_l+0x8b8>
 811514a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 811514e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8115152:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8115156:	f04f 3aff 	mov.w	sl, #4294967295
 811515a:	e7d5      	b.n	8115108 <_strtod_l+0x8b8>
 811515c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 811515e:	ea13 0f0a 	tst.w	r3, sl
 8115162:	e7e1      	b.n	8115128 <_strtod_l+0x8d8>
 8115164:	f7ff fb54 	bl	8114810 <sulp>
 8115168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811516c:	ec53 2b10 	vmov	r2, r3, d0
 8115170:	f7eb f922 	bl	81003b8 <__aeabi_dsub>
 8115174:	2200      	movs	r2, #0
 8115176:	2300      	movs	r3, #0
 8115178:	4682      	mov	sl, r0
 811517a:	468b      	mov	fp, r1
 811517c:	f7eb fd3c 	bl	8100bf8 <__aeabi_dcmpeq>
 8115180:	2800      	cmp	r0, #0
 8115182:	d0c1      	beq.n	8115108 <_strtod_l+0x8b8>
 8115184:	e619      	b.n	8114dba <_strtod_l+0x56a>
 8115186:	4641      	mov	r1, r8
 8115188:	4620      	mov	r0, r4
 811518a:	f7ff facb 	bl	8114724 <__ratio>
 811518e:	ec57 6b10 	vmov	r6, r7, d0
 8115192:	2200      	movs	r2, #0
 8115194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8115198:	4630      	mov	r0, r6
 811519a:	4639      	mov	r1, r7
 811519c:	f7eb fd40 	bl	8100c20 <__aeabi_dcmple>
 81151a0:	2800      	cmp	r0, #0
 81151a2:	d06f      	beq.n	8115284 <_strtod_l+0xa34>
 81151a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81151a6:	2b00      	cmp	r3, #0
 81151a8:	d17a      	bne.n	81152a0 <_strtod_l+0xa50>
 81151aa:	f1ba 0f00 	cmp.w	sl, #0
 81151ae:	d158      	bne.n	8115262 <_strtod_l+0xa12>
 81151b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81151b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81151b6:	2b00      	cmp	r3, #0
 81151b8:	d15a      	bne.n	8115270 <_strtod_l+0xa20>
 81151ba:	4b64      	ldr	r3, [pc, #400]	@ (811534c <_strtod_l+0xafc>)
 81151bc:	2200      	movs	r2, #0
 81151be:	4630      	mov	r0, r6
 81151c0:	4639      	mov	r1, r7
 81151c2:	f7eb fd23 	bl	8100c0c <__aeabi_dcmplt>
 81151c6:	2800      	cmp	r0, #0
 81151c8:	d159      	bne.n	811527e <_strtod_l+0xa2e>
 81151ca:	4630      	mov	r0, r6
 81151cc:	4639      	mov	r1, r7
 81151ce:	4b60      	ldr	r3, [pc, #384]	@ (8115350 <_strtod_l+0xb00>)
 81151d0:	2200      	movs	r2, #0
 81151d2:	f7eb faa9 	bl	8100728 <__aeabi_dmul>
 81151d6:	4606      	mov	r6, r0
 81151d8:	460f      	mov	r7, r1
 81151da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 81151de:	9606      	str	r6, [sp, #24]
 81151e0:	9307      	str	r3, [sp, #28]
 81151e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81151e6:	4d57      	ldr	r5, [pc, #348]	@ (8115344 <_strtod_l+0xaf4>)
 81151e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81151ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81151ee:	401d      	ands	r5, r3
 81151f0:	4b58      	ldr	r3, [pc, #352]	@ (8115354 <_strtod_l+0xb04>)
 81151f2:	429d      	cmp	r5, r3
 81151f4:	f040 80b2 	bne.w	811535c <_strtod_l+0xb0c>
 81151f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81151fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 81151fe:	ec4b ab10 	vmov	d0, sl, fp
 8115202:	f7ff f9c7 	bl	8114594 <__ulp>
 8115206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811520a:	ec51 0b10 	vmov	r0, r1, d0
 811520e:	f7eb fa8b 	bl	8100728 <__aeabi_dmul>
 8115212:	4652      	mov	r2, sl
 8115214:	465b      	mov	r3, fp
 8115216:	f7eb f8d1 	bl	81003bc <__adddf3>
 811521a:	460b      	mov	r3, r1
 811521c:	4949      	ldr	r1, [pc, #292]	@ (8115344 <_strtod_l+0xaf4>)
 811521e:	4a4e      	ldr	r2, [pc, #312]	@ (8115358 <_strtod_l+0xb08>)
 8115220:	4019      	ands	r1, r3
 8115222:	4291      	cmp	r1, r2
 8115224:	4682      	mov	sl, r0
 8115226:	d942      	bls.n	81152ae <_strtod_l+0xa5e>
 8115228:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 811522a:	4b47      	ldr	r3, [pc, #284]	@ (8115348 <_strtod_l+0xaf8>)
 811522c:	429a      	cmp	r2, r3
 811522e:	d103      	bne.n	8115238 <_strtod_l+0x9e8>
 8115230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8115232:	3301      	adds	r3, #1
 8115234:	f43f ad2b 	beq.w	8114c8e <_strtod_l+0x43e>
 8115238:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8115348 <_strtod_l+0xaf8>
 811523c:	f04f 3aff 	mov.w	sl, #4294967295
 8115240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8115242:	9805      	ldr	r0, [sp, #20]
 8115244:	f7fe fe72 	bl	8113f2c <_Bfree>
 8115248:	9805      	ldr	r0, [sp, #20]
 811524a:	4649      	mov	r1, r9
 811524c:	f7fe fe6e 	bl	8113f2c <_Bfree>
 8115250:	9805      	ldr	r0, [sp, #20]
 8115252:	4641      	mov	r1, r8
 8115254:	f7fe fe6a 	bl	8113f2c <_Bfree>
 8115258:	9805      	ldr	r0, [sp, #20]
 811525a:	4621      	mov	r1, r4
 811525c:	f7fe fe66 	bl	8113f2c <_Bfree>
 8115260:	e618      	b.n	8114e94 <_strtod_l+0x644>
 8115262:	f1ba 0f01 	cmp.w	sl, #1
 8115266:	d103      	bne.n	8115270 <_strtod_l+0xa20>
 8115268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811526a:	2b00      	cmp	r3, #0
 811526c:	f43f ada5 	beq.w	8114dba <_strtod_l+0x56a>
 8115270:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8115320 <_strtod_l+0xad0>
 8115274:	4f35      	ldr	r7, [pc, #212]	@ (811534c <_strtod_l+0xafc>)
 8115276:	ed8d 7b06 	vstr	d7, [sp, #24]
 811527a:	2600      	movs	r6, #0
 811527c:	e7b1      	b.n	81151e2 <_strtod_l+0x992>
 811527e:	4f34      	ldr	r7, [pc, #208]	@ (8115350 <_strtod_l+0xb00>)
 8115280:	2600      	movs	r6, #0
 8115282:	e7aa      	b.n	81151da <_strtod_l+0x98a>
 8115284:	4b32      	ldr	r3, [pc, #200]	@ (8115350 <_strtod_l+0xb00>)
 8115286:	4630      	mov	r0, r6
 8115288:	4639      	mov	r1, r7
 811528a:	2200      	movs	r2, #0
 811528c:	f7eb fa4c 	bl	8100728 <__aeabi_dmul>
 8115290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115292:	4606      	mov	r6, r0
 8115294:	460f      	mov	r7, r1
 8115296:	2b00      	cmp	r3, #0
 8115298:	d09f      	beq.n	81151da <_strtod_l+0x98a>
 811529a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 811529e:	e7a0      	b.n	81151e2 <_strtod_l+0x992>
 81152a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8115328 <_strtod_l+0xad8>
 81152a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 81152a8:	ec57 6b17 	vmov	r6, r7, d7
 81152ac:	e799      	b.n	81151e2 <_strtod_l+0x992>
 81152ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 81152b2:	9b08      	ldr	r3, [sp, #32]
 81152b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81152b8:	2b00      	cmp	r3, #0
 81152ba:	d1c1      	bne.n	8115240 <_strtod_l+0x9f0>
 81152bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81152c0:	0d1b      	lsrs	r3, r3, #20
 81152c2:	051b      	lsls	r3, r3, #20
 81152c4:	429d      	cmp	r5, r3
 81152c6:	d1bb      	bne.n	8115240 <_strtod_l+0x9f0>
 81152c8:	4630      	mov	r0, r6
 81152ca:	4639      	mov	r1, r7
 81152cc:	f7eb fd8c 	bl	8100de8 <__aeabi_d2lz>
 81152d0:	f7eb f9fc 	bl	81006cc <__aeabi_l2d>
 81152d4:	4602      	mov	r2, r0
 81152d6:	460b      	mov	r3, r1
 81152d8:	4630      	mov	r0, r6
 81152da:	4639      	mov	r1, r7
 81152dc:	f7eb f86c 	bl	81003b8 <__aeabi_dsub>
 81152e0:	460b      	mov	r3, r1
 81152e2:	4602      	mov	r2, r0
 81152e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 81152e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 81152ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81152ee:	ea46 060a 	orr.w	r6, r6, sl
 81152f2:	431e      	orrs	r6, r3
 81152f4:	d06f      	beq.n	81153d6 <_strtod_l+0xb86>
 81152f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8115330 <_strtod_l+0xae0>)
 81152f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81152fc:	f7eb fc86 	bl	8100c0c <__aeabi_dcmplt>
 8115300:	2800      	cmp	r0, #0
 8115302:	f47f accf 	bne.w	8114ca4 <_strtod_l+0x454>
 8115306:	a30c      	add	r3, pc, #48	@ (adr r3, 8115338 <_strtod_l+0xae8>)
 8115308:	e9d3 2300 	ldrd	r2, r3, [r3]
 811530c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8115310:	f7eb fc9a 	bl	8100c48 <__aeabi_dcmpgt>
 8115314:	2800      	cmp	r0, #0
 8115316:	d093      	beq.n	8115240 <_strtod_l+0x9f0>
 8115318:	e4c4      	b.n	8114ca4 <_strtod_l+0x454>
 811531a:	bf00      	nop
 811531c:	f3af 8000 	nop.w
 8115320:	00000000 	.word	0x00000000
 8115324:	bff00000 	.word	0xbff00000
 8115328:	00000000 	.word	0x00000000
 811532c:	3ff00000 	.word	0x3ff00000
 8115330:	94a03595 	.word	0x94a03595
 8115334:	3fdfffff 	.word	0x3fdfffff
 8115338:	35afe535 	.word	0x35afe535
 811533c:	3fe00000 	.word	0x3fe00000
 8115340:	000fffff 	.word	0x000fffff
 8115344:	7ff00000 	.word	0x7ff00000
 8115348:	7fefffff 	.word	0x7fefffff
 811534c:	3ff00000 	.word	0x3ff00000
 8115350:	3fe00000 	.word	0x3fe00000
 8115354:	7fe00000 	.word	0x7fe00000
 8115358:	7c9fffff 	.word	0x7c9fffff
 811535c:	9b08      	ldr	r3, [sp, #32]
 811535e:	b323      	cbz	r3, 81153aa <_strtod_l+0xb5a>
 8115360:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8115364:	d821      	bhi.n	81153aa <_strtod_l+0xb5a>
 8115366:	a328      	add	r3, pc, #160	@ (adr r3, 8115408 <_strtod_l+0xbb8>)
 8115368:	e9d3 2300 	ldrd	r2, r3, [r3]
 811536c:	4630      	mov	r0, r6
 811536e:	4639      	mov	r1, r7
 8115370:	f7eb fc56 	bl	8100c20 <__aeabi_dcmple>
 8115374:	b1a0      	cbz	r0, 81153a0 <_strtod_l+0xb50>
 8115376:	4639      	mov	r1, r7
 8115378:	4630      	mov	r0, r6
 811537a:	f7eb fcad 	bl	8100cd8 <__aeabi_d2uiz>
 811537e:	2801      	cmp	r0, #1
 8115380:	bf38      	it	cc
 8115382:	2001      	movcc	r0, #1
 8115384:	f7eb f956 	bl	8100634 <__aeabi_ui2d>
 8115388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811538a:	4606      	mov	r6, r0
 811538c:	460f      	mov	r7, r1
 811538e:	b9fb      	cbnz	r3, 81153d0 <_strtod_l+0xb80>
 8115390:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8115394:	9014      	str	r0, [sp, #80]	@ 0x50
 8115396:	9315      	str	r3, [sp, #84]	@ 0x54
 8115398:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 811539c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81153a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 81153a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 81153a6:	1b5b      	subs	r3, r3, r5
 81153a8:	9311      	str	r3, [sp, #68]	@ 0x44
 81153aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 81153ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 81153b2:	f7ff f8ef 	bl	8114594 <__ulp>
 81153b6:	4650      	mov	r0, sl
 81153b8:	ec53 2b10 	vmov	r2, r3, d0
 81153bc:	4659      	mov	r1, fp
 81153be:	f7eb f9b3 	bl	8100728 <__aeabi_dmul>
 81153c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 81153c6:	f7ea fff9 	bl	81003bc <__adddf3>
 81153ca:	4682      	mov	sl, r0
 81153cc:	468b      	mov	fp, r1
 81153ce:	e770      	b.n	81152b2 <_strtod_l+0xa62>
 81153d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 81153d4:	e7e0      	b.n	8115398 <_strtod_l+0xb48>
 81153d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8115410 <_strtod_l+0xbc0>)
 81153d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81153dc:	f7eb fc16 	bl	8100c0c <__aeabi_dcmplt>
 81153e0:	e798      	b.n	8115314 <_strtod_l+0xac4>
 81153e2:	2300      	movs	r3, #0
 81153e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 81153e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 81153e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81153ea:	6013      	str	r3, [r2, #0]
 81153ec:	f7ff ba6d 	b.w	81148ca <_strtod_l+0x7a>
 81153f0:	2a65      	cmp	r2, #101	@ 0x65
 81153f2:	f43f ab66 	beq.w	8114ac2 <_strtod_l+0x272>
 81153f6:	2a45      	cmp	r2, #69	@ 0x45
 81153f8:	f43f ab63 	beq.w	8114ac2 <_strtod_l+0x272>
 81153fc:	2301      	movs	r3, #1
 81153fe:	f7ff bb9e 	b.w	8114b3e <_strtod_l+0x2ee>
 8115402:	bf00      	nop
 8115404:	f3af 8000 	nop.w
 8115408:	ffc00000 	.word	0xffc00000
 811540c:	41dfffff 	.word	0x41dfffff
 8115410:	94a03595 	.word	0x94a03595
 8115414:	3fcfffff 	.word	0x3fcfffff

08115418 <_strtod_r>:
 8115418:	4b01      	ldr	r3, [pc, #4]	@ (8115420 <_strtod_r+0x8>)
 811541a:	f7ff ba19 	b.w	8114850 <_strtod_l>
 811541e:	bf00      	nop
 8115420:	10000118 	.word	0x10000118

08115424 <__ssputs_r>:
 8115424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8115428:	688e      	ldr	r6, [r1, #8]
 811542a:	461f      	mov	r7, r3
 811542c:	42be      	cmp	r6, r7
 811542e:	680b      	ldr	r3, [r1, #0]
 8115430:	4682      	mov	sl, r0
 8115432:	460c      	mov	r4, r1
 8115434:	4690      	mov	r8, r2
 8115436:	d82d      	bhi.n	8115494 <__ssputs_r+0x70>
 8115438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811543c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8115440:	d026      	beq.n	8115490 <__ssputs_r+0x6c>
 8115442:	6965      	ldr	r5, [r4, #20]
 8115444:	6909      	ldr	r1, [r1, #16]
 8115446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 811544a:	eba3 0901 	sub.w	r9, r3, r1
 811544e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8115452:	1c7b      	adds	r3, r7, #1
 8115454:	444b      	add	r3, r9
 8115456:	106d      	asrs	r5, r5, #1
 8115458:	429d      	cmp	r5, r3
 811545a:	bf38      	it	cc
 811545c:	461d      	movcc	r5, r3
 811545e:	0553      	lsls	r3, r2, #21
 8115460:	d527      	bpl.n	81154b2 <__ssputs_r+0x8e>
 8115462:	4629      	mov	r1, r5
 8115464:	f7fc fd0e 	bl	8111e84 <_malloc_r>
 8115468:	4606      	mov	r6, r0
 811546a:	b360      	cbz	r0, 81154c6 <__ssputs_r+0xa2>
 811546c:	6921      	ldr	r1, [r4, #16]
 811546e:	464a      	mov	r2, r9
 8115470:	f7fd fe67 	bl	8113142 <memcpy>
 8115474:	89a3      	ldrh	r3, [r4, #12]
 8115476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 811547a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811547e:	81a3      	strh	r3, [r4, #12]
 8115480:	6126      	str	r6, [r4, #16]
 8115482:	6165      	str	r5, [r4, #20]
 8115484:	444e      	add	r6, r9
 8115486:	eba5 0509 	sub.w	r5, r5, r9
 811548a:	6026      	str	r6, [r4, #0]
 811548c:	60a5      	str	r5, [r4, #8]
 811548e:	463e      	mov	r6, r7
 8115490:	42be      	cmp	r6, r7
 8115492:	d900      	bls.n	8115496 <__ssputs_r+0x72>
 8115494:	463e      	mov	r6, r7
 8115496:	6820      	ldr	r0, [r4, #0]
 8115498:	4632      	mov	r2, r6
 811549a:	4641      	mov	r1, r8
 811549c:	f000 fb9c 	bl	8115bd8 <memmove>
 81154a0:	68a3      	ldr	r3, [r4, #8]
 81154a2:	1b9b      	subs	r3, r3, r6
 81154a4:	60a3      	str	r3, [r4, #8]
 81154a6:	6823      	ldr	r3, [r4, #0]
 81154a8:	4433      	add	r3, r6
 81154aa:	6023      	str	r3, [r4, #0]
 81154ac:	2000      	movs	r0, #0
 81154ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81154b2:	462a      	mov	r2, r5
 81154b4:	f000 ff57 	bl	8116366 <_realloc_r>
 81154b8:	4606      	mov	r6, r0
 81154ba:	2800      	cmp	r0, #0
 81154bc:	d1e0      	bne.n	8115480 <__ssputs_r+0x5c>
 81154be:	6921      	ldr	r1, [r4, #16]
 81154c0:	4650      	mov	r0, sl
 81154c2:	f7fe fca9 	bl	8113e18 <_free_r>
 81154c6:	230c      	movs	r3, #12
 81154c8:	f8ca 3000 	str.w	r3, [sl]
 81154cc:	89a3      	ldrh	r3, [r4, #12]
 81154ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81154d2:	81a3      	strh	r3, [r4, #12]
 81154d4:	f04f 30ff 	mov.w	r0, #4294967295
 81154d8:	e7e9      	b.n	81154ae <__ssputs_r+0x8a>
	...

081154dc <_svfiprintf_r>:
 81154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81154e0:	4698      	mov	r8, r3
 81154e2:	898b      	ldrh	r3, [r1, #12]
 81154e4:	061b      	lsls	r3, r3, #24
 81154e6:	b09d      	sub	sp, #116	@ 0x74
 81154e8:	4607      	mov	r7, r0
 81154ea:	460d      	mov	r5, r1
 81154ec:	4614      	mov	r4, r2
 81154ee:	d510      	bpl.n	8115512 <_svfiprintf_r+0x36>
 81154f0:	690b      	ldr	r3, [r1, #16]
 81154f2:	b973      	cbnz	r3, 8115512 <_svfiprintf_r+0x36>
 81154f4:	2140      	movs	r1, #64	@ 0x40
 81154f6:	f7fc fcc5 	bl	8111e84 <_malloc_r>
 81154fa:	6028      	str	r0, [r5, #0]
 81154fc:	6128      	str	r0, [r5, #16]
 81154fe:	b930      	cbnz	r0, 811550e <_svfiprintf_r+0x32>
 8115500:	230c      	movs	r3, #12
 8115502:	603b      	str	r3, [r7, #0]
 8115504:	f04f 30ff 	mov.w	r0, #4294967295
 8115508:	b01d      	add	sp, #116	@ 0x74
 811550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811550e:	2340      	movs	r3, #64	@ 0x40
 8115510:	616b      	str	r3, [r5, #20]
 8115512:	2300      	movs	r3, #0
 8115514:	9309      	str	r3, [sp, #36]	@ 0x24
 8115516:	2320      	movs	r3, #32
 8115518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811551c:	f8cd 800c 	str.w	r8, [sp, #12]
 8115520:	2330      	movs	r3, #48	@ 0x30
 8115522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 81156c0 <_svfiprintf_r+0x1e4>
 8115526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811552a:	f04f 0901 	mov.w	r9, #1
 811552e:	4623      	mov	r3, r4
 8115530:	469a      	mov	sl, r3
 8115532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8115536:	b10a      	cbz	r2, 811553c <_svfiprintf_r+0x60>
 8115538:	2a25      	cmp	r2, #37	@ 0x25
 811553a:	d1f9      	bne.n	8115530 <_svfiprintf_r+0x54>
 811553c:	ebba 0b04 	subs.w	fp, sl, r4
 8115540:	d00b      	beq.n	811555a <_svfiprintf_r+0x7e>
 8115542:	465b      	mov	r3, fp
 8115544:	4622      	mov	r2, r4
 8115546:	4629      	mov	r1, r5
 8115548:	4638      	mov	r0, r7
 811554a:	f7ff ff6b 	bl	8115424 <__ssputs_r>
 811554e:	3001      	adds	r0, #1
 8115550:	f000 80a7 	beq.w	81156a2 <_svfiprintf_r+0x1c6>
 8115554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8115556:	445a      	add	r2, fp
 8115558:	9209      	str	r2, [sp, #36]	@ 0x24
 811555a:	f89a 3000 	ldrb.w	r3, [sl]
 811555e:	2b00      	cmp	r3, #0
 8115560:	f000 809f 	beq.w	81156a2 <_svfiprintf_r+0x1c6>
 8115564:	2300      	movs	r3, #0
 8115566:	f04f 32ff 	mov.w	r2, #4294967295
 811556a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811556e:	f10a 0a01 	add.w	sl, sl, #1
 8115572:	9304      	str	r3, [sp, #16]
 8115574:	9307      	str	r3, [sp, #28]
 8115576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811557a:	931a      	str	r3, [sp, #104]	@ 0x68
 811557c:	4654      	mov	r4, sl
 811557e:	2205      	movs	r2, #5
 8115580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115584:	484e      	ldr	r0, [pc, #312]	@ (81156c0 <_svfiprintf_r+0x1e4>)
 8115586:	f7ea febb 	bl	8100300 <memchr>
 811558a:	9a04      	ldr	r2, [sp, #16]
 811558c:	b9d8      	cbnz	r0, 81155c6 <_svfiprintf_r+0xea>
 811558e:	06d0      	lsls	r0, r2, #27
 8115590:	bf44      	itt	mi
 8115592:	2320      	movmi	r3, #32
 8115594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8115598:	0711      	lsls	r1, r2, #28
 811559a:	bf44      	itt	mi
 811559c:	232b      	movmi	r3, #43	@ 0x2b
 811559e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81155a2:	f89a 3000 	ldrb.w	r3, [sl]
 81155a6:	2b2a      	cmp	r3, #42	@ 0x2a
 81155a8:	d015      	beq.n	81155d6 <_svfiprintf_r+0xfa>
 81155aa:	9a07      	ldr	r2, [sp, #28]
 81155ac:	4654      	mov	r4, sl
 81155ae:	2000      	movs	r0, #0
 81155b0:	f04f 0c0a 	mov.w	ip, #10
 81155b4:	4621      	mov	r1, r4
 81155b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 81155ba:	3b30      	subs	r3, #48	@ 0x30
 81155bc:	2b09      	cmp	r3, #9
 81155be:	d94b      	bls.n	8115658 <_svfiprintf_r+0x17c>
 81155c0:	b1b0      	cbz	r0, 81155f0 <_svfiprintf_r+0x114>
 81155c2:	9207      	str	r2, [sp, #28]
 81155c4:	e014      	b.n	81155f0 <_svfiprintf_r+0x114>
 81155c6:	eba0 0308 	sub.w	r3, r0, r8
 81155ca:	fa09 f303 	lsl.w	r3, r9, r3
 81155ce:	4313      	orrs	r3, r2
 81155d0:	9304      	str	r3, [sp, #16]
 81155d2:	46a2      	mov	sl, r4
 81155d4:	e7d2      	b.n	811557c <_svfiprintf_r+0xa0>
 81155d6:	9b03      	ldr	r3, [sp, #12]
 81155d8:	1d19      	adds	r1, r3, #4
 81155da:	681b      	ldr	r3, [r3, #0]
 81155dc:	9103      	str	r1, [sp, #12]
 81155de:	2b00      	cmp	r3, #0
 81155e0:	bfbb      	ittet	lt
 81155e2:	425b      	neglt	r3, r3
 81155e4:	f042 0202 	orrlt.w	r2, r2, #2
 81155e8:	9307      	strge	r3, [sp, #28]
 81155ea:	9307      	strlt	r3, [sp, #28]
 81155ec:	bfb8      	it	lt
 81155ee:	9204      	strlt	r2, [sp, #16]
 81155f0:	7823      	ldrb	r3, [r4, #0]
 81155f2:	2b2e      	cmp	r3, #46	@ 0x2e
 81155f4:	d10a      	bne.n	811560c <_svfiprintf_r+0x130>
 81155f6:	7863      	ldrb	r3, [r4, #1]
 81155f8:	2b2a      	cmp	r3, #42	@ 0x2a
 81155fa:	d132      	bne.n	8115662 <_svfiprintf_r+0x186>
 81155fc:	9b03      	ldr	r3, [sp, #12]
 81155fe:	1d1a      	adds	r2, r3, #4
 8115600:	681b      	ldr	r3, [r3, #0]
 8115602:	9203      	str	r2, [sp, #12]
 8115604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8115608:	3402      	adds	r4, #2
 811560a:	9305      	str	r3, [sp, #20]
 811560c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 81156d0 <_svfiprintf_r+0x1f4>
 8115610:	7821      	ldrb	r1, [r4, #0]
 8115612:	2203      	movs	r2, #3
 8115614:	4650      	mov	r0, sl
 8115616:	f7ea fe73 	bl	8100300 <memchr>
 811561a:	b138      	cbz	r0, 811562c <_svfiprintf_r+0x150>
 811561c:	9b04      	ldr	r3, [sp, #16]
 811561e:	eba0 000a 	sub.w	r0, r0, sl
 8115622:	2240      	movs	r2, #64	@ 0x40
 8115624:	4082      	lsls	r2, r0
 8115626:	4313      	orrs	r3, r2
 8115628:	3401      	adds	r4, #1
 811562a:	9304      	str	r3, [sp, #16]
 811562c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115630:	4824      	ldr	r0, [pc, #144]	@ (81156c4 <_svfiprintf_r+0x1e8>)
 8115632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8115636:	2206      	movs	r2, #6
 8115638:	f7ea fe62 	bl	8100300 <memchr>
 811563c:	2800      	cmp	r0, #0
 811563e:	d036      	beq.n	81156ae <_svfiprintf_r+0x1d2>
 8115640:	4b21      	ldr	r3, [pc, #132]	@ (81156c8 <_svfiprintf_r+0x1ec>)
 8115642:	bb1b      	cbnz	r3, 811568c <_svfiprintf_r+0x1b0>
 8115644:	9b03      	ldr	r3, [sp, #12]
 8115646:	3307      	adds	r3, #7
 8115648:	f023 0307 	bic.w	r3, r3, #7
 811564c:	3308      	adds	r3, #8
 811564e:	9303      	str	r3, [sp, #12]
 8115650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8115652:	4433      	add	r3, r6
 8115654:	9309      	str	r3, [sp, #36]	@ 0x24
 8115656:	e76a      	b.n	811552e <_svfiprintf_r+0x52>
 8115658:	fb0c 3202 	mla	r2, ip, r2, r3
 811565c:	460c      	mov	r4, r1
 811565e:	2001      	movs	r0, #1
 8115660:	e7a8      	b.n	81155b4 <_svfiprintf_r+0xd8>
 8115662:	2300      	movs	r3, #0
 8115664:	3401      	adds	r4, #1
 8115666:	9305      	str	r3, [sp, #20]
 8115668:	4619      	mov	r1, r3
 811566a:	f04f 0c0a 	mov.w	ip, #10
 811566e:	4620      	mov	r0, r4
 8115670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8115674:	3a30      	subs	r2, #48	@ 0x30
 8115676:	2a09      	cmp	r2, #9
 8115678:	d903      	bls.n	8115682 <_svfiprintf_r+0x1a6>
 811567a:	2b00      	cmp	r3, #0
 811567c:	d0c6      	beq.n	811560c <_svfiprintf_r+0x130>
 811567e:	9105      	str	r1, [sp, #20]
 8115680:	e7c4      	b.n	811560c <_svfiprintf_r+0x130>
 8115682:	fb0c 2101 	mla	r1, ip, r1, r2
 8115686:	4604      	mov	r4, r0
 8115688:	2301      	movs	r3, #1
 811568a:	e7f0      	b.n	811566e <_svfiprintf_r+0x192>
 811568c:	ab03      	add	r3, sp, #12
 811568e:	9300      	str	r3, [sp, #0]
 8115690:	462a      	mov	r2, r5
 8115692:	4b0e      	ldr	r3, [pc, #56]	@ (81156cc <_svfiprintf_r+0x1f0>)
 8115694:	a904      	add	r1, sp, #16
 8115696:	4638      	mov	r0, r7
 8115698:	f7fc fd9c 	bl	81121d4 <_printf_float>
 811569c:	1c42      	adds	r2, r0, #1
 811569e:	4606      	mov	r6, r0
 81156a0:	d1d6      	bne.n	8115650 <_svfiprintf_r+0x174>
 81156a2:	89ab      	ldrh	r3, [r5, #12]
 81156a4:	065b      	lsls	r3, r3, #25
 81156a6:	f53f af2d 	bmi.w	8115504 <_svfiprintf_r+0x28>
 81156aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81156ac:	e72c      	b.n	8115508 <_svfiprintf_r+0x2c>
 81156ae:	ab03      	add	r3, sp, #12
 81156b0:	9300      	str	r3, [sp, #0]
 81156b2:	462a      	mov	r2, r5
 81156b4:	4b05      	ldr	r3, [pc, #20]	@ (81156cc <_svfiprintf_r+0x1f0>)
 81156b6:	a904      	add	r1, sp, #16
 81156b8:	4638      	mov	r0, r7
 81156ba:	f7fd f823 	bl	8112704 <_printf_i>
 81156be:	e7ed      	b.n	811569c <_svfiprintf_r+0x1c0>
 81156c0:	08117c00 	.word	0x08117c00
 81156c4:	08117c0a 	.word	0x08117c0a
 81156c8:	081121d5 	.word	0x081121d5
 81156cc:	08115425 	.word	0x08115425
 81156d0:	08117c06 	.word	0x08117c06

081156d4 <__sfputc_r>:
 81156d4:	6893      	ldr	r3, [r2, #8]
 81156d6:	3b01      	subs	r3, #1
 81156d8:	2b00      	cmp	r3, #0
 81156da:	b410      	push	{r4}
 81156dc:	6093      	str	r3, [r2, #8]
 81156de:	da08      	bge.n	81156f2 <__sfputc_r+0x1e>
 81156e0:	6994      	ldr	r4, [r2, #24]
 81156e2:	42a3      	cmp	r3, r4
 81156e4:	db01      	blt.n	81156ea <__sfputc_r+0x16>
 81156e6:	290a      	cmp	r1, #10
 81156e8:	d103      	bne.n	81156f2 <__sfputc_r+0x1e>
 81156ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 81156ee:	f000 b9df 	b.w	8115ab0 <__swbuf_r>
 81156f2:	6813      	ldr	r3, [r2, #0]
 81156f4:	1c58      	adds	r0, r3, #1
 81156f6:	6010      	str	r0, [r2, #0]
 81156f8:	7019      	strb	r1, [r3, #0]
 81156fa:	4608      	mov	r0, r1
 81156fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8115700:	4770      	bx	lr

08115702 <__sfputs_r>:
 8115702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8115704:	4606      	mov	r6, r0
 8115706:	460f      	mov	r7, r1
 8115708:	4614      	mov	r4, r2
 811570a:	18d5      	adds	r5, r2, r3
 811570c:	42ac      	cmp	r4, r5
 811570e:	d101      	bne.n	8115714 <__sfputs_r+0x12>
 8115710:	2000      	movs	r0, #0
 8115712:	e007      	b.n	8115724 <__sfputs_r+0x22>
 8115714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115718:	463a      	mov	r2, r7
 811571a:	4630      	mov	r0, r6
 811571c:	f7ff ffda 	bl	81156d4 <__sfputc_r>
 8115720:	1c43      	adds	r3, r0, #1
 8115722:	d1f3      	bne.n	811570c <__sfputs_r+0xa>
 8115724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08115728 <_vfiprintf_r>:
 8115728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811572c:	460d      	mov	r5, r1
 811572e:	b09d      	sub	sp, #116	@ 0x74
 8115730:	4614      	mov	r4, r2
 8115732:	4698      	mov	r8, r3
 8115734:	4606      	mov	r6, r0
 8115736:	b118      	cbz	r0, 8115740 <_vfiprintf_r+0x18>
 8115738:	6a03      	ldr	r3, [r0, #32]
 811573a:	b90b      	cbnz	r3, 8115740 <_vfiprintf_r+0x18>
 811573c:	f7fd fba2 	bl	8112e84 <__sinit>
 8115740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115742:	07d9      	lsls	r1, r3, #31
 8115744:	d405      	bmi.n	8115752 <_vfiprintf_r+0x2a>
 8115746:	89ab      	ldrh	r3, [r5, #12]
 8115748:	059a      	lsls	r2, r3, #22
 811574a:	d402      	bmi.n	8115752 <_vfiprintf_r+0x2a>
 811574c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811574e:	f7fd fcf6 	bl	811313e <__retarget_lock_acquire_recursive>
 8115752:	89ab      	ldrh	r3, [r5, #12]
 8115754:	071b      	lsls	r3, r3, #28
 8115756:	d501      	bpl.n	811575c <_vfiprintf_r+0x34>
 8115758:	692b      	ldr	r3, [r5, #16]
 811575a:	b99b      	cbnz	r3, 8115784 <_vfiprintf_r+0x5c>
 811575c:	4629      	mov	r1, r5
 811575e:	4630      	mov	r0, r6
 8115760:	f000 f9e4 	bl	8115b2c <__swsetup_r>
 8115764:	b170      	cbz	r0, 8115784 <_vfiprintf_r+0x5c>
 8115766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115768:	07dc      	lsls	r4, r3, #31
 811576a:	d504      	bpl.n	8115776 <_vfiprintf_r+0x4e>
 811576c:	f04f 30ff 	mov.w	r0, #4294967295
 8115770:	b01d      	add	sp, #116	@ 0x74
 8115772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115776:	89ab      	ldrh	r3, [r5, #12]
 8115778:	0598      	lsls	r0, r3, #22
 811577a:	d4f7      	bmi.n	811576c <_vfiprintf_r+0x44>
 811577c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811577e:	f7fd fcdf 	bl	8113140 <__retarget_lock_release_recursive>
 8115782:	e7f3      	b.n	811576c <_vfiprintf_r+0x44>
 8115784:	2300      	movs	r3, #0
 8115786:	9309      	str	r3, [sp, #36]	@ 0x24
 8115788:	2320      	movs	r3, #32
 811578a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811578e:	f8cd 800c 	str.w	r8, [sp, #12]
 8115792:	2330      	movs	r3, #48	@ 0x30
 8115794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8115944 <_vfiprintf_r+0x21c>
 8115798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811579c:	f04f 0901 	mov.w	r9, #1
 81157a0:	4623      	mov	r3, r4
 81157a2:	469a      	mov	sl, r3
 81157a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 81157a8:	b10a      	cbz	r2, 81157ae <_vfiprintf_r+0x86>
 81157aa:	2a25      	cmp	r2, #37	@ 0x25
 81157ac:	d1f9      	bne.n	81157a2 <_vfiprintf_r+0x7a>
 81157ae:	ebba 0b04 	subs.w	fp, sl, r4
 81157b2:	d00b      	beq.n	81157cc <_vfiprintf_r+0xa4>
 81157b4:	465b      	mov	r3, fp
 81157b6:	4622      	mov	r2, r4
 81157b8:	4629      	mov	r1, r5
 81157ba:	4630      	mov	r0, r6
 81157bc:	f7ff ffa1 	bl	8115702 <__sfputs_r>
 81157c0:	3001      	adds	r0, #1
 81157c2:	f000 80a7 	beq.w	8115914 <_vfiprintf_r+0x1ec>
 81157c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81157c8:	445a      	add	r2, fp
 81157ca:	9209      	str	r2, [sp, #36]	@ 0x24
 81157cc:	f89a 3000 	ldrb.w	r3, [sl]
 81157d0:	2b00      	cmp	r3, #0
 81157d2:	f000 809f 	beq.w	8115914 <_vfiprintf_r+0x1ec>
 81157d6:	2300      	movs	r3, #0
 81157d8:	f04f 32ff 	mov.w	r2, #4294967295
 81157dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81157e0:	f10a 0a01 	add.w	sl, sl, #1
 81157e4:	9304      	str	r3, [sp, #16]
 81157e6:	9307      	str	r3, [sp, #28]
 81157e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81157ec:	931a      	str	r3, [sp, #104]	@ 0x68
 81157ee:	4654      	mov	r4, sl
 81157f0:	2205      	movs	r2, #5
 81157f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 81157f6:	4853      	ldr	r0, [pc, #332]	@ (8115944 <_vfiprintf_r+0x21c>)
 81157f8:	f7ea fd82 	bl	8100300 <memchr>
 81157fc:	9a04      	ldr	r2, [sp, #16]
 81157fe:	b9d8      	cbnz	r0, 8115838 <_vfiprintf_r+0x110>
 8115800:	06d1      	lsls	r1, r2, #27
 8115802:	bf44      	itt	mi
 8115804:	2320      	movmi	r3, #32
 8115806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811580a:	0713      	lsls	r3, r2, #28
 811580c:	bf44      	itt	mi
 811580e:	232b      	movmi	r3, #43	@ 0x2b
 8115810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8115814:	f89a 3000 	ldrb.w	r3, [sl]
 8115818:	2b2a      	cmp	r3, #42	@ 0x2a
 811581a:	d015      	beq.n	8115848 <_vfiprintf_r+0x120>
 811581c:	9a07      	ldr	r2, [sp, #28]
 811581e:	4654      	mov	r4, sl
 8115820:	2000      	movs	r0, #0
 8115822:	f04f 0c0a 	mov.w	ip, #10
 8115826:	4621      	mov	r1, r4
 8115828:	f811 3b01 	ldrb.w	r3, [r1], #1
 811582c:	3b30      	subs	r3, #48	@ 0x30
 811582e:	2b09      	cmp	r3, #9
 8115830:	d94b      	bls.n	81158ca <_vfiprintf_r+0x1a2>
 8115832:	b1b0      	cbz	r0, 8115862 <_vfiprintf_r+0x13a>
 8115834:	9207      	str	r2, [sp, #28]
 8115836:	e014      	b.n	8115862 <_vfiprintf_r+0x13a>
 8115838:	eba0 0308 	sub.w	r3, r0, r8
 811583c:	fa09 f303 	lsl.w	r3, r9, r3
 8115840:	4313      	orrs	r3, r2
 8115842:	9304      	str	r3, [sp, #16]
 8115844:	46a2      	mov	sl, r4
 8115846:	e7d2      	b.n	81157ee <_vfiprintf_r+0xc6>
 8115848:	9b03      	ldr	r3, [sp, #12]
 811584a:	1d19      	adds	r1, r3, #4
 811584c:	681b      	ldr	r3, [r3, #0]
 811584e:	9103      	str	r1, [sp, #12]
 8115850:	2b00      	cmp	r3, #0
 8115852:	bfbb      	ittet	lt
 8115854:	425b      	neglt	r3, r3
 8115856:	f042 0202 	orrlt.w	r2, r2, #2
 811585a:	9307      	strge	r3, [sp, #28]
 811585c:	9307      	strlt	r3, [sp, #28]
 811585e:	bfb8      	it	lt
 8115860:	9204      	strlt	r2, [sp, #16]
 8115862:	7823      	ldrb	r3, [r4, #0]
 8115864:	2b2e      	cmp	r3, #46	@ 0x2e
 8115866:	d10a      	bne.n	811587e <_vfiprintf_r+0x156>
 8115868:	7863      	ldrb	r3, [r4, #1]
 811586a:	2b2a      	cmp	r3, #42	@ 0x2a
 811586c:	d132      	bne.n	81158d4 <_vfiprintf_r+0x1ac>
 811586e:	9b03      	ldr	r3, [sp, #12]
 8115870:	1d1a      	adds	r2, r3, #4
 8115872:	681b      	ldr	r3, [r3, #0]
 8115874:	9203      	str	r2, [sp, #12]
 8115876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811587a:	3402      	adds	r4, #2
 811587c:	9305      	str	r3, [sp, #20]
 811587e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8115954 <_vfiprintf_r+0x22c>
 8115882:	7821      	ldrb	r1, [r4, #0]
 8115884:	2203      	movs	r2, #3
 8115886:	4650      	mov	r0, sl
 8115888:	f7ea fd3a 	bl	8100300 <memchr>
 811588c:	b138      	cbz	r0, 811589e <_vfiprintf_r+0x176>
 811588e:	9b04      	ldr	r3, [sp, #16]
 8115890:	eba0 000a 	sub.w	r0, r0, sl
 8115894:	2240      	movs	r2, #64	@ 0x40
 8115896:	4082      	lsls	r2, r0
 8115898:	4313      	orrs	r3, r2
 811589a:	3401      	adds	r4, #1
 811589c:	9304      	str	r3, [sp, #16]
 811589e:	f814 1b01 	ldrb.w	r1, [r4], #1
 81158a2:	4829      	ldr	r0, [pc, #164]	@ (8115948 <_vfiprintf_r+0x220>)
 81158a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81158a8:	2206      	movs	r2, #6
 81158aa:	f7ea fd29 	bl	8100300 <memchr>
 81158ae:	2800      	cmp	r0, #0
 81158b0:	d03f      	beq.n	8115932 <_vfiprintf_r+0x20a>
 81158b2:	4b26      	ldr	r3, [pc, #152]	@ (811594c <_vfiprintf_r+0x224>)
 81158b4:	bb1b      	cbnz	r3, 81158fe <_vfiprintf_r+0x1d6>
 81158b6:	9b03      	ldr	r3, [sp, #12]
 81158b8:	3307      	adds	r3, #7
 81158ba:	f023 0307 	bic.w	r3, r3, #7
 81158be:	3308      	adds	r3, #8
 81158c0:	9303      	str	r3, [sp, #12]
 81158c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81158c4:	443b      	add	r3, r7
 81158c6:	9309      	str	r3, [sp, #36]	@ 0x24
 81158c8:	e76a      	b.n	81157a0 <_vfiprintf_r+0x78>
 81158ca:	fb0c 3202 	mla	r2, ip, r2, r3
 81158ce:	460c      	mov	r4, r1
 81158d0:	2001      	movs	r0, #1
 81158d2:	e7a8      	b.n	8115826 <_vfiprintf_r+0xfe>
 81158d4:	2300      	movs	r3, #0
 81158d6:	3401      	adds	r4, #1
 81158d8:	9305      	str	r3, [sp, #20]
 81158da:	4619      	mov	r1, r3
 81158dc:	f04f 0c0a 	mov.w	ip, #10
 81158e0:	4620      	mov	r0, r4
 81158e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81158e6:	3a30      	subs	r2, #48	@ 0x30
 81158e8:	2a09      	cmp	r2, #9
 81158ea:	d903      	bls.n	81158f4 <_vfiprintf_r+0x1cc>
 81158ec:	2b00      	cmp	r3, #0
 81158ee:	d0c6      	beq.n	811587e <_vfiprintf_r+0x156>
 81158f0:	9105      	str	r1, [sp, #20]
 81158f2:	e7c4      	b.n	811587e <_vfiprintf_r+0x156>
 81158f4:	fb0c 2101 	mla	r1, ip, r1, r2
 81158f8:	4604      	mov	r4, r0
 81158fa:	2301      	movs	r3, #1
 81158fc:	e7f0      	b.n	81158e0 <_vfiprintf_r+0x1b8>
 81158fe:	ab03      	add	r3, sp, #12
 8115900:	9300      	str	r3, [sp, #0]
 8115902:	462a      	mov	r2, r5
 8115904:	4b12      	ldr	r3, [pc, #72]	@ (8115950 <_vfiprintf_r+0x228>)
 8115906:	a904      	add	r1, sp, #16
 8115908:	4630      	mov	r0, r6
 811590a:	f7fc fc63 	bl	81121d4 <_printf_float>
 811590e:	4607      	mov	r7, r0
 8115910:	1c78      	adds	r0, r7, #1
 8115912:	d1d6      	bne.n	81158c2 <_vfiprintf_r+0x19a>
 8115914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115916:	07d9      	lsls	r1, r3, #31
 8115918:	d405      	bmi.n	8115926 <_vfiprintf_r+0x1fe>
 811591a:	89ab      	ldrh	r3, [r5, #12]
 811591c:	059a      	lsls	r2, r3, #22
 811591e:	d402      	bmi.n	8115926 <_vfiprintf_r+0x1fe>
 8115920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8115922:	f7fd fc0d 	bl	8113140 <__retarget_lock_release_recursive>
 8115926:	89ab      	ldrh	r3, [r5, #12]
 8115928:	065b      	lsls	r3, r3, #25
 811592a:	f53f af1f 	bmi.w	811576c <_vfiprintf_r+0x44>
 811592e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8115930:	e71e      	b.n	8115770 <_vfiprintf_r+0x48>
 8115932:	ab03      	add	r3, sp, #12
 8115934:	9300      	str	r3, [sp, #0]
 8115936:	462a      	mov	r2, r5
 8115938:	4b05      	ldr	r3, [pc, #20]	@ (8115950 <_vfiprintf_r+0x228>)
 811593a:	a904      	add	r1, sp, #16
 811593c:	4630      	mov	r0, r6
 811593e:	f7fc fee1 	bl	8112704 <_printf_i>
 8115942:	e7e4      	b.n	811590e <_vfiprintf_r+0x1e6>
 8115944:	08117c00 	.word	0x08117c00
 8115948:	08117c0a 	.word	0x08117c0a
 811594c:	081121d5 	.word	0x081121d5
 8115950:	08115703 	.word	0x08115703
 8115954:	08117c06 	.word	0x08117c06

08115958 <__sflush_r>:
 8115958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115960:	0716      	lsls	r6, r2, #28
 8115962:	4605      	mov	r5, r0
 8115964:	460c      	mov	r4, r1
 8115966:	d454      	bmi.n	8115a12 <__sflush_r+0xba>
 8115968:	684b      	ldr	r3, [r1, #4]
 811596a:	2b00      	cmp	r3, #0
 811596c:	dc02      	bgt.n	8115974 <__sflush_r+0x1c>
 811596e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8115970:	2b00      	cmp	r3, #0
 8115972:	dd48      	ble.n	8115a06 <__sflush_r+0xae>
 8115974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8115976:	2e00      	cmp	r6, #0
 8115978:	d045      	beq.n	8115a06 <__sflush_r+0xae>
 811597a:	2300      	movs	r3, #0
 811597c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8115980:	682f      	ldr	r7, [r5, #0]
 8115982:	6a21      	ldr	r1, [r4, #32]
 8115984:	602b      	str	r3, [r5, #0]
 8115986:	d030      	beq.n	81159ea <__sflush_r+0x92>
 8115988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811598a:	89a3      	ldrh	r3, [r4, #12]
 811598c:	0759      	lsls	r1, r3, #29
 811598e:	d505      	bpl.n	811599c <__sflush_r+0x44>
 8115990:	6863      	ldr	r3, [r4, #4]
 8115992:	1ad2      	subs	r2, r2, r3
 8115994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8115996:	b10b      	cbz	r3, 811599c <__sflush_r+0x44>
 8115998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811599a:	1ad2      	subs	r2, r2, r3
 811599c:	2300      	movs	r3, #0
 811599e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81159a0:	6a21      	ldr	r1, [r4, #32]
 81159a2:	4628      	mov	r0, r5
 81159a4:	47b0      	blx	r6
 81159a6:	1c43      	adds	r3, r0, #1
 81159a8:	89a3      	ldrh	r3, [r4, #12]
 81159aa:	d106      	bne.n	81159ba <__sflush_r+0x62>
 81159ac:	6829      	ldr	r1, [r5, #0]
 81159ae:	291d      	cmp	r1, #29
 81159b0:	d82b      	bhi.n	8115a0a <__sflush_r+0xb2>
 81159b2:	4a2a      	ldr	r2, [pc, #168]	@ (8115a5c <__sflush_r+0x104>)
 81159b4:	410a      	asrs	r2, r1
 81159b6:	07d6      	lsls	r6, r2, #31
 81159b8:	d427      	bmi.n	8115a0a <__sflush_r+0xb2>
 81159ba:	2200      	movs	r2, #0
 81159bc:	6062      	str	r2, [r4, #4]
 81159be:	04d9      	lsls	r1, r3, #19
 81159c0:	6922      	ldr	r2, [r4, #16]
 81159c2:	6022      	str	r2, [r4, #0]
 81159c4:	d504      	bpl.n	81159d0 <__sflush_r+0x78>
 81159c6:	1c42      	adds	r2, r0, #1
 81159c8:	d101      	bne.n	81159ce <__sflush_r+0x76>
 81159ca:	682b      	ldr	r3, [r5, #0]
 81159cc:	b903      	cbnz	r3, 81159d0 <__sflush_r+0x78>
 81159ce:	6560      	str	r0, [r4, #84]	@ 0x54
 81159d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81159d2:	602f      	str	r7, [r5, #0]
 81159d4:	b1b9      	cbz	r1, 8115a06 <__sflush_r+0xae>
 81159d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81159da:	4299      	cmp	r1, r3
 81159dc:	d002      	beq.n	81159e4 <__sflush_r+0x8c>
 81159de:	4628      	mov	r0, r5
 81159e0:	f7fe fa1a 	bl	8113e18 <_free_r>
 81159e4:	2300      	movs	r3, #0
 81159e6:	6363      	str	r3, [r4, #52]	@ 0x34
 81159e8:	e00d      	b.n	8115a06 <__sflush_r+0xae>
 81159ea:	2301      	movs	r3, #1
 81159ec:	4628      	mov	r0, r5
 81159ee:	47b0      	blx	r6
 81159f0:	4602      	mov	r2, r0
 81159f2:	1c50      	adds	r0, r2, #1
 81159f4:	d1c9      	bne.n	811598a <__sflush_r+0x32>
 81159f6:	682b      	ldr	r3, [r5, #0]
 81159f8:	2b00      	cmp	r3, #0
 81159fa:	d0c6      	beq.n	811598a <__sflush_r+0x32>
 81159fc:	2b1d      	cmp	r3, #29
 81159fe:	d001      	beq.n	8115a04 <__sflush_r+0xac>
 8115a00:	2b16      	cmp	r3, #22
 8115a02:	d11e      	bne.n	8115a42 <__sflush_r+0xea>
 8115a04:	602f      	str	r7, [r5, #0]
 8115a06:	2000      	movs	r0, #0
 8115a08:	e022      	b.n	8115a50 <__sflush_r+0xf8>
 8115a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115a0e:	b21b      	sxth	r3, r3
 8115a10:	e01b      	b.n	8115a4a <__sflush_r+0xf2>
 8115a12:	690f      	ldr	r7, [r1, #16]
 8115a14:	2f00      	cmp	r7, #0
 8115a16:	d0f6      	beq.n	8115a06 <__sflush_r+0xae>
 8115a18:	0793      	lsls	r3, r2, #30
 8115a1a:	680e      	ldr	r6, [r1, #0]
 8115a1c:	bf08      	it	eq
 8115a1e:	694b      	ldreq	r3, [r1, #20]
 8115a20:	600f      	str	r7, [r1, #0]
 8115a22:	bf18      	it	ne
 8115a24:	2300      	movne	r3, #0
 8115a26:	eba6 0807 	sub.w	r8, r6, r7
 8115a2a:	608b      	str	r3, [r1, #8]
 8115a2c:	f1b8 0f00 	cmp.w	r8, #0
 8115a30:	dde9      	ble.n	8115a06 <__sflush_r+0xae>
 8115a32:	6a21      	ldr	r1, [r4, #32]
 8115a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8115a36:	4643      	mov	r3, r8
 8115a38:	463a      	mov	r2, r7
 8115a3a:	4628      	mov	r0, r5
 8115a3c:	47b0      	blx	r6
 8115a3e:	2800      	cmp	r0, #0
 8115a40:	dc08      	bgt.n	8115a54 <__sflush_r+0xfc>
 8115a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115a4a:	81a3      	strh	r3, [r4, #12]
 8115a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8115a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8115a54:	4407      	add	r7, r0
 8115a56:	eba8 0800 	sub.w	r8, r8, r0
 8115a5a:	e7e7      	b.n	8115a2c <__sflush_r+0xd4>
 8115a5c:	dfbffffe 	.word	0xdfbffffe

08115a60 <_fflush_r>:
 8115a60:	b538      	push	{r3, r4, r5, lr}
 8115a62:	690b      	ldr	r3, [r1, #16]
 8115a64:	4605      	mov	r5, r0
 8115a66:	460c      	mov	r4, r1
 8115a68:	b913      	cbnz	r3, 8115a70 <_fflush_r+0x10>
 8115a6a:	2500      	movs	r5, #0
 8115a6c:	4628      	mov	r0, r5
 8115a6e:	bd38      	pop	{r3, r4, r5, pc}
 8115a70:	b118      	cbz	r0, 8115a7a <_fflush_r+0x1a>
 8115a72:	6a03      	ldr	r3, [r0, #32]
 8115a74:	b90b      	cbnz	r3, 8115a7a <_fflush_r+0x1a>
 8115a76:	f7fd fa05 	bl	8112e84 <__sinit>
 8115a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115a7e:	2b00      	cmp	r3, #0
 8115a80:	d0f3      	beq.n	8115a6a <_fflush_r+0xa>
 8115a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8115a84:	07d0      	lsls	r0, r2, #31
 8115a86:	d404      	bmi.n	8115a92 <_fflush_r+0x32>
 8115a88:	0599      	lsls	r1, r3, #22
 8115a8a:	d402      	bmi.n	8115a92 <_fflush_r+0x32>
 8115a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8115a8e:	f7fd fb56 	bl	811313e <__retarget_lock_acquire_recursive>
 8115a92:	4628      	mov	r0, r5
 8115a94:	4621      	mov	r1, r4
 8115a96:	f7ff ff5f 	bl	8115958 <__sflush_r>
 8115a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8115a9c:	07da      	lsls	r2, r3, #31
 8115a9e:	4605      	mov	r5, r0
 8115aa0:	d4e4      	bmi.n	8115a6c <_fflush_r+0xc>
 8115aa2:	89a3      	ldrh	r3, [r4, #12]
 8115aa4:	059b      	lsls	r3, r3, #22
 8115aa6:	d4e1      	bmi.n	8115a6c <_fflush_r+0xc>
 8115aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8115aaa:	f7fd fb49 	bl	8113140 <__retarget_lock_release_recursive>
 8115aae:	e7dd      	b.n	8115a6c <_fflush_r+0xc>

08115ab0 <__swbuf_r>:
 8115ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8115ab2:	460e      	mov	r6, r1
 8115ab4:	4614      	mov	r4, r2
 8115ab6:	4605      	mov	r5, r0
 8115ab8:	b118      	cbz	r0, 8115ac2 <__swbuf_r+0x12>
 8115aba:	6a03      	ldr	r3, [r0, #32]
 8115abc:	b90b      	cbnz	r3, 8115ac2 <__swbuf_r+0x12>
 8115abe:	f7fd f9e1 	bl	8112e84 <__sinit>
 8115ac2:	69a3      	ldr	r3, [r4, #24]
 8115ac4:	60a3      	str	r3, [r4, #8]
 8115ac6:	89a3      	ldrh	r3, [r4, #12]
 8115ac8:	071a      	lsls	r2, r3, #28
 8115aca:	d501      	bpl.n	8115ad0 <__swbuf_r+0x20>
 8115acc:	6923      	ldr	r3, [r4, #16]
 8115ace:	b943      	cbnz	r3, 8115ae2 <__swbuf_r+0x32>
 8115ad0:	4621      	mov	r1, r4
 8115ad2:	4628      	mov	r0, r5
 8115ad4:	f000 f82a 	bl	8115b2c <__swsetup_r>
 8115ad8:	b118      	cbz	r0, 8115ae2 <__swbuf_r+0x32>
 8115ada:	f04f 37ff 	mov.w	r7, #4294967295
 8115ade:	4638      	mov	r0, r7
 8115ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8115ae2:	6823      	ldr	r3, [r4, #0]
 8115ae4:	6922      	ldr	r2, [r4, #16]
 8115ae6:	1a98      	subs	r0, r3, r2
 8115ae8:	6963      	ldr	r3, [r4, #20]
 8115aea:	b2f6      	uxtb	r6, r6
 8115aec:	4283      	cmp	r3, r0
 8115aee:	4637      	mov	r7, r6
 8115af0:	dc05      	bgt.n	8115afe <__swbuf_r+0x4e>
 8115af2:	4621      	mov	r1, r4
 8115af4:	4628      	mov	r0, r5
 8115af6:	f7ff ffb3 	bl	8115a60 <_fflush_r>
 8115afa:	2800      	cmp	r0, #0
 8115afc:	d1ed      	bne.n	8115ada <__swbuf_r+0x2a>
 8115afe:	68a3      	ldr	r3, [r4, #8]
 8115b00:	3b01      	subs	r3, #1
 8115b02:	60a3      	str	r3, [r4, #8]
 8115b04:	6823      	ldr	r3, [r4, #0]
 8115b06:	1c5a      	adds	r2, r3, #1
 8115b08:	6022      	str	r2, [r4, #0]
 8115b0a:	701e      	strb	r6, [r3, #0]
 8115b0c:	6962      	ldr	r2, [r4, #20]
 8115b0e:	1c43      	adds	r3, r0, #1
 8115b10:	429a      	cmp	r2, r3
 8115b12:	d004      	beq.n	8115b1e <__swbuf_r+0x6e>
 8115b14:	89a3      	ldrh	r3, [r4, #12]
 8115b16:	07db      	lsls	r3, r3, #31
 8115b18:	d5e1      	bpl.n	8115ade <__swbuf_r+0x2e>
 8115b1a:	2e0a      	cmp	r6, #10
 8115b1c:	d1df      	bne.n	8115ade <__swbuf_r+0x2e>
 8115b1e:	4621      	mov	r1, r4
 8115b20:	4628      	mov	r0, r5
 8115b22:	f7ff ff9d 	bl	8115a60 <_fflush_r>
 8115b26:	2800      	cmp	r0, #0
 8115b28:	d0d9      	beq.n	8115ade <__swbuf_r+0x2e>
 8115b2a:	e7d6      	b.n	8115ada <__swbuf_r+0x2a>

08115b2c <__swsetup_r>:
 8115b2c:	b538      	push	{r3, r4, r5, lr}
 8115b2e:	4b29      	ldr	r3, [pc, #164]	@ (8115bd4 <__swsetup_r+0xa8>)
 8115b30:	4605      	mov	r5, r0
 8115b32:	6818      	ldr	r0, [r3, #0]
 8115b34:	460c      	mov	r4, r1
 8115b36:	b118      	cbz	r0, 8115b40 <__swsetup_r+0x14>
 8115b38:	6a03      	ldr	r3, [r0, #32]
 8115b3a:	b90b      	cbnz	r3, 8115b40 <__swsetup_r+0x14>
 8115b3c:	f7fd f9a2 	bl	8112e84 <__sinit>
 8115b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115b44:	0719      	lsls	r1, r3, #28
 8115b46:	d422      	bmi.n	8115b8e <__swsetup_r+0x62>
 8115b48:	06da      	lsls	r2, r3, #27
 8115b4a:	d407      	bmi.n	8115b5c <__swsetup_r+0x30>
 8115b4c:	2209      	movs	r2, #9
 8115b4e:	602a      	str	r2, [r5, #0]
 8115b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115b54:	81a3      	strh	r3, [r4, #12]
 8115b56:	f04f 30ff 	mov.w	r0, #4294967295
 8115b5a:	e033      	b.n	8115bc4 <__swsetup_r+0x98>
 8115b5c:	0758      	lsls	r0, r3, #29
 8115b5e:	d512      	bpl.n	8115b86 <__swsetup_r+0x5a>
 8115b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8115b62:	b141      	cbz	r1, 8115b76 <__swsetup_r+0x4a>
 8115b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8115b68:	4299      	cmp	r1, r3
 8115b6a:	d002      	beq.n	8115b72 <__swsetup_r+0x46>
 8115b6c:	4628      	mov	r0, r5
 8115b6e:	f7fe f953 	bl	8113e18 <_free_r>
 8115b72:	2300      	movs	r3, #0
 8115b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8115b76:	89a3      	ldrh	r3, [r4, #12]
 8115b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8115b7c:	81a3      	strh	r3, [r4, #12]
 8115b7e:	2300      	movs	r3, #0
 8115b80:	6063      	str	r3, [r4, #4]
 8115b82:	6923      	ldr	r3, [r4, #16]
 8115b84:	6023      	str	r3, [r4, #0]
 8115b86:	89a3      	ldrh	r3, [r4, #12]
 8115b88:	f043 0308 	orr.w	r3, r3, #8
 8115b8c:	81a3      	strh	r3, [r4, #12]
 8115b8e:	6923      	ldr	r3, [r4, #16]
 8115b90:	b94b      	cbnz	r3, 8115ba6 <__swsetup_r+0x7a>
 8115b92:	89a3      	ldrh	r3, [r4, #12]
 8115b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8115b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8115b9c:	d003      	beq.n	8115ba6 <__swsetup_r+0x7a>
 8115b9e:	4621      	mov	r1, r4
 8115ba0:	4628      	mov	r0, r5
 8115ba2:	f000 fc41 	bl	8116428 <__smakebuf_r>
 8115ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8115baa:	f013 0201 	ands.w	r2, r3, #1
 8115bae:	d00a      	beq.n	8115bc6 <__swsetup_r+0x9a>
 8115bb0:	2200      	movs	r2, #0
 8115bb2:	60a2      	str	r2, [r4, #8]
 8115bb4:	6962      	ldr	r2, [r4, #20]
 8115bb6:	4252      	negs	r2, r2
 8115bb8:	61a2      	str	r2, [r4, #24]
 8115bba:	6922      	ldr	r2, [r4, #16]
 8115bbc:	b942      	cbnz	r2, 8115bd0 <__swsetup_r+0xa4>
 8115bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8115bc2:	d1c5      	bne.n	8115b50 <__swsetup_r+0x24>
 8115bc4:	bd38      	pop	{r3, r4, r5, pc}
 8115bc6:	0799      	lsls	r1, r3, #30
 8115bc8:	bf58      	it	pl
 8115bca:	6962      	ldrpl	r2, [r4, #20]
 8115bcc:	60a2      	str	r2, [r4, #8]
 8115bce:	e7f4      	b.n	8115bba <__swsetup_r+0x8e>
 8115bd0:	2000      	movs	r0, #0
 8115bd2:	e7f7      	b.n	8115bc4 <__swsetup_r+0x98>
 8115bd4:	100000c8 	.word	0x100000c8

08115bd8 <memmove>:
 8115bd8:	4288      	cmp	r0, r1
 8115bda:	b510      	push	{r4, lr}
 8115bdc:	eb01 0402 	add.w	r4, r1, r2
 8115be0:	d902      	bls.n	8115be8 <memmove+0x10>
 8115be2:	4284      	cmp	r4, r0
 8115be4:	4623      	mov	r3, r4
 8115be6:	d807      	bhi.n	8115bf8 <memmove+0x20>
 8115be8:	1e43      	subs	r3, r0, #1
 8115bea:	42a1      	cmp	r1, r4
 8115bec:	d008      	beq.n	8115c00 <memmove+0x28>
 8115bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8115bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8115bf6:	e7f8      	b.n	8115bea <memmove+0x12>
 8115bf8:	4402      	add	r2, r0
 8115bfa:	4601      	mov	r1, r0
 8115bfc:	428a      	cmp	r2, r1
 8115bfe:	d100      	bne.n	8115c02 <memmove+0x2a>
 8115c00:	bd10      	pop	{r4, pc}
 8115c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8115c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8115c0a:	e7f7      	b.n	8115bfc <memmove+0x24>

08115c0c <_raise_r>:
 8115c0c:	291f      	cmp	r1, #31
 8115c0e:	b538      	push	{r3, r4, r5, lr}
 8115c10:	4605      	mov	r5, r0
 8115c12:	460c      	mov	r4, r1
 8115c14:	d904      	bls.n	8115c20 <_raise_r+0x14>
 8115c16:	2316      	movs	r3, #22
 8115c18:	6003      	str	r3, [r0, #0]
 8115c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8115c1e:	bd38      	pop	{r3, r4, r5, pc}
 8115c20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8115c22:	b112      	cbz	r2, 8115c2a <_raise_r+0x1e>
 8115c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8115c28:	b94b      	cbnz	r3, 8115c3e <_raise_r+0x32>
 8115c2a:	4628      	mov	r0, r5
 8115c2c:	f000 f830 	bl	8115c90 <_getpid_r>
 8115c30:	4622      	mov	r2, r4
 8115c32:	4601      	mov	r1, r0
 8115c34:	4628      	mov	r0, r5
 8115c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8115c3a:	f000 b817 	b.w	8115c6c <_kill_r>
 8115c3e:	2b01      	cmp	r3, #1
 8115c40:	d00a      	beq.n	8115c58 <_raise_r+0x4c>
 8115c42:	1c59      	adds	r1, r3, #1
 8115c44:	d103      	bne.n	8115c4e <_raise_r+0x42>
 8115c46:	2316      	movs	r3, #22
 8115c48:	6003      	str	r3, [r0, #0]
 8115c4a:	2001      	movs	r0, #1
 8115c4c:	e7e7      	b.n	8115c1e <_raise_r+0x12>
 8115c4e:	2100      	movs	r1, #0
 8115c50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8115c54:	4620      	mov	r0, r4
 8115c56:	4798      	blx	r3
 8115c58:	2000      	movs	r0, #0
 8115c5a:	e7e0      	b.n	8115c1e <_raise_r+0x12>

08115c5c <raise>:
 8115c5c:	4b02      	ldr	r3, [pc, #8]	@ (8115c68 <raise+0xc>)
 8115c5e:	4601      	mov	r1, r0
 8115c60:	6818      	ldr	r0, [r3, #0]
 8115c62:	f7ff bfd3 	b.w	8115c0c <_raise_r>
 8115c66:	bf00      	nop
 8115c68:	100000c8 	.word	0x100000c8

08115c6c <_kill_r>:
 8115c6c:	b538      	push	{r3, r4, r5, lr}
 8115c6e:	4d07      	ldr	r5, [pc, #28]	@ (8115c8c <_kill_r+0x20>)
 8115c70:	2300      	movs	r3, #0
 8115c72:	4604      	mov	r4, r0
 8115c74:	4608      	mov	r0, r1
 8115c76:	4611      	mov	r1, r2
 8115c78:	602b      	str	r3, [r5, #0]
 8115c7a:	f7ec fb09 	bl	8102290 <_kill>
 8115c7e:	1c43      	adds	r3, r0, #1
 8115c80:	d102      	bne.n	8115c88 <_kill_r+0x1c>
 8115c82:	682b      	ldr	r3, [r5, #0]
 8115c84:	b103      	cbz	r3, 8115c88 <_kill_r+0x1c>
 8115c86:	6023      	str	r3, [r4, #0]
 8115c88:	bd38      	pop	{r3, r4, r5, pc}
 8115c8a:	bf00      	nop
 8115c8c:	1000517c 	.word	0x1000517c

08115c90 <_getpid_r>:
 8115c90:	f7ec baf6 	b.w	8102280 <_getpid>
 8115c94:	0000      	movs	r0, r0
	...

08115c98 <nan>:
 8115c98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8115ca0 <nan+0x8>
 8115c9c:	4770      	bx	lr
 8115c9e:	bf00      	nop
 8115ca0:	00000000 	.word	0x00000000
 8115ca4:	7ff80000 	.word	0x7ff80000

08115ca8 <_calloc_r>:
 8115ca8:	b570      	push	{r4, r5, r6, lr}
 8115caa:	fba1 5402 	umull	r5, r4, r1, r2
 8115cae:	b93c      	cbnz	r4, 8115cc0 <_calloc_r+0x18>
 8115cb0:	4629      	mov	r1, r5
 8115cb2:	f7fc f8e7 	bl	8111e84 <_malloc_r>
 8115cb6:	4606      	mov	r6, r0
 8115cb8:	b928      	cbnz	r0, 8115cc6 <_calloc_r+0x1e>
 8115cba:	2600      	movs	r6, #0
 8115cbc:	4630      	mov	r0, r6
 8115cbe:	bd70      	pop	{r4, r5, r6, pc}
 8115cc0:	220c      	movs	r2, #12
 8115cc2:	6002      	str	r2, [r0, #0]
 8115cc4:	e7f9      	b.n	8115cba <_calloc_r+0x12>
 8115cc6:	462a      	mov	r2, r5
 8115cc8:	4621      	mov	r1, r4
 8115cca:	f7fd f986 	bl	8112fda <memset>
 8115cce:	e7f5      	b.n	8115cbc <_calloc_r+0x14>

08115cd0 <rshift>:
 8115cd0:	6903      	ldr	r3, [r0, #16]
 8115cd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8115cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8115cda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8115cde:	f100 0414 	add.w	r4, r0, #20
 8115ce2:	dd45      	ble.n	8115d70 <rshift+0xa0>
 8115ce4:	f011 011f 	ands.w	r1, r1, #31
 8115ce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8115cec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8115cf0:	d10c      	bne.n	8115d0c <rshift+0x3c>
 8115cf2:	f100 0710 	add.w	r7, r0, #16
 8115cf6:	4629      	mov	r1, r5
 8115cf8:	42b1      	cmp	r1, r6
 8115cfa:	d334      	bcc.n	8115d66 <rshift+0x96>
 8115cfc:	1a9b      	subs	r3, r3, r2
 8115cfe:	009b      	lsls	r3, r3, #2
 8115d00:	1eea      	subs	r2, r5, #3
 8115d02:	4296      	cmp	r6, r2
 8115d04:	bf38      	it	cc
 8115d06:	2300      	movcc	r3, #0
 8115d08:	4423      	add	r3, r4
 8115d0a:	e015      	b.n	8115d38 <rshift+0x68>
 8115d0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8115d10:	f1c1 0820 	rsb	r8, r1, #32
 8115d14:	40cf      	lsrs	r7, r1
 8115d16:	f105 0e04 	add.w	lr, r5, #4
 8115d1a:	46a1      	mov	r9, r4
 8115d1c:	4576      	cmp	r6, lr
 8115d1e:	46f4      	mov	ip, lr
 8115d20:	d815      	bhi.n	8115d4e <rshift+0x7e>
 8115d22:	1a9a      	subs	r2, r3, r2
 8115d24:	0092      	lsls	r2, r2, #2
 8115d26:	3a04      	subs	r2, #4
 8115d28:	3501      	adds	r5, #1
 8115d2a:	42ae      	cmp	r6, r5
 8115d2c:	bf38      	it	cc
 8115d2e:	2200      	movcc	r2, #0
 8115d30:	18a3      	adds	r3, r4, r2
 8115d32:	50a7      	str	r7, [r4, r2]
 8115d34:	b107      	cbz	r7, 8115d38 <rshift+0x68>
 8115d36:	3304      	adds	r3, #4
 8115d38:	1b1a      	subs	r2, r3, r4
 8115d3a:	42a3      	cmp	r3, r4
 8115d3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8115d40:	bf08      	it	eq
 8115d42:	2300      	moveq	r3, #0
 8115d44:	6102      	str	r2, [r0, #16]
 8115d46:	bf08      	it	eq
 8115d48:	6143      	streq	r3, [r0, #20]
 8115d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8115d4e:	f8dc c000 	ldr.w	ip, [ip]
 8115d52:	fa0c fc08 	lsl.w	ip, ip, r8
 8115d56:	ea4c 0707 	orr.w	r7, ip, r7
 8115d5a:	f849 7b04 	str.w	r7, [r9], #4
 8115d5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8115d62:	40cf      	lsrs	r7, r1
 8115d64:	e7da      	b.n	8115d1c <rshift+0x4c>
 8115d66:	f851 cb04 	ldr.w	ip, [r1], #4
 8115d6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8115d6e:	e7c3      	b.n	8115cf8 <rshift+0x28>
 8115d70:	4623      	mov	r3, r4
 8115d72:	e7e1      	b.n	8115d38 <rshift+0x68>

08115d74 <__hexdig_fun>:
 8115d74:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8115d78:	2b09      	cmp	r3, #9
 8115d7a:	d802      	bhi.n	8115d82 <__hexdig_fun+0xe>
 8115d7c:	3820      	subs	r0, #32
 8115d7e:	b2c0      	uxtb	r0, r0
 8115d80:	4770      	bx	lr
 8115d82:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8115d86:	2b05      	cmp	r3, #5
 8115d88:	d801      	bhi.n	8115d8e <__hexdig_fun+0x1a>
 8115d8a:	3847      	subs	r0, #71	@ 0x47
 8115d8c:	e7f7      	b.n	8115d7e <__hexdig_fun+0xa>
 8115d8e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8115d92:	2b05      	cmp	r3, #5
 8115d94:	d801      	bhi.n	8115d9a <__hexdig_fun+0x26>
 8115d96:	3827      	subs	r0, #39	@ 0x27
 8115d98:	e7f1      	b.n	8115d7e <__hexdig_fun+0xa>
 8115d9a:	2000      	movs	r0, #0
 8115d9c:	4770      	bx	lr
	...

08115da0 <__gethex>:
 8115da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115da4:	b085      	sub	sp, #20
 8115da6:	468a      	mov	sl, r1
 8115da8:	9302      	str	r3, [sp, #8]
 8115daa:	680b      	ldr	r3, [r1, #0]
 8115dac:	9001      	str	r0, [sp, #4]
 8115dae:	4690      	mov	r8, r2
 8115db0:	1c9c      	adds	r4, r3, #2
 8115db2:	46a1      	mov	r9, r4
 8115db4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8115db8:	2830      	cmp	r0, #48	@ 0x30
 8115dba:	d0fa      	beq.n	8115db2 <__gethex+0x12>
 8115dbc:	eba9 0303 	sub.w	r3, r9, r3
 8115dc0:	f1a3 0b02 	sub.w	fp, r3, #2
 8115dc4:	f7ff ffd6 	bl	8115d74 <__hexdig_fun>
 8115dc8:	4605      	mov	r5, r0
 8115dca:	2800      	cmp	r0, #0
 8115dcc:	d168      	bne.n	8115ea0 <__gethex+0x100>
 8115dce:	49a0      	ldr	r1, [pc, #640]	@ (8116050 <__gethex+0x2b0>)
 8115dd0:	2201      	movs	r2, #1
 8115dd2:	4648      	mov	r0, r9
 8115dd4:	f7fd f909 	bl	8112fea <strncmp>
 8115dd8:	4607      	mov	r7, r0
 8115dda:	2800      	cmp	r0, #0
 8115ddc:	d167      	bne.n	8115eae <__gethex+0x10e>
 8115dde:	f899 0001 	ldrb.w	r0, [r9, #1]
 8115de2:	4626      	mov	r6, r4
 8115de4:	f7ff ffc6 	bl	8115d74 <__hexdig_fun>
 8115de8:	2800      	cmp	r0, #0
 8115dea:	d062      	beq.n	8115eb2 <__gethex+0x112>
 8115dec:	4623      	mov	r3, r4
 8115dee:	7818      	ldrb	r0, [r3, #0]
 8115df0:	2830      	cmp	r0, #48	@ 0x30
 8115df2:	4699      	mov	r9, r3
 8115df4:	f103 0301 	add.w	r3, r3, #1
 8115df8:	d0f9      	beq.n	8115dee <__gethex+0x4e>
 8115dfa:	f7ff ffbb 	bl	8115d74 <__hexdig_fun>
 8115dfe:	fab0 f580 	clz	r5, r0
 8115e02:	096d      	lsrs	r5, r5, #5
 8115e04:	f04f 0b01 	mov.w	fp, #1
 8115e08:	464a      	mov	r2, r9
 8115e0a:	4616      	mov	r6, r2
 8115e0c:	3201      	adds	r2, #1
 8115e0e:	7830      	ldrb	r0, [r6, #0]
 8115e10:	f7ff ffb0 	bl	8115d74 <__hexdig_fun>
 8115e14:	2800      	cmp	r0, #0
 8115e16:	d1f8      	bne.n	8115e0a <__gethex+0x6a>
 8115e18:	498d      	ldr	r1, [pc, #564]	@ (8116050 <__gethex+0x2b0>)
 8115e1a:	2201      	movs	r2, #1
 8115e1c:	4630      	mov	r0, r6
 8115e1e:	f7fd f8e4 	bl	8112fea <strncmp>
 8115e22:	2800      	cmp	r0, #0
 8115e24:	d13f      	bne.n	8115ea6 <__gethex+0x106>
 8115e26:	b944      	cbnz	r4, 8115e3a <__gethex+0x9a>
 8115e28:	1c74      	adds	r4, r6, #1
 8115e2a:	4622      	mov	r2, r4
 8115e2c:	4616      	mov	r6, r2
 8115e2e:	3201      	adds	r2, #1
 8115e30:	7830      	ldrb	r0, [r6, #0]
 8115e32:	f7ff ff9f 	bl	8115d74 <__hexdig_fun>
 8115e36:	2800      	cmp	r0, #0
 8115e38:	d1f8      	bne.n	8115e2c <__gethex+0x8c>
 8115e3a:	1ba4      	subs	r4, r4, r6
 8115e3c:	00a7      	lsls	r7, r4, #2
 8115e3e:	7833      	ldrb	r3, [r6, #0]
 8115e40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8115e44:	2b50      	cmp	r3, #80	@ 0x50
 8115e46:	d13e      	bne.n	8115ec6 <__gethex+0x126>
 8115e48:	7873      	ldrb	r3, [r6, #1]
 8115e4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8115e4c:	d033      	beq.n	8115eb6 <__gethex+0x116>
 8115e4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8115e50:	d034      	beq.n	8115ebc <__gethex+0x11c>
 8115e52:	1c71      	adds	r1, r6, #1
 8115e54:	2400      	movs	r4, #0
 8115e56:	7808      	ldrb	r0, [r1, #0]
 8115e58:	f7ff ff8c 	bl	8115d74 <__hexdig_fun>
 8115e5c:	1e43      	subs	r3, r0, #1
 8115e5e:	b2db      	uxtb	r3, r3
 8115e60:	2b18      	cmp	r3, #24
 8115e62:	d830      	bhi.n	8115ec6 <__gethex+0x126>
 8115e64:	f1a0 0210 	sub.w	r2, r0, #16
 8115e68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8115e6c:	f7ff ff82 	bl	8115d74 <__hexdig_fun>
 8115e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8115e74:	fa5f fc8c 	uxtb.w	ip, ip
 8115e78:	f1bc 0f18 	cmp.w	ip, #24
 8115e7c:	f04f 030a 	mov.w	r3, #10
 8115e80:	d91e      	bls.n	8115ec0 <__gethex+0x120>
 8115e82:	b104      	cbz	r4, 8115e86 <__gethex+0xe6>
 8115e84:	4252      	negs	r2, r2
 8115e86:	4417      	add	r7, r2
 8115e88:	f8ca 1000 	str.w	r1, [sl]
 8115e8c:	b1ed      	cbz	r5, 8115eca <__gethex+0x12a>
 8115e8e:	f1bb 0f00 	cmp.w	fp, #0
 8115e92:	bf0c      	ite	eq
 8115e94:	2506      	moveq	r5, #6
 8115e96:	2500      	movne	r5, #0
 8115e98:	4628      	mov	r0, r5
 8115e9a:	b005      	add	sp, #20
 8115e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115ea0:	2500      	movs	r5, #0
 8115ea2:	462c      	mov	r4, r5
 8115ea4:	e7b0      	b.n	8115e08 <__gethex+0x68>
 8115ea6:	2c00      	cmp	r4, #0
 8115ea8:	d1c7      	bne.n	8115e3a <__gethex+0x9a>
 8115eaa:	4627      	mov	r7, r4
 8115eac:	e7c7      	b.n	8115e3e <__gethex+0x9e>
 8115eae:	464e      	mov	r6, r9
 8115eb0:	462f      	mov	r7, r5
 8115eb2:	2501      	movs	r5, #1
 8115eb4:	e7c3      	b.n	8115e3e <__gethex+0x9e>
 8115eb6:	2400      	movs	r4, #0
 8115eb8:	1cb1      	adds	r1, r6, #2
 8115eba:	e7cc      	b.n	8115e56 <__gethex+0xb6>
 8115ebc:	2401      	movs	r4, #1
 8115ebe:	e7fb      	b.n	8115eb8 <__gethex+0x118>
 8115ec0:	fb03 0002 	mla	r0, r3, r2, r0
 8115ec4:	e7ce      	b.n	8115e64 <__gethex+0xc4>
 8115ec6:	4631      	mov	r1, r6
 8115ec8:	e7de      	b.n	8115e88 <__gethex+0xe8>
 8115eca:	eba6 0309 	sub.w	r3, r6, r9
 8115ece:	3b01      	subs	r3, #1
 8115ed0:	4629      	mov	r1, r5
 8115ed2:	2b07      	cmp	r3, #7
 8115ed4:	dc0a      	bgt.n	8115eec <__gethex+0x14c>
 8115ed6:	9801      	ldr	r0, [sp, #4]
 8115ed8:	f7fd ffe8 	bl	8113eac <_Balloc>
 8115edc:	4604      	mov	r4, r0
 8115ede:	b940      	cbnz	r0, 8115ef2 <__gethex+0x152>
 8115ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8116054 <__gethex+0x2b4>)
 8115ee2:	4602      	mov	r2, r0
 8115ee4:	21e4      	movs	r1, #228	@ 0xe4
 8115ee6:	485c      	ldr	r0, [pc, #368]	@ (8116058 <__gethex+0x2b8>)
 8115ee8:	f7fb ff7c 	bl	8111de4 <__assert_func>
 8115eec:	3101      	adds	r1, #1
 8115eee:	105b      	asrs	r3, r3, #1
 8115ef0:	e7ef      	b.n	8115ed2 <__gethex+0x132>
 8115ef2:	f100 0a14 	add.w	sl, r0, #20
 8115ef6:	2300      	movs	r3, #0
 8115ef8:	4655      	mov	r5, sl
 8115efa:	469b      	mov	fp, r3
 8115efc:	45b1      	cmp	r9, r6
 8115efe:	d337      	bcc.n	8115f70 <__gethex+0x1d0>
 8115f00:	f845 bb04 	str.w	fp, [r5], #4
 8115f04:	eba5 050a 	sub.w	r5, r5, sl
 8115f08:	10ad      	asrs	r5, r5, #2
 8115f0a:	6125      	str	r5, [r4, #16]
 8115f0c:	4658      	mov	r0, fp
 8115f0e:	f7fe f8bf 	bl	8114090 <__hi0bits>
 8115f12:	016d      	lsls	r5, r5, #5
 8115f14:	f8d8 6000 	ldr.w	r6, [r8]
 8115f18:	1a2d      	subs	r5, r5, r0
 8115f1a:	42b5      	cmp	r5, r6
 8115f1c:	dd54      	ble.n	8115fc8 <__gethex+0x228>
 8115f1e:	1bad      	subs	r5, r5, r6
 8115f20:	4629      	mov	r1, r5
 8115f22:	4620      	mov	r0, r4
 8115f24:	f7fe fc53 	bl	81147ce <__any_on>
 8115f28:	4681      	mov	r9, r0
 8115f2a:	b178      	cbz	r0, 8115f4c <__gethex+0x1ac>
 8115f2c:	1e6b      	subs	r3, r5, #1
 8115f2e:	1159      	asrs	r1, r3, #5
 8115f30:	f003 021f 	and.w	r2, r3, #31
 8115f34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8115f38:	f04f 0901 	mov.w	r9, #1
 8115f3c:	fa09 f202 	lsl.w	r2, r9, r2
 8115f40:	420a      	tst	r2, r1
 8115f42:	d003      	beq.n	8115f4c <__gethex+0x1ac>
 8115f44:	454b      	cmp	r3, r9
 8115f46:	dc36      	bgt.n	8115fb6 <__gethex+0x216>
 8115f48:	f04f 0902 	mov.w	r9, #2
 8115f4c:	4629      	mov	r1, r5
 8115f4e:	4620      	mov	r0, r4
 8115f50:	f7ff febe 	bl	8115cd0 <rshift>
 8115f54:	442f      	add	r7, r5
 8115f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8115f5a:	42bb      	cmp	r3, r7
 8115f5c:	da42      	bge.n	8115fe4 <__gethex+0x244>
 8115f5e:	9801      	ldr	r0, [sp, #4]
 8115f60:	4621      	mov	r1, r4
 8115f62:	f7fd ffe3 	bl	8113f2c <_Bfree>
 8115f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115f68:	2300      	movs	r3, #0
 8115f6a:	6013      	str	r3, [r2, #0]
 8115f6c:	25a3      	movs	r5, #163	@ 0xa3
 8115f6e:	e793      	b.n	8115e98 <__gethex+0xf8>
 8115f70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8115f74:	2a2e      	cmp	r2, #46	@ 0x2e
 8115f76:	d012      	beq.n	8115f9e <__gethex+0x1fe>
 8115f78:	2b20      	cmp	r3, #32
 8115f7a:	d104      	bne.n	8115f86 <__gethex+0x1e6>
 8115f7c:	f845 bb04 	str.w	fp, [r5], #4
 8115f80:	f04f 0b00 	mov.w	fp, #0
 8115f84:	465b      	mov	r3, fp
 8115f86:	7830      	ldrb	r0, [r6, #0]
 8115f88:	9303      	str	r3, [sp, #12]
 8115f8a:	f7ff fef3 	bl	8115d74 <__hexdig_fun>
 8115f8e:	9b03      	ldr	r3, [sp, #12]
 8115f90:	f000 000f 	and.w	r0, r0, #15
 8115f94:	4098      	lsls	r0, r3
 8115f96:	ea4b 0b00 	orr.w	fp, fp, r0
 8115f9a:	3304      	adds	r3, #4
 8115f9c:	e7ae      	b.n	8115efc <__gethex+0x15c>
 8115f9e:	45b1      	cmp	r9, r6
 8115fa0:	d8ea      	bhi.n	8115f78 <__gethex+0x1d8>
 8115fa2:	492b      	ldr	r1, [pc, #172]	@ (8116050 <__gethex+0x2b0>)
 8115fa4:	9303      	str	r3, [sp, #12]
 8115fa6:	2201      	movs	r2, #1
 8115fa8:	4630      	mov	r0, r6
 8115faa:	f7fd f81e 	bl	8112fea <strncmp>
 8115fae:	9b03      	ldr	r3, [sp, #12]
 8115fb0:	2800      	cmp	r0, #0
 8115fb2:	d1e1      	bne.n	8115f78 <__gethex+0x1d8>
 8115fb4:	e7a2      	b.n	8115efc <__gethex+0x15c>
 8115fb6:	1ea9      	subs	r1, r5, #2
 8115fb8:	4620      	mov	r0, r4
 8115fba:	f7fe fc08 	bl	81147ce <__any_on>
 8115fbe:	2800      	cmp	r0, #0
 8115fc0:	d0c2      	beq.n	8115f48 <__gethex+0x1a8>
 8115fc2:	f04f 0903 	mov.w	r9, #3
 8115fc6:	e7c1      	b.n	8115f4c <__gethex+0x1ac>
 8115fc8:	da09      	bge.n	8115fde <__gethex+0x23e>
 8115fca:	1b75      	subs	r5, r6, r5
 8115fcc:	4621      	mov	r1, r4
 8115fce:	9801      	ldr	r0, [sp, #4]
 8115fd0:	462a      	mov	r2, r5
 8115fd2:	f7fe f9c3 	bl	811435c <__lshift>
 8115fd6:	1b7f      	subs	r7, r7, r5
 8115fd8:	4604      	mov	r4, r0
 8115fda:	f100 0a14 	add.w	sl, r0, #20
 8115fde:	f04f 0900 	mov.w	r9, #0
 8115fe2:	e7b8      	b.n	8115f56 <__gethex+0x1b6>
 8115fe4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8115fe8:	42bd      	cmp	r5, r7
 8115fea:	dd6f      	ble.n	81160cc <__gethex+0x32c>
 8115fec:	1bed      	subs	r5, r5, r7
 8115fee:	42ae      	cmp	r6, r5
 8115ff0:	dc34      	bgt.n	811605c <__gethex+0x2bc>
 8115ff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8115ff6:	2b02      	cmp	r3, #2
 8115ff8:	d022      	beq.n	8116040 <__gethex+0x2a0>
 8115ffa:	2b03      	cmp	r3, #3
 8115ffc:	d024      	beq.n	8116048 <__gethex+0x2a8>
 8115ffe:	2b01      	cmp	r3, #1
 8116000:	d115      	bne.n	811602e <__gethex+0x28e>
 8116002:	42ae      	cmp	r6, r5
 8116004:	d113      	bne.n	811602e <__gethex+0x28e>
 8116006:	2e01      	cmp	r6, #1
 8116008:	d10b      	bne.n	8116022 <__gethex+0x282>
 811600a:	9a02      	ldr	r2, [sp, #8]
 811600c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8116010:	6013      	str	r3, [r2, #0]
 8116012:	2301      	movs	r3, #1
 8116014:	6123      	str	r3, [r4, #16]
 8116016:	f8ca 3000 	str.w	r3, [sl]
 811601a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811601c:	2562      	movs	r5, #98	@ 0x62
 811601e:	601c      	str	r4, [r3, #0]
 8116020:	e73a      	b.n	8115e98 <__gethex+0xf8>
 8116022:	1e71      	subs	r1, r6, #1
 8116024:	4620      	mov	r0, r4
 8116026:	f7fe fbd2 	bl	81147ce <__any_on>
 811602a:	2800      	cmp	r0, #0
 811602c:	d1ed      	bne.n	811600a <__gethex+0x26a>
 811602e:	9801      	ldr	r0, [sp, #4]
 8116030:	4621      	mov	r1, r4
 8116032:	f7fd ff7b 	bl	8113f2c <_Bfree>
 8116036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8116038:	2300      	movs	r3, #0
 811603a:	6013      	str	r3, [r2, #0]
 811603c:	2550      	movs	r5, #80	@ 0x50
 811603e:	e72b      	b.n	8115e98 <__gethex+0xf8>
 8116040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8116042:	2b00      	cmp	r3, #0
 8116044:	d1f3      	bne.n	811602e <__gethex+0x28e>
 8116046:	e7e0      	b.n	811600a <__gethex+0x26a>
 8116048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811604a:	2b00      	cmp	r3, #0
 811604c:	d1dd      	bne.n	811600a <__gethex+0x26a>
 811604e:	e7ee      	b.n	811602e <__gethex+0x28e>
 8116050:	08117ba8 	.word	0x08117ba8
 8116054:	08117a3c 	.word	0x08117a3c
 8116058:	08117c19 	.word	0x08117c19
 811605c:	1e6f      	subs	r7, r5, #1
 811605e:	f1b9 0f00 	cmp.w	r9, #0
 8116062:	d130      	bne.n	81160c6 <__gethex+0x326>
 8116064:	b127      	cbz	r7, 8116070 <__gethex+0x2d0>
 8116066:	4639      	mov	r1, r7
 8116068:	4620      	mov	r0, r4
 811606a:	f7fe fbb0 	bl	81147ce <__any_on>
 811606e:	4681      	mov	r9, r0
 8116070:	117a      	asrs	r2, r7, #5
 8116072:	2301      	movs	r3, #1
 8116074:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8116078:	f007 071f 	and.w	r7, r7, #31
 811607c:	40bb      	lsls	r3, r7
 811607e:	4213      	tst	r3, r2
 8116080:	4629      	mov	r1, r5
 8116082:	4620      	mov	r0, r4
 8116084:	bf18      	it	ne
 8116086:	f049 0902 	orrne.w	r9, r9, #2
 811608a:	f7ff fe21 	bl	8115cd0 <rshift>
 811608e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8116092:	1b76      	subs	r6, r6, r5
 8116094:	2502      	movs	r5, #2
 8116096:	f1b9 0f00 	cmp.w	r9, #0
 811609a:	d047      	beq.n	811612c <__gethex+0x38c>
 811609c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81160a0:	2b02      	cmp	r3, #2
 81160a2:	d015      	beq.n	81160d0 <__gethex+0x330>
 81160a4:	2b03      	cmp	r3, #3
 81160a6:	d017      	beq.n	81160d8 <__gethex+0x338>
 81160a8:	2b01      	cmp	r3, #1
 81160aa:	d109      	bne.n	81160c0 <__gethex+0x320>
 81160ac:	f019 0f02 	tst.w	r9, #2
 81160b0:	d006      	beq.n	81160c0 <__gethex+0x320>
 81160b2:	f8da 3000 	ldr.w	r3, [sl]
 81160b6:	ea49 0903 	orr.w	r9, r9, r3
 81160ba:	f019 0f01 	tst.w	r9, #1
 81160be:	d10e      	bne.n	81160de <__gethex+0x33e>
 81160c0:	f045 0510 	orr.w	r5, r5, #16
 81160c4:	e032      	b.n	811612c <__gethex+0x38c>
 81160c6:	f04f 0901 	mov.w	r9, #1
 81160ca:	e7d1      	b.n	8116070 <__gethex+0x2d0>
 81160cc:	2501      	movs	r5, #1
 81160ce:	e7e2      	b.n	8116096 <__gethex+0x2f6>
 81160d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81160d2:	f1c3 0301 	rsb	r3, r3, #1
 81160d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 81160d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81160da:	2b00      	cmp	r3, #0
 81160dc:	d0f0      	beq.n	81160c0 <__gethex+0x320>
 81160de:	f8d4 b010 	ldr.w	fp, [r4, #16]
 81160e2:	f104 0314 	add.w	r3, r4, #20
 81160e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 81160ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 81160ee:	f04f 0c00 	mov.w	ip, #0
 81160f2:	4618      	mov	r0, r3
 81160f4:	f853 2b04 	ldr.w	r2, [r3], #4
 81160f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 81160fc:	d01b      	beq.n	8116136 <__gethex+0x396>
 81160fe:	3201      	adds	r2, #1
 8116100:	6002      	str	r2, [r0, #0]
 8116102:	2d02      	cmp	r5, #2
 8116104:	f104 0314 	add.w	r3, r4, #20
 8116108:	d13c      	bne.n	8116184 <__gethex+0x3e4>
 811610a:	f8d8 2000 	ldr.w	r2, [r8]
 811610e:	3a01      	subs	r2, #1
 8116110:	42b2      	cmp	r2, r6
 8116112:	d109      	bne.n	8116128 <__gethex+0x388>
 8116114:	1171      	asrs	r1, r6, #5
 8116116:	2201      	movs	r2, #1
 8116118:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 811611c:	f006 061f 	and.w	r6, r6, #31
 8116120:	fa02 f606 	lsl.w	r6, r2, r6
 8116124:	421e      	tst	r6, r3
 8116126:	d13a      	bne.n	811619e <__gethex+0x3fe>
 8116128:	f045 0520 	orr.w	r5, r5, #32
 811612c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811612e:	601c      	str	r4, [r3, #0]
 8116130:	9b02      	ldr	r3, [sp, #8]
 8116132:	601f      	str	r7, [r3, #0]
 8116134:	e6b0      	b.n	8115e98 <__gethex+0xf8>
 8116136:	4299      	cmp	r1, r3
 8116138:	f843 cc04 	str.w	ip, [r3, #-4]
 811613c:	d8d9      	bhi.n	81160f2 <__gethex+0x352>
 811613e:	68a3      	ldr	r3, [r4, #8]
 8116140:	459b      	cmp	fp, r3
 8116142:	db17      	blt.n	8116174 <__gethex+0x3d4>
 8116144:	6861      	ldr	r1, [r4, #4]
 8116146:	9801      	ldr	r0, [sp, #4]
 8116148:	3101      	adds	r1, #1
 811614a:	f7fd feaf 	bl	8113eac <_Balloc>
 811614e:	4681      	mov	r9, r0
 8116150:	b918      	cbnz	r0, 811615a <__gethex+0x3ba>
 8116152:	4b1a      	ldr	r3, [pc, #104]	@ (81161bc <__gethex+0x41c>)
 8116154:	4602      	mov	r2, r0
 8116156:	2184      	movs	r1, #132	@ 0x84
 8116158:	e6c5      	b.n	8115ee6 <__gethex+0x146>
 811615a:	6922      	ldr	r2, [r4, #16]
 811615c:	3202      	adds	r2, #2
 811615e:	f104 010c 	add.w	r1, r4, #12
 8116162:	0092      	lsls	r2, r2, #2
 8116164:	300c      	adds	r0, #12
 8116166:	f7fc ffec 	bl	8113142 <memcpy>
 811616a:	4621      	mov	r1, r4
 811616c:	9801      	ldr	r0, [sp, #4]
 811616e:	f7fd fedd 	bl	8113f2c <_Bfree>
 8116172:	464c      	mov	r4, r9
 8116174:	6923      	ldr	r3, [r4, #16]
 8116176:	1c5a      	adds	r2, r3, #1
 8116178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 811617c:	6122      	str	r2, [r4, #16]
 811617e:	2201      	movs	r2, #1
 8116180:	615a      	str	r2, [r3, #20]
 8116182:	e7be      	b.n	8116102 <__gethex+0x362>
 8116184:	6922      	ldr	r2, [r4, #16]
 8116186:	455a      	cmp	r2, fp
 8116188:	dd0b      	ble.n	81161a2 <__gethex+0x402>
 811618a:	2101      	movs	r1, #1
 811618c:	4620      	mov	r0, r4
 811618e:	f7ff fd9f 	bl	8115cd0 <rshift>
 8116192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8116196:	3701      	adds	r7, #1
 8116198:	42bb      	cmp	r3, r7
 811619a:	f6ff aee0 	blt.w	8115f5e <__gethex+0x1be>
 811619e:	2501      	movs	r5, #1
 81161a0:	e7c2      	b.n	8116128 <__gethex+0x388>
 81161a2:	f016 061f 	ands.w	r6, r6, #31
 81161a6:	d0fa      	beq.n	811619e <__gethex+0x3fe>
 81161a8:	4453      	add	r3, sl
 81161aa:	f1c6 0620 	rsb	r6, r6, #32
 81161ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 81161b2:	f7fd ff6d 	bl	8114090 <__hi0bits>
 81161b6:	42b0      	cmp	r0, r6
 81161b8:	dbe7      	blt.n	811618a <__gethex+0x3ea>
 81161ba:	e7f0      	b.n	811619e <__gethex+0x3fe>
 81161bc:	08117a3c 	.word	0x08117a3c

081161c0 <L_shift>:
 81161c0:	f1c2 0208 	rsb	r2, r2, #8
 81161c4:	0092      	lsls	r2, r2, #2
 81161c6:	b570      	push	{r4, r5, r6, lr}
 81161c8:	f1c2 0620 	rsb	r6, r2, #32
 81161cc:	6843      	ldr	r3, [r0, #4]
 81161ce:	6804      	ldr	r4, [r0, #0]
 81161d0:	fa03 f506 	lsl.w	r5, r3, r6
 81161d4:	432c      	orrs	r4, r5
 81161d6:	40d3      	lsrs	r3, r2
 81161d8:	6004      	str	r4, [r0, #0]
 81161da:	f840 3f04 	str.w	r3, [r0, #4]!
 81161de:	4288      	cmp	r0, r1
 81161e0:	d3f4      	bcc.n	81161cc <L_shift+0xc>
 81161e2:	bd70      	pop	{r4, r5, r6, pc}

081161e4 <__match>:
 81161e4:	b530      	push	{r4, r5, lr}
 81161e6:	6803      	ldr	r3, [r0, #0]
 81161e8:	3301      	adds	r3, #1
 81161ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 81161ee:	b914      	cbnz	r4, 81161f6 <__match+0x12>
 81161f0:	6003      	str	r3, [r0, #0]
 81161f2:	2001      	movs	r0, #1
 81161f4:	bd30      	pop	{r4, r5, pc}
 81161f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81161fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81161fe:	2d19      	cmp	r5, #25
 8116200:	bf98      	it	ls
 8116202:	3220      	addls	r2, #32
 8116204:	42a2      	cmp	r2, r4
 8116206:	d0f0      	beq.n	81161ea <__match+0x6>
 8116208:	2000      	movs	r0, #0
 811620a:	e7f3      	b.n	81161f4 <__match+0x10>

0811620c <__hexnan>:
 811620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116210:	680b      	ldr	r3, [r1, #0]
 8116212:	6801      	ldr	r1, [r0, #0]
 8116214:	115e      	asrs	r6, r3, #5
 8116216:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811621a:	f013 031f 	ands.w	r3, r3, #31
 811621e:	b087      	sub	sp, #28
 8116220:	bf18      	it	ne
 8116222:	3604      	addne	r6, #4
 8116224:	2500      	movs	r5, #0
 8116226:	1f37      	subs	r7, r6, #4
 8116228:	4682      	mov	sl, r0
 811622a:	4690      	mov	r8, r2
 811622c:	9301      	str	r3, [sp, #4]
 811622e:	f846 5c04 	str.w	r5, [r6, #-4]
 8116232:	46b9      	mov	r9, r7
 8116234:	463c      	mov	r4, r7
 8116236:	9502      	str	r5, [sp, #8]
 8116238:	46ab      	mov	fp, r5
 811623a:	784a      	ldrb	r2, [r1, #1]
 811623c:	1c4b      	adds	r3, r1, #1
 811623e:	9303      	str	r3, [sp, #12]
 8116240:	b342      	cbz	r2, 8116294 <__hexnan+0x88>
 8116242:	4610      	mov	r0, r2
 8116244:	9105      	str	r1, [sp, #20]
 8116246:	9204      	str	r2, [sp, #16]
 8116248:	f7ff fd94 	bl	8115d74 <__hexdig_fun>
 811624c:	2800      	cmp	r0, #0
 811624e:	d151      	bne.n	81162f4 <__hexnan+0xe8>
 8116250:	9a04      	ldr	r2, [sp, #16]
 8116252:	9905      	ldr	r1, [sp, #20]
 8116254:	2a20      	cmp	r2, #32
 8116256:	d818      	bhi.n	811628a <__hexnan+0x7e>
 8116258:	9b02      	ldr	r3, [sp, #8]
 811625a:	459b      	cmp	fp, r3
 811625c:	dd13      	ble.n	8116286 <__hexnan+0x7a>
 811625e:	454c      	cmp	r4, r9
 8116260:	d206      	bcs.n	8116270 <__hexnan+0x64>
 8116262:	2d07      	cmp	r5, #7
 8116264:	dc04      	bgt.n	8116270 <__hexnan+0x64>
 8116266:	462a      	mov	r2, r5
 8116268:	4649      	mov	r1, r9
 811626a:	4620      	mov	r0, r4
 811626c:	f7ff ffa8 	bl	81161c0 <L_shift>
 8116270:	4544      	cmp	r4, r8
 8116272:	d952      	bls.n	811631a <__hexnan+0x10e>
 8116274:	2300      	movs	r3, #0
 8116276:	f1a4 0904 	sub.w	r9, r4, #4
 811627a:	f844 3c04 	str.w	r3, [r4, #-4]
 811627e:	f8cd b008 	str.w	fp, [sp, #8]
 8116282:	464c      	mov	r4, r9
 8116284:	461d      	mov	r5, r3
 8116286:	9903      	ldr	r1, [sp, #12]
 8116288:	e7d7      	b.n	811623a <__hexnan+0x2e>
 811628a:	2a29      	cmp	r2, #41	@ 0x29
 811628c:	d157      	bne.n	811633e <__hexnan+0x132>
 811628e:	3102      	adds	r1, #2
 8116290:	f8ca 1000 	str.w	r1, [sl]
 8116294:	f1bb 0f00 	cmp.w	fp, #0
 8116298:	d051      	beq.n	811633e <__hexnan+0x132>
 811629a:	454c      	cmp	r4, r9
 811629c:	d206      	bcs.n	81162ac <__hexnan+0xa0>
 811629e:	2d07      	cmp	r5, #7
 81162a0:	dc04      	bgt.n	81162ac <__hexnan+0xa0>
 81162a2:	462a      	mov	r2, r5
 81162a4:	4649      	mov	r1, r9
 81162a6:	4620      	mov	r0, r4
 81162a8:	f7ff ff8a 	bl	81161c0 <L_shift>
 81162ac:	4544      	cmp	r4, r8
 81162ae:	d936      	bls.n	811631e <__hexnan+0x112>
 81162b0:	f1a8 0204 	sub.w	r2, r8, #4
 81162b4:	4623      	mov	r3, r4
 81162b6:	f853 1b04 	ldr.w	r1, [r3], #4
 81162ba:	f842 1f04 	str.w	r1, [r2, #4]!
 81162be:	429f      	cmp	r7, r3
 81162c0:	d2f9      	bcs.n	81162b6 <__hexnan+0xaa>
 81162c2:	1b3b      	subs	r3, r7, r4
 81162c4:	f023 0303 	bic.w	r3, r3, #3
 81162c8:	3304      	adds	r3, #4
 81162ca:	3401      	adds	r4, #1
 81162cc:	3e03      	subs	r6, #3
 81162ce:	42b4      	cmp	r4, r6
 81162d0:	bf88      	it	hi
 81162d2:	2304      	movhi	r3, #4
 81162d4:	4443      	add	r3, r8
 81162d6:	2200      	movs	r2, #0
 81162d8:	f843 2b04 	str.w	r2, [r3], #4
 81162dc:	429f      	cmp	r7, r3
 81162de:	d2fb      	bcs.n	81162d8 <__hexnan+0xcc>
 81162e0:	683b      	ldr	r3, [r7, #0]
 81162e2:	b91b      	cbnz	r3, 81162ec <__hexnan+0xe0>
 81162e4:	4547      	cmp	r7, r8
 81162e6:	d128      	bne.n	811633a <__hexnan+0x12e>
 81162e8:	2301      	movs	r3, #1
 81162ea:	603b      	str	r3, [r7, #0]
 81162ec:	2005      	movs	r0, #5
 81162ee:	b007      	add	sp, #28
 81162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81162f4:	3501      	adds	r5, #1
 81162f6:	2d08      	cmp	r5, #8
 81162f8:	f10b 0b01 	add.w	fp, fp, #1
 81162fc:	dd06      	ble.n	811630c <__hexnan+0x100>
 81162fe:	4544      	cmp	r4, r8
 8116300:	d9c1      	bls.n	8116286 <__hexnan+0x7a>
 8116302:	2300      	movs	r3, #0
 8116304:	f844 3c04 	str.w	r3, [r4, #-4]
 8116308:	2501      	movs	r5, #1
 811630a:	3c04      	subs	r4, #4
 811630c:	6822      	ldr	r2, [r4, #0]
 811630e:	f000 000f 	and.w	r0, r0, #15
 8116312:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8116316:	6020      	str	r0, [r4, #0]
 8116318:	e7b5      	b.n	8116286 <__hexnan+0x7a>
 811631a:	2508      	movs	r5, #8
 811631c:	e7b3      	b.n	8116286 <__hexnan+0x7a>
 811631e:	9b01      	ldr	r3, [sp, #4]
 8116320:	2b00      	cmp	r3, #0
 8116322:	d0dd      	beq.n	81162e0 <__hexnan+0xd4>
 8116324:	f1c3 0320 	rsb	r3, r3, #32
 8116328:	f04f 32ff 	mov.w	r2, #4294967295
 811632c:	40da      	lsrs	r2, r3
 811632e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8116332:	4013      	ands	r3, r2
 8116334:	f846 3c04 	str.w	r3, [r6, #-4]
 8116338:	e7d2      	b.n	81162e0 <__hexnan+0xd4>
 811633a:	3f04      	subs	r7, #4
 811633c:	e7d0      	b.n	81162e0 <__hexnan+0xd4>
 811633e:	2004      	movs	r0, #4
 8116340:	e7d5      	b.n	81162ee <__hexnan+0xe2>

08116342 <__ascii_mbtowc>:
 8116342:	b082      	sub	sp, #8
 8116344:	b901      	cbnz	r1, 8116348 <__ascii_mbtowc+0x6>
 8116346:	a901      	add	r1, sp, #4
 8116348:	b142      	cbz	r2, 811635c <__ascii_mbtowc+0x1a>
 811634a:	b14b      	cbz	r3, 8116360 <__ascii_mbtowc+0x1e>
 811634c:	7813      	ldrb	r3, [r2, #0]
 811634e:	600b      	str	r3, [r1, #0]
 8116350:	7812      	ldrb	r2, [r2, #0]
 8116352:	1e10      	subs	r0, r2, #0
 8116354:	bf18      	it	ne
 8116356:	2001      	movne	r0, #1
 8116358:	b002      	add	sp, #8
 811635a:	4770      	bx	lr
 811635c:	4610      	mov	r0, r2
 811635e:	e7fb      	b.n	8116358 <__ascii_mbtowc+0x16>
 8116360:	f06f 0001 	mvn.w	r0, #1
 8116364:	e7f8      	b.n	8116358 <__ascii_mbtowc+0x16>

08116366 <_realloc_r>:
 8116366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811636a:	4680      	mov	r8, r0
 811636c:	4615      	mov	r5, r2
 811636e:	460c      	mov	r4, r1
 8116370:	b921      	cbnz	r1, 811637c <_realloc_r+0x16>
 8116372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8116376:	4611      	mov	r1, r2
 8116378:	f7fb bd84 	b.w	8111e84 <_malloc_r>
 811637c:	b92a      	cbnz	r2, 811638a <_realloc_r+0x24>
 811637e:	f7fd fd4b 	bl	8113e18 <_free_r>
 8116382:	2400      	movs	r4, #0
 8116384:	4620      	mov	r0, r4
 8116386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811638a:	f000 f8ab 	bl	81164e4 <_malloc_usable_size_r>
 811638e:	4285      	cmp	r5, r0
 8116390:	4606      	mov	r6, r0
 8116392:	d802      	bhi.n	811639a <_realloc_r+0x34>
 8116394:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8116398:	d8f4      	bhi.n	8116384 <_realloc_r+0x1e>
 811639a:	4629      	mov	r1, r5
 811639c:	4640      	mov	r0, r8
 811639e:	f7fb fd71 	bl	8111e84 <_malloc_r>
 81163a2:	4607      	mov	r7, r0
 81163a4:	2800      	cmp	r0, #0
 81163a6:	d0ec      	beq.n	8116382 <_realloc_r+0x1c>
 81163a8:	42b5      	cmp	r5, r6
 81163aa:	462a      	mov	r2, r5
 81163ac:	4621      	mov	r1, r4
 81163ae:	bf28      	it	cs
 81163b0:	4632      	movcs	r2, r6
 81163b2:	f7fc fec6 	bl	8113142 <memcpy>
 81163b6:	4621      	mov	r1, r4
 81163b8:	4640      	mov	r0, r8
 81163ba:	f7fd fd2d 	bl	8113e18 <_free_r>
 81163be:	463c      	mov	r4, r7
 81163c0:	e7e0      	b.n	8116384 <_realloc_r+0x1e>

081163c2 <__ascii_wctomb>:
 81163c2:	4603      	mov	r3, r0
 81163c4:	4608      	mov	r0, r1
 81163c6:	b141      	cbz	r1, 81163da <__ascii_wctomb+0x18>
 81163c8:	2aff      	cmp	r2, #255	@ 0xff
 81163ca:	d904      	bls.n	81163d6 <__ascii_wctomb+0x14>
 81163cc:	228a      	movs	r2, #138	@ 0x8a
 81163ce:	601a      	str	r2, [r3, #0]
 81163d0:	f04f 30ff 	mov.w	r0, #4294967295
 81163d4:	4770      	bx	lr
 81163d6:	700a      	strb	r2, [r1, #0]
 81163d8:	2001      	movs	r0, #1
 81163da:	4770      	bx	lr

081163dc <__swhatbuf_r>:
 81163dc:	b570      	push	{r4, r5, r6, lr}
 81163de:	460c      	mov	r4, r1
 81163e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81163e4:	2900      	cmp	r1, #0
 81163e6:	b096      	sub	sp, #88	@ 0x58
 81163e8:	4615      	mov	r5, r2
 81163ea:	461e      	mov	r6, r3
 81163ec:	da0d      	bge.n	811640a <__swhatbuf_r+0x2e>
 81163ee:	89a3      	ldrh	r3, [r4, #12]
 81163f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81163f4:	f04f 0100 	mov.w	r1, #0
 81163f8:	bf14      	ite	ne
 81163fa:	2340      	movne	r3, #64	@ 0x40
 81163fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8116400:	2000      	movs	r0, #0
 8116402:	6031      	str	r1, [r6, #0]
 8116404:	602b      	str	r3, [r5, #0]
 8116406:	b016      	add	sp, #88	@ 0x58
 8116408:	bd70      	pop	{r4, r5, r6, pc}
 811640a:	466a      	mov	r2, sp
 811640c:	f000 f848 	bl	81164a0 <_fstat_r>
 8116410:	2800      	cmp	r0, #0
 8116412:	dbec      	blt.n	81163ee <__swhatbuf_r+0x12>
 8116414:	9901      	ldr	r1, [sp, #4]
 8116416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811641a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811641e:	4259      	negs	r1, r3
 8116420:	4159      	adcs	r1, r3
 8116422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8116426:	e7eb      	b.n	8116400 <__swhatbuf_r+0x24>

08116428 <__smakebuf_r>:
 8116428:	898b      	ldrh	r3, [r1, #12]
 811642a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811642c:	079d      	lsls	r5, r3, #30
 811642e:	4606      	mov	r6, r0
 8116430:	460c      	mov	r4, r1
 8116432:	d507      	bpl.n	8116444 <__smakebuf_r+0x1c>
 8116434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8116438:	6023      	str	r3, [r4, #0]
 811643a:	6123      	str	r3, [r4, #16]
 811643c:	2301      	movs	r3, #1
 811643e:	6163      	str	r3, [r4, #20]
 8116440:	b003      	add	sp, #12
 8116442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8116444:	ab01      	add	r3, sp, #4
 8116446:	466a      	mov	r2, sp
 8116448:	f7ff ffc8 	bl	81163dc <__swhatbuf_r>
 811644c:	9f00      	ldr	r7, [sp, #0]
 811644e:	4605      	mov	r5, r0
 8116450:	4639      	mov	r1, r7
 8116452:	4630      	mov	r0, r6
 8116454:	f7fb fd16 	bl	8111e84 <_malloc_r>
 8116458:	b948      	cbnz	r0, 811646e <__smakebuf_r+0x46>
 811645a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811645e:	059a      	lsls	r2, r3, #22
 8116460:	d4ee      	bmi.n	8116440 <__smakebuf_r+0x18>
 8116462:	f023 0303 	bic.w	r3, r3, #3
 8116466:	f043 0302 	orr.w	r3, r3, #2
 811646a:	81a3      	strh	r3, [r4, #12]
 811646c:	e7e2      	b.n	8116434 <__smakebuf_r+0xc>
 811646e:	89a3      	ldrh	r3, [r4, #12]
 8116470:	6020      	str	r0, [r4, #0]
 8116472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8116476:	81a3      	strh	r3, [r4, #12]
 8116478:	9b01      	ldr	r3, [sp, #4]
 811647a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811647e:	b15b      	cbz	r3, 8116498 <__smakebuf_r+0x70>
 8116480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8116484:	4630      	mov	r0, r6
 8116486:	f000 f81d 	bl	81164c4 <_isatty_r>
 811648a:	b128      	cbz	r0, 8116498 <__smakebuf_r+0x70>
 811648c:	89a3      	ldrh	r3, [r4, #12]
 811648e:	f023 0303 	bic.w	r3, r3, #3
 8116492:	f043 0301 	orr.w	r3, r3, #1
 8116496:	81a3      	strh	r3, [r4, #12]
 8116498:	89a3      	ldrh	r3, [r4, #12]
 811649a:	431d      	orrs	r5, r3
 811649c:	81a5      	strh	r5, [r4, #12]
 811649e:	e7cf      	b.n	8116440 <__smakebuf_r+0x18>

081164a0 <_fstat_r>:
 81164a0:	b538      	push	{r3, r4, r5, lr}
 81164a2:	4d07      	ldr	r5, [pc, #28]	@ (81164c0 <_fstat_r+0x20>)
 81164a4:	2300      	movs	r3, #0
 81164a6:	4604      	mov	r4, r0
 81164a8:	4608      	mov	r0, r1
 81164aa:	4611      	mov	r1, r2
 81164ac:	602b      	str	r3, [r5, #0]
 81164ae:	f7eb ff4f 	bl	8102350 <_fstat>
 81164b2:	1c43      	adds	r3, r0, #1
 81164b4:	d102      	bne.n	81164bc <_fstat_r+0x1c>
 81164b6:	682b      	ldr	r3, [r5, #0]
 81164b8:	b103      	cbz	r3, 81164bc <_fstat_r+0x1c>
 81164ba:	6023      	str	r3, [r4, #0]
 81164bc:	bd38      	pop	{r3, r4, r5, pc}
 81164be:	bf00      	nop
 81164c0:	1000517c 	.word	0x1000517c

081164c4 <_isatty_r>:
 81164c4:	b538      	push	{r3, r4, r5, lr}
 81164c6:	4d06      	ldr	r5, [pc, #24]	@ (81164e0 <_isatty_r+0x1c>)
 81164c8:	2300      	movs	r3, #0
 81164ca:	4604      	mov	r4, r0
 81164cc:	4608      	mov	r0, r1
 81164ce:	602b      	str	r3, [r5, #0]
 81164d0:	f7eb ff4e 	bl	8102370 <_isatty>
 81164d4:	1c43      	adds	r3, r0, #1
 81164d6:	d102      	bne.n	81164de <_isatty_r+0x1a>
 81164d8:	682b      	ldr	r3, [r5, #0]
 81164da:	b103      	cbz	r3, 81164de <_isatty_r+0x1a>
 81164dc:	6023      	str	r3, [r4, #0]
 81164de:	bd38      	pop	{r3, r4, r5, pc}
 81164e0:	1000517c 	.word	0x1000517c

081164e4 <_malloc_usable_size_r>:
 81164e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81164e8:	1f18      	subs	r0, r3, #4
 81164ea:	2b00      	cmp	r3, #0
 81164ec:	bfbc      	itt	lt
 81164ee:	580b      	ldrlt	r3, [r1, r0]
 81164f0:	18c0      	addlt	r0, r0, r3
 81164f2:	4770      	bx	lr

081164f4 <pow>:
 81164f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81164f6:	ed2d 8b02 	vpush	{d8}
 81164fa:	eeb0 8a40 	vmov.f32	s16, s0
 81164fe:	eef0 8a60 	vmov.f32	s17, s1
 8116502:	ec55 4b11 	vmov	r4, r5, d1
 8116506:	f000 f8ab 	bl	8116660 <__ieee754_pow>
 811650a:	4622      	mov	r2, r4
 811650c:	462b      	mov	r3, r5
 811650e:	4620      	mov	r0, r4
 8116510:	4629      	mov	r1, r5
 8116512:	ec57 6b10 	vmov	r6, r7, d0
 8116516:	f7ea fba1 	bl	8100c5c <__aeabi_dcmpun>
 811651a:	2800      	cmp	r0, #0
 811651c:	d13b      	bne.n	8116596 <pow+0xa2>
 811651e:	ec51 0b18 	vmov	r0, r1, d8
 8116522:	2200      	movs	r2, #0
 8116524:	2300      	movs	r3, #0
 8116526:	f7ea fb67 	bl	8100bf8 <__aeabi_dcmpeq>
 811652a:	b1b8      	cbz	r0, 811655c <pow+0x68>
 811652c:	2200      	movs	r2, #0
 811652e:	2300      	movs	r3, #0
 8116530:	4620      	mov	r0, r4
 8116532:	4629      	mov	r1, r5
 8116534:	f7ea fb60 	bl	8100bf8 <__aeabi_dcmpeq>
 8116538:	2800      	cmp	r0, #0
 811653a:	d146      	bne.n	81165ca <pow+0xd6>
 811653c:	ec45 4b10 	vmov	d0, r4, r5
 8116540:	f000 f848 	bl	81165d4 <finite>
 8116544:	b338      	cbz	r0, 8116596 <pow+0xa2>
 8116546:	2200      	movs	r2, #0
 8116548:	2300      	movs	r3, #0
 811654a:	4620      	mov	r0, r4
 811654c:	4629      	mov	r1, r5
 811654e:	f7ea fb5d 	bl	8100c0c <__aeabi_dcmplt>
 8116552:	b300      	cbz	r0, 8116596 <pow+0xa2>
 8116554:	f7fc fdc8 	bl	81130e8 <__errno>
 8116558:	2322      	movs	r3, #34	@ 0x22
 811655a:	e01b      	b.n	8116594 <pow+0xa0>
 811655c:	ec47 6b10 	vmov	d0, r6, r7
 8116560:	f000 f838 	bl	81165d4 <finite>
 8116564:	b9e0      	cbnz	r0, 81165a0 <pow+0xac>
 8116566:	eeb0 0a48 	vmov.f32	s0, s16
 811656a:	eef0 0a68 	vmov.f32	s1, s17
 811656e:	f000 f831 	bl	81165d4 <finite>
 8116572:	b1a8      	cbz	r0, 81165a0 <pow+0xac>
 8116574:	ec45 4b10 	vmov	d0, r4, r5
 8116578:	f000 f82c 	bl	81165d4 <finite>
 811657c:	b180      	cbz	r0, 81165a0 <pow+0xac>
 811657e:	4632      	mov	r2, r6
 8116580:	463b      	mov	r3, r7
 8116582:	4630      	mov	r0, r6
 8116584:	4639      	mov	r1, r7
 8116586:	f7ea fb69 	bl	8100c5c <__aeabi_dcmpun>
 811658a:	2800      	cmp	r0, #0
 811658c:	d0e2      	beq.n	8116554 <pow+0x60>
 811658e:	f7fc fdab 	bl	81130e8 <__errno>
 8116592:	2321      	movs	r3, #33	@ 0x21
 8116594:	6003      	str	r3, [r0, #0]
 8116596:	ecbd 8b02 	vpop	{d8}
 811659a:	ec47 6b10 	vmov	d0, r6, r7
 811659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81165a0:	2200      	movs	r2, #0
 81165a2:	2300      	movs	r3, #0
 81165a4:	4630      	mov	r0, r6
 81165a6:	4639      	mov	r1, r7
 81165a8:	f7ea fb26 	bl	8100bf8 <__aeabi_dcmpeq>
 81165ac:	2800      	cmp	r0, #0
 81165ae:	d0f2      	beq.n	8116596 <pow+0xa2>
 81165b0:	eeb0 0a48 	vmov.f32	s0, s16
 81165b4:	eef0 0a68 	vmov.f32	s1, s17
 81165b8:	f000 f80c 	bl	81165d4 <finite>
 81165bc:	2800      	cmp	r0, #0
 81165be:	d0ea      	beq.n	8116596 <pow+0xa2>
 81165c0:	ec45 4b10 	vmov	d0, r4, r5
 81165c4:	f000 f806 	bl	81165d4 <finite>
 81165c8:	e7c3      	b.n	8116552 <pow+0x5e>
 81165ca:	4f01      	ldr	r7, [pc, #4]	@ (81165d0 <pow+0xdc>)
 81165cc:	2600      	movs	r6, #0
 81165ce:	e7e2      	b.n	8116596 <pow+0xa2>
 81165d0:	3ff00000 	.word	0x3ff00000

081165d4 <finite>:
 81165d4:	b082      	sub	sp, #8
 81165d6:	ed8d 0b00 	vstr	d0, [sp]
 81165da:	9801      	ldr	r0, [sp, #4]
 81165dc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 81165e0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 81165e4:	0fc0      	lsrs	r0, r0, #31
 81165e6:	b002      	add	sp, #8
 81165e8:	4770      	bx	lr
	...

081165ec <trunc>:
 81165ec:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 81165f0:	ec5c bb10 	vmov	fp, ip, d0
 81165f4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 81165f8:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 81165fc:	2913      	cmp	r1, #19
 81165fe:	4664      	mov	r4, ip
 8116600:	dc14      	bgt.n	811662c <trunc+0x40>
 8116602:	2900      	cmp	r1, #0
 8116604:	bfa4      	itt	ge
 8116606:	4b15      	ldrge	r3, [pc, #84]	@ (811665c <trunc+0x70>)
 8116608:	fa43 f101 	asrge.w	r1, r3, r1
 811660c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8116610:	bfad      	iteet	ge
 8116612:	4021      	andge	r1, r4
 8116614:	2200      	movlt	r2, #0
 8116616:	4603      	movlt	r3, r0
 8116618:	2200      	movge	r2, #0
 811661a:	bfa8      	it	ge
 811661c:	ea41 0300 	orrge.w	r3, r1, r0
 8116620:	4693      	mov	fp, r2
 8116622:	469c      	mov	ip, r3
 8116624:	ec4c bb10 	vmov	d0, fp, ip
 8116628:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 811662c:	2933      	cmp	r1, #51	@ 0x33
 811662e:	dd0b      	ble.n	8116648 <trunc+0x5c>
 8116630:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8116634:	d1f6      	bne.n	8116624 <trunc+0x38>
 8116636:	465a      	mov	r2, fp
 8116638:	4663      	mov	r3, ip
 811663a:	4658      	mov	r0, fp
 811663c:	4621      	mov	r1, r4
 811663e:	f7e9 febd 	bl	81003bc <__adddf3>
 8116642:	4683      	mov	fp, r0
 8116644:	468c      	mov	ip, r1
 8116646:	e7ed      	b.n	8116624 <trunc+0x38>
 8116648:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 811664c:	f04f 33ff 	mov.w	r3, #4294967295
 8116650:	40c3      	lsrs	r3, r0
 8116652:	ea2b 0603 	bic.w	r6, fp, r3
 8116656:	46b3      	mov	fp, r6
 8116658:	46a4      	mov	ip, r4
 811665a:	e7e3      	b.n	8116624 <trunc+0x38>
 811665c:	fff00000 	.word	0xfff00000

08116660 <__ieee754_pow>:
 8116660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116664:	b091      	sub	sp, #68	@ 0x44
 8116666:	ed8d 1b00 	vstr	d1, [sp]
 811666a:	e9dd 1900 	ldrd	r1, r9, [sp]
 811666e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8116672:	ea5a 0001 	orrs.w	r0, sl, r1
 8116676:	ec57 6b10 	vmov	r6, r7, d0
 811667a:	d113      	bne.n	81166a4 <__ieee754_pow+0x44>
 811667c:	19b3      	adds	r3, r6, r6
 811667e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8116682:	4152      	adcs	r2, r2
 8116684:	4298      	cmp	r0, r3
 8116686:	4b98      	ldr	r3, [pc, #608]	@ (81168e8 <__ieee754_pow+0x288>)
 8116688:	4193      	sbcs	r3, r2
 811668a:	f080 84ea 	bcs.w	8117062 <__ieee754_pow+0xa02>
 811668e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8116692:	4630      	mov	r0, r6
 8116694:	4639      	mov	r1, r7
 8116696:	f7e9 fe91 	bl	81003bc <__adddf3>
 811669a:	ec41 0b10 	vmov	d0, r0, r1
 811669e:	b011      	add	sp, #68	@ 0x44
 81166a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81166a4:	4a91      	ldr	r2, [pc, #580]	@ (81168ec <__ieee754_pow+0x28c>)
 81166a6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 81166aa:	4590      	cmp	r8, r2
 81166ac:	463d      	mov	r5, r7
 81166ae:	4633      	mov	r3, r6
 81166b0:	d806      	bhi.n	81166c0 <__ieee754_pow+0x60>
 81166b2:	d101      	bne.n	81166b8 <__ieee754_pow+0x58>
 81166b4:	2e00      	cmp	r6, #0
 81166b6:	d1ea      	bne.n	811668e <__ieee754_pow+0x2e>
 81166b8:	4592      	cmp	sl, r2
 81166ba:	d801      	bhi.n	81166c0 <__ieee754_pow+0x60>
 81166bc:	d10e      	bne.n	81166dc <__ieee754_pow+0x7c>
 81166be:	b169      	cbz	r1, 81166dc <__ieee754_pow+0x7c>
 81166c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 81166c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 81166c8:	431d      	orrs	r5, r3
 81166ca:	d1e0      	bne.n	811668e <__ieee754_pow+0x2e>
 81166cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 81166d0:	18db      	adds	r3, r3, r3
 81166d2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 81166d6:	4152      	adcs	r2, r2
 81166d8:	429d      	cmp	r5, r3
 81166da:	e7d4      	b.n	8116686 <__ieee754_pow+0x26>
 81166dc:	2d00      	cmp	r5, #0
 81166de:	46c3      	mov	fp, r8
 81166e0:	da3a      	bge.n	8116758 <__ieee754_pow+0xf8>
 81166e2:	4a83      	ldr	r2, [pc, #524]	@ (81168f0 <__ieee754_pow+0x290>)
 81166e4:	4592      	cmp	sl, r2
 81166e6:	d84d      	bhi.n	8116784 <__ieee754_pow+0x124>
 81166e8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 81166ec:	4592      	cmp	sl, r2
 81166ee:	f240 84c7 	bls.w	8117080 <__ieee754_pow+0xa20>
 81166f2:	ea4f 522a 	mov.w	r2, sl, asr #20
 81166f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 81166fa:	2a14      	cmp	r2, #20
 81166fc:	dd0f      	ble.n	811671e <__ieee754_pow+0xbe>
 81166fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8116702:	fa21 f402 	lsr.w	r4, r1, r2
 8116706:	fa04 f202 	lsl.w	r2, r4, r2
 811670a:	428a      	cmp	r2, r1
 811670c:	f040 84b8 	bne.w	8117080 <__ieee754_pow+0xa20>
 8116710:	f004 0401 	and.w	r4, r4, #1
 8116714:	f1c4 0402 	rsb	r4, r4, #2
 8116718:	2900      	cmp	r1, #0
 811671a:	d158      	bne.n	81167ce <__ieee754_pow+0x16e>
 811671c:	e00e      	b.n	811673c <__ieee754_pow+0xdc>
 811671e:	2900      	cmp	r1, #0
 8116720:	d154      	bne.n	81167cc <__ieee754_pow+0x16c>
 8116722:	f1c2 0214 	rsb	r2, r2, #20
 8116726:	fa4a f402 	asr.w	r4, sl, r2
 811672a:	fa04 f202 	lsl.w	r2, r4, r2
 811672e:	4552      	cmp	r2, sl
 8116730:	f040 84a3 	bne.w	811707a <__ieee754_pow+0xa1a>
 8116734:	f004 0401 	and.w	r4, r4, #1
 8116738:	f1c4 0402 	rsb	r4, r4, #2
 811673c:	4a6d      	ldr	r2, [pc, #436]	@ (81168f4 <__ieee754_pow+0x294>)
 811673e:	4592      	cmp	sl, r2
 8116740:	d12e      	bne.n	81167a0 <__ieee754_pow+0x140>
 8116742:	f1b9 0f00 	cmp.w	r9, #0
 8116746:	f280 8494 	bge.w	8117072 <__ieee754_pow+0xa12>
 811674a:	496a      	ldr	r1, [pc, #424]	@ (81168f4 <__ieee754_pow+0x294>)
 811674c:	4632      	mov	r2, r6
 811674e:	463b      	mov	r3, r7
 8116750:	2000      	movs	r0, #0
 8116752:	f7ea f913 	bl	810097c <__aeabi_ddiv>
 8116756:	e7a0      	b.n	811669a <__ieee754_pow+0x3a>
 8116758:	2400      	movs	r4, #0
 811675a:	bbc1      	cbnz	r1, 81167ce <__ieee754_pow+0x16e>
 811675c:	4a63      	ldr	r2, [pc, #396]	@ (81168ec <__ieee754_pow+0x28c>)
 811675e:	4592      	cmp	sl, r2
 8116760:	d1ec      	bne.n	811673c <__ieee754_pow+0xdc>
 8116762:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8116766:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 811676a:	431a      	orrs	r2, r3
 811676c:	f000 8479 	beq.w	8117062 <__ieee754_pow+0xa02>
 8116770:	4b61      	ldr	r3, [pc, #388]	@ (81168f8 <__ieee754_pow+0x298>)
 8116772:	4598      	cmp	r8, r3
 8116774:	d908      	bls.n	8116788 <__ieee754_pow+0x128>
 8116776:	f1b9 0f00 	cmp.w	r9, #0
 811677a:	f2c0 8476 	blt.w	811706a <__ieee754_pow+0xa0a>
 811677e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116782:	e78a      	b.n	811669a <__ieee754_pow+0x3a>
 8116784:	2402      	movs	r4, #2
 8116786:	e7e8      	b.n	811675a <__ieee754_pow+0xfa>
 8116788:	f1b9 0f00 	cmp.w	r9, #0
 811678c:	f04f 0000 	mov.w	r0, #0
 8116790:	f04f 0100 	mov.w	r1, #0
 8116794:	da81      	bge.n	811669a <__ieee754_pow+0x3a>
 8116796:	e9dd 0300 	ldrd	r0, r3, [sp]
 811679a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 811679e:	e77c      	b.n	811669a <__ieee754_pow+0x3a>
 81167a0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 81167a4:	d106      	bne.n	81167b4 <__ieee754_pow+0x154>
 81167a6:	4632      	mov	r2, r6
 81167a8:	463b      	mov	r3, r7
 81167aa:	4630      	mov	r0, r6
 81167ac:	4639      	mov	r1, r7
 81167ae:	f7e9 ffbb 	bl	8100728 <__aeabi_dmul>
 81167b2:	e772      	b.n	811669a <__ieee754_pow+0x3a>
 81167b4:	4a51      	ldr	r2, [pc, #324]	@ (81168fc <__ieee754_pow+0x29c>)
 81167b6:	4591      	cmp	r9, r2
 81167b8:	d109      	bne.n	81167ce <__ieee754_pow+0x16e>
 81167ba:	2d00      	cmp	r5, #0
 81167bc:	db07      	blt.n	81167ce <__ieee754_pow+0x16e>
 81167be:	ec47 6b10 	vmov	d0, r6, r7
 81167c2:	b011      	add	sp, #68	@ 0x44
 81167c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81167c8:	f000 bd52 	b.w	8117270 <__ieee754_sqrt>
 81167cc:	2400      	movs	r4, #0
 81167ce:	ec47 6b10 	vmov	d0, r6, r7
 81167d2:	9302      	str	r3, [sp, #8]
 81167d4:	f000 fc88 	bl	81170e8 <fabs>
 81167d8:	9b02      	ldr	r3, [sp, #8]
 81167da:	ec51 0b10 	vmov	r0, r1, d0
 81167de:	bb53      	cbnz	r3, 8116836 <__ieee754_pow+0x1d6>
 81167e0:	4b44      	ldr	r3, [pc, #272]	@ (81168f4 <__ieee754_pow+0x294>)
 81167e2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 81167e6:	429a      	cmp	r2, r3
 81167e8:	d002      	beq.n	81167f0 <__ieee754_pow+0x190>
 81167ea:	f1b8 0f00 	cmp.w	r8, #0
 81167ee:	d122      	bne.n	8116836 <__ieee754_pow+0x1d6>
 81167f0:	f1b9 0f00 	cmp.w	r9, #0
 81167f4:	da05      	bge.n	8116802 <__ieee754_pow+0x1a2>
 81167f6:	4602      	mov	r2, r0
 81167f8:	460b      	mov	r3, r1
 81167fa:	2000      	movs	r0, #0
 81167fc:	493d      	ldr	r1, [pc, #244]	@ (81168f4 <__ieee754_pow+0x294>)
 81167fe:	f7ea f8bd 	bl	810097c <__aeabi_ddiv>
 8116802:	2d00      	cmp	r5, #0
 8116804:	f6bf af49 	bge.w	811669a <__ieee754_pow+0x3a>
 8116808:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 811680c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8116810:	ea58 0804 	orrs.w	r8, r8, r4
 8116814:	d108      	bne.n	8116828 <__ieee754_pow+0x1c8>
 8116816:	4602      	mov	r2, r0
 8116818:	460b      	mov	r3, r1
 811681a:	4610      	mov	r0, r2
 811681c:	4619      	mov	r1, r3
 811681e:	f7e9 fdcb 	bl	81003b8 <__aeabi_dsub>
 8116822:	4602      	mov	r2, r0
 8116824:	460b      	mov	r3, r1
 8116826:	e794      	b.n	8116752 <__ieee754_pow+0xf2>
 8116828:	2c01      	cmp	r4, #1
 811682a:	f47f af36 	bne.w	811669a <__ieee754_pow+0x3a>
 811682e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116832:	4619      	mov	r1, r3
 8116834:	e731      	b.n	811669a <__ieee754_pow+0x3a>
 8116836:	0feb      	lsrs	r3, r5, #31
 8116838:	3b01      	subs	r3, #1
 811683a:	ea53 0204 	orrs.w	r2, r3, r4
 811683e:	d102      	bne.n	8116846 <__ieee754_pow+0x1e6>
 8116840:	4632      	mov	r2, r6
 8116842:	463b      	mov	r3, r7
 8116844:	e7e9      	b.n	811681a <__ieee754_pow+0x1ba>
 8116846:	3c01      	subs	r4, #1
 8116848:	431c      	orrs	r4, r3
 811684a:	d016      	beq.n	811687a <__ieee754_pow+0x21a>
 811684c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 81168d8 <__ieee754_pow+0x278>
 8116850:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8116854:	ed8d 7b02 	vstr	d7, [sp, #8]
 8116858:	f240 8112 	bls.w	8116a80 <__ieee754_pow+0x420>
 811685c:	4b28      	ldr	r3, [pc, #160]	@ (8116900 <__ieee754_pow+0x2a0>)
 811685e:	459a      	cmp	sl, r3
 8116860:	4b25      	ldr	r3, [pc, #148]	@ (81168f8 <__ieee754_pow+0x298>)
 8116862:	d916      	bls.n	8116892 <__ieee754_pow+0x232>
 8116864:	4598      	cmp	r8, r3
 8116866:	d80b      	bhi.n	8116880 <__ieee754_pow+0x220>
 8116868:	f1b9 0f00 	cmp.w	r9, #0
 811686c:	da0b      	bge.n	8116886 <__ieee754_pow+0x226>
 811686e:	2000      	movs	r0, #0
 8116870:	b011      	add	sp, #68	@ 0x44
 8116872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116876:	f000 bcf3 	b.w	8117260 <__math_oflow>
 811687a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 81168e0 <__ieee754_pow+0x280>
 811687e:	e7e7      	b.n	8116850 <__ieee754_pow+0x1f0>
 8116880:	f1b9 0f00 	cmp.w	r9, #0
 8116884:	dcf3      	bgt.n	811686e <__ieee754_pow+0x20e>
 8116886:	2000      	movs	r0, #0
 8116888:	b011      	add	sp, #68	@ 0x44
 811688a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811688e:	f000 bcdf 	b.w	8117250 <__math_uflow>
 8116892:	4598      	cmp	r8, r3
 8116894:	d20c      	bcs.n	81168b0 <__ieee754_pow+0x250>
 8116896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811689a:	2200      	movs	r2, #0
 811689c:	2300      	movs	r3, #0
 811689e:	f7ea f9b5 	bl	8100c0c <__aeabi_dcmplt>
 81168a2:	3800      	subs	r0, #0
 81168a4:	bf18      	it	ne
 81168a6:	2001      	movne	r0, #1
 81168a8:	f1b9 0f00 	cmp.w	r9, #0
 81168ac:	daec      	bge.n	8116888 <__ieee754_pow+0x228>
 81168ae:	e7df      	b.n	8116870 <__ieee754_pow+0x210>
 81168b0:	4b10      	ldr	r3, [pc, #64]	@ (81168f4 <__ieee754_pow+0x294>)
 81168b2:	4598      	cmp	r8, r3
 81168b4:	f04f 0200 	mov.w	r2, #0
 81168b8:	d924      	bls.n	8116904 <__ieee754_pow+0x2a4>
 81168ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81168be:	2300      	movs	r3, #0
 81168c0:	f7ea f9a4 	bl	8100c0c <__aeabi_dcmplt>
 81168c4:	3800      	subs	r0, #0
 81168c6:	bf18      	it	ne
 81168c8:	2001      	movne	r0, #1
 81168ca:	f1b9 0f00 	cmp.w	r9, #0
 81168ce:	dccf      	bgt.n	8116870 <__ieee754_pow+0x210>
 81168d0:	e7da      	b.n	8116888 <__ieee754_pow+0x228>
 81168d2:	bf00      	nop
 81168d4:	f3af 8000 	nop.w
 81168d8:	00000000 	.word	0x00000000
 81168dc:	3ff00000 	.word	0x3ff00000
 81168e0:	00000000 	.word	0x00000000
 81168e4:	bff00000 	.word	0xbff00000
 81168e8:	fff00000 	.word	0xfff00000
 81168ec:	7ff00000 	.word	0x7ff00000
 81168f0:	433fffff 	.word	0x433fffff
 81168f4:	3ff00000 	.word	0x3ff00000
 81168f8:	3fefffff 	.word	0x3fefffff
 81168fc:	3fe00000 	.word	0x3fe00000
 8116900:	43f00000 	.word	0x43f00000
 8116904:	4b5a      	ldr	r3, [pc, #360]	@ (8116a70 <__ieee754_pow+0x410>)
 8116906:	f7e9 fd57 	bl	81003b8 <__aeabi_dsub>
 811690a:	a351      	add	r3, pc, #324	@ (adr r3, 8116a50 <__ieee754_pow+0x3f0>)
 811690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116910:	4604      	mov	r4, r0
 8116912:	460d      	mov	r5, r1
 8116914:	f7e9 ff08 	bl	8100728 <__aeabi_dmul>
 8116918:	a34f      	add	r3, pc, #316	@ (adr r3, 8116a58 <__ieee754_pow+0x3f8>)
 811691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811691e:	4606      	mov	r6, r0
 8116920:	460f      	mov	r7, r1
 8116922:	4620      	mov	r0, r4
 8116924:	4629      	mov	r1, r5
 8116926:	f7e9 feff 	bl	8100728 <__aeabi_dmul>
 811692a:	4b52      	ldr	r3, [pc, #328]	@ (8116a74 <__ieee754_pow+0x414>)
 811692c:	4682      	mov	sl, r0
 811692e:	468b      	mov	fp, r1
 8116930:	2200      	movs	r2, #0
 8116932:	4620      	mov	r0, r4
 8116934:	4629      	mov	r1, r5
 8116936:	f7e9 fef7 	bl	8100728 <__aeabi_dmul>
 811693a:	4602      	mov	r2, r0
 811693c:	460b      	mov	r3, r1
 811693e:	a148      	add	r1, pc, #288	@ (adr r1, 8116a60 <__ieee754_pow+0x400>)
 8116940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116944:	f7e9 fd38 	bl	81003b8 <__aeabi_dsub>
 8116948:	4622      	mov	r2, r4
 811694a:	462b      	mov	r3, r5
 811694c:	f7e9 feec 	bl	8100728 <__aeabi_dmul>
 8116950:	4602      	mov	r2, r0
 8116952:	460b      	mov	r3, r1
 8116954:	2000      	movs	r0, #0
 8116956:	4948      	ldr	r1, [pc, #288]	@ (8116a78 <__ieee754_pow+0x418>)
 8116958:	f7e9 fd2e 	bl	81003b8 <__aeabi_dsub>
 811695c:	4622      	mov	r2, r4
 811695e:	4680      	mov	r8, r0
 8116960:	4689      	mov	r9, r1
 8116962:	462b      	mov	r3, r5
 8116964:	4620      	mov	r0, r4
 8116966:	4629      	mov	r1, r5
 8116968:	f7e9 fede 	bl	8100728 <__aeabi_dmul>
 811696c:	4602      	mov	r2, r0
 811696e:	460b      	mov	r3, r1
 8116970:	4640      	mov	r0, r8
 8116972:	4649      	mov	r1, r9
 8116974:	f7e9 fed8 	bl	8100728 <__aeabi_dmul>
 8116978:	a33b      	add	r3, pc, #236	@ (adr r3, 8116a68 <__ieee754_pow+0x408>)
 811697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811697e:	f7e9 fed3 	bl	8100728 <__aeabi_dmul>
 8116982:	4602      	mov	r2, r0
 8116984:	460b      	mov	r3, r1
 8116986:	4650      	mov	r0, sl
 8116988:	4659      	mov	r1, fp
 811698a:	f7e9 fd15 	bl	81003b8 <__aeabi_dsub>
 811698e:	4602      	mov	r2, r0
 8116990:	460b      	mov	r3, r1
 8116992:	4680      	mov	r8, r0
 8116994:	4689      	mov	r9, r1
 8116996:	4630      	mov	r0, r6
 8116998:	4639      	mov	r1, r7
 811699a:	f7e9 fd0f 	bl	81003bc <__adddf3>
 811699e:	2400      	movs	r4, #0
 81169a0:	4632      	mov	r2, r6
 81169a2:	463b      	mov	r3, r7
 81169a4:	4620      	mov	r0, r4
 81169a6:	460d      	mov	r5, r1
 81169a8:	f7e9 fd06 	bl	81003b8 <__aeabi_dsub>
 81169ac:	4602      	mov	r2, r0
 81169ae:	460b      	mov	r3, r1
 81169b0:	4640      	mov	r0, r8
 81169b2:	4649      	mov	r1, r9
 81169b4:	f7e9 fd00 	bl	81003b8 <__aeabi_dsub>
 81169b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81169bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81169c0:	2300      	movs	r3, #0
 81169c2:	9304      	str	r3, [sp, #16]
 81169c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 81169c8:	4606      	mov	r6, r0
 81169ca:	460f      	mov	r7, r1
 81169cc:	4652      	mov	r2, sl
 81169ce:	465b      	mov	r3, fp
 81169d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 81169d4:	f7e9 fcf0 	bl	81003b8 <__aeabi_dsub>
 81169d8:	4622      	mov	r2, r4
 81169da:	462b      	mov	r3, r5
 81169dc:	f7e9 fea4 	bl	8100728 <__aeabi_dmul>
 81169e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81169e4:	4680      	mov	r8, r0
 81169e6:	4689      	mov	r9, r1
 81169e8:	4630      	mov	r0, r6
 81169ea:	4639      	mov	r1, r7
 81169ec:	f7e9 fe9c 	bl	8100728 <__aeabi_dmul>
 81169f0:	4602      	mov	r2, r0
 81169f2:	460b      	mov	r3, r1
 81169f4:	4640      	mov	r0, r8
 81169f6:	4649      	mov	r1, r9
 81169f8:	f7e9 fce0 	bl	81003bc <__adddf3>
 81169fc:	4652      	mov	r2, sl
 81169fe:	465b      	mov	r3, fp
 8116a00:	4606      	mov	r6, r0
 8116a02:	460f      	mov	r7, r1
 8116a04:	4620      	mov	r0, r4
 8116a06:	4629      	mov	r1, r5
 8116a08:	f7e9 fe8e 	bl	8100728 <__aeabi_dmul>
 8116a0c:	460b      	mov	r3, r1
 8116a0e:	4602      	mov	r2, r0
 8116a10:	4680      	mov	r8, r0
 8116a12:	4689      	mov	r9, r1
 8116a14:	4630      	mov	r0, r6
 8116a16:	4639      	mov	r1, r7
 8116a18:	f7e9 fcd0 	bl	81003bc <__adddf3>
 8116a1c:	4b17      	ldr	r3, [pc, #92]	@ (8116a7c <__ieee754_pow+0x41c>)
 8116a1e:	4299      	cmp	r1, r3
 8116a20:	4604      	mov	r4, r0
 8116a22:	460d      	mov	r5, r1
 8116a24:	468a      	mov	sl, r1
 8116a26:	468b      	mov	fp, r1
 8116a28:	f340 82ef 	ble.w	811700a <__ieee754_pow+0x9aa>
 8116a2c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8116a30:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8116a34:	4303      	orrs	r3, r0
 8116a36:	f000 81e8 	beq.w	8116e0a <__ieee754_pow+0x7aa>
 8116a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116a3e:	2200      	movs	r2, #0
 8116a40:	2300      	movs	r3, #0
 8116a42:	f7ea f8e3 	bl	8100c0c <__aeabi_dcmplt>
 8116a46:	3800      	subs	r0, #0
 8116a48:	bf18      	it	ne
 8116a4a:	2001      	movne	r0, #1
 8116a4c:	e710      	b.n	8116870 <__ieee754_pow+0x210>
 8116a4e:	bf00      	nop
 8116a50:	60000000 	.word	0x60000000
 8116a54:	3ff71547 	.word	0x3ff71547
 8116a58:	f85ddf44 	.word	0xf85ddf44
 8116a5c:	3e54ae0b 	.word	0x3e54ae0b
 8116a60:	55555555 	.word	0x55555555
 8116a64:	3fd55555 	.word	0x3fd55555
 8116a68:	652b82fe 	.word	0x652b82fe
 8116a6c:	3ff71547 	.word	0x3ff71547
 8116a70:	3ff00000 	.word	0x3ff00000
 8116a74:	3fd00000 	.word	0x3fd00000
 8116a78:	3fe00000 	.word	0x3fe00000
 8116a7c:	408fffff 	.word	0x408fffff
 8116a80:	4bd5      	ldr	r3, [pc, #852]	@ (8116dd8 <__ieee754_pow+0x778>)
 8116a82:	402b      	ands	r3, r5
 8116a84:	2200      	movs	r2, #0
 8116a86:	b92b      	cbnz	r3, 8116a94 <__ieee754_pow+0x434>
 8116a88:	4bd4      	ldr	r3, [pc, #848]	@ (8116ddc <__ieee754_pow+0x77c>)
 8116a8a:	f7e9 fe4d 	bl	8100728 <__aeabi_dmul>
 8116a8e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8116a92:	468b      	mov	fp, r1
 8116a94:	ea4f 532b 	mov.w	r3, fp, asr #20
 8116a98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8116a9c:	4413      	add	r3, r2
 8116a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8116aa0:	4bcf      	ldr	r3, [pc, #828]	@ (8116de0 <__ieee754_pow+0x780>)
 8116aa2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8116aa6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8116aaa:	459b      	cmp	fp, r3
 8116aac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8116ab0:	dd08      	ble.n	8116ac4 <__ieee754_pow+0x464>
 8116ab2:	4bcc      	ldr	r3, [pc, #816]	@ (8116de4 <__ieee754_pow+0x784>)
 8116ab4:	459b      	cmp	fp, r3
 8116ab6:	f340 81a5 	ble.w	8116e04 <__ieee754_pow+0x7a4>
 8116aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8116abc:	3301      	adds	r3, #1
 8116abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8116ac0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8116ac4:	f04f 0a00 	mov.w	sl, #0
 8116ac8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8116acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8116ace:	4bc6      	ldr	r3, [pc, #792]	@ (8116de8 <__ieee754_pow+0x788>)
 8116ad0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8116ad4:	ed93 7b00 	vldr	d7, [r3]
 8116ad8:	4629      	mov	r1, r5
 8116ada:	ec53 2b17 	vmov	r2, r3, d7
 8116ade:	ed8d 7b06 	vstr	d7, [sp, #24]
 8116ae2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8116ae6:	f7e9 fc67 	bl	81003b8 <__aeabi_dsub>
 8116aea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8116aee:	4606      	mov	r6, r0
 8116af0:	460f      	mov	r7, r1
 8116af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116af6:	f7e9 fc61 	bl	81003bc <__adddf3>
 8116afa:	4602      	mov	r2, r0
 8116afc:	460b      	mov	r3, r1
 8116afe:	2000      	movs	r0, #0
 8116b00:	49ba      	ldr	r1, [pc, #744]	@ (8116dec <__ieee754_pow+0x78c>)
 8116b02:	f7e9 ff3b 	bl	810097c <__aeabi_ddiv>
 8116b06:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8116b0a:	4602      	mov	r2, r0
 8116b0c:	460b      	mov	r3, r1
 8116b0e:	4630      	mov	r0, r6
 8116b10:	4639      	mov	r1, r7
 8116b12:	f7e9 fe09 	bl	8100728 <__aeabi_dmul>
 8116b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8116b1a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8116b1e:	106d      	asrs	r5, r5, #1
 8116b20:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8116b24:	f04f 0b00 	mov.w	fp, #0
 8116b28:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8116b2c:	4661      	mov	r1, ip
 8116b2e:	2200      	movs	r2, #0
 8116b30:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8116b34:	4658      	mov	r0, fp
 8116b36:	46e1      	mov	r9, ip
 8116b38:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8116b3c:	4614      	mov	r4, r2
 8116b3e:	461d      	mov	r5, r3
 8116b40:	f7e9 fdf2 	bl	8100728 <__aeabi_dmul>
 8116b44:	4602      	mov	r2, r0
 8116b46:	460b      	mov	r3, r1
 8116b48:	4630      	mov	r0, r6
 8116b4a:	4639      	mov	r1, r7
 8116b4c:	f7e9 fc34 	bl	81003b8 <__aeabi_dsub>
 8116b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116b54:	4606      	mov	r6, r0
 8116b56:	460f      	mov	r7, r1
 8116b58:	4620      	mov	r0, r4
 8116b5a:	4629      	mov	r1, r5
 8116b5c:	f7e9 fc2c 	bl	81003b8 <__aeabi_dsub>
 8116b60:	4602      	mov	r2, r0
 8116b62:	460b      	mov	r3, r1
 8116b64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8116b68:	f7e9 fc26 	bl	81003b8 <__aeabi_dsub>
 8116b6c:	465a      	mov	r2, fp
 8116b6e:	464b      	mov	r3, r9
 8116b70:	f7e9 fdda 	bl	8100728 <__aeabi_dmul>
 8116b74:	4602      	mov	r2, r0
 8116b76:	460b      	mov	r3, r1
 8116b78:	4630      	mov	r0, r6
 8116b7a:	4639      	mov	r1, r7
 8116b7c:	f7e9 fc1c 	bl	81003b8 <__aeabi_dsub>
 8116b80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8116b84:	f7e9 fdd0 	bl	8100728 <__aeabi_dmul>
 8116b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8116b90:	4610      	mov	r0, r2
 8116b92:	4619      	mov	r1, r3
 8116b94:	f7e9 fdc8 	bl	8100728 <__aeabi_dmul>
 8116b98:	a37d      	add	r3, pc, #500	@ (adr r3, 8116d90 <__ieee754_pow+0x730>)
 8116b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b9e:	4604      	mov	r4, r0
 8116ba0:	460d      	mov	r5, r1
 8116ba2:	f7e9 fdc1 	bl	8100728 <__aeabi_dmul>
 8116ba6:	a37c      	add	r3, pc, #496	@ (adr r3, 8116d98 <__ieee754_pow+0x738>)
 8116ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116bac:	f7e9 fc06 	bl	81003bc <__adddf3>
 8116bb0:	4622      	mov	r2, r4
 8116bb2:	462b      	mov	r3, r5
 8116bb4:	f7e9 fdb8 	bl	8100728 <__aeabi_dmul>
 8116bb8:	a379      	add	r3, pc, #484	@ (adr r3, 8116da0 <__ieee754_pow+0x740>)
 8116bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116bbe:	f7e9 fbfd 	bl	81003bc <__adddf3>
 8116bc2:	4622      	mov	r2, r4
 8116bc4:	462b      	mov	r3, r5
 8116bc6:	f7e9 fdaf 	bl	8100728 <__aeabi_dmul>
 8116bca:	a377      	add	r3, pc, #476	@ (adr r3, 8116da8 <__ieee754_pow+0x748>)
 8116bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116bd0:	f7e9 fbf4 	bl	81003bc <__adddf3>
 8116bd4:	4622      	mov	r2, r4
 8116bd6:	462b      	mov	r3, r5
 8116bd8:	f7e9 fda6 	bl	8100728 <__aeabi_dmul>
 8116bdc:	a374      	add	r3, pc, #464	@ (adr r3, 8116db0 <__ieee754_pow+0x750>)
 8116bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116be2:	f7e9 fbeb 	bl	81003bc <__adddf3>
 8116be6:	4622      	mov	r2, r4
 8116be8:	462b      	mov	r3, r5
 8116bea:	f7e9 fd9d 	bl	8100728 <__aeabi_dmul>
 8116bee:	a372      	add	r3, pc, #456	@ (adr r3, 8116db8 <__ieee754_pow+0x758>)
 8116bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116bf4:	f7e9 fbe2 	bl	81003bc <__adddf3>
 8116bf8:	4622      	mov	r2, r4
 8116bfa:	4606      	mov	r6, r0
 8116bfc:	460f      	mov	r7, r1
 8116bfe:	462b      	mov	r3, r5
 8116c00:	4620      	mov	r0, r4
 8116c02:	4629      	mov	r1, r5
 8116c04:	f7e9 fd90 	bl	8100728 <__aeabi_dmul>
 8116c08:	4602      	mov	r2, r0
 8116c0a:	460b      	mov	r3, r1
 8116c0c:	4630      	mov	r0, r6
 8116c0e:	4639      	mov	r1, r7
 8116c10:	f7e9 fd8a 	bl	8100728 <__aeabi_dmul>
 8116c14:	465a      	mov	r2, fp
 8116c16:	4604      	mov	r4, r0
 8116c18:	460d      	mov	r5, r1
 8116c1a:	464b      	mov	r3, r9
 8116c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8116c20:	f7e9 fbcc 	bl	81003bc <__adddf3>
 8116c24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116c28:	f7e9 fd7e 	bl	8100728 <__aeabi_dmul>
 8116c2c:	4622      	mov	r2, r4
 8116c2e:	462b      	mov	r3, r5
 8116c30:	f7e9 fbc4 	bl	81003bc <__adddf3>
 8116c34:	465a      	mov	r2, fp
 8116c36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8116c3a:	464b      	mov	r3, r9
 8116c3c:	4658      	mov	r0, fp
 8116c3e:	4649      	mov	r1, r9
 8116c40:	f7e9 fd72 	bl	8100728 <__aeabi_dmul>
 8116c44:	4b6a      	ldr	r3, [pc, #424]	@ (8116df0 <__ieee754_pow+0x790>)
 8116c46:	2200      	movs	r2, #0
 8116c48:	4606      	mov	r6, r0
 8116c4a:	460f      	mov	r7, r1
 8116c4c:	f7e9 fbb6 	bl	81003bc <__adddf3>
 8116c50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8116c54:	f7e9 fbb2 	bl	81003bc <__adddf3>
 8116c58:	46d8      	mov	r8, fp
 8116c5a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8116c5e:	460d      	mov	r5, r1
 8116c60:	465a      	mov	r2, fp
 8116c62:	460b      	mov	r3, r1
 8116c64:	4640      	mov	r0, r8
 8116c66:	4649      	mov	r1, r9
 8116c68:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8116c6c:	f7e9 fd5c 	bl	8100728 <__aeabi_dmul>
 8116c70:	465c      	mov	r4, fp
 8116c72:	4680      	mov	r8, r0
 8116c74:	4689      	mov	r9, r1
 8116c76:	4b5e      	ldr	r3, [pc, #376]	@ (8116df0 <__ieee754_pow+0x790>)
 8116c78:	2200      	movs	r2, #0
 8116c7a:	4620      	mov	r0, r4
 8116c7c:	4629      	mov	r1, r5
 8116c7e:	f7e9 fb9b 	bl	81003b8 <__aeabi_dsub>
 8116c82:	4632      	mov	r2, r6
 8116c84:	463b      	mov	r3, r7
 8116c86:	f7e9 fb97 	bl	81003b8 <__aeabi_dsub>
 8116c8a:	4602      	mov	r2, r0
 8116c8c:	460b      	mov	r3, r1
 8116c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8116c92:	f7e9 fb91 	bl	81003b8 <__aeabi_dsub>
 8116c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116c9a:	f7e9 fd45 	bl	8100728 <__aeabi_dmul>
 8116c9e:	4622      	mov	r2, r4
 8116ca0:	4606      	mov	r6, r0
 8116ca2:	460f      	mov	r7, r1
 8116ca4:	462b      	mov	r3, r5
 8116ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116caa:	f7e9 fd3d 	bl	8100728 <__aeabi_dmul>
 8116cae:	4602      	mov	r2, r0
 8116cb0:	460b      	mov	r3, r1
 8116cb2:	4630      	mov	r0, r6
 8116cb4:	4639      	mov	r1, r7
 8116cb6:	f7e9 fb81 	bl	81003bc <__adddf3>
 8116cba:	4606      	mov	r6, r0
 8116cbc:	460f      	mov	r7, r1
 8116cbe:	4602      	mov	r2, r0
 8116cc0:	460b      	mov	r3, r1
 8116cc2:	4640      	mov	r0, r8
 8116cc4:	4649      	mov	r1, r9
 8116cc6:	f7e9 fb79 	bl	81003bc <__adddf3>
 8116cca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8116cce:	a33c      	add	r3, pc, #240	@ (adr r3, 8116dc0 <__ieee754_pow+0x760>)
 8116cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116cd4:	4658      	mov	r0, fp
 8116cd6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8116cda:	460d      	mov	r5, r1
 8116cdc:	f7e9 fd24 	bl	8100728 <__aeabi_dmul>
 8116ce0:	465c      	mov	r4, fp
 8116ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8116ce6:	4642      	mov	r2, r8
 8116ce8:	464b      	mov	r3, r9
 8116cea:	4620      	mov	r0, r4
 8116cec:	4629      	mov	r1, r5
 8116cee:	f7e9 fb63 	bl	81003b8 <__aeabi_dsub>
 8116cf2:	4602      	mov	r2, r0
 8116cf4:	460b      	mov	r3, r1
 8116cf6:	4630      	mov	r0, r6
 8116cf8:	4639      	mov	r1, r7
 8116cfa:	f7e9 fb5d 	bl	81003b8 <__aeabi_dsub>
 8116cfe:	a332      	add	r3, pc, #200	@ (adr r3, 8116dc8 <__ieee754_pow+0x768>)
 8116d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116d04:	f7e9 fd10 	bl	8100728 <__aeabi_dmul>
 8116d08:	a331      	add	r3, pc, #196	@ (adr r3, 8116dd0 <__ieee754_pow+0x770>)
 8116d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116d0e:	4606      	mov	r6, r0
 8116d10:	460f      	mov	r7, r1
 8116d12:	4620      	mov	r0, r4
 8116d14:	4629      	mov	r1, r5
 8116d16:	f7e9 fd07 	bl	8100728 <__aeabi_dmul>
 8116d1a:	4602      	mov	r2, r0
 8116d1c:	460b      	mov	r3, r1
 8116d1e:	4630      	mov	r0, r6
 8116d20:	4639      	mov	r1, r7
 8116d22:	f7e9 fb4b 	bl	81003bc <__adddf3>
 8116d26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8116d28:	4b32      	ldr	r3, [pc, #200]	@ (8116df4 <__ieee754_pow+0x794>)
 8116d2a:	4413      	add	r3, r2
 8116d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116d30:	f7e9 fb44 	bl	81003bc <__adddf3>
 8116d34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8116d38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8116d3a:	f7e9 fc8b 	bl	8100654 <__aeabi_i2d>
 8116d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8116d40:	4b2d      	ldr	r3, [pc, #180]	@ (8116df8 <__ieee754_pow+0x798>)
 8116d42:	4413      	add	r3, r2
 8116d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8116d48:	4606      	mov	r6, r0
 8116d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116d4e:	460f      	mov	r7, r1
 8116d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8116d54:	f7e9 fb32 	bl	81003bc <__adddf3>
 8116d58:	4642      	mov	r2, r8
 8116d5a:	464b      	mov	r3, r9
 8116d5c:	f7e9 fb2e 	bl	81003bc <__adddf3>
 8116d60:	4632      	mov	r2, r6
 8116d62:	463b      	mov	r3, r7
 8116d64:	f7e9 fb2a 	bl	81003bc <__adddf3>
 8116d68:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8116d6c:	4632      	mov	r2, r6
 8116d6e:	463b      	mov	r3, r7
 8116d70:	4658      	mov	r0, fp
 8116d72:	460d      	mov	r5, r1
 8116d74:	f7e9 fb20 	bl	81003b8 <__aeabi_dsub>
 8116d78:	4642      	mov	r2, r8
 8116d7a:	464b      	mov	r3, r9
 8116d7c:	f7e9 fb1c 	bl	81003b8 <__aeabi_dsub>
 8116d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116d84:	f7e9 fb18 	bl	81003b8 <__aeabi_dsub>
 8116d88:	465c      	mov	r4, fp
 8116d8a:	4602      	mov	r2, r0
 8116d8c:	e036      	b.n	8116dfc <__ieee754_pow+0x79c>
 8116d8e:	bf00      	nop
 8116d90:	4a454eef 	.word	0x4a454eef
 8116d94:	3fca7e28 	.word	0x3fca7e28
 8116d98:	93c9db65 	.word	0x93c9db65
 8116d9c:	3fcd864a 	.word	0x3fcd864a
 8116da0:	a91d4101 	.word	0xa91d4101
 8116da4:	3fd17460 	.word	0x3fd17460
 8116da8:	518f264d 	.word	0x518f264d
 8116dac:	3fd55555 	.word	0x3fd55555
 8116db0:	db6fabff 	.word	0xdb6fabff
 8116db4:	3fdb6db6 	.word	0x3fdb6db6
 8116db8:	33333303 	.word	0x33333303
 8116dbc:	3fe33333 	.word	0x3fe33333
 8116dc0:	e0000000 	.word	0xe0000000
 8116dc4:	3feec709 	.word	0x3feec709
 8116dc8:	dc3a03fd 	.word	0xdc3a03fd
 8116dcc:	3feec709 	.word	0x3feec709
 8116dd0:	145b01f5 	.word	0x145b01f5
 8116dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8116dd8:	7ff00000 	.word	0x7ff00000
 8116ddc:	43400000 	.word	0x43400000
 8116de0:	0003988e 	.word	0x0003988e
 8116de4:	000bb679 	.word	0x000bb679
 8116de8:	08117ca0 	.word	0x08117ca0
 8116dec:	3ff00000 	.word	0x3ff00000
 8116df0:	40080000 	.word	0x40080000
 8116df4:	08117c80 	.word	0x08117c80
 8116df8:	08117c90 	.word	0x08117c90
 8116dfc:	460b      	mov	r3, r1
 8116dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116e02:	e5d7      	b.n	81169b4 <__ieee754_pow+0x354>
 8116e04:	f04f 0a01 	mov.w	sl, #1
 8116e08:	e65e      	b.n	8116ac8 <__ieee754_pow+0x468>
 8116e0a:	a3b4      	add	r3, pc, #720	@ (adr r3, 81170dc <__ieee754_pow+0xa7c>)
 8116e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116e10:	4630      	mov	r0, r6
 8116e12:	4639      	mov	r1, r7
 8116e14:	f7e9 fad2 	bl	81003bc <__adddf3>
 8116e18:	4642      	mov	r2, r8
 8116e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8116e1e:	464b      	mov	r3, r9
 8116e20:	4620      	mov	r0, r4
 8116e22:	4629      	mov	r1, r5
 8116e24:	f7e9 fac8 	bl	81003b8 <__aeabi_dsub>
 8116e28:	4602      	mov	r2, r0
 8116e2a:	460b      	mov	r3, r1
 8116e2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116e30:	f7e9 ff0a 	bl	8100c48 <__aeabi_dcmpgt>
 8116e34:	2800      	cmp	r0, #0
 8116e36:	f47f ae00 	bne.w	8116a3a <__ieee754_pow+0x3da>
 8116e3a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8116e3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8116e42:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8116e46:	fa43 fa0a 	asr.w	sl, r3, sl
 8116e4a:	44da      	add	sl, fp
 8116e4c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8116e50:	489d      	ldr	r0, [pc, #628]	@ (81170c8 <__ieee754_pow+0xa68>)
 8116e52:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8116e56:	4108      	asrs	r0, r1
 8116e58:	ea00 030a 	and.w	r3, r0, sl
 8116e5c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8116e60:	f1c1 0114 	rsb	r1, r1, #20
 8116e64:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8116e68:	fa4a fa01 	asr.w	sl, sl, r1
 8116e6c:	f1bb 0f00 	cmp.w	fp, #0
 8116e70:	4640      	mov	r0, r8
 8116e72:	4649      	mov	r1, r9
 8116e74:	f04f 0200 	mov.w	r2, #0
 8116e78:	bfb8      	it	lt
 8116e7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8116e7e:	f7e9 fa9b 	bl	81003b8 <__aeabi_dsub>
 8116e82:	4680      	mov	r8, r0
 8116e84:	4689      	mov	r9, r1
 8116e86:	4632      	mov	r2, r6
 8116e88:	463b      	mov	r3, r7
 8116e8a:	4640      	mov	r0, r8
 8116e8c:	4649      	mov	r1, r9
 8116e8e:	f7e9 fa95 	bl	81003bc <__adddf3>
 8116e92:	2400      	movs	r4, #0
 8116e94:	a37c      	add	r3, pc, #496	@ (adr r3, 8117088 <__ieee754_pow+0xa28>)
 8116e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116e9a:	4620      	mov	r0, r4
 8116e9c:	460d      	mov	r5, r1
 8116e9e:	f7e9 fc43 	bl	8100728 <__aeabi_dmul>
 8116ea2:	4642      	mov	r2, r8
 8116ea4:	e9cd 0100 	strd	r0, r1, [sp]
 8116ea8:	464b      	mov	r3, r9
 8116eaa:	4620      	mov	r0, r4
 8116eac:	4629      	mov	r1, r5
 8116eae:	f7e9 fa83 	bl	81003b8 <__aeabi_dsub>
 8116eb2:	4602      	mov	r2, r0
 8116eb4:	460b      	mov	r3, r1
 8116eb6:	4630      	mov	r0, r6
 8116eb8:	4639      	mov	r1, r7
 8116eba:	f7e9 fa7d 	bl	81003b8 <__aeabi_dsub>
 8116ebe:	a374      	add	r3, pc, #464	@ (adr r3, 8117090 <__ieee754_pow+0xa30>)
 8116ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116ec4:	f7e9 fc30 	bl	8100728 <__aeabi_dmul>
 8116ec8:	a373      	add	r3, pc, #460	@ (adr r3, 8117098 <__ieee754_pow+0xa38>)
 8116eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116ece:	4680      	mov	r8, r0
 8116ed0:	4689      	mov	r9, r1
 8116ed2:	4620      	mov	r0, r4
 8116ed4:	4629      	mov	r1, r5
 8116ed6:	f7e9 fc27 	bl	8100728 <__aeabi_dmul>
 8116eda:	4602      	mov	r2, r0
 8116edc:	460b      	mov	r3, r1
 8116ede:	4640      	mov	r0, r8
 8116ee0:	4649      	mov	r1, r9
 8116ee2:	f7e9 fa6b 	bl	81003bc <__adddf3>
 8116ee6:	4604      	mov	r4, r0
 8116ee8:	460d      	mov	r5, r1
 8116eea:	4602      	mov	r2, r0
 8116eec:	460b      	mov	r3, r1
 8116eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116ef2:	f7e9 fa63 	bl	81003bc <__adddf3>
 8116ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8116efa:	4680      	mov	r8, r0
 8116efc:	4689      	mov	r9, r1
 8116efe:	f7e9 fa5b 	bl	81003b8 <__aeabi_dsub>
 8116f02:	4602      	mov	r2, r0
 8116f04:	460b      	mov	r3, r1
 8116f06:	4620      	mov	r0, r4
 8116f08:	4629      	mov	r1, r5
 8116f0a:	f7e9 fa55 	bl	81003b8 <__aeabi_dsub>
 8116f0e:	4642      	mov	r2, r8
 8116f10:	4606      	mov	r6, r0
 8116f12:	460f      	mov	r7, r1
 8116f14:	464b      	mov	r3, r9
 8116f16:	4640      	mov	r0, r8
 8116f18:	4649      	mov	r1, r9
 8116f1a:	f7e9 fc05 	bl	8100728 <__aeabi_dmul>
 8116f1e:	a360      	add	r3, pc, #384	@ (adr r3, 81170a0 <__ieee754_pow+0xa40>)
 8116f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116f24:	4604      	mov	r4, r0
 8116f26:	460d      	mov	r5, r1
 8116f28:	f7e9 fbfe 	bl	8100728 <__aeabi_dmul>
 8116f2c:	a35e      	add	r3, pc, #376	@ (adr r3, 81170a8 <__ieee754_pow+0xa48>)
 8116f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116f32:	f7e9 fa41 	bl	81003b8 <__aeabi_dsub>
 8116f36:	4622      	mov	r2, r4
 8116f38:	462b      	mov	r3, r5
 8116f3a:	f7e9 fbf5 	bl	8100728 <__aeabi_dmul>
 8116f3e:	a35c      	add	r3, pc, #368	@ (adr r3, 81170b0 <__ieee754_pow+0xa50>)
 8116f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116f44:	f7e9 fa3a 	bl	81003bc <__adddf3>
 8116f48:	4622      	mov	r2, r4
 8116f4a:	462b      	mov	r3, r5
 8116f4c:	f7e9 fbec 	bl	8100728 <__aeabi_dmul>
 8116f50:	a359      	add	r3, pc, #356	@ (adr r3, 81170b8 <__ieee754_pow+0xa58>)
 8116f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116f56:	f7e9 fa2f 	bl	81003b8 <__aeabi_dsub>
 8116f5a:	4622      	mov	r2, r4
 8116f5c:	462b      	mov	r3, r5
 8116f5e:	f7e9 fbe3 	bl	8100728 <__aeabi_dmul>
 8116f62:	a357      	add	r3, pc, #348	@ (adr r3, 81170c0 <__ieee754_pow+0xa60>)
 8116f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116f68:	f7e9 fa28 	bl	81003bc <__adddf3>
 8116f6c:	4622      	mov	r2, r4
 8116f6e:	462b      	mov	r3, r5
 8116f70:	f7e9 fbda 	bl	8100728 <__aeabi_dmul>
 8116f74:	4602      	mov	r2, r0
 8116f76:	460b      	mov	r3, r1
 8116f78:	4640      	mov	r0, r8
 8116f7a:	4649      	mov	r1, r9
 8116f7c:	f7e9 fa1c 	bl	81003b8 <__aeabi_dsub>
 8116f80:	4604      	mov	r4, r0
 8116f82:	460d      	mov	r5, r1
 8116f84:	4602      	mov	r2, r0
 8116f86:	460b      	mov	r3, r1
 8116f88:	4640      	mov	r0, r8
 8116f8a:	4649      	mov	r1, r9
 8116f8c:	f7e9 fbcc 	bl	8100728 <__aeabi_dmul>
 8116f90:	2200      	movs	r2, #0
 8116f92:	e9cd 0100 	strd	r0, r1, [sp]
 8116f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8116f9a:	4620      	mov	r0, r4
 8116f9c:	4629      	mov	r1, r5
 8116f9e:	f7e9 fa0b 	bl	81003b8 <__aeabi_dsub>
 8116fa2:	4602      	mov	r2, r0
 8116fa4:	460b      	mov	r3, r1
 8116fa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116faa:	f7e9 fce7 	bl	810097c <__aeabi_ddiv>
 8116fae:	4632      	mov	r2, r6
 8116fb0:	4604      	mov	r4, r0
 8116fb2:	460d      	mov	r5, r1
 8116fb4:	463b      	mov	r3, r7
 8116fb6:	4640      	mov	r0, r8
 8116fb8:	4649      	mov	r1, r9
 8116fba:	f7e9 fbb5 	bl	8100728 <__aeabi_dmul>
 8116fbe:	4632      	mov	r2, r6
 8116fc0:	463b      	mov	r3, r7
 8116fc2:	f7e9 f9fb 	bl	81003bc <__adddf3>
 8116fc6:	4602      	mov	r2, r0
 8116fc8:	460b      	mov	r3, r1
 8116fca:	4620      	mov	r0, r4
 8116fcc:	4629      	mov	r1, r5
 8116fce:	f7e9 f9f3 	bl	81003b8 <__aeabi_dsub>
 8116fd2:	4642      	mov	r2, r8
 8116fd4:	464b      	mov	r3, r9
 8116fd6:	f7e9 f9ef 	bl	81003b8 <__aeabi_dsub>
 8116fda:	460b      	mov	r3, r1
 8116fdc:	4602      	mov	r2, r0
 8116fde:	493b      	ldr	r1, [pc, #236]	@ (81170cc <__ieee754_pow+0xa6c>)
 8116fe0:	2000      	movs	r0, #0
 8116fe2:	f7e9 f9e9 	bl	81003b8 <__aeabi_dsub>
 8116fe6:	ec41 0b10 	vmov	d0, r0, r1
 8116fea:	ee10 3a90 	vmov	r3, s1
 8116fee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8116ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8116ff6:	da30      	bge.n	811705a <__ieee754_pow+0x9fa>
 8116ff8:	4650      	mov	r0, sl
 8116ffa:	f000 f87d 	bl	81170f8 <scalbn>
 8116ffe:	ec51 0b10 	vmov	r0, r1, d0
 8117002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8117006:	f7ff bbd2 	b.w	81167ae <__ieee754_pow+0x14e>
 811700a:	4c31      	ldr	r4, [pc, #196]	@ (81170d0 <__ieee754_pow+0xa70>)
 811700c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8117010:	42a3      	cmp	r3, r4
 8117012:	d91a      	bls.n	811704a <__ieee754_pow+0x9ea>
 8117014:	4b2f      	ldr	r3, [pc, #188]	@ (81170d4 <__ieee754_pow+0xa74>)
 8117016:	440b      	add	r3, r1
 8117018:	4303      	orrs	r3, r0
 811701a:	d009      	beq.n	8117030 <__ieee754_pow+0x9d0>
 811701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8117020:	2200      	movs	r2, #0
 8117022:	2300      	movs	r3, #0
 8117024:	f7e9 fdf2 	bl	8100c0c <__aeabi_dcmplt>
 8117028:	3800      	subs	r0, #0
 811702a:	bf18      	it	ne
 811702c:	2001      	movne	r0, #1
 811702e:	e42b      	b.n	8116888 <__ieee754_pow+0x228>
 8117030:	4642      	mov	r2, r8
 8117032:	464b      	mov	r3, r9
 8117034:	f7e9 f9c0 	bl	81003b8 <__aeabi_dsub>
 8117038:	4632      	mov	r2, r6
 811703a:	463b      	mov	r3, r7
 811703c:	f7e9 fdfa 	bl	8100c34 <__aeabi_dcmpge>
 8117040:	2800      	cmp	r0, #0
 8117042:	d1eb      	bne.n	811701c <__ieee754_pow+0x9bc>
 8117044:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 81170e4 <__ieee754_pow+0xa84>
 8117048:	e6f7      	b.n	8116e3a <__ieee754_pow+0x7da>
 811704a:	469a      	mov	sl, r3
 811704c:	4b22      	ldr	r3, [pc, #136]	@ (81170d8 <__ieee754_pow+0xa78>)
 811704e:	459a      	cmp	sl, r3
 8117050:	f63f aef3 	bhi.w	8116e3a <__ieee754_pow+0x7da>
 8117054:	f8dd a010 	ldr.w	sl, [sp, #16]
 8117058:	e715      	b.n	8116e86 <__ieee754_pow+0x826>
 811705a:	ec51 0b10 	vmov	r0, r1, d0
 811705e:	4619      	mov	r1, r3
 8117060:	e7cf      	b.n	8117002 <__ieee754_pow+0x9a2>
 8117062:	491a      	ldr	r1, [pc, #104]	@ (81170cc <__ieee754_pow+0xa6c>)
 8117064:	2000      	movs	r0, #0
 8117066:	f7ff bb18 	b.w	811669a <__ieee754_pow+0x3a>
 811706a:	2000      	movs	r0, #0
 811706c:	2100      	movs	r1, #0
 811706e:	f7ff bb14 	b.w	811669a <__ieee754_pow+0x3a>
 8117072:	4630      	mov	r0, r6
 8117074:	4639      	mov	r1, r7
 8117076:	f7ff bb10 	b.w	811669a <__ieee754_pow+0x3a>
 811707a:	460c      	mov	r4, r1
 811707c:	f7ff bb5e 	b.w	811673c <__ieee754_pow+0xdc>
 8117080:	2400      	movs	r4, #0
 8117082:	f7ff bb49 	b.w	8116718 <__ieee754_pow+0xb8>
 8117086:	bf00      	nop
 8117088:	00000000 	.word	0x00000000
 811708c:	3fe62e43 	.word	0x3fe62e43
 8117090:	fefa39ef 	.word	0xfefa39ef
 8117094:	3fe62e42 	.word	0x3fe62e42
 8117098:	0ca86c39 	.word	0x0ca86c39
 811709c:	be205c61 	.word	0xbe205c61
 81170a0:	72bea4d0 	.word	0x72bea4d0
 81170a4:	3e663769 	.word	0x3e663769
 81170a8:	c5d26bf1 	.word	0xc5d26bf1
 81170ac:	3ebbbd41 	.word	0x3ebbbd41
 81170b0:	af25de2c 	.word	0xaf25de2c
 81170b4:	3f11566a 	.word	0x3f11566a
 81170b8:	16bebd93 	.word	0x16bebd93
 81170bc:	3f66c16c 	.word	0x3f66c16c
 81170c0:	5555553e 	.word	0x5555553e
 81170c4:	3fc55555 	.word	0x3fc55555
 81170c8:	fff00000 	.word	0xfff00000
 81170cc:	3ff00000 	.word	0x3ff00000
 81170d0:	4090cbff 	.word	0x4090cbff
 81170d4:	3f6f3400 	.word	0x3f6f3400
 81170d8:	3fe00000 	.word	0x3fe00000
 81170dc:	652b82fe 	.word	0x652b82fe
 81170e0:	3c971547 	.word	0x3c971547
 81170e4:	4090cc00 	.word	0x4090cc00

081170e8 <fabs>:
 81170e8:	ec51 0b10 	vmov	r0, r1, d0
 81170ec:	4602      	mov	r2, r0
 81170ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 81170f2:	ec43 2b10 	vmov	d0, r2, r3
 81170f6:	4770      	bx	lr

081170f8 <scalbn>:
 81170f8:	b570      	push	{r4, r5, r6, lr}
 81170fa:	ec55 4b10 	vmov	r4, r5, d0
 81170fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8117102:	4606      	mov	r6, r0
 8117104:	462b      	mov	r3, r5
 8117106:	b991      	cbnz	r1, 811712e <scalbn+0x36>
 8117108:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 811710c:	4323      	orrs	r3, r4
 811710e:	d03d      	beq.n	811718c <scalbn+0x94>
 8117110:	4b35      	ldr	r3, [pc, #212]	@ (81171e8 <scalbn+0xf0>)
 8117112:	4620      	mov	r0, r4
 8117114:	4629      	mov	r1, r5
 8117116:	2200      	movs	r2, #0
 8117118:	f7e9 fb06 	bl	8100728 <__aeabi_dmul>
 811711c:	4b33      	ldr	r3, [pc, #204]	@ (81171ec <scalbn+0xf4>)
 811711e:	429e      	cmp	r6, r3
 8117120:	4604      	mov	r4, r0
 8117122:	460d      	mov	r5, r1
 8117124:	da0f      	bge.n	8117146 <scalbn+0x4e>
 8117126:	a328      	add	r3, pc, #160	@ (adr r3, 81171c8 <scalbn+0xd0>)
 8117128:	e9d3 2300 	ldrd	r2, r3, [r3]
 811712c:	e01e      	b.n	811716c <scalbn+0x74>
 811712e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8117132:	4291      	cmp	r1, r2
 8117134:	d10b      	bne.n	811714e <scalbn+0x56>
 8117136:	4622      	mov	r2, r4
 8117138:	4620      	mov	r0, r4
 811713a:	4629      	mov	r1, r5
 811713c:	f7e9 f93e 	bl	81003bc <__adddf3>
 8117140:	4604      	mov	r4, r0
 8117142:	460d      	mov	r5, r1
 8117144:	e022      	b.n	811718c <scalbn+0x94>
 8117146:	460b      	mov	r3, r1
 8117148:	f3c1 510a 	ubfx	r1, r1, #20, #11
 811714c:	3936      	subs	r1, #54	@ 0x36
 811714e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8117152:	4296      	cmp	r6, r2
 8117154:	dd0d      	ble.n	8117172 <scalbn+0x7a>
 8117156:	2d00      	cmp	r5, #0
 8117158:	a11d      	add	r1, pc, #116	@ (adr r1, 81171d0 <scalbn+0xd8>)
 811715a:	e9d1 0100 	ldrd	r0, r1, [r1]
 811715e:	da02      	bge.n	8117166 <scalbn+0x6e>
 8117160:	a11d      	add	r1, pc, #116	@ (adr r1, 81171d8 <scalbn+0xe0>)
 8117162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8117166:	a31a      	add	r3, pc, #104	@ (adr r3, 81171d0 <scalbn+0xd8>)
 8117168:	e9d3 2300 	ldrd	r2, r3, [r3]
 811716c:	f7e9 fadc 	bl	8100728 <__aeabi_dmul>
 8117170:	e7e6      	b.n	8117140 <scalbn+0x48>
 8117172:	1872      	adds	r2, r6, r1
 8117174:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8117178:	428a      	cmp	r2, r1
 811717a:	dcec      	bgt.n	8117156 <scalbn+0x5e>
 811717c:	2a00      	cmp	r2, #0
 811717e:	dd08      	ble.n	8117192 <scalbn+0x9a>
 8117180:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8117184:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8117188:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 811718c:	ec45 4b10 	vmov	d0, r4, r5
 8117190:	bd70      	pop	{r4, r5, r6, pc}
 8117192:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8117196:	da08      	bge.n	81171aa <scalbn+0xb2>
 8117198:	2d00      	cmp	r5, #0
 811719a:	a10b      	add	r1, pc, #44	@ (adr r1, 81171c8 <scalbn+0xd0>)
 811719c:	e9d1 0100 	ldrd	r0, r1, [r1]
 81171a0:	dac1      	bge.n	8117126 <scalbn+0x2e>
 81171a2:	a10f      	add	r1, pc, #60	@ (adr r1, 81171e0 <scalbn+0xe8>)
 81171a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 81171a8:	e7bd      	b.n	8117126 <scalbn+0x2e>
 81171aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 81171ae:	3236      	adds	r2, #54	@ 0x36
 81171b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 81171b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 81171b8:	4620      	mov	r0, r4
 81171ba:	4b0d      	ldr	r3, [pc, #52]	@ (81171f0 <scalbn+0xf8>)
 81171bc:	4629      	mov	r1, r5
 81171be:	2200      	movs	r2, #0
 81171c0:	e7d4      	b.n	811716c <scalbn+0x74>
 81171c2:	bf00      	nop
 81171c4:	f3af 8000 	nop.w
 81171c8:	c2f8f359 	.word	0xc2f8f359
 81171cc:	01a56e1f 	.word	0x01a56e1f
 81171d0:	8800759c 	.word	0x8800759c
 81171d4:	7e37e43c 	.word	0x7e37e43c
 81171d8:	8800759c 	.word	0x8800759c
 81171dc:	fe37e43c 	.word	0xfe37e43c
 81171e0:	c2f8f359 	.word	0xc2f8f359
 81171e4:	81a56e1f 	.word	0x81a56e1f
 81171e8:	43500000 	.word	0x43500000
 81171ec:	ffff3cb0 	.word	0xffff3cb0
 81171f0:	3c900000 	.word	0x3c900000

081171f4 <with_errno>:
 81171f4:	b510      	push	{r4, lr}
 81171f6:	ed2d 8b02 	vpush	{d8}
 81171fa:	eeb0 8a40 	vmov.f32	s16, s0
 81171fe:	eef0 8a60 	vmov.f32	s17, s1
 8117202:	4604      	mov	r4, r0
 8117204:	f7fb ff70 	bl	81130e8 <__errno>
 8117208:	eeb0 0a48 	vmov.f32	s0, s16
 811720c:	eef0 0a68 	vmov.f32	s1, s17
 8117210:	ecbd 8b02 	vpop	{d8}
 8117214:	6004      	str	r4, [r0, #0]
 8117216:	bd10      	pop	{r4, pc}

08117218 <xflow>:
 8117218:	4603      	mov	r3, r0
 811721a:	b507      	push	{r0, r1, r2, lr}
 811721c:	ec51 0b10 	vmov	r0, r1, d0
 8117220:	b183      	cbz	r3, 8117244 <xflow+0x2c>
 8117222:	4602      	mov	r2, r0
 8117224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8117228:	e9cd 2300 	strd	r2, r3, [sp]
 811722c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8117230:	f7e9 fa7a 	bl	8100728 <__aeabi_dmul>
 8117234:	ec41 0b10 	vmov	d0, r0, r1
 8117238:	2022      	movs	r0, #34	@ 0x22
 811723a:	b003      	add	sp, #12
 811723c:	f85d eb04 	ldr.w	lr, [sp], #4
 8117240:	f7ff bfd8 	b.w	81171f4 <with_errno>
 8117244:	4602      	mov	r2, r0
 8117246:	460b      	mov	r3, r1
 8117248:	e7ee      	b.n	8117228 <xflow+0x10>
 811724a:	0000      	movs	r0, r0
 811724c:	0000      	movs	r0, r0
	...

08117250 <__math_uflow>:
 8117250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8117258 <__math_uflow+0x8>
 8117254:	f7ff bfe0 	b.w	8117218 <xflow>
 8117258:	00000000 	.word	0x00000000
 811725c:	10000000 	.word	0x10000000

08117260 <__math_oflow>:
 8117260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8117268 <__math_oflow+0x8>
 8117264:	f7ff bfd8 	b.w	8117218 <xflow>
 8117268:	00000000 	.word	0x00000000
 811726c:	70000000 	.word	0x70000000

08117270 <__ieee754_sqrt>:
 8117270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117274:	4a68      	ldr	r2, [pc, #416]	@ (8117418 <__ieee754_sqrt+0x1a8>)
 8117276:	ec55 4b10 	vmov	r4, r5, d0
 811727a:	43aa      	bics	r2, r5
 811727c:	462b      	mov	r3, r5
 811727e:	4621      	mov	r1, r4
 8117280:	d110      	bne.n	81172a4 <__ieee754_sqrt+0x34>
 8117282:	4622      	mov	r2, r4
 8117284:	4620      	mov	r0, r4
 8117286:	4629      	mov	r1, r5
 8117288:	f7e9 fa4e 	bl	8100728 <__aeabi_dmul>
 811728c:	4602      	mov	r2, r0
 811728e:	460b      	mov	r3, r1
 8117290:	4620      	mov	r0, r4
 8117292:	4629      	mov	r1, r5
 8117294:	f7e9 f892 	bl	81003bc <__adddf3>
 8117298:	4604      	mov	r4, r0
 811729a:	460d      	mov	r5, r1
 811729c:	ec45 4b10 	vmov	d0, r4, r5
 81172a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81172a4:	2d00      	cmp	r5, #0
 81172a6:	dc0e      	bgt.n	81172c6 <__ieee754_sqrt+0x56>
 81172a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 81172ac:	4322      	orrs	r2, r4
 81172ae:	d0f5      	beq.n	811729c <__ieee754_sqrt+0x2c>
 81172b0:	b19d      	cbz	r5, 81172da <__ieee754_sqrt+0x6a>
 81172b2:	4622      	mov	r2, r4
 81172b4:	4620      	mov	r0, r4
 81172b6:	4629      	mov	r1, r5
 81172b8:	f7e9 f87e 	bl	81003b8 <__aeabi_dsub>
 81172bc:	4602      	mov	r2, r0
 81172be:	460b      	mov	r3, r1
 81172c0:	f7e9 fb5c 	bl	810097c <__aeabi_ddiv>
 81172c4:	e7e8      	b.n	8117298 <__ieee754_sqrt+0x28>
 81172c6:	152a      	asrs	r2, r5, #20
 81172c8:	d115      	bne.n	81172f6 <__ieee754_sqrt+0x86>
 81172ca:	2000      	movs	r0, #0
 81172cc:	e009      	b.n	81172e2 <__ieee754_sqrt+0x72>
 81172ce:	0acb      	lsrs	r3, r1, #11
 81172d0:	3a15      	subs	r2, #21
 81172d2:	0549      	lsls	r1, r1, #21
 81172d4:	2b00      	cmp	r3, #0
 81172d6:	d0fa      	beq.n	81172ce <__ieee754_sqrt+0x5e>
 81172d8:	e7f7      	b.n	81172ca <__ieee754_sqrt+0x5a>
 81172da:	462a      	mov	r2, r5
 81172dc:	e7fa      	b.n	81172d4 <__ieee754_sqrt+0x64>
 81172de:	005b      	lsls	r3, r3, #1
 81172e0:	3001      	adds	r0, #1
 81172e2:	02dc      	lsls	r4, r3, #11
 81172e4:	d5fb      	bpl.n	81172de <__ieee754_sqrt+0x6e>
 81172e6:	1e44      	subs	r4, r0, #1
 81172e8:	1b12      	subs	r2, r2, r4
 81172ea:	f1c0 0420 	rsb	r4, r0, #32
 81172ee:	fa21 f404 	lsr.w	r4, r1, r4
 81172f2:	4323      	orrs	r3, r4
 81172f4:	4081      	lsls	r1, r0
 81172f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81172fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 81172fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8117302:	07d2      	lsls	r2, r2, #31
 8117304:	bf5c      	itt	pl
 8117306:	005b      	lslpl	r3, r3, #1
 8117308:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 811730c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8117310:	bf58      	it	pl
 8117312:	0049      	lslpl	r1, r1, #1
 8117314:	2600      	movs	r6, #0
 8117316:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 811731a:	106d      	asrs	r5, r5, #1
 811731c:	0049      	lsls	r1, r1, #1
 811731e:	2016      	movs	r0, #22
 8117320:	4632      	mov	r2, r6
 8117322:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8117326:	1917      	adds	r7, r2, r4
 8117328:	429f      	cmp	r7, r3
 811732a:	bfde      	ittt	le
 811732c:	193a      	addle	r2, r7, r4
 811732e:	1bdb      	suble	r3, r3, r7
 8117330:	1936      	addle	r6, r6, r4
 8117332:	0fcf      	lsrs	r7, r1, #31
 8117334:	3801      	subs	r0, #1
 8117336:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 811733a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 811733e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8117342:	d1f0      	bne.n	8117326 <__ieee754_sqrt+0xb6>
 8117344:	4604      	mov	r4, r0
 8117346:	2720      	movs	r7, #32
 8117348:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 811734c:	429a      	cmp	r2, r3
 811734e:	eb00 0e0c 	add.w	lr, r0, ip
 8117352:	db02      	blt.n	811735a <__ieee754_sqrt+0xea>
 8117354:	d113      	bne.n	811737e <__ieee754_sqrt+0x10e>
 8117356:	458e      	cmp	lr, r1
 8117358:	d811      	bhi.n	811737e <__ieee754_sqrt+0x10e>
 811735a:	f1be 0f00 	cmp.w	lr, #0
 811735e:	eb0e 000c 	add.w	r0, lr, ip
 8117362:	da42      	bge.n	81173ea <__ieee754_sqrt+0x17a>
 8117364:	2800      	cmp	r0, #0
 8117366:	db40      	blt.n	81173ea <__ieee754_sqrt+0x17a>
 8117368:	f102 0801 	add.w	r8, r2, #1
 811736c:	1a9b      	subs	r3, r3, r2
 811736e:	458e      	cmp	lr, r1
 8117370:	bf88      	it	hi
 8117372:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8117376:	eba1 010e 	sub.w	r1, r1, lr
 811737a:	4464      	add	r4, ip
 811737c:	4642      	mov	r2, r8
 811737e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8117382:	3f01      	subs	r7, #1
 8117384:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8117388:	ea4f 0141 	mov.w	r1, r1, lsl #1
 811738c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8117390:	d1dc      	bne.n	811734c <__ieee754_sqrt+0xdc>
 8117392:	4319      	orrs	r1, r3
 8117394:	d01b      	beq.n	81173ce <__ieee754_sqrt+0x15e>
 8117396:	f8df a084 	ldr.w	sl, [pc, #132]	@ 811741c <__ieee754_sqrt+0x1ac>
 811739a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8117420 <__ieee754_sqrt+0x1b0>
 811739e:	e9da 0100 	ldrd	r0, r1, [sl]
 81173a2:	e9db 2300 	ldrd	r2, r3, [fp]
 81173a6:	f7e9 f807 	bl	81003b8 <__aeabi_dsub>
 81173aa:	e9da 8900 	ldrd	r8, r9, [sl]
 81173ae:	4602      	mov	r2, r0
 81173b0:	460b      	mov	r3, r1
 81173b2:	4640      	mov	r0, r8
 81173b4:	4649      	mov	r1, r9
 81173b6:	f7e9 fc33 	bl	8100c20 <__aeabi_dcmple>
 81173ba:	b140      	cbz	r0, 81173ce <__ieee754_sqrt+0x15e>
 81173bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 81173c0:	e9da 0100 	ldrd	r0, r1, [sl]
 81173c4:	e9db 2300 	ldrd	r2, r3, [fp]
 81173c8:	d111      	bne.n	81173ee <__ieee754_sqrt+0x17e>
 81173ca:	3601      	adds	r6, #1
 81173cc:	463c      	mov	r4, r7
 81173ce:	1072      	asrs	r2, r6, #1
 81173d0:	0863      	lsrs	r3, r4, #1
 81173d2:	07f1      	lsls	r1, r6, #31
 81173d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 81173d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 81173dc:	bf48      	it	mi
 81173de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 81173e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 81173e6:	4618      	mov	r0, r3
 81173e8:	e756      	b.n	8117298 <__ieee754_sqrt+0x28>
 81173ea:	4690      	mov	r8, r2
 81173ec:	e7be      	b.n	811736c <__ieee754_sqrt+0xfc>
 81173ee:	f7e8 ffe5 	bl	81003bc <__adddf3>
 81173f2:	e9da 8900 	ldrd	r8, r9, [sl]
 81173f6:	4602      	mov	r2, r0
 81173f8:	460b      	mov	r3, r1
 81173fa:	4640      	mov	r0, r8
 81173fc:	4649      	mov	r1, r9
 81173fe:	f7e9 fc05 	bl	8100c0c <__aeabi_dcmplt>
 8117402:	b120      	cbz	r0, 811740e <__ieee754_sqrt+0x19e>
 8117404:	1ca0      	adds	r0, r4, #2
 8117406:	bf08      	it	eq
 8117408:	3601      	addeq	r6, #1
 811740a:	3402      	adds	r4, #2
 811740c:	e7df      	b.n	81173ce <__ieee754_sqrt+0x15e>
 811740e:	1c63      	adds	r3, r4, #1
 8117410:	f023 0401 	bic.w	r4, r3, #1
 8117414:	e7db      	b.n	81173ce <__ieee754_sqrt+0x15e>
 8117416:	bf00      	nop
 8117418:	7ff00000 	.word	0x7ff00000
 811741c:	10000290 	.word	0x10000290
 8117420:	10000288 	.word	0x10000288

08117424 <_init>:
 8117424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117426:	bf00      	nop
 8117428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811742a:	bc08      	pop	{r3}
 811742c:	469e      	mov	lr, r3
 811742e:	4770      	bx	lr

08117430 <_fini>:
 8117430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117432:	bf00      	nop
 8117434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117436:	bc08      	pop	{r3}
 8117438:	469e      	mov	lr, r3
 811743a:	4770      	bx	lr
